#include <GLES2/gl2.h>
#include "gl_intercept_dummy.h"
#include <string.h>

char *__gl_intercept_formatenum(GLenum val) {
  switch (val) {
  case 0x0000:
    return "GL_POINTS";
  case 0x0001:
    return "GL_LINES";
  case 0x0002:
    return "GL_LINE_LOOP";
  case 0x0003:
    return "GL_LINE_STRIP";
  case 0x0004:
    return "GL_TRIANGLES";
  case 0x0005:
    return "GL_TRIANGLE_STRIP";
  case 0x0006:
    return "GL_TRIANGLE_FAN";
  case 0x0007:
    return "GL_QUADS";
  case 0x0008:
    return "GL_QUAD_STRIP";
  case 0x0009:
    return "GL_POLYGON";
  case 0x000A:
    return "GL_LINES_ADJACENCY";
  case 0x000B:
    return "GL_LINE_STRIP_ADJACENCY";
  case 0x000C:
    return "GL_TRIANGLES_ADJACENCY";
  case 0x000D:
    return "GL_TRIANGLE_STRIP_ADJACENCY";
  case 0x000E:
    return "GL_PATCHES";
  case 0x0100:
    return "GL_ACCUM";
  case 0x0101:
    return "GL_LOAD";
  case 0x0102:
    return "GL_RETURN";
  case 0x0103:
    return "GL_MULT";
  case 0x0104:
    return "GL_ADD";
  case 0x0200:
    return "GL_NEVER";
  case 0x0201:
    return "GL_LESS";
  case 0x0202:
    return "GL_EQUAL";
  case 0x0203:
    return "GL_LEQUAL";
  case 0x0204:
    return "GL_GREATER";
  case 0x0205:
    return "GL_NOTEQUAL";
  case 0x0206:
    return "GL_GEQUAL";
  case 0x0207:
    return "GL_ALWAYS";
  case 0x0300:
    return "GL_SRC_COLOR";
  case 0x0301:
    return "GL_ONE_MINUS_SRC_COLOR";
  case 0x0302:
    return "GL_SRC_ALPHA";
  case 0x0303:
    return "GL_ONE_MINUS_SRC_ALPHA";
  case 0x0304:
    return "GL_DST_ALPHA";
  case 0x0305:
    return "GL_ONE_MINUS_DST_ALPHA";
  case 0x0306:
    return "GL_DST_COLOR";
  case 0x0307:
    return "GL_ONE_MINUS_DST_COLOR";
  case 0x0308:
    return "GL_SRC_ALPHA_SATURATE";
  case 0x0400:
    return "GL_FRONT_LEFT";
  case 0x0401:
    return "GL_FRONT_RIGHT";
  case 0x0402:
    return "GL_BACK_LEFT";
  case 0x0403:
    return "GL_BACK_RIGHT";
  case 0x0404:
    return "GL_FRONT";
  case 0x0405:
    return "GL_BACK";
  case 0x0406:
    return "GL_LEFT";
  case 0x0407:
    return "GL_RIGHT";
  case 0x0408:
    return "GL_FRONT_AND_BACK";
  case 0x0409:
    return "GL_AUX0";
  case 0x040A:
    return "GL_AUX1";
  case 0x040B:
    return "GL_AUX2";
  case 0x040C:
    return "GL_AUX3";
  case 0x0500:
    return "GL_INVALID_ENUM";
  case 0x0501:
    return "GL_INVALID_VALUE";
  case 0x0502:
    return "GL_INVALID_OPERATION";
  case 0x0503:
    return "GL_STACK_OVERFLOW";
  case 0x0504:
    return "GL_STACK_UNDERFLOW";
  case 0x0505:
    return "GL_OUT_OF_MEMORY";
  case 0x0506:
    return "GL_INVALID_FRAMEBUFFER_OPERATION";
  case 0x0507:
    return "GL_CONTEXT_LOST";
  case 0x0600:
    return "GL_2D";
  case 0x0601:
    return "GL_3D";
  case 0x0602:
    return "GL_3D_COLOR";
  case 0x0603:
    return "GL_3D_COLOR_TEXTURE";
  case 0x0604:
    return "GL_4D_COLOR_TEXTURE";
  case 0x0700:
    return "GL_PASS_THROUGH_TOKEN";
  case 0x0701:
    return "GL_POINT_TOKEN";
  case 0x0702:
    return "GL_LINE_TOKEN";
  case 0x0703:
    return "GL_POLYGON_TOKEN";
  case 0x0704:
    return "GL_BITMAP_TOKEN";
  case 0x0705:
    return "GL_DRAW_PIXEL_TOKEN";
  case 0x0706:
    return "GL_COPY_PIXEL_TOKEN";
  case 0x0707:
    return "GL_LINE_RESET_TOKEN";
  case 0x0800:
    return "GL_EXP";
  case 0x0801:
    return "GL_EXP2";
  case 0x0900:
    return "GL_CW";
  case 0x0901:
    return "GL_CCW";
  case 0x0A00:
    return "GL_COEFF";
  case 0x0A01:
    return "GL_ORDER";
  case 0x0A02:
    return "GL_DOMAIN";
  case 0x0B00:
    return "GL_CURRENT_COLOR";
  case 0x0B01:
    return "GL_CURRENT_INDEX";
  case 0x0B02:
    return "GL_CURRENT_NORMAL";
  case 0x0B03:
    return "GL_CURRENT_TEXTURE_COORDS";
  case 0x0B04:
    return "GL_CURRENT_RASTER_COLOR";
  case 0x0B05:
    return "GL_CURRENT_RASTER_INDEX";
  case 0x0B06:
    return "GL_CURRENT_RASTER_TEXTURE_COORDS";
  case 0x0B07:
    return "GL_CURRENT_RASTER_POSITION";
  case 0x0B08:
    return "GL_CURRENT_RASTER_POSITION_VALID";
  case 0x0B09:
    return "GL_CURRENT_RASTER_DISTANCE";
  case 0x0B10:
    return "GL_POINT_SMOOTH";
  case 0x0B11:
    return "GL_POINT_SIZE";
  case 0x0B12:
    return "GL_POINT_SIZE_RANGE";
  case 0x0B13:
    return "GL_POINT_SIZE_GRANULARITY";
  case 0x0B20:
    return "GL_LINE_SMOOTH";
  case 0x0B21:
    return "GL_LINE_WIDTH";
  case 0x0B22:
    return "GL_LINE_WIDTH_RANGE";
  case 0x0B23:
    return "GL_LINE_WIDTH_GRANULARITY";
  case 0x0B24:
    return "GL_LINE_STIPPLE";
  case 0x0B25:
    return "GL_LINE_STIPPLE_PATTERN";
  case 0x0B26:
    return "GL_LINE_STIPPLE_REPEAT";
  case 0x0B30:
    return "GL_LIST_MODE";
  case 0x0B31:
    return "GL_MAX_LIST_NESTING";
  case 0x0B32:
    return "GL_LIST_BASE";
  case 0x0B33:
    return "GL_LIST_INDEX";
  case 0x0B40:
    return "GL_POLYGON_MODE";
  case 0x0B41:
    return "GL_POLYGON_SMOOTH";
  case 0x0B42:
    return "GL_POLYGON_STIPPLE";
  case 0x0B43:
    return "GL_EDGE_FLAG";
  case 0x0B44:
    return "GL_CULL_FACE";
  case 0x0B45:
    return "GL_CULL_FACE_MODE";
  case 0x0B46:
    return "GL_FRONT_FACE";
  case 0x0B50:
    return "GL_LIGHTING";
  case 0x0B51:
    return "GL_LIGHT_MODEL_LOCAL_VIEWER";
  case 0x0B52:
    return "GL_LIGHT_MODEL_TWO_SIDE";
  case 0x0B53:
    return "GL_LIGHT_MODEL_AMBIENT";
  case 0x0B54:
    return "GL_SHADE_MODEL";
  case 0x0B55:
    return "GL_COLOR_MATERIAL_FACE";
  case 0x0B56:
    return "GL_COLOR_MATERIAL_PARAMETER";
  case 0x0B57:
    return "GL_COLOR_MATERIAL";
  case 0x0B60:
    return "GL_FOG";
  case 0x0B61:
    return "GL_FOG_INDEX";
  case 0x0B62:
    return "GL_FOG_DENSITY";
  case 0x0B63:
    return "GL_FOG_START";
  case 0x0B64:
    return "GL_FOG_END";
  case 0x0B65:
    return "GL_FOG_MODE";
  case 0x0B66:
    return "GL_FOG_COLOR";
  case 0x0B70:
    return "GL_DEPTH_RANGE";
  case 0x0B71:
    return "GL_DEPTH_TEST";
  case 0x0B72:
    return "GL_DEPTH_WRITEMASK";
  case 0x0B73:
    return "GL_DEPTH_CLEAR_VALUE";
  case 0x0B74:
    return "GL_DEPTH_FUNC";
  case 0x0B80:
    return "GL_ACCUM_CLEAR_VALUE";
  case 0x0B90:
    return "GL_STENCIL_TEST";
  case 0x0B91:
    return "GL_STENCIL_CLEAR_VALUE";
  case 0x0B92:
    return "GL_STENCIL_FUNC";
  case 0x0B93:
    return "GL_STENCIL_VALUE_MASK";
  case 0x0B94:
    return "GL_STENCIL_FAIL";
  case 0x0B95:
    return "GL_STENCIL_PASS_DEPTH_FAIL";
  case 0x0B96:
    return "GL_STENCIL_PASS_DEPTH_PASS";
  case 0x0B97:
    return "GL_STENCIL_REF";
  case 0x0B98:
    return "GL_STENCIL_WRITEMASK";
  case 0x0BA0:
    return "GL_MATRIX_MODE";
  case 0x0BA1:
    return "GL_NORMALIZE";
  case 0x0BA2:
    return "GL_VIEWPORT";
  case 0x0BA3:
    return "GL_MODELVIEW_STACK_DEPTH";
  case 0x0BA4:
    return "GL_PROJECTION_STACK_DEPTH";
  case 0x0BA5:
    return "GL_TEXTURE_STACK_DEPTH";
  case 0x0BA6:
    return "GL_MODELVIEW_MATRIX";
  case 0x0BA7:
    return "GL_PROJECTION_MATRIX";
  case 0x0BA8:
    return "GL_TEXTURE_MATRIX";
  case 0x0BB0:
    return "GL_ATTRIB_STACK_DEPTH";
  case 0x0BB1:
    return "GL_CLIENT_ATTRIB_STACK_DEPTH";
  case 0x0BC0:
    return "GL_ALPHA_TEST";
  case 0x0BC1:
    return "GL_ALPHA_TEST_FUNC";
  case 0x0BC2:
    return "GL_ALPHA_TEST_REF";
  case 0x0BD0:
    return "GL_DITHER";
  case 0x0BE0:
    return "GL_BLEND_DST";
  case 0x0BE1:
    return "GL_BLEND_SRC";
  case 0x0BE2:
    return "GL_BLEND";
  case 0x0BF0:
    return "GL_LOGIC_OP_MODE";
  case 0x0BF1:
    return "GL_INDEX_LOGIC_OP";
  case 0x0BF2:
    return "GL_COLOR_LOGIC_OP";
  case 0x0C00:
    return "GL_AUX_BUFFERS";
  case 0x0C01:
    return "GL_DRAW_BUFFER";
  case 0x0C02:
    return "GL_READ_BUFFER";
  case 0x0C10:
    return "GL_SCISSOR_BOX";
  case 0x0C11:
    return "GL_SCISSOR_TEST";
  case 0x0C20:
    return "GL_INDEX_CLEAR_VALUE";
  case 0x0C21:
    return "GL_INDEX_WRITEMASK";
  case 0x0C22:
    return "GL_COLOR_CLEAR_VALUE";
  case 0x0C23:
    return "GL_COLOR_WRITEMASK";
  case 0x0C30:
    return "GL_INDEX_MODE";
  case 0x0C31:
    return "GL_RGBA_MODE";
  case 0x0C32:
    return "GL_DOUBLEBUFFER";
  case 0x0C33:
    return "GL_STEREO";
  case 0x0C40:
    return "GL_RENDER_MODE";
  case 0x0C50:
    return "GL_PERSPECTIVE_CORRECTION_HINT";
  case 0x0C51:
    return "GL_POINT_SMOOTH_HINT";
  case 0x0C52:
    return "GL_LINE_SMOOTH_HINT";
  case 0x0C53:
    return "GL_POLYGON_SMOOTH_HINT";
  case 0x0C54:
    return "GL_FOG_HINT";
  case 0x0C60:
    return "GL_TEXTURE_GEN_S";
  case 0x0C61:
    return "GL_TEXTURE_GEN_T";
  case 0x0C62:
    return "GL_TEXTURE_GEN_R";
  case 0x0C63:
    return "GL_TEXTURE_GEN_Q";
  case 0x0C70:
    return "GL_PIXEL_MAP_I_TO_I";
  case 0x0C71:
    return "GL_PIXEL_MAP_S_TO_S";
  case 0x0C72:
    return "GL_PIXEL_MAP_I_TO_R";
  case 0x0C73:
    return "GL_PIXEL_MAP_I_TO_G";
  case 0x0C74:
    return "GL_PIXEL_MAP_I_TO_B";
  case 0x0C75:
    return "GL_PIXEL_MAP_I_TO_A";
  case 0x0C76:
    return "GL_PIXEL_MAP_R_TO_R";
  case 0x0C77:
    return "GL_PIXEL_MAP_G_TO_G";
  case 0x0C78:
    return "GL_PIXEL_MAP_B_TO_B";
  case 0x0C79:
    return "GL_PIXEL_MAP_A_TO_A";
  case 0x0CB0:
    return "GL_PIXEL_MAP_I_TO_I_SIZE";
  case 0x0CB1:
    return "GL_PIXEL_MAP_S_TO_S_SIZE";
  case 0x0CB2:
    return "GL_PIXEL_MAP_I_TO_R_SIZE";
  case 0x0CB3:
    return "GL_PIXEL_MAP_I_TO_G_SIZE";
  case 0x0CB4:
    return "GL_PIXEL_MAP_I_TO_B_SIZE";
  case 0x0CB5:
    return "GL_PIXEL_MAP_I_TO_A_SIZE";
  case 0x0CB6:
    return "GL_PIXEL_MAP_R_TO_R_SIZE";
  case 0x0CB7:
    return "GL_PIXEL_MAP_G_TO_G_SIZE";
  case 0x0CB8:
    return "GL_PIXEL_MAP_B_TO_B_SIZE";
  case 0x0CB9:
    return "GL_PIXEL_MAP_A_TO_A_SIZE";
  case 0x0CF0:
    return "GL_UNPACK_SWAP_BYTES";
  case 0x0CF1:
    return "GL_UNPACK_LSB_FIRST";
  case 0x0CF2:
    return "GL_UNPACK_ROW_LENGTH";
  case 0x0CF3:
    return "GL_UNPACK_SKIP_ROWS";
  case 0x0CF4:
    return "GL_UNPACK_SKIP_PIXELS";
  case 0x0CF5:
    return "GL_UNPACK_ALIGNMENT";
  case 0x0D00:
    return "GL_PACK_SWAP_BYTES";
  case 0x0D01:
    return "GL_PACK_LSB_FIRST";
  case 0x0D02:
    return "GL_PACK_ROW_LENGTH";
  case 0x0D03:
    return "GL_PACK_SKIP_ROWS";
  case 0x0D04:
    return "GL_PACK_SKIP_PIXELS";
  case 0x0D05:
    return "GL_PACK_ALIGNMENT";
  case 0x0D10:
    return "GL_MAP_COLOR";
  case 0x0D11:
    return "GL_MAP_STENCIL";
  case 0x0D12:
    return "GL_INDEX_SHIFT";
  case 0x0D13:
    return "GL_INDEX_OFFSET";
  case 0x0D14:
    return "GL_RED_SCALE";
  case 0x0D15:
    return "GL_RED_BIAS";
  case 0x0D16:
    return "GL_ZOOM_X";
  case 0x0D17:
    return "GL_ZOOM_Y";
  case 0x0D18:
    return "GL_GREEN_SCALE";
  case 0x0D19:
    return "GL_GREEN_BIAS";
  case 0x0D1A:
    return "GL_BLUE_SCALE";
  case 0x0D1B:
    return "GL_BLUE_BIAS";
  case 0x0D1C:
    return "GL_ALPHA_SCALE";
  case 0x0D1D:
    return "GL_ALPHA_BIAS";
  case 0x0D1E:
    return "GL_DEPTH_SCALE";
  case 0x0D1F:
    return "GL_DEPTH_BIAS";
  case 0x0D30:
    return "GL_MAX_EVAL_ORDER";
  case 0x0D31:
    return "GL_MAX_LIGHTS";
  case 0x0D32:
    return "GL_MAX_CLIP_PLANES";
  case 0x0D33:
    return "GL_MAX_TEXTURE_SIZE";
  case 0x0D34:
    return "GL_MAX_PIXEL_MAP_TABLE";
  case 0x0D35:
    return "GL_MAX_ATTRIB_STACK_DEPTH";
  case 0x0D36:
    return "GL_MAX_MODELVIEW_STACK_DEPTH";
  case 0x0D37:
    return "GL_MAX_NAME_STACK_DEPTH";
  case 0x0D38:
    return "GL_MAX_PROJECTION_STACK_DEPTH";
  case 0x0D39:
    return "GL_MAX_TEXTURE_STACK_DEPTH";
  case 0x0D3A:
    return "GL_MAX_VIEWPORT_DIMS";
  case 0x0D3B:
    return "GL_MAX_CLIENT_ATTRIB_STACK_DEPTH";
  case 0x0D50:
    return "GL_SUBPIXEL_BITS";
  case 0x0D51:
    return "GL_INDEX_BITS";
  case 0x0D52:
    return "GL_RED_BITS";
  case 0x0D53:
    return "GL_GREEN_BITS";
  case 0x0D54:
    return "GL_BLUE_BITS";
  case 0x0D55:
    return "GL_ALPHA_BITS";
  case 0x0D56:
    return "GL_DEPTH_BITS";
  case 0x0D57:
    return "GL_STENCIL_BITS";
  case 0x0D58:
    return "GL_ACCUM_RED_BITS";
  case 0x0D59:
    return "GL_ACCUM_GREEN_BITS";
  case 0x0D5A:
    return "GL_ACCUM_BLUE_BITS";
  case 0x0D5B:
    return "GL_ACCUM_ALPHA_BITS";
  case 0x0D70:
    return "GL_NAME_STACK_DEPTH";
  case 0x0D80:
    return "GL_AUTO_NORMAL";
  case 0x0D90:
    return "GL_MAP1_COLOR_4";
  case 0x0D91:
    return "GL_MAP1_INDEX";
  case 0x0D92:
    return "GL_MAP1_NORMAL";
  case 0x0D93:
    return "GL_MAP1_TEXTURE_COORD_1";
  case 0x0D94:
    return "GL_MAP1_TEXTURE_COORD_2";
  case 0x0D95:
    return "GL_MAP1_TEXTURE_COORD_3";
  case 0x0D96:
    return "GL_MAP1_TEXTURE_COORD_4";
  case 0x0D97:
    return "GL_MAP1_VERTEX_3";
  case 0x0D98:
    return "GL_MAP1_VERTEX_4";
  case 0x0DB0:
    return "GL_MAP2_COLOR_4";
  case 0x0DB1:
    return "GL_MAP2_INDEX";
  case 0x0DB2:
    return "GL_MAP2_NORMAL";
  case 0x0DB3:
    return "GL_MAP2_TEXTURE_COORD_1";
  case 0x0DB4:
    return "GL_MAP2_TEXTURE_COORD_2";
  case 0x0DB5:
    return "GL_MAP2_TEXTURE_COORD_3";
  case 0x0DB6:
    return "GL_MAP2_TEXTURE_COORD_4";
  case 0x0DB7:
    return "GL_MAP2_VERTEX_3";
  case 0x0DB8:
    return "GL_MAP2_VERTEX_4";
  case 0x0DD0:
    return "GL_MAP1_GRID_DOMAIN";
  case 0x0DD1:
    return "GL_MAP1_GRID_SEGMENTS";
  case 0x0DD2:
    return "GL_MAP2_GRID_DOMAIN";
  case 0x0DD3:
    return "GL_MAP2_GRID_SEGMENTS";
  case 0x0DE0:
    return "GL_TEXTURE_1D";
  case 0x0DE1:
    return "GL_TEXTURE_2D";
  case 0x0DF0:
    return "GL_FEEDBACK_BUFFER_POINTER";
  case 0x0DF1:
    return "GL_FEEDBACK_BUFFER_SIZE";
  case 0x0DF2:
    return "GL_FEEDBACK_BUFFER_TYPE";
  case 0x0DF3:
    return "GL_SELECTION_BUFFER_POINTER";
  case 0x0DF4:
    return "GL_SELECTION_BUFFER_SIZE";
  case 0x1000:
    return "GL_TEXTURE_WIDTH";
  case 0x1001:
    return "GL_TEXTURE_HEIGHT";
  case 0x1003:
    return "GL_TEXTURE_INTERNAL_FORMAT";
  case 0x1004:
    return "GL_TEXTURE_BORDER_COLOR";
  case 0x1005:
    return "GL_TEXTURE_BORDER";
  case 0x1006:
    return "GL_TEXTURE_TARGET";
  case 0x1100:
    return "GL_DONT_CARE";
  case 0x1101:
    return "GL_FASTEST";
  case 0x1102:
    return "GL_NICEST";
  case 0x1200:
    return "GL_AMBIENT";
  case 0x1201:
    return "GL_DIFFUSE";
  case 0x1202:
    return "GL_SPECULAR";
  case 0x1203:
    return "GL_POSITION";
  case 0x1204:
    return "GL_SPOT_DIRECTION";
  case 0x1205:
    return "GL_SPOT_EXPONENT";
  case 0x1206:
    return "GL_SPOT_CUTOFF";
  case 0x1207:
    return "GL_CONSTANT_ATTENUATION";
  case 0x1208:
    return "GL_LINEAR_ATTENUATION";
  case 0x1209:
    return "GL_QUADRATIC_ATTENUATION";
  case 0x1300:
    return "GL_COMPILE";
  case 0x1301:
    return "GL_COMPILE_AND_EXECUTE";
  case 0x1400:
    return "GL_BYTE";
  case 0x1401:
    return "GL_UNSIGNED_BYTE";
  case 0x1402:
    return "GL_SHORT";
  case 0x1403:
    return "GL_UNSIGNED_SHORT";
  case 0x1404:
    return "GL_INT";
  case 0x1405:
    return "GL_UNSIGNED_INT";
  case 0x1406:
    return "GL_FLOAT";
  case 0x1407:
    return "GL_2_BYTES";
  case 0x1408:
    return "GL_3_BYTES";
  case 0x1409:
    return "GL_4_BYTES";
  case 0x140A:
    return "GL_DOUBLE";
  case 0x140B:
    return "GL_HALF_FLOAT";
  case 0x140C:
    return "GL_FIXED";
  case 0x140E:
    return "GL_INT64_ARB";
  case 0x140F:
    return "GL_UNSIGNED_INT64_ARB";
  case 0x1500:
    return "GL_CLEAR";
  case 0x1501:
    return "GL_AND";
  case 0x1502:
    return "GL_AND_REVERSE";
  case 0x1503:
    return "GL_COPY";
  case 0x1504:
    return "GL_AND_INVERTED";
  case 0x1505:
    return "GL_NOOP";
  case 0x1506:
    return "GL_XOR";
  case 0x1507:
    return "GL_OR";
  case 0x1508:
    return "GL_NOR";
  case 0x1509:
    return "GL_EQUIV";
  case 0x150A:
    return "GL_INVERT";
  case 0x150B:
    return "GL_OR_REVERSE";
  case 0x150C:
    return "GL_COPY_INVERTED";
  case 0x150D:
    return "GL_OR_INVERTED";
  case 0x150E:
    return "GL_NAND";
  case 0x150F:
    return "GL_SET";
  case 0x1600:
    return "GL_EMISSION";
  case 0x1601:
    return "GL_SHININESS";
  case 0x1602:
    return "GL_AMBIENT_AND_DIFFUSE";
  case 0x1603:
    return "GL_COLOR_INDEXES";
  case 0x1700:
    return "GL_MODELVIEW";
  case 0x1701:
    return "GL_PROJECTION";
  case 0x1702:
    return "GL_TEXTURE";
  case 0x1800:
    return "GL_COLOR";
  case 0x1801:
    return "GL_DEPTH";
  case 0x1802:
    return "GL_STENCIL";
  case 0x1900:
    return "GL_COLOR_INDEX";
  case 0x1901:
    return "GL_STENCIL_INDEX";
  case 0x1902:
    return "GL_DEPTH_COMPONENT";
  case 0x1903:
    return "GL_RED";
  case 0x1904:
    return "GL_GREEN";
  case 0x1905:
    return "GL_BLUE";
  case 0x1906:
    return "GL_ALPHA";
  case 0x1907:
    return "GL_RGB";
  case 0x1908:
    return "GL_RGBA";
  case 0x1909:
    return "GL_LUMINANCE";
  case 0x190A:
    return "GL_LUMINANCE_ALPHA";
  case 0x1A00:
    return "GL_BITMAP";
  case 0x1B00:
    return "GL_POINT";
  case 0x1B01:
    return "GL_LINE";
  case 0x1B02:
    return "GL_FILL";
  case 0x1C00:
    return "GL_RENDER";
  case 0x1C01:
    return "GL_FEEDBACK";
  case 0x1C02:
    return "GL_SELECT";
  case 0x1D00:
    return "GL_FLAT";
  case 0x1D01:
    return "GL_SMOOTH";
  case 0x1E00:
    return "GL_KEEP";
  case 0x1E01:
    return "GL_REPLACE";
  case 0x1E02:
    return "GL_INCR";
  case 0x1E03:
    return "GL_DECR";
  case 0x1F00:
    return "GL_VENDOR";
  case 0x1F01:
    return "GL_RENDERER";
  case 0x1F02:
    return "GL_VERSION";
  case 0x1F03:
    return "GL_EXTENSIONS";
  case 0x2000:
    return "GL_S";
  case 0x2001:
    return "GL_T";
  case 0x2002:
    return "GL_R";
  case 0x2003:
    return "GL_Q";
  case 0x2100:
    return "GL_MODULATE";
  case 0x2101:
    return "GL_DECAL";
  case 0x2200:
    return "GL_TEXTURE_ENV_MODE";
  case 0x2201:
    return "GL_TEXTURE_ENV_COLOR";
  case 0x2300:
    return "GL_TEXTURE_ENV";
  case 0x2400:
    return "GL_EYE_LINEAR";
  case 0x2401:
    return "GL_OBJECT_LINEAR";
  case 0x2402:
    return "GL_SPHERE_MAP";
  case 0x2500:
    return "GL_TEXTURE_GEN_MODE";
  case 0x2501:
    return "GL_OBJECT_PLANE";
  case 0x2502:
    return "GL_EYE_PLANE";
  case 0x2600:
    return "GL_NEAREST";
  case 0x2601:
    return "GL_LINEAR";
  case 0x2700:
    return "GL_NEAREST_MIPMAP_NEAREST";
  case 0x2701:
    return "GL_LINEAR_MIPMAP_NEAREST";
  case 0x2702:
    return "GL_NEAREST_MIPMAP_LINEAR";
  case 0x2703:
    return "GL_LINEAR_MIPMAP_LINEAR";
  case 0x2800:
    return "GL_TEXTURE_MAG_FILTER";
  case 0x2801:
    return "GL_TEXTURE_MIN_FILTER";
  case 0x2802:
    return "GL_TEXTURE_WRAP_S";
  case 0x2803:
    return "GL_TEXTURE_WRAP_T";
  case 0x2900:
    return "GL_CLAMP";
  case 0x2901:
    return "GL_REPEAT";
  case 0x2A00:
    return "GL_POLYGON_OFFSET_UNITS";
  case 0x2A01:
    return "GL_POLYGON_OFFSET_POINT";
  case 0x2A02:
    return "GL_POLYGON_OFFSET_LINE";
  case 0x2A10:
    return "GL_R3_G3_B2";
  case 0x2A20:
    return "GL_V2F";
  case 0x2A21:
    return "GL_V3F";
  case 0x2A22:
    return "GL_C4UB_V2F";
  case 0x2A23:
    return "GL_C4UB_V3F";
  case 0x2A24:
    return "GL_C3F_V3F";
  case 0x2A25:
    return "GL_N3F_V3F";
  case 0x2A26:
    return "GL_C4F_N3F_V3F";
  case 0x2A27:
    return "GL_T2F_V3F";
  case 0x2A28:
    return "GL_T4F_V4F";
  case 0x2A29:
    return "GL_T2F_C4UB_V3F";
  case 0x2A2A:
    return "GL_T2F_C3F_V3F";
  case 0x2A2B:
    return "GL_T2F_N3F_V3F";
  case 0x2A2C:
    return "GL_T2F_C4F_N3F_V3F";
  case 0x2A2D:
    return "GL_T4F_C4F_N3F_V4F";
  case 0x3000:
    return "GL_CLIP_PLANE0";
  case 0x3001:
    return "GL_CLIP_PLANE1";
  case 0x3002:
    return "GL_CLIP_PLANE2";
  case 0x3003:
    return "GL_CLIP_PLANE3";
  case 0x3004:
    return "GL_CLIP_PLANE4";
  case 0x3005:
    return "GL_CLIP_PLANE5";
  case 0x3006:
    return "GL_CLIP_DISTANCE6";
  case 0x3007:
    return "GL_CLIP_DISTANCE7";
  case 0x4000:
    return "GL_LIGHT0";
  case 0x4001:
    return "GL_LIGHT1";
  case 0x4002:
    return "GL_LIGHT2";
  case 0x4003:
    return "GL_LIGHT3";
  case 0x4004:
    return "GL_LIGHT4";
  case 0x4005:
    return "GL_LIGHT5";
  case 0x4006:
    return "GL_LIGHT6";
  case 0x4007:
    return "GL_LIGHT7";
  case 0x8000:
    return "GL_ABGR_EXT";
  case 0x8001:
    return "GL_CONSTANT_COLOR";
  case 0x8002:
    return "GL_ONE_MINUS_CONSTANT_COLOR";
  case 0x8003:
    return "GL_CONSTANT_ALPHA";
  case 0x8004:
    return "GL_ONE_MINUS_CONSTANT_ALPHA";
  case 0x8005:
    return "GL_BLEND_COLOR";
  case 0x8006:
    return "GL_FUNC_ADD";
  case 0x8007:
    return "GL_MIN";
  case 0x8008:
    return "GL_MAX";
  case 0x8009:
    return "GL_BLEND_EQUATION";
  case 0x800A:
    return "GL_FUNC_SUBTRACT";
  case 0x800B:
    return "GL_FUNC_REVERSE_SUBTRACT";
  case 0x800C:
    return "GL_CMYK_EXT";
  case 0x800D:
    return "GL_CMYKA_EXT";
  case 0x800E:
    return "GL_PACK_CMYK_HINT_EXT";
  case 0x800F:
    return "GL_UNPACK_CMYK_HINT_EXT";
  case 0x8010:
    return "GL_CONVOLUTION_1D";
  case 0x8011:
    return "GL_CONVOLUTION_2D";
  case 0x8012:
    return "GL_SEPARABLE_2D";
  case 0x8013:
    return "GL_CONVOLUTION_BORDER_MODE";
  case 0x8014:
    return "GL_CONVOLUTION_FILTER_SCALE";
  case 0x8015:
    return "GL_CONVOLUTION_FILTER_BIAS";
  case 0x8016:
    return "GL_REDUCE";
  case 0x8017:
    return "GL_CONVOLUTION_FORMAT";
  case 0x8018:
    return "GL_CONVOLUTION_WIDTH";
  case 0x8019:
    return "GL_CONVOLUTION_HEIGHT";
  case 0x801A:
    return "GL_MAX_CONVOLUTION_WIDTH";
  case 0x801B:
    return "GL_MAX_CONVOLUTION_HEIGHT";
  case 0x801C:
    return "GL_POST_CONVOLUTION_RED_SCALE";
  case 0x801D:
    return "GL_POST_CONVOLUTION_GREEN_SCALE";
  case 0x801E:
    return "GL_POST_CONVOLUTION_BLUE_SCALE";
  case 0x801F:
    return "GL_POST_CONVOLUTION_ALPHA_SCALE";
  case 0x8020:
    return "GL_POST_CONVOLUTION_RED_BIAS";
  case 0x8021:
    return "GL_POST_CONVOLUTION_GREEN_BIAS";
  case 0x8022:
    return "GL_POST_CONVOLUTION_BLUE_BIAS";
  case 0x8023:
    return "GL_POST_CONVOLUTION_ALPHA_BIAS";
  case 0x8024:
    return "GL_HISTOGRAM";
  case 0x8025:
    return "GL_PROXY_HISTOGRAM";
  case 0x8026:
    return "GL_HISTOGRAM_WIDTH";
  case 0x8027:
    return "GL_HISTOGRAM_FORMAT";
  case 0x8028:
    return "GL_HISTOGRAM_RED_SIZE";
  case 0x8029:
    return "GL_HISTOGRAM_GREEN_SIZE";
  case 0x802A:
    return "GL_HISTOGRAM_BLUE_SIZE";
  case 0x802B:
    return "GL_HISTOGRAM_ALPHA_SIZE";
  case 0x802C:
    return "GL_HISTOGRAM_LUMINANCE_SIZE";
  case 0x802D:
    return "GL_HISTOGRAM_SINK";
  case 0x802E:
    return "GL_MINMAX";
  case 0x802F:
    return "GL_MINMAX_FORMAT";
  case 0x8030:
    return "GL_MINMAX_SINK";
  case 0x8031:
    return "GL_TABLE_TOO_LARGE_EXT";
  case 0x8032:
    return "GL_UNSIGNED_BYTE_3_3_2";
  case 0x8033:
    return "GL_UNSIGNED_SHORT_4_4_4_4";
  case 0x8034:
    return "GL_UNSIGNED_SHORT_5_5_5_1";
  case 0x8035:
    return "GL_UNSIGNED_INT_8_8_8_8";
  case 0x8036:
    return "GL_UNSIGNED_INT_10_10_10_2";
  case 0x8037:
    return "GL_POLYGON_OFFSET_EXT";
  case 0x8038:
    return "GL_POLYGON_OFFSET_FACTOR";
  case 0x8039:
    return "GL_POLYGON_OFFSET_BIAS_EXT";
  case 0x803A:
    return "GL_RESCALE_NORMAL";
  case 0x803B:
    return "GL_ALPHA4";
  case 0x803C:
    return "GL_ALPHA8";
  case 0x803D:
    return "GL_ALPHA12";
  case 0x803E:
    return "GL_ALPHA16";
  case 0x803F:
    return "GL_LUMINANCE4";
  case 0x8040:
    return "GL_LUMINANCE8";
  case 0x8041:
    return "GL_LUMINANCE12";
  case 0x8042:
    return "GL_LUMINANCE16";
  case 0x8043:
    return "GL_LUMINANCE4_ALPHA4";
  case 0x8044:
    return "GL_LUMINANCE6_ALPHA2";
  case 0x8045:
    return "GL_LUMINANCE8_ALPHA8";
  case 0x8046:
    return "GL_LUMINANCE12_ALPHA4";
  case 0x8047:
    return "GL_LUMINANCE12_ALPHA12";
  case 0x8048:
    return "GL_LUMINANCE16_ALPHA16";
  case 0x8049:
    return "GL_INTENSITY";
  case 0x804A:
    return "GL_INTENSITY4";
  case 0x804B:
    return "GL_INTENSITY8";
  case 0x804C:
    return "GL_INTENSITY12";
  case 0x804D:
    return "GL_INTENSITY16";
  case 0x804E:
    return "GL_RGB2_EXT";
  case 0x804F:
    return "GL_RGB4";
  case 0x8050:
    return "GL_RGB5";
  case 0x8051:
    return "GL_RGB8";
  case 0x8052:
    return "GL_RGB10";
  case 0x8053:
    return "GL_RGB12";
  case 0x8054:
    return "GL_RGB16";
  case 0x8055:
    return "GL_RGBA2";
  case 0x8056:
    return "GL_RGBA4";
  case 0x8057:
    return "GL_RGB5_A1";
  case 0x8058:
    return "GL_RGBA8";
  case 0x8059:
    return "GL_RGB10_A2";
  case 0x805A:
    return "GL_RGBA12";
  case 0x805B:
    return "GL_RGBA16";
  case 0x805C:
    return "GL_TEXTURE_RED_SIZE";
  case 0x805D:
    return "GL_TEXTURE_GREEN_SIZE";
  case 0x805E:
    return "GL_TEXTURE_BLUE_SIZE";
  case 0x805F:
    return "GL_TEXTURE_ALPHA_SIZE";
  case 0x8060:
    return "GL_TEXTURE_LUMINANCE_SIZE";
  case 0x8061:
    return "GL_TEXTURE_INTENSITY_SIZE";
  case 0x8062:
    return "GL_REPLACE_EXT";
  case 0x8063:
    return "GL_PROXY_TEXTURE_1D";
  case 0x8064:
    return "GL_PROXY_TEXTURE_2D";
  case 0x8065:
    return "GL_TEXTURE_TOO_LARGE_EXT";
  case 0x8066:
    return "GL_TEXTURE_PRIORITY";
  case 0x8067:
    return "GL_TEXTURE_RESIDENT";
  case 0x8068:
    return "GL_TEXTURE_1D_BINDING_EXT";
  case 0x8069:
    return "GL_TEXTURE_2D_BINDING_EXT";
  case 0x806A:
    return "GL_TEXTURE_3D_BINDING_EXT";
  case 0x806B:
    return "GL_PACK_SKIP_IMAGES";
  case 0x806C:
    return "GL_PACK_IMAGE_HEIGHT";
  case 0x806D:
    return "GL_UNPACK_SKIP_IMAGES";
  case 0x806E:
    return "GL_UNPACK_IMAGE_HEIGHT";
  case 0x806F:
    return "GL_TEXTURE_3D";
  case 0x8070:
    return "GL_PROXY_TEXTURE_3D";
  case 0x8071:
    return "GL_TEXTURE_DEPTH";
  case 0x8072:
    return "GL_TEXTURE_WRAP_R";
  case 0x8073:
    return "GL_MAX_3D_TEXTURE_SIZE";
  case 0x8074:
    return "GL_VERTEX_ARRAY";
  case 0x8075:
    return "GL_NORMAL_ARRAY";
  case 0x8076:
    return "GL_COLOR_ARRAY";
  case 0x8077:
    return "GL_INDEX_ARRAY";
  case 0x8078:
    return "GL_TEXTURE_COORD_ARRAY";
  case 0x8079:
    return "GL_EDGE_FLAG_ARRAY";
  case 0x807A:
    return "GL_VERTEX_ARRAY_SIZE";
  case 0x807B:
    return "GL_VERTEX_ARRAY_TYPE";
  case 0x807C:
    return "GL_VERTEX_ARRAY_STRIDE";
  case 0x807D:
    return "GL_VERTEX_ARRAY_COUNT_EXT";
  case 0x807E:
    return "GL_NORMAL_ARRAY_TYPE";
  case 0x807F:
    return "GL_NORMAL_ARRAY_STRIDE";
  case 0x8080:
    return "GL_NORMAL_ARRAY_COUNT_EXT";
  case 0x8081:
    return "GL_COLOR_ARRAY_SIZE";
  case 0x8082:
    return "GL_COLOR_ARRAY_TYPE";
  case 0x8083:
    return "GL_COLOR_ARRAY_STRIDE";
  case 0x8084:
    return "GL_COLOR_ARRAY_COUNT_EXT";
  case 0x8085:
    return "GL_INDEX_ARRAY_TYPE";
  case 0x8086:
    return "GL_INDEX_ARRAY_STRIDE";
  case 0x8087:
    return "GL_INDEX_ARRAY_COUNT_EXT";
  case 0x8088:
    return "GL_TEXTURE_COORD_ARRAY_SIZE";
  case 0x8089:
    return "GL_TEXTURE_COORD_ARRAY_TYPE";
  case 0x808A:
    return "GL_TEXTURE_COORD_ARRAY_STRIDE";
  case 0x808B:
    return "GL_TEXTURE_COORD_ARRAY_COUNT_EXT";
  case 0x808C:
    return "GL_EDGE_FLAG_ARRAY_STRIDE";
  case 0x808D:
    return "GL_EDGE_FLAG_ARRAY_COUNT_EXT";
  case 0x808E:
    return "GL_VERTEX_ARRAY_POINTER";
  case 0x808F:
    return "GL_NORMAL_ARRAY_POINTER";
  case 0x8090:
    return "GL_COLOR_ARRAY_POINTER";
  case 0x8091:
    return "GL_INDEX_ARRAY_POINTER";
  case 0x8092:
    return "GL_TEXTURE_COORD_ARRAY_POINTER";
  case 0x8093:
    return "GL_EDGE_FLAG_ARRAY_POINTER";
  case 0x8094:
    return "GL_INTERLACE_SGIX";
  case 0x8095:
    return "GL_DETAIL_TEXTURE_2D_SGIS";
  case 0x8096:
    return "GL_DETAIL_TEXTURE_2D_BINDING_SGIS";
  case 0x8097:
    return "GL_LINEAR_DETAIL_SGIS";
  case 0x8098:
    return "GL_LINEAR_DETAIL_ALPHA_SGIS";
  case 0x8099:
    return "GL_LINEAR_DETAIL_COLOR_SGIS";
  case 0x809A:
    return "GL_DETAIL_TEXTURE_LEVEL_SGIS";
  case 0x809B:
    return "GL_DETAIL_TEXTURE_MODE_SGIS";
  case 0x809C:
    return "GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS";
  case 0x809D:
    return "GL_MULTISAMPLE";
  case 0x809E:
    return "GL_SAMPLE_ALPHA_TO_COVERAGE";
  case 0x809F:
    return "GL_SAMPLE_ALPHA_TO_ONE";
  case 0x80A0:
    return "GL_SAMPLE_COVERAGE";
  case 0x80A1:
    return "GL_1PASS_EXT";
  case 0x80A2:
    return "GL_2PASS_0_EXT";
  case 0x80A3:
    return "GL_2PASS_1_EXT";
  case 0x80A4:
    return "GL_4PASS_0_EXT";
  case 0x80A5:
    return "GL_4PASS_1_EXT";
  case 0x80A6:
    return "GL_4PASS_2_EXT";
  case 0x80A7:
    return "GL_4PASS_3_EXT";
  case 0x80A8:
    return "GL_SAMPLE_BUFFERS";
  case 0x80A9:
    return "GL_SAMPLES";
  case 0x80AA:
    return "GL_SAMPLE_COVERAGE_VALUE";
  case 0x80AB:
    return "GL_SAMPLE_COVERAGE_INVERT";
  case 0x80AC:
    return "GL_SAMPLE_PATTERN_EXT";
  case 0x80AD:
    return "GL_LINEAR_SHARPEN_SGIS";
  case 0x80AE:
    return "GL_LINEAR_SHARPEN_ALPHA_SGIS";
  case 0x80AF:
    return "GL_LINEAR_SHARPEN_COLOR_SGIS";
  case 0x80B0:
    return "GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS";
  case 0x80B1:
    return "GL_COLOR_MATRIX";
  case 0x80B2:
    return "GL_COLOR_MATRIX_STACK_DEPTH";
  case 0x80B3:
    return "GL_MAX_COLOR_MATRIX_STACK_DEPTH";
  case 0x80B4:
    return "GL_POST_COLOR_MATRIX_RED_SCALE";
  case 0x80B5:
    return "GL_POST_COLOR_MATRIX_GREEN_SCALE";
  case 0x80B6:
    return "GL_POST_COLOR_MATRIX_BLUE_SCALE";
  case 0x80B7:
    return "GL_POST_COLOR_MATRIX_ALPHA_SCALE";
  case 0x80B8:
    return "GL_POST_COLOR_MATRIX_RED_BIAS";
  case 0x80B9:
    return "GL_POST_COLOR_MATRIX_GREEN_BIAS";
  case 0x80BA:
    return "GL_POST_COLOR_MATRIX_BLUE_BIAS";
  case 0x80BB:
    return "GL_POST_COLOR_MATRIX_ALPHA_BIAS";
  case 0x80BC:
    return "GL_TEXTURE_COLOR_TABLE_SGI";
  case 0x80BD:
    return "GL_PROXY_TEXTURE_COLOR_TABLE_SGI";
  case 0x80BE:
    return "GL_TEXTURE_ENV_BIAS_SGIX";
  case 0x80BF:
    return "GL_SHADOW_AMBIENT_SGIX";
  case 0x8210:
    return "GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING";
  case 0x8211:
    return "GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE";
  case 0x8212:
    return "GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE";
  case 0x8213:
    return "GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE";
  case 0x8214:
    return "GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE";
  case 0x8215:
    return "GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE";
  case 0x8216:
    return "GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE";
  case 0x8217:
    return "GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE";
  case 0x8218:
    return "GL_FRAMEBUFFER_DEFAULT";
  case 0x8219:
    return "GL_FRAMEBUFFER_UNDEFINED";
  case 0x821A:
    return "GL_DEPTH_STENCIL_ATTACHMENT";
  case 0x821B:
    return "GL_MAJOR_VERSION";
  case 0x821C:
    return "GL_MINOR_VERSION";
  case 0x821D:
    return "GL_NUM_EXTENSIONS";
  case 0x821E:
    return "GL_CONTEXT_FLAGS";
  case 0x821F:
    return "GL_BUFFER_IMMUTABLE_STORAGE";
  case 0x8220:
    return "GL_BUFFER_STORAGE_FLAGS";
  case 0x8221:
    return "GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED";
  case 0x8222:
    return "GL_INDEX";
  case 0x8225:
    return "GL_COMPRESSED_RED";
  case 0x8226:
    return "GL_COMPRESSED_RG";
  case 0x8227:
    return "GL_RG";
  case 0x8228:
    return "GL_RG_INTEGER";
  case 0x8229:
    return "GL_R8";
  case 0x822A:
    return "GL_R16";
  case 0x822B:
    return "GL_RG8";
  case 0x822C:
    return "GL_RG16";
  case 0x822D:
    return "GL_R16F";
  case 0x822E:
    return "GL_R32F";
  case 0x822F:
    return "GL_RG16F";
  case 0x8230:
    return "GL_RG32F";
  case 0x8231:
    return "GL_R8I";
  case 0x8232:
    return "GL_R8UI";
  case 0x8233:
    return "GL_R16I";
  case 0x8234:
    return "GL_R16UI";
  case 0x8235:
    return "GL_R32I";
  case 0x8236:
    return "GL_R32UI";
  case 0x8237:
    return "GL_RG8I";
  case 0x8238:
    return "GL_RG8UI";
  case 0x8239:
    return "GL_RG16I";
  case 0x823A:
    return "GL_RG16UI";
  case 0x823B:
    return "GL_RG32I";
  case 0x823C:
    return "GL_RG32UI";
  case 0x8240:
    return "GL_SYNC_CL_EVENT_ARB";
  case 0x8241:
    return "GL_SYNC_CL_EVENT_COMPLETE_ARB";
  case 0x8242:
    return "GL_DEBUG_OUTPUT_SYNCHRONOUS";
  case 0x8243:
    return "GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH";
  case 0x8244:
    return "GL_DEBUG_CALLBACK_FUNCTION";
  case 0x8245:
    return "GL_DEBUG_CALLBACK_USER_PARAM";
  case 0x8246:
    return "GL_DEBUG_SOURCE_API";
  case 0x8247:
    return "GL_DEBUG_SOURCE_WINDOW_SYSTEM";
  case 0x8248:
    return "GL_DEBUG_SOURCE_SHADER_COMPILER";
  case 0x8249:
    return "GL_DEBUG_SOURCE_THIRD_PARTY";
  case 0x824A:
    return "GL_DEBUG_SOURCE_APPLICATION";
  case 0x824B:
    return "GL_DEBUG_SOURCE_OTHER";
  case 0x824C:
    return "GL_DEBUG_TYPE_ERROR";
  case 0x824D:
    return "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR";
  case 0x824E:
    return "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR";
  case 0x824F:
    return "GL_DEBUG_TYPE_PORTABILITY";
  case 0x8250:
    return "GL_DEBUG_TYPE_PERFORMANCE";
  case 0x8251:
    return "GL_DEBUG_TYPE_OTHER";
  case 0x8252:
    return "GL_LOSE_CONTEXT_ON_RESET";
  case 0x8253:
    return "GL_GUILTY_CONTEXT_RESET";
  case 0x8254:
    return "GL_INNOCENT_CONTEXT_RESET";
  case 0x8255:
    return "GL_UNKNOWN_CONTEXT_RESET";
  case 0x8256:
    return "GL_RESET_NOTIFICATION_STRATEGY";
  case 0x8257:
    return "GL_PROGRAM_BINARY_RETRIEVABLE_HINT";
  case 0x8258:
    return "GL_PROGRAM_SEPARABLE";
  case 0x8259:
    return "GL_ACTIVE_PROGRAM";
  case 0x825A:
    return "GL_PROGRAM_PIPELINE_BINDING";
  case 0x825B:
    return "GL_MAX_VIEWPORTS";
  case 0x825C:
    return "GL_VIEWPORT_SUBPIXEL_BITS";
  case 0x825D:
    return "GL_VIEWPORT_BOUNDS_RANGE";
  case 0x825E:
    return "GL_LAYER_PROVOKING_VERTEX";
  case 0x825F:
    return "GL_VIEWPORT_INDEX_PROVOKING_VERTEX";
  case 0x8260:
    return "GL_UNDEFINED_VERTEX";
  case 0x8261:
    return "GL_NO_RESET_NOTIFICATION";
  case 0x8262:
    return "GL_MAX_COMPUTE_SHARED_MEMORY_SIZE";
  case 0x8263:
    return "GL_MAX_COMPUTE_UNIFORM_COMPONENTS";
  case 0x8264:
    return "GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS";
  case 0x8265:
    return "GL_MAX_COMPUTE_ATOMIC_COUNTERS";
  case 0x8266:
    return "GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS";
  case 0x8267:
    return "GL_COMPUTE_WORK_GROUP_SIZE";
  case 0x8268:
    return "GL_DEBUG_TYPE_MARKER";
  case 0x8269:
    return "GL_DEBUG_TYPE_PUSH_GROUP";
  case 0x826A:
    return "GL_DEBUG_TYPE_POP_GROUP";
  case 0x826B:
    return "GL_DEBUG_SEVERITY_NOTIFICATION";
  case 0x826C:
    return "GL_MAX_DEBUG_GROUP_STACK_DEPTH";
  case 0x826D:
    return "GL_DEBUG_GROUP_STACK_DEPTH";
  case 0x826E:
    return "GL_MAX_UNIFORM_LOCATIONS";
  case 0x826F:
    return "GL_INTERNALFORMAT_SUPPORTED";
  case 0x8270:
    return "GL_INTERNALFORMAT_PREFERRED";
  case 0x8271:
    return "GL_INTERNALFORMAT_RED_SIZE";
  case 0x8272:
    return "GL_INTERNALFORMAT_GREEN_SIZE";
  case 0x8273:
    return "GL_INTERNALFORMAT_BLUE_SIZE";
  case 0x8274:
    return "GL_INTERNALFORMAT_ALPHA_SIZE";
  case 0x8275:
    return "GL_INTERNALFORMAT_DEPTH_SIZE";
  case 0x8276:
    return "GL_INTERNALFORMAT_STENCIL_SIZE";
  case 0x8277:
    return "GL_INTERNALFORMAT_SHARED_SIZE";
  case 0x8278:
    return "GL_INTERNALFORMAT_RED_TYPE";
  case 0x8279:
    return "GL_INTERNALFORMAT_GREEN_TYPE";
  case 0x827A:
    return "GL_INTERNALFORMAT_BLUE_TYPE";
  case 0x827B:
    return "GL_INTERNALFORMAT_ALPHA_TYPE";
  case 0x827C:
    return "GL_INTERNALFORMAT_DEPTH_TYPE";
  case 0x827D:
    return "GL_INTERNALFORMAT_STENCIL_TYPE";
  case 0x827E:
    return "GL_MAX_WIDTH";
  case 0x827F:
    return "GL_MAX_HEIGHT";
  case 0x8280:
    return "GL_MAX_DEPTH";
  case 0x8281:
    return "GL_MAX_LAYERS";
  case 0x8282:
    return "GL_MAX_COMBINED_DIMENSIONS";
  case 0x8283:
    return "GL_COLOR_COMPONENTS";
  case 0x8284:
    return "GL_DEPTH_COMPONENTS";
  case 0x8285:
    return "GL_STENCIL_COMPONENTS";
  case 0x8286:
    return "GL_COLOR_RENDERABLE";
  case 0x8287:
    return "GL_DEPTH_RENDERABLE";
  case 0x8288:
    return "GL_STENCIL_RENDERABLE";
  case 0x8289:
    return "GL_FRAMEBUFFER_RENDERABLE";
  case 0x828A:
    return "GL_FRAMEBUFFER_RENDERABLE_LAYERED";
  case 0x828B:
    return "GL_FRAMEBUFFER_BLEND";
  case 0x828C:
    return "GL_READ_PIXELS";
  case 0x828D:
    return "GL_READ_PIXELS_FORMAT";
  case 0x828E:
    return "GL_READ_PIXELS_TYPE";
  case 0x828F:
    return "GL_TEXTURE_IMAGE_FORMAT";
  case 0x8290:
    return "GL_TEXTURE_IMAGE_TYPE";
  case 0x8291:
    return "GL_GET_TEXTURE_IMAGE_FORMAT";
  case 0x8292:
    return "GL_GET_TEXTURE_IMAGE_TYPE";
  case 0x8293:
    return "GL_MIPMAP";
  case 0x8294:
    return "GL_MANUAL_GENERATE_MIPMAP";
  case 0x8295:
    return "GL_AUTO_GENERATE_MIPMAP";
  case 0x8296:
    return "GL_COLOR_ENCODING";
  case 0x8297:
    return "GL_SRGB_READ";
  case 0x8298:
    return "GL_SRGB_WRITE";
  case 0x8299:
    return "GL_SRGB_DECODE_ARB";
  case 0x829A:
    return "GL_FILTER";
  case 0x829B:
    return "GL_VERTEX_TEXTURE";
  case 0x829C:
    return "GL_TESS_CONTROL_TEXTURE";
  case 0x829D:
    return "GL_TESS_EVALUATION_TEXTURE";
  case 0x829E:
    return "GL_GEOMETRY_TEXTURE";
  case 0x829F:
    return "GL_FRAGMENT_TEXTURE";
  case 0x82A0:
    return "GL_COMPUTE_TEXTURE";
  case 0x82A1:
    return "GL_TEXTURE_SHADOW";
  case 0x82A2:
    return "GL_TEXTURE_GATHER";
  case 0x82A3:
    return "GL_TEXTURE_GATHER_SHADOW";
  case 0x82A4:
    return "GL_SHADER_IMAGE_LOAD";
  case 0x82A5:
    return "GL_SHADER_IMAGE_STORE";
  case 0x82A6:
    return "GL_SHADER_IMAGE_ATOMIC";
  case 0x82A7:
    return "GL_IMAGE_TEXEL_SIZE";
  case 0x82A8:
    return "GL_IMAGE_COMPATIBILITY_CLASS";
  case 0x82A9:
    return "GL_IMAGE_PIXEL_FORMAT";
  case 0x82AA:
    return "GL_IMAGE_PIXEL_TYPE";
  case 0x82AC:
    return "GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST";
  case 0x82AD:
    return "GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST";
  case 0x82AE:
    return "GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE";
  case 0x82AF:
    return "GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE";
  case 0x82B1:
    return "GL_TEXTURE_COMPRESSED_BLOCK_WIDTH";
  case 0x82B2:
    return "GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT";
  case 0x82B3:
    return "GL_TEXTURE_COMPRESSED_BLOCK_SIZE";
  case 0x82B4:
    return "GL_CLEAR_BUFFER";
  case 0x82B5:
    return "GL_TEXTURE_VIEW";
  case 0x82B6:
    return "GL_VIEW_COMPATIBILITY_CLASS";
  case 0x82B7:
    return "GL_FULL_SUPPORT";
  case 0x82B8:
    return "GL_CAVEAT_SUPPORT";
  case 0x82B9:
    return "GL_IMAGE_CLASS_4_X_32";
  case 0x82BA:
    return "GL_IMAGE_CLASS_2_X_32";
  case 0x82BB:
    return "GL_IMAGE_CLASS_1_X_32";
  case 0x82BC:
    return "GL_IMAGE_CLASS_4_X_16";
  case 0x82BD:
    return "GL_IMAGE_CLASS_2_X_16";
  case 0x82BE:
    return "GL_IMAGE_CLASS_1_X_16";
  case 0x82BF:
    return "GL_IMAGE_CLASS_4_X_8";
  case 0x82C0:
    return "GL_IMAGE_CLASS_2_X_8";
  case 0x82C1:
    return "GL_IMAGE_CLASS_1_X_8";
  case 0x82C2:
    return "GL_IMAGE_CLASS_11_11_10";
  case 0x82C3:
    return "GL_IMAGE_CLASS_10_10_10_2";
  case 0x82C4:
    return "GL_VIEW_CLASS_128_BITS";
  case 0x82C5:
    return "GL_VIEW_CLASS_96_BITS";
  case 0x82C6:
    return "GL_VIEW_CLASS_64_BITS";
  case 0x82C7:
    return "GL_VIEW_CLASS_48_BITS";
  case 0x82C8:
    return "GL_VIEW_CLASS_32_BITS";
  case 0x82C9:
    return "GL_VIEW_CLASS_24_BITS";
  case 0x82CA:
    return "GL_VIEW_CLASS_16_BITS";
  case 0x82CB:
    return "GL_VIEW_CLASS_8_BITS";
  case 0x82CC:
    return "GL_VIEW_CLASS_S3TC_DXT1_RGB";
  case 0x82CD:
    return "GL_VIEW_CLASS_S3TC_DXT1_RGBA";
  case 0x82CE:
    return "GL_VIEW_CLASS_S3TC_DXT3_RGBA";
  case 0x82CF:
    return "GL_VIEW_CLASS_S3TC_DXT5_RGBA";
  case 0x82D0:
    return "GL_VIEW_CLASS_RGTC1_RED";
  case 0x82D1:
    return "GL_VIEW_CLASS_RGTC2_RG";
  case 0x82D2:
    return "GL_VIEW_CLASS_BPTC_UNORM";
  case 0x82D3:
    return "GL_VIEW_CLASS_BPTC_FLOAT";
  case 0x82D4:
    return "GL_VERTEX_ATTRIB_BINDING";
  case 0x82D5:
    return "GL_VERTEX_ATTRIB_RELATIVE_OFFSET";
  case 0x82D6:
    return "GL_VERTEX_BINDING_DIVISOR";
  case 0x82D7:
    return "GL_VERTEX_BINDING_OFFSET";
  case 0x82D8:
    return "GL_VERTEX_BINDING_STRIDE";
  case 0x82D9:
    return "GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET";
  case 0x82DA:
    return "GL_MAX_VERTEX_ATTRIB_BINDINGS";
  case 0x82DB:
    return "GL_TEXTURE_VIEW_MIN_LEVEL";
  case 0x82DC:
    return "GL_TEXTURE_VIEW_NUM_LEVELS";
  case 0x82DD:
    return "GL_TEXTURE_VIEW_MIN_LAYER";
  case 0x82DE:
    return "GL_TEXTURE_VIEW_NUM_LAYERS";
  case 0x82DF:
    return "GL_TEXTURE_IMMUTABLE_LEVELS";
  case 0x82E0:
    return "GL_BUFFER";
  case 0x82E1:
    return "GL_SHADER";
  case 0x82E2:
    return "GL_PROGRAM";
  case 0x82E3:
    return "GL_QUERY";
  case 0x82E4:
    return "GL_PROGRAM_PIPELINE";
  case 0x82E5:
    return "GL_MAX_VERTEX_ATTRIB_STRIDE";
  case 0x82E6:
    return "GL_SAMPLER";
  case 0x82E7:
    return "GL_DISPLAY_LIST";
  case 0x82E8:
    return "GL_MAX_LABEL_LENGTH";
  case 0x82E9:
    return "GL_NUM_SHADING_LANGUAGE_VERSIONS";
  case 0x82EA:
    return "GL_QUERY_TARGET";
  case 0x82EC:
    return "GL_TRANSFORM_FEEDBACK_OVERFLOW";
  case 0x82ED:
    return "GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW";
  case 0x82EE:
    return "GL_VERTICES_SUBMITTED";
  case 0x82EF:
    return "GL_PRIMITIVES_SUBMITTED";
  case 0x82F0:
    return "GL_VERTEX_SHADER_INVOCATIONS";
  case 0x82F1:
    return "GL_TESS_CONTROL_SHADER_PATCHES";
  case 0x82F2:
    return "GL_TESS_EVALUATION_SHADER_INVOCATIONS";
  case 0x82F3:
    return "GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED";
  case 0x82F4:
    return "GL_FRAGMENT_SHADER_INVOCATIONS";
  case 0x82F5:
    return "GL_COMPUTE_SHADER_INVOCATIONS";
  case 0x82F6:
    return "GL_CLIPPING_INPUT_PRIMITIVES";
  case 0x82F7:
    return "GL_CLIPPING_OUTPUT_PRIMITIVES";
  case 0x82F8:
    return "GL_SPARSE_BUFFER_PAGE_SIZE_ARB";
  case 0x82F9:
    return "GL_MAX_CULL_DISTANCES";
  case 0x82FA:
    return "GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES";
  case 0x82FB:
    return "GL_CONTEXT_RELEASE_BEHAVIOR";
  case 0x82FC:
    return "GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH";
  case 0x82FD:
    return "GL_ROBUST_GPU_TIMEOUT_MS_KHR";
  case 0x84C0:
    return "GL_TEXTURE0";
  case 0x84C1:
    return "GL_TEXTURE1";
  case 0x84C2:
    return "GL_TEXTURE2";
  case 0x84C3:
    return "GL_TEXTURE3";
  case 0x84C4:
    return "GL_TEXTURE4";
  case 0x84C5:
    return "GL_TEXTURE5";
  case 0x84C6:
    return "GL_TEXTURE6";
  case 0x84C7:
    return "GL_TEXTURE7";
  case 0x84C8:
    return "GL_TEXTURE8";
  case 0x84C9:
    return "GL_TEXTURE9";
  case 0x84CA:
    return "GL_TEXTURE10";
  case 0x84CB:
    return "GL_TEXTURE11";
  case 0x84CC:
    return "GL_TEXTURE12";
  case 0x84CD:
    return "GL_TEXTURE13";
  case 0x84CE:
    return "GL_TEXTURE14";
  case 0x84CF:
    return "GL_TEXTURE15";
  case 0x84D0:
    return "GL_TEXTURE16";
  case 0x84D1:
    return "GL_TEXTURE17";
  case 0x84D2:
    return "GL_TEXTURE18";
  case 0x84D3:
    return "GL_TEXTURE19";
  case 0x84D4:
    return "GL_TEXTURE20";
  case 0x84D5:
    return "GL_TEXTURE21";
  case 0x84D6:
    return "GL_TEXTURE22";
  case 0x84D7:
    return "GL_TEXTURE23";
  case 0x84D8:
    return "GL_TEXTURE24";
  case 0x84D9:
    return "GL_TEXTURE25";
  case 0x84DA:
    return "GL_TEXTURE26";
  case 0x84DB:
    return "GL_TEXTURE27";
  case 0x84DC:
    return "GL_TEXTURE28";
  case 0x84DD:
    return "GL_TEXTURE29";
  case 0x84DE:
    return "GL_TEXTURE30";
  case 0x84DF:
    return "GL_TEXTURE31";
  case 0x84E0:
    return "GL_ACTIVE_TEXTURE";
  case 0x84E1:
    return "GL_CLIENT_ACTIVE_TEXTURE";
  case 0x84E2:
    return "GL_MAX_TEXTURE_UNITS";
  case 0x84E3:
    return "GL_TRANSPOSE_MODELVIEW_MATRIX";
  case 0x84E4:
    return "GL_TRANSPOSE_PROJECTION_MATRIX";
  case 0x84E5:
    return "GL_TRANSPOSE_TEXTURE_MATRIX";
  case 0x84E6:
    return "GL_TRANSPOSE_COLOR_MATRIX";
  case 0x84E7:
    return "GL_SUBTRACT";
  case 0x84E8:
    return "GL_MAX_RENDERBUFFER_SIZE";
  case 0x84E9:
    return "GL_COMPRESSED_ALPHA";
  case 0x84EA:
    return "GL_COMPRESSED_LUMINANCE";
  case 0x84EB:
    return "GL_COMPRESSED_LUMINANCE_ALPHA";
  case 0x84EC:
    return "GL_COMPRESSED_INTENSITY";
  case 0x84ED:
    return "GL_COMPRESSED_RGB";
  case 0x84EE:
    return "GL_COMPRESSED_RGBA";
  case 0x84EF:
    return "GL_TEXTURE_COMPRESSION_HINT";
  case 0x86A0:
    return "GL_TEXTURE_COMPRESSED_IMAGE_SIZE";
  case 0x86A1:
    return "GL_TEXTURE_COMPRESSED";
  case 0x86A2:
    return "GL_NUM_COMPRESSED_TEXTURE_FORMATS";
  case 0x86A3:
    return "GL_COMPRESSED_TEXTURE_FORMATS";
  case 0x86A4:
    return "GL_MAX_VERTEX_UNITS_ARB";
  case 0x86A5:
    return "GL_ACTIVE_VERTEX_UNITS_ARB";
  case 0x86A6:
    return "GL_WEIGHT_SUM_UNITY_ARB";
  case 0x86A7:
    return "GL_VERTEX_BLEND_ARB";
  case 0x86A8:
    return "GL_CURRENT_WEIGHT_ARB";
  case 0x86A9:
    return "GL_WEIGHT_ARRAY_TYPE_ARB";
  case 0x86AA:
    return "GL_WEIGHT_ARRAY_STRIDE_ARB";
  case 0x86AB:
    return "GL_WEIGHT_ARRAY_SIZE_ARB";
  case 0x86AC:
    return "GL_WEIGHT_ARRAY_POINTER_ARB";
  case 0x86AD:
    return "GL_WEIGHT_ARRAY_ARB";
  case 0x86AE:
    return "GL_DOT3_RGB";
  case 0x86AF:
    return "GL_DOT3_RGBA";
  case 0x8722:
    return "GL_MODELVIEW2_ARB";
  case 0x8723:
    return "GL_MODELVIEW3_ARB";
  case 0x8724:
    return "GL_MODELVIEW4_ARB";
  case 0x8725:
    return "GL_MODELVIEW5_ARB";
  case 0x8726:
    return "GL_MODELVIEW6_ARB";
  case 0x8727:
    return "GL_MODELVIEW7_ARB";
  case 0x8728:
    return "GL_MODELVIEW8_ARB";
  case 0x8729:
    return "GL_MODELVIEW9_ARB";
  case 0x872A:
    return "GL_MODELVIEW10_ARB";
  case 0x872B:
    return "GL_MODELVIEW11_ARB";
  case 0x872C:
    return "GL_MODELVIEW12_ARB";
  case 0x872D:
    return "GL_MODELVIEW13_ARB";
  case 0x872E:
    return "GL_MODELVIEW14_ARB";
  case 0x872F:
    return "GL_MODELVIEW15_ARB";
  case 0x8730:
    return "GL_MODELVIEW16_ARB";
  case 0x8731:
    return "GL_MODELVIEW17_ARB";
  case 0x8732:
    return "GL_MODELVIEW18_ARB";
  case 0x8733:
    return "GL_MODELVIEW19_ARB";
  case 0x8734:
    return "GL_MODELVIEW20_ARB";
  case 0x8735:
    return "GL_MODELVIEW21_ARB";
  case 0x8736:
    return "GL_MODELVIEW22_ARB";
  case 0x8737:
    return "GL_MODELVIEW23_ARB";
  case 0x8738:
    return "GL_MODELVIEW24_ARB";
  case 0x8739:
    return "GL_MODELVIEW25_ARB";
  case 0x873A:
    return "GL_MODELVIEW26_ARB";
  case 0x873B:
    return "GL_MODELVIEW27_ARB";
  case 0x873C:
    return "GL_MODELVIEW28_ARB";
  case 0x873D:
    return "GL_MODELVIEW29_ARB";
  case 0x873E:
    return "GL_MODELVIEW30_ARB";
  case 0x873F:
    return "GL_MODELVIEW31_ARB";
  case 0x8840:
    return "GL_MATRIX_PALETTE_ARB";
  case 0x8841:
    return "GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB";
  case 0x8842:
    return "GL_MAX_PALETTE_MATRICES_ARB";
  case 0x8843:
    return "GL_CURRENT_PALETTE_MATRIX_ARB";
  case 0x8844:
    return "GL_MATRIX_INDEX_ARRAY_ARB";
  case 0x8845:
    return "GL_CURRENT_MATRIX_INDEX_ARB";
  case 0x8846:
    return "GL_MATRIX_INDEX_ARRAY_SIZE_ARB";
  case 0x8847:
    return "GL_MATRIX_INDEX_ARRAY_TYPE_ARB";
  case 0x8848:
    return "GL_MATRIX_INDEX_ARRAY_STRIDE_ARB";
  case 0x8849:
    return "GL_MATRIX_INDEX_ARRAY_POINTER_ARB";
  case 0x884A:
    return "GL_TEXTURE_DEPTH_SIZE";
  case 0x884B:
    return "GL_DEPTH_TEXTURE_MODE";
  case 0x884C:
    return "GL_TEXTURE_COMPARE_MODE";
  case 0x884D:
    return "GL_TEXTURE_COMPARE_FUNC";
  case 0x884E:
    return "GL_COMPARE_R_TO_TEXTURE";
  case 0x884F:
    return "GL_TEXTURE_CUBE_MAP_SEAMLESS";
  case 0x8B48:
    return "GL_SHADER_OBJECT_ARB";
  case 0x8B49:
    return "GL_MAX_FRAGMENT_UNIFORM_COMPONENTS";
  case 0x8B4A:
    return "GL_MAX_VERTEX_UNIFORM_COMPONENTS";
  case 0x8B4B:
    return "GL_MAX_VARYING_FLOATS";
  case 0x8B4C:
    return "GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS";
  case 0x8B4D:
    return "GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS";
  case 0x8B4E:
    return "GL_OBJECT_TYPE_ARB";
  case 0x8B4F:
    return "GL_SHADER_TYPE";
  case 0x8B80:
    return "GL_DELETE_STATUS";
  case 0x8B81:
    return "GL_COMPILE_STATUS";
  case 0x8B82:
    return "GL_LINK_STATUS";
  case 0x8B83:
    return "GL_VALIDATE_STATUS";
  case 0x8B84:
    return "GL_INFO_LOG_LENGTH";
  case 0x8B85:
    return "GL_ATTACHED_SHADERS";
  case 0x8B86:
    return "GL_ACTIVE_UNIFORMS";
  case 0x8B87:
    return "GL_ACTIVE_UNIFORM_MAX_LENGTH";
  case 0x8B88:
    return "GL_SHADER_SOURCE_LENGTH";
  case 0x8B89:
    return "GL_ACTIVE_ATTRIBUTES";
  case 0x8B8A:
    return "GL_ACTIVE_ATTRIBUTE_MAX_LENGTH";
  case 0x8B8B:
    return "GL_FRAGMENT_SHADER_DERIVATIVE_HINT";
  case 0x8B8C:
    return "GL_SHADING_LANGUAGE_VERSION";
  case 0x8B8D:
    return "GL_CURRENT_PROGRAM";
  case 0x8CA0:
    return "GL_POINT_SPRITE_COORD_ORIGIN";
  case 0x8CA1:
    return "GL_LOWER_LEFT";
  case 0x8CA2:
    return "GL_UPPER_LEFT";
  case 0x8CA3:
    return "GL_STENCIL_BACK_REF";
  case 0x8CA4:
    return "GL_STENCIL_BACK_VALUE_MASK";
  case 0x8CA5:
    return "GL_STENCIL_BACK_WRITEMASK";
  case 0x8CA6:
    return "GL_DRAW_FRAMEBUFFER_BINDING";
  case 0x8CA7:
    return "GL_RENDERBUFFER_BINDING";
  case 0x8CA8:
    return "GL_READ_FRAMEBUFFER";
  case 0x8CA9:
    return "GL_DRAW_FRAMEBUFFER";
  case 0x8CAA:
    return "GL_READ_FRAMEBUFFER_BINDING";
  case 0x8CAB:
    return "GL_RENDERBUFFER_COVERAGE_SAMPLES_NV";
  case 0x8CAC:
    return "GL_DEPTH_COMPONENT32F";
  case 0x8CAD:
    return "GL_DEPTH32F_STENCIL8";
  case 0x8CD0:
    return "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE";
  case 0x8CD1:
    return "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME";
  case 0x8CD2:
    return "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL";
  case 0x8CD3:
    return "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE";
  case 0x8CD4:
    return "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT";
  case 0x8CD5:
    return "GL_FRAMEBUFFER_COMPLETE";
  case 0x8CD6:
    return "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
  case 0x8CD7:
    return "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
  case 0x8CD9:
    return "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
  case 0x8CDA:
    return "GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT";
  case 0x8CDB:
    return "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER";
  case 0x8CDC:
    return "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER";
  case 0x8CDD:
    return "GL_FRAMEBUFFER_UNSUPPORTED";
  case 0x8CDF:
    return "GL_MAX_COLOR_ATTACHMENTS";
  case 0x8CE0:
    return "GL_COLOR_ATTACHMENT0";
  case 0x8CE1:
    return "GL_COLOR_ATTACHMENT1";
  case 0x8CE2:
    return "GL_COLOR_ATTACHMENT2";
  case 0x8CE3:
    return "GL_COLOR_ATTACHMENT3";
  case 0x8CE4:
    return "GL_COLOR_ATTACHMENT4";
  case 0x8CE5:
    return "GL_COLOR_ATTACHMENT5";
  case 0x8CE6:
    return "GL_COLOR_ATTACHMENT6";
  case 0x8CE7:
    return "GL_COLOR_ATTACHMENT7";
  case 0x8CE8:
    return "GL_COLOR_ATTACHMENT8";
  case 0x8CE9:
    return "GL_COLOR_ATTACHMENT9";
  case 0x8CEA:
    return "GL_COLOR_ATTACHMENT10";
  case 0x8CEB:
    return "GL_COLOR_ATTACHMENT11";
  case 0x8CEC:
    return "GL_COLOR_ATTACHMENT12";
  case 0x8CED:
    return "GL_COLOR_ATTACHMENT13";
  case 0x8CEE:
    return "GL_COLOR_ATTACHMENT14";
  case 0x8CEF:
    return "GL_COLOR_ATTACHMENT15";
  case 0x8CF0:
    return "GL_COLOR_ATTACHMENT16";
  case 0x8CF1:
    return "GL_COLOR_ATTACHMENT17";
  case 0x8CF2:
    return "GL_COLOR_ATTACHMENT18";
  case 0x8CF3:
    return "GL_COLOR_ATTACHMENT19";
  case 0x8CF4:
    return "GL_COLOR_ATTACHMENT20";
  case 0x8CF5:
    return "GL_COLOR_ATTACHMENT21";
  case 0x8CF6:
    return "GL_COLOR_ATTACHMENT22";
  case 0x8CF7:
    return "GL_COLOR_ATTACHMENT23";
  case 0x8CF8:
    return "GL_COLOR_ATTACHMENT24";
  case 0x8CF9:
    return "GL_COLOR_ATTACHMENT25";
  case 0x8CFA:
    return "GL_COLOR_ATTACHMENT26";
  case 0x8CFB:
    return "GL_COLOR_ATTACHMENT27";
  case 0x8CFC:
    return "GL_COLOR_ATTACHMENT28";
  case 0x8CFD:
    return "GL_COLOR_ATTACHMENT29";
  case 0x8CFE:
    return "GL_COLOR_ATTACHMENT30";
  case 0x8CFF:
    return "GL_COLOR_ATTACHMENT31";
  case 0x8D00:
    return "GL_DEPTH_ATTACHMENT";
  case 0x8D20:
    return "GL_STENCIL_ATTACHMENT";
  case 0x8D40:
    return "GL_FRAMEBUFFER";
  case 0x8D41:
    return "GL_RENDERBUFFER";
  case 0x8D42:
    return "GL_RENDERBUFFER_WIDTH";
  case 0x8D43:
    return "GL_RENDERBUFFER_HEIGHT";
  case 0x8D44:
    return "GL_RENDERBUFFER_INTERNAL_FORMAT";
  case 0x8D46:
    return "GL_STENCIL_INDEX1";
  case 0x8D47:
    return "GL_STENCIL_INDEX4";
  case 0x8D48:
    return "GL_STENCIL_INDEX8";
  case 0x8D49:
    return "GL_STENCIL_INDEX16";
  case 0x8D50:
    return "GL_RENDERBUFFER_RED_SIZE";
  case 0x8D51:
    return "GL_RENDERBUFFER_GREEN_SIZE";
  case 0x8D52:
    return "GL_RENDERBUFFER_BLUE_SIZE";
  case 0x8D53:
    return "GL_RENDERBUFFER_ALPHA_SIZE";
  case 0x8D54:
    return "GL_RENDERBUFFER_DEPTH_SIZE";
  case 0x8D55:
    return "GL_RENDERBUFFER_STENCIL_SIZE";
  case 0x8D56:
    return "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE";
  case 0x8D57:
    return "GL_MAX_SAMPLES";
  case 0x8F90:
    return "GL_RED_SNORM";
  case 0x8F91:
    return "GL_RG_SNORM";
  case 0x8F92:
    return "GL_RGB_SNORM";
  case 0x8F93:
    return "GL_RGBA_SNORM";
  case 0x8F94:
    return "GL_R8_SNORM";
  case 0x8F95:
    return "GL_RG8_SNORM";
  case 0x8F96:
    return "GL_RGB8_SNORM";
  case 0x8F97:
    return "GL_RGBA8_SNORM";
  case 0x8F98:
    return "GL_R16_SNORM";
  case 0x8F99:
    return "GL_RG16_SNORM";
  case 0x8F9A:
    return "GL_RGB16_SNORM";
  case 0x8F9B:
    return "GL_RGBA16_SNORM";
  case 0x8F9C:
    return "GL_SIGNED_NORMALIZED";
  case 0x8F9D:
    return "GL_PRIMITIVE_RESTART";
  case 0x8F9E:
    return "GL_PRIMITIVE_RESTART_INDEX";
  case 0x8F9F:
    return "GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB";
  case 0x9100:
    return "GL_TEXTURE_2D_MULTISAMPLE";
  case 0x9101:
    return "GL_PROXY_TEXTURE_2D_MULTISAMPLE";
  case 0x9102:
    return "GL_TEXTURE_2D_MULTISAMPLE_ARRAY";
  case 0x9103:
    return "GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY";
  case 0x9104:
    return "GL_TEXTURE_BINDING_2D_MULTISAMPLE";
  case 0x9105:
    return "GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY";
  case 0x9106:
    return "GL_TEXTURE_SAMPLES";
  case 0x9107:
    return "GL_TEXTURE_FIXED_SAMPLE_LOCATIONS";
  case 0x9108:
    return "GL_SAMPLER_2D_MULTISAMPLE";
  case 0x9109:
    return "GL_INT_SAMPLER_2D_MULTISAMPLE";
  case 0x910A:
    return "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE";
  case 0x910B:
    return "GL_SAMPLER_2D_MULTISAMPLE_ARRAY";
  case 0x910C:
    return "GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY";
  case 0x910D:
    return "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY";
  case 0x910E:
    return "GL_MAX_COLOR_TEXTURE_SAMPLES";
  case 0x910F:
    return "GL_MAX_DEPTH_TEXTURE_SAMPLES";
  case 0x9110:
    return "GL_MAX_INTEGER_SAMPLES";
  case 0x9111:
    return "GL_MAX_SERVER_WAIT_TIMEOUT";
  case 0x9112:
    return "GL_OBJECT_TYPE";
  case 0x9113:
    return "GL_SYNC_CONDITION";
  case 0x9114:
    return "GL_SYNC_STATUS";
  case 0x9115:
    return "GL_SYNC_FLAGS";
  case 0x9116:
    return "GL_SYNC_FENCE";
  case 0x9117:
    return "GL_SYNC_GPU_COMMANDS_COMPLETE";
  case 0x9118:
    return "GL_UNSIGNALED";
  case 0x9119:
    return "GL_SIGNALED";
  case 0x911A:
    return "GL_ALREADY_SIGNALED";
  case 0x911B:
    return "GL_TIMEOUT_EXPIRED";
  case 0x911C:
    return "GL_CONDITION_SATISFIED";
  case 0x911D:
    return "GL_WAIT_FAILED";
  case 0x911F:
    return "GL_BUFFER_ACCESS_FLAGS";
  case 0x9120:
    return "GL_BUFFER_MAP_LENGTH";
  case 0x9121:
    return "GL_BUFFER_MAP_OFFSET";
  case 0x9122:
    return "GL_MAX_VERTEX_OUTPUT_COMPONENTS";
  case 0x9123:
    return "GL_MAX_GEOMETRY_INPUT_COMPONENTS";
  case 0x9124:
    return "GL_MAX_GEOMETRY_OUTPUT_COMPONENTS";
  case 0x9125:
    return "GL_MAX_FRAGMENT_INPUT_COMPONENTS";
  case 0x9126:
    return "GL_CONTEXT_PROFILE_MASK";
  case 0x9127:
    return "GL_UNPACK_COMPRESSED_BLOCK_WIDTH";
  case 0x9128:
    return "GL_UNPACK_COMPRESSED_BLOCK_HEIGHT";
  case 0x9129:
    return "GL_UNPACK_COMPRESSED_BLOCK_DEPTH";
  case 0x912A:
    return "GL_UNPACK_COMPRESSED_BLOCK_SIZE";
  case 0x912B:
    return "GL_PACK_COMPRESSED_BLOCK_WIDTH";
  case 0x912C:
    return "GL_PACK_COMPRESSED_BLOCK_HEIGHT";
  case 0x912D:
    return "GL_PACK_COMPRESSED_BLOCK_DEPTH";
  case 0x912E:
    return "GL_PACK_COMPRESSED_BLOCK_SIZE";
  case 0x912F:
    return "GL_TEXTURE_IMMUTABLE_FORMAT";
  case 0x9380:
    return "GL_NUM_SAMPLE_COUNTS";
  case 0x9381:
    return "GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB";
  case 0x9382:
    return "GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB";
  case 0x9383:
    return "GL_VIEW_CLASS_EAC_R11";
  case 0x9384:
    return "GL_VIEW_CLASS_EAC_RG11";
  case 0x9385:
    return "GL_VIEW_CLASS_ETC2_RGB";
  case 0x9386:
    return "GL_VIEW_CLASS_ETC2_RGBA";
  case 0x9387:
    return "GL_VIEW_CLASS_ETC2_EAC_RGBA";
  case 0x9388:
    return "GL_VIEW_CLASS_ASTC_4x4_RGBA";
  case 0x9389:
    return "GL_VIEW_CLASS_ASTC_5x4_RGBA";
  case 0x938A:
    return "GL_VIEW_CLASS_ASTC_5x5_RGBA";
  case 0x938B:
    return "GL_VIEW_CLASS_ASTC_6x5_RGBA";
  case 0x938C:
    return "GL_VIEW_CLASS_ASTC_6x6_RGBA";
  case 0x938D:
    return "GL_VIEW_CLASS_ASTC_8x5_RGBA";
  case 0x938E:
    return "GL_VIEW_CLASS_ASTC_8x6_RGBA";
  case 0x938F:
    return "GL_VIEW_CLASS_ASTC_8x8_RGBA";
  case 0x9390:
    return "GL_VIEW_CLASS_ASTC_10x5_RGBA";
  case 0x9391:
    return "GL_VIEW_CLASS_ASTC_10x6_RGBA";
  case 0x9392:
    return "GL_VIEW_CLASS_ASTC_10x8_RGBA";
  case 0x9393:
    return "GL_VIEW_CLASS_ASTC_10x10_RGBA";
  case 0x9394:
    return "GL_VIEW_CLASS_ASTC_12x10_RGBA";
  case 0x9395:
    return "GL_VIEW_CLASS_ASTC_12x12_RGBA";
  default:
    return "ENUM_UNKNOWN";
  }
}

typedef void(*__ctype_glAccum)(GLenum, GLfloat);
static __ctype_glAccum __glintercept_fnptr_glAccum;
void __glintercept_glAccum(GLenum op, GLfloat value) {
  __glintercept_fnptr_glAccum(op, value);
  __glintercept_log(" - glAccum(op: %ld (%s), value: %ld)", op, __gl_intercept_formatenum(op), value);
}

typedef void(*__ctype_glAccumxOES)(GLenum, GLfixed);
static __ctype_glAccumxOES __glintercept_fnptr_glAccumxOES;
void __glintercept_glAccumxOES(GLenum op, GLfixed value) {
  __glintercept_fnptr_glAccumxOES(op, value);
  __glintercept_log(" - glAccumxOES(op: %ld (%s), value: %ld)", op, __gl_intercept_formatenum(op), value);
}

typedef void(*__ctype_glActiveProgramEXT)(GLuint);
static __ctype_glActiveProgramEXT __glintercept_fnptr_glActiveProgramEXT;
void __glintercept_glActiveProgramEXT(GLuint program) {
  __glintercept_fnptr_glActiveProgramEXT(program);
  __glintercept_log(" - glActiveProgramEXT(program: %ld)", program);
}

typedef void(*__ctype_glActiveShaderProgram)(GLuint, GLuint);
static __ctype_glActiveShaderProgram __glintercept_fnptr_glActiveShaderProgram;
void __glintercept_glActiveShaderProgram(GLuint pipeline, GLuint program) {
  __glintercept_fnptr_glActiveShaderProgram(pipeline, program);
  __glintercept_log(" - glActiveShaderProgram(pipeline: %ld, program: %ld)", pipeline, program);
}

typedef void(*__ctype_glActiveShaderProgramEXT)(GLuint, GLuint);
static __ctype_glActiveShaderProgramEXT __glintercept_fnptr_glActiveShaderProgramEXT;
void __glintercept_glActiveShaderProgramEXT(GLuint pipeline, GLuint program) {
  __glintercept_fnptr_glActiveShaderProgramEXT(pipeline, program);
  __glintercept_log(" - glActiveShaderProgramEXT(pipeline: %ld, program: %ld)", pipeline, program);
}

typedef void(*__ctype_glActiveStencilFaceEXT)(GLenum);
static __ctype_glActiveStencilFaceEXT __glintercept_fnptr_glActiveStencilFaceEXT;
void __glintercept_glActiveStencilFaceEXT(GLenum face) {
  __glintercept_fnptr_glActiveStencilFaceEXT(face);
  __glintercept_log(" - glActiveStencilFaceEXT(face: %ld (%s))", face, __gl_intercept_formatenum(face));
}

typedef void(*__ctype_glActiveTexture)(GLenum);
static __ctype_glActiveTexture __glintercept_fnptr_glActiveTexture;
void __glintercept_glActiveTexture(GLenum texture) {
  __glintercept_fnptr_glActiveTexture(texture);
  __glintercept_log(" - glActiveTexture(texture: %ld (%s))", texture, __gl_intercept_formatenum(texture));
}

typedef void(*__ctype_glActiveTextureARB)(GLenum);
static __ctype_glActiveTextureARB __glintercept_fnptr_glActiveTextureARB;
void __glintercept_glActiveTextureARB(GLenum texture) {
  __glintercept_fnptr_glActiveTextureARB(texture);
  __glintercept_log(" - glActiveTextureARB(texture: %ld (%s))", texture, __gl_intercept_formatenum(texture));
}

typedef void(*__ctype_glActiveVaryingNV)(GLuint, const GLchar *);
static __ctype_glActiveVaryingNV __glintercept_fnptr_glActiveVaryingNV;
void __glintercept_glActiveVaryingNV(GLuint program, const GLchar * name) {
  __glintercept_fnptr_glActiveVaryingNV(program, name);
  __glintercept_log(" - glActiveVaryingNV(program: %ld, name: %ld)", program, name);
}

typedef void(*__ctype_glAlphaFragmentOp1ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
static __ctype_glAlphaFragmentOp1ATI __glintercept_fnptr_glAlphaFragmentOp1ATI;
void __glintercept_glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) {
  __glintercept_fnptr_glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
  __glintercept_log(" - glAlphaFragmentOp1ATI(op: %ld (%s), dst: %ld, dstMod: %ld, arg1: %ld, arg1Rep: %ld, arg1Mod: %ld)", op, __gl_intercept_formatenum(op), dst, dstMod, arg1, arg1Rep, arg1Mod);
}

typedef void(*__ctype_glAlphaFragmentOp2ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
static __ctype_glAlphaFragmentOp2ATI __glintercept_fnptr_glAlphaFragmentOp2ATI;
void __glintercept_glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) {
  __glintercept_fnptr_glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
  __glintercept_log(" - glAlphaFragmentOp2ATI(op: %ld (%s), dst: %ld, dstMod: %ld, arg1: %ld, arg1Rep: %ld, arg1Mod: %ld, arg2: %ld, arg2Rep: %ld, arg2Mod: %ld)", op, __gl_intercept_formatenum(op), dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}

typedef void(*__ctype_glAlphaFragmentOp3ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
static __ctype_glAlphaFragmentOp3ATI __glintercept_fnptr_glAlphaFragmentOp3ATI;
void __glintercept_glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) {
  __glintercept_fnptr_glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
  __glintercept_log(" - glAlphaFragmentOp3ATI(op: %ld (%s), dst: %ld, dstMod: %ld, arg1: %ld, arg1Rep: %ld, arg1Mod: %ld, arg2: %ld, arg2Rep: %ld, arg2Mod: %ld, arg3: %ld, arg3Rep: %ld, arg3Mod: %ld)", op, __gl_intercept_formatenum(op), dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}

typedef void(*__ctype_glAlphaFunc)(GLenum, GLfloat);
static __ctype_glAlphaFunc __glintercept_fnptr_glAlphaFunc;
void __glintercept_glAlphaFunc(GLenum func, GLfloat ref) {
  __glintercept_fnptr_glAlphaFunc(func, ref);
  __glintercept_log(" - glAlphaFunc(func: %ld (%s), ref: %ld)", func, __gl_intercept_formatenum(func), ref);
}

typedef void(*__ctype_glAlphaFuncQCOM)(GLenum, GLclampf);
static __ctype_glAlphaFuncQCOM __glintercept_fnptr_glAlphaFuncQCOM;
void __glintercept_glAlphaFuncQCOM(GLenum func, GLclampf ref) {
  __glintercept_fnptr_glAlphaFuncQCOM(func, ref);
  __glintercept_log(" - glAlphaFuncQCOM(func: %ld (%s), ref: %ld)", func, __gl_intercept_formatenum(func), ref);
}

typedef void(*__ctype_glAlphaFuncx)(GLenum, GLfixed);
static __ctype_glAlphaFuncx __glintercept_fnptr_glAlphaFuncx;
void __glintercept_glAlphaFuncx(GLenum func, GLfixed ref) {
  __glintercept_fnptr_glAlphaFuncx(func, ref);
  __glintercept_log(" - glAlphaFuncx(func: %ld (%s), ref: %ld)", func, __gl_intercept_formatenum(func), ref);
}

typedef void(*__ctype_glAlphaFuncxOES)(GLenum, GLfixed);
static __ctype_glAlphaFuncxOES __glintercept_fnptr_glAlphaFuncxOES;
void __glintercept_glAlphaFuncxOES(GLenum func, GLfixed ref) {
  __glintercept_fnptr_glAlphaFuncxOES(func, ref);
  __glintercept_log(" - glAlphaFuncxOES(func: %ld (%s), ref: %ld)", func, __gl_intercept_formatenum(func), ref);
}

typedef void(*__ctype_glAlphaToCoverageDitherControlNV)(GLenum);
static __ctype_glAlphaToCoverageDitherControlNV __glintercept_fnptr_glAlphaToCoverageDitherControlNV;
void __glintercept_glAlphaToCoverageDitherControlNV(GLenum mode) {
  __glintercept_fnptr_glAlphaToCoverageDitherControlNV(mode);
  __glintercept_log(" - glAlphaToCoverageDitherControlNV(mode: %ld (%s))", mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glApplyFramebufferAttachmentCMAAINTEL)();
static __ctype_glApplyFramebufferAttachmentCMAAINTEL __glintercept_fnptr_glApplyFramebufferAttachmentCMAAINTEL;
void __glintercept_glApplyFramebufferAttachmentCMAAINTEL() {
  __glintercept_fnptr_glApplyFramebufferAttachmentCMAAINTEL();
  __glintercept_log(" - glApplyFramebufferAttachmentCMAAINTEL()");
}

typedef void(*__ctype_glApplyTextureEXT)(GLenum);
static __ctype_glApplyTextureEXT __glintercept_fnptr_glApplyTextureEXT;
void __glintercept_glApplyTextureEXT(GLenum mode) {
  __glintercept_fnptr_glApplyTextureEXT(mode);
  __glintercept_log(" - glApplyTextureEXT(mode: %ld (%s))", mode, __gl_intercept_formatenum(mode));
}

typedef GLboolean(*__ctype_glAcquireKeyedMutexWin32EXT)(GLuint, GLuint64, GLuint);
static __ctype_glAcquireKeyedMutexWin32EXT __glintercept_fnptr_glAcquireKeyedMutexWin32EXT;
GLboolean __glintercept_glAcquireKeyedMutexWin32EXT(GLuint memory, GLuint64 key, GLuint timeout) {
  GLboolean __ret = __glintercept_fnptr_glAcquireKeyedMutexWin32EXT(memory, key, timeout);
  __glintercept_log(" - glAcquireKeyedMutexWin32EXT(memory: %ld, key: %ld, timeout: %ld) -> %ld", memory, key, timeout, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glAreProgramsResidentNV)(GLsizei, const GLuint *, GLboolean *);
static __ctype_glAreProgramsResidentNV __glintercept_fnptr_glAreProgramsResidentNV;
GLboolean __glintercept_glAreProgramsResidentNV(GLsizei n, const GLuint * programs, GLboolean * residences) {
  GLboolean __ret = __glintercept_fnptr_glAreProgramsResidentNV(n, programs, residences);
  __glintercept_log(" - glAreProgramsResidentNV(n: %ld, programs: %ld, residences: %ld) -> %ld", n, programs, residences, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glAreTexturesResident)(GLsizei, const GLuint *, GLboolean *);
static __ctype_glAreTexturesResident __glintercept_fnptr_glAreTexturesResident;
GLboolean __glintercept_glAreTexturesResident(GLsizei n, const GLuint * textures, GLboolean * residences) {
  GLboolean __ret = __glintercept_fnptr_glAreTexturesResident(n, textures, residences);
  __glintercept_log(" - glAreTexturesResident(n: %ld, textures: %ld, residences: %ld) -> %ld", n, textures, residences, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glAreTexturesResidentEXT)(GLsizei, const GLuint *, GLboolean *);
static __ctype_glAreTexturesResidentEXT __glintercept_fnptr_glAreTexturesResidentEXT;
GLboolean __glintercept_glAreTexturesResidentEXT(GLsizei n, const GLuint * textures, GLboolean * residences) {
  GLboolean __ret = __glintercept_fnptr_glAreTexturesResidentEXT(n, textures, residences);
  __glintercept_log(" - glAreTexturesResidentEXT(n: %ld, textures: %ld, residences: %ld) -> %ld", n, textures, residences, __ret);
  return __ret;
}

typedef void(*__ctype_glArrayElement)(GLint);
static __ctype_glArrayElement __glintercept_fnptr_glArrayElement;
void __glintercept_glArrayElement(GLint i) {
  __glintercept_fnptr_glArrayElement(i);
  __glintercept_log(" - glArrayElement(i: %ld)", i);
}

typedef void(*__ctype_glArrayElementEXT)(GLint);
static __ctype_glArrayElementEXT __glintercept_fnptr_glArrayElementEXT;
void __glintercept_glArrayElementEXT(GLint i) {
  __glintercept_fnptr_glArrayElementEXT(i);
  __glintercept_log(" - glArrayElementEXT(i: %ld)", i);
}

typedef void(*__ctype_glArrayObjectATI)(GLenum, GLint, GLenum, GLsizei, GLuint, GLuint);
static __ctype_glArrayObjectATI __glintercept_fnptr_glArrayObjectATI;
void __glintercept_glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) {
  __glintercept_fnptr_glArrayObjectATI(array, size, type, stride, buffer, offset);
  __glintercept_log(" - glArrayObjectATI(array: %ld (%s), size: %ld, type: %ld (%s), stride: %ld, buffer: %ld, offset: %ld)", array, __gl_intercept_formatenum(array), size, type, __gl_intercept_formatenum(type), stride, buffer, offset);
}

typedef GLuint(*__ctype_glAsyncCopyBufferSubDataNVX)(GLsizei, const GLuint *, const GLuint64 *, GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr, GLsizei, const GLuint *, const GLuint64 *);
static __ctype_glAsyncCopyBufferSubDataNVX __glintercept_fnptr_glAsyncCopyBufferSubDataNVX;
GLuint __glintercept_glAsyncCopyBufferSubDataNVX(GLsizei waitSemaphoreCount, const GLuint * waitSemaphoreArray, const GLuint64 * fenceValueArray, GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, GLsizei signalSemaphoreCount, const GLuint * signalSemaphoreArray, const GLuint64 * signalValueArray) {
  GLuint __ret = __glintercept_fnptr_glAsyncCopyBufferSubDataNVX(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
  __glintercept_log(" - glAsyncCopyBufferSubDataNVX(waitSemaphoreCount: %ld, waitSemaphoreArray: %ld, fenceValueArray: %ld, readGpu: %ld, writeGpuMask: %ld, readBuffer: %ld, writeBuffer: %ld, readOffset: %ld, writeOffset: %ld, size: %ld, signalSemaphoreCount: %ld, signalSemaphoreArray: %ld, signalValueArray: %ld) -> %ld", waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray, __ret);
  return __ret;
}

typedef GLuint(*__ctype_glAsyncCopyImageSubDataNVX)(GLsizei, const GLuint *, const GLuint64 *, GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, const GLuint *, const GLuint64 *);
static __ctype_glAsyncCopyImageSubDataNVX __glintercept_fnptr_glAsyncCopyImageSubDataNVX;
GLuint __glintercept_glAsyncCopyImageSubDataNVX(GLsizei waitSemaphoreCount, const GLuint * waitSemaphoreArray, const GLuint64 * waitValueArray, GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, GLsizei signalSemaphoreCount, const GLuint * signalSemaphoreArray, const GLuint64 * signalValueArray) {
  GLuint __ret = __glintercept_fnptr_glAsyncCopyImageSubDataNVX(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
  __glintercept_log(" - glAsyncCopyImageSubDataNVX(waitSemaphoreCount: %ld, waitSemaphoreArray: %ld, waitValueArray: %ld, srcGpu: %ld, dstGpuMask: %ld, srcName: %ld, srcTarget: %ld (%s), srcLevel: %ld, srcX: %ld, srcY: %ld, srcZ: %ld, dstName: %ld, dstTarget: %ld (%s), dstLevel: %ld, dstX: %ld, dstY: %ld, dstZ: %ld, srcWidth: %ld, srcHeight: %ld, srcDepth: %ld, signalSemaphoreCount: %ld, signalSemaphoreArray: %ld, signalValueArray: %ld) -> %ld", waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, __gl_intercept_formatenum(srcTarget), srcLevel, srcX, srcY, srcZ, dstName, dstTarget, __gl_intercept_formatenum(dstTarget), dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray, __ret);
  return __ret;
}

typedef void(*__ctype_glAsyncMarkerSGIX)(GLuint);
static __ctype_glAsyncMarkerSGIX __glintercept_fnptr_glAsyncMarkerSGIX;
void __glintercept_glAsyncMarkerSGIX(GLuint marker) {
  __glintercept_fnptr_glAsyncMarkerSGIX(marker);
  __glintercept_log(" - glAsyncMarkerSGIX(marker: %ld)", marker);
}

typedef void(*__ctype_glAttachObjectARB)(GLhandleARB, GLhandleARB);
static __ctype_glAttachObjectARB __glintercept_fnptr_glAttachObjectARB;
void __glintercept_glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj) {
  __glintercept_fnptr_glAttachObjectARB(containerObj, obj);
  __glintercept_log(" - glAttachObjectARB(containerObj: %ld, obj: %ld)", containerObj, obj);
}

typedef void(*__ctype_glAttachShader)(GLuint, GLuint);
static __ctype_glAttachShader __glintercept_fnptr_glAttachShader;
void __glintercept_glAttachShader(GLuint program, GLuint shader) {
  __glintercept_fnptr_glAttachShader(program, shader);
  __glintercept_log(" - glAttachShader(program: %ld, shader: %ld)", program, shader);
}

typedef void(*__ctype_glBegin)(GLenum);
static __ctype_glBegin __glintercept_fnptr_glBegin;
void __glintercept_glBegin(GLenum mode) {
  __glintercept_fnptr_glBegin(mode);
  __glintercept_log(" - glBegin(mode: %ld (%s))", mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glBeginConditionalRender)(GLuint, GLenum);
static __ctype_glBeginConditionalRender __glintercept_fnptr_glBeginConditionalRender;
void __glintercept_glBeginConditionalRender(GLuint id, GLenum mode) {
  __glintercept_fnptr_glBeginConditionalRender(id, mode);
  __glintercept_log(" - glBeginConditionalRender(id: %ld, mode: %ld (%s))", id, mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glBeginConditionalRenderNV)(GLuint, GLenum);
static __ctype_glBeginConditionalRenderNV __glintercept_fnptr_glBeginConditionalRenderNV;
void __glintercept_glBeginConditionalRenderNV(GLuint id, GLenum mode) {
  __glintercept_fnptr_glBeginConditionalRenderNV(id, mode);
  __glintercept_log(" - glBeginConditionalRenderNV(id: %ld, mode: %ld (%s))", id, mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glBeginConditionalRenderNVX)(GLuint);
static __ctype_glBeginConditionalRenderNVX __glintercept_fnptr_glBeginConditionalRenderNVX;
void __glintercept_glBeginConditionalRenderNVX(GLuint id) {
  __glintercept_fnptr_glBeginConditionalRenderNVX(id);
  __glintercept_log(" - glBeginConditionalRenderNVX(id: %ld)", id);
}

typedef void(*__ctype_glBeginFragmentShaderATI)();
static __ctype_glBeginFragmentShaderATI __glintercept_fnptr_glBeginFragmentShaderATI;
void __glintercept_glBeginFragmentShaderATI() {
  __glintercept_fnptr_glBeginFragmentShaderATI();
  __glintercept_log(" - glBeginFragmentShaderATI()");
}

typedef void(*__ctype_glBeginOcclusionQueryNV)(GLuint);
static __ctype_glBeginOcclusionQueryNV __glintercept_fnptr_glBeginOcclusionQueryNV;
void __glintercept_glBeginOcclusionQueryNV(GLuint id) {
  __glintercept_fnptr_glBeginOcclusionQueryNV(id);
  __glintercept_log(" - glBeginOcclusionQueryNV(id: %ld)", id);
}

typedef void(*__ctype_glBeginPerfMonitorAMD)(GLuint);
static __ctype_glBeginPerfMonitorAMD __glintercept_fnptr_glBeginPerfMonitorAMD;
void __glintercept_glBeginPerfMonitorAMD(GLuint monitor) {
  __glintercept_fnptr_glBeginPerfMonitorAMD(monitor);
  __glintercept_log(" - glBeginPerfMonitorAMD(monitor: %ld)", monitor);
}

typedef void(*__ctype_glBeginPerfQueryINTEL)(GLuint);
static __ctype_glBeginPerfQueryINTEL __glintercept_fnptr_glBeginPerfQueryINTEL;
void __glintercept_glBeginPerfQueryINTEL(GLuint queryHandle) {
  __glintercept_fnptr_glBeginPerfQueryINTEL(queryHandle);
  __glintercept_log(" - glBeginPerfQueryINTEL(queryHandle: %ld)", queryHandle);
}

typedef void(*__ctype_glBeginQuery)(GLenum, GLuint);
static __ctype_glBeginQuery __glintercept_fnptr_glBeginQuery;
void __glintercept_glBeginQuery(GLenum target, GLuint id) {
  __glintercept_fnptr_glBeginQuery(target, id);
  __glintercept_log(" - glBeginQuery(target: %ld (%s), id: %ld)", target, __gl_intercept_formatenum(target), id);
}

typedef void(*__ctype_glBeginQueryARB)(GLenum, GLuint);
static __ctype_glBeginQueryARB __glintercept_fnptr_glBeginQueryARB;
void __glintercept_glBeginQueryARB(GLenum target, GLuint id) {
  __glintercept_fnptr_glBeginQueryARB(target, id);
  __glintercept_log(" - glBeginQueryARB(target: %ld (%s), id: %ld)", target, __gl_intercept_formatenum(target), id);
}

typedef void(*__ctype_glBeginQueryEXT)(GLenum, GLuint);
static __ctype_glBeginQueryEXT __glintercept_fnptr_glBeginQueryEXT;
void __glintercept_glBeginQueryEXT(GLenum target, GLuint id) {
  __glintercept_fnptr_glBeginQueryEXT(target, id);
  __glintercept_log(" - glBeginQueryEXT(target: %ld (%s), id: %ld)", target, __gl_intercept_formatenum(target), id);
}

typedef void(*__ctype_glBeginQueryIndexed)(GLenum, GLuint, GLuint);
static __ctype_glBeginQueryIndexed __glintercept_fnptr_glBeginQueryIndexed;
void __glintercept_glBeginQueryIndexed(GLenum target, GLuint index, GLuint id) {
  __glintercept_fnptr_glBeginQueryIndexed(target, index, id);
  __glintercept_log(" - glBeginQueryIndexed(target: %ld (%s), index: %ld, id: %ld)", target, __gl_intercept_formatenum(target), index, id);
}

typedef void(*__ctype_glBeginTransformFeedback)(GLenum);
static __ctype_glBeginTransformFeedback __glintercept_fnptr_glBeginTransformFeedback;
void __glintercept_glBeginTransformFeedback(GLenum primitiveMode) {
  __glintercept_fnptr_glBeginTransformFeedback(primitiveMode);
  __glintercept_log(" - glBeginTransformFeedback(primitiveMode: %ld (%s))", primitiveMode, __gl_intercept_formatenum(primitiveMode));
}

typedef void(*__ctype_glBeginTransformFeedbackEXT)(GLenum);
static __ctype_glBeginTransformFeedbackEXT __glintercept_fnptr_glBeginTransformFeedbackEXT;
void __glintercept_glBeginTransformFeedbackEXT(GLenum primitiveMode) {
  __glintercept_fnptr_glBeginTransformFeedbackEXT(primitiveMode);
  __glintercept_log(" - glBeginTransformFeedbackEXT(primitiveMode: %ld (%s))", primitiveMode, __gl_intercept_formatenum(primitiveMode));
}

typedef void(*__ctype_glBeginTransformFeedbackNV)(GLenum);
static __ctype_glBeginTransformFeedbackNV __glintercept_fnptr_glBeginTransformFeedbackNV;
void __glintercept_glBeginTransformFeedbackNV(GLenum primitiveMode) {
  __glintercept_fnptr_glBeginTransformFeedbackNV(primitiveMode);
  __glintercept_log(" - glBeginTransformFeedbackNV(primitiveMode: %ld (%s))", primitiveMode, __gl_intercept_formatenum(primitiveMode));
}

typedef void(*__ctype_glBeginVertexShaderEXT)();
static __ctype_glBeginVertexShaderEXT __glintercept_fnptr_glBeginVertexShaderEXT;
void __glintercept_glBeginVertexShaderEXT() {
  __glintercept_fnptr_glBeginVertexShaderEXT();
  __glintercept_log(" - glBeginVertexShaderEXT()");
}

typedef void(*__ctype_glBeginVideoCaptureNV)(GLuint);
static __ctype_glBeginVideoCaptureNV __glintercept_fnptr_glBeginVideoCaptureNV;
void __glintercept_glBeginVideoCaptureNV(GLuint video_capture_slot) {
  __glintercept_fnptr_glBeginVideoCaptureNV(video_capture_slot);
  __glintercept_log(" - glBeginVideoCaptureNV(video_capture_slot: %ld)", video_capture_slot);
}

typedef void(*__ctype_glBindAttribLocation)(GLuint, GLuint, const GLchar *);
static __ctype_glBindAttribLocation __glintercept_fnptr_glBindAttribLocation;
void __glintercept_glBindAttribLocation(GLuint program, GLuint index, const GLchar * name) {
  __glintercept_fnptr_glBindAttribLocation(program, index, name);
  __glintercept_log(" - glBindAttribLocation(program: %ld, index: %ld, name: %ld)", program, index, name);
}

typedef void(*__ctype_glBindAttribLocationARB)(GLhandleARB, GLuint, const GLcharARB *);
static __ctype_glBindAttribLocationARB __glintercept_fnptr_glBindAttribLocationARB;
void __glintercept_glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB * name) {
  __glintercept_fnptr_glBindAttribLocationARB(programObj, index, name);
  __glintercept_log(" - glBindAttribLocationARB(programObj: %ld, index: %ld, name: %ld)", programObj, index, name);
}

typedef void(*__ctype_glBindBuffer)(GLenum, GLuint);
static __ctype_glBindBuffer __glintercept_fnptr_glBindBuffer;
void __glintercept_glBindBuffer(GLenum target, GLuint buffer) {
  __glintercept_fnptr_glBindBuffer(target, buffer);
  __glintercept_log(" - glBindBuffer(target: %ld (%s), buffer: %ld)", target, __gl_intercept_formatenum(target), buffer);
}

typedef void(*__ctype_glBindBufferARB)(GLenum, GLuint);
static __ctype_glBindBufferARB __glintercept_fnptr_glBindBufferARB;
void __glintercept_glBindBufferARB(GLenum target, GLuint buffer) {
  __glintercept_fnptr_glBindBufferARB(target, buffer);
  __glintercept_log(" - glBindBufferARB(target: %ld (%s), buffer: %ld)", target, __gl_intercept_formatenum(target), buffer);
}

typedef void(*__ctype_glBindBufferBase)(GLenum, GLuint, GLuint);
static __ctype_glBindBufferBase __glintercept_fnptr_glBindBufferBase;
void __glintercept_glBindBufferBase(GLenum target, GLuint index, GLuint buffer) {
  __glintercept_fnptr_glBindBufferBase(target, index, buffer);
  __glintercept_log(" - glBindBufferBase(target: %ld (%s), index: %ld, buffer: %ld)", target, __gl_intercept_formatenum(target), index, buffer);
}

typedef void(*__ctype_glBindBufferBaseEXT)(GLenum, GLuint, GLuint);
static __ctype_glBindBufferBaseEXT __glintercept_fnptr_glBindBufferBaseEXT;
void __glintercept_glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer) {
  __glintercept_fnptr_glBindBufferBaseEXT(target, index, buffer);
  __glintercept_log(" - glBindBufferBaseEXT(target: %ld (%s), index: %ld, buffer: %ld)", target, __gl_intercept_formatenum(target), index, buffer);
}

typedef void(*__ctype_glBindBufferBaseNV)(GLenum, GLuint, GLuint);
static __ctype_glBindBufferBaseNV __glintercept_fnptr_glBindBufferBaseNV;
void __glintercept_glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer) {
  __glintercept_fnptr_glBindBufferBaseNV(target, index, buffer);
  __glintercept_log(" - glBindBufferBaseNV(target: %ld (%s), index: %ld, buffer: %ld)", target, __gl_intercept_formatenum(target), index, buffer);
}

typedef void(*__ctype_glBindBufferOffsetEXT)(GLenum, GLuint, GLuint, GLintptr);
static __ctype_glBindBufferOffsetEXT __glintercept_fnptr_glBindBufferOffsetEXT;
void __glintercept_glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset) {
  __glintercept_fnptr_glBindBufferOffsetEXT(target, index, buffer, offset);
  __glintercept_log(" - glBindBufferOffsetEXT(target: %ld (%s), index: %ld, buffer: %ld, offset: %ld)", target, __gl_intercept_formatenum(target), index, buffer, offset);
}

typedef void(*__ctype_glBindBufferOffsetNV)(GLenum, GLuint, GLuint, GLintptr);
static __ctype_glBindBufferOffsetNV __glintercept_fnptr_glBindBufferOffsetNV;
void __glintercept_glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset) {
  __glintercept_fnptr_glBindBufferOffsetNV(target, index, buffer, offset);
  __glintercept_log(" - glBindBufferOffsetNV(target: %ld (%s), index: %ld, buffer: %ld, offset: %ld)", target, __gl_intercept_formatenum(target), index, buffer, offset);
}

typedef void(*__ctype_glBindBufferRange)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
static __ctype_glBindBufferRange __glintercept_fnptr_glBindBufferRange;
void __glintercept_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  __glintercept_fnptr_glBindBufferRange(target, index, buffer, offset, size);
  __glintercept_log(" - glBindBufferRange(target: %ld (%s), index: %ld, buffer: %ld, offset: %ld, size: %ld)", target, __gl_intercept_formatenum(target), index, buffer, offset, size);
}

typedef void(*__ctype_glBindBufferRangeEXT)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
static __ctype_glBindBufferRangeEXT __glintercept_fnptr_glBindBufferRangeEXT;
void __glintercept_glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  __glintercept_fnptr_glBindBufferRangeEXT(target, index, buffer, offset, size);
  __glintercept_log(" - glBindBufferRangeEXT(target: %ld (%s), index: %ld, buffer: %ld, offset: %ld, size: %ld)", target, __gl_intercept_formatenum(target), index, buffer, offset, size);
}

typedef void(*__ctype_glBindBufferRangeNV)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
static __ctype_glBindBufferRangeNV __glintercept_fnptr_glBindBufferRangeNV;
void __glintercept_glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  __glintercept_fnptr_glBindBufferRangeNV(target, index, buffer, offset, size);
  __glintercept_log(" - glBindBufferRangeNV(target: %ld (%s), index: %ld, buffer: %ld, offset: %ld, size: %ld)", target, __gl_intercept_formatenum(target), index, buffer, offset, size);
}

typedef void(*__ctype_glBindBuffersBase)(GLenum, GLuint, GLsizei, const GLuint *);
static __ctype_glBindBuffersBase __glintercept_fnptr_glBindBuffersBase;
void __glintercept_glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint * buffers) {
  __glintercept_fnptr_glBindBuffersBase(target, first, count, buffers);
  __glintercept_log(" - glBindBuffersBase(target: %ld (%s), first: %ld, count: %ld, buffers: %ld)", target, __gl_intercept_formatenum(target), first, count, buffers);
}

typedef void(*__ctype_glBindBuffersRange)(GLenum, GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizeiptr *);
static __ctype_glBindBuffersRange __glintercept_fnptr_glBindBuffersRange;
void __glintercept_glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes) {
  __glintercept_fnptr_glBindBuffersRange(target, first, count, buffers, offsets, sizes);
  __glintercept_log(" - glBindBuffersRange(target: %ld (%s), first: %ld, count: %ld, buffers: %ld, offsets: %ld, sizes: %ld)", target, __gl_intercept_formatenum(target), first, count, buffers, offsets, sizes);
}

typedef void(*__ctype_glBindFragDataLocation)(GLuint, GLuint, const GLchar *);
static __ctype_glBindFragDataLocation __glintercept_fnptr_glBindFragDataLocation;
void __glintercept_glBindFragDataLocation(GLuint program, GLuint color, const GLchar * name) {
  __glintercept_fnptr_glBindFragDataLocation(program, color, name);
  __glintercept_log(" - glBindFragDataLocation(program: %ld, color: %ld, name: %ld)", program, color, name);
}

typedef void(*__ctype_glBindFragDataLocationEXT)(GLuint, GLuint, const GLchar *);
static __ctype_glBindFragDataLocationEXT __glintercept_fnptr_glBindFragDataLocationEXT;
void __glintercept_glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar * name) {
  __glintercept_fnptr_glBindFragDataLocationEXT(program, color, name);
  __glintercept_log(" - glBindFragDataLocationEXT(program: %ld, color: %ld, name: %ld)", program, color, name);
}

typedef void(*__ctype_glBindFragDataLocationIndexed)(GLuint, GLuint, GLuint, const GLchar *);
static __ctype_glBindFragDataLocationIndexed __glintercept_fnptr_glBindFragDataLocationIndexed;
void __glintercept_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name) {
  __glintercept_fnptr_glBindFragDataLocationIndexed(program, colorNumber, index, name);
  __glintercept_log(" - glBindFragDataLocationIndexed(program: %ld, colorNumber: %ld, index: %ld, name: %ld)", program, colorNumber, index, name);
}

typedef void(*__ctype_glBindFragDataLocationIndexedEXT)(GLuint, GLuint, GLuint, const GLchar *);
static __ctype_glBindFragDataLocationIndexedEXT __glintercept_fnptr_glBindFragDataLocationIndexedEXT;
void __glintercept_glBindFragDataLocationIndexedEXT(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name) {
  __glintercept_fnptr_glBindFragDataLocationIndexedEXT(program, colorNumber, index, name);
  __glintercept_log(" - glBindFragDataLocationIndexedEXT(program: %ld, colorNumber: %ld, index: %ld, name: %ld)", program, colorNumber, index, name);
}

typedef void(*__ctype_glBindFragmentShaderATI)(GLuint);
static __ctype_glBindFragmentShaderATI __glintercept_fnptr_glBindFragmentShaderATI;
void __glintercept_glBindFragmentShaderATI(GLuint id) {
  __glintercept_fnptr_glBindFragmentShaderATI(id);
  __glintercept_log(" - glBindFragmentShaderATI(id: %ld)", id);
}

typedef void(*__ctype_glBindFramebuffer)(GLenum, GLuint);
static __ctype_glBindFramebuffer __glintercept_fnptr_glBindFramebuffer;
void __glintercept_glBindFramebuffer(GLenum target, GLuint framebuffer) {
  __glintercept_fnptr_glBindFramebuffer(target, framebuffer);
  __glintercept_log(" - glBindFramebuffer(target: %ld (%s), framebuffer: %ld)", target, __gl_intercept_formatenum(target), framebuffer);
}

typedef void(*__ctype_glBindFramebufferEXT)(GLenum, GLuint);
static __ctype_glBindFramebufferEXT __glintercept_fnptr_glBindFramebufferEXT;
void __glintercept_glBindFramebufferEXT(GLenum target, GLuint framebuffer) {
  __glintercept_fnptr_glBindFramebufferEXT(target, framebuffer);
  __glintercept_log(" - glBindFramebufferEXT(target: %ld (%s), framebuffer: %ld)", target, __gl_intercept_formatenum(target), framebuffer);
}

typedef void(*__ctype_glBindFramebufferOES)(GLenum, GLuint);
static __ctype_glBindFramebufferOES __glintercept_fnptr_glBindFramebufferOES;
void __glintercept_glBindFramebufferOES(GLenum target, GLuint framebuffer) {
  __glintercept_fnptr_glBindFramebufferOES(target, framebuffer);
  __glintercept_log(" - glBindFramebufferOES(target: %ld (%s), framebuffer: %ld)", target, __gl_intercept_formatenum(target), framebuffer);
}

typedef void(*__ctype_glBindImageTexture)(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum);
static __ctype_glBindImageTexture __glintercept_fnptr_glBindImageTexture;
void __glintercept_glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) {
  __glintercept_fnptr_glBindImageTexture(unit, texture, level, layered, layer, access, format);
  __glintercept_log(" - glBindImageTexture(unit: %ld, texture: %ld, level: %ld, layered: %ld, layer: %ld, access: %ld (%s), format: %ld (%s))", unit, texture, level, layered, layer, access, __gl_intercept_formatenum(access), format, __gl_intercept_formatenum(format));
}

typedef void(*__ctype_glBindImageTextureEXT)(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint);
static __ctype_glBindImageTextureEXT __glintercept_fnptr_glBindImageTextureEXT;
void __glintercept_glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format) {
  __glintercept_fnptr_glBindImageTextureEXT(index, texture, level, layered, layer, access, format);
  __glintercept_log(" - glBindImageTextureEXT(index: %ld, texture: %ld, level: %ld, layered: %ld, layer: %ld, access: %ld (%s), format: %ld)", index, texture, level, layered, layer, access, __gl_intercept_formatenum(access), format);
}

typedef void(*__ctype_glBindImageTextures)(GLuint, GLsizei, const GLuint *);
static __ctype_glBindImageTextures __glintercept_fnptr_glBindImageTextures;
void __glintercept_glBindImageTextures(GLuint first, GLsizei count, const GLuint * textures) {
  __glintercept_fnptr_glBindImageTextures(first, count, textures);
  __glintercept_log(" - glBindImageTextures(first: %ld, count: %ld, textures: %ld)", first, count, textures);
}

typedef GLuint(*__ctype_glBindLightParameterEXT)(GLenum, GLenum);
static __ctype_glBindLightParameterEXT __glintercept_fnptr_glBindLightParameterEXT;
GLuint __glintercept_glBindLightParameterEXT(GLenum light, GLenum value) {
  GLuint __ret = __glintercept_fnptr_glBindLightParameterEXT(light, value);
  __glintercept_log(" - glBindLightParameterEXT(light: %ld (%s), value: %ld (%s)) -> %ld", light, __gl_intercept_formatenum(light), value, __gl_intercept_formatenum(value), __ret);
  return __ret;
}

typedef GLuint(*__ctype_glBindMaterialParameterEXT)(GLenum, GLenum);
static __ctype_glBindMaterialParameterEXT __glintercept_fnptr_glBindMaterialParameterEXT;
GLuint __glintercept_glBindMaterialParameterEXT(GLenum face, GLenum value) {
  GLuint __ret = __glintercept_fnptr_glBindMaterialParameterEXT(face, value);
  __glintercept_log(" - glBindMaterialParameterEXT(face: %ld (%s), value: %ld (%s)) -> %ld", face, __gl_intercept_formatenum(face), value, __gl_intercept_formatenum(value), __ret);
  return __ret;
}

typedef void(*__ctype_glBindMultiTextureEXT)(GLenum, GLenum, GLuint);
static __ctype_glBindMultiTextureEXT __glintercept_fnptr_glBindMultiTextureEXT;
void __glintercept_glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture) {
  __glintercept_fnptr_glBindMultiTextureEXT(texunit, target, texture);
  __glintercept_log(" - glBindMultiTextureEXT(texunit: %ld (%s), target: %ld (%s), texture: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), texture);
}

typedef GLuint(*__ctype_glBindParameterEXT)(GLenum);
static __ctype_glBindParameterEXT __glintercept_fnptr_glBindParameterEXT;
GLuint __glintercept_glBindParameterEXT(GLenum value) {
  GLuint __ret = __glintercept_fnptr_glBindParameterEXT(value);
  __glintercept_log(" - glBindParameterEXT(value: %ld (%s)) -> %ld", value, __gl_intercept_formatenum(value), __ret);
  return __ret;
}

typedef void(*__ctype_glBindProgramARB)(GLenum, GLuint);
static __ctype_glBindProgramARB __glintercept_fnptr_glBindProgramARB;
void __glintercept_glBindProgramARB(GLenum target, GLuint program) {
  __glintercept_fnptr_glBindProgramARB(target, program);
  __glintercept_log(" - glBindProgramARB(target: %ld (%s), program: %ld)", target, __gl_intercept_formatenum(target), program);
}

typedef void(*__ctype_glBindProgramNV)(GLenum, GLuint);
static __ctype_glBindProgramNV __glintercept_fnptr_glBindProgramNV;
void __glintercept_glBindProgramNV(GLenum target, GLuint id) {
  __glintercept_fnptr_glBindProgramNV(target, id);
  __glintercept_log(" - glBindProgramNV(target: %ld (%s), id: %ld)", target, __gl_intercept_formatenum(target), id);
}

typedef void(*__ctype_glBindProgramPipeline)(GLuint);
static __ctype_glBindProgramPipeline __glintercept_fnptr_glBindProgramPipeline;
void __glintercept_glBindProgramPipeline(GLuint pipeline) {
  __glintercept_fnptr_glBindProgramPipeline(pipeline);
  __glintercept_log(" - glBindProgramPipeline(pipeline: %ld)", pipeline);
}

typedef void(*__ctype_glBindProgramPipelineEXT)(GLuint);
static __ctype_glBindProgramPipelineEXT __glintercept_fnptr_glBindProgramPipelineEXT;
void __glintercept_glBindProgramPipelineEXT(GLuint pipeline) {
  __glintercept_fnptr_glBindProgramPipelineEXT(pipeline);
  __glintercept_log(" - glBindProgramPipelineEXT(pipeline: %ld)", pipeline);
}

typedef void(*__ctype_glBindRenderbuffer)(GLenum, GLuint);
static __ctype_glBindRenderbuffer __glintercept_fnptr_glBindRenderbuffer;
void __glintercept_glBindRenderbuffer(GLenum target, GLuint renderbuffer) {
  __glintercept_fnptr_glBindRenderbuffer(target, renderbuffer);
  __glintercept_log(" - glBindRenderbuffer(target: %ld (%s), renderbuffer: %ld)", target, __gl_intercept_formatenum(target), renderbuffer);
}

typedef void(*__ctype_glBindRenderbufferEXT)(GLenum, GLuint);
static __ctype_glBindRenderbufferEXT __glintercept_fnptr_glBindRenderbufferEXT;
void __glintercept_glBindRenderbufferEXT(GLenum target, GLuint renderbuffer) {
  __glintercept_fnptr_glBindRenderbufferEXT(target, renderbuffer);
  __glintercept_log(" - glBindRenderbufferEXT(target: %ld (%s), renderbuffer: %ld)", target, __gl_intercept_formatenum(target), renderbuffer);
}

typedef void(*__ctype_glBindRenderbufferOES)(GLenum, GLuint);
static __ctype_glBindRenderbufferOES __glintercept_fnptr_glBindRenderbufferOES;
void __glintercept_glBindRenderbufferOES(GLenum target, GLuint renderbuffer) {
  __glintercept_fnptr_glBindRenderbufferOES(target, renderbuffer);
  __glintercept_log(" - glBindRenderbufferOES(target: %ld (%s), renderbuffer: %ld)", target, __gl_intercept_formatenum(target), renderbuffer);
}

typedef void(*__ctype_glBindSampler)(GLuint, GLuint);
static __ctype_glBindSampler __glintercept_fnptr_glBindSampler;
void __glintercept_glBindSampler(GLuint unit, GLuint sampler) {
  __glintercept_fnptr_glBindSampler(unit, sampler);
  __glintercept_log(" - glBindSampler(unit: %ld, sampler: %ld)", unit, sampler);
}

typedef void(*__ctype_glBindSamplers)(GLuint, GLsizei, const GLuint *);
static __ctype_glBindSamplers __glintercept_fnptr_glBindSamplers;
void __glintercept_glBindSamplers(GLuint first, GLsizei count, const GLuint * samplers) {
  __glintercept_fnptr_glBindSamplers(first, count, samplers);
  __glintercept_log(" - glBindSamplers(first: %ld, count: %ld, samplers: %ld)", first, count, samplers);
}

typedef void(*__ctype_glBindShadingRateImageNV)(GLuint);
static __ctype_glBindShadingRateImageNV __glintercept_fnptr_glBindShadingRateImageNV;
void __glintercept_glBindShadingRateImageNV(GLuint texture) {
  __glintercept_fnptr_glBindShadingRateImageNV(texture);
  __glintercept_log(" - glBindShadingRateImageNV(texture: %ld)", texture);
}

typedef GLuint(*__ctype_glBindTexGenParameterEXT)(GLenum, GLenum, GLenum);
static __ctype_glBindTexGenParameterEXT __glintercept_fnptr_glBindTexGenParameterEXT;
GLuint __glintercept_glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value) {
  GLuint __ret = __glintercept_fnptr_glBindTexGenParameterEXT(unit, coord, value);
  __glintercept_log(" - glBindTexGenParameterEXT(unit: %ld (%s), coord: %ld (%s), value: %ld (%s)) -> %ld", unit, __gl_intercept_formatenum(unit), coord, __gl_intercept_formatenum(coord), value, __gl_intercept_formatenum(value), __ret);
  return __ret;
}

typedef void(*__ctype_glBindTexture)(GLenum, GLuint);
static __ctype_glBindTexture __glintercept_fnptr_glBindTexture;
void __glintercept_glBindTexture(GLenum target, GLuint texture) {
  __glintercept_fnptr_glBindTexture(target, texture);
  __glintercept_log(" - glBindTexture(target: %ld (%s), texture: %ld)", target, __gl_intercept_formatenum(target), texture);
}

typedef void(*__ctype_glBindTextureEXT)(GLenum, GLuint);
static __ctype_glBindTextureEXT __glintercept_fnptr_glBindTextureEXT;
void __glintercept_glBindTextureEXT(GLenum target, GLuint texture) {
  __glintercept_fnptr_glBindTextureEXT(target, texture);
  __glintercept_log(" - glBindTextureEXT(target: %ld (%s), texture: %ld)", target, __gl_intercept_formatenum(target), texture);
}

typedef void(*__ctype_glBindTextureUnit)(GLuint, GLuint);
static __ctype_glBindTextureUnit __glintercept_fnptr_glBindTextureUnit;
void __glintercept_glBindTextureUnit(GLuint unit, GLuint texture) {
  __glintercept_fnptr_glBindTextureUnit(unit, texture);
  __glintercept_log(" - glBindTextureUnit(unit: %ld, texture: %ld)", unit, texture);
}

typedef GLuint(*__ctype_glBindTextureUnitParameterEXT)(GLenum, GLenum);
static __ctype_glBindTextureUnitParameterEXT __glintercept_fnptr_glBindTextureUnitParameterEXT;
GLuint __glintercept_glBindTextureUnitParameterEXT(GLenum unit, GLenum value) {
  GLuint __ret = __glintercept_fnptr_glBindTextureUnitParameterEXT(unit, value);
  __glintercept_log(" - glBindTextureUnitParameterEXT(unit: %ld (%s), value: %ld (%s)) -> %ld", unit, __gl_intercept_formatenum(unit), value, __gl_intercept_formatenum(value), __ret);
  return __ret;
}

typedef void(*__ctype_glBindTextures)(GLuint, GLsizei, const GLuint *);
static __ctype_glBindTextures __glintercept_fnptr_glBindTextures;
void __glintercept_glBindTextures(GLuint first, GLsizei count, const GLuint * textures) {
  __glintercept_fnptr_glBindTextures(first, count, textures);
  __glintercept_log(" - glBindTextures(first: %ld, count: %ld, textures: %ld)", first, count, textures);
}

typedef void(*__ctype_glBindTransformFeedback)(GLenum, GLuint);
static __ctype_glBindTransformFeedback __glintercept_fnptr_glBindTransformFeedback;
void __glintercept_glBindTransformFeedback(GLenum target, GLuint id) {
  __glintercept_fnptr_glBindTransformFeedback(target, id);
  __glintercept_log(" - glBindTransformFeedback(target: %ld (%s), id: %ld)", target, __gl_intercept_formatenum(target), id);
}

typedef void(*__ctype_glBindTransformFeedbackNV)(GLenum, GLuint);
static __ctype_glBindTransformFeedbackNV __glintercept_fnptr_glBindTransformFeedbackNV;
void __glintercept_glBindTransformFeedbackNV(GLenum target, GLuint id) {
  __glintercept_fnptr_glBindTransformFeedbackNV(target, id);
  __glintercept_log(" - glBindTransformFeedbackNV(target: %ld (%s), id: %ld)", target, __gl_intercept_formatenum(target), id);
}

typedef void(*__ctype_glBindVertexArray)(GLuint);
static __ctype_glBindVertexArray __glintercept_fnptr_glBindVertexArray;
void __glintercept_glBindVertexArray(GLuint array) {
  __glintercept_fnptr_glBindVertexArray(array);
  __glintercept_log(" - glBindVertexArray(array: %ld)", array);
}

typedef void(*__ctype_glBindVertexArrayAPPLE)(GLuint);
static __ctype_glBindVertexArrayAPPLE __glintercept_fnptr_glBindVertexArrayAPPLE;
void __glintercept_glBindVertexArrayAPPLE(GLuint array) {
  __glintercept_fnptr_glBindVertexArrayAPPLE(array);
  __glintercept_log(" - glBindVertexArrayAPPLE(array: %ld)", array);
}

typedef void(*__ctype_glBindVertexArrayOES)(GLuint);
static __ctype_glBindVertexArrayOES __glintercept_fnptr_glBindVertexArrayOES;
void __glintercept_glBindVertexArrayOES(GLuint array) {
  __glintercept_fnptr_glBindVertexArrayOES(array);
  __glintercept_log(" - glBindVertexArrayOES(array: %ld)", array);
}

typedef void(*__ctype_glBindVertexBuffer)(GLuint, GLuint, GLintptr, GLsizei);
static __ctype_glBindVertexBuffer __glintercept_fnptr_glBindVertexBuffer;
void __glintercept_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
  __glintercept_fnptr_glBindVertexBuffer(bindingindex, buffer, offset, stride);
  __glintercept_log(" - glBindVertexBuffer(bindingindex: %ld, buffer: %ld, offset: %ld, stride: %ld)", bindingindex, buffer, offset, stride);
}

typedef void(*__ctype_glBindVertexBuffers)(GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizei *);
static __ctype_glBindVertexBuffers __glintercept_fnptr_glBindVertexBuffers;
void __glintercept_glBindVertexBuffers(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) {
  __glintercept_fnptr_glBindVertexBuffers(first, count, buffers, offsets, strides);
  __glintercept_log(" - glBindVertexBuffers(first: %ld, count: %ld, buffers: %ld, offsets: %ld, strides: %ld)", first, count, buffers, offsets, strides);
}

typedef void(*__ctype_glBindVertexShaderEXT)(GLuint);
static __ctype_glBindVertexShaderEXT __glintercept_fnptr_glBindVertexShaderEXT;
void __glintercept_glBindVertexShaderEXT(GLuint id) {
  __glintercept_fnptr_glBindVertexShaderEXT(id);
  __glintercept_log(" - glBindVertexShaderEXT(id: %ld)", id);
}

typedef void(*__ctype_glBindVideoCaptureStreamBufferNV)(GLuint, GLuint, GLenum, GLintptrARB);
static __ctype_glBindVideoCaptureStreamBufferNV __glintercept_fnptr_glBindVideoCaptureStreamBufferNV;
void __glintercept_glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset) {
  __glintercept_fnptr_glBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset);
  __glintercept_log(" - glBindVideoCaptureStreamBufferNV(video_capture_slot: %ld, stream: %ld, frame_region: %ld (%s), offset: %ld)", video_capture_slot, stream, frame_region, __gl_intercept_formatenum(frame_region), offset);
}

typedef void(*__ctype_glBindVideoCaptureStreamTextureNV)(GLuint, GLuint, GLenum, GLenum, GLuint);
static __ctype_glBindVideoCaptureStreamTextureNV __glintercept_fnptr_glBindVideoCaptureStreamTextureNV;
void __glintercept_glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture) {
  __glintercept_fnptr_glBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture);
  __glintercept_log(" - glBindVideoCaptureStreamTextureNV(video_capture_slot: %ld, stream: %ld, frame_region: %ld (%s), target: %ld (%s), texture: %ld)", video_capture_slot, stream, frame_region, __gl_intercept_formatenum(frame_region), target, __gl_intercept_formatenum(target), texture);
}

typedef void(*__ctype_glBinormal3bEXT)(GLbyte, GLbyte, GLbyte);
static __ctype_glBinormal3bEXT __glintercept_fnptr_glBinormal3bEXT;
void __glintercept_glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz) {
  __glintercept_fnptr_glBinormal3bEXT(bx, by, bz);
  __glintercept_log(" - glBinormal3bEXT(bx: %ld, by: %ld, bz: %ld)", bx, by, bz);
}

typedef void(*__ctype_glBinormal3bvEXT)(const GLbyte *);
static __ctype_glBinormal3bvEXT __glintercept_fnptr_glBinormal3bvEXT;
void __glintercept_glBinormal3bvEXT(const GLbyte * v) {
  __glintercept_fnptr_glBinormal3bvEXT(v);
  __glintercept_log(" - glBinormal3bvEXT(v: %ld)", v);
}

typedef void(*__ctype_glBinormal3dEXT)(GLdouble, GLdouble, GLdouble);
static __ctype_glBinormal3dEXT __glintercept_fnptr_glBinormal3dEXT;
void __glintercept_glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz) {
  __glintercept_fnptr_glBinormal3dEXT(bx, by, bz);
  __glintercept_log(" - glBinormal3dEXT(bx: %ld, by: %ld, bz: %ld)", bx, by, bz);
}

typedef void(*__ctype_glBinormal3dvEXT)(const GLdouble *);
static __ctype_glBinormal3dvEXT __glintercept_fnptr_glBinormal3dvEXT;
void __glintercept_glBinormal3dvEXT(const GLdouble * v) {
  __glintercept_fnptr_glBinormal3dvEXT(v);
  __glintercept_log(" - glBinormal3dvEXT(v: %ld)", v);
}

typedef void(*__ctype_glBinormal3fEXT)(GLfloat, GLfloat, GLfloat);
static __ctype_glBinormal3fEXT __glintercept_fnptr_glBinormal3fEXT;
void __glintercept_glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz) {
  __glintercept_fnptr_glBinormal3fEXT(bx, by, bz);
  __glintercept_log(" - glBinormal3fEXT(bx: %ld, by: %ld, bz: %ld)", bx, by, bz);
}

typedef void(*__ctype_glBinormal3fvEXT)(const GLfloat *);
static __ctype_glBinormal3fvEXT __glintercept_fnptr_glBinormal3fvEXT;
void __glintercept_glBinormal3fvEXT(const GLfloat * v) {
  __glintercept_fnptr_glBinormal3fvEXT(v);
  __glintercept_log(" - glBinormal3fvEXT(v: %ld)", v);
}

typedef void(*__ctype_glBinormal3iEXT)(GLint, GLint, GLint);
static __ctype_glBinormal3iEXT __glintercept_fnptr_glBinormal3iEXT;
void __glintercept_glBinormal3iEXT(GLint bx, GLint by, GLint bz) {
  __glintercept_fnptr_glBinormal3iEXT(bx, by, bz);
  __glintercept_log(" - glBinormal3iEXT(bx: %ld, by: %ld, bz: %ld)", bx, by, bz);
}

typedef void(*__ctype_glBinormal3ivEXT)(const GLint *);
static __ctype_glBinormal3ivEXT __glintercept_fnptr_glBinormal3ivEXT;
void __glintercept_glBinormal3ivEXT(const GLint * v) {
  __glintercept_fnptr_glBinormal3ivEXT(v);
  __glintercept_log(" - glBinormal3ivEXT(v: %ld)", v);
}

typedef void(*__ctype_glBinormal3sEXT)(GLshort, GLshort, GLshort);
static __ctype_glBinormal3sEXT __glintercept_fnptr_glBinormal3sEXT;
void __glintercept_glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz) {
  __glintercept_fnptr_glBinormal3sEXT(bx, by, bz);
  __glintercept_log(" - glBinormal3sEXT(bx: %ld, by: %ld, bz: %ld)", bx, by, bz);
}

typedef void(*__ctype_glBinormal3svEXT)(const GLshort *);
static __ctype_glBinormal3svEXT __glintercept_fnptr_glBinormal3svEXT;
void __glintercept_glBinormal3svEXT(const GLshort * v) {
  __glintercept_fnptr_glBinormal3svEXT(v);
  __glintercept_log(" - glBinormal3svEXT(v: %ld)", v);
}

typedef void(*__ctype_glBinormalPointerEXT)(GLenum, GLsizei, const void *);
static __ctype_glBinormalPointerEXT __glintercept_fnptr_glBinormalPointerEXT;
void __glintercept_glBinormalPointerEXT(GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glBinormalPointerEXT(type, stride, pointer);
  __glintercept_log(" - glBinormalPointerEXT(type: %ld (%s), stride: %ld, pointer: %ld)", type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glBitmap)(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const GLubyte *);
static __ctype_glBitmap __glintercept_fnptr_glBitmap;
void __glintercept_glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap) {
  __glintercept_fnptr_glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
  __glintercept_log(" - glBitmap(width: %ld, height: %ld, xorig: %ld, yorig: %ld, xmove: %ld, ymove: %ld, bitmap: %s)", width, height, xorig, yorig, xmove, ymove, bitmap);
}

typedef void(*__ctype_glBitmapxOES)(GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, const GLubyte *);
static __ctype_glBitmapxOES __glintercept_fnptr_glBitmapxOES;
void __glintercept_glBitmapxOES(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte * bitmap) {
  __glintercept_fnptr_glBitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap);
  __glintercept_log(" - glBitmapxOES(width: %ld, height: %ld, xorig: %ld, yorig: %ld, xmove: %ld, ymove: %ld, bitmap: %s)", width, height, xorig, yorig, xmove, ymove, bitmap);
}

typedef void(*__ctype_glBlendBarrier)();
static __ctype_glBlendBarrier __glintercept_fnptr_glBlendBarrier;
void __glintercept_glBlendBarrier() {
  __glintercept_fnptr_glBlendBarrier();
  __glintercept_log(" - glBlendBarrier()");
}

typedef void(*__ctype_glBlendBarrierKHR)();
static __ctype_glBlendBarrierKHR __glintercept_fnptr_glBlendBarrierKHR;
void __glintercept_glBlendBarrierKHR() {
  __glintercept_fnptr_glBlendBarrierKHR();
  __glintercept_log(" - glBlendBarrierKHR()");
}

typedef void(*__ctype_glBlendBarrierNV)();
static __ctype_glBlendBarrierNV __glintercept_fnptr_glBlendBarrierNV;
void __glintercept_glBlendBarrierNV() {
  __glintercept_fnptr_glBlendBarrierNV();
  __glintercept_log(" - glBlendBarrierNV()");
}

typedef void(*__ctype_glBlendColor)(GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glBlendColor __glintercept_fnptr_glBlendColor;
void __glintercept_glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  __glintercept_fnptr_glBlendColor(red, green, blue, alpha);
  __glintercept_log(" - glBlendColor(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glBlendColorEXT)(GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glBlendColorEXT __glintercept_fnptr_glBlendColorEXT;
void __glintercept_glBlendColorEXT(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  __glintercept_fnptr_glBlendColorEXT(red, green, blue, alpha);
  __glintercept_log(" - glBlendColorEXT(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glBlendColorxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
static __ctype_glBlendColorxOES __glintercept_fnptr_glBlendColorxOES;
void __glintercept_glBlendColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {
  __glintercept_fnptr_glBlendColorxOES(red, green, blue, alpha);
  __glintercept_log(" - glBlendColorxOES(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glBlendEquation)(GLenum);
static __ctype_glBlendEquation __glintercept_fnptr_glBlendEquation;
void __glintercept_glBlendEquation(GLenum mode) {
  __glintercept_fnptr_glBlendEquation(mode);
  __glintercept_log(" - glBlendEquation(mode: %ld (%s))", mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glBlendEquationEXT)(GLenum);
static __ctype_glBlendEquationEXT __glintercept_fnptr_glBlendEquationEXT;
void __glintercept_glBlendEquationEXT(GLenum mode) {
  __glintercept_fnptr_glBlendEquationEXT(mode);
  __glintercept_log(" - glBlendEquationEXT(mode: %ld (%s))", mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glBlendEquationIndexedAMD)(GLuint, GLenum);
static __ctype_glBlendEquationIndexedAMD __glintercept_fnptr_glBlendEquationIndexedAMD;
void __glintercept_glBlendEquationIndexedAMD(GLuint buf, GLenum mode) {
  __glintercept_fnptr_glBlendEquationIndexedAMD(buf, mode);
  __glintercept_log(" - glBlendEquationIndexedAMD(buf: %ld, mode: %ld (%s))", buf, mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glBlendEquationOES)(GLenum);
static __ctype_glBlendEquationOES __glintercept_fnptr_glBlendEquationOES;
void __glintercept_glBlendEquationOES(GLenum mode) {
  __glintercept_fnptr_glBlendEquationOES(mode);
  __glintercept_log(" - glBlendEquationOES(mode: %ld (%s))", mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glBlendEquationSeparate)(GLenum, GLenum);
static __ctype_glBlendEquationSeparate __glintercept_fnptr_glBlendEquationSeparate;
void __glintercept_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) {
  __glintercept_fnptr_glBlendEquationSeparate(modeRGB, modeAlpha);
  __glintercept_log(" - glBlendEquationSeparate(modeRGB: %ld (%s), modeAlpha: %ld (%s))", modeRGB, __gl_intercept_formatenum(modeRGB), modeAlpha, __gl_intercept_formatenum(modeAlpha));
}

typedef void(*__ctype_glBlendEquationSeparateEXT)(GLenum, GLenum);
static __ctype_glBlendEquationSeparateEXT __glintercept_fnptr_glBlendEquationSeparateEXT;
void __glintercept_glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha) {
  __glintercept_fnptr_glBlendEquationSeparateEXT(modeRGB, modeAlpha);
  __glintercept_log(" - glBlendEquationSeparateEXT(modeRGB: %ld (%s), modeAlpha: %ld (%s))", modeRGB, __gl_intercept_formatenum(modeRGB), modeAlpha, __gl_intercept_formatenum(modeAlpha));
}

typedef void(*__ctype_glBlendEquationSeparateIndexedAMD)(GLuint, GLenum, GLenum);
static __ctype_glBlendEquationSeparateIndexedAMD __glintercept_fnptr_glBlendEquationSeparateIndexedAMD;
void __glintercept_glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  __glintercept_fnptr_glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha);
  __glintercept_log(" - glBlendEquationSeparateIndexedAMD(buf: %ld, modeRGB: %ld (%s), modeAlpha: %ld (%s))", buf, modeRGB, __gl_intercept_formatenum(modeRGB), modeAlpha, __gl_intercept_formatenum(modeAlpha));
}

typedef void(*__ctype_glBlendEquationSeparateOES)(GLenum, GLenum);
static __ctype_glBlendEquationSeparateOES __glintercept_fnptr_glBlendEquationSeparateOES;
void __glintercept_glBlendEquationSeparateOES(GLenum modeRGB, GLenum modeAlpha) {
  __glintercept_fnptr_glBlendEquationSeparateOES(modeRGB, modeAlpha);
  __glintercept_log(" - glBlendEquationSeparateOES(modeRGB: %ld (%s), modeAlpha: %ld (%s))", modeRGB, __gl_intercept_formatenum(modeRGB), modeAlpha, __gl_intercept_formatenum(modeAlpha));
}

typedef void(*__ctype_glBlendEquationSeparatei)(GLuint, GLenum, GLenum);
static __ctype_glBlendEquationSeparatei __glintercept_fnptr_glBlendEquationSeparatei;
void __glintercept_glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  __glintercept_fnptr_glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
  __glintercept_log(" - glBlendEquationSeparatei(buf: %ld, modeRGB: %ld (%s), modeAlpha: %ld (%s))", buf, modeRGB, __gl_intercept_formatenum(modeRGB), modeAlpha, __gl_intercept_formatenum(modeAlpha));
}

typedef void(*__ctype_glBlendEquationSeparateiARB)(GLuint, GLenum, GLenum);
static __ctype_glBlendEquationSeparateiARB __glintercept_fnptr_glBlendEquationSeparateiARB;
void __glintercept_glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  __glintercept_fnptr_glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha);
  __glintercept_log(" - glBlendEquationSeparateiARB(buf: %ld, modeRGB: %ld (%s), modeAlpha: %ld (%s))", buf, modeRGB, __gl_intercept_formatenum(modeRGB), modeAlpha, __gl_intercept_formatenum(modeAlpha));
}

typedef void(*__ctype_glBlendEquationSeparateiEXT)(GLuint, GLenum, GLenum);
static __ctype_glBlendEquationSeparateiEXT __glintercept_fnptr_glBlendEquationSeparateiEXT;
void __glintercept_glBlendEquationSeparateiEXT(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  __glintercept_fnptr_glBlendEquationSeparateiEXT(buf, modeRGB, modeAlpha);
  __glintercept_log(" - glBlendEquationSeparateiEXT(buf: %ld, modeRGB: %ld (%s), modeAlpha: %ld (%s))", buf, modeRGB, __gl_intercept_formatenum(modeRGB), modeAlpha, __gl_intercept_formatenum(modeAlpha));
}

typedef void(*__ctype_glBlendEquationSeparateiOES)(GLuint, GLenum, GLenum);
static __ctype_glBlendEquationSeparateiOES __glintercept_fnptr_glBlendEquationSeparateiOES;
void __glintercept_glBlendEquationSeparateiOES(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  __glintercept_fnptr_glBlendEquationSeparateiOES(buf, modeRGB, modeAlpha);
  __glintercept_log(" - glBlendEquationSeparateiOES(buf: %ld, modeRGB: %ld (%s), modeAlpha: %ld (%s))", buf, modeRGB, __gl_intercept_formatenum(modeRGB), modeAlpha, __gl_intercept_formatenum(modeAlpha));
}

typedef void(*__ctype_glBlendEquationi)(GLuint, GLenum);
static __ctype_glBlendEquationi __glintercept_fnptr_glBlendEquationi;
void __glintercept_glBlendEquationi(GLuint buf, GLenum mode) {
  __glintercept_fnptr_glBlendEquationi(buf, mode);
  __glintercept_log(" - glBlendEquationi(buf: %ld, mode: %ld (%s))", buf, mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glBlendEquationiARB)(GLuint, GLenum);
static __ctype_glBlendEquationiARB __glintercept_fnptr_glBlendEquationiARB;
void __glintercept_glBlendEquationiARB(GLuint buf, GLenum mode) {
  __glintercept_fnptr_glBlendEquationiARB(buf, mode);
  __glintercept_log(" - glBlendEquationiARB(buf: %ld, mode: %ld (%s))", buf, mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glBlendEquationiEXT)(GLuint, GLenum);
static __ctype_glBlendEquationiEXT __glintercept_fnptr_glBlendEquationiEXT;
void __glintercept_glBlendEquationiEXT(GLuint buf, GLenum mode) {
  __glintercept_fnptr_glBlendEquationiEXT(buf, mode);
  __glintercept_log(" - glBlendEquationiEXT(buf: %ld, mode: %ld (%s))", buf, mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glBlendEquationiOES)(GLuint, GLenum);
static __ctype_glBlendEquationiOES __glintercept_fnptr_glBlendEquationiOES;
void __glintercept_glBlendEquationiOES(GLuint buf, GLenum mode) {
  __glintercept_fnptr_glBlendEquationiOES(buf, mode);
  __glintercept_log(" - glBlendEquationiOES(buf: %ld, mode: %ld (%s))", buf, mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glBlendFunc)(GLenum, GLenum);
static __ctype_glBlendFunc __glintercept_fnptr_glBlendFunc;
void __glintercept_glBlendFunc(GLenum sfactor, GLenum dfactor) {
  __glintercept_fnptr_glBlendFunc(sfactor, dfactor);
  __glintercept_log(" - glBlendFunc(sfactor: %ld (%s), dfactor: %ld (%s))", sfactor, __gl_intercept_formatenum(sfactor), dfactor, __gl_intercept_formatenum(dfactor));
}

typedef void(*__ctype_glBlendFuncIndexedAMD)(GLuint, GLenum, GLenum);
static __ctype_glBlendFuncIndexedAMD __glintercept_fnptr_glBlendFuncIndexedAMD;
void __glintercept_glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst) {
  __glintercept_fnptr_glBlendFuncIndexedAMD(buf, src, dst);
  __glintercept_log(" - glBlendFuncIndexedAMD(buf: %ld, src: %ld (%s), dst: %ld (%s))", buf, src, __gl_intercept_formatenum(src), dst, __gl_intercept_formatenum(dst));
}

typedef void(*__ctype_glBlendFuncSeparate)(GLenum, GLenum, GLenum, GLenum);
static __ctype_glBlendFuncSeparate __glintercept_fnptr_glBlendFuncSeparate;
void __glintercept_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
  __glintercept_fnptr_glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  __glintercept_log(" - glBlendFuncSeparate(sfactorRGB: %ld (%s), dfactorRGB: %ld (%s), sfactorAlpha: %ld (%s), dfactorAlpha: %ld (%s))", sfactorRGB, __gl_intercept_formatenum(sfactorRGB), dfactorRGB, __gl_intercept_formatenum(dfactorRGB), sfactorAlpha, __gl_intercept_formatenum(sfactorAlpha), dfactorAlpha, __gl_intercept_formatenum(dfactorAlpha));
}

typedef void(*__ctype_glBlendFuncSeparateEXT)(GLenum, GLenum, GLenum, GLenum);
static __ctype_glBlendFuncSeparateEXT __glintercept_fnptr_glBlendFuncSeparateEXT;
void __glintercept_glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
  __glintercept_fnptr_glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  __glintercept_log(" - glBlendFuncSeparateEXT(sfactorRGB: %ld (%s), dfactorRGB: %ld (%s), sfactorAlpha: %ld (%s), dfactorAlpha: %ld (%s))", sfactorRGB, __gl_intercept_formatenum(sfactorRGB), dfactorRGB, __gl_intercept_formatenum(dfactorRGB), sfactorAlpha, __gl_intercept_formatenum(sfactorAlpha), dfactorAlpha, __gl_intercept_formatenum(dfactorAlpha));
}

typedef void(*__ctype_glBlendFuncSeparateINGR)(GLenum, GLenum, GLenum, GLenum);
static __ctype_glBlendFuncSeparateINGR __glintercept_fnptr_glBlendFuncSeparateINGR;
void __glintercept_glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
  __glintercept_fnptr_glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  __glintercept_log(" - glBlendFuncSeparateINGR(sfactorRGB: %ld (%s), dfactorRGB: %ld (%s), sfactorAlpha: %ld (%s), dfactorAlpha: %ld (%s))", sfactorRGB, __gl_intercept_formatenum(sfactorRGB), dfactorRGB, __gl_intercept_formatenum(dfactorRGB), sfactorAlpha, __gl_intercept_formatenum(sfactorAlpha), dfactorAlpha, __gl_intercept_formatenum(dfactorAlpha));
}

typedef void(*__ctype_glBlendFuncSeparateIndexedAMD)(GLuint, GLenum, GLenum, GLenum, GLenum);
static __ctype_glBlendFuncSeparateIndexedAMD __glintercept_fnptr_glBlendFuncSeparateIndexedAMD;
void __glintercept_glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  __glintercept_fnptr_glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  __glintercept_log(" - glBlendFuncSeparateIndexedAMD(buf: %ld, srcRGB: %ld (%s), dstRGB: %ld (%s), srcAlpha: %ld (%s), dstAlpha: %ld (%s))", buf, srcRGB, __gl_intercept_formatenum(srcRGB), dstRGB, __gl_intercept_formatenum(dstRGB), srcAlpha, __gl_intercept_formatenum(srcAlpha), dstAlpha, __gl_intercept_formatenum(dstAlpha));
}

typedef void(*__ctype_glBlendFuncSeparateOES)(GLenum, GLenum, GLenum, GLenum);
static __ctype_glBlendFuncSeparateOES __glintercept_fnptr_glBlendFuncSeparateOES;
void __glintercept_glBlendFuncSeparateOES(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  __glintercept_fnptr_glBlendFuncSeparateOES(srcRGB, dstRGB, srcAlpha, dstAlpha);
  __glintercept_log(" - glBlendFuncSeparateOES(srcRGB: %ld (%s), dstRGB: %ld (%s), srcAlpha: %ld (%s), dstAlpha: %ld (%s))", srcRGB, __gl_intercept_formatenum(srcRGB), dstRGB, __gl_intercept_formatenum(dstRGB), srcAlpha, __gl_intercept_formatenum(srcAlpha), dstAlpha, __gl_intercept_formatenum(dstAlpha));
}

typedef void(*__ctype_glBlendFuncSeparatei)(GLuint, GLenum, GLenum, GLenum, GLenum);
static __ctype_glBlendFuncSeparatei __glintercept_fnptr_glBlendFuncSeparatei;
void __glintercept_glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  __glintercept_fnptr_glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  __glintercept_log(" - glBlendFuncSeparatei(buf: %ld, srcRGB: %ld (%s), dstRGB: %ld (%s), srcAlpha: %ld (%s), dstAlpha: %ld (%s))", buf, srcRGB, __gl_intercept_formatenum(srcRGB), dstRGB, __gl_intercept_formatenum(dstRGB), srcAlpha, __gl_intercept_formatenum(srcAlpha), dstAlpha, __gl_intercept_formatenum(dstAlpha));
}

typedef void(*__ctype_glBlendFuncSeparateiARB)(GLuint, GLenum, GLenum, GLenum, GLenum);
static __ctype_glBlendFuncSeparateiARB __glintercept_fnptr_glBlendFuncSeparateiARB;
void __glintercept_glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  __glintercept_fnptr_glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  __glintercept_log(" - glBlendFuncSeparateiARB(buf: %ld, srcRGB: %ld (%s), dstRGB: %ld (%s), srcAlpha: %ld (%s), dstAlpha: %ld (%s))", buf, srcRGB, __gl_intercept_formatenum(srcRGB), dstRGB, __gl_intercept_formatenum(dstRGB), srcAlpha, __gl_intercept_formatenum(srcAlpha), dstAlpha, __gl_intercept_formatenum(dstAlpha));
}

typedef void(*__ctype_glBlendFuncSeparateiEXT)(GLuint, GLenum, GLenum, GLenum, GLenum);
static __ctype_glBlendFuncSeparateiEXT __glintercept_fnptr_glBlendFuncSeparateiEXT;
void __glintercept_glBlendFuncSeparateiEXT(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  __glintercept_fnptr_glBlendFuncSeparateiEXT(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  __glintercept_log(" - glBlendFuncSeparateiEXT(buf: %ld, srcRGB: %ld (%s), dstRGB: %ld (%s), srcAlpha: %ld (%s), dstAlpha: %ld (%s))", buf, srcRGB, __gl_intercept_formatenum(srcRGB), dstRGB, __gl_intercept_formatenum(dstRGB), srcAlpha, __gl_intercept_formatenum(srcAlpha), dstAlpha, __gl_intercept_formatenum(dstAlpha));
}

typedef void(*__ctype_glBlendFuncSeparateiOES)(GLuint, GLenum, GLenum, GLenum, GLenum);
static __ctype_glBlendFuncSeparateiOES __glintercept_fnptr_glBlendFuncSeparateiOES;
void __glintercept_glBlendFuncSeparateiOES(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  __glintercept_fnptr_glBlendFuncSeparateiOES(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  __glintercept_log(" - glBlendFuncSeparateiOES(buf: %ld, srcRGB: %ld (%s), dstRGB: %ld (%s), srcAlpha: %ld (%s), dstAlpha: %ld (%s))", buf, srcRGB, __gl_intercept_formatenum(srcRGB), dstRGB, __gl_intercept_formatenum(dstRGB), srcAlpha, __gl_intercept_formatenum(srcAlpha), dstAlpha, __gl_intercept_formatenum(dstAlpha));
}

typedef void(*__ctype_glBlendFunci)(GLuint, GLenum, GLenum);
static __ctype_glBlendFunci __glintercept_fnptr_glBlendFunci;
void __glintercept_glBlendFunci(GLuint buf, GLenum src, GLenum dst) {
  __glintercept_fnptr_glBlendFunci(buf, src, dst);
  __glintercept_log(" - glBlendFunci(buf: %ld, src: %ld (%s), dst: %ld (%s))", buf, src, __gl_intercept_formatenum(src), dst, __gl_intercept_formatenum(dst));
}

typedef void(*__ctype_glBlendFunciARB)(GLuint, GLenum, GLenum);
static __ctype_glBlendFunciARB __glintercept_fnptr_glBlendFunciARB;
void __glintercept_glBlendFunciARB(GLuint buf, GLenum src, GLenum dst) {
  __glintercept_fnptr_glBlendFunciARB(buf, src, dst);
  __glintercept_log(" - glBlendFunciARB(buf: %ld, src: %ld (%s), dst: %ld (%s))", buf, src, __gl_intercept_formatenum(src), dst, __gl_intercept_formatenum(dst));
}

typedef void(*__ctype_glBlendFunciEXT)(GLuint, GLenum, GLenum);
static __ctype_glBlendFunciEXT __glintercept_fnptr_glBlendFunciEXT;
void __glintercept_glBlendFunciEXT(GLuint buf, GLenum src, GLenum dst) {
  __glintercept_fnptr_glBlendFunciEXT(buf, src, dst);
  __glintercept_log(" - glBlendFunciEXT(buf: %ld, src: %ld (%s), dst: %ld (%s))", buf, src, __gl_intercept_formatenum(src), dst, __gl_intercept_formatenum(dst));
}

typedef void(*__ctype_glBlendFunciOES)(GLuint, GLenum, GLenum);
static __ctype_glBlendFunciOES __glintercept_fnptr_glBlendFunciOES;
void __glintercept_glBlendFunciOES(GLuint buf, GLenum src, GLenum dst) {
  __glintercept_fnptr_glBlendFunciOES(buf, src, dst);
  __glintercept_log(" - glBlendFunciOES(buf: %ld, src: %ld (%s), dst: %ld (%s))", buf, src, __gl_intercept_formatenum(src), dst, __gl_intercept_formatenum(dst));
}

typedef void(*__ctype_glBlendParameteriNV)(GLenum, GLint);
static __ctype_glBlendParameteriNV __glintercept_fnptr_glBlendParameteriNV;
void __glintercept_glBlendParameteriNV(GLenum pname, GLint value) {
  __glintercept_fnptr_glBlendParameteriNV(pname, value);
  __glintercept_log(" - glBlendParameteriNV(pname: %ld (%s), value: %ld)", pname, __gl_intercept_formatenum(pname), value);
}

typedef void(*__ctype_glBlitFramebuffer)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
static __ctype_glBlitFramebuffer __glintercept_fnptr_glBlitFramebuffer;
void __glintercept_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  __glintercept_fnptr_glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  __glintercept_log(" - glBlitFramebuffer(srcX0: %ld, srcY0: %ld, srcX1: %ld, srcY1: %ld, dstX0: %ld, dstY0: %ld, dstX1: %ld, dstY1: %ld, mask: %ld, filter: %ld (%s))", srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter, __gl_intercept_formatenum(filter));
}

typedef void(*__ctype_glBlitFramebufferANGLE)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
static __ctype_glBlitFramebufferANGLE __glintercept_fnptr_glBlitFramebufferANGLE;
void __glintercept_glBlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  __glintercept_fnptr_glBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  __glintercept_log(" - glBlitFramebufferANGLE(srcX0: %ld, srcY0: %ld, srcX1: %ld, srcY1: %ld, dstX0: %ld, dstY0: %ld, dstX1: %ld, dstY1: %ld, mask: %ld, filter: %ld (%s))", srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter, __gl_intercept_formatenum(filter));
}

typedef void(*__ctype_glBlitFramebufferEXT)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
static __ctype_glBlitFramebufferEXT __glintercept_fnptr_glBlitFramebufferEXT;
void __glintercept_glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  __glintercept_fnptr_glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  __glintercept_log(" - glBlitFramebufferEXT(srcX0: %ld, srcY0: %ld, srcX1: %ld, srcY1: %ld, dstX0: %ld, dstY0: %ld, dstX1: %ld, dstY1: %ld, mask: %ld, filter: %ld (%s))", srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter, __gl_intercept_formatenum(filter));
}

typedef void(*__ctype_glBlitFramebufferNV)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
static __ctype_glBlitFramebufferNV __glintercept_fnptr_glBlitFramebufferNV;
void __glintercept_glBlitFramebufferNV(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  __glintercept_fnptr_glBlitFramebufferNV(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  __glintercept_log(" - glBlitFramebufferNV(srcX0: %ld, srcY0: %ld, srcX1: %ld, srcY1: %ld, dstX0: %ld, dstY0: %ld, dstX1: %ld, dstY1: %ld, mask: %ld, filter: %ld (%s))", srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter, __gl_intercept_formatenum(filter));
}

typedef void(*__ctype_glBlitNamedFramebuffer)(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
static __ctype_glBlitNamedFramebuffer __glintercept_fnptr_glBlitNamedFramebuffer;
void __glintercept_glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  __glintercept_fnptr_glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  __glintercept_log(" - glBlitNamedFramebuffer(readFramebuffer: %ld, drawFramebuffer: %ld, srcX0: %ld, srcY0: %ld, srcX1: %ld, srcY1: %ld, dstX0: %ld, dstY0: %ld, dstX1: %ld, dstY1: %ld, mask: %ld, filter: %ld (%s))", readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter, __gl_intercept_formatenum(filter));
}

typedef void(*__ctype_glBufferAddressRangeNV)(GLenum, GLuint, GLuint64EXT, GLsizeiptr);
static __ctype_glBufferAddressRangeNV __glintercept_fnptr_glBufferAddressRangeNV;
void __glintercept_glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) {
  __glintercept_fnptr_glBufferAddressRangeNV(pname, index, address, length);
  __glintercept_log(" - glBufferAddressRangeNV(pname: %ld (%s), index: %ld, address: %ld, length: %ld)", pname, __gl_intercept_formatenum(pname), index, address, length);
}

typedef void(*__ctype_glBufferAttachMemoryNV)(GLenum, GLuint, GLuint64);
static __ctype_glBufferAttachMemoryNV __glintercept_fnptr_glBufferAttachMemoryNV;
void __glintercept_glBufferAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset) {
  __glintercept_fnptr_glBufferAttachMemoryNV(target, memory, offset);
  __glintercept_log(" - glBufferAttachMemoryNV(target: %ld (%s), memory: %ld, offset: %ld)", target, __gl_intercept_formatenum(target), memory, offset);
}

typedef void(*__ctype_glBufferData)(GLenum, GLsizeiptr, const void *, GLenum);
static __ctype_glBufferData __glintercept_fnptr_glBufferData;
void __glintercept_glBufferData(GLenum target, GLsizeiptr size, const void * data, GLenum usage) {
  __glintercept_fnptr_glBufferData(target, size, data, usage);
  __glintercept_log(" - glBufferData(target: %ld (%s), size: %ld, data: %ld, usage: %ld (%s))", target, __gl_intercept_formatenum(target), size, data, usage, __gl_intercept_formatenum(usage));
}

typedef void(*__ctype_glBufferDataARB)(GLenum, GLsizeiptrARB, const void *, GLenum);
static __ctype_glBufferDataARB __glintercept_fnptr_glBufferDataARB;
void __glintercept_glBufferDataARB(GLenum target, GLsizeiptrARB size, const void * data, GLenum usage) {
  __glintercept_fnptr_glBufferDataARB(target, size, data, usage);
  __glintercept_log(" - glBufferDataARB(target: %ld (%s), size: %ld, data: %ld, usage: %ld (%s))", target, __gl_intercept_formatenum(target), size, data, usage, __gl_intercept_formatenum(usage));
}

typedef void(*__ctype_glBufferPageCommitmentARB)(GLenum, GLintptr, GLsizeiptr, GLboolean);
static __ctype_glBufferPageCommitmentARB __glintercept_fnptr_glBufferPageCommitmentARB;
void __glintercept_glBufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) {
  __glintercept_fnptr_glBufferPageCommitmentARB(target, offset, size, commit);
  __glintercept_log(" - glBufferPageCommitmentARB(target: %ld (%s), offset: %ld, size: %ld, commit: %ld)", target, __gl_intercept_formatenum(target), offset, size, commit);
}

typedef void(*__ctype_glBufferPageCommitmentMemNV)(GLenum, GLintptr, GLsizeiptr, GLuint, GLuint64, GLboolean);
static __ctype_glBufferPageCommitmentMemNV __glintercept_fnptr_glBufferPageCommitmentMemNV;
void __glintercept_glBufferPageCommitmentMemNV(GLenum target, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit) {
  __glintercept_fnptr_glBufferPageCommitmentMemNV(target, offset, size, memory, memOffset, commit);
  __glintercept_log(" - glBufferPageCommitmentMemNV(target: %ld (%s), offset: %ld, size: %ld, memory: %ld, memOffset: %ld, commit: %ld)", target, __gl_intercept_formatenum(target), offset, size, memory, memOffset, commit);
}

typedef void(*__ctype_glBufferParameteriAPPLE)(GLenum, GLenum, GLint);
static __ctype_glBufferParameteriAPPLE __glintercept_fnptr_glBufferParameteriAPPLE;
void __glintercept_glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param) {
  __glintercept_fnptr_glBufferParameteriAPPLE(target, pname, param);
  __glintercept_log(" - glBufferParameteriAPPLE(target: %ld (%s), pname: %ld (%s), param: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glBufferStorage)(GLenum, GLsizeiptr, const void *, GLbitfield);
static __ctype_glBufferStorage __glintercept_fnptr_glBufferStorage;
void __glintercept_glBufferStorage(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags) {
  __glintercept_fnptr_glBufferStorage(target, size, data, flags);
  __glintercept_log(" - glBufferStorage(target: %ld (%s), size: %ld, data: %ld, flags: %ld)", target, __gl_intercept_formatenum(target), size, data, flags);
}

typedef void(*__ctype_glBufferStorageEXT)(GLenum, GLsizeiptr, const void *, GLbitfield);
static __ctype_glBufferStorageEXT __glintercept_fnptr_glBufferStorageEXT;
void __glintercept_glBufferStorageEXT(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags) {
  __glintercept_fnptr_glBufferStorageEXT(target, size, data, flags);
  __glintercept_log(" - glBufferStorageEXT(target: %ld (%s), size: %ld, data: %ld, flags: %ld)", target, __gl_intercept_formatenum(target), size, data, flags);
}

typedef void(*__ctype_glBufferStorageExternalEXT)(GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield);
static __ctype_glBufferStorageExternalEXT __glintercept_fnptr_glBufferStorageExternalEXT;
void __glintercept_glBufferStorageExternalEXT(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) {
  __glintercept_fnptr_glBufferStorageExternalEXT(target, offset, size, clientBuffer, flags);
  __glintercept_log(" - glBufferStorageExternalEXT(target: %ld (%s), offset: %ld, size: %ld, clientBuffer: %ld, flags: %ld)", target, __gl_intercept_formatenum(target), offset, size, clientBuffer, flags);
}

typedef void(*__ctype_glBufferStorageMemEXT)(GLenum, GLsizeiptr, GLuint, GLuint64);
static __ctype_glBufferStorageMemEXT __glintercept_fnptr_glBufferStorageMemEXT;
void __glintercept_glBufferStorageMemEXT(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset) {
  __glintercept_fnptr_glBufferStorageMemEXT(target, size, memory, offset);
  __glintercept_log(" - glBufferStorageMemEXT(target: %ld (%s), size: %ld, memory: %ld, offset: %ld)", target, __gl_intercept_formatenum(target), size, memory, offset);
}

typedef void(*__ctype_glBufferSubData)(GLenum, GLintptr, GLsizeiptr, const void *);
static __ctype_glBufferSubData __glintercept_fnptr_glBufferSubData;
void __glintercept_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void * data) {
  __glintercept_fnptr_glBufferSubData(target, offset, size, data);
  __glintercept_log(" - glBufferSubData(target: %ld (%s), offset: %ld, size: %ld, data: %ld)", target, __gl_intercept_formatenum(target), offset, size, data);
}

typedef void(*__ctype_glBufferSubDataARB)(GLenum, GLintptrARB, GLsizeiptrARB, const void *);
static __ctype_glBufferSubDataARB __glintercept_fnptr_glBufferSubDataARB;
void __glintercept_glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void * data) {
  __glintercept_fnptr_glBufferSubDataARB(target, offset, size, data);
  __glintercept_log(" - glBufferSubDataARB(target: %ld (%s), offset: %ld, size: %ld, data: %ld)", target, __gl_intercept_formatenum(target), offset, size, data);
}

typedef void(*__ctype_glCallCommandListNV)(GLuint);
static __ctype_glCallCommandListNV __glintercept_fnptr_glCallCommandListNV;
void __glintercept_glCallCommandListNV(GLuint list) {
  __glintercept_fnptr_glCallCommandListNV(list);
  __glintercept_log(" - glCallCommandListNV(list: %ld)", list);
}

typedef void(*__ctype_glCallList)(GLuint);
static __ctype_glCallList __glintercept_fnptr_glCallList;
void __glintercept_glCallList(GLuint list) {
  __glintercept_fnptr_glCallList(list);
  __glintercept_log(" - glCallList(list: %ld)", list);
}

typedef void(*__ctype_glCallLists)(GLsizei, GLenum, const void *);
static __ctype_glCallLists __glintercept_fnptr_glCallLists;
void __glintercept_glCallLists(GLsizei n, GLenum type, const void * lists) {
  __glintercept_fnptr_glCallLists(n, type, lists);
  __glintercept_log(" - glCallLists(n: %ld, type: %ld (%s), lists: %ld)", n, type, __gl_intercept_formatenum(type), lists);
}

typedef GLenum(*__ctype_glCheckFramebufferStatus)(GLenum);
static __ctype_glCheckFramebufferStatus __glintercept_fnptr_glCheckFramebufferStatus;
GLenum __glintercept_glCheckFramebufferStatus(GLenum target) {
  GLenum __ret = __glintercept_fnptr_glCheckFramebufferStatus(target);
  __glintercept_log(" - glCheckFramebufferStatus(target: %ld (%s)) -> %ld", target, __gl_intercept_formatenum(target), __ret);
  return __ret;
}

typedef GLenum(*__ctype_glCheckFramebufferStatusEXT)(GLenum);
static __ctype_glCheckFramebufferStatusEXT __glintercept_fnptr_glCheckFramebufferStatusEXT;
GLenum __glintercept_glCheckFramebufferStatusEXT(GLenum target) {
  GLenum __ret = __glintercept_fnptr_glCheckFramebufferStatusEXT(target);
  __glintercept_log(" - glCheckFramebufferStatusEXT(target: %ld (%s)) -> %ld", target, __gl_intercept_formatenum(target), __ret);
  return __ret;
}

typedef GLenum(*__ctype_glCheckFramebufferStatusOES)(GLenum);
static __ctype_glCheckFramebufferStatusOES __glintercept_fnptr_glCheckFramebufferStatusOES;
GLenum __glintercept_glCheckFramebufferStatusOES(GLenum target) {
  GLenum __ret = __glintercept_fnptr_glCheckFramebufferStatusOES(target);
  __glintercept_log(" - glCheckFramebufferStatusOES(target: %ld (%s)) -> %ld", target, __gl_intercept_formatenum(target), __ret);
  return __ret;
}

typedef GLenum(*__ctype_glCheckNamedFramebufferStatus)(GLuint, GLenum);
static __ctype_glCheckNamedFramebufferStatus __glintercept_fnptr_glCheckNamedFramebufferStatus;
GLenum __glintercept_glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target) {
  GLenum __ret = __glintercept_fnptr_glCheckNamedFramebufferStatus(framebuffer, target);
  __glintercept_log(" - glCheckNamedFramebufferStatus(framebuffer: %ld, target: %ld (%s)) -> %ld", framebuffer, target, __gl_intercept_formatenum(target), __ret);
  return __ret;
}

typedef GLenum(*__ctype_glCheckNamedFramebufferStatusEXT)(GLuint, GLenum);
static __ctype_glCheckNamedFramebufferStatusEXT __glintercept_fnptr_glCheckNamedFramebufferStatusEXT;
GLenum __glintercept_glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target) {
  GLenum __ret = __glintercept_fnptr_glCheckNamedFramebufferStatusEXT(framebuffer, target);
  __glintercept_log(" - glCheckNamedFramebufferStatusEXT(framebuffer: %ld, target: %ld (%s)) -> %ld", framebuffer, target, __gl_intercept_formatenum(target), __ret);
  return __ret;
}

typedef void(*__ctype_glClampColor)(GLenum, GLenum);
static __ctype_glClampColor __glintercept_fnptr_glClampColor;
void __glintercept_glClampColor(GLenum target, GLenum clamp) {
  __glintercept_fnptr_glClampColor(target, clamp);
  __glintercept_log(" - glClampColor(target: %ld (%s), clamp: %ld (%s))", target, __gl_intercept_formatenum(target), clamp, __gl_intercept_formatenum(clamp));
}

typedef void(*__ctype_glClampColorARB)(GLenum, GLenum);
static __ctype_glClampColorARB __glintercept_fnptr_glClampColorARB;
void __glintercept_glClampColorARB(GLenum target, GLenum clamp) {
  __glintercept_fnptr_glClampColorARB(target, clamp);
  __glintercept_log(" - glClampColorARB(target: %ld (%s), clamp: %ld (%s))", target, __gl_intercept_formatenum(target), clamp, __gl_intercept_formatenum(clamp));
}

typedef void(*__ctype_glClear)(GLbitfield);
static __ctype_glClear __glintercept_fnptr_glClear;
void __glintercept_glClear(GLbitfield mask) {
  __glintercept_fnptr_glClear(mask);
  __glintercept_log(" - glClear(mask: %ld)", mask);
}

typedef void(*__ctype_glClearAccum)(GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glClearAccum __glintercept_fnptr_glClearAccum;
void __glintercept_glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  __glintercept_fnptr_glClearAccum(red, green, blue, alpha);
  __glintercept_log(" - glClearAccum(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glClearAccumxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
static __ctype_glClearAccumxOES __glintercept_fnptr_glClearAccumxOES;
void __glintercept_glClearAccumxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {
  __glintercept_fnptr_glClearAccumxOES(red, green, blue, alpha);
  __glintercept_log(" - glClearAccumxOES(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glClearBufferData)(GLenum, GLenum, GLenum, GLenum, const void *);
static __ctype_glClearBufferData __glintercept_fnptr_glClearBufferData;
void __glintercept_glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data) {
  __glintercept_fnptr_glClearBufferData(target, internalformat, format, type, data);
  __glintercept_log(" - glClearBufferData(target: %ld (%s), internalformat: %ld (%s), format: %ld (%s), type: %ld (%s), data: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), data);
}

typedef void(*__ctype_glClearBufferSubData)(GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const void *);
static __ctype_glClearBufferSubData __glintercept_fnptr_glClearBufferSubData;
void __glintercept_glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) {
  __glintercept_fnptr_glClearBufferSubData(target, internalformat, offset, size, format, type, data);
  __glintercept_log(" - glClearBufferSubData(target: %ld (%s), internalformat: %ld (%s), offset: %ld, size: %ld, format: %ld (%s), type: %ld (%s), data: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), offset, size, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), data);
}

typedef void(*__ctype_glClearBufferfi)(GLenum, GLint, GLfloat, GLint);
static __ctype_glClearBufferfi __glintercept_fnptr_glClearBufferfi;
void __glintercept_glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {
  __glintercept_fnptr_glClearBufferfi(buffer, drawbuffer, depth, stencil);
  __glintercept_log(" - glClearBufferfi(buffer: %ld (%s), drawbuffer: %ld, depth: %ld, stencil: %ld)", buffer, __gl_intercept_formatenum(buffer), drawbuffer, depth, stencil);
}

typedef void(*__ctype_glClearBufferfv)(GLenum, GLint, const GLfloat *);
static __ctype_glClearBufferfv __glintercept_fnptr_glClearBufferfv;
void __glintercept_glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat * value) {
  __glintercept_fnptr_glClearBufferfv(buffer, drawbuffer, value);
  __glintercept_log(" - glClearBufferfv(buffer: %ld (%s), drawbuffer: %ld, value: %ld)", buffer, __gl_intercept_formatenum(buffer), drawbuffer, value);
}

typedef void(*__ctype_glClearBufferiv)(GLenum, GLint, const GLint *);
static __ctype_glClearBufferiv __glintercept_fnptr_glClearBufferiv;
void __glintercept_glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint * value) {
  __glintercept_fnptr_glClearBufferiv(buffer, drawbuffer, value);
  __glintercept_log(" - glClearBufferiv(buffer: %ld (%s), drawbuffer: %ld, value: %ld)", buffer, __gl_intercept_formatenum(buffer), drawbuffer, value);
}

typedef void(*__ctype_glClearBufferuiv)(GLenum, GLint, const GLuint *);
static __ctype_glClearBufferuiv __glintercept_fnptr_glClearBufferuiv;
void __glintercept_glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint * value) {
  __glintercept_fnptr_glClearBufferuiv(buffer, drawbuffer, value);
  __glintercept_log(" - glClearBufferuiv(buffer: %ld (%s), drawbuffer: %ld, value: %ld)", buffer, __gl_intercept_formatenum(buffer), drawbuffer, value);
}

typedef void(*__ctype_glClearColor)(GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glClearColor __glintercept_fnptr_glClearColor;
void __glintercept_glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  __glintercept_fnptr_glClearColor(red, green, blue, alpha);
  __glintercept_log(" - glClearColor(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glClearColorIiEXT)(GLint, GLint, GLint, GLint);
static __ctype_glClearColorIiEXT __glintercept_fnptr_glClearColorIiEXT;
void __glintercept_glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha) {
  __glintercept_fnptr_glClearColorIiEXT(red, green, blue, alpha);
  __glintercept_log(" - glClearColorIiEXT(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glClearColorIuiEXT)(GLuint, GLuint, GLuint, GLuint);
static __ctype_glClearColorIuiEXT __glintercept_fnptr_glClearColorIuiEXT;
void __glintercept_glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha) {
  __glintercept_fnptr_glClearColorIuiEXT(red, green, blue, alpha);
  __glintercept_log(" - glClearColorIuiEXT(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glClearColorx)(GLfixed, GLfixed, GLfixed, GLfixed);
static __ctype_glClearColorx __glintercept_fnptr_glClearColorx;
void __glintercept_glClearColorx(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {
  __glintercept_fnptr_glClearColorx(red, green, blue, alpha);
  __glintercept_log(" - glClearColorx(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glClearColorxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
static __ctype_glClearColorxOES __glintercept_fnptr_glClearColorxOES;
void __glintercept_glClearColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {
  __glintercept_fnptr_glClearColorxOES(red, green, blue, alpha);
  __glintercept_log(" - glClearColorxOES(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glClearDepth)(GLdouble);
static __ctype_glClearDepth __glintercept_fnptr_glClearDepth;
void __glintercept_glClearDepth(GLdouble depth) {
  __glintercept_fnptr_glClearDepth(depth);
  __glintercept_log(" - glClearDepth(depth: %ld)", depth);
}

typedef void(*__ctype_glClearDepthdNV)(GLdouble);
static __ctype_glClearDepthdNV __glintercept_fnptr_glClearDepthdNV;
void __glintercept_glClearDepthdNV(GLdouble depth) {
  __glintercept_fnptr_glClearDepthdNV(depth);
  __glintercept_log(" - glClearDepthdNV(depth: %ld)", depth);
}

typedef void(*__ctype_glClearDepthf)(GLfloat);
static __ctype_glClearDepthf __glintercept_fnptr_glClearDepthf;
void __glintercept_glClearDepthf(GLfloat d) {
  __glintercept_fnptr_glClearDepthf(d);
  __glintercept_log(" - glClearDepthf(d: %ld)", d);
}

typedef void(*__ctype_glClearDepthfOES)(GLclampf);
static __ctype_glClearDepthfOES __glintercept_fnptr_glClearDepthfOES;
void __glintercept_glClearDepthfOES(GLclampf depth) {
  __glintercept_fnptr_glClearDepthfOES(depth);
  __glintercept_log(" - glClearDepthfOES(depth: %ld)", depth);
}

typedef void(*__ctype_glClearDepthx)(GLfixed);
static __ctype_glClearDepthx __glintercept_fnptr_glClearDepthx;
void __glintercept_glClearDepthx(GLfixed depth) {
  __glintercept_fnptr_glClearDepthx(depth);
  __glintercept_log(" - glClearDepthx(depth: %ld)", depth);
}

typedef void(*__ctype_glClearDepthxOES)(GLfixed);
static __ctype_glClearDepthxOES __glintercept_fnptr_glClearDepthxOES;
void __glintercept_glClearDepthxOES(GLfixed depth) {
  __glintercept_fnptr_glClearDepthxOES(depth);
  __glintercept_log(" - glClearDepthxOES(depth: %ld)", depth);
}

typedef void(*__ctype_glClearIndex)(GLfloat);
static __ctype_glClearIndex __glintercept_fnptr_glClearIndex;
void __glintercept_glClearIndex(GLfloat c) {
  __glintercept_fnptr_glClearIndex(c);
  __glintercept_log(" - glClearIndex(c: %ld)", c);
}

typedef void(*__ctype_glClearNamedBufferData)(GLuint, GLenum, GLenum, GLenum, const void *);
static __ctype_glClearNamedBufferData __glintercept_fnptr_glClearNamedBufferData;
void __glintercept_glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data) {
  __glintercept_fnptr_glClearNamedBufferData(buffer, internalformat, format, type, data);
  __glintercept_log(" - glClearNamedBufferData(buffer: %ld, internalformat: %ld (%s), format: %ld (%s), type: %ld (%s), data: %ld)", buffer, internalformat, __gl_intercept_formatenum(internalformat), format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), data);
}

typedef void(*__ctype_glClearNamedBufferDataEXT)(GLuint, GLenum, GLenum, GLenum, const void *);
static __ctype_glClearNamedBufferDataEXT __glintercept_fnptr_glClearNamedBufferDataEXT;
void __glintercept_glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data) {
  __glintercept_fnptr_glClearNamedBufferDataEXT(buffer, internalformat, format, type, data);
  __glintercept_log(" - glClearNamedBufferDataEXT(buffer: %ld, internalformat: %ld (%s), format: %ld (%s), type: %ld (%s), data: %ld)", buffer, internalformat, __gl_intercept_formatenum(internalformat), format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), data);
}

typedef void(*__ctype_glClearNamedBufferSubData)(GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const void *);
static __ctype_glClearNamedBufferSubData __glintercept_fnptr_glClearNamedBufferSubData;
void __glintercept_glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) {
  __glintercept_fnptr_glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);
  __glintercept_log(" - glClearNamedBufferSubData(buffer: %ld, internalformat: %ld (%s), offset: %ld, size: %ld, format: %ld (%s), type: %ld (%s), data: %ld)", buffer, internalformat, __gl_intercept_formatenum(internalformat), offset, size, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), data);
}

typedef void(*__ctype_glClearNamedBufferSubDataEXT)(GLuint, GLenum, GLsizeiptr, GLsizeiptr, GLenum, GLenum, const void *);
static __ctype_glClearNamedBufferSubDataEXT __glintercept_fnptr_glClearNamedBufferSubDataEXT;
void __glintercept_glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) {
  __glintercept_fnptr_glClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data);
  __glintercept_log(" - glClearNamedBufferSubDataEXT(buffer: %ld, internalformat: %ld (%s), offset: %ld, size: %ld, format: %ld (%s), type: %ld (%s), data: %ld)", buffer, internalformat, __gl_intercept_formatenum(internalformat), offset, size, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), data);
}

typedef void(*__ctype_glClearNamedFramebufferfi)(GLuint, GLenum, GLint, GLfloat, GLint);
static __ctype_glClearNamedFramebufferfi __glintercept_fnptr_glClearNamedFramebufferfi;
void __glintercept_glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {
  __glintercept_fnptr_glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
  __glintercept_log(" - glClearNamedFramebufferfi(framebuffer: %ld, buffer: %ld (%s), drawbuffer: %ld, depth: %ld, stencil: %ld)", framebuffer, buffer, __gl_intercept_formatenum(buffer), drawbuffer, depth, stencil);
}

typedef void(*__ctype_glClearNamedFramebufferfv)(GLuint, GLenum, GLint, const GLfloat *);
static __ctype_glClearNamedFramebufferfv __glintercept_fnptr_glClearNamedFramebufferfv;
void __glintercept_glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value) {
  __glintercept_fnptr_glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value);
  __glintercept_log(" - glClearNamedFramebufferfv(framebuffer: %ld, buffer: %ld (%s), drawbuffer: %ld, value: %ld)", framebuffer, buffer, __gl_intercept_formatenum(buffer), drawbuffer, value);
}

typedef void(*__ctype_glClearNamedFramebufferiv)(GLuint, GLenum, GLint, const GLint *);
static __ctype_glClearNamedFramebufferiv __glintercept_fnptr_glClearNamedFramebufferiv;
void __glintercept_glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value) {
  __glintercept_fnptr_glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value);
  __glintercept_log(" - glClearNamedFramebufferiv(framebuffer: %ld, buffer: %ld (%s), drawbuffer: %ld, value: %ld)", framebuffer, buffer, __gl_intercept_formatenum(buffer), drawbuffer, value);
}

typedef void(*__ctype_glClearNamedFramebufferuiv)(GLuint, GLenum, GLint, const GLuint *);
static __ctype_glClearNamedFramebufferuiv __glintercept_fnptr_glClearNamedFramebufferuiv;
void __glintercept_glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value) {
  __glintercept_fnptr_glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value);
  __glintercept_log(" - glClearNamedFramebufferuiv(framebuffer: %ld, buffer: %ld (%s), drawbuffer: %ld, value: %ld)", framebuffer, buffer, __gl_intercept_formatenum(buffer), drawbuffer, value);
}

typedef void(*__ctype_glClearPixelLocalStorageuiEXT)(GLsizei, GLsizei, const GLuint *);
static __ctype_glClearPixelLocalStorageuiEXT __glintercept_fnptr_glClearPixelLocalStorageuiEXT;
void __glintercept_glClearPixelLocalStorageuiEXT(GLsizei offset, GLsizei n, const GLuint * values) {
  __glintercept_fnptr_glClearPixelLocalStorageuiEXT(offset, n, values);
  __glintercept_log(" - glClearPixelLocalStorageuiEXT(offset: %ld, n: %ld, values: %ld)", offset, n, values);
}

typedef void(*__ctype_glClearStencil)(GLint);
static __ctype_glClearStencil __glintercept_fnptr_glClearStencil;
void __glintercept_glClearStencil(GLint s) {
  __glintercept_fnptr_glClearStencil(s);
  __glintercept_log(" - glClearStencil(s: %ld)", s);
}

typedef void(*__ctype_glClearTexImage)(GLuint, GLint, GLenum, GLenum, const void *);
static __ctype_glClearTexImage __glintercept_fnptr_glClearTexImage;
void __glintercept_glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void * data) {
  __glintercept_fnptr_glClearTexImage(texture, level, format, type, data);
  __glintercept_log(" - glClearTexImage(texture: %ld, level: %ld, format: %ld (%s), type: %ld (%s), data: %ld)", texture, level, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), data);
}

typedef void(*__ctype_glClearTexImageEXT)(GLuint, GLint, GLenum, GLenum, const void *);
static __ctype_glClearTexImageEXT __glintercept_fnptr_glClearTexImageEXT;
void __glintercept_glClearTexImageEXT(GLuint texture, GLint level, GLenum format, GLenum type, const void * data) {
  __glintercept_fnptr_glClearTexImageEXT(texture, level, format, type, data);
  __glintercept_log(" - glClearTexImageEXT(texture: %ld, level: %ld, format: %ld (%s), type: %ld (%s), data: %ld)", texture, level, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), data);
}

typedef void(*__ctype_glClearTexSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
static __ctype_glClearTexSubImage __glintercept_fnptr_glClearTexSubImage;
void __glintercept_glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data) {
  __glintercept_fnptr_glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
  __glintercept_log(" - glClearTexSubImage(texture: %ld, level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld, format: %ld (%s), type: %ld (%s), data: %ld)", texture, level, xoffset, yoffset, zoffset, width, height, depth, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), data);
}

typedef void(*__ctype_glClearTexSubImageEXT)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
static __ctype_glClearTexSubImageEXT __glintercept_fnptr_glClearTexSubImageEXT;
void __glintercept_glClearTexSubImageEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data) {
  __glintercept_fnptr_glClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
  __glintercept_log(" - glClearTexSubImageEXT(texture: %ld, level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld, format: %ld (%s), type: %ld (%s), data: %ld)", texture, level, xoffset, yoffset, zoffset, width, height, depth, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), data);
}

typedef void(*__ctype_glClientActiveTexture)(GLenum);
static __ctype_glClientActiveTexture __glintercept_fnptr_glClientActiveTexture;
void __glintercept_glClientActiveTexture(GLenum texture) {
  __glintercept_fnptr_glClientActiveTexture(texture);
  __glintercept_log(" - glClientActiveTexture(texture: %ld (%s))", texture, __gl_intercept_formatenum(texture));
}

typedef void(*__ctype_glClientActiveTextureARB)(GLenum);
static __ctype_glClientActiveTextureARB __glintercept_fnptr_glClientActiveTextureARB;
void __glintercept_glClientActiveTextureARB(GLenum texture) {
  __glintercept_fnptr_glClientActiveTextureARB(texture);
  __glintercept_log(" - glClientActiveTextureARB(texture: %ld (%s))", texture, __gl_intercept_formatenum(texture));
}

typedef void(*__ctype_glClientActiveVertexStreamATI)(GLenum);
static __ctype_glClientActiveVertexStreamATI __glintercept_fnptr_glClientActiveVertexStreamATI;
void __glintercept_glClientActiveVertexStreamATI(GLenum stream) {
  __glintercept_fnptr_glClientActiveVertexStreamATI(stream);
  __glintercept_log(" - glClientActiveVertexStreamATI(stream: %ld (%s))", stream, __gl_intercept_formatenum(stream));
}

typedef void(*__ctype_glClientAttribDefaultEXT)(GLbitfield);
static __ctype_glClientAttribDefaultEXT __glintercept_fnptr_glClientAttribDefaultEXT;
void __glintercept_glClientAttribDefaultEXT(GLbitfield mask) {
  __glintercept_fnptr_glClientAttribDefaultEXT(mask);
  __glintercept_log(" - glClientAttribDefaultEXT(mask: %ld)", mask);
}

typedef void(*__ctype_glClientWaitSemaphoreui64NVX)(GLsizei, const GLuint *, const GLuint64 *);
static __ctype_glClientWaitSemaphoreui64NVX __glintercept_fnptr_glClientWaitSemaphoreui64NVX;
void __glintercept_glClientWaitSemaphoreui64NVX(GLsizei fenceObjectCount, const GLuint * semaphoreArray, const GLuint64 * fenceValueArray) {
  __glintercept_fnptr_glClientWaitSemaphoreui64NVX(fenceObjectCount, semaphoreArray, fenceValueArray);
  __glintercept_log(" - glClientWaitSemaphoreui64NVX(fenceObjectCount: %ld, semaphoreArray: %ld, fenceValueArray: %ld)", fenceObjectCount, semaphoreArray, fenceValueArray);
}

typedef GLenum(*__ctype_glClientWaitSync)(GLsync, GLbitfield, GLuint64);
static __ctype_glClientWaitSync __glintercept_fnptr_glClientWaitSync;
GLenum __glintercept_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {
  GLenum __ret = __glintercept_fnptr_glClientWaitSync(sync, flags, timeout);
  __glintercept_log(" - glClientWaitSync(sync: %ld, flags: %ld, timeout: %ld) -> %ld", sync, flags, timeout, __ret);
  return __ret;
}

typedef GLenum(*__ctype_glClientWaitSyncAPPLE)(GLsync, GLbitfield, GLuint64);
static __ctype_glClientWaitSyncAPPLE __glintercept_fnptr_glClientWaitSyncAPPLE;
GLenum __glintercept_glClientWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout) {
  GLenum __ret = __glintercept_fnptr_glClientWaitSyncAPPLE(sync, flags, timeout);
  __glintercept_log(" - glClientWaitSyncAPPLE(sync: %ld, flags: %ld, timeout: %ld) -> %ld", sync, flags, timeout, __ret);
  return __ret;
}

typedef void(*__ctype_glClipControl)(GLenum, GLenum);
static __ctype_glClipControl __glintercept_fnptr_glClipControl;
void __glintercept_glClipControl(GLenum origin, GLenum depth) {
  __glintercept_fnptr_glClipControl(origin, depth);
  __glintercept_log(" - glClipControl(origin: %ld (%s), depth: %ld (%s))", origin, __gl_intercept_formatenum(origin), depth, __gl_intercept_formatenum(depth));
}

typedef void(*__ctype_glClipControlEXT)(GLenum, GLenum);
static __ctype_glClipControlEXT __glintercept_fnptr_glClipControlEXT;
void __glintercept_glClipControlEXT(GLenum origin, GLenum depth) {
  __glintercept_fnptr_glClipControlEXT(origin, depth);
  __glintercept_log(" - glClipControlEXT(origin: %ld (%s), depth: %ld (%s))", origin, __gl_intercept_formatenum(origin), depth, __gl_intercept_formatenum(depth));
}

typedef void(*__ctype_glClipPlane)(GLenum, const GLdouble *);
static __ctype_glClipPlane __glintercept_fnptr_glClipPlane;
void __glintercept_glClipPlane(GLenum plane, const GLdouble * equation) {
  __glintercept_fnptr_glClipPlane(plane, equation);
  __glintercept_log(" - glClipPlane(plane: %ld (%s), equation: %ld)", plane, __gl_intercept_formatenum(plane), equation);
}

typedef void(*__ctype_glClipPlanef)(GLenum, const GLfloat *);
static __ctype_glClipPlanef __glintercept_fnptr_glClipPlanef;
void __glintercept_glClipPlanef(GLenum p, const GLfloat * eqn) {
  __glintercept_fnptr_glClipPlanef(p, eqn);
  __glintercept_log(" - glClipPlanef(p: %ld (%s), eqn: %ld)", p, __gl_intercept_formatenum(p), eqn);
}

typedef void(*__ctype_glClipPlanefIMG)(GLenum, const GLfloat *);
static __ctype_glClipPlanefIMG __glintercept_fnptr_glClipPlanefIMG;
void __glintercept_glClipPlanefIMG(GLenum p, const GLfloat * eqn) {
  __glintercept_fnptr_glClipPlanefIMG(p, eqn);
  __glintercept_log(" - glClipPlanefIMG(p: %ld (%s), eqn: %ld)", p, __gl_intercept_formatenum(p), eqn);
}

typedef void(*__ctype_glClipPlanefOES)(GLenum, const GLfloat *);
static __ctype_glClipPlanefOES __glintercept_fnptr_glClipPlanefOES;
void __glintercept_glClipPlanefOES(GLenum plane, const GLfloat * equation) {
  __glintercept_fnptr_glClipPlanefOES(plane, equation);
  __glintercept_log(" - glClipPlanefOES(plane: %ld (%s), equation: %ld)", plane, __gl_intercept_formatenum(plane), equation);
}

typedef void(*__ctype_glClipPlanex)(GLenum, const GLfixed *);
static __ctype_glClipPlanex __glintercept_fnptr_glClipPlanex;
void __glintercept_glClipPlanex(GLenum plane, const GLfixed * equation) {
  __glintercept_fnptr_glClipPlanex(plane, equation);
  __glintercept_log(" - glClipPlanex(plane: %ld (%s), equation: %ld)", plane, __gl_intercept_formatenum(plane), equation);
}

typedef void(*__ctype_glClipPlanexIMG)(GLenum, const GLfixed *);
static __ctype_glClipPlanexIMG __glintercept_fnptr_glClipPlanexIMG;
void __glintercept_glClipPlanexIMG(GLenum p, const GLfixed * eqn) {
  __glintercept_fnptr_glClipPlanexIMG(p, eqn);
  __glintercept_log(" - glClipPlanexIMG(p: %ld (%s), eqn: %ld)", p, __gl_intercept_formatenum(p), eqn);
}

typedef void(*__ctype_glClipPlanexOES)(GLenum, const GLfixed *);
static __ctype_glClipPlanexOES __glintercept_fnptr_glClipPlanexOES;
void __glintercept_glClipPlanexOES(GLenum plane, const GLfixed * equation) {
  __glintercept_fnptr_glClipPlanexOES(plane, equation);
  __glintercept_log(" - glClipPlanexOES(plane: %ld (%s), equation: %ld)", plane, __gl_intercept_formatenum(plane), equation);
}

typedef void(*__ctype_glColor3b)(GLbyte, GLbyte, GLbyte);
static __ctype_glColor3b __glintercept_fnptr_glColor3b;
void __glintercept_glColor3b(GLbyte red, GLbyte green, GLbyte blue) {
  __glintercept_fnptr_glColor3b(red, green, blue);
  __glintercept_log(" - glColor3b(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glColor3bv)(const GLbyte *);
static __ctype_glColor3bv __glintercept_fnptr_glColor3bv;
void __glintercept_glColor3bv(const GLbyte * v) {
  __glintercept_fnptr_glColor3bv(v);
  __glintercept_log(" - glColor3bv(v: %ld)", v);
}

typedef void(*__ctype_glColor3d)(GLdouble, GLdouble, GLdouble);
static __ctype_glColor3d __glintercept_fnptr_glColor3d;
void __glintercept_glColor3d(GLdouble red, GLdouble green, GLdouble blue) {
  __glintercept_fnptr_glColor3d(red, green, blue);
  __glintercept_log(" - glColor3d(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glColor3dv)(const GLdouble *);
static __ctype_glColor3dv __glintercept_fnptr_glColor3dv;
void __glintercept_glColor3dv(const GLdouble * v) {
  __glintercept_fnptr_glColor3dv(v);
  __glintercept_log(" - glColor3dv(v: %ld)", v);
}

typedef void(*__ctype_glColor3f)(GLfloat, GLfloat, GLfloat);
static __ctype_glColor3f __glintercept_fnptr_glColor3f;
void __glintercept_glColor3f(GLfloat red, GLfloat green, GLfloat blue) {
  __glintercept_fnptr_glColor3f(red, green, blue);
  __glintercept_log(" - glColor3f(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glColor3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glColor3fVertex3fSUN __glintercept_fnptr_glColor3fVertex3fSUN;
void __glintercept_glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glColor3fVertex3fSUN(r, g, b, x, y, z);
  __glintercept_log(" - glColor3fVertex3fSUN(r: %ld, g: %ld, b: %ld, x: %ld, y: %ld, z: %ld)", r, g, b, x, y, z);
}

typedef void(*__ctype_glColor3fVertex3fvSUN)(const GLfloat *, const GLfloat *);
static __ctype_glColor3fVertex3fvSUN __glintercept_fnptr_glColor3fVertex3fvSUN;
void __glintercept_glColor3fVertex3fvSUN(const GLfloat * c, const GLfloat * v) {
  __glintercept_fnptr_glColor3fVertex3fvSUN(c, v);
  __glintercept_log(" - glColor3fVertex3fvSUN(c: %ld, v: %ld)", c, v);
}

typedef void(*__ctype_glColor3fv)(const GLfloat *);
static __ctype_glColor3fv __glintercept_fnptr_glColor3fv;
void __glintercept_glColor3fv(const GLfloat * v) {
  __glintercept_fnptr_glColor3fv(v);
  __glintercept_log(" - glColor3fv(v: %ld)", v);
}

typedef void(*__ctype_glColor3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
static __ctype_glColor3hNV __glintercept_fnptr_glColor3hNV;
void __glintercept_glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue) {
  __glintercept_fnptr_glColor3hNV(red, green, blue);
  __glintercept_log(" - glColor3hNV(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glColor3hvNV)(const GLhalfNV *);
static __ctype_glColor3hvNV __glintercept_fnptr_glColor3hvNV;
void __glintercept_glColor3hvNV(const GLhalfNV * v) {
  __glintercept_fnptr_glColor3hvNV(v);
  __glintercept_log(" - glColor3hvNV(v: %ld)", v);
}

typedef void(*__ctype_glColor3i)(GLint, GLint, GLint);
static __ctype_glColor3i __glintercept_fnptr_glColor3i;
void __glintercept_glColor3i(GLint red, GLint green, GLint blue) {
  __glintercept_fnptr_glColor3i(red, green, blue);
  __glintercept_log(" - glColor3i(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glColor3iv)(const GLint *);
static __ctype_glColor3iv __glintercept_fnptr_glColor3iv;
void __glintercept_glColor3iv(const GLint * v) {
  __glintercept_fnptr_glColor3iv(v);
  __glintercept_log(" - glColor3iv(v: %ld)", v);
}

typedef void(*__ctype_glColor3s)(GLshort, GLshort, GLshort);
static __ctype_glColor3s __glintercept_fnptr_glColor3s;
void __glintercept_glColor3s(GLshort red, GLshort green, GLshort blue) {
  __glintercept_fnptr_glColor3s(red, green, blue);
  __glintercept_log(" - glColor3s(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glColor3sv)(const GLshort *);
static __ctype_glColor3sv __glintercept_fnptr_glColor3sv;
void __glintercept_glColor3sv(const GLshort * v) {
  __glintercept_fnptr_glColor3sv(v);
  __glintercept_log(" - glColor3sv(v: %ld)", v);
}

typedef void(*__ctype_glColor3ub)(GLubyte, GLubyte, GLubyte);
static __ctype_glColor3ub __glintercept_fnptr_glColor3ub;
void __glintercept_glColor3ub(GLubyte red, GLubyte green, GLubyte blue) {
  __glintercept_fnptr_glColor3ub(red, green, blue);
  __glintercept_log(" - glColor3ub(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glColor3ubv)(const GLubyte *);
static __ctype_glColor3ubv __glintercept_fnptr_glColor3ubv;
void __glintercept_glColor3ubv(const GLubyte * v) {
  __glintercept_fnptr_glColor3ubv(v);
  __glintercept_log(" - glColor3ubv(v: %s)", v);
}

typedef void(*__ctype_glColor3ui)(GLuint, GLuint, GLuint);
static __ctype_glColor3ui __glintercept_fnptr_glColor3ui;
void __glintercept_glColor3ui(GLuint red, GLuint green, GLuint blue) {
  __glintercept_fnptr_glColor3ui(red, green, blue);
  __glintercept_log(" - glColor3ui(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glColor3uiv)(const GLuint *);
static __ctype_glColor3uiv __glintercept_fnptr_glColor3uiv;
void __glintercept_glColor3uiv(const GLuint * v) {
  __glintercept_fnptr_glColor3uiv(v);
  __glintercept_log(" - glColor3uiv(v: %ld)", v);
}

typedef void(*__ctype_glColor3us)(GLushort, GLushort, GLushort);
static __ctype_glColor3us __glintercept_fnptr_glColor3us;
void __glintercept_glColor3us(GLushort red, GLushort green, GLushort blue) {
  __glintercept_fnptr_glColor3us(red, green, blue);
  __glintercept_log(" - glColor3us(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glColor3usv)(const GLushort *);
static __ctype_glColor3usv __glintercept_fnptr_glColor3usv;
void __glintercept_glColor3usv(const GLushort * v) {
  __glintercept_fnptr_glColor3usv(v);
  __glintercept_log(" - glColor3usv(v: %ld)", v);
}

typedef void(*__ctype_glColor3xOES)(GLfixed, GLfixed, GLfixed);
static __ctype_glColor3xOES __glintercept_fnptr_glColor3xOES;
void __glintercept_glColor3xOES(GLfixed red, GLfixed green, GLfixed blue) {
  __glintercept_fnptr_glColor3xOES(red, green, blue);
  __glintercept_log(" - glColor3xOES(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glColor3xvOES)(const GLfixed *);
static __ctype_glColor3xvOES __glintercept_fnptr_glColor3xvOES;
void __glintercept_glColor3xvOES(const GLfixed * components) {
  __glintercept_fnptr_glColor3xvOES(components);
  __glintercept_log(" - glColor3xvOES(components: %ld)", components);
}

typedef void(*__ctype_glColor4b)(GLbyte, GLbyte, GLbyte, GLbyte);
static __ctype_glColor4b __glintercept_fnptr_glColor4b;
void __glintercept_glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) {
  __glintercept_fnptr_glColor4b(red, green, blue, alpha);
  __glintercept_log(" - glColor4b(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glColor4bv)(const GLbyte *);
static __ctype_glColor4bv __glintercept_fnptr_glColor4bv;
void __glintercept_glColor4bv(const GLbyte * v) {
  __glintercept_fnptr_glColor4bv(v);
  __glintercept_log(" - glColor4bv(v: %ld)", v);
}

typedef void(*__ctype_glColor4d)(GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glColor4d __glintercept_fnptr_glColor4d;
void __glintercept_glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) {
  __glintercept_fnptr_glColor4d(red, green, blue, alpha);
  __glintercept_log(" - glColor4d(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glColor4dv)(const GLdouble *);
static __ctype_glColor4dv __glintercept_fnptr_glColor4dv;
void __glintercept_glColor4dv(const GLdouble * v) {
  __glintercept_fnptr_glColor4dv(v);
  __glintercept_log(" - glColor4dv(v: %ld)", v);
}

typedef void(*__ctype_glColor4f)(GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glColor4f __glintercept_fnptr_glColor4f;
void __glintercept_glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  __glintercept_fnptr_glColor4f(red, green, blue, alpha);
  __glintercept_log(" - glColor4f(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glColor4fNormal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glColor4fNormal3fVertex3fSUN __glintercept_fnptr_glColor4fNormal3fVertex3fSUN;
void __glintercept_glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z);
  __glintercept_log(" - glColor4fNormal3fVertex3fSUN(r: %ld, g: %ld, b: %ld, a: %ld, nx: %ld, ny: %ld, nz: %ld, x: %ld, y: %ld, z: %ld)", r, g, b, a, nx, ny, nz, x, y, z);
}

typedef void(*__ctype_glColor4fNormal3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *);
static __ctype_glColor4fNormal3fVertex3fvSUN __glintercept_fnptr_glColor4fNormal3fVertex3fvSUN;
void __glintercept_glColor4fNormal3fVertex3fvSUN(const GLfloat * c, const GLfloat * n, const GLfloat * v) {
  __glintercept_fnptr_glColor4fNormal3fVertex3fvSUN(c, n, v);
  __glintercept_log(" - glColor4fNormal3fVertex3fvSUN(c: %ld, n: %ld, v: %ld)", c, n, v);
}

typedef void(*__ctype_glColor4fv)(const GLfloat *);
static __ctype_glColor4fv __glintercept_fnptr_glColor4fv;
void __glintercept_glColor4fv(const GLfloat * v) {
  __glintercept_fnptr_glColor4fv(v);
  __glintercept_log(" - glColor4fv(v: %ld)", v);
}

typedef void(*__ctype_glColor4hNV)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
static __ctype_glColor4hNV __glintercept_fnptr_glColor4hNV;
void __glintercept_glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha) {
  __glintercept_fnptr_glColor4hNV(red, green, blue, alpha);
  __glintercept_log(" - glColor4hNV(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glColor4hvNV)(const GLhalfNV *);
static __ctype_glColor4hvNV __glintercept_fnptr_glColor4hvNV;
void __glintercept_glColor4hvNV(const GLhalfNV * v) {
  __glintercept_fnptr_glColor4hvNV(v);
  __glintercept_log(" - glColor4hvNV(v: %ld)", v);
}

typedef void(*__ctype_glColor4i)(GLint, GLint, GLint, GLint);
static __ctype_glColor4i __glintercept_fnptr_glColor4i;
void __glintercept_glColor4i(GLint red, GLint green, GLint blue, GLint alpha) {
  __glintercept_fnptr_glColor4i(red, green, blue, alpha);
  __glintercept_log(" - glColor4i(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glColor4iv)(const GLint *);
static __ctype_glColor4iv __glintercept_fnptr_glColor4iv;
void __glintercept_glColor4iv(const GLint * v) {
  __glintercept_fnptr_glColor4iv(v);
  __glintercept_log(" - glColor4iv(v: %ld)", v);
}

typedef void(*__ctype_glColor4s)(GLshort, GLshort, GLshort, GLshort);
static __ctype_glColor4s __glintercept_fnptr_glColor4s;
void __glintercept_glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha) {
  __glintercept_fnptr_glColor4s(red, green, blue, alpha);
  __glintercept_log(" - glColor4s(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glColor4sv)(const GLshort *);
static __ctype_glColor4sv __glintercept_fnptr_glColor4sv;
void __glintercept_glColor4sv(const GLshort * v) {
  __glintercept_fnptr_glColor4sv(v);
  __glintercept_log(" - glColor4sv(v: %ld)", v);
}

typedef void(*__ctype_glColor4ub)(GLubyte, GLubyte, GLubyte, GLubyte);
static __ctype_glColor4ub __glintercept_fnptr_glColor4ub;
void __glintercept_glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) {
  __glintercept_fnptr_glColor4ub(red, green, blue, alpha);
  __glintercept_log(" - glColor4ub(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glColor4ubVertex2fSUN)(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat);
static __ctype_glColor4ubVertex2fSUN __glintercept_fnptr_glColor4ubVertex2fSUN;
void __glintercept_glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y) {
  __glintercept_fnptr_glColor4ubVertex2fSUN(r, g, b, a, x, y);
  __glintercept_log(" - glColor4ubVertex2fSUN(r: %ld, g: %ld, b: %ld, a: %ld, x: %ld, y: %ld)", r, g, b, a, x, y);
}

typedef void(*__ctype_glColor4ubVertex2fvSUN)(const GLubyte *, const GLfloat *);
static __ctype_glColor4ubVertex2fvSUN __glintercept_fnptr_glColor4ubVertex2fvSUN;
void __glintercept_glColor4ubVertex2fvSUN(const GLubyte * c, const GLfloat * v) {
  __glintercept_fnptr_glColor4ubVertex2fvSUN(c, v);
  __glintercept_log(" - glColor4ubVertex2fvSUN(c: %s, v: %ld)", c, v);
}

typedef void(*__ctype_glColor4ubVertex3fSUN)(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
static __ctype_glColor4ubVertex3fSUN __glintercept_fnptr_glColor4ubVertex3fSUN;
void __glintercept_glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glColor4ubVertex3fSUN(r, g, b, a, x, y, z);
  __glintercept_log(" - glColor4ubVertex3fSUN(r: %ld, g: %ld, b: %ld, a: %ld, x: %ld, y: %ld, z: %ld)", r, g, b, a, x, y, z);
}

typedef void(*__ctype_glColor4ubVertex3fvSUN)(const GLubyte *, const GLfloat *);
static __ctype_glColor4ubVertex3fvSUN __glintercept_fnptr_glColor4ubVertex3fvSUN;
void __glintercept_glColor4ubVertex3fvSUN(const GLubyte * c, const GLfloat * v) {
  __glintercept_fnptr_glColor4ubVertex3fvSUN(c, v);
  __glintercept_log(" - glColor4ubVertex3fvSUN(c: %s, v: %ld)", c, v);
}

typedef void(*__ctype_glColor4ubv)(const GLubyte *);
static __ctype_glColor4ubv __glintercept_fnptr_glColor4ubv;
void __glintercept_glColor4ubv(const GLubyte * v) {
  __glintercept_fnptr_glColor4ubv(v);
  __glintercept_log(" - glColor4ubv(v: %s)", v);
}

typedef void(*__ctype_glColor4ui)(GLuint, GLuint, GLuint, GLuint);
static __ctype_glColor4ui __glintercept_fnptr_glColor4ui;
void __glintercept_glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha) {
  __glintercept_fnptr_glColor4ui(red, green, blue, alpha);
  __glintercept_log(" - glColor4ui(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glColor4uiv)(const GLuint *);
static __ctype_glColor4uiv __glintercept_fnptr_glColor4uiv;
void __glintercept_glColor4uiv(const GLuint * v) {
  __glintercept_fnptr_glColor4uiv(v);
  __glintercept_log(" - glColor4uiv(v: %ld)", v);
}

typedef void(*__ctype_glColor4us)(GLushort, GLushort, GLushort, GLushort);
static __ctype_glColor4us __glintercept_fnptr_glColor4us;
void __glintercept_glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha) {
  __glintercept_fnptr_glColor4us(red, green, blue, alpha);
  __glintercept_log(" - glColor4us(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glColor4usv)(const GLushort *);
static __ctype_glColor4usv __glintercept_fnptr_glColor4usv;
void __glintercept_glColor4usv(const GLushort * v) {
  __glintercept_fnptr_glColor4usv(v);
  __glintercept_log(" - glColor4usv(v: %ld)", v);
}

typedef void(*__ctype_glColor4x)(GLfixed, GLfixed, GLfixed, GLfixed);
static __ctype_glColor4x __glintercept_fnptr_glColor4x;
void __glintercept_glColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {
  __glintercept_fnptr_glColor4x(red, green, blue, alpha);
  __glintercept_log(" - glColor4x(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glColor4xOES)(GLfixed, GLfixed, GLfixed, GLfixed);
static __ctype_glColor4xOES __glintercept_fnptr_glColor4xOES;
void __glintercept_glColor4xOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {
  __glintercept_fnptr_glColor4xOES(red, green, blue, alpha);
  __glintercept_log(" - glColor4xOES(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glColor4xvOES)(const GLfixed *);
static __ctype_glColor4xvOES __glintercept_fnptr_glColor4xvOES;
void __glintercept_glColor4xvOES(const GLfixed * components) {
  __glintercept_fnptr_glColor4xvOES(components);
  __glintercept_log(" - glColor4xvOES(components: %ld)", components);
}

typedef void(*__ctype_glColorFormatNV)(GLint, GLenum, GLsizei);
static __ctype_glColorFormatNV __glintercept_fnptr_glColorFormatNV;
void __glintercept_glColorFormatNV(GLint size, GLenum type, GLsizei stride) {
  __glintercept_fnptr_glColorFormatNV(size, type, stride);
  __glintercept_log(" - glColorFormatNV(size: %ld, type: %ld (%s), stride: %ld)", size, type, __gl_intercept_formatenum(type), stride);
}

typedef void(*__ctype_glColorFragmentOp1ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
static __ctype_glColorFragmentOp1ATI __glintercept_fnptr_glColorFragmentOp1ATI;
void __glintercept_glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) {
  __glintercept_fnptr_glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
  __glintercept_log(" - glColorFragmentOp1ATI(op: %ld (%s), dst: %ld, dstMask: %ld, dstMod: %ld, arg1: %ld, arg1Rep: %ld, arg1Mod: %ld)", op, __gl_intercept_formatenum(op), dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
}

typedef void(*__ctype_glColorFragmentOp2ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
static __ctype_glColorFragmentOp2ATI __glintercept_fnptr_glColorFragmentOp2ATI;
void __glintercept_glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) {
  __glintercept_fnptr_glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
  __glintercept_log(" - glColorFragmentOp2ATI(op: %ld (%s), dst: %ld, dstMask: %ld, dstMod: %ld, arg1: %ld, arg1Rep: %ld, arg1Mod: %ld, arg2: %ld, arg2Rep: %ld, arg2Mod: %ld)", op, __gl_intercept_formatenum(op), dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}

typedef void(*__ctype_glColorFragmentOp3ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
static __ctype_glColorFragmentOp3ATI __glintercept_fnptr_glColorFragmentOp3ATI;
void __glintercept_glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) {
  __glintercept_fnptr_glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
  __glintercept_log(" - glColorFragmentOp3ATI(op: %ld (%s), dst: %ld, dstMask: %ld, dstMod: %ld, arg1: %ld, arg1Rep: %ld, arg1Mod: %ld, arg2: %ld, arg2Rep: %ld, arg2Mod: %ld, arg3: %ld, arg3Rep: %ld, arg3Mod: %ld)", op, __gl_intercept_formatenum(op), dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}

typedef void(*__ctype_glColorMask)(GLboolean, GLboolean, GLboolean, GLboolean);
static __ctype_glColorMask __glintercept_fnptr_glColorMask;
void __glintercept_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
  __glintercept_fnptr_glColorMask(red, green, blue, alpha);
  __glintercept_log(" - glColorMask(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glColorMaskIndexedEXT)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
static __ctype_glColorMaskIndexedEXT __glintercept_fnptr_glColorMaskIndexedEXT;
void __glintercept_glColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
  __glintercept_fnptr_glColorMaskIndexedEXT(index, r, g, b, a);
  __glintercept_log(" - glColorMaskIndexedEXT(index: %ld, r: %ld, g: %ld, b: %ld, a: %ld)", index, r, g, b, a);
}

typedef void(*__ctype_glColorMaski)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
static __ctype_glColorMaski __glintercept_fnptr_glColorMaski;
void __glintercept_glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
  __glintercept_fnptr_glColorMaski(index, r, g, b, a);
  __glintercept_log(" - glColorMaski(index: %ld, r: %ld, g: %ld, b: %ld, a: %ld)", index, r, g, b, a);
}

typedef void(*__ctype_glColorMaskiEXT)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
static __ctype_glColorMaskiEXT __glintercept_fnptr_glColorMaskiEXT;
void __glintercept_glColorMaskiEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
  __glintercept_fnptr_glColorMaskiEXT(index, r, g, b, a);
  __glintercept_log(" - glColorMaskiEXT(index: %ld, r: %ld, g: %ld, b: %ld, a: %ld)", index, r, g, b, a);
}

typedef void(*__ctype_glColorMaskiOES)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
static __ctype_glColorMaskiOES __glintercept_fnptr_glColorMaskiOES;
void __glintercept_glColorMaskiOES(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
  __glintercept_fnptr_glColorMaskiOES(index, r, g, b, a);
  __glintercept_log(" - glColorMaskiOES(index: %ld, r: %ld, g: %ld, b: %ld, a: %ld)", index, r, g, b, a);
}

typedef void(*__ctype_glColorMaterial)(GLenum, GLenum);
static __ctype_glColorMaterial __glintercept_fnptr_glColorMaterial;
void __glintercept_glColorMaterial(GLenum face, GLenum mode) {
  __glintercept_fnptr_glColorMaterial(face, mode);
  __glintercept_log(" - glColorMaterial(face: %ld (%s), mode: %ld (%s))", face, __gl_intercept_formatenum(face), mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glColorP3ui)(GLenum, GLuint);
static __ctype_glColorP3ui __glintercept_fnptr_glColorP3ui;
void __glintercept_glColorP3ui(GLenum type, GLuint color) {
  __glintercept_fnptr_glColorP3ui(type, color);
  __glintercept_log(" - glColorP3ui(type: %ld (%s), color: %ld)", type, __gl_intercept_formatenum(type), color);
}

typedef void(*__ctype_glColorP3uiv)(GLenum, const GLuint *);
static __ctype_glColorP3uiv __glintercept_fnptr_glColorP3uiv;
void __glintercept_glColorP3uiv(GLenum type, const GLuint * color) {
  __glintercept_fnptr_glColorP3uiv(type, color);
  __glintercept_log(" - glColorP3uiv(type: %ld (%s), color: %ld)", type, __gl_intercept_formatenum(type), color);
}

typedef void(*__ctype_glColorP4ui)(GLenum, GLuint);
static __ctype_glColorP4ui __glintercept_fnptr_glColorP4ui;
void __glintercept_glColorP4ui(GLenum type, GLuint color) {
  __glintercept_fnptr_glColorP4ui(type, color);
  __glintercept_log(" - glColorP4ui(type: %ld (%s), color: %ld)", type, __gl_intercept_formatenum(type), color);
}

typedef void(*__ctype_glColorP4uiv)(GLenum, const GLuint *);
static __ctype_glColorP4uiv __glintercept_fnptr_glColorP4uiv;
void __glintercept_glColorP4uiv(GLenum type, const GLuint * color) {
  __glintercept_fnptr_glColorP4uiv(type, color);
  __glintercept_log(" - glColorP4uiv(type: %ld (%s), color: %ld)", type, __gl_intercept_formatenum(type), color);
}

typedef void(*__ctype_glColorPointer)(GLint, GLenum, GLsizei, const void *);
static __ctype_glColorPointer __glintercept_fnptr_glColorPointer;
void __glintercept_glColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glColorPointer(size, type, stride, pointer);
  __glintercept_log(" - glColorPointer(size: %ld, type: %ld (%s), stride: %ld, pointer: %ld)", size, type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glColorPointerEXT)(GLint, GLenum, GLsizei, GLsizei, const void *);
static __ctype_glColorPointerEXT __glintercept_fnptr_glColorPointerEXT;
void __glintercept_glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) {
  __glintercept_fnptr_glColorPointerEXT(size, type, stride, count, pointer);
  __glintercept_log(" - glColorPointerEXT(size: %ld, type: %ld (%s), stride: %ld, count: %ld, pointer: %ld)", size, type, __gl_intercept_formatenum(type), stride, count, pointer);
}

typedef void(*__ctype_glColorPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
static __ctype_glColorPointerListIBM __glintercept_fnptr_glColorPointerListIBM;
void __glintercept_glColorPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) {
  __glintercept_fnptr_glColorPointerListIBM(size, type, stride, pointer, ptrstride);
  __glintercept_log(" - glColorPointerListIBM(size: %ld, type: %ld (%s), stride: %ld, pointer: %ld, ptrstride: %ld)", size, type, __gl_intercept_formatenum(type), stride, pointer, ptrstride);
}

typedef void(*__ctype_glColorPointervINTEL)(GLint, GLenum, const void **);
static __ctype_glColorPointervINTEL __glintercept_fnptr_glColorPointervINTEL;
void __glintercept_glColorPointervINTEL(GLint size, GLenum type, const void ** pointer) {
  __glintercept_fnptr_glColorPointervINTEL(size, type, pointer);
  __glintercept_log(" - glColorPointervINTEL(size: %ld, type: %ld (%s), pointer: %ld)", size, type, __gl_intercept_formatenum(type), pointer);
}

typedef void(*__ctype_glColorSubTable)(GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
static __ctype_glColorSubTable __glintercept_fnptr_glColorSubTable;
void __glintercept_glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data) {
  __glintercept_fnptr_glColorSubTable(target, start, count, format, type, data);
  __glintercept_log(" - glColorSubTable(target: %ld (%s), start: %ld, count: %ld, format: %ld (%s), type: %ld (%s), data: %ld)", target, __gl_intercept_formatenum(target), start, count, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), data);
}

typedef void(*__ctype_glColorSubTableEXT)(GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
static __ctype_glColorSubTableEXT __glintercept_fnptr_glColorSubTableEXT;
void __glintercept_glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data) {
  __glintercept_fnptr_glColorSubTableEXT(target, start, count, format, type, data);
  __glintercept_log(" - glColorSubTableEXT(target: %ld (%s), start: %ld, count: %ld, format: %ld (%s), type: %ld (%s), data: %ld)", target, __gl_intercept_formatenum(target), start, count, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), data);
}

typedef void(*__ctype_glColorTable)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
static __ctype_glColorTable __glintercept_fnptr_glColorTable;
void __glintercept_glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table) {
  __glintercept_fnptr_glColorTable(target, internalformat, width, format, type, table);
  __glintercept_log(" - glColorTable(target: %ld (%s), internalformat: %ld (%s), width: %ld, format: %ld (%s), type: %ld (%s), table: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), width, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), table);
}

typedef void(*__ctype_glColorTableEXT)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
static __ctype_glColorTableEXT __glintercept_fnptr_glColorTableEXT;
void __glintercept_glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void * table) {
  __glintercept_fnptr_glColorTableEXT(target, internalFormat, width, format, type, table);
  __glintercept_log(" - glColorTableEXT(target: %ld (%s), internalFormat: %ld (%s), width: %ld, format: %ld (%s), type: %ld (%s), table: %ld)", target, __gl_intercept_formatenum(target), internalFormat, __gl_intercept_formatenum(internalFormat), width, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), table);
}

typedef void(*__ctype_glColorTableParameterfv)(GLenum, GLenum, const GLfloat *);
static __ctype_glColorTableParameterfv __glintercept_fnptr_glColorTableParameterfv;
void __glintercept_glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glColorTableParameterfv(target, pname, params);
  __glintercept_log(" - glColorTableParameterfv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glColorTableParameterfvSGI)(GLenum, GLenum, const GLfloat *);
static __ctype_glColorTableParameterfvSGI __glintercept_fnptr_glColorTableParameterfvSGI;
void __glintercept_glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glColorTableParameterfvSGI(target, pname, params);
  __glintercept_log(" - glColorTableParameterfvSGI(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glColorTableParameteriv)(GLenum, GLenum, const GLint *);
static __ctype_glColorTableParameteriv __glintercept_fnptr_glColorTableParameteriv;
void __glintercept_glColorTableParameteriv(GLenum target, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glColorTableParameteriv(target, pname, params);
  __glintercept_log(" - glColorTableParameteriv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glColorTableParameterivSGI)(GLenum, GLenum, const GLint *);
static __ctype_glColorTableParameterivSGI __glintercept_fnptr_glColorTableParameterivSGI;
void __glintercept_glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glColorTableParameterivSGI(target, pname, params);
  __glintercept_log(" - glColorTableParameterivSGI(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glColorTableSGI)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
static __ctype_glColorTableSGI __glintercept_fnptr_glColorTableSGI;
void __glintercept_glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table) {
  __glintercept_fnptr_glColorTableSGI(target, internalformat, width, format, type, table);
  __glintercept_log(" - glColorTableSGI(target: %ld (%s), internalformat: %ld (%s), width: %ld, format: %ld (%s), type: %ld (%s), table: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), width, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), table);
}

typedef void(*__ctype_glCombinerInputNV)(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum);
static __ctype_glCombinerInputNV __glintercept_fnptr_glCombinerInputNV;
void __glintercept_glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) {
  __glintercept_fnptr_glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage);
  __glintercept_log(" - glCombinerInputNV(stage: %ld (%s), portion: %ld (%s), variable: %ld (%s), input: %ld (%s), mapping: %ld (%s), componentUsage: %ld (%s))", stage, __gl_intercept_formatenum(stage), portion, __gl_intercept_formatenum(portion), variable, __gl_intercept_formatenum(variable), input, __gl_intercept_formatenum(input), mapping, __gl_intercept_formatenum(mapping), componentUsage, __gl_intercept_formatenum(componentUsage));
}

typedef void(*__ctype_glCombinerOutputNV)(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean);
static __ctype_glCombinerOutputNV __glintercept_fnptr_glCombinerOutputNV;
void __glintercept_glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum) {
  __glintercept_fnptr_glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
  __glintercept_log(" - glCombinerOutputNV(stage: %ld (%s), portion: %ld (%s), abOutput: %ld (%s), cdOutput: %ld (%s), sumOutput: %ld (%s), scale: %ld (%s), bias: %ld (%s), abDotProduct: %ld, cdDotProduct: %ld, muxSum: %ld)", stage, __gl_intercept_formatenum(stage), portion, __gl_intercept_formatenum(portion), abOutput, __gl_intercept_formatenum(abOutput), cdOutput, __gl_intercept_formatenum(cdOutput), sumOutput, __gl_intercept_formatenum(sumOutput), scale, __gl_intercept_formatenum(scale), bias, __gl_intercept_formatenum(bias), abDotProduct, cdDotProduct, muxSum);
}

typedef void(*__ctype_glCombinerParameterfNV)(GLenum, GLfloat);
static __ctype_glCombinerParameterfNV __glintercept_fnptr_glCombinerParameterfNV;
void __glintercept_glCombinerParameterfNV(GLenum pname, GLfloat param) {
  __glintercept_fnptr_glCombinerParameterfNV(pname, param);
  __glintercept_log(" - glCombinerParameterfNV(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glCombinerParameterfvNV)(GLenum, const GLfloat *);
static __ctype_glCombinerParameterfvNV __glintercept_fnptr_glCombinerParameterfvNV;
void __glintercept_glCombinerParameterfvNV(GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glCombinerParameterfvNV(pname, params);
  __glintercept_log(" - glCombinerParameterfvNV(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glCombinerParameteriNV)(GLenum, GLint);
static __ctype_glCombinerParameteriNV __glintercept_fnptr_glCombinerParameteriNV;
void __glintercept_glCombinerParameteriNV(GLenum pname, GLint param) {
  __glintercept_fnptr_glCombinerParameteriNV(pname, param);
  __glintercept_log(" - glCombinerParameteriNV(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glCombinerParameterivNV)(GLenum, const GLint *);
static __ctype_glCombinerParameterivNV __glintercept_fnptr_glCombinerParameterivNV;
void __glintercept_glCombinerParameterivNV(GLenum pname, const GLint * params) {
  __glintercept_fnptr_glCombinerParameterivNV(pname, params);
  __glintercept_log(" - glCombinerParameterivNV(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glCombinerStageParameterfvNV)(GLenum, GLenum, const GLfloat *);
static __ctype_glCombinerStageParameterfvNV __glintercept_fnptr_glCombinerStageParameterfvNV;
void __glintercept_glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glCombinerStageParameterfvNV(stage, pname, params);
  __glintercept_log(" - glCombinerStageParameterfvNV(stage: %ld (%s), pname: %ld (%s), params: %ld)", stage, __gl_intercept_formatenum(stage), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glCommandListSegmentsNV)(GLuint, GLuint);
static __ctype_glCommandListSegmentsNV __glintercept_fnptr_glCommandListSegmentsNV;
void __glintercept_glCommandListSegmentsNV(GLuint list, GLuint segments) {
  __glintercept_fnptr_glCommandListSegmentsNV(list, segments);
  __glintercept_log(" - glCommandListSegmentsNV(list: %ld, segments: %ld)", list, segments);
}

typedef void(*__ctype_glCompileCommandListNV)(GLuint);
static __ctype_glCompileCommandListNV __glintercept_fnptr_glCompileCommandListNV;
void __glintercept_glCompileCommandListNV(GLuint list) {
  __glintercept_fnptr_glCompileCommandListNV(list);
  __glintercept_log(" - glCompileCommandListNV(list: %ld)", list);
}

typedef void(*__ctype_glCompileShader)(GLuint);
static __ctype_glCompileShader __glintercept_fnptr_glCompileShader;
void __glintercept_glCompileShader(GLuint shader) {
  __glintercept_fnptr_glCompileShader(shader);
  __glintercept_log(" - glCompileShader(shader: %ld)", shader);
}

typedef void(*__ctype_glCompileShaderARB)(GLhandleARB);
static __ctype_glCompileShaderARB __glintercept_fnptr_glCompileShaderARB;
void __glintercept_glCompileShaderARB(GLhandleARB shaderObj) {
  __glintercept_fnptr_glCompileShaderARB(shaderObj);
  __glintercept_log(" - glCompileShaderARB(shaderObj: %ld)", shaderObj);
}

typedef void(*__ctype_glCompileShaderIncludeARB)(GLuint, GLsizei, const GLchar *const*, const GLint *);
static __ctype_glCompileShaderIncludeARB __glintercept_fnptr_glCompileShaderIncludeARB;
void __glintercept_glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar *const* path, const GLint * length) {
  __glintercept_fnptr_glCompileShaderIncludeARB(shader, count, path, length);
  __glintercept_log(" - glCompileShaderIncludeARB(shader: %ld, count: %ld, path: %ld, length: %ld)", shader, count, path, length);
}

typedef void(*__ctype_glCompressedMultiTexImage1DEXT)(GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
static __ctype_glCompressedMultiTexImage1DEXT __glintercept_fnptr_glCompressedMultiTexImage1DEXT;
void __glintercept_glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits) {
  __glintercept_fnptr_glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits);
  __glintercept_log(" - glCompressedMultiTexImage1DEXT(texunit: %ld (%s), target: %ld (%s), level: %ld, internalformat: %ld (%s), width: %ld, border: %ld, imageSize: %ld, bits: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), width, border, imageSize, bits);
}

typedef void(*__ctype_glCompressedMultiTexImage2DEXT)(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
static __ctype_glCompressedMultiTexImage2DEXT __glintercept_fnptr_glCompressedMultiTexImage2DEXT;
void __glintercept_glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits) {
  __glintercept_fnptr_glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits);
  __glintercept_log(" - glCompressedMultiTexImage2DEXT(texunit: %ld (%s), target: %ld (%s), level: %ld, internalformat: %ld (%s), width: %ld, height: %ld, border: %ld, imageSize: %ld, bits: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), width, height, border, imageSize, bits);
}

typedef void(*__ctype_glCompressedMultiTexImage3DEXT)(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
static __ctype_glCompressedMultiTexImage3DEXT __glintercept_fnptr_glCompressedMultiTexImage3DEXT;
void __glintercept_glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits) {
  __glintercept_fnptr_glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
  __glintercept_log(" - glCompressedMultiTexImage3DEXT(texunit: %ld (%s), target: %ld (%s), level: %ld, internalformat: %ld (%s), width: %ld, height: %ld, depth: %ld, border: %ld, imageSize: %ld, bits: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), width, height, depth, border, imageSize, bits);
}

typedef void(*__ctype_glCompressedMultiTexSubImage1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
static __ctype_glCompressedMultiTexSubImage1DEXT __glintercept_fnptr_glCompressedMultiTexSubImage1DEXT;
void __glintercept_glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits) {
  __glintercept_fnptr_glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits);
  __glintercept_log(" - glCompressedMultiTexSubImage1DEXT(texunit: %ld (%s), target: %ld (%s), level: %ld, xoffset: %ld, width: %ld, format: %ld (%s), imageSize: %ld, bits: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), level, xoffset, width, format, __gl_intercept_formatenum(format), imageSize, bits);
}

typedef void(*__ctype_glCompressedMultiTexSubImage2DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
static __ctype_glCompressedMultiTexSubImage2DEXT __glintercept_fnptr_glCompressedMultiTexSubImage2DEXT;
void __glintercept_glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits) {
  __glintercept_fnptr_glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
  __glintercept_log(" - glCompressedMultiTexSubImage2DEXT(texunit: %ld (%s), target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, width: %ld, height: %ld, format: %ld (%s), imageSize: %ld, bits: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), level, xoffset, yoffset, width, height, format, __gl_intercept_formatenum(format), imageSize, bits);
}

typedef void(*__ctype_glCompressedMultiTexSubImage3DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
static __ctype_glCompressedMultiTexSubImage3DEXT __glintercept_fnptr_glCompressedMultiTexSubImage3DEXT;
void __glintercept_glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits) {
  __glintercept_fnptr_glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
  __glintercept_log(" - glCompressedMultiTexSubImage3DEXT(texunit: %ld (%s), target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld, format: %ld (%s), imageSize: %ld, bits: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), level, xoffset, yoffset, zoffset, width, height, depth, format, __gl_intercept_formatenum(format), imageSize, bits);
}

typedef void(*__ctype_glCompressedTexImage1D)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
static __ctype_glCompressedTexImage1D __glintercept_fnptr_glCompressedTexImage1D;
void __glintercept_glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) {
  __glintercept_fnptr_glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
  __glintercept_log(" - glCompressedTexImage1D(target: %ld (%s), level: %ld, internalformat: %ld (%s), width: %ld, border: %ld, imageSize: %ld, data: %ld)", target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), width, border, imageSize, data);
}

typedef void(*__ctype_glCompressedTexImage1DARB)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
static __ctype_glCompressedTexImage1DARB __glintercept_fnptr_glCompressedTexImage1DARB;
void __glintercept_glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) {
  __glintercept_fnptr_glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data);
  __glintercept_log(" - glCompressedTexImage1DARB(target: %ld (%s), level: %ld, internalformat: %ld (%s), width: %ld, border: %ld, imageSize: %ld, data: %ld)", target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), width, border, imageSize, data);
}

typedef void(*__ctype_glCompressedTexImage2D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
static __ctype_glCompressedTexImage2D __glintercept_fnptr_glCompressedTexImage2D;
void __glintercept_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) {
  __glintercept_fnptr_glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
  __glintercept_log(" - glCompressedTexImage2D(target: %ld (%s), level: %ld, internalformat: %ld (%s), width: %ld, height: %ld, border: %ld, imageSize: %ld, data: %ld)", target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), width, height, border, imageSize, data);
}

typedef void(*__ctype_glCompressedTexImage2DARB)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
static __ctype_glCompressedTexImage2DARB __glintercept_fnptr_glCompressedTexImage2DARB;
void __glintercept_glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) {
  __glintercept_fnptr_glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data);
  __glintercept_log(" - glCompressedTexImage2DARB(target: %ld (%s), level: %ld, internalformat: %ld (%s), width: %ld, height: %ld, border: %ld, imageSize: %ld, data: %ld)", target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), width, height, border, imageSize, data);
}

typedef void(*__ctype_glCompressedTexImage3D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
static __ctype_glCompressedTexImage3D __glintercept_fnptr_glCompressedTexImage3D;
void __glintercept_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) {
  __glintercept_fnptr_glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
  __glintercept_log(" - glCompressedTexImage3D(target: %ld (%s), level: %ld, internalformat: %ld (%s), width: %ld, height: %ld, depth: %ld, border: %ld, imageSize: %ld, data: %ld)", target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), width, height, depth, border, imageSize, data);
}

typedef void(*__ctype_glCompressedTexImage3DARB)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
static __ctype_glCompressedTexImage3DARB __glintercept_fnptr_glCompressedTexImage3DARB;
void __glintercept_glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) {
  __glintercept_fnptr_glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data);
  __glintercept_log(" - glCompressedTexImage3DARB(target: %ld (%s), level: %ld, internalformat: %ld (%s), width: %ld, height: %ld, depth: %ld, border: %ld, imageSize: %ld, data: %ld)", target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), width, height, depth, border, imageSize, data);
}

typedef void(*__ctype_glCompressedTexImage3DOES)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
static __ctype_glCompressedTexImage3DOES __glintercept_fnptr_glCompressedTexImage3DOES;
void __glintercept_glCompressedTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) {
  __glintercept_fnptr_glCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data);
  __glintercept_log(" - glCompressedTexImage3DOES(target: %ld (%s), level: %ld, internalformat: %ld (%s), width: %ld, height: %ld, depth: %ld, border: %ld, imageSize: %ld, data: %ld)", target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), width, height, depth, border, imageSize, data);
}

typedef void(*__ctype_glCompressedTexSubImage1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
static __ctype_glCompressedTexSubImage1D __glintercept_fnptr_glCompressedTexSubImage1D;
void __glintercept_glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) {
  __glintercept_fnptr_glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
  __glintercept_log(" - glCompressedTexSubImage1D(target: %ld (%s), level: %ld, xoffset: %ld, width: %ld, format: %ld (%s), imageSize: %ld, data: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, width, format, __gl_intercept_formatenum(format), imageSize, data);
}

typedef void(*__ctype_glCompressedTexSubImage1DARB)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
static __ctype_glCompressedTexSubImage1DARB __glintercept_fnptr_glCompressedTexSubImage1DARB;
void __glintercept_glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) {
  __glintercept_fnptr_glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data);
  __glintercept_log(" - glCompressedTexSubImage1DARB(target: %ld (%s), level: %ld, xoffset: %ld, width: %ld, format: %ld (%s), imageSize: %ld, data: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, width, format, __gl_intercept_formatenum(format), imageSize, data);
}

typedef void(*__ctype_glCompressedTexSubImage2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
static __ctype_glCompressedTexSubImage2D __glintercept_fnptr_glCompressedTexSubImage2D;
void __glintercept_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) {
  __glintercept_fnptr_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
  __glintercept_log(" - glCompressedTexSubImage2D(target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, width: %ld, height: %ld, format: %ld (%s), imageSize: %ld, data: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, yoffset, width, height, format, __gl_intercept_formatenum(format), imageSize, data);
}

typedef void(*__ctype_glCompressedTexSubImage2DARB)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
static __ctype_glCompressedTexSubImage2DARB __glintercept_fnptr_glCompressedTexSubImage2DARB;
void __glintercept_glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) {
  __glintercept_fnptr_glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data);
  __glintercept_log(" - glCompressedTexSubImage2DARB(target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, width: %ld, height: %ld, format: %ld (%s), imageSize: %ld, data: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, yoffset, width, height, format, __gl_intercept_formatenum(format), imageSize, data);
}

typedef void(*__ctype_glCompressedTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
static __ctype_glCompressedTexSubImage3D __glintercept_fnptr_glCompressedTexSubImage3D;
void __glintercept_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) {
  __glintercept_fnptr_glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  __glintercept_log(" - glCompressedTexSubImage3D(target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld, format: %ld (%s), imageSize: %ld, data: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, yoffset, zoffset, width, height, depth, format, __gl_intercept_formatenum(format), imageSize, data);
}

typedef void(*__ctype_glCompressedTexSubImage3DARB)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
static __ctype_glCompressedTexSubImage3DARB __glintercept_fnptr_glCompressedTexSubImage3DARB;
void __glintercept_glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) {
  __glintercept_fnptr_glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  __glintercept_log(" - glCompressedTexSubImage3DARB(target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld, format: %ld (%s), imageSize: %ld, data: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, yoffset, zoffset, width, height, depth, format, __gl_intercept_formatenum(format), imageSize, data);
}

typedef void(*__ctype_glCompressedTexSubImage3DOES)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
static __ctype_glCompressedTexSubImage3DOES __glintercept_fnptr_glCompressedTexSubImage3DOES;
void __glintercept_glCompressedTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) {
  __glintercept_fnptr_glCompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  __glintercept_log(" - glCompressedTexSubImage3DOES(target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld, format: %ld (%s), imageSize: %ld, data: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, yoffset, zoffset, width, height, depth, format, __gl_intercept_formatenum(format), imageSize, data);
}

typedef void(*__ctype_glCompressedTextureImage1DEXT)(GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
static __ctype_glCompressedTextureImage1DEXT __glintercept_fnptr_glCompressedTextureImage1DEXT;
void __glintercept_glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits) {
  __glintercept_fnptr_glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits);
  __glintercept_log(" - glCompressedTextureImage1DEXT(texture: %ld, target: %ld (%s), level: %ld, internalformat: %ld (%s), width: %ld, border: %ld, imageSize: %ld, bits: %ld)", texture, target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), width, border, imageSize, bits);
}

typedef void(*__ctype_glCompressedTextureImage2DEXT)(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
static __ctype_glCompressedTextureImage2DEXT __glintercept_fnptr_glCompressedTextureImage2DEXT;
void __glintercept_glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits) {
  __glintercept_fnptr_glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits);
  __glintercept_log(" - glCompressedTextureImage2DEXT(texture: %ld, target: %ld (%s), level: %ld, internalformat: %ld (%s), width: %ld, height: %ld, border: %ld, imageSize: %ld, bits: %ld)", texture, target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), width, height, border, imageSize, bits);
}

typedef void(*__ctype_glCompressedTextureImage3DEXT)(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
static __ctype_glCompressedTextureImage3DEXT __glintercept_fnptr_glCompressedTextureImage3DEXT;
void __glintercept_glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits) {
  __glintercept_fnptr_glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
  __glintercept_log(" - glCompressedTextureImage3DEXT(texture: %ld, target: %ld (%s), level: %ld, internalformat: %ld (%s), width: %ld, height: %ld, depth: %ld, border: %ld, imageSize: %ld, bits: %ld)", texture, target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), width, height, depth, border, imageSize, bits);
}

typedef void(*__ctype_glCompressedTextureSubImage1D)(GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
static __ctype_glCompressedTextureSubImage1D __glintercept_fnptr_glCompressedTextureSubImage1D;
void __glintercept_glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) {
  __glintercept_fnptr_glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);
  __glintercept_log(" - glCompressedTextureSubImage1D(texture: %ld, level: %ld, xoffset: %ld, width: %ld, format: %ld (%s), imageSize: %ld, data: %ld)", texture, level, xoffset, width, format, __gl_intercept_formatenum(format), imageSize, data);
}

typedef void(*__ctype_glCompressedTextureSubImage1DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
static __ctype_glCompressedTextureSubImage1DEXT __glintercept_fnptr_glCompressedTextureSubImage1DEXT;
void __glintercept_glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits) {
  __glintercept_fnptr_glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits);
  __glintercept_log(" - glCompressedTextureSubImage1DEXT(texture: %ld, target: %ld (%s), level: %ld, xoffset: %ld, width: %ld, format: %ld (%s), imageSize: %ld, bits: %ld)", texture, target, __gl_intercept_formatenum(target), level, xoffset, width, format, __gl_intercept_formatenum(format), imageSize, bits);
}

typedef void(*__ctype_glCompressedTextureSubImage2D)(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
static __ctype_glCompressedTextureSubImage2D __glintercept_fnptr_glCompressedTextureSubImage2D;
void __glintercept_glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) {
  __glintercept_fnptr_glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
  __glintercept_log(" - glCompressedTextureSubImage2D(texture: %ld, level: %ld, xoffset: %ld, yoffset: %ld, width: %ld, height: %ld, format: %ld (%s), imageSize: %ld, data: %ld)", texture, level, xoffset, yoffset, width, height, format, __gl_intercept_formatenum(format), imageSize, data);
}

typedef void(*__ctype_glCompressedTextureSubImage2DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
static __ctype_glCompressedTextureSubImage2DEXT __glintercept_fnptr_glCompressedTextureSubImage2DEXT;
void __glintercept_glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits) {
  __glintercept_fnptr_glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
  __glintercept_log(" - glCompressedTextureSubImage2DEXT(texture: %ld, target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, width: %ld, height: %ld, format: %ld (%s), imageSize: %ld, bits: %ld)", texture, target, __gl_intercept_formatenum(target), level, xoffset, yoffset, width, height, format, __gl_intercept_formatenum(format), imageSize, bits);
}

typedef void(*__ctype_glCompressedTextureSubImage3D)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
static __ctype_glCompressedTextureSubImage3D __glintercept_fnptr_glCompressedTextureSubImage3D;
void __glintercept_glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) {
  __glintercept_fnptr_glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  __glintercept_log(" - glCompressedTextureSubImage3D(texture: %ld, level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld, format: %ld (%s), imageSize: %ld, data: %ld)", texture, level, xoffset, yoffset, zoffset, width, height, depth, format, __gl_intercept_formatenum(format), imageSize, data);
}

typedef void(*__ctype_glCompressedTextureSubImage3DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
static __ctype_glCompressedTextureSubImage3DEXT __glintercept_fnptr_glCompressedTextureSubImage3DEXT;
void __glintercept_glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits) {
  __glintercept_fnptr_glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
  __glintercept_log(" - glCompressedTextureSubImage3DEXT(texture: %ld, target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld, format: %ld (%s), imageSize: %ld, bits: %ld)", texture, target, __gl_intercept_formatenum(target), level, xoffset, yoffset, zoffset, width, height, depth, format, __gl_intercept_formatenum(format), imageSize, bits);
}

typedef void(*__ctype_glConservativeRasterParameterfNV)(GLenum, GLfloat);
static __ctype_glConservativeRasterParameterfNV __glintercept_fnptr_glConservativeRasterParameterfNV;
void __glintercept_glConservativeRasterParameterfNV(GLenum pname, GLfloat value) {
  __glintercept_fnptr_glConservativeRasterParameterfNV(pname, value);
  __glintercept_log(" - glConservativeRasterParameterfNV(pname: %ld (%s), value: %ld)", pname, __gl_intercept_formatenum(pname), value);
}

typedef void(*__ctype_glConservativeRasterParameteriNV)(GLenum, GLint);
static __ctype_glConservativeRasterParameteriNV __glintercept_fnptr_glConservativeRasterParameteriNV;
void __glintercept_glConservativeRasterParameteriNV(GLenum pname, GLint param) {
  __glintercept_fnptr_glConservativeRasterParameteriNV(pname, param);
  __glintercept_log(" - glConservativeRasterParameteriNV(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glConvolutionFilter1D)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
static __ctype_glConvolutionFilter1D __glintercept_fnptr_glConvolutionFilter1D;
void __glintercept_glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image) {
  __glintercept_fnptr_glConvolutionFilter1D(target, internalformat, width, format, type, image);
  __glintercept_log(" - glConvolutionFilter1D(target: %ld (%s), internalformat: %ld (%s), width: %ld, format: %ld (%s), type: %ld (%s), image: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), width, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), image);
}

typedef void(*__ctype_glConvolutionFilter1DEXT)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
static __ctype_glConvolutionFilter1DEXT __glintercept_fnptr_glConvolutionFilter1DEXT;
void __glintercept_glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image) {
  __glintercept_fnptr_glConvolutionFilter1DEXT(target, internalformat, width, format, type, image);
  __glintercept_log(" - glConvolutionFilter1DEXT(target: %ld (%s), internalformat: %ld (%s), width: %ld, format: %ld (%s), type: %ld (%s), image: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), width, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), image);
}

typedef void(*__ctype_glConvolutionFilter2D)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
static __ctype_glConvolutionFilter2D __glintercept_fnptr_glConvolutionFilter2D;
void __glintercept_glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image) {
  __glintercept_fnptr_glConvolutionFilter2D(target, internalformat, width, height, format, type, image);
  __glintercept_log(" - glConvolutionFilter2D(target: %ld (%s), internalformat: %ld (%s), width: %ld, height: %ld, format: %ld (%s), type: %ld (%s), image: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), width, height, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), image);
}

typedef void(*__ctype_glConvolutionFilter2DEXT)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
static __ctype_glConvolutionFilter2DEXT __glintercept_fnptr_glConvolutionFilter2DEXT;
void __glintercept_glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image) {
  __glintercept_fnptr_glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image);
  __glintercept_log(" - glConvolutionFilter2DEXT(target: %ld (%s), internalformat: %ld (%s), width: %ld, height: %ld, format: %ld (%s), type: %ld (%s), image: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), width, height, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), image);
}

typedef void(*__ctype_glConvolutionParameterf)(GLenum, GLenum, GLfloat);
static __ctype_glConvolutionParameterf __glintercept_fnptr_glConvolutionParameterf;
void __glintercept_glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params) {
  __glintercept_fnptr_glConvolutionParameterf(target, pname, params);
  __glintercept_log(" - glConvolutionParameterf(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glConvolutionParameterfEXT)(GLenum, GLenum, GLfloat);
static __ctype_glConvolutionParameterfEXT __glintercept_fnptr_glConvolutionParameterfEXT;
void __glintercept_glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat params) {
  __glintercept_fnptr_glConvolutionParameterfEXT(target, pname, params);
  __glintercept_log(" - glConvolutionParameterfEXT(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glConvolutionParameterfv)(GLenum, GLenum, const GLfloat *);
static __ctype_glConvolutionParameterfv __glintercept_fnptr_glConvolutionParameterfv;
void __glintercept_glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glConvolutionParameterfv(target, pname, params);
  __glintercept_log(" - glConvolutionParameterfv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glConvolutionParameterfvEXT)(GLenum, GLenum, const GLfloat *);
static __ctype_glConvolutionParameterfvEXT __glintercept_fnptr_glConvolutionParameterfvEXT;
void __glintercept_glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glConvolutionParameterfvEXT(target, pname, params);
  __glintercept_log(" - glConvolutionParameterfvEXT(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glConvolutionParameteri)(GLenum, GLenum, GLint);
static __ctype_glConvolutionParameteri __glintercept_fnptr_glConvolutionParameteri;
void __glintercept_glConvolutionParameteri(GLenum target, GLenum pname, GLint params) {
  __glintercept_fnptr_glConvolutionParameteri(target, pname, params);
  __glintercept_log(" - glConvolutionParameteri(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glConvolutionParameteriEXT)(GLenum, GLenum, GLint);
static __ctype_glConvolutionParameteriEXT __glintercept_fnptr_glConvolutionParameteriEXT;
void __glintercept_glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint params) {
  __glintercept_fnptr_glConvolutionParameteriEXT(target, pname, params);
  __glintercept_log(" - glConvolutionParameteriEXT(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glConvolutionParameteriv)(GLenum, GLenum, const GLint *);
static __ctype_glConvolutionParameteriv __glintercept_fnptr_glConvolutionParameteriv;
void __glintercept_glConvolutionParameteriv(GLenum target, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glConvolutionParameteriv(target, pname, params);
  __glintercept_log(" - glConvolutionParameteriv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glConvolutionParameterivEXT)(GLenum, GLenum, const GLint *);
static __ctype_glConvolutionParameterivEXT __glintercept_fnptr_glConvolutionParameterivEXT;
void __glintercept_glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glConvolutionParameterivEXT(target, pname, params);
  __glintercept_log(" - glConvolutionParameterivEXT(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glConvolutionParameterxOES)(GLenum, GLenum, GLfixed);
static __ctype_glConvolutionParameterxOES __glintercept_fnptr_glConvolutionParameterxOES;
void __glintercept_glConvolutionParameterxOES(GLenum target, GLenum pname, GLfixed param) {
  __glintercept_fnptr_glConvolutionParameterxOES(target, pname, param);
  __glintercept_log(" - glConvolutionParameterxOES(target: %ld (%s), pname: %ld (%s), param: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glConvolutionParameterxvOES)(GLenum, GLenum, const GLfixed *);
static __ctype_glConvolutionParameterxvOES __glintercept_fnptr_glConvolutionParameterxvOES;
void __glintercept_glConvolutionParameterxvOES(GLenum target, GLenum pname, const GLfixed * params) {
  __glintercept_fnptr_glConvolutionParameterxvOES(target, pname, params);
  __glintercept_log(" - glConvolutionParameterxvOES(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glCopyBufferSubData)(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr);
static __ctype_glCopyBufferSubData __glintercept_fnptr_glCopyBufferSubData;
void __glintercept_glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  __glintercept_fnptr_glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
  __glintercept_log(" - glCopyBufferSubData(readTarget: %ld (%s), writeTarget: %ld (%s), readOffset: %ld, writeOffset: %ld, size: %ld)", readTarget, __gl_intercept_formatenum(readTarget), writeTarget, __gl_intercept_formatenum(writeTarget), readOffset, writeOffset, size);
}

typedef void(*__ctype_glCopyBufferSubDataNV)(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr);
static __ctype_glCopyBufferSubDataNV __glintercept_fnptr_glCopyBufferSubDataNV;
void __glintercept_glCopyBufferSubDataNV(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  __glintercept_fnptr_glCopyBufferSubDataNV(readTarget, writeTarget, readOffset, writeOffset, size);
  __glintercept_log(" - glCopyBufferSubDataNV(readTarget: %ld (%s), writeTarget: %ld (%s), readOffset: %ld, writeOffset: %ld, size: %ld)", readTarget, __gl_intercept_formatenum(readTarget), writeTarget, __gl_intercept_formatenum(writeTarget), readOffset, writeOffset, size);
}

typedef void(*__ctype_glCopyColorSubTable)(GLenum, GLsizei, GLint, GLint, GLsizei);
static __ctype_glCopyColorSubTable __glintercept_fnptr_glCopyColorSubTable;
void __glintercept_glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) {
  __glintercept_fnptr_glCopyColorSubTable(target, start, x, y, width);
  __glintercept_log(" - glCopyColorSubTable(target: %ld (%s), start: %ld, x: %ld, y: %ld, width: %ld)", target, __gl_intercept_formatenum(target), start, x, y, width);
}

typedef void(*__ctype_glCopyColorSubTableEXT)(GLenum, GLsizei, GLint, GLint, GLsizei);
static __ctype_glCopyColorSubTableEXT __glintercept_fnptr_glCopyColorSubTableEXT;
void __glintercept_glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) {
  __glintercept_fnptr_glCopyColorSubTableEXT(target, start, x, y, width);
  __glintercept_log(" - glCopyColorSubTableEXT(target: %ld (%s), start: %ld, x: %ld, y: %ld, width: %ld)", target, __gl_intercept_formatenum(target), start, x, y, width);
}

typedef void(*__ctype_glCopyColorTable)(GLenum, GLenum, GLint, GLint, GLsizei);
static __ctype_glCopyColorTable __glintercept_fnptr_glCopyColorTable;
void __glintercept_glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
  __glintercept_fnptr_glCopyColorTable(target, internalformat, x, y, width);
  __glintercept_log(" - glCopyColorTable(target: %ld (%s), internalformat: %ld (%s), x: %ld, y: %ld, width: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), x, y, width);
}

typedef void(*__ctype_glCopyColorTableSGI)(GLenum, GLenum, GLint, GLint, GLsizei);
static __ctype_glCopyColorTableSGI __glintercept_fnptr_glCopyColorTableSGI;
void __glintercept_glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
  __glintercept_fnptr_glCopyColorTableSGI(target, internalformat, x, y, width);
  __glintercept_log(" - glCopyColorTableSGI(target: %ld (%s), internalformat: %ld (%s), x: %ld, y: %ld, width: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), x, y, width);
}

typedef void(*__ctype_glCopyConvolutionFilter1D)(GLenum, GLenum, GLint, GLint, GLsizei);
static __ctype_glCopyConvolutionFilter1D __glintercept_fnptr_glCopyConvolutionFilter1D;
void __glintercept_glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
  __glintercept_fnptr_glCopyConvolutionFilter1D(target, internalformat, x, y, width);
  __glintercept_log(" - glCopyConvolutionFilter1D(target: %ld (%s), internalformat: %ld (%s), x: %ld, y: %ld, width: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), x, y, width);
}

typedef void(*__ctype_glCopyConvolutionFilter1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei);
static __ctype_glCopyConvolutionFilter1DEXT __glintercept_fnptr_glCopyConvolutionFilter1DEXT;
void __glintercept_glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
  __glintercept_fnptr_glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width);
  __glintercept_log(" - glCopyConvolutionFilter1DEXT(target: %ld (%s), internalformat: %ld (%s), x: %ld, y: %ld, width: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), x, y, width);
}

typedef void(*__ctype_glCopyConvolutionFilter2D)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
static __ctype_glCopyConvolutionFilter2D __glintercept_fnptr_glCopyConvolutionFilter2D;
void __glintercept_glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glCopyConvolutionFilter2D(target, internalformat, x, y, width, height);
  __glintercept_log(" - glCopyConvolutionFilter2D(target: %ld (%s), internalformat: %ld (%s), x: %ld, y: %ld, width: %ld, height: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), x, y, width, height);
}

typedef void(*__ctype_glCopyConvolutionFilter2DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
static __ctype_glCopyConvolutionFilter2DEXT __glintercept_fnptr_glCopyConvolutionFilter2DEXT;
void __glintercept_glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height);
  __glintercept_log(" - glCopyConvolutionFilter2DEXT(target: %ld (%s), internalformat: %ld (%s), x: %ld, y: %ld, width: %ld, height: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), x, y, width, height);
}

typedef void(*__ctype_glCopyImageSubData)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
static __ctype_glCopyImageSubData __glintercept_fnptr_glCopyImageSubData;
void __glintercept_glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
  __glintercept_fnptr_glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  __glintercept_log(" - glCopyImageSubData(srcName: %ld, srcTarget: %ld (%s), srcLevel: %ld, srcX: %ld, srcY: %ld, srcZ: %ld, dstName: %ld, dstTarget: %ld (%s), dstLevel: %ld, dstX: %ld, dstY: %ld, dstZ: %ld, srcWidth: %ld, srcHeight: %ld, srcDepth: %ld)", srcName, srcTarget, __gl_intercept_formatenum(srcTarget), srcLevel, srcX, srcY, srcZ, dstName, dstTarget, __gl_intercept_formatenum(dstTarget), dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}

typedef void(*__ctype_glCopyImageSubDataEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
static __ctype_glCopyImageSubDataEXT __glintercept_fnptr_glCopyImageSubDataEXT;
void __glintercept_glCopyImageSubDataEXT(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
  __glintercept_fnptr_glCopyImageSubDataEXT(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  __glintercept_log(" - glCopyImageSubDataEXT(srcName: %ld, srcTarget: %ld (%s), srcLevel: %ld, srcX: %ld, srcY: %ld, srcZ: %ld, dstName: %ld, dstTarget: %ld (%s), dstLevel: %ld, dstX: %ld, dstY: %ld, dstZ: %ld, srcWidth: %ld, srcHeight: %ld, srcDepth: %ld)", srcName, srcTarget, __gl_intercept_formatenum(srcTarget), srcLevel, srcX, srcY, srcZ, dstName, dstTarget, __gl_intercept_formatenum(dstTarget), dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}

typedef void(*__ctype_glCopyImageSubDataNV)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
static __ctype_glCopyImageSubDataNV __glintercept_fnptr_glCopyImageSubDataNV;
void __glintercept_glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) {
  __glintercept_fnptr_glCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  __glintercept_log(" - glCopyImageSubDataNV(srcName: %ld, srcTarget: %ld (%s), srcLevel: %ld, srcX: %ld, srcY: %ld, srcZ: %ld, dstName: %ld, dstTarget: %ld (%s), dstLevel: %ld, dstX: %ld, dstY: %ld, dstZ: %ld, width: %ld, height: %ld, depth: %ld)", srcName, srcTarget, __gl_intercept_formatenum(srcTarget), srcLevel, srcX, srcY, srcZ, dstName, dstTarget, __gl_intercept_formatenum(dstTarget), dstLevel, dstX, dstY, dstZ, width, height, depth);
}

typedef void(*__ctype_glCopyImageSubDataOES)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
static __ctype_glCopyImageSubDataOES __glintercept_fnptr_glCopyImageSubDataOES;
void __glintercept_glCopyImageSubDataOES(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
  __glintercept_fnptr_glCopyImageSubDataOES(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  __glintercept_log(" - glCopyImageSubDataOES(srcName: %ld, srcTarget: %ld (%s), srcLevel: %ld, srcX: %ld, srcY: %ld, srcZ: %ld, dstName: %ld, dstTarget: %ld (%s), dstLevel: %ld, dstX: %ld, dstY: %ld, dstZ: %ld, srcWidth: %ld, srcHeight: %ld, srcDepth: %ld)", srcName, srcTarget, __gl_intercept_formatenum(srcTarget), srcLevel, srcX, srcY, srcZ, dstName, dstTarget, __gl_intercept_formatenum(dstTarget), dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}

typedef void(*__ctype_glCopyMultiTexImage1DEXT)(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
static __ctype_glCopyMultiTexImage1DEXT __glintercept_fnptr_glCopyMultiTexImage1DEXT;
void __glintercept_glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  __glintercept_fnptr_glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border);
  __glintercept_log(" - glCopyMultiTexImage1DEXT(texunit: %ld (%s), target: %ld (%s), level: %ld, internalformat: %ld (%s), x: %ld, y: %ld, width: %ld, border: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), x, y, width, border);
}

typedef void(*__ctype_glCopyMultiTexImage2DEXT)(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
static __ctype_glCopyMultiTexImage2DEXT __glintercept_fnptr_glCopyMultiTexImage2DEXT;
void __glintercept_glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  __glintercept_fnptr_glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border);
  __glintercept_log(" - glCopyMultiTexImage2DEXT(texunit: %ld (%s), target: %ld (%s), level: %ld, internalformat: %ld (%s), x: %ld, y: %ld, width: %ld, height: %ld, border: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), x, y, width, height, border);
}

typedef void(*__ctype_glCopyMultiTexSubImage1DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei);
static __ctype_glCopyMultiTexSubImage1DEXT __glintercept_fnptr_glCopyMultiTexSubImage1DEXT;
void __glintercept_glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  __glintercept_fnptr_glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width);
  __glintercept_log(" - glCopyMultiTexSubImage1DEXT(texunit: %ld (%s), target: %ld (%s), level: %ld, xoffset: %ld, x: %ld, y: %ld, width: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), level, xoffset, x, y, width);
}

typedef void(*__ctype_glCopyMultiTexSubImage2DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
static __ctype_glCopyMultiTexSubImage2DEXT __glintercept_fnptr_glCopyMultiTexSubImage2DEXT;
void __glintercept_glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height);
  __glintercept_log(" - glCopyMultiTexSubImage2DEXT(texunit: %ld (%s), target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, x: %ld, y: %ld, width: %ld, height: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), level, xoffset, yoffset, x, y, width, height);
}

typedef void(*__ctype_glCopyMultiTexSubImage3DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
static __ctype_glCopyMultiTexSubImage3DEXT __glintercept_fnptr_glCopyMultiTexSubImage3DEXT;
void __glintercept_glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
  __glintercept_log(" - glCopyMultiTexSubImage3DEXT(texunit: %ld (%s), target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, x: %ld, y: %ld, width: %ld, height: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), level, xoffset, yoffset, zoffset, x, y, width, height);
}

typedef void(*__ctype_glCopyNamedBufferSubData)(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
static __ctype_glCopyNamedBufferSubData __glintercept_fnptr_glCopyNamedBufferSubData;
void __glintercept_glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  __glintercept_fnptr_glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);
  __glintercept_log(" - glCopyNamedBufferSubData(readBuffer: %ld, writeBuffer: %ld, readOffset: %ld, writeOffset: %ld, size: %ld)", readBuffer, writeBuffer, readOffset, writeOffset, size);
}

typedef void(*__ctype_glCopyPathNV)(GLuint, GLuint);
static __ctype_glCopyPathNV __glintercept_fnptr_glCopyPathNV;
void __glintercept_glCopyPathNV(GLuint resultPath, GLuint srcPath) {
  __glintercept_fnptr_glCopyPathNV(resultPath, srcPath);
  __glintercept_log(" - glCopyPathNV(resultPath: %ld, srcPath: %ld)", resultPath, srcPath);
}

typedef void(*__ctype_glCopyPixels)(GLint, GLint, GLsizei, GLsizei, GLenum);
static __ctype_glCopyPixels __glintercept_fnptr_glCopyPixels;
void __glintercept_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) {
  __glintercept_fnptr_glCopyPixels(x, y, width, height, type);
  __glintercept_log(" - glCopyPixels(x: %ld, y: %ld, width: %ld, height: %ld, type: %ld (%s))", x, y, width, height, type, __gl_intercept_formatenum(type));
}

typedef void(*__ctype_glCopyTexImage1D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
static __ctype_glCopyTexImage1D __glintercept_fnptr_glCopyTexImage1D;
void __glintercept_glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  __glintercept_fnptr_glCopyTexImage1D(target, level, internalformat, x, y, width, border);
  __glintercept_log(" - glCopyTexImage1D(target: %ld (%s), level: %ld, internalformat: %ld (%s), x: %ld, y: %ld, width: %ld, border: %ld)", target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), x, y, width, border);
}

typedef void(*__ctype_glCopyTexImage1DEXT)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
static __ctype_glCopyTexImage1DEXT __glintercept_fnptr_glCopyTexImage1DEXT;
void __glintercept_glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  __glintercept_fnptr_glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border);
  __glintercept_log(" - glCopyTexImage1DEXT(target: %ld (%s), level: %ld, internalformat: %ld (%s), x: %ld, y: %ld, width: %ld, border: %ld)", target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), x, y, width, border);
}

typedef void(*__ctype_glCopyTexImage2D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
static __ctype_glCopyTexImage2D __glintercept_fnptr_glCopyTexImage2D;
void __glintercept_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  __glintercept_fnptr_glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
  __glintercept_log(" - glCopyTexImage2D(target: %ld (%s), level: %ld, internalformat: %ld (%s), x: %ld, y: %ld, width: %ld, height: %ld, border: %ld)", target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), x, y, width, height, border);
}

typedef void(*__ctype_glCopyTexImage2DEXT)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
static __ctype_glCopyTexImage2DEXT __glintercept_fnptr_glCopyTexImage2DEXT;
void __glintercept_glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  __glintercept_fnptr_glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);
  __glintercept_log(" - glCopyTexImage2DEXT(target: %ld (%s), level: %ld, internalformat: %ld (%s), x: %ld, y: %ld, width: %ld, height: %ld, border: %ld)", target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), x, y, width, height, border);
}

typedef void(*__ctype_glCopyTexSubImage1D)(GLenum, GLint, GLint, GLint, GLint, GLsizei);
static __ctype_glCopyTexSubImage1D __glintercept_fnptr_glCopyTexSubImage1D;
void __glintercept_glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  __glintercept_fnptr_glCopyTexSubImage1D(target, level, xoffset, x, y, width);
  __glintercept_log(" - glCopyTexSubImage1D(target: %ld (%s), level: %ld, xoffset: %ld, x: %ld, y: %ld, width: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, x, y, width);
}

typedef void(*__ctype_glCopyTexSubImage1DEXT)(GLenum, GLint, GLint, GLint, GLint, GLsizei);
static __ctype_glCopyTexSubImage1DEXT __glintercept_fnptr_glCopyTexSubImage1DEXT;
void __glintercept_glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  __glintercept_fnptr_glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width);
  __glintercept_log(" - glCopyTexSubImage1DEXT(target: %ld (%s), level: %ld, xoffset: %ld, x: %ld, y: %ld, width: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, x, y, width);
}

typedef void(*__ctype_glCopyTexSubImage2D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
static __ctype_glCopyTexSubImage2D __glintercept_fnptr_glCopyTexSubImage2D;
void __glintercept_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
  __glintercept_log(" - glCopyTexSubImage2D(target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, x: %ld, y: %ld, width: %ld, height: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, yoffset, x, y, width, height);
}

typedef void(*__ctype_glCopyTexSubImage2DEXT)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
static __ctype_glCopyTexSubImage2DEXT __glintercept_fnptr_glCopyTexSubImage2DEXT;
void __glintercept_glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);
  __glintercept_log(" - glCopyTexSubImage2DEXT(target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, x: %ld, y: %ld, width: %ld, height: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, yoffset, x, y, width, height);
}

typedef void(*__ctype_glCopyTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
static __ctype_glCopyTexSubImage3D __glintercept_fnptr_glCopyTexSubImage3D;
void __glintercept_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
  __glintercept_log(" - glCopyTexSubImage3D(target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, x: %ld, y: %ld, width: %ld, height: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, yoffset, zoffset, x, y, width, height);
}

typedef void(*__ctype_glCopyTexSubImage3DEXT)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
static __ctype_glCopyTexSubImage3DEXT __glintercept_fnptr_glCopyTexSubImage3DEXT;
void __glintercept_glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height);
  __glintercept_log(" - glCopyTexSubImage3DEXT(target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, x: %ld, y: %ld, width: %ld, height: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, yoffset, zoffset, x, y, width, height);
}

typedef void(*__ctype_glCopyTexSubImage3DOES)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
static __ctype_glCopyTexSubImage3DOES __glintercept_fnptr_glCopyTexSubImage3DOES;
void __glintercept_glCopyTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glCopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height);
  __glintercept_log(" - glCopyTexSubImage3DOES(target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, x: %ld, y: %ld, width: %ld, height: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, yoffset, zoffset, x, y, width, height);
}

typedef void(*__ctype_glCopyTextureImage1DEXT)(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
static __ctype_glCopyTextureImage1DEXT __glintercept_fnptr_glCopyTextureImage1DEXT;
void __glintercept_glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  __glintercept_fnptr_glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border);
  __glintercept_log(" - glCopyTextureImage1DEXT(texture: %ld, target: %ld (%s), level: %ld, internalformat: %ld (%s), x: %ld, y: %ld, width: %ld, border: %ld)", texture, target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), x, y, width, border);
}

typedef void(*__ctype_glCopyTextureImage2DEXT)(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
static __ctype_glCopyTextureImage2DEXT __glintercept_fnptr_glCopyTextureImage2DEXT;
void __glintercept_glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  __glintercept_fnptr_glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border);
  __glintercept_log(" - glCopyTextureImage2DEXT(texture: %ld, target: %ld (%s), level: %ld, internalformat: %ld (%s), x: %ld, y: %ld, width: %ld, height: %ld, border: %ld)", texture, target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), x, y, width, height, border);
}

typedef void(*__ctype_glCopyTextureLevelsAPPLE)(GLuint, GLuint, GLint, GLsizei);
static __ctype_glCopyTextureLevelsAPPLE __glintercept_fnptr_glCopyTextureLevelsAPPLE;
void __glintercept_glCopyTextureLevelsAPPLE(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount) {
  __glintercept_fnptr_glCopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
  __glintercept_log(" - glCopyTextureLevelsAPPLE(destinationTexture: %ld, sourceTexture: %ld, sourceBaseLevel: %ld, sourceLevelCount: %ld)", destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
}

typedef void(*__ctype_glCopyTextureSubImage1D)(GLuint, GLint, GLint, GLint, GLint, GLsizei);
static __ctype_glCopyTextureSubImage1D __glintercept_fnptr_glCopyTextureSubImage1D;
void __glintercept_glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  __glintercept_fnptr_glCopyTextureSubImage1D(texture, level, xoffset, x, y, width);
  __glintercept_log(" - glCopyTextureSubImage1D(texture: %ld, level: %ld, xoffset: %ld, x: %ld, y: %ld, width: %ld)", texture, level, xoffset, x, y, width);
}

typedef void(*__ctype_glCopyTextureSubImage1DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei);
static __ctype_glCopyTextureSubImage1DEXT __glintercept_fnptr_glCopyTextureSubImage1DEXT;
void __glintercept_glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  __glintercept_fnptr_glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width);
  __glintercept_log(" - glCopyTextureSubImage1DEXT(texture: %ld, target: %ld (%s), level: %ld, xoffset: %ld, x: %ld, y: %ld, width: %ld)", texture, target, __gl_intercept_formatenum(target), level, xoffset, x, y, width);
}

typedef void(*__ctype_glCopyTextureSubImage2D)(GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
static __ctype_glCopyTextureSubImage2D __glintercept_fnptr_glCopyTextureSubImage2D;
void __glintercept_glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);
  __glintercept_log(" - glCopyTextureSubImage2D(texture: %ld, level: %ld, xoffset: %ld, yoffset: %ld, x: %ld, y: %ld, width: %ld, height: %ld)", texture, level, xoffset, yoffset, x, y, width, height);
}

typedef void(*__ctype_glCopyTextureSubImage2DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
static __ctype_glCopyTextureSubImage2DEXT __glintercept_fnptr_glCopyTextureSubImage2DEXT;
void __glintercept_glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height);
  __glintercept_log(" - glCopyTextureSubImage2DEXT(texture: %ld, target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, x: %ld, y: %ld, width: %ld, height: %ld)", texture, target, __gl_intercept_formatenum(target), level, xoffset, yoffset, x, y, width, height);
}

typedef void(*__ctype_glCopyTextureSubImage3D)(GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
static __ctype_glCopyTextureSubImage3D __glintercept_fnptr_glCopyTextureSubImage3D;
void __glintercept_glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
  __glintercept_log(" - glCopyTextureSubImage3D(texture: %ld, level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, x: %ld, y: %ld, width: %ld, height: %ld)", texture, level, xoffset, yoffset, zoffset, x, y, width, height);
}

typedef void(*__ctype_glCopyTextureSubImage3DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
static __ctype_glCopyTextureSubImage3DEXT __glintercept_fnptr_glCopyTextureSubImage3DEXT;
void __glintercept_glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
  __glintercept_log(" - glCopyTextureSubImage3DEXT(texture: %ld, target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, x: %ld, y: %ld, width: %ld, height: %ld)", texture, target, __gl_intercept_formatenum(target), level, xoffset, yoffset, zoffset, x, y, width, height);
}

typedef void(*__ctype_glCoverFillPathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLenum, const GLfloat *);
static __ctype_glCoverFillPathInstancedNV __glintercept_fnptr_glCoverFillPathInstancedNV;
void __glintercept_glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) {
  __glintercept_fnptr_glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  __glintercept_log(" - glCoverFillPathInstancedNV(numPaths: %ld, pathNameType: %ld (%s), paths: %ld, pathBase: %ld, coverMode: %ld (%s), transformType: %ld (%s), transformValues: %ld)", numPaths, pathNameType, __gl_intercept_formatenum(pathNameType), paths, pathBase, coverMode, __gl_intercept_formatenum(coverMode), transformType, __gl_intercept_formatenum(transformType), transformValues);
}

typedef void(*__ctype_glCoverFillPathNV)(GLuint, GLenum);
static __ctype_glCoverFillPathNV __glintercept_fnptr_glCoverFillPathNV;
void __glintercept_glCoverFillPathNV(GLuint path, GLenum coverMode) {
  __glintercept_fnptr_glCoverFillPathNV(path, coverMode);
  __glintercept_log(" - glCoverFillPathNV(path: %ld, coverMode: %ld (%s))", path, coverMode, __gl_intercept_formatenum(coverMode));
}

typedef void(*__ctype_glCoverStrokePathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLenum, const GLfloat *);
static __ctype_glCoverStrokePathInstancedNV __glintercept_fnptr_glCoverStrokePathInstancedNV;
void __glintercept_glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) {
  __glintercept_fnptr_glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  __glintercept_log(" - glCoverStrokePathInstancedNV(numPaths: %ld, pathNameType: %ld (%s), paths: %ld, pathBase: %ld, coverMode: %ld (%s), transformType: %ld (%s), transformValues: %ld)", numPaths, pathNameType, __gl_intercept_formatenum(pathNameType), paths, pathBase, coverMode, __gl_intercept_formatenum(coverMode), transformType, __gl_intercept_formatenum(transformType), transformValues);
}

typedef void(*__ctype_glCoverStrokePathNV)(GLuint, GLenum);
static __ctype_glCoverStrokePathNV __glintercept_fnptr_glCoverStrokePathNV;
void __glintercept_glCoverStrokePathNV(GLuint path, GLenum coverMode) {
  __glintercept_fnptr_glCoverStrokePathNV(path, coverMode);
  __glintercept_log(" - glCoverStrokePathNV(path: %ld, coverMode: %ld (%s))", path, coverMode, __gl_intercept_formatenum(coverMode));
}

typedef void(*__ctype_glCoverageMaskNV)(GLboolean);
static __ctype_glCoverageMaskNV __glintercept_fnptr_glCoverageMaskNV;
void __glintercept_glCoverageMaskNV(GLboolean mask) {
  __glintercept_fnptr_glCoverageMaskNV(mask);
  __glintercept_log(" - glCoverageMaskNV(mask: %ld)", mask);
}

typedef void(*__ctype_glCoverageModulationNV)(GLenum);
static __ctype_glCoverageModulationNV __glintercept_fnptr_glCoverageModulationNV;
void __glintercept_glCoverageModulationNV(GLenum components) {
  __glintercept_fnptr_glCoverageModulationNV(components);
  __glintercept_log(" - glCoverageModulationNV(components: %ld (%s))", components, __gl_intercept_formatenum(components));
}

typedef void(*__ctype_glCoverageModulationTableNV)(GLsizei, const GLfloat *);
static __ctype_glCoverageModulationTableNV __glintercept_fnptr_glCoverageModulationTableNV;
void __glintercept_glCoverageModulationTableNV(GLsizei n, const GLfloat * v) {
  __glintercept_fnptr_glCoverageModulationTableNV(n, v);
  __glintercept_log(" - glCoverageModulationTableNV(n: %ld, v: %ld)", n, v);
}

typedef void(*__ctype_glCoverageOperationNV)(GLenum);
static __ctype_glCoverageOperationNV __glintercept_fnptr_glCoverageOperationNV;
void __glintercept_glCoverageOperationNV(GLenum operation) {
  __glintercept_fnptr_glCoverageOperationNV(operation);
  __glintercept_log(" - glCoverageOperationNV(operation: %ld (%s))", operation, __gl_intercept_formatenum(operation));
}

typedef void(*__ctype_glCreateBuffers)(GLsizei, GLuint *);
static __ctype_glCreateBuffers __glintercept_fnptr_glCreateBuffers;
void __glintercept_glCreateBuffers(GLsizei n, GLuint * buffers) {
  __glintercept_fnptr_glCreateBuffers(n, buffers);
  __glintercept_log(" - glCreateBuffers(n: %ld, buffers: %ld)", n, buffers);
}

typedef void(*__ctype_glCreateCommandListsNV)(GLsizei, GLuint *);
static __ctype_glCreateCommandListsNV __glintercept_fnptr_glCreateCommandListsNV;
void __glintercept_glCreateCommandListsNV(GLsizei n, GLuint * lists) {
  __glintercept_fnptr_glCreateCommandListsNV(n, lists);
  __glintercept_log(" - glCreateCommandListsNV(n: %ld, lists: %ld)", n, lists);
}

typedef void(*__ctype_glCreateFramebuffers)(GLsizei, GLuint *);
static __ctype_glCreateFramebuffers __glintercept_fnptr_glCreateFramebuffers;
void __glintercept_glCreateFramebuffers(GLsizei n, GLuint * framebuffers) {
  __glintercept_fnptr_glCreateFramebuffers(n, framebuffers);
  __glintercept_log(" - glCreateFramebuffers(n: %ld, framebuffers: %ld)", n, framebuffers);
}

typedef void(*__ctype_glCreateMemoryObjectsEXT)(GLsizei, GLuint *);
static __ctype_glCreateMemoryObjectsEXT __glintercept_fnptr_glCreateMemoryObjectsEXT;
void __glintercept_glCreateMemoryObjectsEXT(GLsizei n, GLuint * memoryObjects) {
  __glintercept_fnptr_glCreateMemoryObjectsEXT(n, memoryObjects);
  __glintercept_log(" - glCreateMemoryObjectsEXT(n: %ld, memoryObjects: %ld)", n, memoryObjects);
}

typedef void(*__ctype_glCreatePerfQueryINTEL)(GLuint, GLuint *);
static __ctype_glCreatePerfQueryINTEL __glintercept_fnptr_glCreatePerfQueryINTEL;
void __glintercept_glCreatePerfQueryINTEL(GLuint queryId, GLuint * queryHandle) {
  __glintercept_fnptr_glCreatePerfQueryINTEL(queryId, queryHandle);
  __glintercept_log(" - glCreatePerfQueryINTEL(queryId: %ld, queryHandle: %ld)", queryId, queryHandle);
}

typedef GLuint(*__ctype_glCreateProgram)();
static __ctype_glCreateProgram __glintercept_fnptr_glCreateProgram;
GLuint __glintercept_glCreateProgram() {
  GLuint __ret = __glintercept_fnptr_glCreateProgram();
  __glintercept_log(" - glCreateProgram() -> %ld", __ret);
  return __ret;
}

typedef GLhandleARB(*__ctype_glCreateProgramObjectARB)();
static __ctype_glCreateProgramObjectARB __glintercept_fnptr_glCreateProgramObjectARB;
GLhandleARB __glintercept_glCreateProgramObjectARB() {
  GLhandleARB __ret = __glintercept_fnptr_glCreateProgramObjectARB();
  __glintercept_log(" - glCreateProgramObjectARB() -> %ld", __ret);
  return __ret;
}

typedef void(*__ctype_glCreateProgramPipelines)(GLsizei, GLuint *);
static __ctype_glCreateProgramPipelines __glintercept_fnptr_glCreateProgramPipelines;
void __glintercept_glCreateProgramPipelines(GLsizei n, GLuint * pipelines) {
  __glintercept_fnptr_glCreateProgramPipelines(n, pipelines);
  __glintercept_log(" - glCreateProgramPipelines(n: %ld, pipelines: %ld)", n, pipelines);
}

typedef GLuint(*__ctype_glCreateProgressFenceNVX)();
static __ctype_glCreateProgressFenceNVX __glintercept_fnptr_glCreateProgressFenceNVX;
GLuint __glintercept_glCreateProgressFenceNVX() {
  GLuint __ret = __glintercept_fnptr_glCreateProgressFenceNVX();
  __glintercept_log(" - glCreateProgressFenceNVX() -> %ld", __ret);
  return __ret;
}

typedef void(*__ctype_glCreateQueries)(GLenum, GLsizei, GLuint *);
static __ctype_glCreateQueries __glintercept_fnptr_glCreateQueries;
void __glintercept_glCreateQueries(GLenum target, GLsizei n, GLuint * ids) {
  __glintercept_fnptr_glCreateQueries(target, n, ids);
  __glintercept_log(" - glCreateQueries(target: %ld (%s), n: %ld, ids: %ld)", target, __gl_intercept_formatenum(target), n, ids);
}

typedef void(*__ctype_glCreateRenderbuffers)(GLsizei, GLuint *);
static __ctype_glCreateRenderbuffers __glintercept_fnptr_glCreateRenderbuffers;
void __glintercept_glCreateRenderbuffers(GLsizei n, GLuint * renderbuffers) {
  __glintercept_fnptr_glCreateRenderbuffers(n, renderbuffers);
  __glintercept_log(" - glCreateRenderbuffers(n: %ld, renderbuffers: %ld)", n, renderbuffers);
}

typedef void(*__ctype_glCreateSamplers)(GLsizei, GLuint *);
static __ctype_glCreateSamplers __glintercept_fnptr_glCreateSamplers;
void __glintercept_glCreateSamplers(GLsizei n, GLuint * samplers) {
  __glintercept_fnptr_glCreateSamplers(n, samplers);
  __glintercept_log(" - glCreateSamplers(n: %ld, samplers: %ld)", n, samplers);
}

typedef void(*__ctype_glCreateSemaphoresNV)(GLsizei, GLuint *);
static __ctype_glCreateSemaphoresNV __glintercept_fnptr_glCreateSemaphoresNV;
void __glintercept_glCreateSemaphoresNV(GLsizei n, GLuint * semaphores) {
  __glintercept_fnptr_glCreateSemaphoresNV(n, semaphores);
  __glintercept_log(" - glCreateSemaphoresNV(n: %ld, semaphores: %ld)", n, semaphores);
}

typedef GLuint(*__ctype_glCreateShader)(GLenum);
static __ctype_glCreateShader __glintercept_fnptr_glCreateShader;
GLuint __glintercept_glCreateShader(GLenum type) {
  GLuint __ret = __glintercept_fnptr_glCreateShader(type);
  __glintercept_log(" - glCreateShader(type: %ld (%s)) -> %ld", type, __gl_intercept_formatenum(type), __ret);
  return __ret;
}

typedef GLhandleARB(*__ctype_glCreateShaderObjectARB)(GLenum);
static __ctype_glCreateShaderObjectARB __glintercept_fnptr_glCreateShaderObjectARB;
GLhandleARB __glintercept_glCreateShaderObjectARB(GLenum shaderType) {
  GLhandleARB __ret = __glintercept_fnptr_glCreateShaderObjectARB(shaderType);
  __glintercept_log(" - glCreateShaderObjectARB(shaderType: %ld (%s)) -> %ld", shaderType, __gl_intercept_formatenum(shaderType), __ret);
  return __ret;
}

typedef GLuint(*__ctype_glCreateShaderProgramEXT)(GLenum, const GLchar *);
static __ctype_glCreateShaderProgramEXT __glintercept_fnptr_glCreateShaderProgramEXT;
GLuint __glintercept_glCreateShaderProgramEXT(GLenum type, const GLchar * string) {
  GLuint __ret = __glintercept_fnptr_glCreateShaderProgramEXT(type, string);
  __glintercept_log(" - glCreateShaderProgramEXT(type: %ld (%s), string: %ld) -> %ld", type, __gl_intercept_formatenum(type), string, __ret);
  return __ret;
}

typedef GLuint(*__ctype_glCreateShaderProgramv)(GLenum, GLsizei, const GLchar *const*);
static __ctype_glCreateShaderProgramv __glintercept_fnptr_glCreateShaderProgramv;
GLuint __glintercept_glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const* strings) {
  GLuint __ret = __glintercept_fnptr_glCreateShaderProgramv(type, count, strings);
  __glintercept_log(" - glCreateShaderProgramv(type: %ld (%s), count: %ld, strings: %ld) -> %ld", type, __gl_intercept_formatenum(type), count, strings, __ret);
  return __ret;
}

typedef GLuint(*__ctype_glCreateShaderProgramvEXT)(GLenum, GLsizei, const GLchar **);
static __ctype_glCreateShaderProgramvEXT __glintercept_fnptr_glCreateShaderProgramvEXT;
GLuint __glintercept_glCreateShaderProgramvEXT(GLenum type, GLsizei count, const GLchar ** strings) {
  GLuint __ret = __glintercept_fnptr_glCreateShaderProgramvEXT(type, count, strings);
  __glintercept_log(" - glCreateShaderProgramvEXT(type: %ld (%s), count: %ld, strings: %ld) -> %ld", type, __gl_intercept_formatenum(type), count, strings, __ret);
  return __ret;
}

typedef void(*__ctype_glCreateStatesNV)(GLsizei, GLuint *);
static __ctype_glCreateStatesNV __glintercept_fnptr_glCreateStatesNV;
void __glintercept_glCreateStatesNV(GLsizei n, GLuint * states) {
  __glintercept_fnptr_glCreateStatesNV(n, states);
  __glintercept_log(" - glCreateStatesNV(n: %ld, states: %ld)", n, states);
}

typedef GLsync(*__ctype_glCreateSyncFromCLeventARB)(struct _cl_context *, struct _cl_event *, GLbitfield);
static __ctype_glCreateSyncFromCLeventARB __glintercept_fnptr_glCreateSyncFromCLeventARB;
GLsync __glintercept_glCreateSyncFromCLeventARB(struct _cl_context * context, struct _cl_event * event, GLbitfield flags) {
  GLsync __ret = __glintercept_fnptr_glCreateSyncFromCLeventARB(context, event, flags);
  __glintercept_log(" - glCreateSyncFromCLeventARB(context: %ld, event: %ld, flags: %ld) -> %ld", context, event, flags, __ret);
  return __ret;
}

typedef void(*__ctype_glCreateTextures)(GLenum, GLsizei, GLuint *);
static __ctype_glCreateTextures __glintercept_fnptr_glCreateTextures;
void __glintercept_glCreateTextures(GLenum target, GLsizei n, GLuint * textures) {
  __glintercept_fnptr_glCreateTextures(target, n, textures);
  __glintercept_log(" - glCreateTextures(target: %ld (%s), n: %ld, textures: %ld)", target, __gl_intercept_formatenum(target), n, textures);
}

typedef void(*__ctype_glCreateTransformFeedbacks)(GLsizei, GLuint *);
static __ctype_glCreateTransformFeedbacks __glintercept_fnptr_glCreateTransformFeedbacks;
void __glintercept_glCreateTransformFeedbacks(GLsizei n, GLuint * ids) {
  __glintercept_fnptr_glCreateTransformFeedbacks(n, ids);
  __glintercept_log(" - glCreateTransformFeedbacks(n: %ld, ids: %ld)", n, ids);
}

typedef void(*__ctype_glCreateVertexArrays)(GLsizei, GLuint *);
static __ctype_glCreateVertexArrays __glintercept_fnptr_glCreateVertexArrays;
void __glintercept_glCreateVertexArrays(GLsizei n, GLuint * arrays) {
  __glintercept_fnptr_glCreateVertexArrays(n, arrays);
  __glintercept_log(" - glCreateVertexArrays(n: %ld, arrays: %ld)", n, arrays);
}

typedef void(*__ctype_glCullFace)(GLenum);
static __ctype_glCullFace __glintercept_fnptr_glCullFace;
void __glintercept_glCullFace(GLenum mode) {
  __glintercept_fnptr_glCullFace(mode);
  __glintercept_log(" - glCullFace(mode: %ld (%s))", mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glCullParameterdvEXT)(GLenum, GLdouble *);
static __ctype_glCullParameterdvEXT __glintercept_fnptr_glCullParameterdvEXT;
void __glintercept_glCullParameterdvEXT(GLenum pname, GLdouble * params) {
  __glintercept_fnptr_glCullParameterdvEXT(pname, params);
  __glintercept_log(" - glCullParameterdvEXT(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glCullParameterfvEXT)(GLenum, GLfloat *);
static __ctype_glCullParameterfvEXT __glintercept_fnptr_glCullParameterfvEXT;
void __glintercept_glCullParameterfvEXT(GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glCullParameterfvEXT(pname, params);
  __glintercept_log(" - glCullParameterfvEXT(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glCurrentPaletteMatrixARB)(GLint);
static __ctype_glCurrentPaletteMatrixARB __glintercept_fnptr_glCurrentPaletteMatrixARB;
void __glintercept_glCurrentPaletteMatrixARB(GLint index) {
  __glintercept_fnptr_glCurrentPaletteMatrixARB(index);
  __glintercept_log(" - glCurrentPaletteMatrixARB(index: %ld)", index);
}

typedef void(*__ctype_glCurrentPaletteMatrixOES)(GLuint);
static __ctype_glCurrentPaletteMatrixOES __glintercept_fnptr_glCurrentPaletteMatrixOES;
void __glintercept_glCurrentPaletteMatrixOES(GLuint matrixpaletteindex) {
  __glintercept_fnptr_glCurrentPaletteMatrixOES(matrixpaletteindex);
  __glintercept_log(" - glCurrentPaletteMatrixOES(matrixpaletteindex: %ld)", matrixpaletteindex);
}

typedef void(*__ctype_glDebugMessageCallback)(GLDEBUGPROC, const void *);
static __ctype_glDebugMessageCallback __glintercept_fnptr_glDebugMessageCallback;
void __glintercept_glDebugMessageCallback(GLDEBUGPROC callback, const void * userParam) {
  __glintercept_fnptr_glDebugMessageCallback(callback, userParam);
  __glintercept_log(" - glDebugMessageCallback(callback: %ld, userParam: %ld)", callback, userParam);
}

typedef void(*__ctype_glDebugMessageCallbackAMD)(GLDEBUGPROCAMD, void *);
static __ctype_glDebugMessageCallbackAMD __glintercept_fnptr_glDebugMessageCallbackAMD;
void __glintercept_glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, void * userParam) {
  __glintercept_fnptr_glDebugMessageCallbackAMD(callback, userParam);
  __glintercept_log(" - glDebugMessageCallbackAMD(callback: %ld, userParam: %ld)", callback, userParam);
}

typedef void(*__ctype_glDebugMessageCallbackARB)(GLDEBUGPROCARB, const void *);
static __ctype_glDebugMessageCallbackARB __glintercept_fnptr_glDebugMessageCallbackARB;
void __glintercept_glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const void * userParam) {
  __glintercept_fnptr_glDebugMessageCallbackARB(callback, userParam);
  __glintercept_log(" - glDebugMessageCallbackARB(callback: %ld, userParam: %ld)", callback, userParam);
}

typedef void(*__ctype_glDebugMessageCallbackKHR)(GLDEBUGPROCKHR, const void *);
static __ctype_glDebugMessageCallbackKHR __glintercept_fnptr_glDebugMessageCallbackKHR;
void __glintercept_glDebugMessageCallbackKHR(GLDEBUGPROCKHR callback, const void * userParam) {
  __glintercept_fnptr_glDebugMessageCallbackKHR(callback, userParam);
  __glintercept_log(" - glDebugMessageCallbackKHR(callback: %ld, userParam: %ld)", callback, userParam);
}

typedef void(*__ctype_glDebugMessageControl)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
static __ctype_glDebugMessageControl __glintercept_fnptr_glDebugMessageControl;
void __glintercept_glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) {
  __glintercept_fnptr_glDebugMessageControl(source, type, severity, count, ids, enabled);
  __glintercept_log(" - glDebugMessageControl(source: %ld (%s), type: %ld (%s), severity: %ld (%s), count: %ld, ids: %ld, enabled: %ld)", source, __gl_intercept_formatenum(source), type, __gl_intercept_formatenum(type), severity, __gl_intercept_formatenum(severity), count, ids, enabled);
}

typedef void(*__ctype_glDebugMessageControlARB)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
static __ctype_glDebugMessageControlARB __glintercept_fnptr_glDebugMessageControlARB;
void __glintercept_glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) {
  __glintercept_fnptr_glDebugMessageControlARB(source, type, severity, count, ids, enabled);
  __glintercept_log(" - glDebugMessageControlARB(source: %ld (%s), type: %ld (%s), severity: %ld (%s), count: %ld, ids: %ld, enabled: %ld)", source, __gl_intercept_formatenum(source), type, __gl_intercept_formatenum(type), severity, __gl_intercept_formatenum(severity), count, ids, enabled);
}

typedef void(*__ctype_glDebugMessageControlKHR)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
static __ctype_glDebugMessageControlKHR __glintercept_fnptr_glDebugMessageControlKHR;
void __glintercept_glDebugMessageControlKHR(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) {
  __glintercept_fnptr_glDebugMessageControlKHR(source, type, severity, count, ids, enabled);
  __glintercept_log(" - glDebugMessageControlKHR(source: %ld (%s), type: %ld (%s), severity: %ld (%s), count: %ld, ids: %ld, enabled: %ld)", source, __gl_intercept_formatenum(source), type, __gl_intercept_formatenum(type), severity, __gl_intercept_formatenum(severity), count, ids, enabled);
}

typedef void(*__ctype_glDebugMessageEnableAMD)(GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
static __ctype_glDebugMessageEnableAMD __glintercept_fnptr_glDebugMessageEnableAMD;
void __glintercept_glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) {
  __glintercept_fnptr_glDebugMessageEnableAMD(category, severity, count, ids, enabled);
  __glintercept_log(" - glDebugMessageEnableAMD(category: %ld (%s), severity: %ld (%s), count: %ld, ids: %ld, enabled: %ld)", category, __gl_intercept_formatenum(category), severity, __gl_intercept_formatenum(severity), count, ids, enabled);
}

typedef void(*__ctype_glDebugMessageInsert)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *);
static __ctype_glDebugMessageInsert __glintercept_fnptr_glDebugMessageInsert;
void __glintercept_glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) {
  __glintercept_fnptr_glDebugMessageInsert(source, type, id, severity, length, buf);
  __glintercept_log(" - glDebugMessageInsert(source: %ld (%s), type: %ld (%s), id: %ld, severity: %ld (%s), length: %ld, buf: %ld)", source, __gl_intercept_formatenum(source), type, __gl_intercept_formatenum(type), id, severity, __gl_intercept_formatenum(severity), length, buf);
}

typedef void(*__ctype_glDebugMessageInsertAMD)(GLenum, GLenum, GLuint, GLsizei, const GLchar *);
static __ctype_glDebugMessageInsertAMD __glintercept_fnptr_glDebugMessageInsertAMD;
void __glintercept_glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar * buf) {
  __glintercept_fnptr_glDebugMessageInsertAMD(category, severity, id, length, buf);
  __glintercept_log(" - glDebugMessageInsertAMD(category: %ld (%s), severity: %ld (%s), id: %ld, length: %ld, buf: %ld)", category, __gl_intercept_formatenum(category), severity, __gl_intercept_formatenum(severity), id, length, buf);
}

typedef void(*__ctype_glDebugMessageInsertARB)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *);
static __ctype_glDebugMessageInsertARB __glintercept_fnptr_glDebugMessageInsertARB;
void __glintercept_glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) {
  __glintercept_fnptr_glDebugMessageInsertARB(source, type, id, severity, length, buf);
  __glintercept_log(" - glDebugMessageInsertARB(source: %ld (%s), type: %ld (%s), id: %ld, severity: %ld (%s), length: %ld, buf: %ld)", source, __gl_intercept_formatenum(source), type, __gl_intercept_formatenum(type), id, severity, __gl_intercept_formatenum(severity), length, buf);
}

typedef void(*__ctype_glDebugMessageInsertKHR)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *);
static __ctype_glDebugMessageInsertKHR __glintercept_fnptr_glDebugMessageInsertKHR;
void __glintercept_glDebugMessageInsertKHR(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) {
  __glintercept_fnptr_glDebugMessageInsertKHR(source, type, id, severity, length, buf);
  __glintercept_log(" - glDebugMessageInsertKHR(source: %ld (%s), type: %ld (%s), id: %ld, severity: %ld (%s), length: %ld, buf: %ld)", source, __gl_intercept_formatenum(source), type, __gl_intercept_formatenum(type), id, severity, __gl_intercept_formatenum(severity), length, buf);
}

typedef void(*__ctype_glDeformSGIX)(GLbitfield);
static __ctype_glDeformSGIX __glintercept_fnptr_glDeformSGIX;
void __glintercept_glDeformSGIX(GLbitfield mask) {
  __glintercept_fnptr_glDeformSGIX(mask);
  __glintercept_log(" - glDeformSGIX(mask: %ld)", mask);
}

typedef void(*__ctype_glDeformationMap3dSGIX)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
static __ctype_glDeformationMap3dSGIX __glintercept_fnptr_glDeformationMap3dSGIX;
void __glintercept_glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble * points) {
  __glintercept_fnptr_glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
  __glintercept_log(" - glDeformationMap3dSGIX(target: %ld (%s), u1: %ld, u2: %ld, ustride: %ld, uorder: %ld, v1: %ld, v2: %ld, vstride: %ld, vorder: %ld, w1: %ld, w2: %ld, wstride: %ld, worder: %ld, points: %ld)", target, __gl_intercept_formatenum(target), u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
}

typedef void(*__ctype_glDeformationMap3fSGIX)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
static __ctype_glDeformationMap3fSGIX __glintercept_fnptr_glDeformationMap3fSGIX;
void __glintercept_glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat * points) {
  __glintercept_fnptr_glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
  __glintercept_log(" - glDeformationMap3fSGIX(target: %ld (%s), u1: %ld, u2: %ld, ustride: %ld, uorder: %ld, v1: %ld, v2: %ld, vstride: %ld, vorder: %ld, w1: %ld, w2: %ld, wstride: %ld, worder: %ld, points: %ld)", target, __gl_intercept_formatenum(target), u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
}

typedef void(*__ctype_glDeleteAsyncMarkersSGIX)(GLuint, GLsizei);
static __ctype_glDeleteAsyncMarkersSGIX __glintercept_fnptr_glDeleteAsyncMarkersSGIX;
void __glintercept_glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range) {
  __glintercept_fnptr_glDeleteAsyncMarkersSGIX(marker, range);
  __glintercept_log(" - glDeleteAsyncMarkersSGIX(marker: %ld, range: %ld)", marker, range);
}

typedef void(*__ctype_glDeleteBuffers)(GLsizei, const GLuint *);
static __ctype_glDeleteBuffers __glintercept_fnptr_glDeleteBuffers;
void __glintercept_glDeleteBuffers(GLsizei n, const GLuint * buffers) {
  __glintercept_fnptr_glDeleteBuffers(n, buffers);
  __glintercept_log(" - glDeleteBuffers(n: %ld, buffers: %ld)", n, buffers);
}

typedef void(*__ctype_glDeleteBuffersARB)(GLsizei, const GLuint *);
static __ctype_glDeleteBuffersARB __glintercept_fnptr_glDeleteBuffersARB;
void __glintercept_glDeleteBuffersARB(GLsizei n, const GLuint * buffers) {
  __glintercept_fnptr_glDeleteBuffersARB(n, buffers);
  __glintercept_log(" - glDeleteBuffersARB(n: %ld, buffers: %ld)", n, buffers);
}

typedef void(*__ctype_glDeleteCommandListsNV)(GLsizei, const GLuint *);
static __ctype_glDeleteCommandListsNV __glintercept_fnptr_glDeleteCommandListsNV;
void __glintercept_glDeleteCommandListsNV(GLsizei n, const GLuint * lists) {
  __glintercept_fnptr_glDeleteCommandListsNV(n, lists);
  __glintercept_log(" - glDeleteCommandListsNV(n: %ld, lists: %ld)", n, lists);
}

typedef void(*__ctype_glDeleteFencesAPPLE)(GLsizei, const GLuint *);
static __ctype_glDeleteFencesAPPLE __glintercept_fnptr_glDeleteFencesAPPLE;
void __glintercept_glDeleteFencesAPPLE(GLsizei n, const GLuint * fences) {
  __glintercept_fnptr_glDeleteFencesAPPLE(n, fences);
  __glintercept_log(" - glDeleteFencesAPPLE(n: %ld, fences: %ld)", n, fences);
}

typedef void(*__ctype_glDeleteFencesNV)(GLsizei, const GLuint *);
static __ctype_glDeleteFencesNV __glintercept_fnptr_glDeleteFencesNV;
void __glintercept_glDeleteFencesNV(GLsizei n, const GLuint * fences) {
  __glintercept_fnptr_glDeleteFencesNV(n, fences);
  __glintercept_log(" - glDeleteFencesNV(n: %ld, fences: %ld)", n, fences);
}

typedef void(*__ctype_glDeleteFragmentShaderATI)(GLuint);
static __ctype_glDeleteFragmentShaderATI __glintercept_fnptr_glDeleteFragmentShaderATI;
void __glintercept_glDeleteFragmentShaderATI(GLuint id) {
  __glintercept_fnptr_glDeleteFragmentShaderATI(id);
  __glintercept_log(" - glDeleteFragmentShaderATI(id: %ld)", id);
}

typedef void(*__ctype_glDeleteFramebuffers)(GLsizei, const GLuint *);
static __ctype_glDeleteFramebuffers __glintercept_fnptr_glDeleteFramebuffers;
void __glintercept_glDeleteFramebuffers(GLsizei n, const GLuint * framebuffers) {
  __glintercept_fnptr_glDeleteFramebuffers(n, framebuffers);
  __glintercept_log(" - glDeleteFramebuffers(n: %ld, framebuffers: %ld)", n, framebuffers);
}

typedef void(*__ctype_glDeleteFramebuffersEXT)(GLsizei, const GLuint *);
static __ctype_glDeleteFramebuffersEXT __glintercept_fnptr_glDeleteFramebuffersEXT;
void __glintercept_glDeleteFramebuffersEXT(GLsizei n, const GLuint * framebuffers) {
  __glintercept_fnptr_glDeleteFramebuffersEXT(n, framebuffers);
  __glintercept_log(" - glDeleteFramebuffersEXT(n: %ld, framebuffers: %ld)", n, framebuffers);
}

typedef void(*__ctype_glDeleteFramebuffersOES)(GLsizei, const GLuint *);
static __ctype_glDeleteFramebuffersOES __glintercept_fnptr_glDeleteFramebuffersOES;
void __glintercept_glDeleteFramebuffersOES(GLsizei n, const GLuint * framebuffers) {
  __glintercept_fnptr_glDeleteFramebuffersOES(n, framebuffers);
  __glintercept_log(" - glDeleteFramebuffersOES(n: %ld, framebuffers: %ld)", n, framebuffers);
}

typedef void(*__ctype_glDeleteLists)(GLuint, GLsizei);
static __ctype_glDeleteLists __glintercept_fnptr_glDeleteLists;
void __glintercept_glDeleteLists(GLuint list, GLsizei range) {
  __glintercept_fnptr_glDeleteLists(list, range);
  __glintercept_log(" - glDeleteLists(list: %ld, range: %ld)", list, range);
}

typedef void(*__ctype_glDeleteMemoryObjectsEXT)(GLsizei, const GLuint *);
static __ctype_glDeleteMemoryObjectsEXT __glintercept_fnptr_glDeleteMemoryObjectsEXT;
void __glintercept_glDeleteMemoryObjectsEXT(GLsizei n, const GLuint * memoryObjects) {
  __glintercept_fnptr_glDeleteMemoryObjectsEXT(n, memoryObjects);
  __glintercept_log(" - glDeleteMemoryObjectsEXT(n: %ld, memoryObjects: %ld)", n, memoryObjects);
}

typedef void(*__ctype_glDeleteNamedStringARB)(GLint, const GLchar *);
static __ctype_glDeleteNamedStringARB __glintercept_fnptr_glDeleteNamedStringARB;
void __glintercept_glDeleteNamedStringARB(GLint namelen, const GLchar * name) {
  __glintercept_fnptr_glDeleteNamedStringARB(namelen, name);
  __glintercept_log(" - glDeleteNamedStringARB(namelen: %ld, name: %ld)", namelen, name);
}

typedef void(*__ctype_glDeleteNamesAMD)(GLenum, GLuint, const GLuint *);
static __ctype_glDeleteNamesAMD __glintercept_fnptr_glDeleteNamesAMD;
void __glintercept_glDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint * names) {
  __glintercept_fnptr_glDeleteNamesAMD(identifier, num, names);
  __glintercept_log(" - glDeleteNamesAMD(identifier: %ld (%s), num: %ld, names: %ld)", identifier, __gl_intercept_formatenum(identifier), num, names);
}

typedef void(*__ctype_glDeleteObjectARB)(GLhandleARB);
static __ctype_glDeleteObjectARB __glintercept_fnptr_glDeleteObjectARB;
void __glintercept_glDeleteObjectARB(GLhandleARB obj) {
  __glintercept_fnptr_glDeleteObjectARB(obj);
  __glintercept_log(" - glDeleteObjectARB(obj: %ld)", obj);
}

typedef void(*__ctype_glDeleteOcclusionQueriesNV)(GLsizei, const GLuint *);
static __ctype_glDeleteOcclusionQueriesNV __glintercept_fnptr_glDeleteOcclusionQueriesNV;
void __glintercept_glDeleteOcclusionQueriesNV(GLsizei n, const GLuint * ids) {
  __glintercept_fnptr_glDeleteOcclusionQueriesNV(n, ids);
  __glintercept_log(" - glDeleteOcclusionQueriesNV(n: %ld, ids: %ld)", n, ids);
}

typedef void(*__ctype_glDeletePathsNV)(GLuint, GLsizei);
static __ctype_glDeletePathsNV __glintercept_fnptr_glDeletePathsNV;
void __glintercept_glDeletePathsNV(GLuint path, GLsizei range) {
  __glintercept_fnptr_glDeletePathsNV(path, range);
  __glintercept_log(" - glDeletePathsNV(path: %ld, range: %ld)", path, range);
}

typedef void(*__ctype_glDeletePerfMonitorsAMD)(GLsizei, GLuint *);
static __ctype_glDeletePerfMonitorsAMD __glintercept_fnptr_glDeletePerfMonitorsAMD;
void __glintercept_glDeletePerfMonitorsAMD(GLsizei n, GLuint * monitors) {
  __glintercept_fnptr_glDeletePerfMonitorsAMD(n, monitors);
  __glintercept_log(" - glDeletePerfMonitorsAMD(n: %ld, monitors: %ld)", n, monitors);
}

typedef void(*__ctype_glDeletePerfQueryINTEL)(GLuint);
static __ctype_glDeletePerfQueryINTEL __glintercept_fnptr_glDeletePerfQueryINTEL;
void __glintercept_glDeletePerfQueryINTEL(GLuint queryHandle) {
  __glintercept_fnptr_glDeletePerfQueryINTEL(queryHandle);
  __glintercept_log(" - glDeletePerfQueryINTEL(queryHandle: %ld)", queryHandle);
}

typedef void(*__ctype_glDeleteProgram)(GLuint);
static __ctype_glDeleteProgram __glintercept_fnptr_glDeleteProgram;
void __glintercept_glDeleteProgram(GLuint program) {
  __glintercept_fnptr_glDeleteProgram(program);
  __glintercept_log(" - glDeleteProgram(program: %ld)", program);
}

typedef void(*__ctype_glDeleteProgramPipelines)(GLsizei, const GLuint *);
static __ctype_glDeleteProgramPipelines __glintercept_fnptr_glDeleteProgramPipelines;
void __glintercept_glDeleteProgramPipelines(GLsizei n, const GLuint * pipelines) {
  __glintercept_fnptr_glDeleteProgramPipelines(n, pipelines);
  __glintercept_log(" - glDeleteProgramPipelines(n: %ld, pipelines: %ld)", n, pipelines);
}

typedef void(*__ctype_glDeleteProgramPipelinesEXT)(GLsizei, const GLuint *);
static __ctype_glDeleteProgramPipelinesEXT __glintercept_fnptr_glDeleteProgramPipelinesEXT;
void __glintercept_glDeleteProgramPipelinesEXT(GLsizei n, const GLuint * pipelines) {
  __glintercept_fnptr_glDeleteProgramPipelinesEXT(n, pipelines);
  __glintercept_log(" - glDeleteProgramPipelinesEXT(n: %ld, pipelines: %ld)", n, pipelines);
}

typedef void(*__ctype_glDeleteProgramsARB)(GLsizei, const GLuint *);
static __ctype_glDeleteProgramsARB __glintercept_fnptr_glDeleteProgramsARB;
void __glintercept_glDeleteProgramsARB(GLsizei n, const GLuint * programs) {
  __glintercept_fnptr_glDeleteProgramsARB(n, programs);
  __glintercept_log(" - glDeleteProgramsARB(n: %ld, programs: %ld)", n, programs);
}

typedef void(*__ctype_glDeleteProgramsNV)(GLsizei, const GLuint *);
static __ctype_glDeleteProgramsNV __glintercept_fnptr_glDeleteProgramsNV;
void __glintercept_glDeleteProgramsNV(GLsizei n, const GLuint * programs) {
  __glintercept_fnptr_glDeleteProgramsNV(n, programs);
  __glintercept_log(" - glDeleteProgramsNV(n: %ld, programs: %ld)", n, programs);
}

typedef void(*__ctype_glDeleteQueries)(GLsizei, const GLuint *);
static __ctype_glDeleteQueries __glintercept_fnptr_glDeleteQueries;
void __glintercept_glDeleteQueries(GLsizei n, const GLuint * ids) {
  __glintercept_fnptr_glDeleteQueries(n, ids);
  __glintercept_log(" - glDeleteQueries(n: %ld, ids: %ld)", n, ids);
}

typedef void(*__ctype_glDeleteQueriesARB)(GLsizei, const GLuint *);
static __ctype_glDeleteQueriesARB __glintercept_fnptr_glDeleteQueriesARB;
void __glintercept_glDeleteQueriesARB(GLsizei n, const GLuint * ids) {
  __glintercept_fnptr_glDeleteQueriesARB(n, ids);
  __glintercept_log(" - glDeleteQueriesARB(n: %ld, ids: %ld)", n, ids);
}

typedef void(*__ctype_glDeleteQueriesEXT)(GLsizei, const GLuint *);
static __ctype_glDeleteQueriesEXT __glintercept_fnptr_glDeleteQueriesEXT;
void __glintercept_glDeleteQueriesEXT(GLsizei n, const GLuint * ids) {
  __glintercept_fnptr_glDeleteQueriesEXT(n, ids);
  __glintercept_log(" - glDeleteQueriesEXT(n: %ld, ids: %ld)", n, ids);
}

typedef void(*__ctype_glDeleteQueryResourceTagNV)(GLsizei, const GLint *);
static __ctype_glDeleteQueryResourceTagNV __glintercept_fnptr_glDeleteQueryResourceTagNV;
void __glintercept_glDeleteQueryResourceTagNV(GLsizei n, const GLint * tagIds) {
  __glintercept_fnptr_glDeleteQueryResourceTagNV(n, tagIds);
  __glintercept_log(" - glDeleteQueryResourceTagNV(n: %ld, tagIds: %ld)", n, tagIds);
}

typedef void(*__ctype_glDeleteRenderbuffers)(GLsizei, const GLuint *);
static __ctype_glDeleteRenderbuffers __glintercept_fnptr_glDeleteRenderbuffers;
void __glintercept_glDeleteRenderbuffers(GLsizei n, const GLuint * renderbuffers) {
  __glintercept_fnptr_glDeleteRenderbuffers(n, renderbuffers);
  __glintercept_log(" - glDeleteRenderbuffers(n: %ld, renderbuffers: %ld)", n, renderbuffers);
}

typedef void(*__ctype_glDeleteRenderbuffersEXT)(GLsizei, const GLuint *);
static __ctype_glDeleteRenderbuffersEXT __glintercept_fnptr_glDeleteRenderbuffersEXT;
void __glintercept_glDeleteRenderbuffersEXT(GLsizei n, const GLuint * renderbuffers) {
  __glintercept_fnptr_glDeleteRenderbuffersEXT(n, renderbuffers);
  __glintercept_log(" - glDeleteRenderbuffersEXT(n: %ld, renderbuffers: %ld)", n, renderbuffers);
}

typedef void(*__ctype_glDeleteRenderbuffersOES)(GLsizei, const GLuint *);
static __ctype_glDeleteRenderbuffersOES __glintercept_fnptr_glDeleteRenderbuffersOES;
void __glintercept_glDeleteRenderbuffersOES(GLsizei n, const GLuint * renderbuffers) {
  __glintercept_fnptr_glDeleteRenderbuffersOES(n, renderbuffers);
  __glintercept_log(" - glDeleteRenderbuffersOES(n: %ld, renderbuffers: %ld)", n, renderbuffers);
}

typedef void(*__ctype_glDeleteSamplers)(GLsizei, const GLuint *);
static __ctype_glDeleteSamplers __glintercept_fnptr_glDeleteSamplers;
void __glintercept_glDeleteSamplers(GLsizei count, const GLuint * samplers) {
  __glintercept_fnptr_glDeleteSamplers(count, samplers);
  __glintercept_log(" - glDeleteSamplers(count: %ld, samplers: %ld)", count, samplers);
}

typedef void(*__ctype_glDeleteSemaphoresEXT)(GLsizei, const GLuint *);
static __ctype_glDeleteSemaphoresEXT __glintercept_fnptr_glDeleteSemaphoresEXT;
void __glintercept_glDeleteSemaphoresEXT(GLsizei n, const GLuint * semaphores) {
  __glintercept_fnptr_glDeleteSemaphoresEXT(n, semaphores);
  __glintercept_log(" - glDeleteSemaphoresEXT(n: %ld, semaphores: %ld)", n, semaphores);
}

typedef void(*__ctype_glDeleteShader)(GLuint);
static __ctype_glDeleteShader __glintercept_fnptr_glDeleteShader;
void __glintercept_glDeleteShader(GLuint shader) {
  __glintercept_fnptr_glDeleteShader(shader);
  __glintercept_log(" - glDeleteShader(shader: %ld)", shader);
}

typedef void(*__ctype_glDeleteStatesNV)(GLsizei, const GLuint *);
static __ctype_glDeleteStatesNV __glintercept_fnptr_glDeleteStatesNV;
void __glintercept_glDeleteStatesNV(GLsizei n, const GLuint * states) {
  __glintercept_fnptr_glDeleteStatesNV(n, states);
  __glintercept_log(" - glDeleteStatesNV(n: %ld, states: %ld)", n, states);
}

typedef void(*__ctype_glDeleteSync)(GLsync);
static __ctype_glDeleteSync __glintercept_fnptr_glDeleteSync;
void __glintercept_glDeleteSync(GLsync sync) {
  __glintercept_fnptr_glDeleteSync(sync);
  __glintercept_log(" - glDeleteSync(sync: %ld)", sync);
}

typedef void(*__ctype_glDeleteSyncAPPLE)(GLsync);
static __ctype_glDeleteSyncAPPLE __glintercept_fnptr_glDeleteSyncAPPLE;
void __glintercept_glDeleteSyncAPPLE(GLsync sync) {
  __glintercept_fnptr_glDeleteSyncAPPLE(sync);
  __glintercept_log(" - glDeleteSyncAPPLE(sync: %ld)", sync);
}

typedef void(*__ctype_glDeleteTextures)(GLsizei, const GLuint *);
static __ctype_glDeleteTextures __glintercept_fnptr_glDeleteTextures;
void __glintercept_glDeleteTextures(GLsizei n, const GLuint * textures) {
  __glintercept_fnptr_glDeleteTextures(n, textures);
  __glintercept_log(" - glDeleteTextures(n: %ld, textures: %ld)", n, textures);
}

typedef void(*__ctype_glDeleteTexturesEXT)(GLsizei, const GLuint *);
static __ctype_glDeleteTexturesEXT __glintercept_fnptr_glDeleteTexturesEXT;
void __glintercept_glDeleteTexturesEXT(GLsizei n, const GLuint * textures) {
  __glintercept_fnptr_glDeleteTexturesEXT(n, textures);
  __glintercept_log(" - glDeleteTexturesEXT(n: %ld, textures: %ld)", n, textures);
}

typedef void(*__ctype_glDeleteTransformFeedbacks)(GLsizei, const GLuint *);
static __ctype_glDeleteTransformFeedbacks __glintercept_fnptr_glDeleteTransformFeedbacks;
void __glintercept_glDeleteTransformFeedbacks(GLsizei n, const GLuint * ids) {
  __glintercept_fnptr_glDeleteTransformFeedbacks(n, ids);
  __glintercept_log(" - glDeleteTransformFeedbacks(n: %ld, ids: %ld)", n, ids);
}

typedef void(*__ctype_glDeleteTransformFeedbacksNV)(GLsizei, const GLuint *);
static __ctype_glDeleteTransformFeedbacksNV __glintercept_fnptr_glDeleteTransformFeedbacksNV;
void __glintercept_glDeleteTransformFeedbacksNV(GLsizei n, const GLuint * ids) {
  __glintercept_fnptr_glDeleteTransformFeedbacksNV(n, ids);
  __glintercept_log(" - glDeleteTransformFeedbacksNV(n: %ld, ids: %ld)", n, ids);
}

typedef void(*__ctype_glDeleteVertexArrays)(GLsizei, const GLuint *);
static __ctype_glDeleteVertexArrays __glintercept_fnptr_glDeleteVertexArrays;
void __glintercept_glDeleteVertexArrays(GLsizei n, const GLuint * arrays) {
  __glintercept_fnptr_glDeleteVertexArrays(n, arrays);
  __glintercept_log(" - glDeleteVertexArrays(n: %ld, arrays: %ld)", n, arrays);
}

typedef void(*__ctype_glDeleteVertexArraysAPPLE)(GLsizei, const GLuint *);
static __ctype_glDeleteVertexArraysAPPLE __glintercept_fnptr_glDeleteVertexArraysAPPLE;
void __glintercept_glDeleteVertexArraysAPPLE(GLsizei n, const GLuint * arrays) {
  __glintercept_fnptr_glDeleteVertexArraysAPPLE(n, arrays);
  __glintercept_log(" - glDeleteVertexArraysAPPLE(n: %ld, arrays: %ld)", n, arrays);
}

typedef void(*__ctype_glDeleteVertexArraysOES)(GLsizei, const GLuint *);
static __ctype_glDeleteVertexArraysOES __glintercept_fnptr_glDeleteVertexArraysOES;
void __glintercept_glDeleteVertexArraysOES(GLsizei n, const GLuint * arrays) {
  __glintercept_fnptr_glDeleteVertexArraysOES(n, arrays);
  __glintercept_log(" - glDeleteVertexArraysOES(n: %ld, arrays: %ld)", n, arrays);
}

typedef void(*__ctype_glDeleteVertexShaderEXT)(GLuint);
static __ctype_glDeleteVertexShaderEXT __glintercept_fnptr_glDeleteVertexShaderEXT;
void __glintercept_glDeleteVertexShaderEXT(GLuint id) {
  __glintercept_fnptr_glDeleteVertexShaderEXT(id);
  __glintercept_log(" - glDeleteVertexShaderEXT(id: %ld)", id);
}

typedef void(*__ctype_glDepthBoundsEXT)(GLclampd, GLclampd);
static __ctype_glDepthBoundsEXT __glintercept_fnptr_glDepthBoundsEXT;
void __glintercept_glDepthBoundsEXT(GLclampd zmin, GLclampd zmax) {
  __glintercept_fnptr_glDepthBoundsEXT(zmin, zmax);
  __glintercept_log(" - glDepthBoundsEXT(zmin: %ld, zmax: %ld)", zmin, zmax);
}

typedef void(*__ctype_glDepthBoundsdNV)(GLdouble, GLdouble);
static __ctype_glDepthBoundsdNV __glintercept_fnptr_glDepthBoundsdNV;
void __glintercept_glDepthBoundsdNV(GLdouble zmin, GLdouble zmax) {
  __glintercept_fnptr_glDepthBoundsdNV(zmin, zmax);
  __glintercept_log(" - glDepthBoundsdNV(zmin: %ld, zmax: %ld)", zmin, zmax);
}

typedef void(*__ctype_glDepthFunc)(GLenum);
static __ctype_glDepthFunc __glintercept_fnptr_glDepthFunc;
void __glintercept_glDepthFunc(GLenum func) {
  __glintercept_fnptr_glDepthFunc(func);
  __glintercept_log(" - glDepthFunc(func: %ld (%s))", func, __gl_intercept_formatenum(func));
}

typedef void(*__ctype_glDepthMask)(GLboolean);
static __ctype_glDepthMask __glintercept_fnptr_glDepthMask;
void __glintercept_glDepthMask(GLboolean flag) {
  __glintercept_fnptr_glDepthMask(flag);
  __glintercept_log(" - glDepthMask(flag: %ld)", flag);
}

typedef void(*__ctype_glDepthRange)(GLdouble, GLdouble);
static __ctype_glDepthRange __glintercept_fnptr_glDepthRange;
void __glintercept_glDepthRange(GLdouble n, GLdouble f) {
  __glintercept_fnptr_glDepthRange(n, f);
  __glintercept_log(" - glDepthRange(n: %ld, f: %ld)", n, f);
}

typedef void(*__ctype_glDepthRangeArraydvNV)(GLuint, GLsizei, const GLdouble *);
static __ctype_glDepthRangeArraydvNV __glintercept_fnptr_glDepthRangeArraydvNV;
void __glintercept_glDepthRangeArraydvNV(GLuint first, GLsizei count, const GLdouble * v) {
  __glintercept_fnptr_glDepthRangeArraydvNV(first, count, v);
  __glintercept_log(" - glDepthRangeArraydvNV(first: %ld, count: %ld, v: %ld)", first, count, v);
}

typedef void(*__ctype_glDepthRangeArrayfvNV)(GLuint, GLsizei, const GLfloat *);
static __ctype_glDepthRangeArrayfvNV __glintercept_fnptr_glDepthRangeArrayfvNV;
void __glintercept_glDepthRangeArrayfvNV(GLuint first, GLsizei count, const GLfloat * v) {
  __glintercept_fnptr_glDepthRangeArrayfvNV(first, count, v);
  __glintercept_log(" - glDepthRangeArrayfvNV(first: %ld, count: %ld, v: %ld)", first, count, v);
}

typedef void(*__ctype_glDepthRangeArrayfvOES)(GLuint, GLsizei, const GLfloat *);
static __ctype_glDepthRangeArrayfvOES __glintercept_fnptr_glDepthRangeArrayfvOES;
void __glintercept_glDepthRangeArrayfvOES(GLuint first, GLsizei count, const GLfloat * v) {
  __glintercept_fnptr_glDepthRangeArrayfvOES(first, count, v);
  __glintercept_log(" - glDepthRangeArrayfvOES(first: %ld, count: %ld, v: %ld)", first, count, v);
}

typedef void(*__ctype_glDepthRangeArrayv)(GLuint, GLsizei, const GLdouble *);
static __ctype_glDepthRangeArrayv __glintercept_fnptr_glDepthRangeArrayv;
void __glintercept_glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble * v) {
  __glintercept_fnptr_glDepthRangeArrayv(first, count, v);
  __glintercept_log(" - glDepthRangeArrayv(first: %ld, count: %ld, v: %ld)", first, count, v);
}

typedef void(*__ctype_glDepthRangeIndexed)(GLuint, GLdouble, GLdouble);
static __ctype_glDepthRangeIndexed __glintercept_fnptr_glDepthRangeIndexed;
void __glintercept_glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f) {
  __glintercept_fnptr_glDepthRangeIndexed(index, n, f);
  __glintercept_log(" - glDepthRangeIndexed(index: %ld, n: %ld, f: %ld)", index, n, f);
}

typedef void(*__ctype_glDepthRangeIndexeddNV)(GLuint, GLdouble, GLdouble);
static __ctype_glDepthRangeIndexeddNV __glintercept_fnptr_glDepthRangeIndexeddNV;
void __glintercept_glDepthRangeIndexeddNV(GLuint index, GLdouble n, GLdouble f) {
  __glintercept_fnptr_glDepthRangeIndexeddNV(index, n, f);
  __glintercept_log(" - glDepthRangeIndexeddNV(index: %ld, n: %ld, f: %ld)", index, n, f);
}

typedef void(*__ctype_glDepthRangeIndexedfNV)(GLuint, GLfloat, GLfloat);
static __ctype_glDepthRangeIndexedfNV __glintercept_fnptr_glDepthRangeIndexedfNV;
void __glintercept_glDepthRangeIndexedfNV(GLuint index, GLfloat n, GLfloat f) {
  __glintercept_fnptr_glDepthRangeIndexedfNV(index, n, f);
  __glintercept_log(" - glDepthRangeIndexedfNV(index: %ld, n: %ld, f: %ld)", index, n, f);
}

typedef void(*__ctype_glDepthRangeIndexedfOES)(GLuint, GLfloat, GLfloat);
static __ctype_glDepthRangeIndexedfOES __glintercept_fnptr_glDepthRangeIndexedfOES;
void __glintercept_glDepthRangeIndexedfOES(GLuint index, GLfloat n, GLfloat f) {
  __glintercept_fnptr_glDepthRangeIndexedfOES(index, n, f);
  __glintercept_log(" - glDepthRangeIndexedfOES(index: %ld, n: %ld, f: %ld)", index, n, f);
}

typedef void(*__ctype_glDepthRangedNV)(GLdouble, GLdouble);
static __ctype_glDepthRangedNV __glintercept_fnptr_glDepthRangedNV;
void __glintercept_glDepthRangedNV(GLdouble zNear, GLdouble zFar) {
  __glintercept_fnptr_glDepthRangedNV(zNear, zFar);
  __glintercept_log(" - glDepthRangedNV(zNear: %ld, zFar: %ld)", zNear, zFar);
}

typedef void(*__ctype_glDepthRangef)(GLfloat, GLfloat);
static __ctype_glDepthRangef __glintercept_fnptr_glDepthRangef;
void __glintercept_glDepthRangef(GLfloat n, GLfloat f) {
  __glintercept_fnptr_glDepthRangef(n, f);
  __glintercept_log(" - glDepthRangef(n: %ld, f: %ld)", n, f);
}

typedef void(*__ctype_glDepthRangefOES)(GLclampf, GLclampf);
static __ctype_glDepthRangefOES __glintercept_fnptr_glDepthRangefOES;
void __glintercept_glDepthRangefOES(GLclampf n, GLclampf f) {
  __glintercept_fnptr_glDepthRangefOES(n, f);
  __glintercept_log(" - glDepthRangefOES(n: %ld, f: %ld)", n, f);
}

typedef void(*__ctype_glDepthRangex)(GLfixed, GLfixed);
static __ctype_glDepthRangex __glintercept_fnptr_glDepthRangex;
void __glintercept_glDepthRangex(GLfixed n, GLfixed f) {
  __glintercept_fnptr_glDepthRangex(n, f);
  __glintercept_log(" - glDepthRangex(n: %ld, f: %ld)", n, f);
}

typedef void(*__ctype_glDepthRangexOES)(GLfixed, GLfixed);
static __ctype_glDepthRangexOES __glintercept_fnptr_glDepthRangexOES;
void __glintercept_glDepthRangexOES(GLfixed n, GLfixed f) {
  __glintercept_fnptr_glDepthRangexOES(n, f);
  __glintercept_log(" - glDepthRangexOES(n: %ld, f: %ld)", n, f);
}

typedef void(*__ctype_glDetachObjectARB)(GLhandleARB, GLhandleARB);
static __ctype_glDetachObjectARB __glintercept_fnptr_glDetachObjectARB;
void __glintercept_glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj) {
  __glintercept_fnptr_glDetachObjectARB(containerObj, attachedObj);
  __glintercept_log(" - glDetachObjectARB(containerObj: %ld, attachedObj: %ld)", containerObj, attachedObj);
}

typedef void(*__ctype_glDetachShader)(GLuint, GLuint);
static __ctype_glDetachShader __glintercept_fnptr_glDetachShader;
void __glintercept_glDetachShader(GLuint program, GLuint shader) {
  __glintercept_fnptr_glDetachShader(program, shader);
  __glintercept_log(" - glDetachShader(program: %ld, shader: %ld)", program, shader);
}

typedef void(*__ctype_glDetailTexFuncSGIS)(GLenum, GLsizei, const GLfloat *);
static __ctype_glDetailTexFuncSGIS __glintercept_fnptr_glDetailTexFuncSGIS;
void __glintercept_glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat * points) {
  __glintercept_fnptr_glDetailTexFuncSGIS(target, n, points);
  __glintercept_log(" - glDetailTexFuncSGIS(target: %ld (%s), n: %ld, points: %ld)", target, __gl_intercept_formatenum(target), n, points);
}

typedef void(*__ctype_glDisable)(GLenum);
static __ctype_glDisable __glintercept_fnptr_glDisable;
void __glintercept_glDisable(GLenum cap) {
  __glintercept_fnptr_glDisable(cap);
  __glintercept_log(" - glDisable(cap: %ld (%s))", cap, __gl_intercept_formatenum(cap));
}

typedef void(*__ctype_glDisableClientState)(GLenum);
static __ctype_glDisableClientState __glintercept_fnptr_glDisableClientState;
void __glintercept_glDisableClientState(GLenum array) {
  __glintercept_fnptr_glDisableClientState(array);
  __glintercept_log(" - glDisableClientState(array: %ld (%s))", array, __gl_intercept_formatenum(array));
}

typedef void(*__ctype_glDisableClientStateIndexedEXT)(GLenum, GLuint);
static __ctype_glDisableClientStateIndexedEXT __glintercept_fnptr_glDisableClientStateIndexedEXT;
void __glintercept_glDisableClientStateIndexedEXT(GLenum array, GLuint index) {
  __glintercept_fnptr_glDisableClientStateIndexedEXT(array, index);
  __glintercept_log(" - glDisableClientStateIndexedEXT(array: %ld (%s), index: %ld)", array, __gl_intercept_formatenum(array), index);
}

typedef void(*__ctype_glDisableClientStateiEXT)(GLenum, GLuint);
static __ctype_glDisableClientStateiEXT __glintercept_fnptr_glDisableClientStateiEXT;
void __glintercept_glDisableClientStateiEXT(GLenum array, GLuint index) {
  __glintercept_fnptr_glDisableClientStateiEXT(array, index);
  __glintercept_log(" - glDisableClientStateiEXT(array: %ld (%s), index: %ld)", array, __gl_intercept_formatenum(array), index);
}

typedef void(*__ctype_glDisableDriverControlQCOM)(GLuint);
static __ctype_glDisableDriverControlQCOM __glintercept_fnptr_glDisableDriverControlQCOM;
void __glintercept_glDisableDriverControlQCOM(GLuint driverControl) {
  __glintercept_fnptr_glDisableDriverControlQCOM(driverControl);
  __glintercept_log(" - glDisableDriverControlQCOM(driverControl: %ld)", driverControl);
}

typedef void(*__ctype_glDisableIndexedEXT)(GLenum, GLuint);
static __ctype_glDisableIndexedEXT __glintercept_fnptr_glDisableIndexedEXT;
void __glintercept_glDisableIndexedEXT(GLenum target, GLuint index) {
  __glintercept_fnptr_glDisableIndexedEXT(target, index);
  __glintercept_log(" - glDisableIndexedEXT(target: %ld (%s), index: %ld)", target, __gl_intercept_formatenum(target), index);
}

typedef void(*__ctype_glDisableVariantClientStateEXT)(GLuint);
static __ctype_glDisableVariantClientStateEXT __glintercept_fnptr_glDisableVariantClientStateEXT;
void __glintercept_glDisableVariantClientStateEXT(GLuint id) {
  __glintercept_fnptr_glDisableVariantClientStateEXT(id);
  __glintercept_log(" - glDisableVariantClientStateEXT(id: %ld)", id);
}

typedef void(*__ctype_glDisableVertexArrayAttrib)(GLuint, GLuint);
static __ctype_glDisableVertexArrayAttrib __glintercept_fnptr_glDisableVertexArrayAttrib;
void __glintercept_glDisableVertexArrayAttrib(GLuint vaobj, GLuint index) {
  __glintercept_fnptr_glDisableVertexArrayAttrib(vaobj, index);
  __glintercept_log(" - glDisableVertexArrayAttrib(vaobj: %ld, index: %ld)", vaobj, index);
}

typedef void(*__ctype_glDisableVertexArrayAttribEXT)(GLuint, GLuint);
static __ctype_glDisableVertexArrayAttribEXT __glintercept_fnptr_glDisableVertexArrayAttribEXT;
void __glintercept_glDisableVertexArrayAttribEXT(GLuint vaobj, GLuint index) {
  __glintercept_fnptr_glDisableVertexArrayAttribEXT(vaobj, index);
  __glintercept_log(" - glDisableVertexArrayAttribEXT(vaobj: %ld, index: %ld)", vaobj, index);
}

typedef void(*__ctype_glDisableVertexArrayEXT)(GLuint, GLenum);
static __ctype_glDisableVertexArrayEXT __glintercept_fnptr_glDisableVertexArrayEXT;
void __glintercept_glDisableVertexArrayEXT(GLuint vaobj, GLenum array) {
  __glintercept_fnptr_glDisableVertexArrayEXT(vaobj, array);
  __glintercept_log(" - glDisableVertexArrayEXT(vaobj: %ld, array: %ld (%s))", vaobj, array, __gl_intercept_formatenum(array));
}

typedef void(*__ctype_glDisableVertexAttribAPPLE)(GLuint, GLenum);
static __ctype_glDisableVertexAttribAPPLE __glintercept_fnptr_glDisableVertexAttribAPPLE;
void __glintercept_glDisableVertexAttribAPPLE(GLuint index, GLenum pname) {
  __glintercept_fnptr_glDisableVertexAttribAPPLE(index, pname);
  __glintercept_log(" - glDisableVertexAttribAPPLE(index: %ld, pname: %ld (%s))", index, pname, __gl_intercept_formatenum(pname));
}

typedef void(*__ctype_glDisableVertexAttribArray)(GLuint);
static __ctype_glDisableVertexAttribArray __glintercept_fnptr_glDisableVertexAttribArray;
void __glintercept_glDisableVertexAttribArray(GLuint index) {
  __glintercept_fnptr_glDisableVertexAttribArray(index);
  __glintercept_log(" - glDisableVertexAttribArray(index: %ld)", index);
}

typedef void(*__ctype_glDisableVertexAttribArrayARB)(GLuint);
static __ctype_glDisableVertexAttribArrayARB __glintercept_fnptr_glDisableVertexAttribArrayARB;
void __glintercept_glDisableVertexAttribArrayARB(GLuint index) {
  __glintercept_fnptr_glDisableVertexAttribArrayARB(index);
  __glintercept_log(" - glDisableVertexAttribArrayARB(index: %ld)", index);
}

typedef void(*__ctype_glDisablei)(GLenum, GLuint);
static __ctype_glDisablei __glintercept_fnptr_glDisablei;
void __glintercept_glDisablei(GLenum target, GLuint index) {
  __glintercept_fnptr_glDisablei(target, index);
  __glintercept_log(" - glDisablei(target: %ld (%s), index: %ld)", target, __gl_intercept_formatenum(target), index);
}

typedef void(*__ctype_glDisableiEXT)(GLenum, GLuint);
static __ctype_glDisableiEXT __glintercept_fnptr_glDisableiEXT;
void __glintercept_glDisableiEXT(GLenum target, GLuint index) {
  __glintercept_fnptr_glDisableiEXT(target, index);
  __glintercept_log(" - glDisableiEXT(target: %ld (%s), index: %ld)", target, __gl_intercept_formatenum(target), index);
}

typedef void(*__ctype_glDisableiNV)(GLenum, GLuint);
static __ctype_glDisableiNV __glintercept_fnptr_glDisableiNV;
void __glintercept_glDisableiNV(GLenum target, GLuint index) {
  __glintercept_fnptr_glDisableiNV(target, index);
  __glintercept_log(" - glDisableiNV(target: %ld (%s), index: %ld)", target, __gl_intercept_formatenum(target), index);
}

typedef void(*__ctype_glDisableiOES)(GLenum, GLuint);
static __ctype_glDisableiOES __glintercept_fnptr_glDisableiOES;
void __glintercept_glDisableiOES(GLenum target, GLuint index) {
  __glintercept_fnptr_glDisableiOES(target, index);
  __glintercept_log(" - glDisableiOES(target: %ld (%s), index: %ld)", target, __gl_intercept_formatenum(target), index);
}

typedef void(*__ctype_glDiscardFramebufferEXT)(GLenum, GLsizei, const GLenum *);
static __ctype_glDiscardFramebufferEXT __glintercept_fnptr_glDiscardFramebufferEXT;
void __glintercept_glDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum * attachments) {
  __glintercept_fnptr_glDiscardFramebufferEXT(target, numAttachments, attachments);
  __glintercept_log(" - glDiscardFramebufferEXT(target: %ld (%s), numAttachments: %ld, attachments: %ld)", target, __gl_intercept_formatenum(target), numAttachments, attachments);
}

typedef void(*__ctype_glDispatchCompute)(GLuint, GLuint, GLuint);
static __ctype_glDispatchCompute __glintercept_fnptr_glDispatchCompute;
void __glintercept_glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) {
  __glintercept_fnptr_glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
  __glintercept_log(" - glDispatchCompute(num_groups_x: %ld, num_groups_y: %ld, num_groups_z: %ld)", num_groups_x, num_groups_y, num_groups_z);
}

typedef void(*__ctype_glDispatchComputeGroupSizeARB)(GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
static __ctype_glDispatchComputeGroupSizeARB __glintercept_fnptr_glDispatchComputeGroupSizeARB;
void __glintercept_glDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) {
  __glintercept_fnptr_glDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
  __glintercept_log(" - glDispatchComputeGroupSizeARB(num_groups_x: %ld, num_groups_y: %ld, num_groups_z: %ld, group_size_x: %ld, group_size_y: %ld, group_size_z: %ld)", num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
}

typedef void(*__ctype_glDispatchComputeIndirect)(GLintptr);
static __ctype_glDispatchComputeIndirect __glintercept_fnptr_glDispatchComputeIndirect;
void __glintercept_glDispatchComputeIndirect(GLintptr indirect) {
  __glintercept_fnptr_glDispatchComputeIndirect(indirect);
  __glintercept_log(" - glDispatchComputeIndirect(indirect: %ld)", indirect);
}

typedef void(*__ctype_glDrawArrays)(GLenum, GLint, GLsizei);
static __ctype_glDrawArrays __glintercept_fnptr_glDrawArrays;
void __glintercept_glDrawArrays(GLenum mode, GLint first, GLsizei count) {
  __glintercept_fnptr_glDrawArrays(mode, first, count);
  __glintercept_log(" - glDrawArrays(mode: %ld (%s), first: %ld, count: %ld)", mode, __gl_intercept_formatenum(mode), first, count);
}

typedef void(*__ctype_glDrawArraysEXT)(GLenum, GLint, GLsizei);
static __ctype_glDrawArraysEXT __glintercept_fnptr_glDrawArraysEXT;
void __glintercept_glDrawArraysEXT(GLenum mode, GLint first, GLsizei count) {
  __glintercept_fnptr_glDrawArraysEXT(mode, first, count);
  __glintercept_log(" - glDrawArraysEXT(mode: %ld (%s), first: %ld, count: %ld)", mode, __gl_intercept_formatenum(mode), first, count);
}

typedef void(*__ctype_glDrawArraysIndirect)(GLenum, const void *);
static __ctype_glDrawArraysIndirect __glintercept_fnptr_glDrawArraysIndirect;
void __glintercept_glDrawArraysIndirect(GLenum mode, const void * indirect) {
  __glintercept_fnptr_glDrawArraysIndirect(mode, indirect);
  __glintercept_log(" - glDrawArraysIndirect(mode: %ld (%s), indirect: %ld)", mode, __gl_intercept_formatenum(mode), indirect);
}

typedef void(*__ctype_glDrawArraysInstanced)(GLenum, GLint, GLsizei, GLsizei);
static __ctype_glDrawArraysInstanced __glintercept_fnptr_glDrawArraysInstanced;
void __glintercept_glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) {
  __glintercept_fnptr_glDrawArraysInstanced(mode, first, count, instancecount);
  __glintercept_log(" - glDrawArraysInstanced(mode: %ld (%s), first: %ld, count: %ld, instancecount: %ld)", mode, __gl_intercept_formatenum(mode), first, count, instancecount);
}

typedef void(*__ctype_glDrawArraysInstancedANGLE)(GLenum, GLint, GLsizei, GLsizei);
static __ctype_glDrawArraysInstancedANGLE __glintercept_fnptr_glDrawArraysInstancedANGLE;
void __glintercept_glDrawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount) {
  __glintercept_fnptr_glDrawArraysInstancedANGLE(mode, first, count, primcount);
  __glintercept_log(" - glDrawArraysInstancedANGLE(mode: %ld (%s), first: %ld, count: %ld, primcount: %ld)", mode, __gl_intercept_formatenum(mode), first, count, primcount);
}

typedef void(*__ctype_glDrawArraysInstancedARB)(GLenum, GLint, GLsizei, GLsizei);
static __ctype_glDrawArraysInstancedARB __glintercept_fnptr_glDrawArraysInstancedARB;
void __glintercept_glDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount) {
  __glintercept_fnptr_glDrawArraysInstancedARB(mode, first, count, primcount);
  __glintercept_log(" - glDrawArraysInstancedARB(mode: %ld (%s), first: %ld, count: %ld, primcount: %ld)", mode, __gl_intercept_formatenum(mode), first, count, primcount);
}

typedef void(*__ctype_glDrawArraysInstancedBaseInstance)(GLenum, GLint, GLsizei, GLsizei, GLuint);
static __ctype_glDrawArraysInstancedBaseInstance __glintercept_fnptr_glDrawArraysInstancedBaseInstance;
void __glintercept_glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) {
  __glintercept_fnptr_glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);
  __glintercept_log(" - glDrawArraysInstancedBaseInstance(mode: %ld (%s), first: %ld, count: %ld, instancecount: %ld, baseinstance: %ld)", mode, __gl_intercept_formatenum(mode), first, count, instancecount, baseinstance);
}

typedef void(*__ctype_glDrawArraysInstancedBaseInstanceEXT)(GLenum, GLint, GLsizei, GLsizei, GLuint);
static __ctype_glDrawArraysInstancedBaseInstanceEXT __glintercept_fnptr_glDrawArraysInstancedBaseInstanceEXT;
void __glintercept_glDrawArraysInstancedBaseInstanceEXT(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) {
  __glintercept_fnptr_glDrawArraysInstancedBaseInstanceEXT(mode, first, count, instancecount, baseinstance);
  __glintercept_log(" - glDrawArraysInstancedBaseInstanceEXT(mode: %ld (%s), first: %ld, count: %ld, instancecount: %ld, baseinstance: %ld)", mode, __gl_intercept_formatenum(mode), first, count, instancecount, baseinstance);
}

typedef void(*__ctype_glDrawArraysInstancedEXT)(GLenum, GLint, GLsizei, GLsizei);
static __ctype_glDrawArraysInstancedEXT __glintercept_fnptr_glDrawArraysInstancedEXT;
void __glintercept_glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount) {
  __glintercept_fnptr_glDrawArraysInstancedEXT(mode, start, count, primcount);
  __glintercept_log(" - glDrawArraysInstancedEXT(mode: %ld (%s), start: %ld, count: %ld, primcount: %ld)", mode, __gl_intercept_formatenum(mode), start, count, primcount);
}

typedef void(*__ctype_glDrawArraysInstancedNV)(GLenum, GLint, GLsizei, GLsizei);
static __ctype_glDrawArraysInstancedNV __glintercept_fnptr_glDrawArraysInstancedNV;
void __glintercept_glDrawArraysInstancedNV(GLenum mode, GLint first, GLsizei count, GLsizei primcount) {
  __glintercept_fnptr_glDrawArraysInstancedNV(mode, first, count, primcount);
  __glintercept_log(" - glDrawArraysInstancedNV(mode: %ld (%s), first: %ld, count: %ld, primcount: %ld)", mode, __gl_intercept_formatenum(mode), first, count, primcount);
}

typedef void(*__ctype_glDrawBuffer)(GLenum);
static __ctype_glDrawBuffer __glintercept_fnptr_glDrawBuffer;
void __glintercept_glDrawBuffer(GLenum buf) {
  __glintercept_fnptr_glDrawBuffer(buf);
  __glintercept_log(" - glDrawBuffer(buf: %ld (%s))", buf, __gl_intercept_formatenum(buf));
}

typedef void(*__ctype_glDrawBuffers)(GLsizei, const GLenum *);
static __ctype_glDrawBuffers __glintercept_fnptr_glDrawBuffers;
void __glintercept_glDrawBuffers(GLsizei n, const GLenum * bufs) {
  __glintercept_fnptr_glDrawBuffers(n, bufs);
  __glintercept_log(" - glDrawBuffers(n: %ld, bufs: %ld)", n, bufs);
}

typedef void(*__ctype_glDrawBuffersARB)(GLsizei, const GLenum *);
static __ctype_glDrawBuffersARB __glintercept_fnptr_glDrawBuffersARB;
void __glintercept_glDrawBuffersARB(GLsizei n, const GLenum * bufs) {
  __glintercept_fnptr_glDrawBuffersARB(n, bufs);
  __glintercept_log(" - glDrawBuffersARB(n: %ld, bufs: %ld)", n, bufs);
}

typedef void(*__ctype_glDrawBuffersATI)(GLsizei, const GLenum *);
static __ctype_glDrawBuffersATI __glintercept_fnptr_glDrawBuffersATI;
void __glintercept_glDrawBuffersATI(GLsizei n, const GLenum * bufs) {
  __glintercept_fnptr_glDrawBuffersATI(n, bufs);
  __glintercept_log(" - glDrawBuffersATI(n: %ld, bufs: %ld)", n, bufs);
}

typedef void(*__ctype_glDrawBuffersEXT)(GLsizei, const GLenum *);
static __ctype_glDrawBuffersEXT __glintercept_fnptr_glDrawBuffersEXT;
void __glintercept_glDrawBuffersEXT(GLsizei n, const GLenum * bufs) {
  __glintercept_fnptr_glDrawBuffersEXT(n, bufs);
  __glintercept_log(" - glDrawBuffersEXT(n: %ld, bufs: %ld)", n, bufs);
}

typedef void(*__ctype_glDrawBuffersIndexedEXT)(GLint, const GLenum *, const GLint *);
static __ctype_glDrawBuffersIndexedEXT __glintercept_fnptr_glDrawBuffersIndexedEXT;
void __glintercept_glDrawBuffersIndexedEXT(GLint n, const GLenum * location, const GLint * indices) {
  __glintercept_fnptr_glDrawBuffersIndexedEXT(n, location, indices);
  __glintercept_log(" - glDrawBuffersIndexedEXT(n: %ld, location: %ld, indices: %ld)", n, location, indices);
}

typedef void(*__ctype_glDrawBuffersNV)(GLsizei, const GLenum *);
static __ctype_glDrawBuffersNV __glintercept_fnptr_glDrawBuffersNV;
void __glintercept_glDrawBuffersNV(GLsizei n, const GLenum * bufs) {
  __glintercept_fnptr_glDrawBuffersNV(n, bufs);
  __glintercept_log(" - glDrawBuffersNV(n: %ld, bufs: %ld)", n, bufs);
}

typedef void(*__ctype_glDrawCommandsAddressNV)(GLenum, const GLuint64 *, const GLsizei *, GLuint);
static __ctype_glDrawCommandsAddressNV __glintercept_fnptr_glDrawCommandsAddressNV;
void __glintercept_glDrawCommandsAddressNV(GLenum primitiveMode, const GLuint64 * indirects, const GLsizei * sizes, GLuint count) {
  __glintercept_fnptr_glDrawCommandsAddressNV(primitiveMode, indirects, sizes, count);
  __glintercept_log(" - glDrawCommandsAddressNV(primitiveMode: %ld (%s), indirects: %ld, sizes: %ld, count: %ld)", primitiveMode, __gl_intercept_formatenum(primitiveMode), indirects, sizes, count);
}

typedef void(*__ctype_glDrawCommandsNV)(GLenum, GLuint, const GLintptr *, const GLsizei *, GLuint);
static __ctype_glDrawCommandsNV __glintercept_fnptr_glDrawCommandsNV;
void __glintercept_glDrawCommandsNV(GLenum primitiveMode, GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, GLuint count) {
  __glintercept_fnptr_glDrawCommandsNV(primitiveMode, buffer, indirects, sizes, count);
  __glintercept_log(" - glDrawCommandsNV(primitiveMode: %ld (%s), buffer: %ld, indirects: %ld, sizes: %ld, count: %ld)", primitiveMode, __gl_intercept_formatenum(primitiveMode), buffer, indirects, sizes, count);
}

typedef void(*__ctype_glDrawCommandsStatesAddressNV)(const GLuint64 *, const GLsizei *, const GLuint *, const GLuint *, GLuint);
static __ctype_glDrawCommandsStatesAddressNV __glintercept_fnptr_glDrawCommandsStatesAddressNV;
void __glintercept_glDrawCommandsStatesAddressNV(const GLuint64 * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) {
  __glintercept_fnptr_glDrawCommandsStatesAddressNV(indirects, sizes, states, fbos, count);
  __glintercept_log(" - glDrawCommandsStatesAddressNV(indirects: %ld, sizes: %ld, states: %ld, fbos: %ld, count: %ld)", indirects, sizes, states, fbos, count);
}

typedef void(*__ctype_glDrawCommandsStatesNV)(GLuint, const GLintptr *, const GLsizei *, const GLuint *, const GLuint *, GLuint);
static __ctype_glDrawCommandsStatesNV __glintercept_fnptr_glDrawCommandsStatesNV;
void __glintercept_glDrawCommandsStatesNV(GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) {
  __glintercept_fnptr_glDrawCommandsStatesNV(buffer, indirects, sizes, states, fbos, count);
  __glintercept_log(" - glDrawCommandsStatesNV(buffer: %ld, indirects: %ld, sizes: %ld, states: %ld, fbos: %ld, count: %ld)", buffer, indirects, sizes, states, fbos, count);
}

typedef void(*__ctype_glDrawElementArrayAPPLE)(GLenum, GLint, GLsizei);
static __ctype_glDrawElementArrayAPPLE __glintercept_fnptr_glDrawElementArrayAPPLE;
void __glintercept_glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count) {
  __glintercept_fnptr_glDrawElementArrayAPPLE(mode, first, count);
  __glintercept_log(" - glDrawElementArrayAPPLE(mode: %ld (%s), first: %ld, count: %ld)", mode, __gl_intercept_formatenum(mode), first, count);
}

typedef void(*__ctype_glDrawElementArrayATI)(GLenum, GLsizei);
static __ctype_glDrawElementArrayATI __glintercept_fnptr_glDrawElementArrayATI;
void __glintercept_glDrawElementArrayATI(GLenum mode, GLsizei count) {
  __glintercept_fnptr_glDrawElementArrayATI(mode, count);
  __glintercept_log(" - glDrawElementArrayATI(mode: %ld (%s), count: %ld)", mode, __gl_intercept_formatenum(mode), count);
}

typedef void(*__ctype_glDrawElements)(GLenum, GLsizei, GLenum, const void *);
static __ctype_glDrawElements __glintercept_fnptr_glDrawElements;
void __glintercept_glDrawElements(GLenum mode, GLsizei count, GLenum type, const void * indices) {
  __glintercept_fnptr_glDrawElements(mode, count, type, indices);
  __glintercept_log(" - glDrawElements(mode: %ld (%s), count: %ld, type: %ld (%s), indices: %ld)", mode, __gl_intercept_formatenum(mode), count, type, __gl_intercept_formatenum(type), indices);
}

typedef void(*__ctype_glDrawElementsBaseVertex)(GLenum, GLsizei, GLenum, const void *, GLint);
static __ctype_glDrawElementsBaseVertex __glintercept_fnptr_glDrawElementsBaseVertex;
void __glintercept_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) {
  __glintercept_fnptr_glDrawElementsBaseVertex(mode, count, type, indices, basevertex);
  __glintercept_log(" - glDrawElementsBaseVertex(mode: %ld (%s), count: %ld, type: %ld (%s), indices: %ld, basevertex: %ld)", mode, __gl_intercept_formatenum(mode), count, type, __gl_intercept_formatenum(type), indices, basevertex);
}

typedef void(*__ctype_glDrawElementsBaseVertexEXT)(GLenum, GLsizei, GLenum, const void *, GLint);
static __ctype_glDrawElementsBaseVertexEXT __glintercept_fnptr_glDrawElementsBaseVertexEXT;
void __glintercept_glDrawElementsBaseVertexEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) {
  __glintercept_fnptr_glDrawElementsBaseVertexEXT(mode, count, type, indices, basevertex);
  __glintercept_log(" - glDrawElementsBaseVertexEXT(mode: %ld (%s), count: %ld, type: %ld (%s), indices: %ld, basevertex: %ld)", mode, __gl_intercept_formatenum(mode), count, type, __gl_intercept_formatenum(type), indices, basevertex);
}

typedef void(*__ctype_glDrawElementsBaseVertexOES)(GLenum, GLsizei, GLenum, const void *, GLint);
static __ctype_glDrawElementsBaseVertexOES __glintercept_fnptr_glDrawElementsBaseVertexOES;
void __glintercept_glDrawElementsBaseVertexOES(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) {
  __glintercept_fnptr_glDrawElementsBaseVertexOES(mode, count, type, indices, basevertex);
  __glintercept_log(" - glDrawElementsBaseVertexOES(mode: %ld (%s), count: %ld, type: %ld (%s), indices: %ld, basevertex: %ld)", mode, __gl_intercept_formatenum(mode), count, type, __gl_intercept_formatenum(type), indices, basevertex);
}

typedef void(*__ctype_glDrawElementsIndirect)(GLenum, GLenum, const void *);
static __ctype_glDrawElementsIndirect __glintercept_fnptr_glDrawElementsIndirect;
void __glintercept_glDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect) {
  __glintercept_fnptr_glDrawElementsIndirect(mode, type, indirect);
  __glintercept_log(" - glDrawElementsIndirect(mode: %ld (%s), type: %ld (%s), indirect: %ld)", mode, __gl_intercept_formatenum(mode), type, __gl_intercept_formatenum(type), indirect);
}

typedef void(*__ctype_glDrawElementsInstanced)(GLenum, GLsizei, GLenum, const void *, GLsizei);
static __ctype_glDrawElementsInstanced __glintercept_fnptr_glDrawElementsInstanced;
void __glintercept_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount) {
  __glintercept_fnptr_glDrawElementsInstanced(mode, count, type, indices, instancecount);
  __glintercept_log(" - glDrawElementsInstanced(mode: %ld (%s), count: %ld, type: %ld (%s), indices: %ld, instancecount: %ld)", mode, __gl_intercept_formatenum(mode), count, type, __gl_intercept_formatenum(type), indices, instancecount);
}

typedef void(*__ctype_glDrawElementsInstancedANGLE)(GLenum, GLsizei, GLenum, const void *, GLsizei);
static __ctype_glDrawElementsInstancedANGLE __glintercept_fnptr_glDrawElementsInstancedANGLE;
void __glintercept_glDrawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) {
  __glintercept_fnptr_glDrawElementsInstancedANGLE(mode, count, type, indices, primcount);
  __glintercept_log(" - glDrawElementsInstancedANGLE(mode: %ld (%s), count: %ld, type: %ld (%s), indices: %ld, primcount: %ld)", mode, __gl_intercept_formatenum(mode), count, type, __gl_intercept_formatenum(type), indices, primcount);
}

typedef void(*__ctype_glDrawElementsInstancedARB)(GLenum, GLsizei, GLenum, const void *, GLsizei);
static __ctype_glDrawElementsInstancedARB __glintercept_fnptr_glDrawElementsInstancedARB;
void __glintercept_glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) {
  __glintercept_fnptr_glDrawElementsInstancedARB(mode, count, type, indices, primcount);
  __glintercept_log(" - glDrawElementsInstancedARB(mode: %ld (%s), count: %ld, type: %ld (%s), indices: %ld, primcount: %ld)", mode, __gl_intercept_formatenum(mode), count, type, __gl_intercept_formatenum(type), indices, primcount);
}

typedef void(*__ctype_glDrawElementsInstancedBaseInstance)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLuint);
static __ctype_glDrawElementsInstancedBaseInstance __glintercept_fnptr_glDrawElementsInstancedBaseInstance;
void __glintercept_glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance) {
  __glintercept_fnptr_glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);
  __glintercept_log(" - glDrawElementsInstancedBaseInstance(mode: %ld (%s), count: %ld, type: %ld (%s), indices: %ld, instancecount: %ld, baseinstance: %ld)", mode, __gl_intercept_formatenum(mode), count, type, __gl_intercept_formatenum(type), indices, instancecount, baseinstance);
}

typedef void(*__ctype_glDrawElementsInstancedBaseInstanceEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLuint);
static __ctype_glDrawElementsInstancedBaseInstanceEXT __glintercept_fnptr_glDrawElementsInstancedBaseInstanceEXT;
void __glintercept_glDrawElementsInstancedBaseInstanceEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance) {
  __glintercept_fnptr_glDrawElementsInstancedBaseInstanceEXT(mode, count, type, indices, instancecount, baseinstance);
  __glintercept_log(" - glDrawElementsInstancedBaseInstanceEXT(mode: %ld (%s), count: %ld, type: %ld (%s), indices: %ld, instancecount: %ld, baseinstance: %ld)", mode, __gl_intercept_formatenum(mode), count, type, __gl_intercept_formatenum(type), indices, instancecount, baseinstance);
}

typedef void(*__ctype_glDrawElementsInstancedBaseVertex)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint);
static __ctype_glDrawElementsInstancedBaseVertex __glintercept_fnptr_glDrawElementsInstancedBaseVertex;
void __glintercept_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) {
  __glintercept_fnptr_glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);
  __glintercept_log(" - glDrawElementsInstancedBaseVertex(mode: %ld (%s), count: %ld, type: %ld (%s), indices: %ld, instancecount: %ld, basevertex: %ld)", mode, __gl_intercept_formatenum(mode), count, type, __gl_intercept_formatenum(type), indices, instancecount, basevertex);
}

typedef void(*__ctype_glDrawElementsInstancedBaseVertexBaseInstance)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint, GLuint);
static __ctype_glDrawElementsInstancedBaseVertexBaseInstance __glintercept_fnptr_glDrawElementsInstancedBaseVertexBaseInstance;
void __glintercept_glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) {
  __glintercept_fnptr_glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);
  __glintercept_log(" - glDrawElementsInstancedBaseVertexBaseInstance(mode: %ld (%s), count: %ld, type: %ld (%s), indices: %ld, instancecount: %ld, basevertex: %ld, baseinstance: %ld)", mode, __gl_intercept_formatenum(mode), count, type, __gl_intercept_formatenum(type), indices, instancecount, basevertex, baseinstance);
}

typedef void(*__ctype_glDrawElementsInstancedBaseVertexBaseInstanceEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint, GLuint);
static __ctype_glDrawElementsInstancedBaseVertexBaseInstanceEXT __glintercept_fnptr_glDrawElementsInstancedBaseVertexBaseInstanceEXT;
void __glintercept_glDrawElementsInstancedBaseVertexBaseInstanceEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) {
  __glintercept_fnptr_glDrawElementsInstancedBaseVertexBaseInstanceEXT(mode, count, type, indices, instancecount, basevertex, baseinstance);
  __glintercept_log(" - glDrawElementsInstancedBaseVertexBaseInstanceEXT(mode: %ld (%s), count: %ld, type: %ld (%s), indices: %ld, instancecount: %ld, basevertex: %ld, baseinstance: %ld)", mode, __gl_intercept_formatenum(mode), count, type, __gl_intercept_formatenum(type), indices, instancecount, basevertex, baseinstance);
}

typedef void(*__ctype_glDrawElementsInstancedBaseVertexEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint);
static __ctype_glDrawElementsInstancedBaseVertexEXT __glintercept_fnptr_glDrawElementsInstancedBaseVertexEXT;
void __glintercept_glDrawElementsInstancedBaseVertexEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) {
  __glintercept_fnptr_glDrawElementsInstancedBaseVertexEXT(mode, count, type, indices, instancecount, basevertex);
  __glintercept_log(" - glDrawElementsInstancedBaseVertexEXT(mode: %ld (%s), count: %ld, type: %ld (%s), indices: %ld, instancecount: %ld, basevertex: %ld)", mode, __gl_intercept_formatenum(mode), count, type, __gl_intercept_formatenum(type), indices, instancecount, basevertex);
}

typedef void(*__ctype_glDrawElementsInstancedBaseVertexOES)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint);
static __ctype_glDrawElementsInstancedBaseVertexOES __glintercept_fnptr_glDrawElementsInstancedBaseVertexOES;
void __glintercept_glDrawElementsInstancedBaseVertexOES(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) {
  __glintercept_fnptr_glDrawElementsInstancedBaseVertexOES(mode, count, type, indices, instancecount, basevertex);
  __glintercept_log(" - glDrawElementsInstancedBaseVertexOES(mode: %ld (%s), count: %ld, type: %ld (%s), indices: %ld, instancecount: %ld, basevertex: %ld)", mode, __gl_intercept_formatenum(mode), count, type, __gl_intercept_formatenum(type), indices, instancecount, basevertex);
}

typedef void(*__ctype_glDrawElementsInstancedEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei);
static __ctype_glDrawElementsInstancedEXT __glintercept_fnptr_glDrawElementsInstancedEXT;
void __glintercept_glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) {
  __glintercept_fnptr_glDrawElementsInstancedEXT(mode, count, type, indices, primcount);
  __glintercept_log(" - glDrawElementsInstancedEXT(mode: %ld (%s), count: %ld, type: %ld (%s), indices: %ld, primcount: %ld)", mode, __gl_intercept_formatenum(mode), count, type, __gl_intercept_formatenum(type), indices, primcount);
}

typedef void(*__ctype_glDrawElementsInstancedNV)(GLenum, GLsizei, GLenum, const void *, GLsizei);
static __ctype_glDrawElementsInstancedNV __glintercept_fnptr_glDrawElementsInstancedNV;
void __glintercept_glDrawElementsInstancedNV(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) {
  __glintercept_fnptr_glDrawElementsInstancedNV(mode, count, type, indices, primcount);
  __glintercept_log(" - glDrawElementsInstancedNV(mode: %ld (%s), count: %ld, type: %ld (%s), indices: %ld, primcount: %ld)", mode, __gl_intercept_formatenum(mode), count, type, __gl_intercept_formatenum(type), indices, primcount);
}

typedef void(*__ctype_glDrawMeshArraysSUN)(GLenum, GLint, GLsizei, GLsizei);
static __ctype_glDrawMeshArraysSUN __glintercept_fnptr_glDrawMeshArraysSUN;
void __glintercept_glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width) {
  __glintercept_fnptr_glDrawMeshArraysSUN(mode, first, count, width);
  __glintercept_log(" - glDrawMeshArraysSUN(mode: %ld (%s), first: %ld, count: %ld, width: %ld)", mode, __gl_intercept_formatenum(mode), first, count, width);
}

typedef void(*__ctype_glDrawMeshTasksNV)(GLuint, GLuint);
static __ctype_glDrawMeshTasksNV __glintercept_fnptr_glDrawMeshTasksNV;
void __glintercept_glDrawMeshTasksNV(GLuint first, GLuint count) {
  __glintercept_fnptr_glDrawMeshTasksNV(first, count);
  __glintercept_log(" - glDrawMeshTasksNV(first: %ld, count: %ld)", first, count);
}

typedef void(*__ctype_glDrawMeshTasksIndirectNV)(GLintptr);
static __ctype_glDrawMeshTasksIndirectNV __glintercept_fnptr_glDrawMeshTasksIndirectNV;
void __glintercept_glDrawMeshTasksIndirectNV(GLintptr indirect) {
  __glintercept_fnptr_glDrawMeshTasksIndirectNV(indirect);
  __glintercept_log(" - glDrawMeshTasksIndirectNV(indirect: %ld)", indirect);
}

typedef void(*__ctype_glDrawPixels)(GLsizei, GLsizei, GLenum, GLenum, const void *);
static __ctype_glDrawPixels __glintercept_fnptr_glDrawPixels;
void __glintercept_glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glDrawPixels(width, height, format, type, pixels);
  __glintercept_log(" - glDrawPixels(width: %ld, height: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", width, height, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glDrawRangeElementArrayAPPLE)(GLenum, GLuint, GLuint, GLint, GLsizei);
static __ctype_glDrawRangeElementArrayAPPLE __glintercept_fnptr_glDrawRangeElementArrayAPPLE;
void __glintercept_glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count) {
  __glintercept_fnptr_glDrawRangeElementArrayAPPLE(mode, start, end, first, count);
  __glintercept_log(" - glDrawRangeElementArrayAPPLE(mode: %ld (%s), start: %ld, end: %ld, first: %ld, count: %ld)", mode, __gl_intercept_formatenum(mode), start, end, first, count);
}

typedef void(*__ctype_glDrawRangeElementArrayATI)(GLenum, GLuint, GLuint, GLsizei);
static __ctype_glDrawRangeElementArrayATI __glintercept_fnptr_glDrawRangeElementArrayATI;
void __glintercept_glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count) {
  __glintercept_fnptr_glDrawRangeElementArrayATI(mode, start, end, count);
  __glintercept_log(" - glDrawRangeElementArrayATI(mode: %ld (%s), start: %ld, end: %ld, count: %ld)", mode, __gl_intercept_formatenum(mode), start, end, count);
}

typedef void(*__ctype_glDrawRangeElements)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *);
static __ctype_glDrawRangeElements __glintercept_fnptr_glDrawRangeElements;
void __glintercept_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) {
  __glintercept_fnptr_glDrawRangeElements(mode, start, end, count, type, indices);
  __glintercept_log(" - glDrawRangeElements(mode: %ld (%s), start: %ld, end: %ld, count: %ld, type: %ld (%s), indices: %ld)", mode, __gl_intercept_formatenum(mode), start, end, count, type, __gl_intercept_formatenum(type), indices);
}

typedef void(*__ctype_glDrawRangeElementsBaseVertex)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint);
static __ctype_glDrawRangeElementsBaseVertex __glintercept_fnptr_glDrawRangeElementsBaseVertex;
void __glintercept_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) {
  __glintercept_fnptr_glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
  __glintercept_log(" - glDrawRangeElementsBaseVertex(mode: %ld (%s), start: %ld, end: %ld, count: %ld, type: %ld (%s), indices: %ld, basevertex: %ld)", mode, __gl_intercept_formatenum(mode), start, end, count, type, __gl_intercept_formatenum(type), indices, basevertex);
}

typedef void(*__ctype_glDrawRangeElementsBaseVertexEXT)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint);
static __ctype_glDrawRangeElementsBaseVertexEXT __glintercept_fnptr_glDrawRangeElementsBaseVertexEXT;
void __glintercept_glDrawRangeElementsBaseVertexEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) {
  __glintercept_fnptr_glDrawRangeElementsBaseVertexEXT(mode, start, end, count, type, indices, basevertex);
  __glintercept_log(" - glDrawRangeElementsBaseVertexEXT(mode: %ld (%s), start: %ld, end: %ld, count: %ld, type: %ld (%s), indices: %ld, basevertex: %ld)", mode, __gl_intercept_formatenum(mode), start, end, count, type, __gl_intercept_formatenum(type), indices, basevertex);
}

typedef void(*__ctype_glDrawRangeElementsBaseVertexOES)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint);
static __ctype_glDrawRangeElementsBaseVertexOES __glintercept_fnptr_glDrawRangeElementsBaseVertexOES;
void __glintercept_glDrawRangeElementsBaseVertexOES(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) {
  __glintercept_fnptr_glDrawRangeElementsBaseVertexOES(mode, start, end, count, type, indices, basevertex);
  __glintercept_log(" - glDrawRangeElementsBaseVertexOES(mode: %ld (%s), start: %ld, end: %ld, count: %ld, type: %ld (%s), indices: %ld, basevertex: %ld)", mode, __gl_intercept_formatenum(mode), start, end, count, type, __gl_intercept_formatenum(type), indices, basevertex);
}

typedef void(*__ctype_glDrawRangeElementsEXT)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *);
static __ctype_glDrawRangeElementsEXT __glintercept_fnptr_glDrawRangeElementsEXT;
void __glintercept_glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) {
  __glintercept_fnptr_glDrawRangeElementsEXT(mode, start, end, count, type, indices);
  __glintercept_log(" - glDrawRangeElementsEXT(mode: %ld (%s), start: %ld, end: %ld, count: %ld, type: %ld (%s), indices: %ld)", mode, __gl_intercept_formatenum(mode), start, end, count, type, __gl_intercept_formatenum(type), indices);
}

typedef void(*__ctype_glDrawTexfOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glDrawTexfOES __glintercept_fnptr_glDrawTexfOES;
void __glintercept_glDrawTexfOES(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height) {
  __glintercept_fnptr_glDrawTexfOES(x, y, z, width, height);
  __glintercept_log(" - glDrawTexfOES(x: %ld, y: %ld, z: %ld, width: %ld, height: %ld)", x, y, z, width, height);
}

typedef void(*__ctype_glDrawTexfvOES)(const GLfloat *);
static __ctype_glDrawTexfvOES __glintercept_fnptr_glDrawTexfvOES;
void __glintercept_glDrawTexfvOES(const GLfloat * coords) {
  __glintercept_fnptr_glDrawTexfvOES(coords);
  __glintercept_log(" - glDrawTexfvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glDrawTexiOES)(GLint, GLint, GLint, GLint, GLint);
static __ctype_glDrawTexiOES __glintercept_fnptr_glDrawTexiOES;
void __glintercept_glDrawTexiOES(GLint x, GLint y, GLint z, GLint width, GLint height) {
  __glintercept_fnptr_glDrawTexiOES(x, y, z, width, height);
  __glintercept_log(" - glDrawTexiOES(x: %ld, y: %ld, z: %ld, width: %ld, height: %ld)", x, y, z, width, height);
}

typedef void(*__ctype_glDrawTexivOES)(const GLint *);
static __ctype_glDrawTexivOES __glintercept_fnptr_glDrawTexivOES;
void __glintercept_glDrawTexivOES(const GLint * coords) {
  __glintercept_fnptr_glDrawTexivOES(coords);
  __glintercept_log(" - glDrawTexivOES(coords: %ld)", coords);
}

typedef void(*__ctype_glDrawTexsOES)(GLshort, GLshort, GLshort, GLshort, GLshort);
static __ctype_glDrawTexsOES __glintercept_fnptr_glDrawTexsOES;
void __glintercept_glDrawTexsOES(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height) {
  __glintercept_fnptr_glDrawTexsOES(x, y, z, width, height);
  __glintercept_log(" - glDrawTexsOES(x: %ld, y: %ld, z: %ld, width: %ld, height: %ld)", x, y, z, width, height);
}

typedef void(*__ctype_glDrawTexsvOES)(const GLshort *);
static __ctype_glDrawTexsvOES __glintercept_fnptr_glDrawTexsvOES;
void __glintercept_glDrawTexsvOES(const GLshort * coords) {
  __glintercept_fnptr_glDrawTexsvOES(coords);
  __glintercept_log(" - glDrawTexsvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glDrawTextureNV)(GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glDrawTextureNV __glintercept_fnptr_glDrawTextureNV;
void __glintercept_glDrawTextureNV(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) {
  __glintercept_fnptr_glDrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
  __glintercept_log(" - glDrawTextureNV(texture: %ld, sampler: %ld, x0: %ld, y0: %ld, x1: %ld, y1: %ld, z: %ld, s0: %ld, t0: %ld, s1: %ld, t1: %ld)", texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
}

typedef void(*__ctype_glDrawTexxOES)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
static __ctype_glDrawTexxOES __glintercept_fnptr_glDrawTexxOES;
void __glintercept_glDrawTexxOES(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height) {
  __glintercept_fnptr_glDrawTexxOES(x, y, z, width, height);
  __glintercept_log(" - glDrawTexxOES(x: %ld, y: %ld, z: %ld, width: %ld, height: %ld)", x, y, z, width, height);
}

typedef void(*__ctype_glDrawTexxvOES)(const GLfixed *);
static __ctype_glDrawTexxvOES __glintercept_fnptr_glDrawTexxvOES;
void __glintercept_glDrawTexxvOES(const GLfixed * coords) {
  __glintercept_fnptr_glDrawTexxvOES(coords);
  __glintercept_log(" - glDrawTexxvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glDrawTransformFeedback)(GLenum, GLuint);
static __ctype_glDrawTransformFeedback __glintercept_fnptr_glDrawTransformFeedback;
void __glintercept_glDrawTransformFeedback(GLenum mode, GLuint id) {
  __glintercept_fnptr_glDrawTransformFeedback(mode, id);
  __glintercept_log(" - glDrawTransformFeedback(mode: %ld (%s), id: %ld)", mode, __gl_intercept_formatenum(mode), id);
}

typedef void(*__ctype_glDrawTransformFeedbackEXT)(GLenum, GLuint);
static __ctype_glDrawTransformFeedbackEXT __glintercept_fnptr_glDrawTransformFeedbackEXT;
void __glintercept_glDrawTransformFeedbackEXT(GLenum mode, GLuint id) {
  __glintercept_fnptr_glDrawTransformFeedbackEXT(mode, id);
  __glintercept_log(" - glDrawTransformFeedbackEXT(mode: %ld (%s), id: %ld)", mode, __gl_intercept_formatenum(mode), id);
}

typedef void(*__ctype_glDrawTransformFeedbackInstanced)(GLenum, GLuint, GLsizei);
static __ctype_glDrawTransformFeedbackInstanced __glintercept_fnptr_glDrawTransformFeedbackInstanced;
void __glintercept_glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount) {
  __glintercept_fnptr_glDrawTransformFeedbackInstanced(mode, id, instancecount);
  __glintercept_log(" - glDrawTransformFeedbackInstanced(mode: %ld (%s), id: %ld, instancecount: %ld)", mode, __gl_intercept_formatenum(mode), id, instancecount);
}

typedef void(*__ctype_glDrawTransformFeedbackInstancedEXT)(GLenum, GLuint, GLsizei);
static __ctype_glDrawTransformFeedbackInstancedEXT __glintercept_fnptr_glDrawTransformFeedbackInstancedEXT;
void __glintercept_glDrawTransformFeedbackInstancedEXT(GLenum mode, GLuint id, GLsizei instancecount) {
  __glintercept_fnptr_glDrawTransformFeedbackInstancedEXT(mode, id, instancecount);
  __glintercept_log(" - glDrawTransformFeedbackInstancedEXT(mode: %ld (%s), id: %ld, instancecount: %ld)", mode, __gl_intercept_formatenum(mode), id, instancecount);
}

typedef void(*__ctype_glDrawTransformFeedbackNV)(GLenum, GLuint);
static __ctype_glDrawTransformFeedbackNV __glintercept_fnptr_glDrawTransformFeedbackNV;
void __glintercept_glDrawTransformFeedbackNV(GLenum mode, GLuint id) {
  __glintercept_fnptr_glDrawTransformFeedbackNV(mode, id);
  __glintercept_log(" - glDrawTransformFeedbackNV(mode: %ld (%s), id: %ld)", mode, __gl_intercept_formatenum(mode), id);
}

typedef void(*__ctype_glDrawTransformFeedbackStream)(GLenum, GLuint, GLuint);
static __ctype_glDrawTransformFeedbackStream __glintercept_fnptr_glDrawTransformFeedbackStream;
void __glintercept_glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream) {
  __glintercept_fnptr_glDrawTransformFeedbackStream(mode, id, stream);
  __glintercept_log(" - glDrawTransformFeedbackStream(mode: %ld (%s), id: %ld, stream: %ld)", mode, __gl_intercept_formatenum(mode), id, stream);
}

typedef void(*__ctype_glDrawTransformFeedbackStreamInstanced)(GLenum, GLuint, GLuint, GLsizei);
static __ctype_glDrawTransformFeedbackStreamInstanced __glintercept_fnptr_glDrawTransformFeedbackStreamInstanced;
void __glintercept_glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) {
  __glintercept_fnptr_glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);
  __glintercept_log(" - glDrawTransformFeedbackStreamInstanced(mode: %ld (%s), id: %ld, stream: %ld, instancecount: %ld)", mode, __gl_intercept_formatenum(mode), id, stream, instancecount);
}

typedef void(*__ctype_glEGLImageTargetRenderbufferStorageOES)(GLenum, GLeglImageOES);
static __ctype_glEGLImageTargetRenderbufferStorageOES __glintercept_fnptr_glEGLImageTargetRenderbufferStorageOES;
void __glintercept_glEGLImageTargetRenderbufferStorageOES(GLenum target, GLeglImageOES image) {
  __glintercept_fnptr_glEGLImageTargetRenderbufferStorageOES(target, image);
  __glintercept_log(" - glEGLImageTargetRenderbufferStorageOES(target: %ld (%s), image: %ld)", target, __gl_intercept_formatenum(target), image);
}

typedef void(*__ctype_glEGLImageTargetTexStorageEXT)(GLenum, GLeglImageOES, const GLint*);
static __ctype_glEGLImageTargetTexStorageEXT __glintercept_fnptr_glEGLImageTargetTexStorageEXT;
void __glintercept_glEGLImageTargetTexStorageEXT(GLenum target, GLeglImageOES image, const GLint* attrib_list) {
  __glintercept_fnptr_glEGLImageTargetTexStorageEXT(target, image, attrib_list);
  __glintercept_log(" - glEGLImageTargetTexStorageEXT(target: %ld (%s), image: %ld, attrib_list: %ld)", target, __gl_intercept_formatenum(target), image, attrib_list);
}

typedef void(*__ctype_glEGLImageTargetTexture2DOES)(GLenum, GLeglImageOES);
static __ctype_glEGLImageTargetTexture2DOES __glintercept_fnptr_glEGLImageTargetTexture2DOES;
void __glintercept_glEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image) {
  __glintercept_fnptr_glEGLImageTargetTexture2DOES(target, image);
  __glintercept_log(" - glEGLImageTargetTexture2DOES(target: %ld (%s), image: %ld)", target, __gl_intercept_formatenum(target), image);
}

typedef void(*__ctype_glEGLImageTargetTextureStorageEXT)(GLuint, GLeglImageOES, const GLint*);
static __ctype_glEGLImageTargetTextureStorageEXT __glintercept_fnptr_glEGLImageTargetTextureStorageEXT;
void __glintercept_glEGLImageTargetTextureStorageEXT(GLuint texture, GLeglImageOES image, const GLint* attrib_list) {
  __glintercept_fnptr_glEGLImageTargetTextureStorageEXT(texture, image, attrib_list);
  __glintercept_log(" - glEGLImageTargetTextureStorageEXT(texture: %ld, image: %ld, attrib_list: %ld)", texture, image, attrib_list);
}

typedef void(*__ctype_glEdgeFlag)(GLboolean);
static __ctype_glEdgeFlag __glintercept_fnptr_glEdgeFlag;
void __glintercept_glEdgeFlag(GLboolean flag) {
  __glintercept_fnptr_glEdgeFlag(flag);
  __glintercept_log(" - glEdgeFlag(flag: %ld)", flag);
}

typedef void(*__ctype_glEdgeFlagFormatNV)(GLsizei);
static __ctype_glEdgeFlagFormatNV __glintercept_fnptr_glEdgeFlagFormatNV;
void __glintercept_glEdgeFlagFormatNV(GLsizei stride) {
  __glintercept_fnptr_glEdgeFlagFormatNV(stride);
  __glintercept_log(" - glEdgeFlagFormatNV(stride: %ld)", stride);
}

typedef void(*__ctype_glEdgeFlagPointer)(GLsizei, const void *);
static __ctype_glEdgeFlagPointer __glintercept_fnptr_glEdgeFlagPointer;
void __glintercept_glEdgeFlagPointer(GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glEdgeFlagPointer(stride, pointer);
  __glintercept_log(" - glEdgeFlagPointer(stride: %ld, pointer: %ld)", stride, pointer);
}

typedef void(*__ctype_glEdgeFlagPointerEXT)(GLsizei, GLsizei, const GLboolean *);
static __ctype_glEdgeFlagPointerEXT __glintercept_fnptr_glEdgeFlagPointerEXT;
void __glintercept_glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean * pointer) {
  __glintercept_fnptr_glEdgeFlagPointerEXT(stride, count, pointer);
  __glintercept_log(" - glEdgeFlagPointerEXT(stride: %ld, count: %ld, pointer: %ld)", stride, count, pointer);
}

typedef void(*__ctype_glEdgeFlagPointerListIBM)(GLint, const GLboolean **, GLint);
static __ctype_glEdgeFlagPointerListIBM __glintercept_fnptr_glEdgeFlagPointerListIBM;
void __glintercept_glEdgeFlagPointerListIBM(GLint stride, const GLboolean ** pointer, GLint ptrstride) {
  __glintercept_fnptr_glEdgeFlagPointerListIBM(stride, pointer, ptrstride);
  __glintercept_log(" - glEdgeFlagPointerListIBM(stride: %ld, pointer: %ld, ptrstride: %ld)", stride, pointer, ptrstride);
}

typedef void(*__ctype_glEdgeFlagv)(const GLboolean *);
static __ctype_glEdgeFlagv __glintercept_fnptr_glEdgeFlagv;
void __glintercept_glEdgeFlagv(const GLboolean * flag) {
  __glintercept_fnptr_glEdgeFlagv(flag);
  __glintercept_log(" - glEdgeFlagv(flag: %ld)", flag);
}

typedef void(*__ctype_glElementPointerAPPLE)(GLenum, const void *);
static __ctype_glElementPointerAPPLE __glintercept_fnptr_glElementPointerAPPLE;
void __glintercept_glElementPointerAPPLE(GLenum type, const void * pointer) {
  __glintercept_fnptr_glElementPointerAPPLE(type, pointer);
  __glintercept_log(" - glElementPointerAPPLE(type: %ld (%s), pointer: %ld)", type, __gl_intercept_formatenum(type), pointer);
}

typedef void(*__ctype_glElementPointerATI)(GLenum, const void *);
static __ctype_glElementPointerATI __glintercept_fnptr_glElementPointerATI;
void __glintercept_glElementPointerATI(GLenum type, const void * pointer) {
  __glintercept_fnptr_glElementPointerATI(type, pointer);
  __glintercept_log(" - glElementPointerATI(type: %ld (%s), pointer: %ld)", type, __gl_intercept_formatenum(type), pointer);
}

typedef void(*__ctype_glEnable)(GLenum);
static __ctype_glEnable __glintercept_fnptr_glEnable;
void __glintercept_glEnable(GLenum cap) {
  __glintercept_fnptr_glEnable(cap);
  __glintercept_log(" - glEnable(cap: %ld (%s))", cap, __gl_intercept_formatenum(cap));
}

typedef void(*__ctype_glEnableClientState)(GLenum);
static __ctype_glEnableClientState __glintercept_fnptr_glEnableClientState;
void __glintercept_glEnableClientState(GLenum array) {
  __glintercept_fnptr_glEnableClientState(array);
  __glintercept_log(" - glEnableClientState(array: %ld (%s))", array, __gl_intercept_formatenum(array));
}

typedef void(*__ctype_glEnableClientStateIndexedEXT)(GLenum, GLuint);
static __ctype_glEnableClientStateIndexedEXT __glintercept_fnptr_glEnableClientStateIndexedEXT;
void __glintercept_glEnableClientStateIndexedEXT(GLenum array, GLuint index) {
  __glintercept_fnptr_glEnableClientStateIndexedEXT(array, index);
  __glintercept_log(" - glEnableClientStateIndexedEXT(array: %ld (%s), index: %ld)", array, __gl_intercept_formatenum(array), index);
}

typedef void(*__ctype_glEnableClientStateiEXT)(GLenum, GLuint);
static __ctype_glEnableClientStateiEXT __glintercept_fnptr_glEnableClientStateiEXT;
void __glintercept_glEnableClientStateiEXT(GLenum array, GLuint index) {
  __glintercept_fnptr_glEnableClientStateiEXT(array, index);
  __glintercept_log(" - glEnableClientStateiEXT(array: %ld (%s), index: %ld)", array, __gl_intercept_formatenum(array), index);
}

typedef void(*__ctype_glEnableDriverControlQCOM)(GLuint);
static __ctype_glEnableDriverControlQCOM __glintercept_fnptr_glEnableDriverControlQCOM;
void __glintercept_glEnableDriverControlQCOM(GLuint driverControl) {
  __glintercept_fnptr_glEnableDriverControlQCOM(driverControl);
  __glintercept_log(" - glEnableDriverControlQCOM(driverControl: %ld)", driverControl);
}

typedef void(*__ctype_glEnableIndexedEXT)(GLenum, GLuint);
static __ctype_glEnableIndexedEXT __glintercept_fnptr_glEnableIndexedEXT;
void __glintercept_glEnableIndexedEXT(GLenum target, GLuint index) {
  __glintercept_fnptr_glEnableIndexedEXT(target, index);
  __glintercept_log(" - glEnableIndexedEXT(target: %ld (%s), index: %ld)", target, __gl_intercept_formatenum(target), index);
}

typedef void(*__ctype_glEnableVariantClientStateEXT)(GLuint);
static __ctype_glEnableVariantClientStateEXT __glintercept_fnptr_glEnableVariantClientStateEXT;
void __glintercept_glEnableVariantClientStateEXT(GLuint id) {
  __glintercept_fnptr_glEnableVariantClientStateEXT(id);
  __glintercept_log(" - glEnableVariantClientStateEXT(id: %ld)", id);
}

typedef void(*__ctype_glEnableVertexArrayAttrib)(GLuint, GLuint);
static __ctype_glEnableVertexArrayAttrib __glintercept_fnptr_glEnableVertexArrayAttrib;
void __glintercept_glEnableVertexArrayAttrib(GLuint vaobj, GLuint index) {
  __glintercept_fnptr_glEnableVertexArrayAttrib(vaobj, index);
  __glintercept_log(" - glEnableVertexArrayAttrib(vaobj: %ld, index: %ld)", vaobj, index);
}

typedef void(*__ctype_glEnableVertexArrayAttribEXT)(GLuint, GLuint);
static __ctype_glEnableVertexArrayAttribEXT __glintercept_fnptr_glEnableVertexArrayAttribEXT;
void __glintercept_glEnableVertexArrayAttribEXT(GLuint vaobj, GLuint index) {
  __glintercept_fnptr_glEnableVertexArrayAttribEXT(vaobj, index);
  __glintercept_log(" - glEnableVertexArrayAttribEXT(vaobj: %ld, index: %ld)", vaobj, index);
}

typedef void(*__ctype_glEnableVertexArrayEXT)(GLuint, GLenum);
static __ctype_glEnableVertexArrayEXT __glintercept_fnptr_glEnableVertexArrayEXT;
void __glintercept_glEnableVertexArrayEXT(GLuint vaobj, GLenum array) {
  __glintercept_fnptr_glEnableVertexArrayEXT(vaobj, array);
  __glintercept_log(" - glEnableVertexArrayEXT(vaobj: %ld, array: %ld (%s))", vaobj, array, __gl_intercept_formatenum(array));
}

typedef void(*__ctype_glEnableVertexAttribAPPLE)(GLuint, GLenum);
static __ctype_glEnableVertexAttribAPPLE __glintercept_fnptr_glEnableVertexAttribAPPLE;
void __glintercept_glEnableVertexAttribAPPLE(GLuint index, GLenum pname) {
  __glintercept_fnptr_glEnableVertexAttribAPPLE(index, pname);
  __glintercept_log(" - glEnableVertexAttribAPPLE(index: %ld, pname: %ld (%s))", index, pname, __gl_intercept_formatenum(pname));
}

typedef void(*__ctype_glEnableVertexAttribArray)(GLuint);
static __ctype_glEnableVertexAttribArray __glintercept_fnptr_glEnableVertexAttribArray;
void __glintercept_glEnableVertexAttribArray(GLuint index) {
  __glintercept_fnptr_glEnableVertexAttribArray(index);
  __glintercept_log(" - glEnableVertexAttribArray(index: %ld)", index);
}

typedef void(*__ctype_glEnableVertexAttribArrayARB)(GLuint);
static __ctype_glEnableVertexAttribArrayARB __glintercept_fnptr_glEnableVertexAttribArrayARB;
void __glintercept_glEnableVertexAttribArrayARB(GLuint index) {
  __glintercept_fnptr_glEnableVertexAttribArrayARB(index);
  __glintercept_log(" - glEnableVertexAttribArrayARB(index: %ld)", index);
}

typedef void(*__ctype_glEnablei)(GLenum, GLuint);
static __ctype_glEnablei __glintercept_fnptr_glEnablei;
void __glintercept_glEnablei(GLenum target, GLuint index) {
  __glintercept_fnptr_glEnablei(target, index);
  __glintercept_log(" - glEnablei(target: %ld (%s), index: %ld)", target, __gl_intercept_formatenum(target), index);
}

typedef void(*__ctype_glEnableiEXT)(GLenum, GLuint);
static __ctype_glEnableiEXT __glintercept_fnptr_glEnableiEXT;
void __glintercept_glEnableiEXT(GLenum target, GLuint index) {
  __glintercept_fnptr_glEnableiEXT(target, index);
  __glintercept_log(" - glEnableiEXT(target: %ld (%s), index: %ld)", target, __gl_intercept_formatenum(target), index);
}

typedef void(*__ctype_glEnableiNV)(GLenum, GLuint);
static __ctype_glEnableiNV __glintercept_fnptr_glEnableiNV;
void __glintercept_glEnableiNV(GLenum target, GLuint index) {
  __glintercept_fnptr_glEnableiNV(target, index);
  __glintercept_log(" - glEnableiNV(target: %ld (%s), index: %ld)", target, __gl_intercept_formatenum(target), index);
}

typedef void(*__ctype_glEnableiOES)(GLenum, GLuint);
static __ctype_glEnableiOES __glintercept_fnptr_glEnableiOES;
void __glintercept_glEnableiOES(GLenum target, GLuint index) {
  __glintercept_fnptr_glEnableiOES(target, index);
  __glintercept_log(" - glEnableiOES(target: %ld (%s), index: %ld)", target, __gl_intercept_formatenum(target), index);
}

typedef void(*__ctype_glEnd)();
static __ctype_glEnd __glintercept_fnptr_glEnd;
void __glintercept_glEnd() {
  __glintercept_fnptr_glEnd();
  __glintercept_log(" - glEnd()");
}

typedef void(*__ctype_glEndConditionalRender)();
static __ctype_glEndConditionalRender __glintercept_fnptr_glEndConditionalRender;
void __glintercept_glEndConditionalRender() {
  __glintercept_fnptr_glEndConditionalRender();
  __glintercept_log(" - glEndConditionalRender()");
}

typedef void(*__ctype_glEndConditionalRenderNV)();
static __ctype_glEndConditionalRenderNV __glintercept_fnptr_glEndConditionalRenderNV;
void __glintercept_glEndConditionalRenderNV() {
  __glintercept_fnptr_glEndConditionalRenderNV();
  __glintercept_log(" - glEndConditionalRenderNV()");
}

typedef void(*__ctype_glEndConditionalRenderNVX)();
static __ctype_glEndConditionalRenderNVX __glintercept_fnptr_glEndConditionalRenderNVX;
void __glintercept_glEndConditionalRenderNVX() {
  __glintercept_fnptr_glEndConditionalRenderNVX();
  __glintercept_log(" - glEndConditionalRenderNVX()");
}

typedef void(*__ctype_glEndFragmentShaderATI)();
static __ctype_glEndFragmentShaderATI __glintercept_fnptr_glEndFragmentShaderATI;
void __glintercept_glEndFragmentShaderATI() {
  __glintercept_fnptr_glEndFragmentShaderATI();
  __glintercept_log(" - glEndFragmentShaderATI()");
}

typedef void(*__ctype_glEndList)();
static __ctype_glEndList __glintercept_fnptr_glEndList;
void __glintercept_glEndList() {
  __glintercept_fnptr_glEndList();
  __glintercept_log(" - glEndList()");
}

typedef void(*__ctype_glEndOcclusionQueryNV)();
static __ctype_glEndOcclusionQueryNV __glintercept_fnptr_glEndOcclusionQueryNV;
void __glintercept_glEndOcclusionQueryNV() {
  __glintercept_fnptr_glEndOcclusionQueryNV();
  __glintercept_log(" - glEndOcclusionQueryNV()");
}

typedef void(*__ctype_glEndPerfMonitorAMD)(GLuint);
static __ctype_glEndPerfMonitorAMD __glintercept_fnptr_glEndPerfMonitorAMD;
void __glintercept_glEndPerfMonitorAMD(GLuint monitor) {
  __glintercept_fnptr_glEndPerfMonitorAMD(monitor);
  __glintercept_log(" - glEndPerfMonitorAMD(monitor: %ld)", monitor);
}

typedef void(*__ctype_glEndPerfQueryINTEL)(GLuint);
static __ctype_glEndPerfQueryINTEL __glintercept_fnptr_glEndPerfQueryINTEL;
void __glintercept_glEndPerfQueryINTEL(GLuint queryHandle) {
  __glintercept_fnptr_glEndPerfQueryINTEL(queryHandle);
  __glintercept_log(" - glEndPerfQueryINTEL(queryHandle: %ld)", queryHandle);
}

typedef void(*__ctype_glEndQuery)(GLenum);
static __ctype_glEndQuery __glintercept_fnptr_glEndQuery;
void __glintercept_glEndQuery(GLenum target) {
  __glintercept_fnptr_glEndQuery(target);
  __glintercept_log(" - glEndQuery(target: %ld (%s))", target, __gl_intercept_formatenum(target));
}

typedef void(*__ctype_glEndQueryARB)(GLenum);
static __ctype_glEndQueryARB __glintercept_fnptr_glEndQueryARB;
void __glintercept_glEndQueryARB(GLenum target) {
  __glintercept_fnptr_glEndQueryARB(target);
  __glintercept_log(" - glEndQueryARB(target: %ld (%s))", target, __gl_intercept_formatenum(target));
}

typedef void(*__ctype_glEndQueryEXT)(GLenum);
static __ctype_glEndQueryEXT __glintercept_fnptr_glEndQueryEXT;
void __glintercept_glEndQueryEXT(GLenum target) {
  __glintercept_fnptr_glEndQueryEXT(target);
  __glintercept_log(" - glEndQueryEXT(target: %ld (%s))", target, __gl_intercept_formatenum(target));
}

typedef void(*__ctype_glEndQueryIndexed)(GLenum, GLuint);
static __ctype_glEndQueryIndexed __glintercept_fnptr_glEndQueryIndexed;
void __glintercept_glEndQueryIndexed(GLenum target, GLuint index) {
  __glintercept_fnptr_glEndQueryIndexed(target, index);
  __glintercept_log(" - glEndQueryIndexed(target: %ld (%s), index: %ld)", target, __gl_intercept_formatenum(target), index);
}

typedef void(*__ctype_glEndTilingQCOM)(GLbitfield);
static __ctype_glEndTilingQCOM __glintercept_fnptr_glEndTilingQCOM;
void __glintercept_glEndTilingQCOM(GLbitfield preserveMask) {
  __glintercept_fnptr_glEndTilingQCOM(preserveMask);
  __glintercept_log(" - glEndTilingQCOM(preserveMask: %ld)", preserveMask);
}

typedef void(*__ctype_glEndTransformFeedback)();
static __ctype_glEndTransformFeedback __glintercept_fnptr_glEndTransformFeedback;
void __glintercept_glEndTransformFeedback() {
  __glintercept_fnptr_glEndTransformFeedback();
  __glintercept_log(" - glEndTransformFeedback()");
}

typedef void(*__ctype_glEndTransformFeedbackEXT)();
static __ctype_glEndTransformFeedbackEXT __glintercept_fnptr_glEndTransformFeedbackEXT;
void __glintercept_glEndTransformFeedbackEXT() {
  __glintercept_fnptr_glEndTransformFeedbackEXT();
  __glintercept_log(" - glEndTransformFeedbackEXT()");
}

typedef void(*__ctype_glEndTransformFeedbackNV)();
static __ctype_glEndTransformFeedbackNV __glintercept_fnptr_glEndTransformFeedbackNV;
void __glintercept_glEndTransformFeedbackNV() {
  __glintercept_fnptr_glEndTransformFeedbackNV();
  __glintercept_log(" - glEndTransformFeedbackNV()");
}

typedef void(*__ctype_glEndVertexShaderEXT)();
static __ctype_glEndVertexShaderEXT __glintercept_fnptr_glEndVertexShaderEXT;
void __glintercept_glEndVertexShaderEXT() {
  __glintercept_fnptr_glEndVertexShaderEXT();
  __glintercept_log(" - glEndVertexShaderEXT()");
}

typedef void(*__ctype_glEndVideoCaptureNV)(GLuint);
static __ctype_glEndVideoCaptureNV __glintercept_fnptr_glEndVideoCaptureNV;
void __glintercept_glEndVideoCaptureNV(GLuint video_capture_slot) {
  __glintercept_fnptr_glEndVideoCaptureNV(video_capture_slot);
  __glintercept_log(" - glEndVideoCaptureNV(video_capture_slot: %ld)", video_capture_slot);
}

typedef void(*__ctype_glEvalCoord1d)(GLdouble);
static __ctype_glEvalCoord1d __glintercept_fnptr_glEvalCoord1d;
void __glintercept_glEvalCoord1d(GLdouble u) {
  __glintercept_fnptr_glEvalCoord1d(u);
  __glintercept_log(" - glEvalCoord1d(u: %ld)", u);
}

typedef void(*__ctype_glEvalCoord1dv)(const GLdouble *);
static __ctype_glEvalCoord1dv __glintercept_fnptr_glEvalCoord1dv;
void __glintercept_glEvalCoord1dv(const GLdouble * u) {
  __glintercept_fnptr_glEvalCoord1dv(u);
  __glintercept_log(" - glEvalCoord1dv(u: %ld)", u);
}

typedef void(*__ctype_glEvalCoord1f)(GLfloat);
static __ctype_glEvalCoord1f __glintercept_fnptr_glEvalCoord1f;
void __glintercept_glEvalCoord1f(GLfloat u) {
  __glintercept_fnptr_glEvalCoord1f(u);
  __glintercept_log(" - glEvalCoord1f(u: %ld)", u);
}

typedef void(*__ctype_glEvalCoord1fv)(const GLfloat *);
static __ctype_glEvalCoord1fv __glintercept_fnptr_glEvalCoord1fv;
void __glintercept_glEvalCoord1fv(const GLfloat * u) {
  __glintercept_fnptr_glEvalCoord1fv(u);
  __glintercept_log(" - glEvalCoord1fv(u: %ld)", u);
}

typedef void(*__ctype_glEvalCoord1xOES)(GLfixed);
static __ctype_glEvalCoord1xOES __glintercept_fnptr_glEvalCoord1xOES;
void __glintercept_glEvalCoord1xOES(GLfixed u) {
  __glintercept_fnptr_glEvalCoord1xOES(u);
  __glintercept_log(" - glEvalCoord1xOES(u: %ld)", u);
}

typedef void(*__ctype_glEvalCoord1xvOES)(const GLfixed *);
static __ctype_glEvalCoord1xvOES __glintercept_fnptr_glEvalCoord1xvOES;
void __glintercept_glEvalCoord1xvOES(const GLfixed * coords) {
  __glintercept_fnptr_glEvalCoord1xvOES(coords);
  __glintercept_log(" - glEvalCoord1xvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glEvalCoord2d)(GLdouble, GLdouble);
static __ctype_glEvalCoord2d __glintercept_fnptr_glEvalCoord2d;
void __glintercept_glEvalCoord2d(GLdouble u, GLdouble v) {
  __glintercept_fnptr_glEvalCoord2d(u, v);
  __glintercept_log(" - glEvalCoord2d(u: %ld, v: %ld)", u, v);
}

typedef void(*__ctype_glEvalCoord2dv)(const GLdouble *);
static __ctype_glEvalCoord2dv __glintercept_fnptr_glEvalCoord2dv;
void __glintercept_glEvalCoord2dv(const GLdouble * u) {
  __glintercept_fnptr_glEvalCoord2dv(u);
  __glintercept_log(" - glEvalCoord2dv(u: %ld)", u);
}

typedef void(*__ctype_glEvalCoord2f)(GLfloat, GLfloat);
static __ctype_glEvalCoord2f __glintercept_fnptr_glEvalCoord2f;
void __glintercept_glEvalCoord2f(GLfloat u, GLfloat v) {
  __glintercept_fnptr_glEvalCoord2f(u, v);
  __glintercept_log(" - glEvalCoord2f(u: %ld, v: %ld)", u, v);
}

typedef void(*__ctype_glEvalCoord2fv)(const GLfloat *);
static __ctype_glEvalCoord2fv __glintercept_fnptr_glEvalCoord2fv;
void __glintercept_glEvalCoord2fv(const GLfloat * u) {
  __glintercept_fnptr_glEvalCoord2fv(u);
  __glintercept_log(" - glEvalCoord2fv(u: %ld)", u);
}

typedef void(*__ctype_glEvalCoord2xOES)(GLfixed, GLfixed);
static __ctype_glEvalCoord2xOES __glintercept_fnptr_glEvalCoord2xOES;
void __glintercept_glEvalCoord2xOES(GLfixed u, GLfixed v) {
  __glintercept_fnptr_glEvalCoord2xOES(u, v);
  __glintercept_log(" - glEvalCoord2xOES(u: %ld, v: %ld)", u, v);
}

typedef void(*__ctype_glEvalCoord2xvOES)(const GLfixed *);
static __ctype_glEvalCoord2xvOES __glintercept_fnptr_glEvalCoord2xvOES;
void __glintercept_glEvalCoord2xvOES(const GLfixed * coords) {
  __glintercept_fnptr_glEvalCoord2xvOES(coords);
  __glintercept_log(" - glEvalCoord2xvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glEvalMapsNV)(GLenum, GLenum);
static __ctype_glEvalMapsNV __glintercept_fnptr_glEvalMapsNV;
void __glintercept_glEvalMapsNV(GLenum target, GLenum mode) {
  __glintercept_fnptr_glEvalMapsNV(target, mode);
  __glintercept_log(" - glEvalMapsNV(target: %ld (%s), mode: %ld (%s))", target, __gl_intercept_formatenum(target), mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glEvalMesh1)(GLenum, GLint, GLint);
static __ctype_glEvalMesh1 __glintercept_fnptr_glEvalMesh1;
void __glintercept_glEvalMesh1(GLenum mode, GLint i1, GLint i2) {
  __glintercept_fnptr_glEvalMesh1(mode, i1, i2);
  __glintercept_log(" - glEvalMesh1(mode: %ld (%s), i1: %ld, i2: %ld)", mode, __gl_intercept_formatenum(mode), i1, i2);
}

typedef void(*__ctype_glEvalMesh2)(GLenum, GLint, GLint, GLint, GLint);
static __ctype_glEvalMesh2 __glintercept_fnptr_glEvalMesh2;
void __glintercept_glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) {
  __glintercept_fnptr_glEvalMesh2(mode, i1, i2, j1, j2);
  __glintercept_log(" - glEvalMesh2(mode: %ld (%s), i1: %ld, i2: %ld, j1: %ld, j2: %ld)", mode, __gl_intercept_formatenum(mode), i1, i2, j1, j2);
}

typedef void(*__ctype_glEvalPoint1)(GLint);
static __ctype_glEvalPoint1 __glintercept_fnptr_glEvalPoint1;
void __glintercept_glEvalPoint1(GLint i) {
  __glintercept_fnptr_glEvalPoint1(i);
  __glintercept_log(" - glEvalPoint1(i: %ld)", i);
}

typedef void(*__ctype_glEvalPoint2)(GLint, GLint);
static __ctype_glEvalPoint2 __glintercept_fnptr_glEvalPoint2;
void __glintercept_glEvalPoint2(GLint i, GLint j) {
  __glintercept_fnptr_glEvalPoint2(i, j);
  __glintercept_log(" - glEvalPoint2(i: %ld, j: %ld)", i, j);
}

typedef void(*__ctype_glEvaluateDepthValuesARB)();
static __ctype_glEvaluateDepthValuesARB __glintercept_fnptr_glEvaluateDepthValuesARB;
void __glintercept_glEvaluateDepthValuesARB() {
  __glintercept_fnptr_glEvaluateDepthValuesARB();
  __glintercept_log(" - glEvaluateDepthValuesARB()");
}

typedef void(*__ctype_glExecuteProgramNV)(GLenum, GLuint, const GLfloat *);
static __ctype_glExecuteProgramNV __glintercept_fnptr_glExecuteProgramNV;
void __glintercept_glExecuteProgramNV(GLenum target, GLuint id, const GLfloat * params) {
  __glintercept_fnptr_glExecuteProgramNV(target, id, params);
  __glintercept_log(" - glExecuteProgramNV(target: %ld (%s), id: %ld, params: %ld)", target, __gl_intercept_formatenum(target), id, params);
}

typedef void(*__ctype_glExtGetBufferPointervQCOM)(GLenum, void **);
static __ctype_glExtGetBufferPointervQCOM __glintercept_fnptr_glExtGetBufferPointervQCOM;
void __glintercept_glExtGetBufferPointervQCOM(GLenum target, void ** params) {
  __glintercept_fnptr_glExtGetBufferPointervQCOM(target, params);
  __glintercept_log(" - glExtGetBufferPointervQCOM(target: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), params);
}

typedef void(*__ctype_glExtGetBuffersQCOM)(GLuint *, GLint, GLint *);
static __ctype_glExtGetBuffersQCOM __glintercept_fnptr_glExtGetBuffersQCOM;
void __glintercept_glExtGetBuffersQCOM(GLuint * buffers, GLint maxBuffers, GLint * numBuffers) {
  __glintercept_fnptr_glExtGetBuffersQCOM(buffers, maxBuffers, numBuffers);
  __glintercept_log(" - glExtGetBuffersQCOM(buffers: %ld, maxBuffers: %ld, numBuffers: %ld)", buffers, maxBuffers, numBuffers);
}

typedef void(*__ctype_glExtGetFramebuffersQCOM)(GLuint *, GLint, GLint *);
static __ctype_glExtGetFramebuffersQCOM __glintercept_fnptr_glExtGetFramebuffersQCOM;
void __glintercept_glExtGetFramebuffersQCOM(GLuint * framebuffers, GLint maxFramebuffers, GLint * numFramebuffers) {
  __glintercept_fnptr_glExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers);
  __glintercept_log(" - glExtGetFramebuffersQCOM(framebuffers: %ld, maxFramebuffers: %ld, numFramebuffers: %ld)", framebuffers, maxFramebuffers, numFramebuffers);
}

typedef void(*__ctype_glExtGetProgramBinarySourceQCOM)(GLuint, GLenum, GLchar *, GLint *);
static __ctype_glExtGetProgramBinarySourceQCOM __glintercept_fnptr_glExtGetProgramBinarySourceQCOM;
void __glintercept_glExtGetProgramBinarySourceQCOM(GLuint program, GLenum shadertype, GLchar * source, GLint * length) {
  __glintercept_fnptr_glExtGetProgramBinarySourceQCOM(program, shadertype, source, length);
  __glintercept_log(" - glExtGetProgramBinarySourceQCOM(program: %ld, shadertype: %ld (%s), source: %ld, length: %ld)", program, shadertype, __gl_intercept_formatenum(shadertype), source, length);
}

typedef void(*__ctype_glExtGetProgramsQCOM)(GLuint *, GLint, GLint *);
static __ctype_glExtGetProgramsQCOM __glintercept_fnptr_glExtGetProgramsQCOM;
void __glintercept_glExtGetProgramsQCOM(GLuint * programs, GLint maxPrograms, GLint * numPrograms) {
  __glintercept_fnptr_glExtGetProgramsQCOM(programs, maxPrograms, numPrograms);
  __glintercept_log(" - glExtGetProgramsQCOM(programs: %ld, maxPrograms: %ld, numPrograms: %ld)", programs, maxPrograms, numPrograms);
}

typedef void(*__ctype_glExtGetRenderbuffersQCOM)(GLuint *, GLint, GLint *);
static __ctype_glExtGetRenderbuffersQCOM __glintercept_fnptr_glExtGetRenderbuffersQCOM;
void __glintercept_glExtGetRenderbuffersQCOM(GLuint * renderbuffers, GLint maxRenderbuffers, GLint * numRenderbuffers) {
  __glintercept_fnptr_glExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers);
  __glintercept_log(" - glExtGetRenderbuffersQCOM(renderbuffers: %ld, maxRenderbuffers: %ld, numRenderbuffers: %ld)", renderbuffers, maxRenderbuffers, numRenderbuffers);
}

typedef void(*__ctype_glExtGetShadersQCOM)(GLuint *, GLint, GLint *);
static __ctype_glExtGetShadersQCOM __glintercept_fnptr_glExtGetShadersQCOM;
void __glintercept_glExtGetShadersQCOM(GLuint * shaders, GLint maxShaders, GLint * numShaders) {
  __glintercept_fnptr_glExtGetShadersQCOM(shaders, maxShaders, numShaders);
  __glintercept_log(" - glExtGetShadersQCOM(shaders: %ld, maxShaders: %ld, numShaders: %ld)", shaders, maxShaders, numShaders);
}

typedef void(*__ctype_glExtGetTexLevelParameterivQCOM)(GLuint, GLenum, GLint, GLenum, GLint *);
static __ctype_glExtGetTexLevelParameterivQCOM __glintercept_fnptr_glExtGetTexLevelParameterivQCOM;
void __glintercept_glExtGetTexLevelParameterivQCOM(GLuint texture, GLenum face, GLint level, GLenum pname, GLint * params) {
  __glintercept_fnptr_glExtGetTexLevelParameterivQCOM(texture, face, level, pname, params);
  __glintercept_log(" - glExtGetTexLevelParameterivQCOM(texture: %ld, face: %ld (%s), level: %ld, pname: %ld (%s), params: %ld)", texture, face, __gl_intercept_formatenum(face), level, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glExtGetTexSubImageQCOM)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, void *);
static __ctype_glExtGetTexSubImageQCOM __glintercept_fnptr_glExtGetTexSubImageQCOM;
void __glintercept_glExtGetTexSubImageQCOM(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void * texels) {
  __glintercept_fnptr_glExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
  __glintercept_log(" - glExtGetTexSubImageQCOM(target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld, format: %ld (%s), type: %ld (%s), texels: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, yoffset, zoffset, width, height, depth, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), texels);
}

typedef void(*__ctype_glExtGetTexturesQCOM)(GLuint *, GLint, GLint *);
static __ctype_glExtGetTexturesQCOM __glintercept_fnptr_glExtGetTexturesQCOM;
void __glintercept_glExtGetTexturesQCOM(GLuint * textures, GLint maxTextures, GLint * numTextures) {
  __glintercept_fnptr_glExtGetTexturesQCOM(textures, maxTextures, numTextures);
  __glintercept_log(" - glExtGetTexturesQCOM(textures: %ld, maxTextures: %ld, numTextures: %ld)", textures, maxTextures, numTextures);
}

typedef GLboolean(*__ctype_glExtIsProgramBinaryQCOM)(GLuint);
static __ctype_glExtIsProgramBinaryQCOM __glintercept_fnptr_glExtIsProgramBinaryQCOM;
GLboolean __glintercept_glExtIsProgramBinaryQCOM(GLuint program) {
  GLboolean __ret = __glintercept_fnptr_glExtIsProgramBinaryQCOM(program);
  __glintercept_log(" - glExtIsProgramBinaryQCOM(program: %ld) -> %ld", program, __ret);
  return __ret;
}

typedef void(*__ctype_glExtTexObjectStateOverrideiQCOM)(GLenum, GLenum, GLint);
static __ctype_glExtTexObjectStateOverrideiQCOM __glintercept_fnptr_glExtTexObjectStateOverrideiQCOM;
void __glintercept_glExtTexObjectStateOverrideiQCOM(GLenum target, GLenum pname, GLint param) {
  __glintercept_fnptr_glExtTexObjectStateOverrideiQCOM(target, pname, param);
  __glintercept_log(" - glExtTexObjectStateOverrideiQCOM(target: %ld (%s), pname: %ld (%s), param: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glExtractComponentEXT)(GLuint, GLuint, GLuint);
static __ctype_glExtractComponentEXT __glintercept_fnptr_glExtractComponentEXT;
void __glintercept_glExtractComponentEXT(GLuint res, GLuint src, GLuint num) {
  __glintercept_fnptr_glExtractComponentEXT(res, src, num);
  __glintercept_log(" - glExtractComponentEXT(res: %ld, src: %ld, num: %ld)", res, src, num);
}

typedef void(*__ctype_glFeedbackBuffer)(GLsizei, GLenum, GLfloat *);
static __ctype_glFeedbackBuffer __glintercept_fnptr_glFeedbackBuffer;
void __glintercept_glFeedbackBuffer(GLsizei size, GLenum type, GLfloat * buffer) {
  __glintercept_fnptr_glFeedbackBuffer(size, type, buffer);
  __glintercept_log(" - glFeedbackBuffer(size: %ld, type: %ld (%s), buffer: %ld)", size, type, __gl_intercept_formatenum(type), buffer);
}

typedef void(*__ctype_glFeedbackBufferxOES)(GLsizei, GLenum, const GLfixed *);
static __ctype_glFeedbackBufferxOES __glintercept_fnptr_glFeedbackBufferxOES;
void __glintercept_glFeedbackBufferxOES(GLsizei n, GLenum type, const GLfixed * buffer) {
  __glintercept_fnptr_glFeedbackBufferxOES(n, type, buffer);
  __glintercept_log(" - glFeedbackBufferxOES(n: %ld, type: %ld (%s), buffer: %ld)", n, type, __gl_intercept_formatenum(type), buffer);
}

typedef GLsync(*__ctype_glFenceSync)(GLenum, GLbitfield);
static __ctype_glFenceSync __glintercept_fnptr_glFenceSync;
GLsync __glintercept_glFenceSync(GLenum condition, GLbitfield flags) {
  GLsync __ret = __glintercept_fnptr_glFenceSync(condition, flags);
  __glintercept_log(" - glFenceSync(condition: %ld (%s), flags: %ld) -> %ld", condition, __gl_intercept_formatenum(condition), flags, __ret);
  return __ret;
}

typedef GLsync(*__ctype_glFenceSyncAPPLE)(GLenum, GLbitfield);
static __ctype_glFenceSyncAPPLE __glintercept_fnptr_glFenceSyncAPPLE;
GLsync __glintercept_glFenceSyncAPPLE(GLenum condition, GLbitfield flags) {
  GLsync __ret = __glintercept_fnptr_glFenceSyncAPPLE(condition, flags);
  __glintercept_log(" - glFenceSyncAPPLE(condition: %ld (%s), flags: %ld) -> %ld", condition, __gl_intercept_formatenum(condition), flags, __ret);
  return __ret;
}

typedef void(*__ctype_glFinalCombinerInputNV)(GLenum, GLenum, GLenum, GLenum);
static __ctype_glFinalCombinerInputNV __glintercept_fnptr_glFinalCombinerInputNV;
void __glintercept_glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) {
  __glintercept_fnptr_glFinalCombinerInputNV(variable, input, mapping, componentUsage);
  __glintercept_log(" - glFinalCombinerInputNV(variable: %ld (%s), input: %ld (%s), mapping: %ld (%s), componentUsage: %ld (%s))", variable, __gl_intercept_formatenum(variable), input, __gl_intercept_formatenum(input), mapping, __gl_intercept_formatenum(mapping), componentUsage, __gl_intercept_formatenum(componentUsage));
}

typedef void(*__ctype_glFinish)();
static __ctype_glFinish __glintercept_fnptr_glFinish;
void __glintercept_glFinish() {
  __glintercept_fnptr_glFinish();
  __glintercept_log(" - glFinish()");
}

typedef GLint(*__ctype_glFinishAsyncSGIX)(GLuint *);
static __ctype_glFinishAsyncSGIX __glintercept_fnptr_glFinishAsyncSGIX;
GLint __glintercept_glFinishAsyncSGIX(GLuint * markerp) {
  GLint __ret = __glintercept_fnptr_glFinishAsyncSGIX(markerp);
  __glintercept_log(" - glFinishAsyncSGIX(markerp: %ld) -> %ld", markerp, __ret);
  return __ret;
}

typedef void(*__ctype_glFinishFenceAPPLE)(GLuint);
static __ctype_glFinishFenceAPPLE __glintercept_fnptr_glFinishFenceAPPLE;
void __glintercept_glFinishFenceAPPLE(GLuint fence) {
  __glintercept_fnptr_glFinishFenceAPPLE(fence);
  __glintercept_log(" - glFinishFenceAPPLE(fence: %ld)", fence);
}

typedef void(*__ctype_glFinishFenceNV)(GLuint);
static __ctype_glFinishFenceNV __glintercept_fnptr_glFinishFenceNV;
void __glintercept_glFinishFenceNV(GLuint fence) {
  __glintercept_fnptr_glFinishFenceNV(fence);
  __glintercept_log(" - glFinishFenceNV(fence: %ld)", fence);
}

typedef void(*__ctype_glFinishObjectAPPLE)(GLenum, GLint);
static __ctype_glFinishObjectAPPLE __glintercept_fnptr_glFinishObjectAPPLE;
void __glintercept_glFinishObjectAPPLE(GLenum object, GLint name) {
  __glintercept_fnptr_glFinishObjectAPPLE(object, name);
  __glintercept_log(" - glFinishObjectAPPLE(object: %ld (%s), name: %ld)", object, __gl_intercept_formatenum(object), name);
}

typedef void(*__ctype_glFinishTextureSUNX)();
static __ctype_glFinishTextureSUNX __glintercept_fnptr_glFinishTextureSUNX;
void __glintercept_glFinishTextureSUNX() {
  __glintercept_fnptr_glFinishTextureSUNX();
  __glintercept_log(" - glFinishTextureSUNX()");
}

typedef void(*__ctype_glFlush)();
static __ctype_glFlush __glintercept_fnptr_glFlush;
void __glintercept_glFlush() {
  __glintercept_fnptr_glFlush();
  __glintercept_log(" - glFlush()");
}

typedef void(*__ctype_glFlushMappedBufferRange)(GLenum, GLintptr, GLsizeiptr);
static __ctype_glFlushMappedBufferRange __glintercept_fnptr_glFlushMappedBufferRange;
void __glintercept_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) {
  __glintercept_fnptr_glFlushMappedBufferRange(target, offset, length);
  __glintercept_log(" - glFlushMappedBufferRange(target: %ld (%s), offset: %ld, length: %ld)", target, __gl_intercept_formatenum(target), offset, length);
}

typedef void(*__ctype_glFlushMappedBufferRangeAPPLE)(GLenum, GLintptr, GLsizeiptr);
static __ctype_glFlushMappedBufferRangeAPPLE __glintercept_fnptr_glFlushMappedBufferRangeAPPLE;
void __glintercept_glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size) {
  __glintercept_fnptr_glFlushMappedBufferRangeAPPLE(target, offset, size);
  __glintercept_log(" - glFlushMappedBufferRangeAPPLE(target: %ld (%s), offset: %ld, size: %ld)", target, __gl_intercept_formatenum(target), offset, size);
}

typedef void(*__ctype_glFlushMappedBufferRangeEXT)(GLenum, GLintptr, GLsizeiptr);
static __ctype_glFlushMappedBufferRangeEXT __glintercept_fnptr_glFlushMappedBufferRangeEXT;
void __glintercept_glFlushMappedBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length) {
  __glintercept_fnptr_glFlushMappedBufferRangeEXT(target, offset, length);
  __glintercept_log(" - glFlushMappedBufferRangeEXT(target: %ld (%s), offset: %ld, length: %ld)", target, __gl_intercept_formatenum(target), offset, length);
}

typedef void(*__ctype_glFlushMappedNamedBufferRange)(GLuint, GLintptr, GLsizeiptr);
static __ctype_glFlushMappedNamedBufferRange __glintercept_fnptr_glFlushMappedNamedBufferRange;
void __glintercept_glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length) {
  __glintercept_fnptr_glFlushMappedNamedBufferRange(buffer, offset, length);
  __glintercept_log(" - glFlushMappedNamedBufferRange(buffer: %ld, offset: %ld, length: %ld)", buffer, offset, length);
}

typedef void(*__ctype_glFlushMappedNamedBufferRangeEXT)(GLuint, GLintptr, GLsizeiptr);
static __ctype_glFlushMappedNamedBufferRangeEXT __glintercept_fnptr_glFlushMappedNamedBufferRangeEXT;
void __glintercept_glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length) {
  __glintercept_fnptr_glFlushMappedNamedBufferRangeEXT(buffer, offset, length);
  __glintercept_log(" - glFlushMappedNamedBufferRangeEXT(buffer: %ld, offset: %ld, length: %ld)", buffer, offset, length);
}

typedef void(*__ctype_glFlushPixelDataRangeNV)(GLenum);
static __ctype_glFlushPixelDataRangeNV __glintercept_fnptr_glFlushPixelDataRangeNV;
void __glintercept_glFlushPixelDataRangeNV(GLenum target) {
  __glintercept_fnptr_glFlushPixelDataRangeNV(target);
  __glintercept_log(" - glFlushPixelDataRangeNV(target: %ld (%s))", target, __gl_intercept_formatenum(target));
}

typedef void(*__ctype_glFlushRasterSGIX)();
static __ctype_glFlushRasterSGIX __glintercept_fnptr_glFlushRasterSGIX;
void __glintercept_glFlushRasterSGIX() {
  __glintercept_fnptr_glFlushRasterSGIX();
  __glintercept_log(" - glFlushRasterSGIX()");
}

typedef void(*__ctype_glFlushStaticDataIBM)(GLenum);
static __ctype_glFlushStaticDataIBM __glintercept_fnptr_glFlushStaticDataIBM;
void __glintercept_glFlushStaticDataIBM(GLenum target) {
  __glintercept_fnptr_glFlushStaticDataIBM(target);
  __glintercept_log(" - glFlushStaticDataIBM(target: %ld (%s))", target, __gl_intercept_formatenum(target));
}

typedef void(*__ctype_glFlushVertexArrayRangeAPPLE)(GLsizei, void *);
static __ctype_glFlushVertexArrayRangeAPPLE __glintercept_fnptr_glFlushVertexArrayRangeAPPLE;
void __glintercept_glFlushVertexArrayRangeAPPLE(GLsizei length, void * pointer) {
  __glintercept_fnptr_glFlushVertexArrayRangeAPPLE(length, pointer);
  __glintercept_log(" - glFlushVertexArrayRangeAPPLE(length: %ld, pointer: %ld)", length, pointer);
}

typedef void(*__ctype_glFlushVertexArrayRangeNV)();
static __ctype_glFlushVertexArrayRangeNV __glintercept_fnptr_glFlushVertexArrayRangeNV;
void __glintercept_glFlushVertexArrayRangeNV() {
  __glintercept_fnptr_glFlushVertexArrayRangeNV();
  __glintercept_log(" - glFlushVertexArrayRangeNV()");
}

typedef void(*__ctype_glFogCoordFormatNV)(GLenum, GLsizei);
static __ctype_glFogCoordFormatNV __glintercept_fnptr_glFogCoordFormatNV;
void __glintercept_glFogCoordFormatNV(GLenum type, GLsizei stride) {
  __glintercept_fnptr_glFogCoordFormatNV(type, stride);
  __glintercept_log(" - glFogCoordFormatNV(type: %ld (%s), stride: %ld)", type, __gl_intercept_formatenum(type), stride);
}

typedef void(*__ctype_glFogCoordPointer)(GLenum, GLsizei, const void *);
static __ctype_glFogCoordPointer __glintercept_fnptr_glFogCoordPointer;
void __glintercept_glFogCoordPointer(GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glFogCoordPointer(type, stride, pointer);
  __glintercept_log(" - glFogCoordPointer(type: %ld (%s), stride: %ld, pointer: %ld)", type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glFogCoordPointerEXT)(GLenum, GLsizei, const void *);
static __ctype_glFogCoordPointerEXT __glintercept_fnptr_glFogCoordPointerEXT;
void __glintercept_glFogCoordPointerEXT(GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glFogCoordPointerEXT(type, stride, pointer);
  __glintercept_log(" - glFogCoordPointerEXT(type: %ld (%s), stride: %ld, pointer: %ld)", type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glFogCoordPointerListIBM)(GLenum, GLint, const void **, GLint);
static __ctype_glFogCoordPointerListIBM __glintercept_fnptr_glFogCoordPointerListIBM;
void __glintercept_glFogCoordPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride) {
  __glintercept_fnptr_glFogCoordPointerListIBM(type, stride, pointer, ptrstride);
  __glintercept_log(" - glFogCoordPointerListIBM(type: %ld (%s), stride: %ld, pointer: %ld, ptrstride: %ld)", type, __gl_intercept_formatenum(type), stride, pointer, ptrstride);
}

typedef void(*__ctype_glFogCoordd)(GLdouble);
static __ctype_glFogCoordd __glintercept_fnptr_glFogCoordd;
void __glintercept_glFogCoordd(GLdouble coord) {
  __glintercept_fnptr_glFogCoordd(coord);
  __glintercept_log(" - glFogCoordd(coord: %ld)", coord);
}

typedef void(*__ctype_glFogCoorddEXT)(GLdouble);
static __ctype_glFogCoorddEXT __glintercept_fnptr_glFogCoorddEXT;
void __glintercept_glFogCoorddEXT(GLdouble coord) {
  __glintercept_fnptr_glFogCoorddEXT(coord);
  __glintercept_log(" - glFogCoorddEXT(coord: %ld)", coord);
}

typedef void(*__ctype_glFogCoorddv)(const GLdouble *);
static __ctype_glFogCoorddv __glintercept_fnptr_glFogCoorddv;
void __glintercept_glFogCoorddv(const GLdouble * coord) {
  __glintercept_fnptr_glFogCoorddv(coord);
  __glintercept_log(" - glFogCoorddv(coord: %ld)", coord);
}

typedef void(*__ctype_glFogCoorddvEXT)(const GLdouble *);
static __ctype_glFogCoorddvEXT __glintercept_fnptr_glFogCoorddvEXT;
void __glintercept_glFogCoorddvEXT(const GLdouble * coord) {
  __glintercept_fnptr_glFogCoorddvEXT(coord);
  __glintercept_log(" - glFogCoorddvEXT(coord: %ld)", coord);
}

typedef void(*__ctype_glFogCoordf)(GLfloat);
static __ctype_glFogCoordf __glintercept_fnptr_glFogCoordf;
void __glintercept_glFogCoordf(GLfloat coord) {
  __glintercept_fnptr_glFogCoordf(coord);
  __glintercept_log(" - glFogCoordf(coord: %ld)", coord);
}

typedef void(*__ctype_glFogCoordfEXT)(GLfloat);
static __ctype_glFogCoordfEXT __glintercept_fnptr_glFogCoordfEXT;
void __glintercept_glFogCoordfEXT(GLfloat coord) {
  __glintercept_fnptr_glFogCoordfEXT(coord);
  __glintercept_log(" - glFogCoordfEXT(coord: %ld)", coord);
}

typedef void(*__ctype_glFogCoordfv)(const GLfloat *);
static __ctype_glFogCoordfv __glintercept_fnptr_glFogCoordfv;
void __glintercept_glFogCoordfv(const GLfloat * coord) {
  __glintercept_fnptr_glFogCoordfv(coord);
  __glintercept_log(" - glFogCoordfv(coord: %ld)", coord);
}

typedef void(*__ctype_glFogCoordfvEXT)(const GLfloat *);
static __ctype_glFogCoordfvEXT __glintercept_fnptr_glFogCoordfvEXT;
void __glintercept_glFogCoordfvEXT(const GLfloat * coord) {
  __glintercept_fnptr_glFogCoordfvEXT(coord);
  __glintercept_log(" - glFogCoordfvEXT(coord: %ld)", coord);
}

typedef void(*__ctype_glFogCoordhNV)(GLhalfNV);
static __ctype_glFogCoordhNV __glintercept_fnptr_glFogCoordhNV;
void __glintercept_glFogCoordhNV(GLhalfNV fog) {
  __glintercept_fnptr_glFogCoordhNV(fog);
  __glintercept_log(" - glFogCoordhNV(fog: %ld)", fog);
}

typedef void(*__ctype_glFogCoordhvNV)(const GLhalfNV *);
static __ctype_glFogCoordhvNV __glintercept_fnptr_glFogCoordhvNV;
void __glintercept_glFogCoordhvNV(const GLhalfNV * fog) {
  __glintercept_fnptr_glFogCoordhvNV(fog);
  __glintercept_log(" - glFogCoordhvNV(fog: %ld)", fog);
}

typedef void(*__ctype_glFogFuncSGIS)(GLsizei, const GLfloat *);
static __ctype_glFogFuncSGIS __glintercept_fnptr_glFogFuncSGIS;
void __glintercept_glFogFuncSGIS(GLsizei n, const GLfloat * points) {
  __glintercept_fnptr_glFogFuncSGIS(n, points);
  __glintercept_log(" - glFogFuncSGIS(n: %ld, points: %ld)", n, points);
}

typedef void(*__ctype_glFogf)(GLenum, GLfloat);
static __ctype_glFogf __glintercept_fnptr_glFogf;
void __glintercept_glFogf(GLenum pname, GLfloat param) {
  __glintercept_fnptr_glFogf(pname, param);
  __glintercept_log(" - glFogf(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glFogfv)(GLenum, const GLfloat *);
static __ctype_glFogfv __glintercept_fnptr_glFogfv;
void __glintercept_glFogfv(GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glFogfv(pname, params);
  __glintercept_log(" - glFogfv(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glFogi)(GLenum, GLint);
static __ctype_glFogi __glintercept_fnptr_glFogi;
void __glintercept_glFogi(GLenum pname, GLint param) {
  __glintercept_fnptr_glFogi(pname, param);
  __glintercept_log(" - glFogi(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glFogiv)(GLenum, const GLint *);
static __ctype_glFogiv __glintercept_fnptr_glFogiv;
void __glintercept_glFogiv(GLenum pname, const GLint * params) {
  __glintercept_fnptr_glFogiv(pname, params);
  __glintercept_log(" - glFogiv(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glFogx)(GLenum, GLfixed);
static __ctype_glFogx __glintercept_fnptr_glFogx;
void __glintercept_glFogx(GLenum pname, GLfixed param) {
  __glintercept_fnptr_glFogx(pname, param);
  __glintercept_log(" - glFogx(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glFogxOES)(GLenum, GLfixed);
static __ctype_glFogxOES __glintercept_fnptr_glFogxOES;
void __glintercept_glFogxOES(GLenum pname, GLfixed param) {
  __glintercept_fnptr_glFogxOES(pname, param);
  __glintercept_log(" - glFogxOES(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glFogxv)(GLenum, const GLfixed *);
static __ctype_glFogxv __glintercept_fnptr_glFogxv;
void __glintercept_glFogxv(GLenum pname, const GLfixed * param) {
  __glintercept_fnptr_glFogxv(pname, param);
  __glintercept_log(" - glFogxv(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glFogxvOES)(GLenum, const GLfixed *);
static __ctype_glFogxvOES __glintercept_fnptr_glFogxvOES;
void __glintercept_glFogxvOES(GLenum pname, const GLfixed * param) {
  __glintercept_fnptr_glFogxvOES(pname, param);
  __glintercept_log(" - glFogxvOES(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glFragmentColorMaterialSGIX)(GLenum, GLenum);
static __ctype_glFragmentColorMaterialSGIX __glintercept_fnptr_glFragmentColorMaterialSGIX;
void __glintercept_glFragmentColorMaterialSGIX(GLenum face, GLenum mode) {
  __glintercept_fnptr_glFragmentColorMaterialSGIX(face, mode);
  __glintercept_log(" - glFragmentColorMaterialSGIX(face: %ld (%s), mode: %ld (%s))", face, __gl_intercept_formatenum(face), mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glFragmentCoverageColorNV)(GLuint);
static __ctype_glFragmentCoverageColorNV __glintercept_fnptr_glFragmentCoverageColorNV;
void __glintercept_glFragmentCoverageColorNV(GLuint color) {
  __glintercept_fnptr_glFragmentCoverageColorNV(color);
  __glintercept_log(" - glFragmentCoverageColorNV(color: %ld)", color);
}

typedef void(*__ctype_glFragmentLightModelfSGIX)(GLenum, GLfloat);
static __ctype_glFragmentLightModelfSGIX __glintercept_fnptr_glFragmentLightModelfSGIX;
void __glintercept_glFragmentLightModelfSGIX(GLenum pname, GLfloat param) {
  __glintercept_fnptr_glFragmentLightModelfSGIX(pname, param);
  __glintercept_log(" - glFragmentLightModelfSGIX(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glFragmentLightModelfvSGIX)(GLenum, const GLfloat *);
static __ctype_glFragmentLightModelfvSGIX __glintercept_fnptr_glFragmentLightModelfvSGIX;
void __glintercept_glFragmentLightModelfvSGIX(GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glFragmentLightModelfvSGIX(pname, params);
  __glintercept_log(" - glFragmentLightModelfvSGIX(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glFragmentLightModeliSGIX)(GLenum, GLint);
static __ctype_glFragmentLightModeliSGIX __glintercept_fnptr_glFragmentLightModeliSGIX;
void __glintercept_glFragmentLightModeliSGIX(GLenum pname, GLint param) {
  __glintercept_fnptr_glFragmentLightModeliSGIX(pname, param);
  __glintercept_log(" - glFragmentLightModeliSGIX(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glFragmentLightModelivSGIX)(GLenum, const GLint *);
static __ctype_glFragmentLightModelivSGIX __glintercept_fnptr_glFragmentLightModelivSGIX;
void __glintercept_glFragmentLightModelivSGIX(GLenum pname, const GLint * params) {
  __glintercept_fnptr_glFragmentLightModelivSGIX(pname, params);
  __glintercept_log(" - glFragmentLightModelivSGIX(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glFragmentLightfSGIX)(GLenum, GLenum, GLfloat);
static __ctype_glFragmentLightfSGIX __glintercept_fnptr_glFragmentLightfSGIX;
void __glintercept_glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param) {
  __glintercept_fnptr_glFragmentLightfSGIX(light, pname, param);
  __glintercept_log(" - glFragmentLightfSGIX(light: %ld (%s), pname: %ld (%s), param: %ld)", light, __gl_intercept_formatenum(light), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glFragmentLightfvSGIX)(GLenum, GLenum, const GLfloat *);
static __ctype_glFragmentLightfvSGIX __glintercept_fnptr_glFragmentLightfvSGIX;
void __glintercept_glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glFragmentLightfvSGIX(light, pname, params);
  __glintercept_log(" - glFragmentLightfvSGIX(light: %ld (%s), pname: %ld (%s), params: %ld)", light, __gl_intercept_formatenum(light), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glFragmentLightiSGIX)(GLenum, GLenum, GLint);
static __ctype_glFragmentLightiSGIX __glintercept_fnptr_glFragmentLightiSGIX;
void __glintercept_glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param) {
  __glintercept_fnptr_glFragmentLightiSGIX(light, pname, param);
  __glintercept_log(" - glFragmentLightiSGIX(light: %ld (%s), pname: %ld (%s), param: %ld)", light, __gl_intercept_formatenum(light), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glFragmentLightivSGIX)(GLenum, GLenum, const GLint *);
static __ctype_glFragmentLightivSGIX __glintercept_fnptr_glFragmentLightivSGIX;
void __glintercept_glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glFragmentLightivSGIX(light, pname, params);
  __glintercept_log(" - glFragmentLightivSGIX(light: %ld (%s), pname: %ld (%s), params: %ld)", light, __gl_intercept_formatenum(light), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glFragmentMaterialfSGIX)(GLenum, GLenum, GLfloat);
static __ctype_glFragmentMaterialfSGIX __glintercept_fnptr_glFragmentMaterialfSGIX;
void __glintercept_glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param) {
  __glintercept_fnptr_glFragmentMaterialfSGIX(face, pname, param);
  __glintercept_log(" - glFragmentMaterialfSGIX(face: %ld (%s), pname: %ld (%s), param: %ld)", face, __gl_intercept_formatenum(face), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glFragmentMaterialfvSGIX)(GLenum, GLenum, const GLfloat *);
static __ctype_glFragmentMaterialfvSGIX __glintercept_fnptr_glFragmentMaterialfvSGIX;
void __glintercept_glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glFragmentMaterialfvSGIX(face, pname, params);
  __glintercept_log(" - glFragmentMaterialfvSGIX(face: %ld (%s), pname: %ld (%s), params: %ld)", face, __gl_intercept_formatenum(face), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glFragmentMaterialiSGIX)(GLenum, GLenum, GLint);
static __ctype_glFragmentMaterialiSGIX __glintercept_fnptr_glFragmentMaterialiSGIX;
void __glintercept_glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param) {
  __glintercept_fnptr_glFragmentMaterialiSGIX(face, pname, param);
  __glintercept_log(" - glFragmentMaterialiSGIX(face: %ld (%s), pname: %ld (%s), param: %ld)", face, __gl_intercept_formatenum(face), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glFragmentMaterialivSGIX)(GLenum, GLenum, const GLint *);
static __ctype_glFragmentMaterialivSGIX __glintercept_fnptr_glFragmentMaterialivSGIX;
void __glintercept_glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glFragmentMaterialivSGIX(face, pname, params);
  __glintercept_log(" - glFragmentMaterialivSGIX(face: %ld (%s), pname: %ld (%s), params: %ld)", face, __gl_intercept_formatenum(face), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glFrameTerminatorGREMEDY)();
static __ctype_glFrameTerminatorGREMEDY __glintercept_fnptr_glFrameTerminatorGREMEDY;
void __glintercept_glFrameTerminatorGREMEDY() {
  __glintercept_fnptr_glFrameTerminatorGREMEDY();
  __glintercept_log(" - glFrameTerminatorGREMEDY()");
}

typedef void(*__ctype_glFrameZoomSGIX)(GLint);
static __ctype_glFrameZoomSGIX __glintercept_fnptr_glFrameZoomSGIX;
void __glintercept_glFrameZoomSGIX(GLint factor) {
  __glintercept_fnptr_glFrameZoomSGIX(factor);
  __glintercept_log(" - glFrameZoomSGIX(factor: %ld)", factor);
}

typedef void(*__ctype_glFramebufferDrawBufferEXT)(GLuint, GLenum);
static __ctype_glFramebufferDrawBufferEXT __glintercept_fnptr_glFramebufferDrawBufferEXT;
void __glintercept_glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode) {
  __glintercept_fnptr_glFramebufferDrawBufferEXT(framebuffer, mode);
  __glintercept_log(" - glFramebufferDrawBufferEXT(framebuffer: %ld, mode: %ld (%s))", framebuffer, mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glFramebufferDrawBuffersEXT)(GLuint, GLsizei, const GLenum *);
static __ctype_glFramebufferDrawBuffersEXT __glintercept_fnptr_glFramebufferDrawBuffersEXT;
void __glintercept_glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum * bufs) {
  __glintercept_fnptr_glFramebufferDrawBuffersEXT(framebuffer, n, bufs);
  __glintercept_log(" - glFramebufferDrawBuffersEXT(framebuffer: %ld, n: %ld, bufs: %ld)", framebuffer, n, bufs);
}

typedef void(*__ctype_glFramebufferFetchBarrierEXT)();
static __ctype_glFramebufferFetchBarrierEXT __glintercept_fnptr_glFramebufferFetchBarrierEXT;
void __glintercept_glFramebufferFetchBarrierEXT() {
  __glintercept_fnptr_glFramebufferFetchBarrierEXT();
  __glintercept_log(" - glFramebufferFetchBarrierEXT()");
}

typedef void(*__ctype_glFramebufferFetchBarrierQCOM)();
static __ctype_glFramebufferFetchBarrierQCOM __glintercept_fnptr_glFramebufferFetchBarrierQCOM;
void __glintercept_glFramebufferFetchBarrierQCOM() {
  __glintercept_fnptr_glFramebufferFetchBarrierQCOM();
  __glintercept_log(" - glFramebufferFetchBarrierQCOM()");
}

typedef void(*__ctype_glFramebufferFoveationConfigQCOM)(GLuint, GLuint, GLuint, GLuint, GLuint *);
static __ctype_glFramebufferFoveationConfigQCOM __glintercept_fnptr_glFramebufferFoveationConfigQCOM;
void __glintercept_glFramebufferFoveationConfigQCOM(GLuint framebuffer, GLuint numLayers, GLuint focalPointsPerLayer, GLuint requestedFeatures, GLuint * providedFeatures) {
  __glintercept_fnptr_glFramebufferFoveationConfigQCOM(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures);
  __glintercept_log(" - glFramebufferFoveationConfigQCOM(framebuffer: %ld, numLayers: %ld, focalPointsPerLayer: %ld, requestedFeatures: %ld, providedFeatures: %ld)", framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures);
}

typedef void(*__ctype_glFramebufferFoveationParametersQCOM)(GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glFramebufferFoveationParametersQCOM __glintercept_fnptr_glFramebufferFoveationParametersQCOM;
void __glintercept_glFramebufferFoveationParametersQCOM(GLuint framebuffer, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea) {
  __glintercept_fnptr_glFramebufferFoveationParametersQCOM(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
  __glintercept_log(" - glFramebufferFoveationParametersQCOM(framebuffer: %ld, layer: %ld, focalPoint: %ld, focalX: %ld, focalY: %ld, gainX: %ld, gainY: %ld, foveaArea: %ld)", framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
}

typedef void(*__ctype_glFramebufferParameteri)(GLenum, GLenum, GLint);
static __ctype_glFramebufferParameteri __glintercept_fnptr_glFramebufferParameteri;
void __glintercept_glFramebufferParameteri(GLenum target, GLenum pname, GLint param) {
  __glintercept_fnptr_glFramebufferParameteri(target, pname, param);
  __glintercept_log(" - glFramebufferParameteri(target: %ld (%s), pname: %ld (%s), param: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glFramebufferPixelLocalStorageSizeEXT)(GLuint, GLsizei);
static __ctype_glFramebufferPixelLocalStorageSizeEXT __glintercept_fnptr_glFramebufferPixelLocalStorageSizeEXT;
void __glintercept_glFramebufferPixelLocalStorageSizeEXT(GLuint target, GLsizei size) {
  __glintercept_fnptr_glFramebufferPixelLocalStorageSizeEXT(target, size);
  __glintercept_log(" - glFramebufferPixelLocalStorageSizeEXT(target: %ld, size: %ld)", target, size);
}

typedef void(*__ctype_glFramebufferReadBufferEXT)(GLuint, GLenum);
static __ctype_glFramebufferReadBufferEXT __glintercept_fnptr_glFramebufferReadBufferEXT;
void __glintercept_glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode) {
  __glintercept_fnptr_glFramebufferReadBufferEXT(framebuffer, mode);
  __glintercept_log(" - glFramebufferReadBufferEXT(framebuffer: %ld, mode: %ld (%s))", framebuffer, mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glFramebufferRenderbuffer)(GLenum, GLenum, GLenum, GLuint);
static __ctype_glFramebufferRenderbuffer __glintercept_fnptr_glFramebufferRenderbuffer;
void __glintercept_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  __glintercept_fnptr_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
  __glintercept_log(" - glFramebufferRenderbuffer(target: %ld (%s), attachment: %ld (%s), renderbuffertarget: %ld (%s), renderbuffer: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), renderbuffertarget, __gl_intercept_formatenum(renderbuffertarget), renderbuffer);
}

typedef void(*__ctype_glFramebufferRenderbufferEXT)(GLenum, GLenum, GLenum, GLuint);
static __ctype_glFramebufferRenderbufferEXT __glintercept_fnptr_glFramebufferRenderbufferEXT;
void __glintercept_glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  __glintercept_fnptr_glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
  __glintercept_log(" - glFramebufferRenderbufferEXT(target: %ld (%s), attachment: %ld (%s), renderbuffertarget: %ld (%s), renderbuffer: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), renderbuffertarget, __gl_intercept_formatenum(renderbuffertarget), renderbuffer);
}

typedef void(*__ctype_glFramebufferRenderbufferOES)(GLenum, GLenum, GLenum, GLuint);
static __ctype_glFramebufferRenderbufferOES __glintercept_fnptr_glFramebufferRenderbufferOES;
void __glintercept_glFramebufferRenderbufferOES(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  __glintercept_fnptr_glFramebufferRenderbufferOES(target, attachment, renderbuffertarget, renderbuffer);
  __glintercept_log(" - glFramebufferRenderbufferOES(target: %ld (%s), attachment: %ld (%s), renderbuffertarget: %ld (%s), renderbuffer: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), renderbuffertarget, __gl_intercept_formatenum(renderbuffertarget), renderbuffer);
}

typedef void(*__ctype_glFramebufferSampleLocationsfvARB)(GLenum, GLuint, GLsizei, const GLfloat *);
static __ctype_glFramebufferSampleLocationsfvARB __glintercept_fnptr_glFramebufferSampleLocationsfvARB;
void __glintercept_glFramebufferSampleLocationsfvARB(GLenum target, GLuint start, GLsizei count, const GLfloat * v) {
  __glintercept_fnptr_glFramebufferSampleLocationsfvARB(target, start, count, v);
  __glintercept_log(" - glFramebufferSampleLocationsfvARB(target: %ld (%s), start: %ld, count: %ld, v: %ld)", target, __gl_intercept_formatenum(target), start, count, v);
}

typedef void(*__ctype_glFramebufferSampleLocationsfvNV)(GLenum, GLuint, GLsizei, const GLfloat *);
static __ctype_glFramebufferSampleLocationsfvNV __glintercept_fnptr_glFramebufferSampleLocationsfvNV;
void __glintercept_glFramebufferSampleLocationsfvNV(GLenum target, GLuint start, GLsizei count, const GLfloat * v) {
  __glintercept_fnptr_glFramebufferSampleLocationsfvNV(target, start, count, v);
  __glintercept_log(" - glFramebufferSampleLocationsfvNV(target: %ld (%s), start: %ld, count: %ld, v: %ld)", target, __gl_intercept_formatenum(target), start, count, v);
}

typedef void(*__ctype_glFramebufferSamplePositionsfvAMD)(GLenum, GLuint, GLuint, const GLfloat *);
static __ctype_glFramebufferSamplePositionsfvAMD __glintercept_fnptr_glFramebufferSamplePositionsfvAMD;
void __glintercept_glFramebufferSamplePositionsfvAMD(GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat * values) {
  __glintercept_fnptr_glFramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values);
  __glintercept_log(" - glFramebufferSamplePositionsfvAMD(target: %ld (%s), numsamples: %ld, pixelindex: %ld, values: %ld)", target, __gl_intercept_formatenum(target), numsamples, pixelindex, values);
}

typedef void(*__ctype_glFramebufferTexture)(GLenum, GLenum, GLuint, GLint);
static __ctype_glFramebufferTexture __glintercept_fnptr_glFramebufferTexture;
void __glintercept_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level) {
  __glintercept_fnptr_glFramebufferTexture(target, attachment, texture, level);
  __glintercept_log(" - glFramebufferTexture(target: %ld (%s), attachment: %ld (%s), texture: %ld, level: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), texture, level);
}

typedef void(*__ctype_glFramebufferTexture1D)(GLenum, GLenum, GLenum, GLuint, GLint);
static __ctype_glFramebufferTexture1D __glintercept_fnptr_glFramebufferTexture1D;
void __glintercept_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  __glintercept_fnptr_glFramebufferTexture1D(target, attachment, textarget, texture, level);
  __glintercept_log(" - glFramebufferTexture1D(target: %ld (%s), attachment: %ld (%s), textarget: %ld (%s), texture: %ld, level: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), textarget, __gl_intercept_formatenum(textarget), texture, level);
}

typedef void(*__ctype_glFramebufferTexture1DEXT)(GLenum, GLenum, GLenum, GLuint, GLint);
static __ctype_glFramebufferTexture1DEXT __glintercept_fnptr_glFramebufferTexture1DEXT;
void __glintercept_glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  __glintercept_fnptr_glFramebufferTexture1DEXT(target, attachment, textarget, texture, level);
  __glintercept_log(" - glFramebufferTexture1DEXT(target: %ld (%s), attachment: %ld (%s), textarget: %ld (%s), texture: %ld, level: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), textarget, __gl_intercept_formatenum(textarget), texture, level);
}

typedef void(*__ctype_glFramebufferTexture2D)(GLenum, GLenum, GLenum, GLuint, GLint);
static __ctype_glFramebufferTexture2D __glintercept_fnptr_glFramebufferTexture2D;
void __glintercept_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  __glintercept_fnptr_glFramebufferTexture2D(target, attachment, textarget, texture, level);
  __glintercept_log(" - glFramebufferTexture2D(target: %ld (%s), attachment: %ld (%s), textarget: %ld (%s), texture: %ld, level: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), textarget, __gl_intercept_formatenum(textarget), texture, level);
}

typedef void(*__ctype_glFramebufferTexture2DEXT)(GLenum, GLenum, GLenum, GLuint, GLint);
static __ctype_glFramebufferTexture2DEXT __glintercept_fnptr_glFramebufferTexture2DEXT;
void __glintercept_glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  __glintercept_fnptr_glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
  __glintercept_log(" - glFramebufferTexture2DEXT(target: %ld (%s), attachment: %ld (%s), textarget: %ld (%s), texture: %ld, level: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), textarget, __gl_intercept_formatenum(textarget), texture, level);
}

typedef void(*__ctype_glFramebufferTexture2DDownsampleIMG)(GLenum, GLenum, GLenum, GLuint, GLint, GLint, GLint);
static __ctype_glFramebufferTexture2DDownsampleIMG __glintercept_fnptr_glFramebufferTexture2DDownsampleIMG;
void __glintercept_glFramebufferTexture2DDownsampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint xscale, GLint yscale) {
  __glintercept_fnptr_glFramebufferTexture2DDownsampleIMG(target, attachment, textarget, texture, level, xscale, yscale);
  __glintercept_log(" - glFramebufferTexture2DDownsampleIMG(target: %ld (%s), attachment: %ld (%s), textarget: %ld (%s), texture: %ld, level: %ld, xscale: %ld, yscale: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), textarget, __gl_intercept_formatenum(textarget), texture, level, xscale, yscale);
}

typedef void(*__ctype_glFramebufferTexture2DMultisampleEXT)(GLenum, GLenum, GLenum, GLuint, GLint, GLsizei);
static __ctype_glFramebufferTexture2DMultisampleEXT __glintercept_fnptr_glFramebufferTexture2DMultisampleEXT;
void __glintercept_glFramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) {
  __glintercept_fnptr_glFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples);
  __glintercept_log(" - glFramebufferTexture2DMultisampleEXT(target: %ld (%s), attachment: %ld (%s), textarget: %ld (%s), texture: %ld, level: %ld, samples: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), textarget, __gl_intercept_formatenum(textarget), texture, level, samples);
}

typedef void(*__ctype_glFramebufferTexture2DMultisampleIMG)(GLenum, GLenum, GLenum, GLuint, GLint, GLsizei);
static __ctype_glFramebufferTexture2DMultisampleIMG __glintercept_fnptr_glFramebufferTexture2DMultisampleIMG;
void __glintercept_glFramebufferTexture2DMultisampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) {
  __glintercept_fnptr_glFramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples);
  __glintercept_log(" - glFramebufferTexture2DMultisampleIMG(target: %ld (%s), attachment: %ld (%s), textarget: %ld (%s), texture: %ld, level: %ld, samples: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), textarget, __gl_intercept_formatenum(textarget), texture, level, samples);
}

typedef void(*__ctype_glFramebufferTexture2DOES)(GLenum, GLenum, GLenum, GLuint, GLint);
static __ctype_glFramebufferTexture2DOES __glintercept_fnptr_glFramebufferTexture2DOES;
void __glintercept_glFramebufferTexture2DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  __glintercept_fnptr_glFramebufferTexture2DOES(target, attachment, textarget, texture, level);
  __glintercept_log(" - glFramebufferTexture2DOES(target: %ld (%s), attachment: %ld (%s), textarget: %ld (%s), texture: %ld, level: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), textarget, __gl_intercept_formatenum(textarget), texture, level);
}

typedef void(*__ctype_glFramebufferTexture3D)(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
static __ctype_glFramebufferTexture3D __glintercept_fnptr_glFramebufferTexture3D;
void __glintercept_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
  __glintercept_fnptr_glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);
  __glintercept_log(" - glFramebufferTexture3D(target: %ld (%s), attachment: %ld (%s), textarget: %ld (%s), texture: %ld, level: %ld, zoffset: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), textarget, __gl_intercept_formatenum(textarget), texture, level, zoffset);
}

typedef void(*__ctype_glFramebufferTexture3DEXT)(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
static __ctype_glFramebufferTexture3DEXT __glintercept_fnptr_glFramebufferTexture3DEXT;
void __glintercept_glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
  __glintercept_fnptr_glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);
  __glintercept_log(" - glFramebufferTexture3DEXT(target: %ld (%s), attachment: %ld (%s), textarget: %ld (%s), texture: %ld, level: %ld, zoffset: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), textarget, __gl_intercept_formatenum(textarget), texture, level, zoffset);
}

typedef void(*__ctype_glFramebufferTexture3DOES)(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
static __ctype_glFramebufferTexture3DOES __glintercept_fnptr_glFramebufferTexture3DOES;
void __glintercept_glFramebufferTexture3DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
  __glintercept_fnptr_glFramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset);
  __glintercept_log(" - glFramebufferTexture3DOES(target: %ld (%s), attachment: %ld (%s), textarget: %ld (%s), texture: %ld, level: %ld, zoffset: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), textarget, __gl_intercept_formatenum(textarget), texture, level, zoffset);
}

typedef void(*__ctype_glFramebufferTextureARB)(GLenum, GLenum, GLuint, GLint);
static __ctype_glFramebufferTextureARB __glintercept_fnptr_glFramebufferTextureARB;
void __glintercept_glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level) {
  __glintercept_fnptr_glFramebufferTextureARB(target, attachment, texture, level);
  __glintercept_log(" - glFramebufferTextureARB(target: %ld (%s), attachment: %ld (%s), texture: %ld, level: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), texture, level);
}

typedef void(*__ctype_glFramebufferTextureEXT)(GLenum, GLenum, GLuint, GLint);
static __ctype_glFramebufferTextureEXT __glintercept_fnptr_glFramebufferTextureEXT;
void __glintercept_glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level) {
  __glintercept_fnptr_glFramebufferTextureEXT(target, attachment, texture, level);
  __glintercept_log(" - glFramebufferTextureEXT(target: %ld (%s), attachment: %ld (%s), texture: %ld, level: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), texture, level);
}

typedef void(*__ctype_glFramebufferTextureFaceARB)(GLenum, GLenum, GLuint, GLint, GLenum);
static __ctype_glFramebufferTextureFaceARB __glintercept_fnptr_glFramebufferTextureFaceARB;
void __glintercept_glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) {
  __glintercept_fnptr_glFramebufferTextureFaceARB(target, attachment, texture, level, face);
  __glintercept_log(" - glFramebufferTextureFaceARB(target: %ld (%s), attachment: %ld (%s), texture: %ld, level: %ld, face: %ld (%s))", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), texture, level, face, __gl_intercept_formatenum(face));
}

typedef void(*__ctype_glFramebufferTextureFaceEXT)(GLenum, GLenum, GLuint, GLint, GLenum);
static __ctype_glFramebufferTextureFaceEXT __glintercept_fnptr_glFramebufferTextureFaceEXT;
void __glintercept_glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) {
  __glintercept_fnptr_glFramebufferTextureFaceEXT(target, attachment, texture, level, face);
  __glintercept_log(" - glFramebufferTextureFaceEXT(target: %ld (%s), attachment: %ld (%s), texture: %ld, level: %ld, face: %ld (%s))", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), texture, level, face, __gl_intercept_formatenum(face));
}

typedef void(*__ctype_glFramebufferTextureLayer)(GLenum, GLenum, GLuint, GLint, GLint);
static __ctype_glFramebufferTextureLayer __glintercept_fnptr_glFramebufferTextureLayer;
void __glintercept_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  __glintercept_fnptr_glFramebufferTextureLayer(target, attachment, texture, level, layer);
  __glintercept_log(" - glFramebufferTextureLayer(target: %ld (%s), attachment: %ld (%s), texture: %ld, level: %ld, layer: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), texture, level, layer);
}

typedef void(*__ctype_glFramebufferTextureLayerARB)(GLenum, GLenum, GLuint, GLint, GLint);
static __ctype_glFramebufferTextureLayerARB __glintercept_fnptr_glFramebufferTextureLayerARB;
void __glintercept_glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  __glintercept_fnptr_glFramebufferTextureLayerARB(target, attachment, texture, level, layer);
  __glintercept_log(" - glFramebufferTextureLayerARB(target: %ld (%s), attachment: %ld (%s), texture: %ld, level: %ld, layer: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), texture, level, layer);
}

typedef void(*__ctype_glFramebufferTextureLayerEXT)(GLenum, GLenum, GLuint, GLint, GLint);
static __ctype_glFramebufferTextureLayerEXT __glintercept_fnptr_glFramebufferTextureLayerEXT;
void __glintercept_glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  __glintercept_fnptr_glFramebufferTextureLayerEXT(target, attachment, texture, level, layer);
  __glintercept_log(" - glFramebufferTextureLayerEXT(target: %ld (%s), attachment: %ld (%s), texture: %ld, level: %ld, layer: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), texture, level, layer);
}

typedef void(*__ctype_glFramebufferTextureLayerDownsampleIMG)(GLenum, GLenum, GLuint, GLint, GLint, GLint, GLint);
static __ctype_glFramebufferTextureLayerDownsampleIMG __glintercept_fnptr_glFramebufferTextureLayerDownsampleIMG;
void __glintercept_glFramebufferTextureLayerDownsampleIMG(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale) {
  __glintercept_fnptr_glFramebufferTextureLayerDownsampleIMG(target, attachment, texture, level, layer, xscale, yscale);
  __glintercept_log(" - glFramebufferTextureLayerDownsampleIMG(target: %ld (%s), attachment: %ld (%s), texture: %ld, level: %ld, layer: %ld, xscale: %ld, yscale: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), texture, level, layer, xscale, yscale);
}

typedef void(*__ctype_glFramebufferTextureMultisampleMultiviewOVR)(GLenum, GLenum, GLuint, GLint, GLsizei, GLint, GLsizei);
static __ctype_glFramebufferTextureMultisampleMultiviewOVR __glintercept_fnptr_glFramebufferTextureMultisampleMultiviewOVR;
void __glintercept_glFramebufferTextureMultisampleMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews) {
  __glintercept_fnptr_glFramebufferTextureMultisampleMultiviewOVR(target, attachment, texture, level, samples, baseViewIndex, numViews);
  __glintercept_log(" - glFramebufferTextureMultisampleMultiviewOVR(target: %ld (%s), attachment: %ld (%s), texture: %ld, level: %ld, samples: %ld, baseViewIndex: %ld, numViews: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), texture, level, samples, baseViewIndex, numViews);
}

typedef void(*__ctype_glFramebufferTextureMultiviewOVR)(GLenum, GLenum, GLuint, GLint, GLint, GLsizei);
static __ctype_glFramebufferTextureMultiviewOVR __glintercept_fnptr_glFramebufferTextureMultiviewOVR;
void __glintercept_glFramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) {
  __glintercept_fnptr_glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews);
  __glintercept_log(" - glFramebufferTextureMultiviewOVR(target: %ld (%s), attachment: %ld (%s), texture: %ld, level: %ld, baseViewIndex: %ld, numViews: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), texture, level, baseViewIndex, numViews);
}

typedef void(*__ctype_glFramebufferTextureOES)(GLenum, GLenum, GLuint, GLint);
static __ctype_glFramebufferTextureOES __glintercept_fnptr_glFramebufferTextureOES;
void __glintercept_glFramebufferTextureOES(GLenum target, GLenum attachment, GLuint texture, GLint level) {
  __glintercept_fnptr_glFramebufferTextureOES(target, attachment, texture, level);
  __glintercept_log(" - glFramebufferTextureOES(target: %ld (%s), attachment: %ld (%s), texture: %ld, level: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), texture, level);
}

typedef void(*__ctype_glFreeObjectBufferATI)(GLuint);
static __ctype_glFreeObjectBufferATI __glintercept_fnptr_glFreeObjectBufferATI;
void __glintercept_glFreeObjectBufferATI(GLuint buffer) {
  __glintercept_fnptr_glFreeObjectBufferATI(buffer);
  __glintercept_log(" - glFreeObjectBufferATI(buffer: %ld)", buffer);
}

typedef void(*__ctype_glFrontFace)(GLenum);
static __ctype_glFrontFace __glintercept_fnptr_glFrontFace;
void __glintercept_glFrontFace(GLenum mode) {
  __glintercept_fnptr_glFrontFace(mode);
  __glintercept_log(" - glFrontFace(mode: %ld (%s))", mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glFrustum)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glFrustum __glintercept_fnptr_glFrustum;
void __glintercept_glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  __glintercept_fnptr_glFrustum(left, right, bottom, top, zNear, zFar);
  __glintercept_log(" - glFrustum(left: %ld, right: %ld, bottom: %ld, top: %ld, zNear: %ld, zFar: %ld)", left, right, bottom, top, zNear, zFar);
}

typedef void(*__ctype_glFrustumf)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glFrustumf __glintercept_fnptr_glFrustumf;
void __glintercept_glFrustumf(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) {
  __glintercept_fnptr_glFrustumf(l, r, b, t, n, f);
  __glintercept_log(" - glFrustumf(l: %ld, r: %ld, b: %ld, t: %ld, n: %ld, f: %ld)", l, r, b, t, n, f);
}

typedef void(*__ctype_glFrustumfOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glFrustumfOES __glintercept_fnptr_glFrustumfOES;
void __glintercept_glFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) {
  __glintercept_fnptr_glFrustumfOES(l, r, b, t, n, f);
  __glintercept_log(" - glFrustumfOES(l: %ld, r: %ld, b: %ld, t: %ld, n: %ld, f: %ld)", l, r, b, t, n, f);
}

typedef void(*__ctype_glFrustumx)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
static __ctype_glFrustumx __glintercept_fnptr_glFrustumx;
void __glintercept_glFrustumx(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) {
  __glintercept_fnptr_glFrustumx(l, r, b, t, n, f);
  __glintercept_log(" - glFrustumx(l: %ld, r: %ld, b: %ld, t: %ld, n: %ld, f: %ld)", l, r, b, t, n, f);
}

typedef void(*__ctype_glFrustumxOES)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
static __ctype_glFrustumxOES __glintercept_fnptr_glFrustumxOES;
void __glintercept_glFrustumxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) {
  __glintercept_fnptr_glFrustumxOES(l, r, b, t, n, f);
  __glintercept_log(" - glFrustumxOES(l: %ld, r: %ld, b: %ld, t: %ld, n: %ld, f: %ld)", l, r, b, t, n, f);
}

typedef GLuint(*__ctype_glGenAsyncMarkersSGIX)(GLsizei);
static __ctype_glGenAsyncMarkersSGIX __glintercept_fnptr_glGenAsyncMarkersSGIX;
GLuint __glintercept_glGenAsyncMarkersSGIX(GLsizei range) {
  GLuint __ret = __glintercept_fnptr_glGenAsyncMarkersSGIX(range);
  __glintercept_log(" - glGenAsyncMarkersSGIX(range: %ld) -> %ld", range, __ret);
  return __ret;
}

typedef void(*__ctype_glGenBuffers)(GLsizei, GLuint *);
static __ctype_glGenBuffers __glintercept_fnptr_glGenBuffers;
void __glintercept_glGenBuffers(GLsizei n, GLuint * buffers) {
  __glintercept_fnptr_glGenBuffers(n, buffers);
  __glintercept_log(" - glGenBuffers(n: %ld, buffers: %ld)", n, buffers);
}

typedef void(*__ctype_glGenBuffersARB)(GLsizei, GLuint *);
static __ctype_glGenBuffersARB __glintercept_fnptr_glGenBuffersARB;
void __glintercept_glGenBuffersARB(GLsizei n, GLuint * buffers) {
  __glintercept_fnptr_glGenBuffersARB(n, buffers);
  __glintercept_log(" - glGenBuffersARB(n: %ld, buffers: %ld)", n, buffers);
}

typedef void(*__ctype_glGenFencesAPPLE)(GLsizei, GLuint *);
static __ctype_glGenFencesAPPLE __glintercept_fnptr_glGenFencesAPPLE;
void __glintercept_glGenFencesAPPLE(GLsizei n, GLuint * fences) {
  __glintercept_fnptr_glGenFencesAPPLE(n, fences);
  __glintercept_log(" - glGenFencesAPPLE(n: %ld, fences: %ld)", n, fences);
}

typedef void(*__ctype_glGenFencesNV)(GLsizei, GLuint *);
static __ctype_glGenFencesNV __glintercept_fnptr_glGenFencesNV;
void __glintercept_glGenFencesNV(GLsizei n, GLuint * fences) {
  __glintercept_fnptr_glGenFencesNV(n, fences);
  __glintercept_log(" - glGenFencesNV(n: %ld, fences: %ld)", n, fences);
}

typedef GLuint(*__ctype_glGenFragmentShadersATI)(GLuint);
static __ctype_glGenFragmentShadersATI __glintercept_fnptr_glGenFragmentShadersATI;
GLuint __glintercept_glGenFragmentShadersATI(GLuint range) {
  GLuint __ret = __glintercept_fnptr_glGenFragmentShadersATI(range);
  __glintercept_log(" - glGenFragmentShadersATI(range: %ld) -> %ld", range, __ret);
  return __ret;
}

typedef void(*__ctype_glGenFramebuffers)(GLsizei, GLuint *);
static __ctype_glGenFramebuffers __glintercept_fnptr_glGenFramebuffers;
void __glintercept_glGenFramebuffers(GLsizei n, GLuint * framebuffers) {
  __glintercept_fnptr_glGenFramebuffers(n, framebuffers);
  __glintercept_log(" - glGenFramebuffers(n: %ld, framebuffers: %ld)", n, framebuffers);
}

typedef void(*__ctype_glGenFramebuffersEXT)(GLsizei, GLuint *);
static __ctype_glGenFramebuffersEXT __glintercept_fnptr_glGenFramebuffersEXT;
void __glintercept_glGenFramebuffersEXT(GLsizei n, GLuint * framebuffers) {
  __glintercept_fnptr_glGenFramebuffersEXT(n, framebuffers);
  __glintercept_log(" - glGenFramebuffersEXT(n: %ld, framebuffers: %ld)", n, framebuffers);
}

typedef void(*__ctype_glGenFramebuffersOES)(GLsizei, GLuint *);
static __ctype_glGenFramebuffersOES __glintercept_fnptr_glGenFramebuffersOES;
void __glintercept_glGenFramebuffersOES(GLsizei n, GLuint * framebuffers) {
  __glintercept_fnptr_glGenFramebuffersOES(n, framebuffers);
  __glintercept_log(" - glGenFramebuffersOES(n: %ld, framebuffers: %ld)", n, framebuffers);
}

typedef GLuint(*__ctype_glGenLists)(GLsizei);
static __ctype_glGenLists __glintercept_fnptr_glGenLists;
GLuint __glintercept_glGenLists(GLsizei range) {
  GLuint __ret = __glintercept_fnptr_glGenLists(range);
  __glintercept_log(" - glGenLists(range: %ld) -> %ld", range, __ret);
  return __ret;
}

typedef void(*__ctype_glGenNamesAMD)(GLenum, GLuint, GLuint *);
static __ctype_glGenNamesAMD __glintercept_fnptr_glGenNamesAMD;
void __glintercept_glGenNamesAMD(GLenum identifier, GLuint num, GLuint * names) {
  __glintercept_fnptr_glGenNamesAMD(identifier, num, names);
  __glintercept_log(" - glGenNamesAMD(identifier: %ld (%s), num: %ld, names: %ld)", identifier, __gl_intercept_formatenum(identifier), num, names);
}

typedef void(*__ctype_glGenOcclusionQueriesNV)(GLsizei, GLuint *);
static __ctype_glGenOcclusionQueriesNV __glintercept_fnptr_glGenOcclusionQueriesNV;
void __glintercept_glGenOcclusionQueriesNV(GLsizei n, GLuint * ids) {
  __glintercept_fnptr_glGenOcclusionQueriesNV(n, ids);
  __glintercept_log(" - glGenOcclusionQueriesNV(n: %ld, ids: %ld)", n, ids);
}

typedef GLuint(*__ctype_glGenPathsNV)(GLsizei);
static __ctype_glGenPathsNV __glintercept_fnptr_glGenPathsNV;
GLuint __glintercept_glGenPathsNV(GLsizei range) {
  GLuint __ret = __glintercept_fnptr_glGenPathsNV(range);
  __glintercept_log(" - glGenPathsNV(range: %ld) -> %ld", range, __ret);
  return __ret;
}

typedef void(*__ctype_glGenPerfMonitorsAMD)(GLsizei, GLuint *);
static __ctype_glGenPerfMonitorsAMD __glintercept_fnptr_glGenPerfMonitorsAMD;
void __glintercept_glGenPerfMonitorsAMD(GLsizei n, GLuint * monitors) {
  __glintercept_fnptr_glGenPerfMonitorsAMD(n, monitors);
  __glintercept_log(" - glGenPerfMonitorsAMD(n: %ld, monitors: %ld)", n, monitors);
}

typedef void(*__ctype_glGenProgramPipelines)(GLsizei, GLuint *);
static __ctype_glGenProgramPipelines __glintercept_fnptr_glGenProgramPipelines;
void __glintercept_glGenProgramPipelines(GLsizei n, GLuint * pipelines) {
  __glintercept_fnptr_glGenProgramPipelines(n, pipelines);
  __glintercept_log(" - glGenProgramPipelines(n: %ld, pipelines: %ld)", n, pipelines);
}

typedef void(*__ctype_glGenProgramPipelinesEXT)(GLsizei, GLuint *);
static __ctype_glGenProgramPipelinesEXT __glintercept_fnptr_glGenProgramPipelinesEXT;
void __glintercept_glGenProgramPipelinesEXT(GLsizei n, GLuint * pipelines) {
  __glintercept_fnptr_glGenProgramPipelinesEXT(n, pipelines);
  __glintercept_log(" - glGenProgramPipelinesEXT(n: %ld, pipelines: %ld)", n, pipelines);
}

typedef void(*__ctype_glGenProgramsARB)(GLsizei, GLuint *);
static __ctype_glGenProgramsARB __glintercept_fnptr_glGenProgramsARB;
void __glintercept_glGenProgramsARB(GLsizei n, GLuint * programs) {
  __glintercept_fnptr_glGenProgramsARB(n, programs);
  __glintercept_log(" - glGenProgramsARB(n: %ld, programs: %ld)", n, programs);
}

typedef void(*__ctype_glGenProgramsNV)(GLsizei, GLuint *);
static __ctype_glGenProgramsNV __glintercept_fnptr_glGenProgramsNV;
void __glintercept_glGenProgramsNV(GLsizei n, GLuint * programs) {
  __glintercept_fnptr_glGenProgramsNV(n, programs);
  __glintercept_log(" - glGenProgramsNV(n: %ld, programs: %ld)", n, programs);
}

typedef void(*__ctype_glGenQueries)(GLsizei, GLuint *);
static __ctype_glGenQueries __glintercept_fnptr_glGenQueries;
void __glintercept_glGenQueries(GLsizei n, GLuint * ids) {
  __glintercept_fnptr_glGenQueries(n, ids);
  __glintercept_log(" - glGenQueries(n: %ld, ids: %ld)", n, ids);
}

typedef void(*__ctype_glGenQueriesARB)(GLsizei, GLuint *);
static __ctype_glGenQueriesARB __glintercept_fnptr_glGenQueriesARB;
void __glintercept_glGenQueriesARB(GLsizei n, GLuint * ids) {
  __glintercept_fnptr_glGenQueriesARB(n, ids);
  __glintercept_log(" - glGenQueriesARB(n: %ld, ids: %ld)", n, ids);
}

typedef void(*__ctype_glGenQueriesEXT)(GLsizei, GLuint *);
static __ctype_glGenQueriesEXT __glintercept_fnptr_glGenQueriesEXT;
void __glintercept_glGenQueriesEXT(GLsizei n, GLuint * ids) {
  __glintercept_fnptr_glGenQueriesEXT(n, ids);
  __glintercept_log(" - glGenQueriesEXT(n: %ld, ids: %ld)", n, ids);
}

typedef void(*__ctype_glGenQueryResourceTagNV)(GLsizei, GLint *);
static __ctype_glGenQueryResourceTagNV __glintercept_fnptr_glGenQueryResourceTagNV;
void __glintercept_glGenQueryResourceTagNV(GLsizei n, GLint * tagIds) {
  __glintercept_fnptr_glGenQueryResourceTagNV(n, tagIds);
  __glintercept_log(" - glGenQueryResourceTagNV(n: %ld, tagIds: %ld)", n, tagIds);
}

typedef void(*__ctype_glGenRenderbuffers)(GLsizei, GLuint *);
static __ctype_glGenRenderbuffers __glintercept_fnptr_glGenRenderbuffers;
void __glintercept_glGenRenderbuffers(GLsizei n, GLuint * renderbuffers) {
  __glintercept_fnptr_glGenRenderbuffers(n, renderbuffers);
  __glintercept_log(" - glGenRenderbuffers(n: %ld, renderbuffers: %ld)", n, renderbuffers);
}

typedef void(*__ctype_glGenRenderbuffersEXT)(GLsizei, GLuint *);
static __ctype_glGenRenderbuffersEXT __glintercept_fnptr_glGenRenderbuffersEXT;
void __glintercept_glGenRenderbuffersEXT(GLsizei n, GLuint * renderbuffers) {
  __glintercept_fnptr_glGenRenderbuffersEXT(n, renderbuffers);
  __glintercept_log(" - glGenRenderbuffersEXT(n: %ld, renderbuffers: %ld)", n, renderbuffers);
}

typedef void(*__ctype_glGenRenderbuffersOES)(GLsizei, GLuint *);
static __ctype_glGenRenderbuffersOES __glintercept_fnptr_glGenRenderbuffersOES;
void __glintercept_glGenRenderbuffersOES(GLsizei n, GLuint * renderbuffers) {
  __glintercept_fnptr_glGenRenderbuffersOES(n, renderbuffers);
  __glintercept_log(" - glGenRenderbuffersOES(n: %ld, renderbuffers: %ld)", n, renderbuffers);
}

typedef void(*__ctype_glGenSamplers)(GLsizei, GLuint *);
static __ctype_glGenSamplers __glintercept_fnptr_glGenSamplers;
void __glintercept_glGenSamplers(GLsizei count, GLuint * samplers) {
  __glintercept_fnptr_glGenSamplers(count, samplers);
  __glintercept_log(" - glGenSamplers(count: %ld, samplers: %ld)", count, samplers);
}

typedef void(*__ctype_glGenSemaphoresEXT)(GLsizei, GLuint *);
static __ctype_glGenSemaphoresEXT __glintercept_fnptr_glGenSemaphoresEXT;
void __glintercept_glGenSemaphoresEXT(GLsizei n, GLuint * semaphores) {
  __glintercept_fnptr_glGenSemaphoresEXT(n, semaphores);
  __glintercept_log(" - glGenSemaphoresEXT(n: %ld, semaphores: %ld)", n, semaphores);
}

typedef GLuint(*__ctype_glGenSymbolsEXT)(GLenum, GLenum, GLenum, GLuint);
static __ctype_glGenSymbolsEXT __glintercept_fnptr_glGenSymbolsEXT;
GLuint __glintercept_glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components) {
  GLuint __ret = __glintercept_fnptr_glGenSymbolsEXT(datatype, storagetype, range, components);
  __glintercept_log(" - glGenSymbolsEXT(datatype: %ld (%s), storagetype: %ld (%s), range: %ld (%s), components: %ld) -> %ld", datatype, __gl_intercept_formatenum(datatype), storagetype, __gl_intercept_formatenum(storagetype), range, __gl_intercept_formatenum(range), components, __ret);
  return __ret;
}

typedef void(*__ctype_glGenTextures)(GLsizei, GLuint *);
static __ctype_glGenTextures __glintercept_fnptr_glGenTextures;
void __glintercept_glGenTextures(GLsizei n, GLuint * textures) {
  __glintercept_fnptr_glGenTextures(n, textures);
  __glintercept_log(" - glGenTextures(n: %ld, textures: %ld)", n, textures);
}

typedef void(*__ctype_glGenTexturesEXT)(GLsizei, GLuint *);
static __ctype_glGenTexturesEXT __glintercept_fnptr_glGenTexturesEXT;
void __glintercept_glGenTexturesEXT(GLsizei n, GLuint * textures) {
  __glintercept_fnptr_glGenTexturesEXT(n, textures);
  __glintercept_log(" - glGenTexturesEXT(n: %ld, textures: %ld)", n, textures);
}

typedef void(*__ctype_glGenTransformFeedbacks)(GLsizei, GLuint *);
static __ctype_glGenTransformFeedbacks __glintercept_fnptr_glGenTransformFeedbacks;
void __glintercept_glGenTransformFeedbacks(GLsizei n, GLuint * ids) {
  __glintercept_fnptr_glGenTransformFeedbacks(n, ids);
  __glintercept_log(" - glGenTransformFeedbacks(n: %ld, ids: %ld)", n, ids);
}

typedef void(*__ctype_glGenTransformFeedbacksNV)(GLsizei, GLuint *);
static __ctype_glGenTransformFeedbacksNV __glintercept_fnptr_glGenTransformFeedbacksNV;
void __glintercept_glGenTransformFeedbacksNV(GLsizei n, GLuint * ids) {
  __glintercept_fnptr_glGenTransformFeedbacksNV(n, ids);
  __glintercept_log(" - glGenTransformFeedbacksNV(n: %ld, ids: %ld)", n, ids);
}

typedef void(*__ctype_glGenVertexArrays)(GLsizei, GLuint *);
static __ctype_glGenVertexArrays __glintercept_fnptr_glGenVertexArrays;
void __glintercept_glGenVertexArrays(GLsizei n, GLuint * arrays) {
  __glintercept_fnptr_glGenVertexArrays(n, arrays);
  __glintercept_log(" - glGenVertexArrays(n: %ld, arrays: %ld)", n, arrays);
}

typedef void(*__ctype_glGenVertexArraysAPPLE)(GLsizei, GLuint *);
static __ctype_glGenVertexArraysAPPLE __glintercept_fnptr_glGenVertexArraysAPPLE;
void __glintercept_glGenVertexArraysAPPLE(GLsizei n, GLuint * arrays) {
  __glintercept_fnptr_glGenVertexArraysAPPLE(n, arrays);
  __glintercept_log(" - glGenVertexArraysAPPLE(n: %ld, arrays: %ld)", n, arrays);
}

typedef void(*__ctype_glGenVertexArraysOES)(GLsizei, GLuint *);
static __ctype_glGenVertexArraysOES __glintercept_fnptr_glGenVertexArraysOES;
void __glintercept_glGenVertexArraysOES(GLsizei n, GLuint * arrays) {
  __glintercept_fnptr_glGenVertexArraysOES(n, arrays);
  __glintercept_log(" - glGenVertexArraysOES(n: %ld, arrays: %ld)", n, arrays);
}

typedef GLuint(*__ctype_glGenVertexShadersEXT)(GLuint);
static __ctype_glGenVertexShadersEXT __glintercept_fnptr_glGenVertexShadersEXT;
GLuint __glintercept_glGenVertexShadersEXT(GLuint range) {
  GLuint __ret = __glintercept_fnptr_glGenVertexShadersEXT(range);
  __glintercept_log(" - glGenVertexShadersEXT(range: %ld) -> %ld", range, __ret);
  return __ret;
}

typedef void(*__ctype_glGenerateMipmap)(GLenum);
static __ctype_glGenerateMipmap __glintercept_fnptr_glGenerateMipmap;
void __glintercept_glGenerateMipmap(GLenum target) {
  __glintercept_fnptr_glGenerateMipmap(target);
  __glintercept_log(" - glGenerateMipmap(target: %ld (%s))", target, __gl_intercept_formatenum(target));
}

typedef void(*__ctype_glGenerateMipmapEXT)(GLenum);
static __ctype_glGenerateMipmapEXT __glintercept_fnptr_glGenerateMipmapEXT;
void __glintercept_glGenerateMipmapEXT(GLenum target) {
  __glintercept_fnptr_glGenerateMipmapEXT(target);
  __glintercept_log(" - glGenerateMipmapEXT(target: %ld (%s))", target, __gl_intercept_formatenum(target));
}

typedef void(*__ctype_glGenerateMipmapOES)(GLenum);
static __ctype_glGenerateMipmapOES __glintercept_fnptr_glGenerateMipmapOES;
void __glintercept_glGenerateMipmapOES(GLenum target) {
  __glintercept_fnptr_glGenerateMipmapOES(target);
  __glintercept_log(" - glGenerateMipmapOES(target: %ld (%s))", target, __gl_intercept_formatenum(target));
}

typedef void(*__ctype_glGenerateMultiTexMipmapEXT)(GLenum, GLenum);
static __ctype_glGenerateMultiTexMipmapEXT __glintercept_fnptr_glGenerateMultiTexMipmapEXT;
void __glintercept_glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target) {
  __glintercept_fnptr_glGenerateMultiTexMipmapEXT(texunit, target);
  __glintercept_log(" - glGenerateMultiTexMipmapEXT(texunit: %ld (%s), target: %ld (%s))", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target));
}

typedef void(*__ctype_glGenerateTextureMipmap)(GLuint);
static __ctype_glGenerateTextureMipmap __glintercept_fnptr_glGenerateTextureMipmap;
void __glintercept_glGenerateTextureMipmap(GLuint texture) {
  __glintercept_fnptr_glGenerateTextureMipmap(texture);
  __glintercept_log(" - glGenerateTextureMipmap(texture: %ld)", texture);
}

typedef void(*__ctype_glGenerateTextureMipmapEXT)(GLuint, GLenum);
static __ctype_glGenerateTextureMipmapEXT __glintercept_fnptr_glGenerateTextureMipmapEXT;
void __glintercept_glGenerateTextureMipmapEXT(GLuint texture, GLenum target) {
  __glintercept_fnptr_glGenerateTextureMipmapEXT(texture, target);
  __glintercept_log(" - glGenerateTextureMipmapEXT(texture: %ld, target: %ld (%s))", texture, target, __gl_intercept_formatenum(target));
}

typedef void(*__ctype_glGetActiveAtomicCounterBufferiv)(GLuint, GLuint, GLenum, GLint *);
static __ctype_glGetActiveAtomicCounterBufferiv __glintercept_fnptr_glGetActiveAtomicCounterBufferiv;
void __glintercept_glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params);
  __glintercept_log(" - glGetActiveAtomicCounterBufferiv(program: %ld, bufferIndex: %ld, pname: %ld (%s), params: %ld)", program, bufferIndex, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetActiveAttrib)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *);
static __ctype_glGetActiveAttrib __glintercept_fnptr_glGetActiveAttrib;
void __glintercept_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) {
  __glintercept_fnptr_glGetActiveAttrib(program, index, bufSize, length, size, type, name);
  __glintercept_log(" - glGetActiveAttrib(program: %ld, index: %ld, bufSize: %ld, length: %ld, size: %ld, type: %ld, name: %ld)", program, index, bufSize, length, size, type, name);
}

typedef void(*__ctype_glGetActiveAttribARB)(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *);
static __ctype_glGetActiveAttribARB __glintercept_fnptr_glGetActiveAttribARB;
void __glintercept_glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name) {
  __glintercept_fnptr_glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name);
  __glintercept_log(" - glGetActiveAttribARB(programObj: %ld, index: %ld, maxLength: %ld, length: %ld, size: %ld, type: %ld, name: %ld)", programObj, index, maxLength, length, size, type, name);
}

typedef void(*__ctype_glGetActiveSubroutineName)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
static __ctype_glGetActiveSubroutineName __glintercept_fnptr_glGetActiveSubroutineName;
void __glintercept_glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name) {
  __glintercept_fnptr_glGetActiveSubroutineName(program, shadertype, index, bufSize, length, name);
  __glintercept_log(" - glGetActiveSubroutineName(program: %ld, shadertype: %ld (%s), index: %ld, bufSize: %ld, length: %ld, name: %ld)", program, shadertype, __gl_intercept_formatenum(shadertype), index, bufSize, length, name);
}

typedef void(*__ctype_glGetActiveSubroutineUniformName)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
static __ctype_glGetActiveSubroutineUniformName __glintercept_fnptr_glGetActiveSubroutineUniformName;
void __glintercept_glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name) {
  __glintercept_fnptr_glGetActiveSubroutineUniformName(program, shadertype, index, bufSize, length, name);
  __glintercept_log(" - glGetActiveSubroutineUniformName(program: %ld, shadertype: %ld (%s), index: %ld, bufSize: %ld, length: %ld, name: %ld)", program, shadertype, __gl_intercept_formatenum(shadertype), index, bufSize, length, name);
}

typedef void(*__ctype_glGetActiveSubroutineUniformiv)(GLuint, GLenum, GLuint, GLenum, GLint *);
static __ctype_glGetActiveSubroutineUniformiv __glintercept_fnptr_glGetActiveSubroutineUniformiv;
void __glintercept_glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values) {
  __glintercept_fnptr_glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values);
  __glintercept_log(" - glGetActiveSubroutineUniformiv(program: %ld, shadertype: %ld (%s), index: %ld, pname: %ld (%s), values: %ld)", program, shadertype, __gl_intercept_formatenum(shadertype), index, pname, __gl_intercept_formatenum(pname), values);
}

typedef void(*__ctype_glGetActiveUniform)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *);
static __ctype_glGetActiveUniform __glintercept_fnptr_glGetActiveUniform;
void __glintercept_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) {
  __glintercept_fnptr_glGetActiveUniform(program, index, bufSize, length, size, type, name);
  __glintercept_log(" - glGetActiveUniform(program: %ld, index: %ld, bufSize: %ld, length: %ld, size: %ld, type: %ld, name: %ld)", program, index, bufSize, length, size, type, name);
}

typedef void(*__ctype_glGetActiveUniformARB)(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *);
static __ctype_glGetActiveUniformARB __glintercept_fnptr_glGetActiveUniformARB;
void __glintercept_glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name) {
  __glintercept_fnptr_glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name);
  __glintercept_log(" - glGetActiveUniformARB(programObj: %ld, index: %ld, maxLength: %ld, length: %ld, size: %ld, type: %ld, name: %ld)", programObj, index, maxLength, length, size, type, name);
}

typedef void(*__ctype_glGetActiveUniformBlockName)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
static __ctype_glGetActiveUniformBlockName __glintercept_fnptr_glGetActiveUniformBlockName;
void __glintercept_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName) {
  __glintercept_fnptr_glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
  __glintercept_log(" - glGetActiveUniformBlockName(program: %ld, uniformBlockIndex: %ld, bufSize: %ld, length: %ld, uniformBlockName: %ld)", program, uniformBlockIndex, bufSize, length, uniformBlockName);
}

typedef void(*__ctype_glGetActiveUniformBlockiv)(GLuint, GLuint, GLenum, GLint *);
static __ctype_glGetActiveUniformBlockiv __glintercept_fnptr_glGetActiveUniformBlockiv;
void __glintercept_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);
  __glintercept_log(" - glGetActiveUniformBlockiv(program: %ld, uniformBlockIndex: %ld, pname: %ld (%s), params: %ld)", program, uniformBlockIndex, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetActiveUniformName)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
static __ctype_glGetActiveUniformName __glintercept_fnptr_glGetActiveUniformName;
void __glintercept_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName) {
  __glintercept_fnptr_glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
  __glintercept_log(" - glGetActiveUniformName(program: %ld, uniformIndex: %ld, bufSize: %ld, length: %ld, uniformName: %ld)", program, uniformIndex, bufSize, length, uniformName);
}

typedef void(*__ctype_glGetActiveUniformsiv)(GLuint, GLsizei, const GLuint *, GLenum, GLint *);
static __ctype_glGetActiveUniformsiv __glintercept_fnptr_glGetActiveUniformsiv;
void __glintercept_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
  __glintercept_log(" - glGetActiveUniformsiv(program: %ld, uniformCount: %ld, uniformIndices: %ld, pname: %ld (%s), params: %ld)", program, uniformCount, uniformIndices, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetActiveVaryingNV)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
static __ctype_glGetActiveVaryingNV __glintercept_fnptr_glGetActiveVaryingNV;
void __glintercept_glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) {
  __glintercept_fnptr_glGetActiveVaryingNV(program, index, bufSize, length, size, type, name);
  __glintercept_log(" - glGetActiveVaryingNV(program: %ld, index: %ld, bufSize: %ld, length: %ld, size: %ld, type: %ld, name: %ld)", program, index, bufSize, length, size, type, name);
}

typedef void(*__ctype_glGetArrayObjectfvATI)(GLenum, GLenum, GLfloat *);
static __ctype_glGetArrayObjectfvATI __glintercept_fnptr_glGetArrayObjectfvATI;
void __glintercept_glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetArrayObjectfvATI(array, pname, params);
  __glintercept_log(" - glGetArrayObjectfvATI(array: %ld (%s), pname: %ld (%s), params: %ld)", array, __gl_intercept_formatenum(array), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetArrayObjectivATI)(GLenum, GLenum, GLint *);
static __ctype_glGetArrayObjectivATI __glintercept_fnptr_glGetArrayObjectivATI;
void __glintercept_glGetArrayObjectivATI(GLenum array, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetArrayObjectivATI(array, pname, params);
  __glintercept_log(" - glGetArrayObjectivATI(array: %ld (%s), pname: %ld (%s), params: %ld)", array, __gl_intercept_formatenum(array), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetAttachedObjectsARB)(GLhandleARB, GLsizei, GLsizei *, GLhandleARB *);
static __ctype_glGetAttachedObjectsARB __glintercept_fnptr_glGetAttachedObjectsARB;
void __glintercept_glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj) {
  __glintercept_fnptr_glGetAttachedObjectsARB(containerObj, maxCount, count, obj);
  __glintercept_log(" - glGetAttachedObjectsARB(containerObj: %ld, maxCount: %ld, count: %ld, obj: %ld)", containerObj, maxCount, count, obj);
}

typedef void(*__ctype_glGetAttachedShaders)(GLuint, GLsizei, GLsizei *, GLuint *);
static __ctype_glGetAttachedShaders __glintercept_fnptr_glGetAttachedShaders;
void __glintercept_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders) {
  __glintercept_fnptr_glGetAttachedShaders(program, maxCount, count, shaders);
  __glintercept_log(" - glGetAttachedShaders(program: %ld, maxCount: %ld, count: %ld, shaders: %ld)", program, maxCount, count, shaders);
}

typedef GLint(*__ctype_glGetAttribLocation)(GLuint, const GLchar *);
static __ctype_glGetAttribLocation __glintercept_fnptr_glGetAttribLocation;
GLint __glintercept_glGetAttribLocation(GLuint program, const GLchar * name) {
  GLint __ret = __glintercept_fnptr_glGetAttribLocation(program, name);
  __glintercept_log(" - glGetAttribLocation(program: %ld, name: %ld) -> %ld", program, name, __ret);
  return __ret;
}

typedef GLint(*__ctype_glGetAttribLocationARB)(GLhandleARB, const GLcharARB *);
static __ctype_glGetAttribLocationARB __glintercept_fnptr_glGetAttribLocationARB;
GLint __glintercept_glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB * name) {
  GLint __ret = __glintercept_fnptr_glGetAttribLocationARB(programObj, name);
  __glintercept_log(" - glGetAttribLocationARB(programObj: %ld, name: %ld) -> %ld", programObj, name, __ret);
  return __ret;
}

typedef void(*__ctype_glGetBooleanIndexedvEXT)(GLenum, GLuint, GLboolean *);
static __ctype_glGetBooleanIndexedvEXT __glintercept_fnptr_glGetBooleanIndexedvEXT;
void __glintercept_glGetBooleanIndexedvEXT(GLenum target, GLuint index, GLboolean * data) {
  __glintercept_fnptr_glGetBooleanIndexedvEXT(target, index, data);
  __glintercept_log(" - glGetBooleanIndexedvEXT(target: %ld (%s), index: %ld, data: %ld)", target, __gl_intercept_formatenum(target), index, data);
}

typedef void(*__ctype_glGetBooleani_v)(GLenum, GLuint, GLboolean *);
static __ctype_glGetBooleani_v __glintercept_fnptr_glGetBooleani_v;
void __glintercept_glGetBooleani_v(GLenum target, GLuint index, GLboolean * data) {
  __glintercept_fnptr_glGetBooleani_v(target, index, data);
  __glintercept_log(" - glGetBooleani_v(target: %ld (%s), index: %ld, data: %ld)", target, __gl_intercept_formatenum(target), index, data);
}

typedef void(*__ctype_glGetBooleanv)(GLenum, GLboolean *);
static __ctype_glGetBooleanv __glintercept_fnptr_glGetBooleanv;
void __glintercept_glGetBooleanv(GLenum pname, GLboolean * data) {
  __glintercept_fnptr_glGetBooleanv(pname, data);
  __glintercept_log(" - glGetBooleanv(pname: %ld (%s), data: %ld)", pname, __gl_intercept_formatenum(pname), data);
}

typedef void(*__ctype_glGetBufferParameteri64v)(GLenum, GLenum, GLint64 *);
static __ctype_glGetBufferParameteri64v __glintercept_fnptr_glGetBufferParameteri64v;
void __glintercept_glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 * params) {
  __glintercept_fnptr_glGetBufferParameteri64v(target, pname, params);
  __glintercept_log(" - glGetBufferParameteri64v(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetBufferParameteriv)(GLenum, GLenum, GLint *);
static __ctype_glGetBufferParameteriv __glintercept_fnptr_glGetBufferParameteriv;
void __glintercept_glGetBufferParameteriv(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetBufferParameteriv(target, pname, params);
  __glintercept_log(" - glGetBufferParameteriv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetBufferParameterivARB)(GLenum, GLenum, GLint *);
static __ctype_glGetBufferParameterivARB __glintercept_fnptr_glGetBufferParameterivARB;
void __glintercept_glGetBufferParameterivARB(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetBufferParameterivARB(target, pname, params);
  __glintercept_log(" - glGetBufferParameterivARB(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetBufferParameterui64vNV)(GLenum, GLenum, GLuint64EXT *);
static __ctype_glGetBufferParameterui64vNV __glintercept_fnptr_glGetBufferParameterui64vNV;
void __glintercept_glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT * params) {
  __glintercept_fnptr_glGetBufferParameterui64vNV(target, pname, params);
  __glintercept_log(" - glGetBufferParameterui64vNV(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetBufferPointerv)(GLenum, GLenum, void **);
static __ctype_glGetBufferPointerv __glintercept_fnptr_glGetBufferPointerv;
void __glintercept_glGetBufferPointerv(GLenum target, GLenum pname, void ** params) {
  __glintercept_fnptr_glGetBufferPointerv(target, pname, params);
  __glintercept_log(" - glGetBufferPointerv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetBufferPointervARB)(GLenum, GLenum, void **);
static __ctype_glGetBufferPointervARB __glintercept_fnptr_glGetBufferPointervARB;
void __glintercept_glGetBufferPointervARB(GLenum target, GLenum pname, void ** params) {
  __glintercept_fnptr_glGetBufferPointervARB(target, pname, params);
  __glintercept_log(" - glGetBufferPointervARB(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetBufferPointervOES)(GLenum, GLenum, void **);
static __ctype_glGetBufferPointervOES __glintercept_fnptr_glGetBufferPointervOES;
void __glintercept_glGetBufferPointervOES(GLenum target, GLenum pname, void ** params) {
  __glintercept_fnptr_glGetBufferPointervOES(target, pname, params);
  __glintercept_log(" - glGetBufferPointervOES(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetBufferSubData)(GLenum, GLintptr, GLsizeiptr, void *);
static __ctype_glGetBufferSubData __glintercept_fnptr_glGetBufferSubData;
void __glintercept_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void * data) {
  __glintercept_fnptr_glGetBufferSubData(target, offset, size, data);
  __glintercept_log(" - glGetBufferSubData(target: %ld (%s), offset: %ld, size: %ld, data: %ld)", target, __gl_intercept_formatenum(target), offset, size, data);
}

typedef void(*__ctype_glGetBufferSubDataARB)(GLenum, GLintptrARB, GLsizeiptrARB, void *);
static __ctype_glGetBufferSubDataARB __glintercept_fnptr_glGetBufferSubDataARB;
void __glintercept_glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data) {
  __glintercept_fnptr_glGetBufferSubDataARB(target, offset, size, data);
  __glintercept_log(" - glGetBufferSubDataARB(target: %ld (%s), offset: %ld, size: %ld, data: %ld)", target, __gl_intercept_formatenum(target), offset, size, data);
}

typedef void(*__ctype_glGetClipPlane)(GLenum, GLdouble *);
static __ctype_glGetClipPlane __glintercept_fnptr_glGetClipPlane;
void __glintercept_glGetClipPlane(GLenum plane, GLdouble * equation) {
  __glintercept_fnptr_glGetClipPlane(plane, equation);
  __glintercept_log(" - glGetClipPlane(plane: %ld (%s), equation: %ld)", plane, __gl_intercept_formatenum(plane), equation);
}

typedef void(*__ctype_glGetClipPlanef)(GLenum, GLfloat *);
static __ctype_glGetClipPlanef __glintercept_fnptr_glGetClipPlanef;
void __glintercept_glGetClipPlanef(GLenum plane, GLfloat * equation) {
  __glintercept_fnptr_glGetClipPlanef(plane, equation);
  __glintercept_log(" - glGetClipPlanef(plane: %ld (%s), equation: %ld)", plane, __gl_intercept_formatenum(plane), equation);
}

typedef void(*__ctype_glGetClipPlanefOES)(GLenum, GLfloat *);
static __ctype_glGetClipPlanefOES __glintercept_fnptr_glGetClipPlanefOES;
void __glintercept_glGetClipPlanefOES(GLenum plane, GLfloat * equation) {
  __glintercept_fnptr_glGetClipPlanefOES(plane, equation);
  __glintercept_log(" - glGetClipPlanefOES(plane: %ld (%s), equation: %ld)", plane, __gl_intercept_formatenum(plane), equation);
}

typedef void(*__ctype_glGetClipPlanex)(GLenum, GLfixed *);
static __ctype_glGetClipPlanex __glintercept_fnptr_glGetClipPlanex;
void __glintercept_glGetClipPlanex(GLenum plane, GLfixed * equation) {
  __glintercept_fnptr_glGetClipPlanex(plane, equation);
  __glintercept_log(" - glGetClipPlanex(plane: %ld (%s), equation: %ld)", plane, __gl_intercept_formatenum(plane), equation);
}

typedef void(*__ctype_glGetClipPlanexOES)(GLenum, GLfixed *);
static __ctype_glGetClipPlanexOES __glintercept_fnptr_glGetClipPlanexOES;
void __glintercept_glGetClipPlanexOES(GLenum plane, GLfixed * equation) {
  __glintercept_fnptr_glGetClipPlanexOES(plane, equation);
  __glintercept_log(" - glGetClipPlanexOES(plane: %ld (%s), equation: %ld)", plane, __gl_intercept_formatenum(plane), equation);
}

typedef void(*__ctype_glGetColorTable)(GLenum, GLenum, GLenum, void *);
static __ctype_glGetColorTable __glintercept_fnptr_glGetColorTable;
void __glintercept_glGetColorTable(GLenum target, GLenum format, GLenum type, void * table) {
  __glintercept_fnptr_glGetColorTable(target, format, type, table);
  __glintercept_log(" - glGetColorTable(target: %ld (%s), format: %ld (%s), type: %ld (%s), table: %ld)", target, __gl_intercept_formatenum(target), format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), table);
}

typedef void(*__ctype_glGetColorTableEXT)(GLenum, GLenum, GLenum, void *);
static __ctype_glGetColorTableEXT __glintercept_fnptr_glGetColorTableEXT;
void __glintercept_glGetColorTableEXT(GLenum target, GLenum format, GLenum type, void * data) {
  __glintercept_fnptr_glGetColorTableEXT(target, format, type, data);
  __glintercept_log(" - glGetColorTableEXT(target: %ld (%s), format: %ld (%s), type: %ld (%s), data: %ld)", target, __gl_intercept_formatenum(target), format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), data);
}

typedef void(*__ctype_glGetColorTableParameterfv)(GLenum, GLenum, GLfloat *);
static __ctype_glGetColorTableParameterfv __glintercept_fnptr_glGetColorTableParameterfv;
void __glintercept_glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetColorTableParameterfv(target, pname, params);
  __glintercept_log(" - glGetColorTableParameterfv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetColorTableParameterfvEXT)(GLenum, GLenum, GLfloat *);
static __ctype_glGetColorTableParameterfvEXT __glintercept_fnptr_glGetColorTableParameterfvEXT;
void __glintercept_glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetColorTableParameterfvEXT(target, pname, params);
  __glintercept_log(" - glGetColorTableParameterfvEXT(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetColorTableParameterfvSGI)(GLenum, GLenum, GLfloat *);
static __ctype_glGetColorTableParameterfvSGI __glintercept_fnptr_glGetColorTableParameterfvSGI;
void __glintercept_glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetColorTableParameterfvSGI(target, pname, params);
  __glintercept_log(" - glGetColorTableParameterfvSGI(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetColorTableParameteriv)(GLenum, GLenum, GLint *);
static __ctype_glGetColorTableParameteriv __glintercept_fnptr_glGetColorTableParameteriv;
void __glintercept_glGetColorTableParameteriv(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetColorTableParameteriv(target, pname, params);
  __glintercept_log(" - glGetColorTableParameteriv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetColorTableParameterivEXT)(GLenum, GLenum, GLint *);
static __ctype_glGetColorTableParameterivEXT __glintercept_fnptr_glGetColorTableParameterivEXT;
void __glintercept_glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetColorTableParameterivEXT(target, pname, params);
  __glintercept_log(" - glGetColorTableParameterivEXT(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetColorTableParameterivSGI)(GLenum, GLenum, GLint *);
static __ctype_glGetColorTableParameterivSGI __glintercept_fnptr_glGetColorTableParameterivSGI;
void __glintercept_glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetColorTableParameterivSGI(target, pname, params);
  __glintercept_log(" - glGetColorTableParameterivSGI(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetColorTableSGI)(GLenum, GLenum, GLenum, void *);
static __ctype_glGetColorTableSGI __glintercept_fnptr_glGetColorTableSGI;
void __glintercept_glGetColorTableSGI(GLenum target, GLenum format, GLenum type, void * table) {
  __glintercept_fnptr_glGetColorTableSGI(target, format, type, table);
  __glintercept_log(" - glGetColorTableSGI(target: %ld (%s), format: %ld (%s), type: %ld (%s), table: %ld)", target, __gl_intercept_formatenum(target), format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), table);
}

typedef void(*__ctype_glGetCombinerInputParameterfvNV)(GLenum, GLenum, GLenum, GLenum, GLfloat *);
static __ctype_glGetCombinerInputParameterfvNV __glintercept_fnptr_glGetCombinerInputParameterfvNV;
void __glintercept_glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetCombinerInputParameterfvNV(stage, portion, variable, pname, params);
  __glintercept_log(" - glGetCombinerInputParameterfvNV(stage: %ld (%s), portion: %ld (%s), variable: %ld (%s), pname: %ld (%s), params: %ld)", stage, __gl_intercept_formatenum(stage), portion, __gl_intercept_formatenum(portion), variable, __gl_intercept_formatenum(variable), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetCombinerInputParameterivNV)(GLenum, GLenum, GLenum, GLenum, GLint *);
static __ctype_glGetCombinerInputParameterivNV __glintercept_fnptr_glGetCombinerInputParameterivNV;
void __glintercept_glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetCombinerInputParameterivNV(stage, portion, variable, pname, params);
  __glintercept_log(" - glGetCombinerInputParameterivNV(stage: %ld (%s), portion: %ld (%s), variable: %ld (%s), pname: %ld (%s), params: %ld)", stage, __gl_intercept_formatenum(stage), portion, __gl_intercept_formatenum(portion), variable, __gl_intercept_formatenum(variable), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetCombinerOutputParameterfvNV)(GLenum, GLenum, GLenum, GLfloat *);
static __ctype_glGetCombinerOutputParameterfvNV __glintercept_fnptr_glGetCombinerOutputParameterfvNV;
void __glintercept_glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetCombinerOutputParameterfvNV(stage, portion, pname, params);
  __glintercept_log(" - glGetCombinerOutputParameterfvNV(stage: %ld (%s), portion: %ld (%s), pname: %ld (%s), params: %ld)", stage, __gl_intercept_formatenum(stage), portion, __gl_intercept_formatenum(portion), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetCombinerOutputParameterivNV)(GLenum, GLenum, GLenum, GLint *);
static __ctype_glGetCombinerOutputParameterivNV __glintercept_fnptr_glGetCombinerOutputParameterivNV;
void __glintercept_glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetCombinerOutputParameterivNV(stage, portion, pname, params);
  __glintercept_log(" - glGetCombinerOutputParameterivNV(stage: %ld (%s), portion: %ld (%s), pname: %ld (%s), params: %ld)", stage, __gl_intercept_formatenum(stage), portion, __gl_intercept_formatenum(portion), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetCombinerStageParameterfvNV)(GLenum, GLenum, GLfloat *);
static __ctype_glGetCombinerStageParameterfvNV __glintercept_fnptr_glGetCombinerStageParameterfvNV;
void __glintercept_glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetCombinerStageParameterfvNV(stage, pname, params);
  __glintercept_log(" - glGetCombinerStageParameterfvNV(stage: %ld (%s), pname: %ld (%s), params: %ld)", stage, __gl_intercept_formatenum(stage), pname, __gl_intercept_formatenum(pname), params);
}

typedef GLuint(*__ctype_glGetCommandHeaderNV)(GLenum, GLuint);
static __ctype_glGetCommandHeaderNV __glintercept_fnptr_glGetCommandHeaderNV;
GLuint __glintercept_glGetCommandHeaderNV(GLenum tokenID, GLuint size) {
  GLuint __ret = __glintercept_fnptr_glGetCommandHeaderNV(tokenID, size);
  __glintercept_log(" - glGetCommandHeaderNV(tokenID: %ld (%s), size: %ld) -> %ld", tokenID, __gl_intercept_formatenum(tokenID), size, __ret);
  return __ret;
}

typedef void(*__ctype_glGetCompressedMultiTexImageEXT)(GLenum, GLenum, GLint, void *);
static __ctype_glGetCompressedMultiTexImageEXT __glintercept_fnptr_glGetCompressedMultiTexImageEXT;
void __glintercept_glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, void * img) {
  __glintercept_fnptr_glGetCompressedMultiTexImageEXT(texunit, target, lod, img);
  __glintercept_log(" - glGetCompressedMultiTexImageEXT(texunit: %ld (%s), target: %ld (%s), lod: %ld, img: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), lod, img);
}

typedef void(*__ctype_glGetCompressedTexImage)(GLenum, GLint, void *);
static __ctype_glGetCompressedTexImage __glintercept_fnptr_glGetCompressedTexImage;
void __glintercept_glGetCompressedTexImage(GLenum target, GLint level, void * img) {
  __glintercept_fnptr_glGetCompressedTexImage(target, level, img);
  __glintercept_log(" - glGetCompressedTexImage(target: %ld (%s), level: %ld, img: %ld)", target, __gl_intercept_formatenum(target), level, img);
}

typedef void(*__ctype_glGetCompressedTexImageARB)(GLenum, GLint, void *);
static __ctype_glGetCompressedTexImageARB __glintercept_fnptr_glGetCompressedTexImageARB;
void __glintercept_glGetCompressedTexImageARB(GLenum target, GLint level, void * img) {
  __glintercept_fnptr_glGetCompressedTexImageARB(target, level, img);
  __glintercept_log(" - glGetCompressedTexImageARB(target: %ld (%s), level: %ld, img: %ld)", target, __gl_intercept_formatenum(target), level, img);
}

typedef void(*__ctype_glGetCompressedTextureImage)(GLuint, GLint, GLsizei, void *);
static __ctype_glGetCompressedTextureImage __glintercept_fnptr_glGetCompressedTextureImage;
void __glintercept_glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void * pixels) {
  __glintercept_fnptr_glGetCompressedTextureImage(texture, level, bufSize, pixels);
  __glintercept_log(" - glGetCompressedTextureImage(texture: %ld, level: %ld, bufSize: %ld, pixels: %ld)", texture, level, bufSize, pixels);
}

typedef void(*__ctype_glGetCompressedTextureImageEXT)(GLuint, GLenum, GLint, void *);
static __ctype_glGetCompressedTextureImageEXT __glintercept_fnptr_glGetCompressedTextureImageEXT;
void __glintercept_glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, void * img) {
  __glintercept_fnptr_glGetCompressedTextureImageEXT(texture, target, lod, img);
  __glintercept_log(" - glGetCompressedTextureImageEXT(texture: %ld, target: %ld (%s), lod: %ld, img: %ld)", texture, target, __gl_intercept_formatenum(target), lod, img);
}

typedef void(*__ctype_glGetCompressedTextureSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, void *);
static __ctype_glGetCompressedTextureSubImage __glintercept_fnptr_glGetCompressedTextureSubImage;
void __glintercept_glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels) {
  __glintercept_fnptr_glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
  __glintercept_log(" - glGetCompressedTextureSubImage(texture: %ld, level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld, bufSize: %ld, pixels: %ld)", texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
}

typedef void(*__ctype_glGetConvolutionFilter)(GLenum, GLenum, GLenum, void *);
static __ctype_glGetConvolutionFilter __glintercept_fnptr_glGetConvolutionFilter;
void __glintercept_glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, void * image) {
  __glintercept_fnptr_glGetConvolutionFilter(target, format, type, image);
  __glintercept_log(" - glGetConvolutionFilter(target: %ld (%s), format: %ld (%s), type: %ld (%s), image: %ld)", target, __gl_intercept_formatenum(target), format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), image);
}

typedef void(*__ctype_glGetConvolutionFilterEXT)(GLenum, GLenum, GLenum, void *);
static __ctype_glGetConvolutionFilterEXT __glintercept_fnptr_glGetConvolutionFilterEXT;
void __glintercept_glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, void * image) {
  __glintercept_fnptr_glGetConvolutionFilterEXT(target, format, type, image);
  __glintercept_log(" - glGetConvolutionFilterEXT(target: %ld (%s), format: %ld (%s), type: %ld (%s), image: %ld)", target, __gl_intercept_formatenum(target), format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), image);
}

typedef void(*__ctype_glGetConvolutionParameterfv)(GLenum, GLenum, GLfloat *);
static __ctype_glGetConvolutionParameterfv __glintercept_fnptr_glGetConvolutionParameterfv;
void __glintercept_glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetConvolutionParameterfv(target, pname, params);
  __glintercept_log(" - glGetConvolutionParameterfv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetConvolutionParameterfvEXT)(GLenum, GLenum, GLfloat *);
static __ctype_glGetConvolutionParameterfvEXT __glintercept_fnptr_glGetConvolutionParameterfvEXT;
void __glintercept_glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetConvolutionParameterfvEXT(target, pname, params);
  __glintercept_log(" - glGetConvolutionParameterfvEXT(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetConvolutionParameteriv)(GLenum, GLenum, GLint *);
static __ctype_glGetConvolutionParameteriv __glintercept_fnptr_glGetConvolutionParameteriv;
void __glintercept_glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetConvolutionParameteriv(target, pname, params);
  __glintercept_log(" - glGetConvolutionParameteriv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetConvolutionParameterivEXT)(GLenum, GLenum, GLint *);
static __ctype_glGetConvolutionParameterivEXT __glintercept_fnptr_glGetConvolutionParameterivEXT;
void __glintercept_glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetConvolutionParameterivEXT(target, pname, params);
  __glintercept_log(" - glGetConvolutionParameterivEXT(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetConvolutionParameterxvOES)(GLenum, GLenum, GLfixed *);
static __ctype_glGetConvolutionParameterxvOES __glintercept_fnptr_glGetConvolutionParameterxvOES;
void __glintercept_glGetConvolutionParameterxvOES(GLenum target, GLenum pname, GLfixed * params) {
  __glintercept_fnptr_glGetConvolutionParameterxvOES(target, pname, params);
  __glintercept_log(" - glGetConvolutionParameterxvOES(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetCoverageModulationTableNV)(GLsizei, GLfloat *);
static __ctype_glGetCoverageModulationTableNV __glintercept_fnptr_glGetCoverageModulationTableNV;
void __glintercept_glGetCoverageModulationTableNV(GLsizei bufSize, GLfloat * v) {
  __glintercept_fnptr_glGetCoverageModulationTableNV(bufSize, v);
  __glintercept_log(" - glGetCoverageModulationTableNV(bufSize: %ld, v: %ld)", bufSize, v);
}

typedef GLuint(*__ctype_glGetDebugMessageLog)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *);
static __ctype_glGetDebugMessageLog __glintercept_fnptr_glGetDebugMessageLog;
GLuint __glintercept_glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) {
  GLuint __ret = __glintercept_fnptr_glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);
  __glintercept_log(" - glGetDebugMessageLog(count: %ld, bufSize: %ld, sources: %ld, types: %ld, ids: %ld, severities: %ld, lengths: %ld, messageLog: %ld) -> %ld", count, bufSize, sources, types, ids, severities, lengths, messageLog, __ret);
  return __ret;
}

typedef GLuint(*__ctype_glGetDebugMessageLogAMD)(GLuint, GLsizei, GLenum *, GLuint *, GLuint *, GLsizei *, GLchar *);
static __ctype_glGetDebugMessageLogAMD __glintercept_fnptr_glGetDebugMessageLogAMD;
GLuint __glintercept_glGetDebugMessageLogAMD(GLuint count, GLsizei bufSize, GLenum * categories, GLuint * severities, GLuint * ids, GLsizei * lengths, GLchar * message) {
  GLuint __ret = __glintercept_fnptr_glGetDebugMessageLogAMD(count, bufSize, categories, severities, ids, lengths, message);
  __glintercept_log(" - glGetDebugMessageLogAMD(count: %ld, bufSize: %ld, categories: %ld, severities: %ld, ids: %ld, lengths: %ld, message: %ld) -> %ld", count, bufSize, categories, severities, ids, lengths, message, __ret);
  return __ret;
}

typedef GLuint(*__ctype_glGetDebugMessageLogARB)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *);
static __ctype_glGetDebugMessageLogARB __glintercept_fnptr_glGetDebugMessageLogARB;
GLuint __glintercept_glGetDebugMessageLogARB(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) {
  GLuint __ret = __glintercept_fnptr_glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog);
  __glintercept_log(" - glGetDebugMessageLogARB(count: %ld, bufSize: %ld, sources: %ld, types: %ld, ids: %ld, severities: %ld, lengths: %ld, messageLog: %ld) -> %ld", count, bufSize, sources, types, ids, severities, lengths, messageLog, __ret);
  return __ret;
}

typedef GLuint(*__ctype_glGetDebugMessageLogKHR)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *);
static __ctype_glGetDebugMessageLogKHR __glintercept_fnptr_glGetDebugMessageLogKHR;
GLuint __glintercept_glGetDebugMessageLogKHR(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) {
  GLuint __ret = __glintercept_fnptr_glGetDebugMessageLogKHR(count, bufSize, sources, types, ids, severities, lengths, messageLog);
  __glintercept_log(" - glGetDebugMessageLogKHR(count: %ld, bufSize: %ld, sources: %ld, types: %ld, ids: %ld, severities: %ld, lengths: %ld, messageLog: %ld) -> %ld", count, bufSize, sources, types, ids, severities, lengths, messageLog, __ret);
  return __ret;
}

typedef void(*__ctype_glGetDetailTexFuncSGIS)(GLenum, GLfloat *);
static __ctype_glGetDetailTexFuncSGIS __glintercept_fnptr_glGetDetailTexFuncSGIS;
void __glintercept_glGetDetailTexFuncSGIS(GLenum target, GLfloat * points) {
  __glintercept_fnptr_glGetDetailTexFuncSGIS(target, points);
  __glintercept_log(" - glGetDetailTexFuncSGIS(target: %ld (%s), points: %ld)", target, __gl_intercept_formatenum(target), points);
}

typedef void(*__ctype_glGetDoubleIndexedvEXT)(GLenum, GLuint, GLdouble *);
static __ctype_glGetDoubleIndexedvEXT __glintercept_fnptr_glGetDoubleIndexedvEXT;
void __glintercept_glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble * data) {
  __glintercept_fnptr_glGetDoubleIndexedvEXT(target, index, data);
  __glintercept_log(" - glGetDoubleIndexedvEXT(target: %ld (%s), index: %ld, data: %ld)", target, __gl_intercept_formatenum(target), index, data);
}

typedef void(*__ctype_glGetDoublei_v)(GLenum, GLuint, GLdouble *);
static __ctype_glGetDoublei_v __glintercept_fnptr_glGetDoublei_v;
void __glintercept_glGetDoublei_v(GLenum target, GLuint index, GLdouble * data) {
  __glintercept_fnptr_glGetDoublei_v(target, index, data);
  __glintercept_log(" - glGetDoublei_v(target: %ld (%s), index: %ld, data: %ld)", target, __gl_intercept_formatenum(target), index, data);
}

typedef void(*__ctype_glGetDoublei_vEXT)(GLenum, GLuint, GLdouble *);
static __ctype_glGetDoublei_vEXT __glintercept_fnptr_glGetDoublei_vEXT;
void __glintercept_glGetDoublei_vEXT(GLenum pname, GLuint index, GLdouble * params) {
  __glintercept_fnptr_glGetDoublei_vEXT(pname, index, params);
  __glintercept_log(" - glGetDoublei_vEXT(pname: %ld (%s), index: %ld, params: %ld)", pname, __gl_intercept_formatenum(pname), index, params);
}

typedef void(*__ctype_glGetDoublev)(GLenum, GLdouble *);
static __ctype_glGetDoublev __glintercept_fnptr_glGetDoublev;
void __glintercept_glGetDoublev(GLenum pname, GLdouble * data) {
  __glintercept_fnptr_glGetDoublev(pname, data);
  __glintercept_log(" - glGetDoublev(pname: %ld (%s), data: %ld)", pname, __gl_intercept_formatenum(pname), data);
}

typedef void(*__ctype_glGetDriverControlStringQCOM)(GLuint, GLsizei, GLsizei *, GLchar *);
static __ctype_glGetDriverControlStringQCOM __glintercept_fnptr_glGetDriverControlStringQCOM;
void __glintercept_glGetDriverControlStringQCOM(GLuint driverControl, GLsizei bufSize, GLsizei * length, GLchar * driverControlString) {
  __glintercept_fnptr_glGetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString);
  __glintercept_log(" - glGetDriverControlStringQCOM(driverControl: %ld, bufSize: %ld, length: %ld, driverControlString: %ld)", driverControl, bufSize, length, driverControlString);
}

typedef void(*__ctype_glGetDriverControlsQCOM)(GLint *, GLsizei, GLuint *);
static __ctype_glGetDriverControlsQCOM __glintercept_fnptr_glGetDriverControlsQCOM;
void __glintercept_glGetDriverControlsQCOM(GLint * num, GLsizei size, GLuint * driverControls) {
  __glintercept_fnptr_glGetDriverControlsQCOM(num, size, driverControls);
  __glintercept_log(" - glGetDriverControlsQCOM(num: %ld, size: %ld, driverControls: %ld)", num, size, driverControls);
}

typedef GLenum(*__ctype_glGetError)();
static __ctype_glGetError __glintercept_fnptr_glGetError;
GLenum __glintercept_glGetError() {
  GLenum __ret = __glintercept_fnptr_glGetError();
  __glintercept_log(" - glGetError() -> %ld", __ret);
  return __ret;
}

typedef void(*__ctype_glGetFenceivNV)(GLuint, GLenum, GLint *);
static __ctype_glGetFenceivNV __glintercept_fnptr_glGetFenceivNV;
void __glintercept_glGetFenceivNV(GLuint fence, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetFenceivNV(fence, pname, params);
  __glintercept_log(" - glGetFenceivNV(fence: %ld, pname: %ld (%s), params: %ld)", fence, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetFinalCombinerInputParameterfvNV)(GLenum, GLenum, GLfloat *);
static __ctype_glGetFinalCombinerInputParameterfvNV __glintercept_fnptr_glGetFinalCombinerInputParameterfvNV;
void __glintercept_glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetFinalCombinerInputParameterfvNV(variable, pname, params);
  __glintercept_log(" - glGetFinalCombinerInputParameterfvNV(variable: %ld (%s), pname: %ld (%s), params: %ld)", variable, __gl_intercept_formatenum(variable), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetFinalCombinerInputParameterivNV)(GLenum, GLenum, GLint *);
static __ctype_glGetFinalCombinerInputParameterivNV __glintercept_fnptr_glGetFinalCombinerInputParameterivNV;
void __glintercept_glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetFinalCombinerInputParameterivNV(variable, pname, params);
  __glintercept_log(" - glGetFinalCombinerInputParameterivNV(variable: %ld (%s), pname: %ld (%s), params: %ld)", variable, __gl_intercept_formatenum(variable), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetFirstPerfQueryIdINTEL)(GLuint *);
static __ctype_glGetFirstPerfQueryIdINTEL __glintercept_fnptr_glGetFirstPerfQueryIdINTEL;
void __glintercept_glGetFirstPerfQueryIdINTEL(GLuint * queryId) {
  __glintercept_fnptr_glGetFirstPerfQueryIdINTEL(queryId);
  __glintercept_log(" - glGetFirstPerfQueryIdINTEL(queryId: %ld)", queryId);
}

typedef void(*__ctype_glGetFixedv)(GLenum, GLfixed *);
static __ctype_glGetFixedv __glintercept_fnptr_glGetFixedv;
void __glintercept_glGetFixedv(GLenum pname, GLfixed * params) {
  __glintercept_fnptr_glGetFixedv(pname, params);
  __glintercept_log(" - glGetFixedv(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetFixedvOES)(GLenum, GLfixed *);
static __ctype_glGetFixedvOES __glintercept_fnptr_glGetFixedvOES;
void __glintercept_glGetFixedvOES(GLenum pname, GLfixed * params) {
  __glintercept_fnptr_glGetFixedvOES(pname, params);
  __glintercept_log(" - glGetFixedvOES(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetFloatIndexedvEXT)(GLenum, GLuint, GLfloat *);
static __ctype_glGetFloatIndexedvEXT __glintercept_fnptr_glGetFloatIndexedvEXT;
void __glintercept_glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat * data) {
  __glintercept_fnptr_glGetFloatIndexedvEXT(target, index, data);
  __glintercept_log(" - glGetFloatIndexedvEXT(target: %ld (%s), index: %ld, data: %ld)", target, __gl_intercept_formatenum(target), index, data);
}

typedef void(*__ctype_glGetFloati_v)(GLenum, GLuint, GLfloat *);
static __ctype_glGetFloati_v __glintercept_fnptr_glGetFloati_v;
void __glintercept_glGetFloati_v(GLenum target, GLuint index, GLfloat * data) {
  __glintercept_fnptr_glGetFloati_v(target, index, data);
  __glintercept_log(" - glGetFloati_v(target: %ld (%s), index: %ld, data: %ld)", target, __gl_intercept_formatenum(target), index, data);
}

typedef void(*__ctype_glGetFloati_vEXT)(GLenum, GLuint, GLfloat *);
static __ctype_glGetFloati_vEXT __glintercept_fnptr_glGetFloati_vEXT;
void __glintercept_glGetFloati_vEXT(GLenum pname, GLuint index, GLfloat * params) {
  __glintercept_fnptr_glGetFloati_vEXT(pname, index, params);
  __glintercept_log(" - glGetFloati_vEXT(pname: %ld (%s), index: %ld, params: %ld)", pname, __gl_intercept_formatenum(pname), index, params);
}

typedef void(*__ctype_glGetFloati_vNV)(GLenum, GLuint, GLfloat *);
static __ctype_glGetFloati_vNV __glintercept_fnptr_glGetFloati_vNV;
void __glintercept_glGetFloati_vNV(GLenum target, GLuint index, GLfloat * data) {
  __glintercept_fnptr_glGetFloati_vNV(target, index, data);
  __glintercept_log(" - glGetFloati_vNV(target: %ld (%s), index: %ld, data: %ld)", target, __gl_intercept_formatenum(target), index, data);
}

typedef void(*__ctype_glGetFloati_vOES)(GLenum, GLuint, GLfloat *);
static __ctype_glGetFloati_vOES __glintercept_fnptr_glGetFloati_vOES;
void __glintercept_glGetFloati_vOES(GLenum target, GLuint index, GLfloat * data) {
  __glintercept_fnptr_glGetFloati_vOES(target, index, data);
  __glintercept_log(" - glGetFloati_vOES(target: %ld (%s), index: %ld, data: %ld)", target, __gl_intercept_formatenum(target), index, data);
}

typedef void(*__ctype_glGetFloatv)(GLenum, GLfloat *);
static __ctype_glGetFloatv __glintercept_fnptr_glGetFloatv;
void __glintercept_glGetFloatv(GLenum pname, GLfloat * data) {
  __glintercept_fnptr_glGetFloatv(pname, data);
  __glintercept_log(" - glGetFloatv(pname: %ld (%s), data: %ld)", pname, __gl_intercept_formatenum(pname), data);
}

typedef void(*__ctype_glGetFogFuncSGIS)(GLfloat *);
static __ctype_glGetFogFuncSGIS __glintercept_fnptr_glGetFogFuncSGIS;
void __glintercept_glGetFogFuncSGIS(GLfloat * points) {
  __glintercept_fnptr_glGetFogFuncSGIS(points);
  __glintercept_log(" - glGetFogFuncSGIS(points: %ld)", points);
}

typedef GLint(*__ctype_glGetFragDataIndex)(GLuint, const GLchar *);
static __ctype_glGetFragDataIndex __glintercept_fnptr_glGetFragDataIndex;
GLint __glintercept_glGetFragDataIndex(GLuint program, const GLchar * name) {
  GLint __ret = __glintercept_fnptr_glGetFragDataIndex(program, name);
  __glintercept_log(" - glGetFragDataIndex(program: %ld, name: %ld) -> %ld", program, name, __ret);
  return __ret;
}

typedef GLint(*__ctype_glGetFragDataIndexEXT)(GLuint, const GLchar *);
static __ctype_glGetFragDataIndexEXT __glintercept_fnptr_glGetFragDataIndexEXT;
GLint __glintercept_glGetFragDataIndexEXT(GLuint program, const GLchar * name) {
  GLint __ret = __glintercept_fnptr_glGetFragDataIndexEXT(program, name);
  __glintercept_log(" - glGetFragDataIndexEXT(program: %ld, name: %ld) -> %ld", program, name, __ret);
  return __ret;
}

typedef GLint(*__ctype_glGetFragDataLocation)(GLuint, const GLchar *);
static __ctype_glGetFragDataLocation __glintercept_fnptr_glGetFragDataLocation;
GLint __glintercept_glGetFragDataLocation(GLuint program, const GLchar * name) {
  GLint __ret = __glintercept_fnptr_glGetFragDataLocation(program, name);
  __glintercept_log(" - glGetFragDataLocation(program: %ld, name: %ld) -> %ld", program, name, __ret);
  return __ret;
}

typedef GLint(*__ctype_glGetFragDataLocationEXT)(GLuint, const GLchar *);
static __ctype_glGetFragDataLocationEXT __glintercept_fnptr_glGetFragDataLocationEXT;
GLint __glintercept_glGetFragDataLocationEXT(GLuint program, const GLchar * name) {
  GLint __ret = __glintercept_fnptr_glGetFragDataLocationEXT(program, name);
  __glintercept_log(" - glGetFragDataLocationEXT(program: %ld, name: %ld) -> %ld", program, name, __ret);
  return __ret;
}

typedef void(*__ctype_glGetFragmentLightfvSGIX)(GLenum, GLenum, GLfloat *);
static __ctype_glGetFragmentLightfvSGIX __glintercept_fnptr_glGetFragmentLightfvSGIX;
void __glintercept_glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetFragmentLightfvSGIX(light, pname, params);
  __glintercept_log(" - glGetFragmentLightfvSGIX(light: %ld (%s), pname: %ld (%s), params: %ld)", light, __gl_intercept_formatenum(light), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetFragmentLightivSGIX)(GLenum, GLenum, GLint *);
static __ctype_glGetFragmentLightivSGIX __glintercept_fnptr_glGetFragmentLightivSGIX;
void __glintercept_glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetFragmentLightivSGIX(light, pname, params);
  __glintercept_log(" - glGetFragmentLightivSGIX(light: %ld (%s), pname: %ld (%s), params: %ld)", light, __gl_intercept_formatenum(light), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetFragmentMaterialfvSGIX)(GLenum, GLenum, GLfloat *);
static __ctype_glGetFragmentMaterialfvSGIX __glintercept_fnptr_glGetFragmentMaterialfvSGIX;
void __glintercept_glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetFragmentMaterialfvSGIX(face, pname, params);
  __glintercept_log(" - glGetFragmentMaterialfvSGIX(face: %ld (%s), pname: %ld (%s), params: %ld)", face, __gl_intercept_formatenum(face), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetFragmentMaterialivSGIX)(GLenum, GLenum, GLint *);
static __ctype_glGetFragmentMaterialivSGIX __glintercept_fnptr_glGetFragmentMaterialivSGIX;
void __glintercept_glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetFragmentMaterialivSGIX(face, pname, params);
  __glintercept_log(" - glGetFragmentMaterialivSGIX(face: %ld (%s), pname: %ld (%s), params: %ld)", face, __gl_intercept_formatenum(face), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetFramebufferAttachmentParameteriv)(GLenum, GLenum, GLenum, GLint *);
static __ctype_glGetFramebufferAttachmentParameteriv __glintercept_fnptr_glGetFramebufferAttachmentParameteriv;
void __glintercept_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
  __glintercept_log(" - glGetFramebufferAttachmentParameteriv(target: %ld (%s), attachment: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetFramebufferAttachmentParameterivEXT)(GLenum, GLenum, GLenum, GLint *);
static __ctype_glGetFramebufferAttachmentParameterivEXT __glintercept_fnptr_glGetFramebufferAttachmentParameterivEXT;
void __glintercept_glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params);
  __glintercept_log(" - glGetFramebufferAttachmentParameterivEXT(target: %ld (%s), attachment: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetFramebufferAttachmentParameterivOES)(GLenum, GLenum, GLenum, GLint *);
static __ctype_glGetFramebufferAttachmentParameterivOES __glintercept_fnptr_glGetFramebufferAttachmentParameterivOES;
void __glintercept_glGetFramebufferAttachmentParameterivOES(GLenum target, GLenum attachment, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetFramebufferAttachmentParameterivOES(target, attachment, pname, params);
  __glintercept_log(" - glGetFramebufferAttachmentParameterivOES(target: %ld (%s), attachment: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), attachment, __gl_intercept_formatenum(attachment), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetFramebufferParameterfvAMD)(GLenum, GLenum, GLuint, GLuint, GLsizei, GLfloat *);
static __ctype_glGetFramebufferParameterfvAMD __glintercept_fnptr_glGetFramebufferParameterfvAMD;
void __glintercept_glGetFramebufferParameterfvAMD(GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat * values) {
  __glintercept_fnptr_glGetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values);
  __glintercept_log(" - glGetFramebufferParameterfvAMD(target: %ld (%s), pname: %ld (%s), numsamples: %ld, pixelindex: %ld, size: %ld, values: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), numsamples, pixelindex, size, values);
}

typedef void(*__ctype_glGetFramebufferParameteriv)(GLenum, GLenum, GLint *);
static __ctype_glGetFramebufferParameteriv __glintercept_fnptr_glGetFramebufferParameteriv;
void __glintercept_glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetFramebufferParameteriv(target, pname, params);
  __glintercept_log(" - glGetFramebufferParameteriv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetFramebufferParameterivEXT)(GLuint, GLenum, GLint *);
static __ctype_glGetFramebufferParameterivEXT __glintercept_fnptr_glGetFramebufferParameterivEXT;
void __glintercept_glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetFramebufferParameterivEXT(framebuffer, pname, params);
  __glintercept_log(" - glGetFramebufferParameterivEXT(framebuffer: %ld, pname: %ld (%s), params: %ld)", framebuffer, pname, __gl_intercept_formatenum(pname), params);
}

typedef GLsizei(*__ctype_glGetFramebufferPixelLocalStorageSizeEXT)(GLuint);
static __ctype_glGetFramebufferPixelLocalStorageSizeEXT __glintercept_fnptr_glGetFramebufferPixelLocalStorageSizeEXT;
GLsizei __glintercept_glGetFramebufferPixelLocalStorageSizeEXT(GLuint target) {
  GLsizei __ret = __glintercept_fnptr_glGetFramebufferPixelLocalStorageSizeEXT(target);
  __glintercept_log(" - glGetFramebufferPixelLocalStorageSizeEXT(target: %ld) -> %ld", target, __ret);
  return __ret;
}

typedef GLenum(*__ctype_glGetGraphicsResetStatus)();
static __ctype_glGetGraphicsResetStatus __glintercept_fnptr_glGetGraphicsResetStatus;
GLenum __glintercept_glGetGraphicsResetStatus() {
  GLenum __ret = __glintercept_fnptr_glGetGraphicsResetStatus();
  __glintercept_log(" - glGetGraphicsResetStatus() -> %ld", __ret);
  return __ret;
}

typedef GLenum(*__ctype_glGetGraphicsResetStatusARB)();
static __ctype_glGetGraphicsResetStatusARB __glintercept_fnptr_glGetGraphicsResetStatusARB;
GLenum __glintercept_glGetGraphicsResetStatusARB() {
  GLenum __ret = __glintercept_fnptr_glGetGraphicsResetStatusARB();
  __glintercept_log(" - glGetGraphicsResetStatusARB() -> %ld", __ret);
  return __ret;
}

typedef GLenum(*__ctype_glGetGraphicsResetStatusEXT)();
static __ctype_glGetGraphicsResetStatusEXT __glintercept_fnptr_glGetGraphicsResetStatusEXT;
GLenum __glintercept_glGetGraphicsResetStatusEXT() {
  GLenum __ret = __glintercept_fnptr_glGetGraphicsResetStatusEXT();
  __glintercept_log(" - glGetGraphicsResetStatusEXT() -> %ld", __ret);
  return __ret;
}

typedef GLenum(*__ctype_glGetGraphicsResetStatusKHR)();
static __ctype_glGetGraphicsResetStatusKHR __glintercept_fnptr_glGetGraphicsResetStatusKHR;
GLenum __glintercept_glGetGraphicsResetStatusKHR() {
  GLenum __ret = __glintercept_fnptr_glGetGraphicsResetStatusKHR();
  __glintercept_log(" - glGetGraphicsResetStatusKHR() -> %ld", __ret);
  return __ret;
}

typedef GLhandleARB(*__ctype_glGetHandleARB)(GLenum);
static __ctype_glGetHandleARB __glintercept_fnptr_glGetHandleARB;
GLhandleARB __glintercept_glGetHandleARB(GLenum pname) {
  GLhandleARB __ret = __glintercept_fnptr_glGetHandleARB(pname);
  __glintercept_log(" - glGetHandleARB(pname: %ld (%s)) -> %ld", pname, __gl_intercept_formatenum(pname), __ret);
  return __ret;
}

typedef void(*__ctype_glGetHistogram)(GLenum, GLboolean, GLenum, GLenum, void *);
static __ctype_glGetHistogram __glintercept_fnptr_glGetHistogram;
void __glintercept_glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) {
  __glintercept_fnptr_glGetHistogram(target, reset, format, type, values);
  __glintercept_log(" - glGetHistogram(target: %ld (%s), reset: %ld, format: %ld (%s), type: %ld (%s), values: %ld)", target, __gl_intercept_formatenum(target), reset, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), values);
}

typedef void(*__ctype_glGetHistogramEXT)(GLenum, GLboolean, GLenum, GLenum, void *);
static __ctype_glGetHistogramEXT __glintercept_fnptr_glGetHistogramEXT;
void __glintercept_glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) {
  __glintercept_fnptr_glGetHistogramEXT(target, reset, format, type, values);
  __glintercept_log(" - glGetHistogramEXT(target: %ld (%s), reset: %ld, format: %ld (%s), type: %ld (%s), values: %ld)", target, __gl_intercept_formatenum(target), reset, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), values);
}

typedef void(*__ctype_glGetHistogramParameterfv)(GLenum, GLenum, GLfloat *);
static __ctype_glGetHistogramParameterfv __glintercept_fnptr_glGetHistogramParameterfv;
void __glintercept_glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetHistogramParameterfv(target, pname, params);
  __glintercept_log(" - glGetHistogramParameterfv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetHistogramParameterfvEXT)(GLenum, GLenum, GLfloat *);
static __ctype_glGetHistogramParameterfvEXT __glintercept_fnptr_glGetHistogramParameterfvEXT;
void __glintercept_glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetHistogramParameterfvEXT(target, pname, params);
  __glintercept_log(" - glGetHistogramParameterfvEXT(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetHistogramParameteriv)(GLenum, GLenum, GLint *);
static __ctype_glGetHistogramParameteriv __glintercept_fnptr_glGetHistogramParameteriv;
void __glintercept_glGetHistogramParameteriv(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetHistogramParameteriv(target, pname, params);
  __glintercept_log(" - glGetHistogramParameteriv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetHistogramParameterivEXT)(GLenum, GLenum, GLint *);
static __ctype_glGetHistogramParameterivEXT __glintercept_fnptr_glGetHistogramParameterivEXT;
void __glintercept_glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetHistogramParameterivEXT(target, pname, params);
  __glintercept_log(" - glGetHistogramParameterivEXT(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetHistogramParameterxvOES)(GLenum, GLenum, GLfixed *);
static __ctype_glGetHistogramParameterxvOES __glintercept_fnptr_glGetHistogramParameterxvOES;
void __glintercept_glGetHistogramParameterxvOES(GLenum target, GLenum pname, GLfixed * params) {
  __glintercept_fnptr_glGetHistogramParameterxvOES(target, pname, params);
  __glintercept_log(" - glGetHistogramParameterxvOES(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef GLuint64(*__ctype_glGetImageHandleARB)(GLuint, GLint, GLboolean, GLint, GLenum);
static __ctype_glGetImageHandleARB __glintercept_fnptr_glGetImageHandleARB;
GLuint64 __glintercept_glGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) {
  GLuint64 __ret = __glintercept_fnptr_glGetImageHandleARB(texture, level, layered, layer, format);
  __glintercept_log(" - glGetImageHandleARB(texture: %ld, level: %ld, layered: %ld, layer: %ld, format: %ld (%s)) -> %ld", texture, level, layered, layer, format, __gl_intercept_formatenum(format), __ret);
  return __ret;
}

typedef GLuint64(*__ctype_glGetImageHandleNV)(GLuint, GLint, GLboolean, GLint, GLenum);
static __ctype_glGetImageHandleNV __glintercept_fnptr_glGetImageHandleNV;
GLuint64 __glintercept_glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) {
  GLuint64 __ret = __glintercept_fnptr_glGetImageHandleNV(texture, level, layered, layer, format);
  __glintercept_log(" - glGetImageHandleNV(texture: %ld, level: %ld, layered: %ld, layer: %ld, format: %ld (%s)) -> %ld", texture, level, layered, layer, format, __gl_intercept_formatenum(format), __ret);
  return __ret;
}

typedef void(*__ctype_glGetImageTransformParameterfvHP)(GLenum, GLenum, GLfloat *);
static __ctype_glGetImageTransformParameterfvHP __glintercept_fnptr_glGetImageTransformParameterfvHP;
void __glintercept_glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetImageTransformParameterfvHP(target, pname, params);
  __glintercept_log(" - glGetImageTransformParameterfvHP(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetImageTransformParameterivHP)(GLenum, GLenum, GLint *);
static __ctype_glGetImageTransformParameterivHP __glintercept_fnptr_glGetImageTransformParameterivHP;
void __glintercept_glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetImageTransformParameterivHP(target, pname, params);
  __glintercept_log(" - glGetImageTransformParameterivHP(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetInfoLogARB)(GLhandleARB, GLsizei, GLsizei *, GLcharARB *);
static __ctype_glGetInfoLogARB __glintercept_fnptr_glGetInfoLogARB;
void __glintercept_glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog) {
  __glintercept_fnptr_glGetInfoLogARB(obj, maxLength, length, infoLog);
  __glintercept_log(" - glGetInfoLogARB(obj: %ld, maxLength: %ld, length: %ld, infoLog: %ld)", obj, maxLength, length, infoLog);
}

typedef GLint(*__ctype_glGetInstrumentsSGIX)();
static __ctype_glGetInstrumentsSGIX __glintercept_fnptr_glGetInstrumentsSGIX;
GLint __glintercept_glGetInstrumentsSGIX() {
  GLint __ret = __glintercept_fnptr_glGetInstrumentsSGIX();
  __glintercept_log(" - glGetInstrumentsSGIX() -> %ld", __ret);
  return __ret;
}

typedef void(*__ctype_glGetInteger64i_v)(GLenum, GLuint, GLint64 *);
static __ctype_glGetInteger64i_v __glintercept_fnptr_glGetInteger64i_v;
void __glintercept_glGetInteger64i_v(GLenum target, GLuint index, GLint64 * data) {
  __glintercept_fnptr_glGetInteger64i_v(target, index, data);
  __glintercept_log(" - glGetInteger64i_v(target: %ld (%s), index: %ld, data: %ld)", target, __gl_intercept_formatenum(target), index, data);
}

typedef void(*__ctype_glGetInteger64v)(GLenum, GLint64 *);
static __ctype_glGetInteger64v __glintercept_fnptr_glGetInteger64v;
void __glintercept_glGetInteger64v(GLenum pname, GLint64 * data) {
  __glintercept_fnptr_glGetInteger64v(pname, data);
  __glintercept_log(" - glGetInteger64v(pname: %ld (%s), data: %ld)", pname, __gl_intercept_formatenum(pname), data);
}

typedef void(*__ctype_glGetInteger64vAPPLE)(GLenum, GLint64 *);
static __ctype_glGetInteger64vAPPLE __glintercept_fnptr_glGetInteger64vAPPLE;
void __glintercept_glGetInteger64vAPPLE(GLenum pname, GLint64 * params) {
  __glintercept_fnptr_glGetInteger64vAPPLE(pname, params);
  __glintercept_log(" - glGetInteger64vAPPLE(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetInteger64vEXT)(GLenum, GLint64 *);
static __ctype_glGetInteger64vEXT __glintercept_fnptr_glGetInteger64vEXT;
void __glintercept_glGetInteger64vEXT(GLenum pname, GLint64 * data) {
  __glintercept_fnptr_glGetInteger64vEXT(pname, data);
  __glintercept_log(" - glGetInteger64vEXT(pname: %ld (%s), data: %ld)", pname, __gl_intercept_formatenum(pname), data);
}

typedef void(*__ctype_glGetIntegerIndexedvEXT)(GLenum, GLuint, GLint *);
static __ctype_glGetIntegerIndexedvEXT __glintercept_fnptr_glGetIntegerIndexedvEXT;
void __glintercept_glGetIntegerIndexedvEXT(GLenum target, GLuint index, GLint * data) {
  __glintercept_fnptr_glGetIntegerIndexedvEXT(target, index, data);
  __glintercept_log(" - glGetIntegerIndexedvEXT(target: %ld (%s), index: %ld, data: %ld)", target, __gl_intercept_formatenum(target), index, data);
}

typedef void(*__ctype_glGetIntegeri_v)(GLenum, GLuint, GLint *);
static __ctype_glGetIntegeri_v __glintercept_fnptr_glGetIntegeri_v;
void __glintercept_glGetIntegeri_v(GLenum target, GLuint index, GLint * data) {
  __glintercept_fnptr_glGetIntegeri_v(target, index, data);
  __glintercept_log(" - glGetIntegeri_v(target: %ld (%s), index: %ld, data: %ld)", target, __gl_intercept_formatenum(target), index, data);
}

typedef void(*__ctype_glGetIntegeri_vEXT)(GLenum, GLuint, GLint *);
static __ctype_glGetIntegeri_vEXT __glintercept_fnptr_glGetIntegeri_vEXT;
void __glintercept_glGetIntegeri_vEXT(GLenum target, GLuint index, GLint * data) {
  __glintercept_fnptr_glGetIntegeri_vEXT(target, index, data);
  __glintercept_log(" - glGetIntegeri_vEXT(target: %ld (%s), index: %ld, data: %ld)", target, __gl_intercept_formatenum(target), index, data);
}

typedef void(*__ctype_glGetIntegerui64i_vNV)(GLenum, GLuint, GLuint64EXT *);
static __ctype_glGetIntegerui64i_vNV __glintercept_fnptr_glGetIntegerui64i_vNV;
void __glintercept_glGetIntegerui64i_vNV(GLenum value, GLuint index, GLuint64EXT * result) {
  __glintercept_fnptr_glGetIntegerui64i_vNV(value, index, result);
  __glintercept_log(" - glGetIntegerui64i_vNV(value: %ld (%s), index: %ld, result: %ld)", value, __gl_intercept_formatenum(value), index, result);
}

typedef void(*__ctype_glGetIntegerui64vNV)(GLenum, GLuint64EXT *);
static __ctype_glGetIntegerui64vNV __glintercept_fnptr_glGetIntegerui64vNV;
void __glintercept_glGetIntegerui64vNV(GLenum value, GLuint64EXT * result) {
  __glintercept_fnptr_glGetIntegerui64vNV(value, result);
  __glintercept_log(" - glGetIntegerui64vNV(value: %ld (%s), result: %ld)", value, __gl_intercept_formatenum(value), result);
}

typedef void(*__ctype_glGetIntegerv)(GLenum, GLint *);
static __ctype_glGetIntegerv __glintercept_fnptr_glGetIntegerv;
void __glintercept_glGetIntegerv(GLenum pname, GLint * data) {
  __glintercept_fnptr_glGetIntegerv(pname, data);
  __glintercept_log(" - glGetIntegerv(pname: %ld (%s), data: %ld)", pname, __gl_intercept_formatenum(pname), data);
}

typedef void(*__ctype_glGetInternalformatSampleivNV)(GLenum, GLenum, GLsizei, GLenum, GLsizei, GLint *);
static __ctype_glGetInternalformatSampleivNV __glintercept_fnptr_glGetInternalformatSampleivNV;
void __glintercept_glGetInternalformatSampleivNV(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, GLint * params) {
  __glintercept_fnptr_glGetInternalformatSampleivNV(target, internalformat, samples, pname, count, params);
  __glintercept_log(" - glGetInternalformatSampleivNV(target: %ld (%s), internalformat: %ld (%s), samples: %ld, pname: %ld (%s), count: %ld, params: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), samples, pname, __gl_intercept_formatenum(pname), count, params);
}

typedef void(*__ctype_glGetInternalformati64v)(GLenum, GLenum, GLenum, GLsizei, GLint64 *);
static __ctype_glGetInternalformati64v __glintercept_fnptr_glGetInternalformati64v;
void __glintercept_glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 * params) {
  __glintercept_fnptr_glGetInternalformati64v(target, internalformat, pname, count, params);
  __glintercept_log(" - glGetInternalformati64v(target: %ld (%s), internalformat: %ld (%s), pname: %ld (%s), count: %ld, params: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), pname, __gl_intercept_formatenum(pname), count, params);
}

typedef void(*__ctype_glGetInternalformativ)(GLenum, GLenum, GLenum, GLsizei, GLint *);
static __ctype_glGetInternalformativ __glintercept_fnptr_glGetInternalformativ;
void __glintercept_glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint * params) {
  __glintercept_fnptr_glGetInternalformativ(target, internalformat, pname, count, params);
  __glintercept_log(" - glGetInternalformativ(target: %ld (%s), internalformat: %ld (%s), pname: %ld (%s), count: %ld, params: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), pname, __gl_intercept_formatenum(pname), count, params);
}

typedef void(*__ctype_glGetInvariantBooleanvEXT)(GLuint, GLenum, GLboolean *);
static __ctype_glGetInvariantBooleanvEXT __glintercept_fnptr_glGetInvariantBooleanvEXT;
void __glintercept_glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean * data) {
  __glintercept_fnptr_glGetInvariantBooleanvEXT(id, value, data);
  __glintercept_log(" - glGetInvariantBooleanvEXT(id: %ld, value: %ld (%s), data: %ld)", id, value, __gl_intercept_formatenum(value), data);
}

typedef void(*__ctype_glGetInvariantFloatvEXT)(GLuint, GLenum, GLfloat *);
static __ctype_glGetInvariantFloatvEXT __glintercept_fnptr_glGetInvariantFloatvEXT;
void __glintercept_glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat * data) {
  __glintercept_fnptr_glGetInvariantFloatvEXT(id, value, data);
  __glintercept_log(" - glGetInvariantFloatvEXT(id: %ld, value: %ld (%s), data: %ld)", id, value, __gl_intercept_formatenum(value), data);
}

typedef void(*__ctype_glGetInvariantIntegervEXT)(GLuint, GLenum, GLint *);
static __ctype_glGetInvariantIntegervEXT __glintercept_fnptr_glGetInvariantIntegervEXT;
void __glintercept_glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint * data) {
  __glintercept_fnptr_glGetInvariantIntegervEXT(id, value, data);
  __glintercept_log(" - glGetInvariantIntegervEXT(id: %ld, value: %ld (%s), data: %ld)", id, value, __gl_intercept_formatenum(value), data);
}

typedef void(*__ctype_glGetLightfv)(GLenum, GLenum, GLfloat *);
static __ctype_glGetLightfv __glintercept_fnptr_glGetLightfv;
void __glintercept_glGetLightfv(GLenum light, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetLightfv(light, pname, params);
  __glintercept_log(" - glGetLightfv(light: %ld (%s), pname: %ld (%s), params: %ld)", light, __gl_intercept_formatenum(light), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetLightiv)(GLenum, GLenum, GLint *);
static __ctype_glGetLightiv __glintercept_fnptr_glGetLightiv;
void __glintercept_glGetLightiv(GLenum light, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetLightiv(light, pname, params);
  __glintercept_log(" - glGetLightiv(light: %ld (%s), pname: %ld (%s), params: %ld)", light, __gl_intercept_formatenum(light), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetLightxOES)(GLenum, GLenum, GLfixed *);
static __ctype_glGetLightxOES __glintercept_fnptr_glGetLightxOES;
void __glintercept_glGetLightxOES(GLenum light, GLenum pname, GLfixed * params) {
  __glintercept_fnptr_glGetLightxOES(light, pname, params);
  __glintercept_log(" - glGetLightxOES(light: %ld (%s), pname: %ld (%s), params: %ld)", light, __gl_intercept_formatenum(light), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetLightxv)(GLenum, GLenum, GLfixed *);
static __ctype_glGetLightxv __glintercept_fnptr_glGetLightxv;
void __glintercept_glGetLightxv(GLenum light, GLenum pname, GLfixed * params) {
  __glintercept_fnptr_glGetLightxv(light, pname, params);
  __glintercept_log(" - glGetLightxv(light: %ld (%s), pname: %ld (%s), params: %ld)", light, __gl_intercept_formatenum(light), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetLightxvOES)(GLenum, GLenum, GLfixed *);
static __ctype_glGetLightxvOES __glintercept_fnptr_glGetLightxvOES;
void __glintercept_glGetLightxvOES(GLenum light, GLenum pname, GLfixed * params) {
  __glintercept_fnptr_glGetLightxvOES(light, pname, params);
  __glintercept_log(" - glGetLightxvOES(light: %ld (%s), pname: %ld (%s), params: %ld)", light, __gl_intercept_formatenum(light), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetListParameterfvSGIX)(GLuint, GLenum, GLfloat *);
static __ctype_glGetListParameterfvSGIX __glintercept_fnptr_glGetListParameterfvSGIX;
void __glintercept_glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetListParameterfvSGIX(list, pname, params);
  __glintercept_log(" - glGetListParameterfvSGIX(list: %ld, pname: %ld (%s), params: %ld)", list, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetListParameterivSGIX)(GLuint, GLenum, GLint *);
static __ctype_glGetListParameterivSGIX __glintercept_fnptr_glGetListParameterivSGIX;
void __glintercept_glGetListParameterivSGIX(GLuint list, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetListParameterivSGIX(list, pname, params);
  __glintercept_log(" - glGetListParameterivSGIX(list: %ld, pname: %ld (%s), params: %ld)", list, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetLocalConstantBooleanvEXT)(GLuint, GLenum, GLboolean *);
static __ctype_glGetLocalConstantBooleanvEXT __glintercept_fnptr_glGetLocalConstantBooleanvEXT;
void __glintercept_glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean * data) {
  __glintercept_fnptr_glGetLocalConstantBooleanvEXT(id, value, data);
  __glintercept_log(" - glGetLocalConstantBooleanvEXT(id: %ld, value: %ld (%s), data: %ld)", id, value, __gl_intercept_formatenum(value), data);
}

typedef void(*__ctype_glGetLocalConstantFloatvEXT)(GLuint, GLenum, GLfloat *);
static __ctype_glGetLocalConstantFloatvEXT __glintercept_fnptr_glGetLocalConstantFloatvEXT;
void __glintercept_glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat * data) {
  __glintercept_fnptr_glGetLocalConstantFloatvEXT(id, value, data);
  __glintercept_log(" - glGetLocalConstantFloatvEXT(id: %ld, value: %ld (%s), data: %ld)", id, value, __gl_intercept_formatenum(value), data);
}

typedef void(*__ctype_glGetLocalConstantIntegervEXT)(GLuint, GLenum, GLint *);
static __ctype_glGetLocalConstantIntegervEXT __glintercept_fnptr_glGetLocalConstantIntegervEXT;
void __glintercept_glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint * data) {
  __glintercept_fnptr_glGetLocalConstantIntegervEXT(id, value, data);
  __glintercept_log(" - glGetLocalConstantIntegervEXT(id: %ld, value: %ld (%s), data: %ld)", id, value, __gl_intercept_formatenum(value), data);
}

typedef void(*__ctype_glGetMapAttribParameterfvNV)(GLenum, GLuint, GLenum, GLfloat *);
static __ctype_glGetMapAttribParameterfvNV __glintercept_fnptr_glGetMapAttribParameterfvNV;
void __glintercept_glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetMapAttribParameterfvNV(target, index, pname, params);
  __glintercept_log(" - glGetMapAttribParameterfvNV(target: %ld (%s), index: %ld, pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMapAttribParameterivNV)(GLenum, GLuint, GLenum, GLint *);
static __ctype_glGetMapAttribParameterivNV __glintercept_fnptr_glGetMapAttribParameterivNV;
void __glintercept_glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetMapAttribParameterivNV(target, index, pname, params);
  __glintercept_log(" - glGetMapAttribParameterivNV(target: %ld (%s), index: %ld, pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMapControlPointsNV)(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, void *);
static __ctype_glGetMapControlPointsNV __glintercept_fnptr_glGetMapControlPointsNV;
void __glintercept_glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void * points) {
  __glintercept_fnptr_glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points);
  __glintercept_log(" - glGetMapControlPointsNV(target: %ld (%s), index: %ld, type: %ld (%s), ustride: %ld, vstride: %ld, packed: %ld, points: %ld)", target, __gl_intercept_formatenum(target), index, type, __gl_intercept_formatenum(type), ustride, vstride, packed, points);
}

typedef void(*__ctype_glGetMapParameterfvNV)(GLenum, GLenum, GLfloat *);
static __ctype_glGetMapParameterfvNV __glintercept_fnptr_glGetMapParameterfvNV;
void __glintercept_glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetMapParameterfvNV(target, pname, params);
  __glintercept_log(" - glGetMapParameterfvNV(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMapParameterivNV)(GLenum, GLenum, GLint *);
static __ctype_glGetMapParameterivNV __glintercept_fnptr_glGetMapParameterivNV;
void __glintercept_glGetMapParameterivNV(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetMapParameterivNV(target, pname, params);
  __glintercept_log(" - glGetMapParameterivNV(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMapdv)(GLenum, GLenum, GLdouble *);
static __ctype_glGetMapdv __glintercept_fnptr_glGetMapdv;
void __glintercept_glGetMapdv(GLenum target, GLenum query, GLdouble * v) {
  __glintercept_fnptr_glGetMapdv(target, query, v);
  __glintercept_log(" - glGetMapdv(target: %ld (%s), query: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), query, __gl_intercept_formatenum(query), v);
}

typedef void(*__ctype_glGetMapfv)(GLenum, GLenum, GLfloat *);
static __ctype_glGetMapfv __glintercept_fnptr_glGetMapfv;
void __glintercept_glGetMapfv(GLenum target, GLenum query, GLfloat * v) {
  __glintercept_fnptr_glGetMapfv(target, query, v);
  __glintercept_log(" - glGetMapfv(target: %ld (%s), query: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), query, __gl_intercept_formatenum(query), v);
}

typedef void(*__ctype_glGetMapiv)(GLenum, GLenum, GLint *);
static __ctype_glGetMapiv __glintercept_fnptr_glGetMapiv;
void __glintercept_glGetMapiv(GLenum target, GLenum query, GLint * v) {
  __glintercept_fnptr_glGetMapiv(target, query, v);
  __glintercept_log(" - glGetMapiv(target: %ld (%s), query: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), query, __gl_intercept_formatenum(query), v);
}

typedef void(*__ctype_glGetMapxvOES)(GLenum, GLenum, GLfixed *);
static __ctype_glGetMapxvOES __glintercept_fnptr_glGetMapxvOES;
void __glintercept_glGetMapxvOES(GLenum target, GLenum query, GLfixed * v) {
  __glintercept_fnptr_glGetMapxvOES(target, query, v);
  __glintercept_log(" - glGetMapxvOES(target: %ld (%s), query: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), query, __gl_intercept_formatenum(query), v);
}

typedef void(*__ctype_glGetMaterialfv)(GLenum, GLenum, GLfloat *);
static __ctype_glGetMaterialfv __glintercept_fnptr_glGetMaterialfv;
void __glintercept_glGetMaterialfv(GLenum face, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetMaterialfv(face, pname, params);
  __glintercept_log(" - glGetMaterialfv(face: %ld (%s), pname: %ld (%s), params: %ld)", face, __gl_intercept_formatenum(face), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMaterialiv)(GLenum, GLenum, GLint *);
static __ctype_glGetMaterialiv __glintercept_fnptr_glGetMaterialiv;
void __glintercept_glGetMaterialiv(GLenum face, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetMaterialiv(face, pname, params);
  __glintercept_log(" - glGetMaterialiv(face: %ld (%s), pname: %ld (%s), params: %ld)", face, __gl_intercept_formatenum(face), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMaterialxOES)(GLenum, GLenum, GLfixed);
static __ctype_glGetMaterialxOES __glintercept_fnptr_glGetMaterialxOES;
void __glintercept_glGetMaterialxOES(GLenum face, GLenum pname, GLfixed param) {
  __glintercept_fnptr_glGetMaterialxOES(face, pname, param);
  __glintercept_log(" - glGetMaterialxOES(face: %ld (%s), pname: %ld (%s), param: %ld)", face, __gl_intercept_formatenum(face), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glGetMaterialxv)(GLenum, GLenum, GLfixed *);
static __ctype_glGetMaterialxv __glintercept_fnptr_glGetMaterialxv;
void __glintercept_glGetMaterialxv(GLenum face, GLenum pname, GLfixed * params) {
  __glintercept_fnptr_glGetMaterialxv(face, pname, params);
  __glintercept_log(" - glGetMaterialxv(face: %ld (%s), pname: %ld (%s), params: %ld)", face, __gl_intercept_formatenum(face), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMaterialxvOES)(GLenum, GLenum, GLfixed *);
static __ctype_glGetMaterialxvOES __glintercept_fnptr_glGetMaterialxvOES;
void __glintercept_glGetMaterialxvOES(GLenum face, GLenum pname, GLfixed * params) {
  __glintercept_fnptr_glGetMaterialxvOES(face, pname, params);
  __glintercept_log(" - glGetMaterialxvOES(face: %ld (%s), pname: %ld (%s), params: %ld)", face, __gl_intercept_formatenum(face), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMemoryObjectDetachedResourcesuivNV)(GLuint, GLenum, GLint, GLsizei, GLuint *);
static __ctype_glGetMemoryObjectDetachedResourcesuivNV __glintercept_fnptr_glGetMemoryObjectDetachedResourcesuivNV;
void __glintercept_glGetMemoryObjectDetachedResourcesuivNV(GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint * params) {
  __glintercept_fnptr_glGetMemoryObjectDetachedResourcesuivNV(memory, pname, first, count, params);
  __glintercept_log(" - glGetMemoryObjectDetachedResourcesuivNV(memory: %ld, pname: %ld (%s), first: %ld, count: %ld, params: %ld)", memory, pname, __gl_intercept_formatenum(pname), first, count, params);
}

typedef void(*__ctype_glGetMemoryObjectParameterivEXT)(GLuint, GLenum, GLint *);
static __ctype_glGetMemoryObjectParameterivEXT __glintercept_fnptr_glGetMemoryObjectParameterivEXT;
void __glintercept_glGetMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetMemoryObjectParameterivEXT(memoryObject, pname, params);
  __glintercept_log(" - glGetMemoryObjectParameterivEXT(memoryObject: %ld, pname: %ld (%s), params: %ld)", memoryObject, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMinmax)(GLenum, GLboolean, GLenum, GLenum, void *);
static __ctype_glGetMinmax __glintercept_fnptr_glGetMinmax;
void __glintercept_glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) {
  __glintercept_fnptr_glGetMinmax(target, reset, format, type, values);
  __glintercept_log(" - glGetMinmax(target: %ld (%s), reset: %ld, format: %ld (%s), type: %ld (%s), values: %ld)", target, __gl_intercept_formatenum(target), reset, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), values);
}

typedef void(*__ctype_glGetMinmaxEXT)(GLenum, GLboolean, GLenum, GLenum, void *);
static __ctype_glGetMinmaxEXT __glintercept_fnptr_glGetMinmaxEXT;
void __glintercept_glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) {
  __glintercept_fnptr_glGetMinmaxEXT(target, reset, format, type, values);
  __glintercept_log(" - glGetMinmaxEXT(target: %ld (%s), reset: %ld, format: %ld (%s), type: %ld (%s), values: %ld)", target, __gl_intercept_formatenum(target), reset, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), values);
}

typedef void(*__ctype_glGetMinmaxParameterfv)(GLenum, GLenum, GLfloat *);
static __ctype_glGetMinmaxParameterfv __glintercept_fnptr_glGetMinmaxParameterfv;
void __glintercept_glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetMinmaxParameterfv(target, pname, params);
  __glintercept_log(" - glGetMinmaxParameterfv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMinmaxParameterfvEXT)(GLenum, GLenum, GLfloat *);
static __ctype_glGetMinmaxParameterfvEXT __glintercept_fnptr_glGetMinmaxParameterfvEXT;
void __glintercept_glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetMinmaxParameterfvEXT(target, pname, params);
  __glintercept_log(" - glGetMinmaxParameterfvEXT(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMinmaxParameteriv)(GLenum, GLenum, GLint *);
static __ctype_glGetMinmaxParameteriv __glintercept_fnptr_glGetMinmaxParameteriv;
void __glintercept_glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetMinmaxParameteriv(target, pname, params);
  __glintercept_log(" - glGetMinmaxParameteriv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMinmaxParameterivEXT)(GLenum, GLenum, GLint *);
static __ctype_glGetMinmaxParameterivEXT __glintercept_fnptr_glGetMinmaxParameterivEXT;
void __glintercept_glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetMinmaxParameterivEXT(target, pname, params);
  __glintercept_log(" - glGetMinmaxParameterivEXT(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMultiTexEnvfvEXT)(GLenum, GLenum, GLenum, GLfloat *);
static __ctype_glGetMultiTexEnvfvEXT __glintercept_fnptr_glGetMultiTexEnvfvEXT;
void __glintercept_glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetMultiTexEnvfvEXT(texunit, target, pname, params);
  __glintercept_log(" - glGetMultiTexEnvfvEXT(texunit: %ld (%s), target: %ld (%s), pname: %ld (%s), params: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMultiTexEnvivEXT)(GLenum, GLenum, GLenum, GLint *);
static __ctype_glGetMultiTexEnvivEXT __glintercept_fnptr_glGetMultiTexEnvivEXT;
void __glintercept_glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetMultiTexEnvivEXT(texunit, target, pname, params);
  __glintercept_log(" - glGetMultiTexEnvivEXT(texunit: %ld (%s), target: %ld (%s), pname: %ld (%s), params: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMultiTexGendvEXT)(GLenum, GLenum, GLenum, GLdouble *);
static __ctype_glGetMultiTexGendvEXT __glintercept_fnptr_glGetMultiTexGendvEXT;
void __glintercept_glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble * params) {
  __glintercept_fnptr_glGetMultiTexGendvEXT(texunit, coord, pname, params);
  __glintercept_log(" - glGetMultiTexGendvEXT(texunit: %ld (%s), coord: %ld (%s), pname: %ld (%s), params: %ld)", texunit, __gl_intercept_formatenum(texunit), coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMultiTexGenfvEXT)(GLenum, GLenum, GLenum, GLfloat *);
static __ctype_glGetMultiTexGenfvEXT __glintercept_fnptr_glGetMultiTexGenfvEXT;
void __glintercept_glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetMultiTexGenfvEXT(texunit, coord, pname, params);
  __glintercept_log(" - glGetMultiTexGenfvEXT(texunit: %ld (%s), coord: %ld (%s), pname: %ld (%s), params: %ld)", texunit, __gl_intercept_formatenum(texunit), coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMultiTexGenivEXT)(GLenum, GLenum, GLenum, GLint *);
static __ctype_glGetMultiTexGenivEXT __glintercept_fnptr_glGetMultiTexGenivEXT;
void __glintercept_glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetMultiTexGenivEXT(texunit, coord, pname, params);
  __glintercept_log(" - glGetMultiTexGenivEXT(texunit: %ld (%s), coord: %ld (%s), pname: %ld (%s), params: %ld)", texunit, __gl_intercept_formatenum(texunit), coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMultiTexImageEXT)(GLenum, GLenum, GLint, GLenum, GLenum, void *);
static __ctype_glGetMultiTexImageEXT __glintercept_fnptr_glGetMultiTexImageEXT;
void __glintercept_glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void * pixels) {
  __glintercept_fnptr_glGetMultiTexImageEXT(texunit, target, level, format, type, pixels);
  __glintercept_log(" - glGetMultiTexImageEXT(texunit: %ld (%s), target: %ld (%s), level: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), level, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glGetMultiTexLevelParameterfvEXT)(GLenum, GLenum, GLint, GLenum, GLfloat *);
static __ctype_glGetMultiTexLevelParameterfvEXT __glintercept_fnptr_glGetMultiTexLevelParameterfvEXT;
void __glintercept_glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params);
  __glintercept_log(" - glGetMultiTexLevelParameterfvEXT(texunit: %ld (%s), target: %ld (%s), level: %ld, pname: %ld (%s), params: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), level, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMultiTexLevelParameterivEXT)(GLenum, GLenum, GLint, GLenum, GLint *);
static __ctype_glGetMultiTexLevelParameterivEXT __glintercept_fnptr_glGetMultiTexLevelParameterivEXT;
void __glintercept_glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params);
  __glintercept_log(" - glGetMultiTexLevelParameterivEXT(texunit: %ld (%s), target: %ld (%s), level: %ld, pname: %ld (%s), params: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), level, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMultiTexParameterIivEXT)(GLenum, GLenum, GLenum, GLint *);
static __ctype_glGetMultiTexParameterIivEXT __glintercept_fnptr_glGetMultiTexParameterIivEXT;
void __glintercept_glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetMultiTexParameterIivEXT(texunit, target, pname, params);
  __glintercept_log(" - glGetMultiTexParameterIivEXT(texunit: %ld (%s), target: %ld (%s), pname: %ld (%s), params: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMultiTexParameterIuivEXT)(GLenum, GLenum, GLenum, GLuint *);
static __ctype_glGetMultiTexParameterIuivEXT __glintercept_fnptr_glGetMultiTexParameterIuivEXT;
void __glintercept_glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint * params) {
  __glintercept_fnptr_glGetMultiTexParameterIuivEXT(texunit, target, pname, params);
  __glintercept_log(" - glGetMultiTexParameterIuivEXT(texunit: %ld (%s), target: %ld (%s), pname: %ld (%s), params: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMultiTexParameterfvEXT)(GLenum, GLenum, GLenum, GLfloat *);
static __ctype_glGetMultiTexParameterfvEXT __glintercept_fnptr_glGetMultiTexParameterfvEXT;
void __glintercept_glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetMultiTexParameterfvEXT(texunit, target, pname, params);
  __glintercept_log(" - glGetMultiTexParameterfvEXT(texunit: %ld (%s), target: %ld (%s), pname: %ld (%s), params: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMultiTexParameterivEXT)(GLenum, GLenum, GLenum, GLint *);
static __ctype_glGetMultiTexParameterivEXT __glintercept_fnptr_glGetMultiTexParameterivEXT;
void __glintercept_glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetMultiTexParameterivEXT(texunit, target, pname, params);
  __glintercept_log(" - glGetMultiTexParameterivEXT(texunit: %ld (%s), target: %ld (%s), pname: %ld (%s), params: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetMultisamplefv)(GLenum, GLuint, GLfloat *);
static __ctype_glGetMultisamplefv __glintercept_fnptr_glGetMultisamplefv;
void __glintercept_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat * val) {
  __glintercept_fnptr_glGetMultisamplefv(pname, index, val);
  __glintercept_log(" - glGetMultisamplefv(pname: %ld (%s), index: %ld, val: %ld)", pname, __gl_intercept_formatenum(pname), index, val);
}

typedef void(*__ctype_glGetMultisamplefvNV)(GLenum, GLuint, GLfloat *);
static __ctype_glGetMultisamplefvNV __glintercept_fnptr_glGetMultisamplefvNV;
void __glintercept_glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat * val) {
  __glintercept_fnptr_glGetMultisamplefvNV(pname, index, val);
  __glintercept_log(" - glGetMultisamplefvNV(pname: %ld (%s), index: %ld, val: %ld)", pname, __gl_intercept_formatenum(pname), index, val);
}

typedef void(*__ctype_glGetNamedBufferParameteri64v)(GLuint, GLenum, GLint64 *);
static __ctype_glGetNamedBufferParameteri64v __glintercept_fnptr_glGetNamedBufferParameteri64v;
void __glintercept_glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 * params) {
  __glintercept_fnptr_glGetNamedBufferParameteri64v(buffer, pname, params);
  __glintercept_log(" - glGetNamedBufferParameteri64v(buffer: %ld, pname: %ld (%s), params: %ld)", buffer, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetNamedBufferParameteriv)(GLuint, GLenum, GLint *);
static __ctype_glGetNamedBufferParameteriv __glintercept_fnptr_glGetNamedBufferParameteriv;
void __glintercept_glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetNamedBufferParameteriv(buffer, pname, params);
  __glintercept_log(" - glGetNamedBufferParameteriv(buffer: %ld, pname: %ld (%s), params: %ld)", buffer, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetNamedBufferParameterivEXT)(GLuint, GLenum, GLint *);
static __ctype_glGetNamedBufferParameterivEXT __glintercept_fnptr_glGetNamedBufferParameterivEXT;
void __glintercept_glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetNamedBufferParameterivEXT(buffer, pname, params);
  __glintercept_log(" - glGetNamedBufferParameterivEXT(buffer: %ld, pname: %ld (%s), params: %ld)", buffer, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetNamedBufferParameterui64vNV)(GLuint, GLenum, GLuint64EXT *);
static __ctype_glGetNamedBufferParameterui64vNV __glintercept_fnptr_glGetNamedBufferParameterui64vNV;
void __glintercept_glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT * params) {
  __glintercept_fnptr_glGetNamedBufferParameterui64vNV(buffer, pname, params);
  __glintercept_log(" - glGetNamedBufferParameterui64vNV(buffer: %ld, pname: %ld (%s), params: %ld)", buffer, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetNamedBufferPointerv)(GLuint, GLenum, void **);
static __ctype_glGetNamedBufferPointerv __glintercept_fnptr_glGetNamedBufferPointerv;
void __glintercept_glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void ** params) {
  __glintercept_fnptr_glGetNamedBufferPointerv(buffer, pname, params);
  __glintercept_log(" - glGetNamedBufferPointerv(buffer: %ld, pname: %ld (%s), params: %ld)", buffer, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetNamedBufferPointervEXT)(GLuint, GLenum, void **);
static __ctype_glGetNamedBufferPointervEXT __glintercept_fnptr_glGetNamedBufferPointervEXT;
void __glintercept_glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, void ** params) {
  __glintercept_fnptr_glGetNamedBufferPointervEXT(buffer, pname, params);
  __glintercept_log(" - glGetNamedBufferPointervEXT(buffer: %ld, pname: %ld (%s), params: %ld)", buffer, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetNamedBufferSubData)(GLuint, GLintptr, GLsizeiptr, void *);
static __ctype_glGetNamedBufferSubData __glintercept_fnptr_glGetNamedBufferSubData;
void __glintercept_glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data) {
  __glintercept_fnptr_glGetNamedBufferSubData(buffer, offset, size, data);
  __glintercept_log(" - glGetNamedBufferSubData(buffer: %ld, offset: %ld, size: %ld, data: %ld)", buffer, offset, size, data);
}

typedef void(*__ctype_glGetNamedBufferSubDataEXT)(GLuint, GLintptr, GLsizeiptr, void *);
static __ctype_glGetNamedBufferSubDataEXT __glintercept_fnptr_glGetNamedBufferSubDataEXT;
void __glintercept_glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data) {
  __glintercept_fnptr_glGetNamedBufferSubDataEXT(buffer, offset, size, data);
  __glintercept_log(" - glGetNamedBufferSubDataEXT(buffer: %ld, offset: %ld, size: %ld, data: %ld)", buffer, offset, size, data);
}

typedef void(*__ctype_glGetNamedFramebufferParameterfvAMD)(GLuint, GLenum, GLuint, GLuint, GLsizei, GLfloat *);
static __ctype_glGetNamedFramebufferParameterfvAMD __glintercept_fnptr_glGetNamedFramebufferParameterfvAMD;
void __glintercept_glGetNamedFramebufferParameterfvAMD(GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat * values) {
  __glintercept_fnptr_glGetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values);
  __glintercept_log(" - glGetNamedFramebufferParameterfvAMD(framebuffer: %ld, pname: %ld (%s), numsamples: %ld, pixelindex: %ld, size: %ld, values: %ld)", framebuffer, pname, __gl_intercept_formatenum(pname), numsamples, pixelindex, size, values);
}

typedef void(*__ctype_glGetNamedFramebufferAttachmentParameteriv)(GLuint, GLenum, GLenum, GLint *);
static __ctype_glGetNamedFramebufferAttachmentParameteriv __glintercept_fnptr_glGetNamedFramebufferAttachmentParameteriv;
void __glintercept_glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params);
  __glintercept_log(" - glGetNamedFramebufferAttachmentParameteriv(framebuffer: %ld, attachment: %ld (%s), pname: %ld (%s), params: %ld)", framebuffer, attachment, __gl_intercept_formatenum(attachment), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetNamedFramebufferAttachmentParameterivEXT)(GLuint, GLenum, GLenum, GLint *);
static __ctype_glGetNamedFramebufferAttachmentParameterivEXT __glintercept_fnptr_glGetNamedFramebufferAttachmentParameterivEXT;
void __glintercept_glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params);
  __glintercept_log(" - glGetNamedFramebufferAttachmentParameterivEXT(framebuffer: %ld, attachment: %ld (%s), pname: %ld (%s), params: %ld)", framebuffer, attachment, __gl_intercept_formatenum(attachment), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetNamedFramebufferParameteriv)(GLuint, GLenum, GLint *);
static __ctype_glGetNamedFramebufferParameteriv __glintercept_fnptr_glGetNamedFramebufferParameteriv;
void __glintercept_glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint * param) {
  __glintercept_fnptr_glGetNamedFramebufferParameteriv(framebuffer, pname, param);
  __glintercept_log(" - glGetNamedFramebufferParameteriv(framebuffer: %ld, pname: %ld (%s), param: %ld)", framebuffer, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glGetNamedFramebufferParameterivEXT)(GLuint, GLenum, GLint *);
static __ctype_glGetNamedFramebufferParameterivEXT __glintercept_fnptr_glGetNamedFramebufferParameterivEXT;
void __glintercept_glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetNamedFramebufferParameterivEXT(framebuffer, pname, params);
  __glintercept_log(" - glGetNamedFramebufferParameterivEXT(framebuffer: %ld, pname: %ld (%s), params: %ld)", framebuffer, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetNamedProgramLocalParameterIivEXT)(GLuint, GLenum, GLuint, GLint *);
static __ctype_glGetNamedProgramLocalParameterIivEXT __glintercept_fnptr_glGetNamedProgramLocalParameterIivEXT;
void __glintercept_glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint * params) {
  __glintercept_fnptr_glGetNamedProgramLocalParameterIivEXT(program, target, index, params);
  __glintercept_log(" - glGetNamedProgramLocalParameterIivEXT(program: %ld, target: %ld (%s), index: %ld, params: %ld)", program, target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glGetNamedProgramLocalParameterIuivEXT)(GLuint, GLenum, GLuint, GLuint *);
static __ctype_glGetNamedProgramLocalParameterIuivEXT __glintercept_fnptr_glGetNamedProgramLocalParameterIuivEXT;
void __glintercept_glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint * params) {
  __glintercept_fnptr_glGetNamedProgramLocalParameterIuivEXT(program, target, index, params);
  __glintercept_log(" - glGetNamedProgramLocalParameterIuivEXT(program: %ld, target: %ld (%s), index: %ld, params: %ld)", program, target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glGetNamedProgramLocalParameterdvEXT)(GLuint, GLenum, GLuint, GLdouble *);
static __ctype_glGetNamedProgramLocalParameterdvEXT __glintercept_fnptr_glGetNamedProgramLocalParameterdvEXT;
void __glintercept_glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble * params) {
  __glintercept_fnptr_glGetNamedProgramLocalParameterdvEXT(program, target, index, params);
  __glintercept_log(" - glGetNamedProgramLocalParameterdvEXT(program: %ld, target: %ld (%s), index: %ld, params: %ld)", program, target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glGetNamedProgramLocalParameterfvEXT)(GLuint, GLenum, GLuint, GLfloat *);
static __ctype_glGetNamedProgramLocalParameterfvEXT __glintercept_fnptr_glGetNamedProgramLocalParameterfvEXT;
void __glintercept_glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat * params) {
  __glintercept_fnptr_glGetNamedProgramLocalParameterfvEXT(program, target, index, params);
  __glintercept_log(" - glGetNamedProgramLocalParameterfvEXT(program: %ld, target: %ld (%s), index: %ld, params: %ld)", program, target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glGetNamedProgramStringEXT)(GLuint, GLenum, GLenum, void *);
static __ctype_glGetNamedProgramStringEXT __glintercept_fnptr_glGetNamedProgramStringEXT;
void __glintercept_glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, void * string) {
  __glintercept_fnptr_glGetNamedProgramStringEXT(program, target, pname, string);
  __glintercept_log(" - glGetNamedProgramStringEXT(program: %ld, target: %ld (%s), pname: %ld (%s), string: %ld)", program, target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), string);
}

typedef void(*__ctype_glGetNamedProgramivEXT)(GLuint, GLenum, GLenum, GLint *);
static __ctype_glGetNamedProgramivEXT __glintercept_fnptr_glGetNamedProgramivEXT;
void __glintercept_glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetNamedProgramivEXT(program, target, pname, params);
  __glintercept_log(" - glGetNamedProgramivEXT(program: %ld, target: %ld (%s), pname: %ld (%s), params: %ld)", program, target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetNamedRenderbufferParameteriv)(GLuint, GLenum, GLint *);
static __ctype_glGetNamedRenderbufferParameteriv __glintercept_fnptr_glGetNamedRenderbufferParameteriv;
void __glintercept_glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetNamedRenderbufferParameteriv(renderbuffer, pname, params);
  __glintercept_log(" - glGetNamedRenderbufferParameteriv(renderbuffer: %ld, pname: %ld (%s), params: %ld)", renderbuffer, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetNamedRenderbufferParameterivEXT)(GLuint, GLenum, GLint *);
static __ctype_glGetNamedRenderbufferParameterivEXT __glintercept_fnptr_glGetNamedRenderbufferParameterivEXT;
void __glintercept_glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params);
  __glintercept_log(" - glGetNamedRenderbufferParameterivEXT(renderbuffer: %ld, pname: %ld (%s), params: %ld)", renderbuffer, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetNamedStringARB)(GLint, const GLchar *, GLsizei, GLint *, GLchar *);
static __ctype_glGetNamedStringARB __glintercept_fnptr_glGetNamedStringARB;
void __glintercept_glGetNamedStringARB(GLint namelen, const GLchar * name, GLsizei bufSize, GLint * stringlen, GLchar * string) {
  __glintercept_fnptr_glGetNamedStringARB(namelen, name, bufSize, stringlen, string);
  __glintercept_log(" - glGetNamedStringARB(namelen: %ld, name: %ld, bufSize: %ld, stringlen: %ld, string: %ld)", namelen, name, bufSize, stringlen, string);
}

typedef void(*__ctype_glGetNamedStringivARB)(GLint, const GLchar *, GLenum, GLint *);
static __ctype_glGetNamedStringivARB __glintercept_fnptr_glGetNamedStringivARB;
void __glintercept_glGetNamedStringivARB(GLint namelen, const GLchar * name, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetNamedStringivARB(namelen, name, pname, params);
  __glintercept_log(" - glGetNamedStringivARB(namelen: %ld, name: %ld, pname: %ld (%s), params: %ld)", namelen, name, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetNextPerfQueryIdINTEL)(GLuint, GLuint *);
static __ctype_glGetNextPerfQueryIdINTEL __glintercept_fnptr_glGetNextPerfQueryIdINTEL;
void __glintercept_glGetNextPerfQueryIdINTEL(GLuint queryId, GLuint * nextQueryId) {
  __glintercept_fnptr_glGetNextPerfQueryIdINTEL(queryId, nextQueryId);
  __glintercept_log(" - glGetNextPerfQueryIdINTEL(queryId: %ld, nextQueryId: %ld)", queryId, nextQueryId);
}

typedef void(*__ctype_glGetObjectBufferfvATI)(GLuint, GLenum, GLfloat *);
static __ctype_glGetObjectBufferfvATI __glintercept_fnptr_glGetObjectBufferfvATI;
void __glintercept_glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetObjectBufferfvATI(buffer, pname, params);
  __glintercept_log(" - glGetObjectBufferfvATI(buffer: %ld, pname: %ld (%s), params: %ld)", buffer, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetObjectBufferivATI)(GLuint, GLenum, GLint *);
static __ctype_glGetObjectBufferivATI __glintercept_fnptr_glGetObjectBufferivATI;
void __glintercept_glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetObjectBufferivATI(buffer, pname, params);
  __glintercept_log(" - glGetObjectBufferivATI(buffer: %ld, pname: %ld (%s), params: %ld)", buffer, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetObjectLabel)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
static __ctype_glGetObjectLabel __glintercept_fnptr_glGetObjectLabel;
void __glintercept_glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label) {
  __glintercept_fnptr_glGetObjectLabel(identifier, name, bufSize, length, label);
  __glintercept_log(" - glGetObjectLabel(identifier: %ld (%s), name: %ld, bufSize: %ld, length: %ld, label: %ld)", identifier, __gl_intercept_formatenum(identifier), name, bufSize, length, label);
}

typedef void(*__ctype_glGetObjectLabelEXT)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
static __ctype_glGetObjectLabelEXT __glintercept_fnptr_glGetObjectLabelEXT;
void __glintercept_glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei * length, GLchar * label) {
  __glintercept_fnptr_glGetObjectLabelEXT(type, object, bufSize, length, label);
  __glintercept_log(" - glGetObjectLabelEXT(type: %ld (%s), object: %ld, bufSize: %ld, length: %ld, label: %ld)", type, __gl_intercept_formatenum(type), object, bufSize, length, label);
}

typedef void(*__ctype_glGetObjectLabelKHR)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
static __ctype_glGetObjectLabelKHR __glintercept_fnptr_glGetObjectLabelKHR;
void __glintercept_glGetObjectLabelKHR(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label) {
  __glintercept_fnptr_glGetObjectLabelKHR(identifier, name, bufSize, length, label);
  __glintercept_log(" - glGetObjectLabelKHR(identifier: %ld (%s), name: %ld, bufSize: %ld, length: %ld, label: %ld)", identifier, __gl_intercept_formatenum(identifier), name, bufSize, length, label);
}

typedef void(*__ctype_glGetObjectParameterfvARB)(GLhandleARB, GLenum, GLfloat *);
static __ctype_glGetObjectParameterfvARB __glintercept_fnptr_glGetObjectParameterfvARB;
void __glintercept_glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetObjectParameterfvARB(obj, pname, params);
  __glintercept_log(" - glGetObjectParameterfvARB(obj: %ld, pname: %ld (%s), params: %ld)", obj, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetObjectParameterivAPPLE)(GLenum, GLuint, GLenum, GLint *);
static __ctype_glGetObjectParameterivAPPLE __glintercept_fnptr_glGetObjectParameterivAPPLE;
void __glintercept_glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetObjectParameterivAPPLE(objectType, name, pname, params);
  __glintercept_log(" - glGetObjectParameterivAPPLE(objectType: %ld (%s), name: %ld, pname: %ld (%s), params: %ld)", objectType, __gl_intercept_formatenum(objectType), name, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetObjectParameterivARB)(GLhandleARB, GLenum, GLint *);
static __ctype_glGetObjectParameterivARB __glintercept_fnptr_glGetObjectParameterivARB;
void __glintercept_glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetObjectParameterivARB(obj, pname, params);
  __glintercept_log(" - glGetObjectParameterivARB(obj: %ld, pname: %ld (%s), params: %ld)", obj, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetObjectPtrLabel)(const void *, GLsizei, GLsizei *, GLchar *);
static __ctype_glGetObjectPtrLabel __glintercept_fnptr_glGetObjectPtrLabel;
void __glintercept_glGetObjectPtrLabel(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label) {
  __glintercept_fnptr_glGetObjectPtrLabel(ptr, bufSize, length, label);
  __glintercept_log(" - glGetObjectPtrLabel(ptr: %ld, bufSize: %ld, length: %ld, label: %ld)", ptr, bufSize, length, label);
}

typedef void(*__ctype_glGetObjectPtrLabelKHR)(const void *, GLsizei, GLsizei *, GLchar *);
static __ctype_glGetObjectPtrLabelKHR __glintercept_fnptr_glGetObjectPtrLabelKHR;
void __glintercept_glGetObjectPtrLabelKHR(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label) {
  __glintercept_fnptr_glGetObjectPtrLabelKHR(ptr, bufSize, length, label);
  __glintercept_log(" - glGetObjectPtrLabelKHR(ptr: %ld, bufSize: %ld, length: %ld, label: %ld)", ptr, bufSize, length, label);
}

typedef void(*__ctype_glGetOcclusionQueryivNV)(GLuint, GLenum, GLint *);
static __ctype_glGetOcclusionQueryivNV __glintercept_fnptr_glGetOcclusionQueryivNV;
void __glintercept_glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetOcclusionQueryivNV(id, pname, params);
  __glintercept_log(" - glGetOcclusionQueryivNV(id: %ld, pname: %ld (%s), params: %ld)", id, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetOcclusionQueryuivNV)(GLuint, GLenum, GLuint *);
static __ctype_glGetOcclusionQueryuivNV __glintercept_fnptr_glGetOcclusionQueryuivNV;
void __glintercept_glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint * params) {
  __glintercept_fnptr_glGetOcclusionQueryuivNV(id, pname, params);
  __glintercept_log(" - glGetOcclusionQueryuivNV(id: %ld, pname: %ld (%s), params: %ld)", id, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetPathColorGenfvNV)(GLenum, GLenum, GLfloat *);
static __ctype_glGetPathColorGenfvNV __glintercept_fnptr_glGetPathColorGenfvNV;
void __glintercept_glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat * value) {
  __glintercept_fnptr_glGetPathColorGenfvNV(color, pname, value);
  __glintercept_log(" - glGetPathColorGenfvNV(color: %ld (%s), pname: %ld (%s), value: %ld)", color, __gl_intercept_formatenum(color), pname, __gl_intercept_formatenum(pname), value);
}

typedef void(*__ctype_glGetPathColorGenivNV)(GLenum, GLenum, GLint *);
static __ctype_glGetPathColorGenivNV __glintercept_fnptr_glGetPathColorGenivNV;
void __glintercept_glGetPathColorGenivNV(GLenum color, GLenum pname, GLint * value) {
  __glintercept_fnptr_glGetPathColorGenivNV(color, pname, value);
  __glintercept_log(" - glGetPathColorGenivNV(color: %ld (%s), pname: %ld (%s), value: %ld)", color, __gl_intercept_formatenum(color), pname, __gl_intercept_formatenum(pname), value);
}

typedef void(*__ctype_glGetPathCommandsNV)(GLuint, GLubyte *);
static __ctype_glGetPathCommandsNV __glintercept_fnptr_glGetPathCommandsNV;
void __glintercept_glGetPathCommandsNV(GLuint path, GLubyte * commands) {
  __glintercept_fnptr_glGetPathCommandsNV(path, commands);
  __glintercept_log(" - glGetPathCommandsNV(path: %ld, commands: %ld)", path, commands);
}

typedef void(*__ctype_glGetPathCoordsNV)(GLuint, GLfloat *);
static __ctype_glGetPathCoordsNV __glintercept_fnptr_glGetPathCoordsNV;
void __glintercept_glGetPathCoordsNV(GLuint path, GLfloat * coords) {
  __glintercept_fnptr_glGetPathCoordsNV(path, coords);
  __glintercept_log(" - glGetPathCoordsNV(path: %ld, coords: %ld)", path, coords);
}

typedef void(*__ctype_glGetPathDashArrayNV)(GLuint, GLfloat *);
static __ctype_glGetPathDashArrayNV __glintercept_fnptr_glGetPathDashArrayNV;
void __glintercept_glGetPathDashArrayNV(GLuint path, GLfloat * dashArray) {
  __glintercept_fnptr_glGetPathDashArrayNV(path, dashArray);
  __glintercept_log(" - glGetPathDashArrayNV(path: %ld, dashArray: %ld)", path, dashArray);
}

typedef GLfloat(*__ctype_glGetPathLengthNV)(GLuint, GLsizei, GLsizei);
static __ctype_glGetPathLengthNV __glintercept_fnptr_glGetPathLengthNV;
GLfloat __glintercept_glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments) {
  GLfloat __ret = __glintercept_fnptr_glGetPathLengthNV(path, startSegment, numSegments);
  __glintercept_log(" - glGetPathLengthNV(path: %ld, startSegment: %ld, numSegments: %ld) -> %ld", path, startSegment, numSegments, __ret);
  return __ret;
}

typedef void(*__ctype_glGetPathMetricRangeNV)(GLbitfield, GLuint, GLsizei, GLsizei, GLfloat *);
static __ctype_glGetPathMetricRangeNV __glintercept_fnptr_glGetPathMetricRangeNV;
void __glintercept_glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat * metrics) {
  __glintercept_fnptr_glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics);
  __glintercept_log(" - glGetPathMetricRangeNV(metricQueryMask: %ld, firstPathName: %ld, numPaths: %ld, stride: %ld, metrics: %ld)", metricQueryMask, firstPathName, numPaths, stride, metrics);
}

typedef void(*__ctype_glGetPathMetricsNV)(GLbitfield, GLsizei, GLenum, const void *, GLuint, GLsizei, GLfloat *);
static __ctype_glGetPathMetricsNV __glintercept_fnptr_glGetPathMetricsNV;
void __glintercept_glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLsizei stride, GLfloat * metrics) {
  __glintercept_fnptr_glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
  __glintercept_log(" - glGetPathMetricsNV(metricQueryMask: %ld, numPaths: %ld, pathNameType: %ld (%s), paths: %ld, pathBase: %ld, stride: %ld, metrics: %ld)", metricQueryMask, numPaths, pathNameType, __gl_intercept_formatenum(pathNameType), paths, pathBase, stride, metrics);
}

typedef void(*__ctype_glGetPathParameterfvNV)(GLuint, GLenum, GLfloat *);
static __ctype_glGetPathParameterfvNV __glintercept_fnptr_glGetPathParameterfvNV;
void __glintercept_glGetPathParameterfvNV(GLuint path, GLenum pname, GLfloat * value) {
  __glintercept_fnptr_glGetPathParameterfvNV(path, pname, value);
  __glintercept_log(" - glGetPathParameterfvNV(path: %ld, pname: %ld (%s), value: %ld)", path, pname, __gl_intercept_formatenum(pname), value);
}

typedef void(*__ctype_glGetPathParameterivNV)(GLuint, GLenum, GLint *);
static __ctype_glGetPathParameterivNV __glintercept_fnptr_glGetPathParameterivNV;
void __glintercept_glGetPathParameterivNV(GLuint path, GLenum pname, GLint * value) {
  __glintercept_fnptr_glGetPathParameterivNV(path, pname, value);
  __glintercept_log(" - glGetPathParameterivNV(path: %ld, pname: %ld (%s), value: %ld)", path, pname, __gl_intercept_formatenum(pname), value);
}

typedef void(*__ctype_glGetPathSpacingNV)(GLenum, GLsizei, GLenum, const void *, GLuint, GLfloat, GLfloat, GLenum, GLfloat *);
static __ctype_glGetPathSpacingNV __glintercept_fnptr_glGetPathSpacingNV;
void __glintercept_glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat * returnedSpacing) {
  __glintercept_fnptr_glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
  __glintercept_log(" - glGetPathSpacingNV(pathListMode: %ld (%s), numPaths: %ld, pathNameType: %ld (%s), paths: %ld, pathBase: %ld, advanceScale: %ld, kerningScale: %ld, transformType: %ld (%s), returnedSpacing: %ld)", pathListMode, __gl_intercept_formatenum(pathListMode), numPaths, pathNameType, __gl_intercept_formatenum(pathNameType), paths, pathBase, advanceScale, kerningScale, transformType, __gl_intercept_formatenum(transformType), returnedSpacing);
}

typedef void(*__ctype_glGetPathTexGenfvNV)(GLenum, GLenum, GLfloat *);
static __ctype_glGetPathTexGenfvNV __glintercept_fnptr_glGetPathTexGenfvNV;
void __glintercept_glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat * value) {
  __glintercept_fnptr_glGetPathTexGenfvNV(texCoordSet, pname, value);
  __glintercept_log(" - glGetPathTexGenfvNV(texCoordSet: %ld (%s), pname: %ld (%s), value: %ld)", texCoordSet, __gl_intercept_formatenum(texCoordSet), pname, __gl_intercept_formatenum(pname), value);
}

typedef void(*__ctype_glGetPathTexGenivNV)(GLenum, GLenum, GLint *);
static __ctype_glGetPathTexGenivNV __glintercept_fnptr_glGetPathTexGenivNV;
void __glintercept_glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint * value) {
  __glintercept_fnptr_glGetPathTexGenivNV(texCoordSet, pname, value);
  __glintercept_log(" - glGetPathTexGenivNV(texCoordSet: %ld (%s), pname: %ld (%s), value: %ld)", texCoordSet, __gl_intercept_formatenum(texCoordSet), pname, __gl_intercept_formatenum(pname), value);
}

typedef void(*__ctype_glGetPerfCounterInfoINTEL)(GLuint, GLuint, GLuint, GLchar *, GLuint, GLchar *, GLuint *, GLuint *, GLuint *, GLuint *, GLuint64 *);
static __ctype_glGetPerfCounterInfoINTEL __glintercept_fnptr_glGetPerfCounterInfoINTEL;
void __glintercept_glGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar * counterName, GLuint counterDescLength, GLchar * counterDesc, GLuint * counterOffset, GLuint * counterDataSize, GLuint * counterTypeEnum, GLuint * counterDataTypeEnum, GLuint64 * rawCounterMaxValue) {
  __glintercept_fnptr_glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
  __glintercept_log(" - glGetPerfCounterInfoINTEL(queryId: %ld, counterId: %ld, counterNameLength: %ld, counterName: %ld, counterDescLength: %ld, counterDesc: %ld, counterOffset: %ld, counterDataSize: %ld, counterTypeEnum: %ld, counterDataTypeEnum: %ld, rawCounterMaxValue: %ld)", queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
}

typedef void(*__ctype_glGetPerfMonitorCounterDataAMD)(GLuint, GLenum, GLsizei, GLuint *, GLint *);
static __ctype_glGetPerfMonitorCounterDataAMD __glintercept_fnptr_glGetPerfMonitorCounterDataAMD;
void __glintercept_glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint * data, GLint * bytesWritten) {
  __glintercept_fnptr_glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten);
  __glintercept_log(" - glGetPerfMonitorCounterDataAMD(monitor: %ld, pname: %ld (%s), dataSize: %ld, data: %ld, bytesWritten: %ld)", monitor, pname, __gl_intercept_formatenum(pname), dataSize, data, bytesWritten);
}

typedef void(*__ctype_glGetPerfMonitorCounterInfoAMD)(GLuint, GLuint, GLenum, void *);
static __ctype_glGetPerfMonitorCounterInfoAMD __glintercept_fnptr_glGetPerfMonitorCounterInfoAMD;
void __glintercept_glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void * data) {
  __glintercept_fnptr_glGetPerfMonitorCounterInfoAMD(group, counter, pname, data);
  __glintercept_log(" - glGetPerfMonitorCounterInfoAMD(group: %ld, counter: %ld, pname: %ld (%s), data: %ld)", group, counter, pname, __gl_intercept_formatenum(pname), data);
}

typedef void(*__ctype_glGetPerfMonitorCounterStringAMD)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
static __ctype_glGetPerfMonitorCounterStringAMD __glintercept_fnptr_glGetPerfMonitorCounterStringAMD;
void __glintercept_glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei * length, GLchar * counterString) {
  __glintercept_fnptr_glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString);
  __glintercept_log(" - glGetPerfMonitorCounterStringAMD(group: %ld, counter: %ld, bufSize: %ld, length: %ld, counterString: %ld)", group, counter, bufSize, length, counterString);
}

typedef void(*__ctype_glGetPerfMonitorCountersAMD)(GLuint, GLint *, GLint *, GLsizei, GLuint *);
static __ctype_glGetPerfMonitorCountersAMD __glintercept_fnptr_glGetPerfMonitorCountersAMD;
void __glintercept_glGetPerfMonitorCountersAMD(GLuint group, GLint * numCounters, GLint * maxActiveCounters, GLsizei counterSize, GLuint * counters) {
  __glintercept_fnptr_glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters);
  __glintercept_log(" - glGetPerfMonitorCountersAMD(group: %ld, numCounters: %ld, maxActiveCounters: %ld, counterSize: %ld, counters: %ld)", group, numCounters, maxActiveCounters, counterSize, counters);
}

typedef void(*__ctype_glGetPerfMonitorGroupStringAMD)(GLuint, GLsizei, GLsizei *, GLchar *);
static __ctype_glGetPerfMonitorGroupStringAMD __glintercept_fnptr_glGetPerfMonitorGroupStringAMD;
void __glintercept_glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei * length, GLchar * groupString) {
  __glintercept_fnptr_glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString);
  __glintercept_log(" - glGetPerfMonitorGroupStringAMD(group: %ld, bufSize: %ld, length: %ld, groupString: %ld)", group, bufSize, length, groupString);
}

typedef void(*__ctype_glGetPerfMonitorGroupsAMD)(GLint *, GLsizei, GLuint *);
static __ctype_glGetPerfMonitorGroupsAMD __glintercept_fnptr_glGetPerfMonitorGroupsAMD;
void __glintercept_glGetPerfMonitorGroupsAMD(GLint * numGroups, GLsizei groupsSize, GLuint * groups) {
  __glintercept_fnptr_glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups);
  __glintercept_log(" - glGetPerfMonitorGroupsAMD(numGroups: %ld, groupsSize: %ld, groups: %ld)", numGroups, groupsSize, groups);
}

typedef void(*__ctype_glGetPerfQueryDataINTEL)(GLuint, GLuint, GLsizei, void *, GLuint *);
static __ctype_glGetPerfQueryDataINTEL __glintercept_fnptr_glGetPerfQueryDataINTEL;
void __glintercept_glGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, void * data, GLuint * bytesWritten) {
  __glintercept_fnptr_glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten);
  __glintercept_log(" - glGetPerfQueryDataINTEL(queryHandle: %ld, flags: %ld, dataSize: %ld, data: %ld, bytesWritten: %ld)", queryHandle, flags, dataSize, data, bytesWritten);
}

typedef void(*__ctype_glGetPerfQueryIdByNameINTEL)(GLchar *, GLuint *);
static __ctype_glGetPerfQueryIdByNameINTEL __glintercept_fnptr_glGetPerfQueryIdByNameINTEL;
void __glintercept_glGetPerfQueryIdByNameINTEL(GLchar * queryName, GLuint * queryId) {
  __glintercept_fnptr_glGetPerfQueryIdByNameINTEL(queryName, queryId);
  __glintercept_log(" - glGetPerfQueryIdByNameINTEL(queryName: %ld, queryId: %ld)", queryName, queryId);
}

typedef void(*__ctype_glGetPerfQueryInfoINTEL)(GLuint, GLuint, GLchar *, GLuint *, GLuint *, GLuint *, GLuint *);
static __ctype_glGetPerfQueryInfoINTEL __glintercept_fnptr_glGetPerfQueryInfoINTEL;
void __glintercept_glGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar * queryName, GLuint * dataSize, GLuint * noCounters, GLuint * noInstances, GLuint * capsMask) {
  __glintercept_fnptr_glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
  __glintercept_log(" - glGetPerfQueryInfoINTEL(queryId: %ld, queryNameLength: %ld, queryName: %ld, dataSize: %ld, noCounters: %ld, noInstances: %ld, capsMask: %ld)", queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
}

typedef void(*__ctype_glGetPixelMapfv)(GLenum, GLfloat *);
static __ctype_glGetPixelMapfv __glintercept_fnptr_glGetPixelMapfv;
void __glintercept_glGetPixelMapfv(GLenum map, GLfloat * values) {
  __glintercept_fnptr_glGetPixelMapfv(map, values);
  __glintercept_log(" - glGetPixelMapfv(map: %ld (%s), values: %ld)", map, __gl_intercept_formatenum(map), values);
}

typedef void(*__ctype_glGetPixelMapuiv)(GLenum, GLuint *);
static __ctype_glGetPixelMapuiv __glintercept_fnptr_glGetPixelMapuiv;
void __glintercept_glGetPixelMapuiv(GLenum map, GLuint * values) {
  __glintercept_fnptr_glGetPixelMapuiv(map, values);
  __glintercept_log(" - glGetPixelMapuiv(map: %ld (%s), values: %ld)", map, __gl_intercept_formatenum(map), values);
}

typedef void(*__ctype_glGetPixelMapusv)(GLenum, GLushort *);
static __ctype_glGetPixelMapusv __glintercept_fnptr_glGetPixelMapusv;
void __glintercept_glGetPixelMapusv(GLenum map, GLushort * values) {
  __glintercept_fnptr_glGetPixelMapusv(map, values);
  __glintercept_log(" - glGetPixelMapusv(map: %ld (%s), values: %ld)", map, __gl_intercept_formatenum(map), values);
}

typedef void(*__ctype_glGetPixelMapxv)(GLenum, GLint, GLfixed *);
static __ctype_glGetPixelMapxv __glintercept_fnptr_glGetPixelMapxv;
void __glintercept_glGetPixelMapxv(GLenum map, GLint size, GLfixed * values) {
  __glintercept_fnptr_glGetPixelMapxv(map, size, values);
  __glintercept_log(" - glGetPixelMapxv(map: %ld (%s), size: %ld, values: %ld)", map, __gl_intercept_formatenum(map), size, values);
}

typedef void(*__ctype_glGetPixelTexGenParameterfvSGIS)(GLenum, GLfloat *);
static __ctype_glGetPixelTexGenParameterfvSGIS __glintercept_fnptr_glGetPixelTexGenParameterfvSGIS;
void __glintercept_glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetPixelTexGenParameterfvSGIS(pname, params);
  __glintercept_log(" - glGetPixelTexGenParameterfvSGIS(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetPixelTexGenParameterivSGIS)(GLenum, GLint *);
static __ctype_glGetPixelTexGenParameterivSGIS __glintercept_fnptr_glGetPixelTexGenParameterivSGIS;
void __glintercept_glGetPixelTexGenParameterivSGIS(GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetPixelTexGenParameterivSGIS(pname, params);
  __glintercept_log(" - glGetPixelTexGenParameterivSGIS(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetPixelTransformParameterfvEXT)(GLenum, GLenum, GLfloat *);
static __ctype_glGetPixelTransformParameterfvEXT __glintercept_fnptr_glGetPixelTransformParameterfvEXT;
void __glintercept_glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetPixelTransformParameterfvEXT(target, pname, params);
  __glintercept_log(" - glGetPixelTransformParameterfvEXT(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetPixelTransformParameterivEXT)(GLenum, GLenum, GLint *);
static __ctype_glGetPixelTransformParameterivEXT __glintercept_fnptr_glGetPixelTransformParameterivEXT;
void __glintercept_glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetPixelTransformParameterivEXT(target, pname, params);
  __glintercept_log(" - glGetPixelTransformParameterivEXT(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetPointerIndexedvEXT)(GLenum, GLuint, void **);
static __ctype_glGetPointerIndexedvEXT __glintercept_fnptr_glGetPointerIndexedvEXT;
void __glintercept_glGetPointerIndexedvEXT(GLenum target, GLuint index, void ** data) {
  __glintercept_fnptr_glGetPointerIndexedvEXT(target, index, data);
  __glintercept_log(" - glGetPointerIndexedvEXT(target: %ld (%s), index: %ld, data: %ld)", target, __gl_intercept_formatenum(target), index, data);
}

typedef void(*__ctype_glGetPointeri_vEXT)(GLenum, GLuint, void **);
static __ctype_glGetPointeri_vEXT __glintercept_fnptr_glGetPointeri_vEXT;
void __glintercept_glGetPointeri_vEXT(GLenum pname, GLuint index, void ** params) {
  __glintercept_fnptr_glGetPointeri_vEXT(pname, index, params);
  __glintercept_log(" - glGetPointeri_vEXT(pname: %ld (%s), index: %ld, params: %ld)", pname, __gl_intercept_formatenum(pname), index, params);
}

typedef void(*__ctype_glGetPointerv)(GLenum, void **);
static __ctype_glGetPointerv __glintercept_fnptr_glGetPointerv;
void __glintercept_glGetPointerv(GLenum pname, void ** params) {
  __glintercept_fnptr_glGetPointerv(pname, params);
  __glintercept_log(" - glGetPointerv(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetPointervEXT)(GLenum, void **);
static __ctype_glGetPointervEXT __glintercept_fnptr_glGetPointervEXT;
void __glintercept_glGetPointervEXT(GLenum pname, void ** params) {
  __glintercept_fnptr_glGetPointervEXT(pname, params);
  __glintercept_log(" - glGetPointervEXT(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetPointervKHR)(GLenum, void **);
static __ctype_glGetPointervKHR __glintercept_fnptr_glGetPointervKHR;
void __glintercept_glGetPointervKHR(GLenum pname, void ** params) {
  __glintercept_fnptr_glGetPointervKHR(pname, params);
  __glintercept_log(" - glGetPointervKHR(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetPolygonStipple)(GLubyte *);
static __ctype_glGetPolygonStipple __glintercept_fnptr_glGetPolygonStipple;
void __glintercept_glGetPolygonStipple(GLubyte * mask) {
  __glintercept_fnptr_glGetPolygonStipple(mask);
  __glintercept_log(" - glGetPolygonStipple(mask: %ld)", mask);
}

typedef void(*__ctype_glGetProgramBinary)(GLuint, GLsizei, GLsizei *, GLenum *, void *);
static __ctype_glGetProgramBinary __glintercept_fnptr_glGetProgramBinary;
void __glintercept_glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary) {
  __glintercept_fnptr_glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
  __glintercept_log(" - glGetProgramBinary(program: %ld, bufSize: %ld, length: %ld, binaryFormat: %ld, binary: %ld)", program, bufSize, length, binaryFormat, binary);
}

typedef void(*__ctype_glGetProgramBinaryOES)(GLuint, GLsizei, GLsizei *, GLenum *, void *);
static __ctype_glGetProgramBinaryOES __glintercept_fnptr_glGetProgramBinaryOES;
void __glintercept_glGetProgramBinaryOES(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary) {
  __glintercept_fnptr_glGetProgramBinaryOES(program, bufSize, length, binaryFormat, binary);
  __glintercept_log(" - glGetProgramBinaryOES(program: %ld, bufSize: %ld, length: %ld, binaryFormat: %ld, binary: %ld)", program, bufSize, length, binaryFormat, binary);
}

typedef void(*__ctype_glGetProgramEnvParameterIivNV)(GLenum, GLuint, GLint *);
static __ctype_glGetProgramEnvParameterIivNV __glintercept_fnptr_glGetProgramEnvParameterIivNV;
void __glintercept_glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint * params) {
  __glintercept_fnptr_glGetProgramEnvParameterIivNV(target, index, params);
  __glintercept_log(" - glGetProgramEnvParameterIivNV(target: %ld (%s), index: %ld, params: %ld)", target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glGetProgramEnvParameterIuivNV)(GLenum, GLuint, GLuint *);
static __ctype_glGetProgramEnvParameterIuivNV __glintercept_fnptr_glGetProgramEnvParameterIuivNV;
void __glintercept_glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint * params) {
  __glintercept_fnptr_glGetProgramEnvParameterIuivNV(target, index, params);
  __glintercept_log(" - glGetProgramEnvParameterIuivNV(target: %ld (%s), index: %ld, params: %ld)", target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glGetProgramEnvParameterdvARB)(GLenum, GLuint, GLdouble *);
static __ctype_glGetProgramEnvParameterdvARB __glintercept_fnptr_glGetProgramEnvParameterdvARB;
void __glintercept_glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble * params) {
  __glintercept_fnptr_glGetProgramEnvParameterdvARB(target, index, params);
  __glintercept_log(" - glGetProgramEnvParameterdvARB(target: %ld (%s), index: %ld, params: %ld)", target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glGetProgramEnvParameterfvARB)(GLenum, GLuint, GLfloat *);
static __ctype_glGetProgramEnvParameterfvARB __glintercept_fnptr_glGetProgramEnvParameterfvARB;
void __glintercept_glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat * params) {
  __glintercept_fnptr_glGetProgramEnvParameterfvARB(target, index, params);
  __glintercept_log(" - glGetProgramEnvParameterfvARB(target: %ld (%s), index: %ld, params: %ld)", target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glGetProgramInfoLog)(GLuint, GLsizei, GLsizei *, GLchar *);
static __ctype_glGetProgramInfoLog __glintercept_fnptr_glGetProgramInfoLog;
void __glintercept_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog) {
  __glintercept_fnptr_glGetProgramInfoLog(program, bufSize, length, infoLog);
  __glintercept_log(" - glGetProgramInfoLog(program: %ld, bufSize: %ld, length: %ld, infoLog: %ld)", program, bufSize, length, infoLog);
}

typedef void(*__ctype_glGetProgramInterfaceiv)(GLuint, GLenum, GLenum, GLint *);
static __ctype_glGetProgramInterfaceiv __glintercept_fnptr_glGetProgramInterfaceiv;
void __glintercept_glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetProgramInterfaceiv(program, programInterface, pname, params);
  __glintercept_log(" - glGetProgramInterfaceiv(program: %ld, programInterface: %ld (%s), pname: %ld (%s), params: %ld)", program, programInterface, __gl_intercept_formatenum(programInterface), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetProgramLocalParameterIivNV)(GLenum, GLuint, GLint *);
static __ctype_glGetProgramLocalParameterIivNV __glintercept_fnptr_glGetProgramLocalParameterIivNV;
void __glintercept_glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint * params) {
  __glintercept_fnptr_glGetProgramLocalParameterIivNV(target, index, params);
  __glintercept_log(" - glGetProgramLocalParameterIivNV(target: %ld (%s), index: %ld, params: %ld)", target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glGetProgramLocalParameterIuivNV)(GLenum, GLuint, GLuint *);
static __ctype_glGetProgramLocalParameterIuivNV __glintercept_fnptr_glGetProgramLocalParameterIuivNV;
void __glintercept_glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint * params) {
  __glintercept_fnptr_glGetProgramLocalParameterIuivNV(target, index, params);
  __glintercept_log(" - glGetProgramLocalParameterIuivNV(target: %ld (%s), index: %ld, params: %ld)", target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glGetProgramLocalParameterdvARB)(GLenum, GLuint, GLdouble *);
static __ctype_glGetProgramLocalParameterdvARB __glintercept_fnptr_glGetProgramLocalParameterdvARB;
void __glintercept_glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble * params) {
  __glintercept_fnptr_glGetProgramLocalParameterdvARB(target, index, params);
  __glintercept_log(" - glGetProgramLocalParameterdvARB(target: %ld (%s), index: %ld, params: %ld)", target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glGetProgramLocalParameterfvARB)(GLenum, GLuint, GLfloat *);
static __ctype_glGetProgramLocalParameterfvARB __glintercept_fnptr_glGetProgramLocalParameterfvARB;
void __glintercept_glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat * params) {
  __glintercept_fnptr_glGetProgramLocalParameterfvARB(target, index, params);
  __glintercept_log(" - glGetProgramLocalParameterfvARB(target: %ld (%s), index: %ld, params: %ld)", target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glGetProgramNamedParameterdvNV)(GLuint, GLsizei, const GLubyte *, GLdouble *);
static __ctype_glGetProgramNamedParameterdvNV __glintercept_fnptr_glGetProgramNamedParameterdvNV;
void __glintercept_glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble * params) {
  __glintercept_fnptr_glGetProgramNamedParameterdvNV(id, len, name, params);
  __glintercept_log(" - glGetProgramNamedParameterdvNV(id: %ld, len: %ld, name: %s, params: %ld)", id, len, name, params);
}

typedef void(*__ctype_glGetProgramNamedParameterfvNV)(GLuint, GLsizei, const GLubyte *, GLfloat *);
static __ctype_glGetProgramNamedParameterfvNV __glintercept_fnptr_glGetProgramNamedParameterfvNV;
void __glintercept_glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat * params) {
  __glintercept_fnptr_glGetProgramNamedParameterfvNV(id, len, name, params);
  __glintercept_log(" - glGetProgramNamedParameterfvNV(id: %ld, len: %ld, name: %s, params: %ld)", id, len, name, params);
}

typedef void(*__ctype_glGetProgramParameterdvNV)(GLenum, GLuint, GLenum, GLdouble *);
static __ctype_glGetProgramParameterdvNV __glintercept_fnptr_glGetProgramParameterdvNV;
void __glintercept_glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble * params) {
  __glintercept_fnptr_glGetProgramParameterdvNV(target, index, pname, params);
  __glintercept_log(" - glGetProgramParameterdvNV(target: %ld (%s), index: %ld, pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetProgramParameterfvNV)(GLenum, GLuint, GLenum, GLfloat *);
static __ctype_glGetProgramParameterfvNV __glintercept_fnptr_glGetProgramParameterfvNV;
void __glintercept_glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetProgramParameterfvNV(target, index, pname, params);
  __glintercept_log(" - glGetProgramParameterfvNV(target: %ld (%s), index: %ld, pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetProgramPipelineInfoLog)(GLuint, GLsizei, GLsizei *, GLchar *);
static __ctype_glGetProgramPipelineInfoLog __glintercept_fnptr_glGetProgramPipelineInfoLog;
void __glintercept_glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog) {
  __glintercept_fnptr_glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
  __glintercept_log(" - glGetProgramPipelineInfoLog(pipeline: %ld, bufSize: %ld, length: %ld, infoLog: %ld)", pipeline, bufSize, length, infoLog);
}

typedef void(*__ctype_glGetProgramPipelineInfoLogEXT)(GLuint, GLsizei, GLsizei *, GLchar *);
static __ctype_glGetProgramPipelineInfoLogEXT __glintercept_fnptr_glGetProgramPipelineInfoLogEXT;
void __glintercept_glGetProgramPipelineInfoLogEXT(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog) {
  __glintercept_fnptr_glGetProgramPipelineInfoLogEXT(pipeline, bufSize, length, infoLog);
  __glintercept_log(" - glGetProgramPipelineInfoLogEXT(pipeline: %ld, bufSize: %ld, length: %ld, infoLog: %ld)", pipeline, bufSize, length, infoLog);
}

typedef void(*__ctype_glGetProgramPipelineiv)(GLuint, GLenum, GLint *);
static __ctype_glGetProgramPipelineiv __glintercept_fnptr_glGetProgramPipelineiv;
void __glintercept_glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetProgramPipelineiv(pipeline, pname, params);
  __glintercept_log(" - glGetProgramPipelineiv(pipeline: %ld, pname: %ld (%s), params: %ld)", pipeline, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetProgramPipelineivEXT)(GLuint, GLenum, GLint *);
static __ctype_glGetProgramPipelineivEXT __glintercept_fnptr_glGetProgramPipelineivEXT;
void __glintercept_glGetProgramPipelineivEXT(GLuint pipeline, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetProgramPipelineivEXT(pipeline, pname, params);
  __glintercept_log(" - glGetProgramPipelineivEXT(pipeline: %ld, pname: %ld (%s), params: %ld)", pipeline, pname, __gl_intercept_formatenum(pname), params);
}

typedef GLuint(*__ctype_glGetProgramResourceIndex)(GLuint, GLenum, const GLchar *);
static __ctype_glGetProgramResourceIndex __glintercept_fnptr_glGetProgramResourceIndex;
GLuint __glintercept_glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar * name) {
  GLuint __ret = __glintercept_fnptr_glGetProgramResourceIndex(program, programInterface, name);
  __glintercept_log(" - glGetProgramResourceIndex(program: %ld, programInterface: %ld (%s), name: %ld) -> %ld", program, programInterface, __gl_intercept_formatenum(programInterface), name, __ret);
  return __ret;
}

typedef GLint(*__ctype_glGetProgramResourceLocation)(GLuint, GLenum, const GLchar *);
static __ctype_glGetProgramResourceLocation __glintercept_fnptr_glGetProgramResourceLocation;
GLint __glintercept_glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar * name) {
  GLint __ret = __glintercept_fnptr_glGetProgramResourceLocation(program, programInterface, name);
  __glintercept_log(" - glGetProgramResourceLocation(program: %ld, programInterface: %ld (%s), name: %ld) -> %ld", program, programInterface, __gl_intercept_formatenum(programInterface), name, __ret);
  return __ret;
}

typedef GLint(*__ctype_glGetProgramResourceLocationIndex)(GLuint, GLenum, const GLchar *);
static __ctype_glGetProgramResourceLocationIndex __glintercept_fnptr_glGetProgramResourceLocationIndex;
GLint __glintercept_glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar * name) {
  GLint __ret = __glintercept_fnptr_glGetProgramResourceLocationIndex(program, programInterface, name);
  __glintercept_log(" - glGetProgramResourceLocationIndex(program: %ld, programInterface: %ld (%s), name: %ld) -> %ld", program, programInterface, __gl_intercept_formatenum(programInterface), name, __ret);
  return __ret;
}

typedef GLint(*__ctype_glGetProgramResourceLocationIndexEXT)(GLuint, GLenum, const GLchar *);
static __ctype_glGetProgramResourceLocationIndexEXT __glintercept_fnptr_glGetProgramResourceLocationIndexEXT;
GLint __glintercept_glGetProgramResourceLocationIndexEXT(GLuint program, GLenum programInterface, const GLchar * name) {
  GLint __ret = __glintercept_fnptr_glGetProgramResourceLocationIndexEXT(program, programInterface, name);
  __glintercept_log(" - glGetProgramResourceLocationIndexEXT(program: %ld, programInterface: %ld (%s), name: %ld) -> %ld", program, programInterface, __gl_intercept_formatenum(programInterface), name, __ret);
  return __ret;
}

typedef void(*__ctype_glGetProgramResourceName)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
static __ctype_glGetProgramResourceName __glintercept_fnptr_glGetProgramResourceName;
void __glintercept_glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name) {
  __glintercept_fnptr_glGetProgramResourceName(program, programInterface, index, bufSize, length, name);
  __glintercept_log(" - glGetProgramResourceName(program: %ld, programInterface: %ld (%s), index: %ld, bufSize: %ld, length: %ld, name: %ld)", program, programInterface, __gl_intercept_formatenum(programInterface), index, bufSize, length, name);
}

typedef void(*__ctype_glGetProgramResourcefvNV)(GLuint, GLenum, GLuint, GLsizei, const GLenum *, GLsizei, GLsizei *, GLfloat *);
static __ctype_glGetProgramResourcefvNV __glintercept_fnptr_glGetProgramResourcefvNV;
void __glintercept_glGetProgramResourcefvNV(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLfloat * params) {
  __glintercept_fnptr_glGetProgramResourcefvNV(program, programInterface, index, propCount, props, count, length, params);
  __glintercept_log(" - glGetProgramResourcefvNV(program: %ld, programInterface: %ld (%s), index: %ld, propCount: %ld, props: %ld, count: %ld, length: %ld, params: %ld)", program, programInterface, __gl_intercept_formatenum(programInterface), index, propCount, props, count, length, params);
}

typedef void(*__ctype_glGetProgramResourceiv)(GLuint, GLenum, GLuint, GLsizei, const GLenum *, GLsizei, GLsizei *, GLint *);
static __ctype_glGetProgramResourceiv __glintercept_fnptr_glGetProgramResourceiv;
void __glintercept_glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLint * params) {
  __glintercept_fnptr_glGetProgramResourceiv(program, programInterface, index, propCount, props, count, length, params);
  __glintercept_log(" - glGetProgramResourceiv(program: %ld, programInterface: %ld (%s), index: %ld, propCount: %ld, props: %ld, count: %ld, length: %ld, params: %ld)", program, programInterface, __gl_intercept_formatenum(programInterface), index, propCount, props, count, length, params);
}

typedef void(*__ctype_glGetProgramStageiv)(GLuint, GLenum, GLenum, GLint *);
static __ctype_glGetProgramStageiv __glintercept_fnptr_glGetProgramStageiv;
void __glintercept_glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint * values) {
  __glintercept_fnptr_glGetProgramStageiv(program, shadertype, pname, values);
  __glintercept_log(" - glGetProgramStageiv(program: %ld, shadertype: %ld (%s), pname: %ld (%s), values: %ld)", program, shadertype, __gl_intercept_formatenum(shadertype), pname, __gl_intercept_formatenum(pname), values);
}

typedef void(*__ctype_glGetProgramStringARB)(GLenum, GLenum, void *);
static __ctype_glGetProgramStringARB __glintercept_fnptr_glGetProgramStringARB;
void __glintercept_glGetProgramStringARB(GLenum target, GLenum pname, void * string) {
  __glintercept_fnptr_glGetProgramStringARB(target, pname, string);
  __glintercept_log(" - glGetProgramStringARB(target: %ld (%s), pname: %ld (%s), string: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), string);
}

typedef void(*__ctype_glGetProgramStringNV)(GLuint, GLenum, GLubyte *);
static __ctype_glGetProgramStringNV __glintercept_fnptr_glGetProgramStringNV;
void __glintercept_glGetProgramStringNV(GLuint id, GLenum pname, GLubyte * program) {
  __glintercept_fnptr_glGetProgramStringNV(id, pname, program);
  __glintercept_log(" - glGetProgramStringNV(id: %ld, pname: %ld (%s), program: %ld)", id, pname, __gl_intercept_formatenum(pname), program);
}

typedef void(*__ctype_glGetProgramSubroutineParameteruivNV)(GLenum, GLuint, GLuint *);
static __ctype_glGetProgramSubroutineParameteruivNV __glintercept_fnptr_glGetProgramSubroutineParameteruivNV;
void __glintercept_glGetProgramSubroutineParameteruivNV(GLenum target, GLuint index, GLuint * param) {
  __glintercept_fnptr_glGetProgramSubroutineParameteruivNV(target, index, param);
  __glintercept_log(" - glGetProgramSubroutineParameteruivNV(target: %ld (%s), index: %ld, param: %ld)", target, __gl_intercept_formatenum(target), index, param);
}

typedef void(*__ctype_glGetProgramiv)(GLuint, GLenum, GLint *);
static __ctype_glGetProgramiv __glintercept_fnptr_glGetProgramiv;
void __glintercept_glGetProgramiv(GLuint program, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetProgramiv(program, pname, params);
  __glintercept_log(" - glGetProgramiv(program: %ld, pname: %ld (%s), params: %ld)", program, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetProgramivARB)(GLenum, GLenum, GLint *);
static __ctype_glGetProgramivARB __glintercept_fnptr_glGetProgramivARB;
void __glintercept_glGetProgramivARB(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetProgramivARB(target, pname, params);
  __glintercept_log(" - glGetProgramivARB(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetProgramivNV)(GLuint, GLenum, GLint *);
static __ctype_glGetProgramivNV __glintercept_fnptr_glGetProgramivNV;
void __glintercept_glGetProgramivNV(GLuint id, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetProgramivNV(id, pname, params);
  __glintercept_log(" - glGetProgramivNV(id: %ld, pname: %ld (%s), params: %ld)", id, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetQueryBufferObjecti64v)(GLuint, GLuint, GLenum, GLintptr);
static __ctype_glGetQueryBufferObjecti64v __glintercept_fnptr_glGetQueryBufferObjecti64v;
void __glintercept_glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
  __glintercept_fnptr_glGetQueryBufferObjecti64v(id, buffer, pname, offset);
  __glintercept_log(" - glGetQueryBufferObjecti64v(id: %ld, buffer: %ld, pname: %ld (%s), offset: %ld)", id, buffer, pname, __gl_intercept_formatenum(pname), offset);
}

typedef void(*__ctype_glGetQueryBufferObjectiv)(GLuint, GLuint, GLenum, GLintptr);
static __ctype_glGetQueryBufferObjectiv __glintercept_fnptr_glGetQueryBufferObjectiv;
void __glintercept_glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
  __glintercept_fnptr_glGetQueryBufferObjectiv(id, buffer, pname, offset);
  __glintercept_log(" - glGetQueryBufferObjectiv(id: %ld, buffer: %ld, pname: %ld (%s), offset: %ld)", id, buffer, pname, __gl_intercept_formatenum(pname), offset);
}

typedef void(*__ctype_glGetQueryBufferObjectui64v)(GLuint, GLuint, GLenum, GLintptr);
static __ctype_glGetQueryBufferObjectui64v __glintercept_fnptr_glGetQueryBufferObjectui64v;
void __glintercept_glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
  __glintercept_fnptr_glGetQueryBufferObjectui64v(id, buffer, pname, offset);
  __glintercept_log(" - glGetQueryBufferObjectui64v(id: %ld, buffer: %ld, pname: %ld (%s), offset: %ld)", id, buffer, pname, __gl_intercept_formatenum(pname), offset);
}

typedef void(*__ctype_glGetQueryBufferObjectuiv)(GLuint, GLuint, GLenum, GLintptr);
static __ctype_glGetQueryBufferObjectuiv __glintercept_fnptr_glGetQueryBufferObjectuiv;
void __glintercept_glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
  __glintercept_fnptr_glGetQueryBufferObjectuiv(id, buffer, pname, offset);
  __glintercept_log(" - glGetQueryBufferObjectuiv(id: %ld, buffer: %ld, pname: %ld (%s), offset: %ld)", id, buffer, pname, __gl_intercept_formatenum(pname), offset);
}

typedef void(*__ctype_glGetQueryIndexediv)(GLenum, GLuint, GLenum, GLint *);
static __ctype_glGetQueryIndexediv __glintercept_fnptr_glGetQueryIndexediv;
void __glintercept_glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetQueryIndexediv(target, index, pname, params);
  __glintercept_log(" - glGetQueryIndexediv(target: %ld (%s), index: %ld, pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetQueryObjecti64v)(GLuint, GLenum, GLint64 *);
static __ctype_glGetQueryObjecti64v __glintercept_fnptr_glGetQueryObjecti64v;
void __glintercept_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 * params) {
  __glintercept_fnptr_glGetQueryObjecti64v(id, pname, params);
  __glintercept_log(" - glGetQueryObjecti64v(id: %ld, pname: %ld (%s), params: %ld)", id, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetQueryObjecti64vEXT)(GLuint, GLenum, GLint64 *);
static __ctype_glGetQueryObjecti64vEXT __glintercept_fnptr_glGetQueryObjecti64vEXT;
void __glintercept_glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64 * params) {
  __glintercept_fnptr_glGetQueryObjecti64vEXT(id, pname, params);
  __glintercept_log(" - glGetQueryObjecti64vEXT(id: %ld, pname: %ld (%s), params: %ld)", id, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetQueryObjectiv)(GLuint, GLenum, GLint *);
static __ctype_glGetQueryObjectiv __glintercept_fnptr_glGetQueryObjectiv;
void __glintercept_glGetQueryObjectiv(GLuint id, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetQueryObjectiv(id, pname, params);
  __glintercept_log(" - glGetQueryObjectiv(id: %ld, pname: %ld (%s), params: %ld)", id, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetQueryObjectivARB)(GLuint, GLenum, GLint *);
static __ctype_glGetQueryObjectivARB __glintercept_fnptr_glGetQueryObjectivARB;
void __glintercept_glGetQueryObjectivARB(GLuint id, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetQueryObjectivARB(id, pname, params);
  __glintercept_log(" - glGetQueryObjectivARB(id: %ld, pname: %ld (%s), params: %ld)", id, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetQueryObjectivEXT)(GLuint, GLenum, GLint *);
static __ctype_glGetQueryObjectivEXT __glintercept_fnptr_glGetQueryObjectivEXT;
void __glintercept_glGetQueryObjectivEXT(GLuint id, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetQueryObjectivEXT(id, pname, params);
  __glintercept_log(" - glGetQueryObjectivEXT(id: %ld, pname: %ld (%s), params: %ld)", id, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetQueryObjectui64v)(GLuint, GLenum, GLuint64 *);
static __ctype_glGetQueryObjectui64v __glintercept_fnptr_glGetQueryObjectui64v;
void __glintercept_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 * params) {
  __glintercept_fnptr_glGetQueryObjectui64v(id, pname, params);
  __glintercept_log(" - glGetQueryObjectui64v(id: %ld, pname: %ld (%s), params: %ld)", id, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetQueryObjectui64vEXT)(GLuint, GLenum, GLuint64 *);
static __ctype_glGetQueryObjectui64vEXT __glintercept_fnptr_glGetQueryObjectui64vEXT;
void __glintercept_glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64 * params) {
  __glintercept_fnptr_glGetQueryObjectui64vEXT(id, pname, params);
  __glintercept_log(" - glGetQueryObjectui64vEXT(id: %ld, pname: %ld (%s), params: %ld)", id, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetQueryObjectuiv)(GLuint, GLenum, GLuint *);
static __ctype_glGetQueryObjectuiv __glintercept_fnptr_glGetQueryObjectuiv;
void __glintercept_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint * params) {
  __glintercept_fnptr_glGetQueryObjectuiv(id, pname, params);
  __glintercept_log(" - glGetQueryObjectuiv(id: %ld, pname: %ld (%s), params: %ld)", id, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetQueryObjectuivARB)(GLuint, GLenum, GLuint *);
static __ctype_glGetQueryObjectuivARB __glintercept_fnptr_glGetQueryObjectuivARB;
void __glintercept_glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint * params) {
  __glintercept_fnptr_glGetQueryObjectuivARB(id, pname, params);
  __glintercept_log(" - glGetQueryObjectuivARB(id: %ld, pname: %ld (%s), params: %ld)", id, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetQueryObjectuivEXT)(GLuint, GLenum, GLuint *);
static __ctype_glGetQueryObjectuivEXT __glintercept_fnptr_glGetQueryObjectuivEXT;
void __glintercept_glGetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint * params) {
  __glintercept_fnptr_glGetQueryObjectuivEXT(id, pname, params);
  __glintercept_log(" - glGetQueryObjectuivEXT(id: %ld, pname: %ld (%s), params: %ld)", id, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetQueryiv)(GLenum, GLenum, GLint *);
static __ctype_glGetQueryiv __glintercept_fnptr_glGetQueryiv;
void __glintercept_glGetQueryiv(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetQueryiv(target, pname, params);
  __glintercept_log(" - glGetQueryiv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetQueryivARB)(GLenum, GLenum, GLint *);
static __ctype_glGetQueryivARB __glintercept_fnptr_glGetQueryivARB;
void __glintercept_glGetQueryivARB(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetQueryivARB(target, pname, params);
  __glintercept_log(" - glGetQueryivARB(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetQueryivEXT)(GLenum, GLenum, GLint *);
static __ctype_glGetQueryivEXT __glintercept_fnptr_glGetQueryivEXT;
void __glintercept_glGetQueryivEXT(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetQueryivEXT(target, pname, params);
  __glintercept_log(" - glGetQueryivEXT(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetRenderbufferParameteriv)(GLenum, GLenum, GLint *);
static __ctype_glGetRenderbufferParameteriv __glintercept_fnptr_glGetRenderbufferParameteriv;
void __glintercept_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetRenderbufferParameteriv(target, pname, params);
  __glintercept_log(" - glGetRenderbufferParameteriv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetRenderbufferParameterivEXT)(GLenum, GLenum, GLint *);
static __ctype_glGetRenderbufferParameterivEXT __glintercept_fnptr_glGetRenderbufferParameterivEXT;
void __glintercept_glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetRenderbufferParameterivEXT(target, pname, params);
  __glintercept_log(" - glGetRenderbufferParameterivEXT(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetRenderbufferParameterivOES)(GLenum, GLenum, GLint *);
static __ctype_glGetRenderbufferParameterivOES __glintercept_fnptr_glGetRenderbufferParameterivOES;
void __glintercept_glGetRenderbufferParameterivOES(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetRenderbufferParameterivOES(target, pname, params);
  __glintercept_log(" - glGetRenderbufferParameterivOES(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetSamplerParameterIiv)(GLuint, GLenum, GLint *);
static __ctype_glGetSamplerParameterIiv __glintercept_fnptr_glGetSamplerParameterIiv;
void __glintercept_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetSamplerParameterIiv(sampler, pname, params);
  __glintercept_log(" - glGetSamplerParameterIiv(sampler: %ld, pname: %ld (%s), params: %ld)", sampler, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetSamplerParameterIivEXT)(GLuint, GLenum, GLint *);
static __ctype_glGetSamplerParameterIivEXT __glintercept_fnptr_glGetSamplerParameterIivEXT;
void __glintercept_glGetSamplerParameterIivEXT(GLuint sampler, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetSamplerParameterIivEXT(sampler, pname, params);
  __glintercept_log(" - glGetSamplerParameterIivEXT(sampler: %ld, pname: %ld (%s), params: %ld)", sampler, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetSamplerParameterIivOES)(GLuint, GLenum, GLint *);
static __ctype_glGetSamplerParameterIivOES __glintercept_fnptr_glGetSamplerParameterIivOES;
void __glintercept_glGetSamplerParameterIivOES(GLuint sampler, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetSamplerParameterIivOES(sampler, pname, params);
  __glintercept_log(" - glGetSamplerParameterIivOES(sampler: %ld, pname: %ld (%s), params: %ld)", sampler, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetSamplerParameterIuiv)(GLuint, GLenum, GLuint *);
static __ctype_glGetSamplerParameterIuiv __glintercept_fnptr_glGetSamplerParameterIuiv;
void __glintercept_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint * params) {
  __glintercept_fnptr_glGetSamplerParameterIuiv(sampler, pname, params);
  __glintercept_log(" - glGetSamplerParameterIuiv(sampler: %ld, pname: %ld (%s), params: %ld)", sampler, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetSamplerParameterIuivEXT)(GLuint, GLenum, GLuint *);
static __ctype_glGetSamplerParameterIuivEXT __glintercept_fnptr_glGetSamplerParameterIuivEXT;
void __glintercept_glGetSamplerParameterIuivEXT(GLuint sampler, GLenum pname, GLuint * params) {
  __glintercept_fnptr_glGetSamplerParameterIuivEXT(sampler, pname, params);
  __glintercept_log(" - glGetSamplerParameterIuivEXT(sampler: %ld, pname: %ld (%s), params: %ld)", sampler, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetSamplerParameterIuivOES)(GLuint, GLenum, GLuint *);
static __ctype_glGetSamplerParameterIuivOES __glintercept_fnptr_glGetSamplerParameterIuivOES;
void __glintercept_glGetSamplerParameterIuivOES(GLuint sampler, GLenum pname, GLuint * params) {
  __glintercept_fnptr_glGetSamplerParameterIuivOES(sampler, pname, params);
  __glintercept_log(" - glGetSamplerParameterIuivOES(sampler: %ld, pname: %ld (%s), params: %ld)", sampler, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetSamplerParameterfv)(GLuint, GLenum, GLfloat *);
static __ctype_glGetSamplerParameterfv __glintercept_fnptr_glGetSamplerParameterfv;
void __glintercept_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetSamplerParameterfv(sampler, pname, params);
  __glintercept_log(" - glGetSamplerParameterfv(sampler: %ld, pname: %ld (%s), params: %ld)", sampler, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetSamplerParameteriv)(GLuint, GLenum, GLint *);
static __ctype_glGetSamplerParameteriv __glintercept_fnptr_glGetSamplerParameteriv;
void __glintercept_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetSamplerParameteriv(sampler, pname, params);
  __glintercept_log(" - glGetSamplerParameteriv(sampler: %ld, pname: %ld (%s), params: %ld)", sampler, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetSemaphoreParameterivNV)(GLuint, GLenum, GLint *);
static __ctype_glGetSemaphoreParameterivNV __glintercept_fnptr_glGetSemaphoreParameterivNV;
void __glintercept_glGetSemaphoreParameterivNV(GLuint semaphore, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetSemaphoreParameterivNV(semaphore, pname, params);
  __glintercept_log(" - glGetSemaphoreParameterivNV(semaphore: %ld, pname: %ld (%s), params: %ld)", semaphore, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetSemaphoreParameterui64vEXT)(GLuint, GLenum, GLuint64 *);
static __ctype_glGetSemaphoreParameterui64vEXT __glintercept_fnptr_glGetSemaphoreParameterui64vEXT;
void __glintercept_glGetSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, GLuint64 * params) {
  __glintercept_fnptr_glGetSemaphoreParameterui64vEXT(semaphore, pname, params);
  __glintercept_log(" - glGetSemaphoreParameterui64vEXT(semaphore: %ld, pname: %ld (%s), params: %ld)", semaphore, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetSeparableFilter)(GLenum, GLenum, GLenum, void *, void *, void *);
static __ctype_glGetSeparableFilter __glintercept_fnptr_glGetSeparableFilter;
void __glintercept_glGetSeparableFilter(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span) {
  __glintercept_fnptr_glGetSeparableFilter(target, format, type, row, column, span);
  __glintercept_log(" - glGetSeparableFilter(target: %ld (%s), format: %ld (%s), type: %ld (%s), row: %ld, column: %ld, span: %ld)", target, __gl_intercept_formatenum(target), format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), row, column, span);
}

typedef void(*__ctype_glGetSeparableFilterEXT)(GLenum, GLenum, GLenum, void *, void *, void *);
static __ctype_glGetSeparableFilterEXT __glintercept_fnptr_glGetSeparableFilterEXT;
void __glintercept_glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span) {
  __glintercept_fnptr_glGetSeparableFilterEXT(target, format, type, row, column, span);
  __glintercept_log(" - glGetSeparableFilterEXT(target: %ld (%s), format: %ld (%s), type: %ld (%s), row: %ld, column: %ld, span: %ld)", target, __gl_intercept_formatenum(target), format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), row, column, span);
}

typedef void(*__ctype_glGetShaderInfoLog)(GLuint, GLsizei, GLsizei *, GLchar *);
static __ctype_glGetShaderInfoLog __glintercept_fnptr_glGetShaderInfoLog;
void __glintercept_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog) {
  __glintercept_fnptr_glGetShaderInfoLog(shader, bufSize, length, infoLog);
  __glintercept_log(" - glGetShaderInfoLog(shader: %ld, bufSize: %ld, length: %ld, infoLog: %ld)", shader, bufSize, length, infoLog);
}

typedef void(*__ctype_glGetShaderPrecisionFormat)(GLenum, GLenum, GLint *, GLint *);
static __ctype_glGetShaderPrecisionFormat __glintercept_fnptr_glGetShaderPrecisionFormat;
void __glintercept_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision) {
  __glintercept_fnptr_glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
  __glintercept_log(" - glGetShaderPrecisionFormat(shadertype: %ld (%s), precisiontype: %ld (%s), range: %ld, precision: %ld)", shadertype, __gl_intercept_formatenum(shadertype), precisiontype, __gl_intercept_formatenum(precisiontype), range, precision);
}

typedef void(*__ctype_glGetShaderSource)(GLuint, GLsizei, GLsizei *, GLchar *);
static __ctype_glGetShaderSource __glintercept_fnptr_glGetShaderSource;
void __glintercept_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source) {
  __glintercept_fnptr_glGetShaderSource(shader, bufSize, length, source);
  __glintercept_log(" - glGetShaderSource(shader: %ld, bufSize: %ld, length: %ld, source: %ld)", shader, bufSize, length, source);
}

typedef void(*__ctype_glGetShaderSourceARB)(GLhandleARB, GLsizei, GLsizei *, GLcharARB *);
static __ctype_glGetShaderSourceARB __glintercept_fnptr_glGetShaderSourceARB;
void __glintercept_glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * source) {
  __glintercept_fnptr_glGetShaderSourceARB(obj, maxLength, length, source);
  __glintercept_log(" - glGetShaderSourceARB(obj: %ld, maxLength: %ld, length: %ld, source: %ld)", obj, maxLength, length, source);
}

typedef void(*__ctype_glGetShaderiv)(GLuint, GLenum, GLint *);
static __ctype_glGetShaderiv __glintercept_fnptr_glGetShaderiv;
void __glintercept_glGetShaderiv(GLuint shader, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetShaderiv(shader, pname, params);
  __glintercept_log(" - glGetShaderiv(shader: %ld, pname: %ld (%s), params: %ld)", shader, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetShadingRateImagePaletteNV)(GLuint, GLuint, GLenum *);
static __ctype_glGetShadingRateImagePaletteNV __glintercept_fnptr_glGetShadingRateImagePaletteNV;
void __glintercept_glGetShadingRateImagePaletteNV(GLuint viewport, GLuint entry, GLenum * rate) {
  __glintercept_fnptr_glGetShadingRateImagePaletteNV(viewport, entry, rate);
  __glintercept_log(" - glGetShadingRateImagePaletteNV(viewport: %ld, entry: %ld, rate: %ld)", viewport, entry, rate);
}

typedef void(*__ctype_glGetShadingRateSampleLocationivNV)(GLenum, GLuint, GLuint, GLint *);
static __ctype_glGetShadingRateSampleLocationivNV __glintercept_fnptr_glGetShadingRateSampleLocationivNV;
void __glintercept_glGetShadingRateSampleLocationivNV(GLenum rate, GLuint samples, GLuint index, GLint * location) {
  __glintercept_fnptr_glGetShadingRateSampleLocationivNV(rate, samples, index, location);
  __glintercept_log(" - glGetShadingRateSampleLocationivNV(rate: %ld (%s), samples: %ld, index: %ld, location: %ld)", rate, __gl_intercept_formatenum(rate), samples, index, location);
}

typedef void(*__ctype_glGetSharpenTexFuncSGIS)(GLenum, GLfloat *);
static __ctype_glGetSharpenTexFuncSGIS __glintercept_fnptr_glGetSharpenTexFuncSGIS;
void __glintercept_glGetSharpenTexFuncSGIS(GLenum target, GLfloat * points) {
  __glintercept_fnptr_glGetSharpenTexFuncSGIS(target, points);
  __glintercept_log(" - glGetSharpenTexFuncSGIS(target: %ld (%s), points: %ld)", target, __gl_intercept_formatenum(target), points);
}

typedef GLushort(*__ctype_glGetStageIndexNV)(GLenum);
static __ctype_glGetStageIndexNV __glintercept_fnptr_glGetStageIndexNV;
GLushort __glintercept_glGetStageIndexNV(GLenum shadertype) {
  GLushort __ret = __glintercept_fnptr_glGetStageIndexNV(shadertype);
  __glintercept_log(" - glGetStageIndexNV(shadertype: %ld (%s)) -> %ld", shadertype, __gl_intercept_formatenum(shadertype), __ret);
  return __ret;
}

typedef const GLubyte *(*__ctype_glGetString)(GLenum);
static __ctype_glGetString __glintercept_fnptr_glGetString;
const GLubyte * __glintercept_glGetString(GLenum name) {
  const GLubyte * __ret = __glintercept_fnptr_glGetString(name);
  __glintercept_log(" - glGetString(name: %ld (%s)) -> %s", name, __gl_intercept_formatenum(name), __ret);
  return __ret;
}

typedef const GLubyte *(*__ctype_glGetStringi)(GLenum, GLuint);
static __ctype_glGetStringi __glintercept_fnptr_glGetStringi;
const GLubyte * __glintercept_glGetStringi(GLenum name, GLuint index) {
  const GLubyte * __ret = __glintercept_fnptr_glGetStringi(name, index);
  __glintercept_log(" - glGetStringi(name: %ld (%s), index: %ld) -> %s", name, __gl_intercept_formatenum(name), index, __ret);
  return __ret;
}

typedef GLuint(*__ctype_glGetSubroutineIndex)(GLuint, GLenum, const GLchar *);
static __ctype_glGetSubroutineIndex __glintercept_fnptr_glGetSubroutineIndex;
GLuint __glintercept_glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar * name) {
  GLuint __ret = __glintercept_fnptr_glGetSubroutineIndex(program, shadertype, name);
  __glintercept_log(" - glGetSubroutineIndex(program: %ld, shadertype: %ld (%s), name: %ld) -> %ld", program, shadertype, __gl_intercept_formatenum(shadertype), name, __ret);
  return __ret;
}

typedef GLint(*__ctype_glGetSubroutineUniformLocation)(GLuint, GLenum, const GLchar *);
static __ctype_glGetSubroutineUniformLocation __glintercept_fnptr_glGetSubroutineUniformLocation;
GLint __glintercept_glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar * name) {
  GLint __ret = __glintercept_fnptr_glGetSubroutineUniformLocation(program, shadertype, name);
  __glintercept_log(" - glGetSubroutineUniformLocation(program: %ld, shadertype: %ld (%s), name: %ld) -> %ld", program, shadertype, __gl_intercept_formatenum(shadertype), name, __ret);
  return __ret;
}

typedef void(*__ctype_glGetSynciv)(GLsync, GLenum, GLsizei, GLsizei *, GLint *);
static __ctype_glGetSynciv __glintercept_fnptr_glGetSynciv;
void __glintercept_glGetSynciv(GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values) {
  __glintercept_fnptr_glGetSynciv(sync, pname, count, length, values);
  __glintercept_log(" - glGetSynciv(sync: %ld, pname: %ld (%s), count: %ld, length: %ld, values: %ld)", sync, pname, __gl_intercept_formatenum(pname), count, length, values);
}

typedef void(*__ctype_glGetSyncivAPPLE)(GLsync, GLenum, GLsizei, GLsizei *, GLint *);
static __ctype_glGetSyncivAPPLE __glintercept_fnptr_glGetSyncivAPPLE;
void __glintercept_glGetSyncivAPPLE(GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values) {
  __glintercept_fnptr_glGetSyncivAPPLE(sync, pname, count, length, values);
  __glintercept_log(" - glGetSyncivAPPLE(sync: %ld, pname: %ld (%s), count: %ld, length: %ld, values: %ld)", sync, pname, __gl_intercept_formatenum(pname), count, length, values);
}

typedef void(*__ctype_glGetTexBumpParameterfvATI)(GLenum, GLfloat *);
static __ctype_glGetTexBumpParameterfvATI __glintercept_fnptr_glGetTexBumpParameterfvATI;
void __glintercept_glGetTexBumpParameterfvATI(GLenum pname, GLfloat * param) {
  __glintercept_fnptr_glGetTexBumpParameterfvATI(pname, param);
  __glintercept_log(" - glGetTexBumpParameterfvATI(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glGetTexBumpParameterivATI)(GLenum, GLint *);
static __ctype_glGetTexBumpParameterivATI __glintercept_fnptr_glGetTexBumpParameterivATI;
void __glintercept_glGetTexBumpParameterivATI(GLenum pname, GLint * param) {
  __glintercept_fnptr_glGetTexBumpParameterivATI(pname, param);
  __glintercept_log(" - glGetTexBumpParameterivATI(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glGetTexEnvfv)(GLenum, GLenum, GLfloat *);
static __ctype_glGetTexEnvfv __glintercept_fnptr_glGetTexEnvfv;
void __glintercept_glGetTexEnvfv(GLenum target, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetTexEnvfv(target, pname, params);
  __glintercept_log(" - glGetTexEnvfv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexEnviv)(GLenum, GLenum, GLint *);
static __ctype_glGetTexEnviv __glintercept_fnptr_glGetTexEnviv;
void __glintercept_glGetTexEnviv(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetTexEnviv(target, pname, params);
  __glintercept_log(" - glGetTexEnviv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexEnvxv)(GLenum, GLenum, GLfixed *);
static __ctype_glGetTexEnvxv __glintercept_fnptr_glGetTexEnvxv;
void __glintercept_glGetTexEnvxv(GLenum target, GLenum pname, GLfixed * params) {
  __glintercept_fnptr_glGetTexEnvxv(target, pname, params);
  __glintercept_log(" - glGetTexEnvxv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexEnvxvOES)(GLenum, GLenum, GLfixed *);
static __ctype_glGetTexEnvxvOES __glintercept_fnptr_glGetTexEnvxvOES;
void __glintercept_glGetTexEnvxvOES(GLenum target, GLenum pname, GLfixed * params) {
  __glintercept_fnptr_glGetTexEnvxvOES(target, pname, params);
  __glintercept_log(" - glGetTexEnvxvOES(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexFilterFuncSGIS)(GLenum, GLenum, GLfloat *);
static __ctype_glGetTexFilterFuncSGIS __glintercept_fnptr_glGetTexFilterFuncSGIS;
void __glintercept_glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat * weights) {
  __glintercept_fnptr_glGetTexFilterFuncSGIS(target, filter, weights);
  __glintercept_log(" - glGetTexFilterFuncSGIS(target: %ld (%s), filter: %ld (%s), weights: %ld)", target, __gl_intercept_formatenum(target), filter, __gl_intercept_formatenum(filter), weights);
}

typedef void(*__ctype_glGetTexGendv)(GLenum, GLenum, GLdouble *);
static __ctype_glGetTexGendv __glintercept_fnptr_glGetTexGendv;
void __glintercept_glGetTexGendv(GLenum coord, GLenum pname, GLdouble * params) {
  __glintercept_fnptr_glGetTexGendv(coord, pname, params);
  __glintercept_log(" - glGetTexGendv(coord: %ld (%s), pname: %ld (%s), params: %ld)", coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexGenfv)(GLenum, GLenum, GLfloat *);
static __ctype_glGetTexGenfv __glintercept_fnptr_glGetTexGenfv;
void __glintercept_glGetTexGenfv(GLenum coord, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetTexGenfv(coord, pname, params);
  __glintercept_log(" - glGetTexGenfv(coord: %ld (%s), pname: %ld (%s), params: %ld)", coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexGenfvOES)(GLenum, GLenum, GLfloat *);
static __ctype_glGetTexGenfvOES __glintercept_fnptr_glGetTexGenfvOES;
void __glintercept_glGetTexGenfvOES(GLenum coord, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetTexGenfvOES(coord, pname, params);
  __glintercept_log(" - glGetTexGenfvOES(coord: %ld (%s), pname: %ld (%s), params: %ld)", coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexGeniv)(GLenum, GLenum, GLint *);
static __ctype_glGetTexGeniv __glintercept_fnptr_glGetTexGeniv;
void __glintercept_glGetTexGeniv(GLenum coord, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetTexGeniv(coord, pname, params);
  __glintercept_log(" - glGetTexGeniv(coord: %ld (%s), pname: %ld (%s), params: %ld)", coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexGenivOES)(GLenum, GLenum, GLint *);
static __ctype_glGetTexGenivOES __glintercept_fnptr_glGetTexGenivOES;
void __glintercept_glGetTexGenivOES(GLenum coord, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetTexGenivOES(coord, pname, params);
  __glintercept_log(" - glGetTexGenivOES(coord: %ld (%s), pname: %ld (%s), params: %ld)", coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexGenxvOES)(GLenum, GLenum, GLfixed *);
static __ctype_glGetTexGenxvOES __glintercept_fnptr_glGetTexGenxvOES;
void __glintercept_glGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed * params) {
  __glintercept_fnptr_glGetTexGenxvOES(coord, pname, params);
  __glintercept_log(" - glGetTexGenxvOES(coord: %ld (%s), pname: %ld (%s), params: %ld)", coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexImage)(GLenum, GLint, GLenum, GLenum, void *);
static __ctype_glGetTexImage __glintercept_fnptr_glGetTexImage;
void __glintercept_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void * pixels) {
  __glintercept_fnptr_glGetTexImage(target, level, format, type, pixels);
  __glintercept_log(" - glGetTexImage(target: %ld (%s), level: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", target, __gl_intercept_formatenum(target), level, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glGetTexLevelParameterfv)(GLenum, GLint, GLenum, GLfloat *);
static __ctype_glGetTexLevelParameterfv __glintercept_fnptr_glGetTexLevelParameterfv;
void __glintercept_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetTexLevelParameterfv(target, level, pname, params);
  __glintercept_log(" - glGetTexLevelParameterfv(target: %ld (%s), level: %ld, pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), level, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexLevelParameteriv)(GLenum, GLint, GLenum, GLint *);
static __ctype_glGetTexLevelParameteriv __glintercept_fnptr_glGetTexLevelParameteriv;
void __glintercept_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetTexLevelParameteriv(target, level, pname, params);
  __glintercept_log(" - glGetTexLevelParameteriv(target: %ld (%s), level: %ld, pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), level, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexLevelParameterxvOES)(GLenum, GLint, GLenum, GLfixed *);
static __ctype_glGetTexLevelParameterxvOES __glintercept_fnptr_glGetTexLevelParameterxvOES;
void __glintercept_glGetTexLevelParameterxvOES(GLenum target, GLint level, GLenum pname, GLfixed * params) {
  __glintercept_fnptr_glGetTexLevelParameterxvOES(target, level, pname, params);
  __glintercept_log(" - glGetTexLevelParameterxvOES(target: %ld (%s), level: %ld, pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), level, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexParameterIiv)(GLenum, GLenum, GLint *);
static __ctype_glGetTexParameterIiv __glintercept_fnptr_glGetTexParameterIiv;
void __glintercept_glGetTexParameterIiv(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetTexParameterIiv(target, pname, params);
  __glintercept_log(" - glGetTexParameterIiv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexParameterIivEXT)(GLenum, GLenum, GLint *);
static __ctype_glGetTexParameterIivEXT __glintercept_fnptr_glGetTexParameterIivEXT;
void __glintercept_glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetTexParameterIivEXT(target, pname, params);
  __glintercept_log(" - glGetTexParameterIivEXT(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexParameterIivOES)(GLenum, GLenum, GLint *);
static __ctype_glGetTexParameterIivOES __glintercept_fnptr_glGetTexParameterIivOES;
void __glintercept_glGetTexParameterIivOES(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetTexParameterIivOES(target, pname, params);
  __glintercept_log(" - glGetTexParameterIivOES(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexParameterIuiv)(GLenum, GLenum, GLuint *);
static __ctype_glGetTexParameterIuiv __glintercept_fnptr_glGetTexParameterIuiv;
void __glintercept_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint * params) {
  __glintercept_fnptr_glGetTexParameterIuiv(target, pname, params);
  __glintercept_log(" - glGetTexParameterIuiv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexParameterIuivEXT)(GLenum, GLenum, GLuint *);
static __ctype_glGetTexParameterIuivEXT __glintercept_fnptr_glGetTexParameterIuivEXT;
void __glintercept_glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint * params) {
  __glintercept_fnptr_glGetTexParameterIuivEXT(target, pname, params);
  __glintercept_log(" - glGetTexParameterIuivEXT(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexParameterIuivOES)(GLenum, GLenum, GLuint *);
static __ctype_glGetTexParameterIuivOES __glintercept_fnptr_glGetTexParameterIuivOES;
void __glintercept_glGetTexParameterIuivOES(GLenum target, GLenum pname, GLuint * params) {
  __glintercept_fnptr_glGetTexParameterIuivOES(target, pname, params);
  __glintercept_log(" - glGetTexParameterIuivOES(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexParameterPointervAPPLE)(GLenum, GLenum, void **);
static __ctype_glGetTexParameterPointervAPPLE __glintercept_fnptr_glGetTexParameterPointervAPPLE;
void __glintercept_glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, void ** params) {
  __glintercept_fnptr_glGetTexParameterPointervAPPLE(target, pname, params);
  __glintercept_log(" - glGetTexParameterPointervAPPLE(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexParameterfv)(GLenum, GLenum, GLfloat *);
static __ctype_glGetTexParameterfv __glintercept_fnptr_glGetTexParameterfv;
void __glintercept_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetTexParameterfv(target, pname, params);
  __glintercept_log(" - glGetTexParameterfv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexParameteriv)(GLenum, GLenum, GLint *);
static __ctype_glGetTexParameteriv __glintercept_fnptr_glGetTexParameteriv;
void __glintercept_glGetTexParameteriv(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetTexParameteriv(target, pname, params);
  __glintercept_log(" - glGetTexParameteriv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexParameterxv)(GLenum, GLenum, GLfixed *);
static __ctype_glGetTexParameterxv __glintercept_fnptr_glGetTexParameterxv;
void __glintercept_glGetTexParameterxv(GLenum target, GLenum pname, GLfixed * params) {
  __glintercept_fnptr_glGetTexParameterxv(target, pname, params);
  __glintercept_log(" - glGetTexParameterxv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTexParameterxvOES)(GLenum, GLenum, GLfixed *);
static __ctype_glGetTexParameterxvOES __glintercept_fnptr_glGetTexParameterxvOES;
void __glintercept_glGetTexParameterxvOES(GLenum target, GLenum pname, GLfixed * params) {
  __glintercept_fnptr_glGetTexParameterxvOES(target, pname, params);
  __glintercept_log(" - glGetTexParameterxvOES(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef GLuint64(*__ctype_glGetTextureHandleARB)(GLuint);
static __ctype_glGetTextureHandleARB __glintercept_fnptr_glGetTextureHandleARB;
GLuint64 __glintercept_glGetTextureHandleARB(GLuint texture) {
  GLuint64 __ret = __glintercept_fnptr_glGetTextureHandleARB(texture);
  __glintercept_log(" - glGetTextureHandleARB(texture: %ld) -> %ld", texture, __ret);
  return __ret;
}

typedef GLuint64(*__ctype_glGetTextureHandleIMG)(GLuint);
static __ctype_glGetTextureHandleIMG __glintercept_fnptr_glGetTextureHandleIMG;
GLuint64 __glintercept_glGetTextureHandleIMG(GLuint texture) {
  GLuint64 __ret = __glintercept_fnptr_glGetTextureHandleIMG(texture);
  __glintercept_log(" - glGetTextureHandleIMG(texture: %ld) -> %ld", texture, __ret);
  return __ret;
}

typedef GLuint64(*__ctype_glGetTextureHandleNV)(GLuint);
static __ctype_glGetTextureHandleNV __glintercept_fnptr_glGetTextureHandleNV;
GLuint64 __glintercept_glGetTextureHandleNV(GLuint texture) {
  GLuint64 __ret = __glintercept_fnptr_glGetTextureHandleNV(texture);
  __glintercept_log(" - glGetTextureHandleNV(texture: %ld) -> %ld", texture, __ret);
  return __ret;
}

typedef void(*__ctype_glGetTextureImage)(GLuint, GLint, GLenum, GLenum, GLsizei, void *);
static __ctype_glGetTextureImage __glintercept_fnptr_glGetTextureImage;
void __glintercept_glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels) {
  __glintercept_fnptr_glGetTextureImage(texture, level, format, type, bufSize, pixels);
  __glintercept_log(" - glGetTextureImage(texture: %ld, level: %ld, format: %ld (%s), type: %ld (%s), bufSize: %ld, pixels: %ld)", texture, level, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), bufSize, pixels);
}

typedef void(*__ctype_glGetTextureImageEXT)(GLuint, GLenum, GLint, GLenum, GLenum, void *);
static __ctype_glGetTextureImageEXT __glintercept_fnptr_glGetTextureImageEXT;
void __glintercept_glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void * pixels) {
  __glintercept_fnptr_glGetTextureImageEXT(texture, target, level, format, type, pixels);
  __glintercept_log(" - glGetTextureImageEXT(texture: %ld, target: %ld (%s), level: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", texture, target, __gl_intercept_formatenum(target), level, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glGetTextureLevelParameterfv)(GLuint, GLint, GLenum, GLfloat *);
static __ctype_glGetTextureLevelParameterfv __glintercept_fnptr_glGetTextureLevelParameterfv;
void __glintercept_glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetTextureLevelParameterfv(texture, level, pname, params);
  __glintercept_log(" - glGetTextureLevelParameterfv(texture: %ld, level: %ld, pname: %ld (%s), params: %ld)", texture, level, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTextureLevelParameterfvEXT)(GLuint, GLenum, GLint, GLenum, GLfloat *);
static __ctype_glGetTextureLevelParameterfvEXT __glintercept_fnptr_glGetTextureLevelParameterfvEXT;
void __glintercept_glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetTextureLevelParameterfvEXT(texture, target, level, pname, params);
  __glintercept_log(" - glGetTextureLevelParameterfvEXT(texture: %ld, target: %ld (%s), level: %ld, pname: %ld (%s), params: %ld)", texture, target, __gl_intercept_formatenum(target), level, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTextureLevelParameteriv)(GLuint, GLint, GLenum, GLint *);
static __ctype_glGetTextureLevelParameteriv __glintercept_fnptr_glGetTextureLevelParameteriv;
void __glintercept_glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetTextureLevelParameteriv(texture, level, pname, params);
  __glintercept_log(" - glGetTextureLevelParameteriv(texture: %ld, level: %ld, pname: %ld (%s), params: %ld)", texture, level, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTextureLevelParameterivEXT)(GLuint, GLenum, GLint, GLenum, GLint *);
static __ctype_glGetTextureLevelParameterivEXT __glintercept_fnptr_glGetTextureLevelParameterivEXT;
void __glintercept_glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetTextureLevelParameterivEXT(texture, target, level, pname, params);
  __glintercept_log(" - glGetTextureLevelParameterivEXT(texture: %ld, target: %ld (%s), level: %ld, pname: %ld (%s), params: %ld)", texture, target, __gl_intercept_formatenum(target), level, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTextureParameterIiv)(GLuint, GLenum, GLint *);
static __ctype_glGetTextureParameterIiv __glintercept_fnptr_glGetTextureParameterIiv;
void __glintercept_glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetTextureParameterIiv(texture, pname, params);
  __glintercept_log(" - glGetTextureParameterIiv(texture: %ld, pname: %ld (%s), params: %ld)", texture, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTextureParameterIivEXT)(GLuint, GLenum, GLenum, GLint *);
static __ctype_glGetTextureParameterIivEXT __glintercept_fnptr_glGetTextureParameterIivEXT;
void __glintercept_glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetTextureParameterIivEXT(texture, target, pname, params);
  __glintercept_log(" - glGetTextureParameterIivEXT(texture: %ld, target: %ld (%s), pname: %ld (%s), params: %ld)", texture, target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTextureParameterIuiv)(GLuint, GLenum, GLuint *);
static __ctype_glGetTextureParameterIuiv __glintercept_fnptr_glGetTextureParameterIuiv;
void __glintercept_glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint * params) {
  __glintercept_fnptr_glGetTextureParameterIuiv(texture, pname, params);
  __glintercept_log(" - glGetTextureParameterIuiv(texture: %ld, pname: %ld (%s), params: %ld)", texture, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTextureParameterIuivEXT)(GLuint, GLenum, GLenum, GLuint *);
static __ctype_glGetTextureParameterIuivEXT __glintercept_fnptr_glGetTextureParameterIuivEXT;
void __glintercept_glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint * params) {
  __glintercept_fnptr_glGetTextureParameterIuivEXT(texture, target, pname, params);
  __glintercept_log(" - glGetTextureParameterIuivEXT(texture: %ld, target: %ld (%s), pname: %ld (%s), params: %ld)", texture, target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTextureParameterfv)(GLuint, GLenum, GLfloat *);
static __ctype_glGetTextureParameterfv __glintercept_fnptr_glGetTextureParameterfv;
void __glintercept_glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetTextureParameterfv(texture, pname, params);
  __glintercept_log(" - glGetTextureParameterfv(texture: %ld, pname: %ld (%s), params: %ld)", texture, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTextureParameterfvEXT)(GLuint, GLenum, GLenum, GLfloat *);
static __ctype_glGetTextureParameterfvEXT __glintercept_fnptr_glGetTextureParameterfvEXT;
void __glintercept_glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetTextureParameterfvEXT(texture, target, pname, params);
  __glintercept_log(" - glGetTextureParameterfvEXT(texture: %ld, target: %ld (%s), pname: %ld (%s), params: %ld)", texture, target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTextureParameteriv)(GLuint, GLenum, GLint *);
static __ctype_glGetTextureParameteriv __glintercept_fnptr_glGetTextureParameteriv;
void __glintercept_glGetTextureParameteriv(GLuint texture, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetTextureParameteriv(texture, pname, params);
  __glintercept_log(" - glGetTextureParameteriv(texture: %ld, pname: %ld (%s), params: %ld)", texture, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTextureParameterivEXT)(GLuint, GLenum, GLenum, GLint *);
static __ctype_glGetTextureParameterivEXT __glintercept_fnptr_glGetTextureParameterivEXT;
void __glintercept_glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetTextureParameterivEXT(texture, target, pname, params);
  __glintercept_log(" - glGetTextureParameterivEXT(texture: %ld, target: %ld (%s), pname: %ld (%s), params: %ld)", texture, target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef GLuint64(*__ctype_glGetTextureSamplerHandleARB)(GLuint, GLuint);
static __ctype_glGetTextureSamplerHandleARB __glintercept_fnptr_glGetTextureSamplerHandleARB;
GLuint64 __glintercept_glGetTextureSamplerHandleARB(GLuint texture, GLuint sampler) {
  GLuint64 __ret = __glintercept_fnptr_glGetTextureSamplerHandleARB(texture, sampler);
  __glintercept_log(" - glGetTextureSamplerHandleARB(texture: %ld, sampler: %ld) -> %ld", texture, sampler, __ret);
  return __ret;
}

typedef GLuint64(*__ctype_glGetTextureSamplerHandleIMG)(GLuint, GLuint);
static __ctype_glGetTextureSamplerHandleIMG __glintercept_fnptr_glGetTextureSamplerHandleIMG;
GLuint64 __glintercept_glGetTextureSamplerHandleIMG(GLuint texture, GLuint sampler) {
  GLuint64 __ret = __glintercept_fnptr_glGetTextureSamplerHandleIMG(texture, sampler);
  __glintercept_log(" - glGetTextureSamplerHandleIMG(texture: %ld, sampler: %ld) -> %ld", texture, sampler, __ret);
  return __ret;
}

typedef GLuint64(*__ctype_glGetTextureSamplerHandleNV)(GLuint, GLuint);
static __ctype_glGetTextureSamplerHandleNV __glintercept_fnptr_glGetTextureSamplerHandleNV;
GLuint64 __glintercept_glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler) {
  GLuint64 __ret = __glintercept_fnptr_glGetTextureSamplerHandleNV(texture, sampler);
  __glintercept_log(" - glGetTextureSamplerHandleNV(texture: %ld, sampler: %ld) -> %ld", texture, sampler, __ret);
  return __ret;
}

typedef void(*__ctype_glGetTextureSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
static __ctype_glGetTextureSubImage __glintercept_fnptr_glGetTextureSubImage;
void __glintercept_glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels) {
  __glintercept_fnptr_glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
  __glintercept_log(" - glGetTextureSubImage(texture: %ld, level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld, format: %ld (%s), type: %ld (%s), bufSize: %ld, pixels: %ld)", texture, level, xoffset, yoffset, zoffset, width, height, depth, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), bufSize, pixels);
}

typedef void(*__ctype_glGetTrackMatrixivNV)(GLenum, GLuint, GLenum, GLint *);
static __ctype_glGetTrackMatrixivNV __glintercept_fnptr_glGetTrackMatrixivNV;
void __glintercept_glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetTrackMatrixivNV(target, address, pname, params);
  __glintercept_log(" - glGetTrackMatrixivNV(target: %ld (%s), address: %ld, pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), address, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetTransformFeedbackVarying)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
static __ctype_glGetTransformFeedbackVarying __glintercept_fnptr_glGetTransformFeedbackVarying;
void __glintercept_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) {
  __glintercept_fnptr_glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
  __glintercept_log(" - glGetTransformFeedbackVarying(program: %ld, index: %ld, bufSize: %ld, length: %ld, size: %ld, type: %ld, name: %ld)", program, index, bufSize, length, size, type, name);
}

typedef void(*__ctype_glGetTransformFeedbackVaryingEXT)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
static __ctype_glGetTransformFeedbackVaryingEXT __glintercept_fnptr_glGetTransformFeedbackVaryingEXT;
void __glintercept_glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) {
  __glintercept_fnptr_glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name);
  __glintercept_log(" - glGetTransformFeedbackVaryingEXT(program: %ld, index: %ld, bufSize: %ld, length: %ld, size: %ld, type: %ld, name: %ld)", program, index, bufSize, length, size, type, name);
}

typedef void(*__ctype_glGetTransformFeedbackVaryingNV)(GLuint, GLuint, GLint *);
static __ctype_glGetTransformFeedbackVaryingNV __glintercept_fnptr_glGetTransformFeedbackVaryingNV;
void __glintercept_glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint * location) {
  __glintercept_fnptr_glGetTransformFeedbackVaryingNV(program, index, location);
  __glintercept_log(" - glGetTransformFeedbackVaryingNV(program: %ld, index: %ld, location: %ld)", program, index, location);
}

typedef void(*__ctype_glGetTransformFeedbacki64_v)(GLuint, GLenum, GLuint, GLint64 *);
static __ctype_glGetTransformFeedbacki64_v __glintercept_fnptr_glGetTransformFeedbacki64_v;
void __glintercept_glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 * param) {
  __glintercept_fnptr_glGetTransformFeedbacki64_v(xfb, pname, index, param);
  __glintercept_log(" - glGetTransformFeedbacki64_v(xfb: %ld, pname: %ld (%s), index: %ld, param: %ld)", xfb, pname, __gl_intercept_formatenum(pname), index, param);
}

typedef void(*__ctype_glGetTransformFeedbacki_v)(GLuint, GLenum, GLuint, GLint *);
static __ctype_glGetTransformFeedbacki_v __glintercept_fnptr_glGetTransformFeedbacki_v;
void __glintercept_glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint * param) {
  __glintercept_fnptr_glGetTransformFeedbacki_v(xfb, pname, index, param);
  __glintercept_log(" - glGetTransformFeedbacki_v(xfb: %ld, pname: %ld (%s), index: %ld, param: %ld)", xfb, pname, __gl_intercept_formatenum(pname), index, param);
}

typedef void(*__ctype_glGetTransformFeedbackiv)(GLuint, GLenum, GLint *);
static __ctype_glGetTransformFeedbackiv __glintercept_fnptr_glGetTransformFeedbackiv;
void __glintercept_glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint * param) {
  __glintercept_fnptr_glGetTransformFeedbackiv(xfb, pname, param);
  __glintercept_log(" - glGetTransformFeedbackiv(xfb: %ld, pname: %ld (%s), param: %ld)", xfb, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glGetTranslatedShaderSourceANGLE)(GLuint, GLsizei, GLsizei *, GLchar *);
static __ctype_glGetTranslatedShaderSourceANGLE __glintercept_fnptr_glGetTranslatedShaderSourceANGLE;
void __glintercept_glGetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source) {
  __glintercept_fnptr_glGetTranslatedShaderSourceANGLE(shader, bufSize, length, source);
  __glintercept_log(" - glGetTranslatedShaderSourceANGLE(shader: %ld, bufSize: %ld, length: %ld, source: %ld)", shader, bufSize, length, source);
}

typedef GLuint(*__ctype_glGetUniformBlockIndex)(GLuint, const GLchar *);
static __ctype_glGetUniformBlockIndex __glintercept_fnptr_glGetUniformBlockIndex;
GLuint __glintercept_glGetUniformBlockIndex(GLuint program, const GLchar * uniformBlockName) {
  GLuint __ret = __glintercept_fnptr_glGetUniformBlockIndex(program, uniformBlockName);
  __glintercept_log(" - glGetUniformBlockIndex(program: %ld, uniformBlockName: %ld) -> %ld", program, uniformBlockName, __ret);
  return __ret;
}

typedef GLint(*__ctype_glGetUniformBufferSizeEXT)(GLuint, GLint);
static __ctype_glGetUniformBufferSizeEXT __glintercept_fnptr_glGetUniformBufferSizeEXT;
GLint __glintercept_glGetUniformBufferSizeEXT(GLuint program, GLint location) {
  GLint __ret = __glintercept_fnptr_glGetUniformBufferSizeEXT(program, location);
  __glintercept_log(" - glGetUniformBufferSizeEXT(program: %ld, location: %ld) -> %ld", program, location, __ret);
  return __ret;
}

typedef void(*__ctype_glGetUniformIndices)(GLuint, GLsizei, const GLchar *const*, GLuint *);
static __ctype_glGetUniformIndices __glintercept_fnptr_glGetUniformIndices;
void __glintercept_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices) {
  __glintercept_fnptr_glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
  __glintercept_log(" - glGetUniformIndices(program: %ld, uniformCount: %ld, uniformNames: %ld, uniformIndices: %ld)", program, uniformCount, uniformNames, uniformIndices);
}

typedef GLint(*__ctype_glGetUniformLocation)(GLuint, const GLchar *);
static __ctype_glGetUniformLocation __glintercept_fnptr_glGetUniformLocation;
GLint __glintercept_glGetUniformLocation(GLuint program, const GLchar * name) {
  GLint __ret = __glintercept_fnptr_glGetUniformLocation(program, name);
  __glintercept_log(" - glGetUniformLocation(program: %ld, name: %ld) -> %ld", program, name, __ret);
  return __ret;
}

typedef GLint(*__ctype_glGetUniformLocationARB)(GLhandleARB, const GLcharARB *);
static __ctype_glGetUniformLocationARB __glintercept_fnptr_glGetUniformLocationARB;
GLint __glintercept_glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB * name) {
  GLint __ret = __glintercept_fnptr_glGetUniformLocationARB(programObj, name);
  __glintercept_log(" - glGetUniformLocationARB(programObj: %ld, name: %ld) -> %ld", programObj, name, __ret);
  return __ret;
}

typedef GLintptr(*__ctype_glGetUniformOffsetEXT)(GLuint, GLint);
static __ctype_glGetUniformOffsetEXT __glintercept_fnptr_glGetUniformOffsetEXT;
GLintptr __glintercept_glGetUniformOffsetEXT(GLuint program, GLint location) {
  GLintptr __ret = __glintercept_fnptr_glGetUniformOffsetEXT(program, location);
  __glintercept_log(" - glGetUniformOffsetEXT(program: %ld, location: %ld) -> %ld", program, location, __ret);
  return __ret;
}

typedef void(*__ctype_glGetUniformSubroutineuiv)(GLenum, GLint, GLuint *);
static __ctype_glGetUniformSubroutineuiv __glintercept_fnptr_glGetUniformSubroutineuiv;
void __glintercept_glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint * params) {
  __glintercept_fnptr_glGetUniformSubroutineuiv(shadertype, location, params);
  __glintercept_log(" - glGetUniformSubroutineuiv(shadertype: %ld (%s), location: %ld, params: %ld)", shadertype, __gl_intercept_formatenum(shadertype), location, params);
}

typedef void(*__ctype_glGetUniformdv)(GLuint, GLint, GLdouble *);
static __ctype_glGetUniformdv __glintercept_fnptr_glGetUniformdv;
void __glintercept_glGetUniformdv(GLuint program, GLint location, GLdouble * params) {
  __glintercept_fnptr_glGetUniformdv(program, location, params);
  __glintercept_log(" - glGetUniformdv(program: %ld, location: %ld, params: %ld)", program, location, params);
}

typedef void(*__ctype_glGetUniformfv)(GLuint, GLint, GLfloat *);
static __ctype_glGetUniformfv __glintercept_fnptr_glGetUniformfv;
void __glintercept_glGetUniformfv(GLuint program, GLint location, GLfloat * params) {
  __glintercept_fnptr_glGetUniformfv(program, location, params);
  __glintercept_log(" - glGetUniformfv(program: %ld, location: %ld, params: %ld)", program, location, params);
}

typedef void(*__ctype_glGetUniformfvARB)(GLhandleARB, GLint, GLfloat *);
static __ctype_glGetUniformfvARB __glintercept_fnptr_glGetUniformfvARB;
void __glintercept_glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat * params) {
  __glintercept_fnptr_glGetUniformfvARB(programObj, location, params);
  __glintercept_log(" - glGetUniformfvARB(programObj: %ld, location: %ld, params: %ld)", programObj, location, params);
}

typedef void(*__ctype_glGetUniformi64vARB)(GLuint, GLint, GLint64 *);
static __ctype_glGetUniformi64vARB __glintercept_fnptr_glGetUniformi64vARB;
void __glintercept_glGetUniformi64vARB(GLuint program, GLint location, GLint64 * params) {
  __glintercept_fnptr_glGetUniformi64vARB(program, location, params);
  __glintercept_log(" - glGetUniformi64vARB(program: %ld, location: %ld, params: %ld)", program, location, params);
}

typedef void(*__ctype_glGetUniformi64vNV)(GLuint, GLint, GLint64EXT *);
static __ctype_glGetUniformi64vNV __glintercept_fnptr_glGetUniformi64vNV;
void __glintercept_glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT * params) {
  __glintercept_fnptr_glGetUniformi64vNV(program, location, params);
  __glintercept_log(" - glGetUniformi64vNV(program: %ld, location: %ld, params: %ld)", program, location, params);
}

typedef void(*__ctype_glGetUniformiv)(GLuint, GLint, GLint *);
static __ctype_glGetUniformiv __glintercept_fnptr_glGetUniformiv;
void __glintercept_glGetUniformiv(GLuint program, GLint location, GLint * params) {
  __glintercept_fnptr_glGetUniformiv(program, location, params);
  __glintercept_log(" - glGetUniformiv(program: %ld, location: %ld, params: %ld)", program, location, params);
}

typedef void(*__ctype_glGetUniformivARB)(GLhandleARB, GLint, GLint *);
static __ctype_glGetUniformivARB __glintercept_fnptr_glGetUniformivARB;
void __glintercept_glGetUniformivARB(GLhandleARB programObj, GLint location, GLint * params) {
  __glintercept_fnptr_glGetUniformivARB(programObj, location, params);
  __glintercept_log(" - glGetUniformivARB(programObj: %ld, location: %ld, params: %ld)", programObj, location, params);
}

typedef void(*__ctype_glGetUniformui64vARB)(GLuint, GLint, GLuint64 *);
static __ctype_glGetUniformui64vARB __glintercept_fnptr_glGetUniformui64vARB;
void __glintercept_glGetUniformui64vARB(GLuint program, GLint location, GLuint64 * params) {
  __glintercept_fnptr_glGetUniformui64vARB(program, location, params);
  __glintercept_log(" - glGetUniformui64vARB(program: %ld, location: %ld, params: %ld)", program, location, params);
}

typedef void(*__ctype_glGetUniformui64vNV)(GLuint, GLint, GLuint64EXT *);
static __ctype_glGetUniformui64vNV __glintercept_fnptr_glGetUniformui64vNV;
void __glintercept_glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT * params) {
  __glintercept_fnptr_glGetUniformui64vNV(program, location, params);
  __glintercept_log(" - glGetUniformui64vNV(program: %ld, location: %ld, params: %ld)", program, location, params);
}

typedef void(*__ctype_glGetUniformuiv)(GLuint, GLint, GLuint *);
static __ctype_glGetUniformuiv __glintercept_fnptr_glGetUniformuiv;
void __glintercept_glGetUniformuiv(GLuint program, GLint location, GLuint * params) {
  __glintercept_fnptr_glGetUniformuiv(program, location, params);
  __glintercept_log(" - glGetUniformuiv(program: %ld, location: %ld, params: %ld)", program, location, params);
}

typedef void(*__ctype_glGetUniformuivEXT)(GLuint, GLint, GLuint *);
static __ctype_glGetUniformuivEXT __glintercept_fnptr_glGetUniformuivEXT;
void __glintercept_glGetUniformuivEXT(GLuint program, GLint location, GLuint * params) {
  __glintercept_fnptr_glGetUniformuivEXT(program, location, params);
  __glintercept_log(" - glGetUniformuivEXT(program: %ld, location: %ld, params: %ld)", program, location, params);
}

typedef void(*__ctype_glGetUnsignedBytevEXT)(GLenum, GLubyte *);
static __ctype_glGetUnsignedBytevEXT __glintercept_fnptr_glGetUnsignedBytevEXT;
void __glintercept_glGetUnsignedBytevEXT(GLenum pname, GLubyte * data) {
  __glintercept_fnptr_glGetUnsignedBytevEXT(pname, data);
  __glintercept_log(" - glGetUnsignedBytevEXT(pname: %ld (%s), data: %ld)", pname, __gl_intercept_formatenum(pname), data);
}

typedef void(*__ctype_glGetUnsignedBytei_vEXT)(GLenum, GLuint, GLubyte *);
static __ctype_glGetUnsignedBytei_vEXT __glintercept_fnptr_glGetUnsignedBytei_vEXT;
void __glintercept_glGetUnsignedBytei_vEXT(GLenum target, GLuint index, GLubyte * data) {
  __glintercept_fnptr_glGetUnsignedBytei_vEXT(target, index, data);
  __glintercept_log(" - glGetUnsignedBytei_vEXT(target: %ld (%s), index: %ld, data: %ld)", target, __gl_intercept_formatenum(target), index, data);
}

typedef void(*__ctype_glGetVariantArrayObjectfvATI)(GLuint, GLenum, GLfloat *);
static __ctype_glGetVariantArrayObjectfvATI __glintercept_fnptr_glGetVariantArrayObjectfvATI;
void __glintercept_glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetVariantArrayObjectfvATI(id, pname, params);
  __glintercept_log(" - glGetVariantArrayObjectfvATI(id: %ld, pname: %ld (%s), params: %ld)", id, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVariantArrayObjectivATI)(GLuint, GLenum, GLint *);
static __ctype_glGetVariantArrayObjectivATI __glintercept_fnptr_glGetVariantArrayObjectivATI;
void __glintercept_glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetVariantArrayObjectivATI(id, pname, params);
  __glintercept_log(" - glGetVariantArrayObjectivATI(id: %ld, pname: %ld (%s), params: %ld)", id, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVariantBooleanvEXT)(GLuint, GLenum, GLboolean *);
static __ctype_glGetVariantBooleanvEXT __glintercept_fnptr_glGetVariantBooleanvEXT;
void __glintercept_glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean * data) {
  __glintercept_fnptr_glGetVariantBooleanvEXT(id, value, data);
  __glintercept_log(" - glGetVariantBooleanvEXT(id: %ld, value: %ld (%s), data: %ld)", id, value, __gl_intercept_formatenum(value), data);
}

typedef void(*__ctype_glGetVariantFloatvEXT)(GLuint, GLenum, GLfloat *);
static __ctype_glGetVariantFloatvEXT __glintercept_fnptr_glGetVariantFloatvEXT;
void __glintercept_glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat * data) {
  __glintercept_fnptr_glGetVariantFloatvEXT(id, value, data);
  __glintercept_log(" - glGetVariantFloatvEXT(id: %ld, value: %ld (%s), data: %ld)", id, value, __gl_intercept_formatenum(value), data);
}

typedef void(*__ctype_glGetVariantIntegervEXT)(GLuint, GLenum, GLint *);
static __ctype_glGetVariantIntegervEXT __glintercept_fnptr_glGetVariantIntegervEXT;
void __glintercept_glGetVariantIntegervEXT(GLuint id, GLenum value, GLint * data) {
  __glintercept_fnptr_glGetVariantIntegervEXT(id, value, data);
  __glintercept_log(" - glGetVariantIntegervEXT(id: %ld, value: %ld (%s), data: %ld)", id, value, __gl_intercept_formatenum(value), data);
}

typedef void(*__ctype_glGetVariantPointervEXT)(GLuint, GLenum, void **);
static __ctype_glGetVariantPointervEXT __glintercept_fnptr_glGetVariantPointervEXT;
void __glintercept_glGetVariantPointervEXT(GLuint id, GLenum value, void ** data) {
  __glintercept_fnptr_glGetVariantPointervEXT(id, value, data);
  __glintercept_log(" - glGetVariantPointervEXT(id: %ld, value: %ld (%s), data: %ld)", id, value, __gl_intercept_formatenum(value), data);
}

typedef GLint(*__ctype_glGetVaryingLocationNV)(GLuint, const GLchar *);
static __ctype_glGetVaryingLocationNV __glintercept_fnptr_glGetVaryingLocationNV;
GLint __glintercept_glGetVaryingLocationNV(GLuint program, const GLchar * name) {
  GLint __ret = __glintercept_fnptr_glGetVaryingLocationNV(program, name);
  __glintercept_log(" - glGetVaryingLocationNV(program: %ld, name: %ld) -> %ld", program, name, __ret);
  return __ret;
}

typedef void(*__ctype_glGetVertexArrayIndexed64iv)(GLuint, GLuint, GLenum, GLint64 *);
static __ctype_glGetVertexArrayIndexed64iv __glintercept_fnptr_glGetVertexArrayIndexed64iv;
void __glintercept_glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 * param) {
  __glintercept_fnptr_glGetVertexArrayIndexed64iv(vaobj, index, pname, param);
  __glintercept_log(" - glGetVertexArrayIndexed64iv(vaobj: %ld, index: %ld, pname: %ld (%s), param: %ld)", vaobj, index, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glGetVertexArrayIndexediv)(GLuint, GLuint, GLenum, GLint *);
static __ctype_glGetVertexArrayIndexediv __glintercept_fnptr_glGetVertexArrayIndexediv;
void __glintercept_glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint * param) {
  __glintercept_fnptr_glGetVertexArrayIndexediv(vaobj, index, pname, param);
  __glintercept_log(" - glGetVertexArrayIndexediv(vaobj: %ld, index: %ld, pname: %ld (%s), param: %ld)", vaobj, index, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glGetVertexArrayIntegeri_vEXT)(GLuint, GLuint, GLenum, GLint *);
static __ctype_glGetVertexArrayIntegeri_vEXT __glintercept_fnptr_glGetVertexArrayIntegeri_vEXT;
void __glintercept_glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint * param) {
  __glintercept_fnptr_glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param);
  __glintercept_log(" - glGetVertexArrayIntegeri_vEXT(vaobj: %ld, index: %ld, pname: %ld (%s), param: %ld)", vaobj, index, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glGetVertexArrayIntegervEXT)(GLuint, GLenum, GLint *);
static __ctype_glGetVertexArrayIntegervEXT __glintercept_fnptr_glGetVertexArrayIntegervEXT;
void __glintercept_glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint * param) {
  __glintercept_fnptr_glGetVertexArrayIntegervEXT(vaobj, pname, param);
  __glintercept_log(" - glGetVertexArrayIntegervEXT(vaobj: %ld, pname: %ld (%s), param: %ld)", vaobj, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glGetVertexArrayPointeri_vEXT)(GLuint, GLuint, GLenum, void **);
static __ctype_glGetVertexArrayPointeri_vEXT __glintercept_fnptr_glGetVertexArrayPointeri_vEXT;
void __glintercept_glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, void ** param) {
  __glintercept_fnptr_glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param);
  __glintercept_log(" - glGetVertexArrayPointeri_vEXT(vaobj: %ld, index: %ld, pname: %ld (%s), param: %ld)", vaobj, index, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glGetVertexArrayPointervEXT)(GLuint, GLenum, void **);
static __ctype_glGetVertexArrayPointervEXT __glintercept_fnptr_glGetVertexArrayPointervEXT;
void __glintercept_glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, void ** param) {
  __glintercept_fnptr_glGetVertexArrayPointervEXT(vaobj, pname, param);
  __glintercept_log(" - glGetVertexArrayPointervEXT(vaobj: %ld, pname: %ld (%s), param: %ld)", vaobj, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glGetVertexArrayiv)(GLuint, GLenum, GLint *);
static __ctype_glGetVertexArrayiv __glintercept_fnptr_glGetVertexArrayiv;
void __glintercept_glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint * param) {
  __glintercept_fnptr_glGetVertexArrayiv(vaobj, pname, param);
  __glintercept_log(" - glGetVertexArrayiv(vaobj: %ld, pname: %ld (%s), param: %ld)", vaobj, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glGetVertexAttribArrayObjectfvATI)(GLuint, GLenum, GLfloat *);
static __ctype_glGetVertexAttribArrayObjectfvATI __glintercept_fnptr_glGetVertexAttribArrayObjectfvATI;
void __glintercept_glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetVertexAttribArrayObjectfvATI(index, pname, params);
  __glintercept_log(" - glGetVertexAttribArrayObjectfvATI(index: %ld, pname: %ld (%s), params: %ld)", index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVertexAttribArrayObjectivATI)(GLuint, GLenum, GLint *);
static __ctype_glGetVertexAttribArrayObjectivATI __glintercept_fnptr_glGetVertexAttribArrayObjectivATI;
void __glintercept_glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetVertexAttribArrayObjectivATI(index, pname, params);
  __glintercept_log(" - glGetVertexAttribArrayObjectivATI(index: %ld, pname: %ld (%s), params: %ld)", index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVertexAttribIiv)(GLuint, GLenum, GLint *);
static __ctype_glGetVertexAttribIiv __glintercept_fnptr_glGetVertexAttribIiv;
void __glintercept_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetVertexAttribIiv(index, pname, params);
  __glintercept_log(" - glGetVertexAttribIiv(index: %ld, pname: %ld (%s), params: %ld)", index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVertexAttribIivEXT)(GLuint, GLenum, GLint *);
static __ctype_glGetVertexAttribIivEXT __glintercept_fnptr_glGetVertexAttribIivEXT;
void __glintercept_glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetVertexAttribIivEXT(index, pname, params);
  __glintercept_log(" - glGetVertexAttribIivEXT(index: %ld, pname: %ld (%s), params: %ld)", index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVertexAttribIuiv)(GLuint, GLenum, GLuint *);
static __ctype_glGetVertexAttribIuiv __glintercept_fnptr_glGetVertexAttribIuiv;
void __glintercept_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint * params) {
  __glintercept_fnptr_glGetVertexAttribIuiv(index, pname, params);
  __glintercept_log(" - glGetVertexAttribIuiv(index: %ld, pname: %ld (%s), params: %ld)", index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVertexAttribIuivEXT)(GLuint, GLenum, GLuint *);
static __ctype_glGetVertexAttribIuivEXT __glintercept_fnptr_glGetVertexAttribIuivEXT;
void __glintercept_glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint * params) {
  __glintercept_fnptr_glGetVertexAttribIuivEXT(index, pname, params);
  __glintercept_log(" - glGetVertexAttribIuivEXT(index: %ld, pname: %ld (%s), params: %ld)", index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVertexAttribLdv)(GLuint, GLenum, GLdouble *);
static __ctype_glGetVertexAttribLdv __glintercept_fnptr_glGetVertexAttribLdv;
void __glintercept_glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble * params) {
  __glintercept_fnptr_glGetVertexAttribLdv(index, pname, params);
  __glintercept_log(" - glGetVertexAttribLdv(index: %ld, pname: %ld (%s), params: %ld)", index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVertexAttribLdvEXT)(GLuint, GLenum, GLdouble *);
static __ctype_glGetVertexAttribLdvEXT __glintercept_fnptr_glGetVertexAttribLdvEXT;
void __glintercept_glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble * params) {
  __glintercept_fnptr_glGetVertexAttribLdvEXT(index, pname, params);
  __glintercept_log(" - glGetVertexAttribLdvEXT(index: %ld, pname: %ld (%s), params: %ld)", index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVertexAttribLi64vNV)(GLuint, GLenum, GLint64EXT *);
static __ctype_glGetVertexAttribLi64vNV __glintercept_fnptr_glGetVertexAttribLi64vNV;
void __glintercept_glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT * params) {
  __glintercept_fnptr_glGetVertexAttribLi64vNV(index, pname, params);
  __glintercept_log(" - glGetVertexAttribLi64vNV(index: %ld, pname: %ld (%s), params: %ld)", index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVertexAttribLui64vARB)(GLuint, GLenum, GLuint64EXT *);
static __ctype_glGetVertexAttribLui64vARB __glintercept_fnptr_glGetVertexAttribLui64vARB;
void __glintercept_glGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT * params) {
  __glintercept_fnptr_glGetVertexAttribLui64vARB(index, pname, params);
  __glintercept_log(" - glGetVertexAttribLui64vARB(index: %ld, pname: %ld (%s), params: %ld)", index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVertexAttribLui64vNV)(GLuint, GLenum, GLuint64EXT *);
static __ctype_glGetVertexAttribLui64vNV __glintercept_fnptr_glGetVertexAttribLui64vNV;
void __glintercept_glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT * params) {
  __glintercept_fnptr_glGetVertexAttribLui64vNV(index, pname, params);
  __glintercept_log(" - glGetVertexAttribLui64vNV(index: %ld, pname: %ld (%s), params: %ld)", index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVertexAttribPointerv)(GLuint, GLenum, void **);
static __ctype_glGetVertexAttribPointerv __glintercept_fnptr_glGetVertexAttribPointerv;
void __glintercept_glGetVertexAttribPointerv(GLuint index, GLenum pname, void ** pointer) {
  __glintercept_fnptr_glGetVertexAttribPointerv(index, pname, pointer);
  __glintercept_log(" - glGetVertexAttribPointerv(index: %ld, pname: %ld (%s), pointer: %ld)", index, pname, __gl_intercept_formatenum(pname), pointer);
}

typedef void(*__ctype_glGetVertexAttribPointervARB)(GLuint, GLenum, void **);
static __ctype_glGetVertexAttribPointervARB __glintercept_fnptr_glGetVertexAttribPointervARB;
void __glintercept_glGetVertexAttribPointervARB(GLuint index, GLenum pname, void ** pointer) {
  __glintercept_fnptr_glGetVertexAttribPointervARB(index, pname, pointer);
  __glintercept_log(" - glGetVertexAttribPointervARB(index: %ld, pname: %ld (%s), pointer: %ld)", index, pname, __gl_intercept_formatenum(pname), pointer);
}

typedef void(*__ctype_glGetVertexAttribPointervNV)(GLuint, GLenum, void **);
static __ctype_glGetVertexAttribPointervNV __glintercept_fnptr_glGetVertexAttribPointervNV;
void __glintercept_glGetVertexAttribPointervNV(GLuint index, GLenum pname, void ** pointer) {
  __glintercept_fnptr_glGetVertexAttribPointervNV(index, pname, pointer);
  __glintercept_log(" - glGetVertexAttribPointervNV(index: %ld, pname: %ld (%s), pointer: %ld)", index, pname, __gl_intercept_formatenum(pname), pointer);
}

typedef void(*__ctype_glGetVertexAttribdv)(GLuint, GLenum, GLdouble *);
static __ctype_glGetVertexAttribdv __glintercept_fnptr_glGetVertexAttribdv;
void __glintercept_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble * params) {
  __glintercept_fnptr_glGetVertexAttribdv(index, pname, params);
  __glintercept_log(" - glGetVertexAttribdv(index: %ld, pname: %ld (%s), params: %ld)", index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVertexAttribdvARB)(GLuint, GLenum, GLdouble *);
static __ctype_glGetVertexAttribdvARB __glintercept_fnptr_glGetVertexAttribdvARB;
void __glintercept_glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble * params) {
  __glintercept_fnptr_glGetVertexAttribdvARB(index, pname, params);
  __glintercept_log(" - glGetVertexAttribdvARB(index: %ld, pname: %ld (%s), params: %ld)", index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVertexAttribdvNV)(GLuint, GLenum, GLdouble *);
static __ctype_glGetVertexAttribdvNV __glintercept_fnptr_glGetVertexAttribdvNV;
void __glintercept_glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble * params) {
  __glintercept_fnptr_glGetVertexAttribdvNV(index, pname, params);
  __glintercept_log(" - glGetVertexAttribdvNV(index: %ld, pname: %ld (%s), params: %ld)", index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVertexAttribfv)(GLuint, GLenum, GLfloat *);
static __ctype_glGetVertexAttribfv __glintercept_fnptr_glGetVertexAttribfv;
void __glintercept_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetVertexAttribfv(index, pname, params);
  __glintercept_log(" - glGetVertexAttribfv(index: %ld, pname: %ld (%s), params: %ld)", index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVertexAttribfvARB)(GLuint, GLenum, GLfloat *);
static __ctype_glGetVertexAttribfvARB __glintercept_fnptr_glGetVertexAttribfvARB;
void __glintercept_glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetVertexAttribfvARB(index, pname, params);
  __glintercept_log(" - glGetVertexAttribfvARB(index: %ld, pname: %ld (%s), params: %ld)", index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVertexAttribfvNV)(GLuint, GLenum, GLfloat *);
static __ctype_glGetVertexAttribfvNV __glintercept_fnptr_glGetVertexAttribfvNV;
void __glintercept_glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetVertexAttribfvNV(index, pname, params);
  __glintercept_log(" - glGetVertexAttribfvNV(index: %ld, pname: %ld (%s), params: %ld)", index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVertexAttribiv)(GLuint, GLenum, GLint *);
static __ctype_glGetVertexAttribiv __glintercept_fnptr_glGetVertexAttribiv;
void __glintercept_glGetVertexAttribiv(GLuint index, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetVertexAttribiv(index, pname, params);
  __glintercept_log(" - glGetVertexAttribiv(index: %ld, pname: %ld (%s), params: %ld)", index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVertexAttribivARB)(GLuint, GLenum, GLint *);
static __ctype_glGetVertexAttribivARB __glintercept_fnptr_glGetVertexAttribivARB;
void __glintercept_glGetVertexAttribivARB(GLuint index, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetVertexAttribivARB(index, pname, params);
  __glintercept_log(" - glGetVertexAttribivARB(index: %ld, pname: %ld (%s), params: %ld)", index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVertexAttribivNV)(GLuint, GLenum, GLint *);
static __ctype_glGetVertexAttribivNV __glintercept_fnptr_glGetVertexAttribivNV;
void __glintercept_glGetVertexAttribivNV(GLuint index, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetVertexAttribivNV(index, pname, params);
  __glintercept_log(" - glGetVertexAttribivNV(index: %ld, pname: %ld (%s), params: %ld)", index, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVideoCaptureStreamdvNV)(GLuint, GLuint, GLenum, GLdouble *);
static __ctype_glGetVideoCaptureStreamdvNV __glintercept_fnptr_glGetVideoCaptureStreamdvNV;
void __glintercept_glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble * params) {
  __glintercept_fnptr_glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params);
  __glintercept_log(" - glGetVideoCaptureStreamdvNV(video_capture_slot: %ld, stream: %ld, pname: %ld (%s), params: %ld)", video_capture_slot, stream, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVideoCaptureStreamfvNV)(GLuint, GLuint, GLenum, GLfloat *);
static __ctype_glGetVideoCaptureStreamfvNV __glintercept_fnptr_glGetVideoCaptureStreamfvNV;
void __glintercept_glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat * params) {
  __glintercept_fnptr_glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params);
  __glintercept_log(" - glGetVideoCaptureStreamfvNV(video_capture_slot: %ld, stream: %ld, pname: %ld (%s), params: %ld)", video_capture_slot, stream, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVideoCaptureStreamivNV)(GLuint, GLuint, GLenum, GLint *);
static __ctype_glGetVideoCaptureStreamivNV __glintercept_fnptr_glGetVideoCaptureStreamivNV;
void __glintercept_glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params);
  __glintercept_log(" - glGetVideoCaptureStreamivNV(video_capture_slot: %ld, stream: %ld, pname: %ld (%s), params: %ld)", video_capture_slot, stream, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVideoCaptureivNV)(GLuint, GLenum, GLint *);
static __ctype_glGetVideoCaptureivNV __glintercept_fnptr_glGetVideoCaptureivNV;
void __glintercept_glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetVideoCaptureivNV(video_capture_slot, pname, params);
  __glintercept_log(" - glGetVideoCaptureivNV(video_capture_slot: %ld, pname: %ld (%s), params: %ld)", video_capture_slot, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVideoi64vNV)(GLuint, GLenum, GLint64EXT *);
static __ctype_glGetVideoi64vNV __glintercept_fnptr_glGetVideoi64vNV;
void __glintercept_glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT * params) {
  __glintercept_fnptr_glGetVideoi64vNV(video_slot, pname, params);
  __glintercept_log(" - glGetVideoi64vNV(video_slot: %ld, pname: %ld (%s), params: %ld)", video_slot, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVideoivNV)(GLuint, GLenum, GLint *);
static __ctype_glGetVideoivNV __glintercept_fnptr_glGetVideoivNV;
void __glintercept_glGetVideoivNV(GLuint video_slot, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetVideoivNV(video_slot, pname, params);
  __glintercept_log(" - glGetVideoivNV(video_slot: %ld, pname: %ld (%s), params: %ld)", video_slot, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVideoui64vNV)(GLuint, GLenum, GLuint64EXT *);
static __ctype_glGetVideoui64vNV __glintercept_fnptr_glGetVideoui64vNV;
void __glintercept_glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT * params) {
  __glintercept_fnptr_glGetVideoui64vNV(video_slot, pname, params);
  __glintercept_log(" - glGetVideoui64vNV(video_slot: %ld, pname: %ld (%s), params: %ld)", video_slot, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetVideouivNV)(GLuint, GLenum, GLuint *);
static __ctype_glGetVideouivNV __glintercept_fnptr_glGetVideouivNV;
void __glintercept_glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint * params) {
  __glintercept_fnptr_glGetVideouivNV(video_slot, pname, params);
  __glintercept_log(" - glGetVideouivNV(video_slot: %ld, pname: %ld (%s), params: %ld)", video_slot, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glGetnColorTable)(GLenum, GLenum, GLenum, GLsizei, void *);
static __ctype_glGetnColorTable __glintercept_fnptr_glGetnColorTable;
void __glintercept_glGetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table) {
  __glintercept_fnptr_glGetnColorTable(target, format, type, bufSize, table);
  __glintercept_log(" - glGetnColorTable(target: %ld (%s), format: %ld (%s), type: %ld (%s), bufSize: %ld, table: %ld)", target, __gl_intercept_formatenum(target), format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), bufSize, table);
}

typedef void(*__ctype_glGetnColorTableARB)(GLenum, GLenum, GLenum, GLsizei, void *);
static __ctype_glGetnColorTableARB __glintercept_fnptr_glGetnColorTableARB;
void __glintercept_glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table) {
  __glintercept_fnptr_glGetnColorTableARB(target, format, type, bufSize, table);
  __glintercept_log(" - glGetnColorTableARB(target: %ld (%s), format: %ld (%s), type: %ld (%s), bufSize: %ld, table: %ld)", target, __gl_intercept_formatenum(target), format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), bufSize, table);
}

typedef void(*__ctype_glGetnCompressedTexImage)(GLenum, GLint, GLsizei, void *);
static __ctype_glGetnCompressedTexImage __glintercept_fnptr_glGetnCompressedTexImage;
void __glintercept_glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void * pixels) {
  __glintercept_fnptr_glGetnCompressedTexImage(target, lod, bufSize, pixels);
  __glintercept_log(" - glGetnCompressedTexImage(target: %ld (%s), lod: %ld, bufSize: %ld, pixels: %ld)", target, __gl_intercept_formatenum(target), lod, bufSize, pixels);
}

typedef void(*__ctype_glGetnCompressedTexImageARB)(GLenum, GLint, GLsizei, void *);
static __ctype_glGetnCompressedTexImageARB __glintercept_fnptr_glGetnCompressedTexImageARB;
void __glintercept_glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void * img) {
  __glintercept_fnptr_glGetnCompressedTexImageARB(target, lod, bufSize, img);
  __glintercept_log(" - glGetnCompressedTexImageARB(target: %ld (%s), lod: %ld, bufSize: %ld, img: %ld)", target, __gl_intercept_formatenum(target), lod, bufSize, img);
}

typedef void(*__ctype_glGetnConvolutionFilter)(GLenum, GLenum, GLenum, GLsizei, void *);
static __ctype_glGetnConvolutionFilter __glintercept_fnptr_glGetnConvolutionFilter;
void __glintercept_glGetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image) {
  __glintercept_fnptr_glGetnConvolutionFilter(target, format, type, bufSize, image);
  __glintercept_log(" - glGetnConvolutionFilter(target: %ld (%s), format: %ld (%s), type: %ld (%s), bufSize: %ld, image: %ld)", target, __gl_intercept_formatenum(target), format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), bufSize, image);
}

typedef void(*__ctype_glGetnConvolutionFilterARB)(GLenum, GLenum, GLenum, GLsizei, void *);
static __ctype_glGetnConvolutionFilterARB __glintercept_fnptr_glGetnConvolutionFilterARB;
void __glintercept_glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image) {
  __glintercept_fnptr_glGetnConvolutionFilterARB(target, format, type, bufSize, image);
  __glintercept_log(" - glGetnConvolutionFilterARB(target: %ld (%s), format: %ld (%s), type: %ld (%s), bufSize: %ld, image: %ld)", target, __gl_intercept_formatenum(target), format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), bufSize, image);
}

typedef void(*__ctype_glGetnHistogram)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
static __ctype_glGetnHistogram __glintercept_fnptr_glGetnHistogram;
void __glintercept_glGetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) {
  __glintercept_fnptr_glGetnHistogram(target, reset, format, type, bufSize, values);
  __glintercept_log(" - glGetnHistogram(target: %ld (%s), reset: %ld, format: %ld (%s), type: %ld (%s), bufSize: %ld, values: %ld)", target, __gl_intercept_formatenum(target), reset, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), bufSize, values);
}

typedef void(*__ctype_glGetnHistogramARB)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
static __ctype_glGetnHistogramARB __glintercept_fnptr_glGetnHistogramARB;
void __glintercept_glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) {
  __glintercept_fnptr_glGetnHistogramARB(target, reset, format, type, bufSize, values);
  __glintercept_log(" - glGetnHistogramARB(target: %ld (%s), reset: %ld, format: %ld (%s), type: %ld (%s), bufSize: %ld, values: %ld)", target, __gl_intercept_formatenum(target), reset, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), bufSize, values);
}

typedef void(*__ctype_glGetnMapdv)(GLenum, GLenum, GLsizei, GLdouble *);
static __ctype_glGetnMapdv __glintercept_fnptr_glGetnMapdv;
void __glintercept_glGetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v) {
  __glintercept_fnptr_glGetnMapdv(target, query, bufSize, v);
  __glintercept_log(" - glGetnMapdv(target: %ld (%s), query: %ld (%s), bufSize: %ld, v: %ld)", target, __gl_intercept_formatenum(target), query, __gl_intercept_formatenum(query), bufSize, v);
}

typedef void(*__ctype_glGetnMapdvARB)(GLenum, GLenum, GLsizei, GLdouble *);
static __ctype_glGetnMapdvARB __glintercept_fnptr_glGetnMapdvARB;
void __glintercept_glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v) {
  __glintercept_fnptr_glGetnMapdvARB(target, query, bufSize, v);
  __glintercept_log(" - glGetnMapdvARB(target: %ld (%s), query: %ld (%s), bufSize: %ld, v: %ld)", target, __gl_intercept_formatenum(target), query, __gl_intercept_formatenum(query), bufSize, v);
}

typedef void(*__ctype_glGetnMapfv)(GLenum, GLenum, GLsizei, GLfloat *);
static __ctype_glGetnMapfv __glintercept_fnptr_glGetnMapfv;
void __glintercept_glGetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v) {
  __glintercept_fnptr_glGetnMapfv(target, query, bufSize, v);
  __glintercept_log(" - glGetnMapfv(target: %ld (%s), query: %ld (%s), bufSize: %ld, v: %ld)", target, __gl_intercept_formatenum(target), query, __gl_intercept_formatenum(query), bufSize, v);
}

typedef void(*__ctype_glGetnMapfvARB)(GLenum, GLenum, GLsizei, GLfloat *);
static __ctype_glGetnMapfvARB __glintercept_fnptr_glGetnMapfvARB;
void __glintercept_glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v) {
  __glintercept_fnptr_glGetnMapfvARB(target, query, bufSize, v);
  __glintercept_log(" - glGetnMapfvARB(target: %ld (%s), query: %ld (%s), bufSize: %ld, v: %ld)", target, __gl_intercept_formatenum(target), query, __gl_intercept_formatenum(query), bufSize, v);
}

typedef void(*__ctype_glGetnMapiv)(GLenum, GLenum, GLsizei, GLint *);
static __ctype_glGetnMapiv __glintercept_fnptr_glGetnMapiv;
void __glintercept_glGetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint * v) {
  __glintercept_fnptr_glGetnMapiv(target, query, bufSize, v);
  __glintercept_log(" - glGetnMapiv(target: %ld (%s), query: %ld (%s), bufSize: %ld, v: %ld)", target, __gl_intercept_formatenum(target), query, __gl_intercept_formatenum(query), bufSize, v);
}

typedef void(*__ctype_glGetnMapivARB)(GLenum, GLenum, GLsizei, GLint *);
static __ctype_glGetnMapivARB __glintercept_fnptr_glGetnMapivARB;
void __glintercept_glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint * v) {
  __glintercept_fnptr_glGetnMapivARB(target, query, bufSize, v);
  __glintercept_log(" - glGetnMapivARB(target: %ld (%s), query: %ld (%s), bufSize: %ld, v: %ld)", target, __gl_intercept_formatenum(target), query, __gl_intercept_formatenum(query), bufSize, v);
}

typedef void(*__ctype_glGetnMinmax)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
static __ctype_glGetnMinmax __glintercept_fnptr_glGetnMinmax;
void __glintercept_glGetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) {
  __glintercept_fnptr_glGetnMinmax(target, reset, format, type, bufSize, values);
  __glintercept_log(" - glGetnMinmax(target: %ld (%s), reset: %ld, format: %ld (%s), type: %ld (%s), bufSize: %ld, values: %ld)", target, __gl_intercept_formatenum(target), reset, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), bufSize, values);
}

typedef void(*__ctype_glGetnMinmaxARB)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
static __ctype_glGetnMinmaxARB __glintercept_fnptr_glGetnMinmaxARB;
void __glintercept_glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) {
  __glintercept_fnptr_glGetnMinmaxARB(target, reset, format, type, bufSize, values);
  __glintercept_log(" - glGetnMinmaxARB(target: %ld (%s), reset: %ld, format: %ld (%s), type: %ld (%s), bufSize: %ld, values: %ld)", target, __gl_intercept_formatenum(target), reset, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), bufSize, values);
}

typedef void(*__ctype_glGetnPixelMapfv)(GLenum, GLsizei, GLfloat *);
static __ctype_glGetnPixelMapfv __glintercept_fnptr_glGetnPixelMapfv;
void __glintercept_glGetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat * values) {
  __glintercept_fnptr_glGetnPixelMapfv(map, bufSize, values);
  __glintercept_log(" - glGetnPixelMapfv(map: %ld (%s), bufSize: %ld, values: %ld)", map, __gl_intercept_formatenum(map), bufSize, values);
}

typedef void(*__ctype_glGetnPixelMapfvARB)(GLenum, GLsizei, GLfloat *);
static __ctype_glGetnPixelMapfvARB __glintercept_fnptr_glGetnPixelMapfvARB;
void __glintercept_glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat * values) {
  __glintercept_fnptr_glGetnPixelMapfvARB(map, bufSize, values);
  __glintercept_log(" - glGetnPixelMapfvARB(map: %ld (%s), bufSize: %ld, values: %ld)", map, __gl_intercept_formatenum(map), bufSize, values);
}

typedef void(*__ctype_glGetnPixelMapuiv)(GLenum, GLsizei, GLuint *);
static __ctype_glGetnPixelMapuiv __glintercept_fnptr_glGetnPixelMapuiv;
void __glintercept_glGetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint * values) {
  __glintercept_fnptr_glGetnPixelMapuiv(map, bufSize, values);
  __glintercept_log(" - glGetnPixelMapuiv(map: %ld (%s), bufSize: %ld, values: %ld)", map, __gl_intercept_formatenum(map), bufSize, values);
}

typedef void(*__ctype_glGetnPixelMapuivARB)(GLenum, GLsizei, GLuint *);
static __ctype_glGetnPixelMapuivARB __glintercept_fnptr_glGetnPixelMapuivARB;
void __glintercept_glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint * values) {
  __glintercept_fnptr_glGetnPixelMapuivARB(map, bufSize, values);
  __glintercept_log(" - glGetnPixelMapuivARB(map: %ld (%s), bufSize: %ld, values: %ld)", map, __gl_intercept_formatenum(map), bufSize, values);
}

typedef void(*__ctype_glGetnPixelMapusv)(GLenum, GLsizei, GLushort *);
static __ctype_glGetnPixelMapusv __glintercept_fnptr_glGetnPixelMapusv;
void __glintercept_glGetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort * values) {
  __glintercept_fnptr_glGetnPixelMapusv(map, bufSize, values);
  __glintercept_log(" - glGetnPixelMapusv(map: %ld (%s), bufSize: %ld, values: %ld)", map, __gl_intercept_formatenum(map), bufSize, values);
}

typedef void(*__ctype_glGetnPixelMapusvARB)(GLenum, GLsizei, GLushort *);
static __ctype_glGetnPixelMapusvARB __glintercept_fnptr_glGetnPixelMapusvARB;
void __glintercept_glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort * values) {
  __glintercept_fnptr_glGetnPixelMapusvARB(map, bufSize, values);
  __glintercept_log(" - glGetnPixelMapusvARB(map: %ld (%s), bufSize: %ld, values: %ld)", map, __gl_intercept_formatenum(map), bufSize, values);
}

typedef void(*__ctype_glGetnPolygonStipple)(GLsizei, GLubyte *);
static __ctype_glGetnPolygonStipple __glintercept_fnptr_glGetnPolygonStipple;
void __glintercept_glGetnPolygonStipple(GLsizei bufSize, GLubyte * pattern) {
  __glintercept_fnptr_glGetnPolygonStipple(bufSize, pattern);
  __glintercept_log(" - glGetnPolygonStipple(bufSize: %ld, pattern: %ld)", bufSize, pattern);
}

typedef void(*__ctype_glGetnPolygonStippleARB)(GLsizei, GLubyte *);
static __ctype_glGetnPolygonStippleARB __glintercept_fnptr_glGetnPolygonStippleARB;
void __glintercept_glGetnPolygonStippleARB(GLsizei bufSize, GLubyte * pattern) {
  __glintercept_fnptr_glGetnPolygonStippleARB(bufSize, pattern);
  __glintercept_log(" - glGetnPolygonStippleARB(bufSize: %ld, pattern: %ld)", bufSize, pattern);
}

typedef void(*__ctype_glGetnSeparableFilter)(GLenum, GLenum, GLenum, GLsizei, void *, GLsizei, void *, void *);
static __ctype_glGetnSeparableFilter __glintercept_fnptr_glGetnSeparableFilter;
void __glintercept_glGetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span) {
  __glintercept_fnptr_glGetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span);
  __glintercept_log(" - glGetnSeparableFilter(target: %ld (%s), format: %ld (%s), type: %ld (%s), rowBufSize: %ld, row: %ld, columnBufSize: %ld, column: %ld, span: %ld)", target, __gl_intercept_formatenum(target), format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), rowBufSize, row, columnBufSize, column, span);
}

typedef void(*__ctype_glGetnSeparableFilterARB)(GLenum, GLenum, GLenum, GLsizei, void *, GLsizei, void *, void *);
static __ctype_glGetnSeparableFilterARB __glintercept_fnptr_glGetnSeparableFilterARB;
void __glintercept_glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span) {
  __glintercept_fnptr_glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span);
  __glintercept_log(" - glGetnSeparableFilterARB(target: %ld (%s), format: %ld (%s), type: %ld (%s), rowBufSize: %ld, row: %ld, columnBufSize: %ld, column: %ld, span: %ld)", target, __gl_intercept_formatenum(target), format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), rowBufSize, row, columnBufSize, column, span);
}

typedef void(*__ctype_glGetnTexImage)(GLenum, GLint, GLenum, GLenum, GLsizei, void *);
static __ctype_glGetnTexImage __glintercept_fnptr_glGetnTexImage;
void __glintercept_glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels) {
  __glintercept_fnptr_glGetnTexImage(target, level, format, type, bufSize, pixels);
  __glintercept_log(" - glGetnTexImage(target: %ld (%s), level: %ld, format: %ld (%s), type: %ld (%s), bufSize: %ld, pixels: %ld)", target, __gl_intercept_formatenum(target), level, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), bufSize, pixels);
}

typedef void(*__ctype_glGetnTexImageARB)(GLenum, GLint, GLenum, GLenum, GLsizei, void *);
static __ctype_glGetnTexImageARB __glintercept_fnptr_glGetnTexImageARB;
void __glintercept_glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * img) {
  __glintercept_fnptr_glGetnTexImageARB(target, level, format, type, bufSize, img);
  __glintercept_log(" - glGetnTexImageARB(target: %ld (%s), level: %ld, format: %ld (%s), type: %ld (%s), bufSize: %ld, img: %ld)", target, __gl_intercept_formatenum(target), level, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), bufSize, img);
}

typedef void(*__ctype_glGetnUniformdv)(GLuint, GLint, GLsizei, GLdouble *);
static __ctype_glGetnUniformdv __glintercept_fnptr_glGetnUniformdv;
void __glintercept_glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble * params) {
  __glintercept_fnptr_glGetnUniformdv(program, location, bufSize, params);
  __glintercept_log(" - glGetnUniformdv(program: %ld, location: %ld, bufSize: %ld, params: %ld)", program, location, bufSize, params);
}

typedef void(*__ctype_glGetnUniformdvARB)(GLuint, GLint, GLsizei, GLdouble *);
static __ctype_glGetnUniformdvARB __glintercept_fnptr_glGetnUniformdvARB;
void __glintercept_glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble * params) {
  __glintercept_fnptr_glGetnUniformdvARB(program, location, bufSize, params);
  __glintercept_log(" - glGetnUniformdvARB(program: %ld, location: %ld, bufSize: %ld, params: %ld)", program, location, bufSize, params);
}

typedef void(*__ctype_glGetnUniformfv)(GLuint, GLint, GLsizei, GLfloat *);
static __ctype_glGetnUniformfv __glintercept_fnptr_glGetnUniformfv;
void __glintercept_glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) {
  __glintercept_fnptr_glGetnUniformfv(program, location, bufSize, params);
  __glintercept_log(" - glGetnUniformfv(program: %ld, location: %ld, bufSize: %ld, params: %ld)", program, location, bufSize, params);
}

typedef void(*__ctype_glGetnUniformfvARB)(GLuint, GLint, GLsizei, GLfloat *);
static __ctype_glGetnUniformfvARB __glintercept_fnptr_glGetnUniformfvARB;
void __glintercept_glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) {
  __glintercept_fnptr_glGetnUniformfvARB(program, location, bufSize, params);
  __glintercept_log(" - glGetnUniformfvARB(program: %ld, location: %ld, bufSize: %ld, params: %ld)", program, location, bufSize, params);
}

typedef void(*__ctype_glGetnUniformfvEXT)(GLuint, GLint, GLsizei, GLfloat *);
static __ctype_glGetnUniformfvEXT __glintercept_fnptr_glGetnUniformfvEXT;
void __glintercept_glGetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) {
  __glintercept_fnptr_glGetnUniformfvEXT(program, location, bufSize, params);
  __glintercept_log(" - glGetnUniformfvEXT(program: %ld, location: %ld, bufSize: %ld, params: %ld)", program, location, bufSize, params);
}

typedef void(*__ctype_glGetnUniformfvKHR)(GLuint, GLint, GLsizei, GLfloat *);
static __ctype_glGetnUniformfvKHR __glintercept_fnptr_glGetnUniformfvKHR;
void __glintercept_glGetnUniformfvKHR(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) {
  __glintercept_fnptr_glGetnUniformfvKHR(program, location, bufSize, params);
  __glintercept_log(" - glGetnUniformfvKHR(program: %ld, location: %ld, bufSize: %ld, params: %ld)", program, location, bufSize, params);
}

typedef void(*__ctype_glGetnUniformi64vARB)(GLuint, GLint, GLsizei, GLint64 *);
static __ctype_glGetnUniformi64vARB __glintercept_fnptr_glGetnUniformi64vARB;
void __glintercept_glGetnUniformi64vARB(GLuint program, GLint location, GLsizei bufSize, GLint64 * params) {
  __glintercept_fnptr_glGetnUniformi64vARB(program, location, bufSize, params);
  __glintercept_log(" - glGetnUniformi64vARB(program: %ld, location: %ld, bufSize: %ld, params: %ld)", program, location, bufSize, params);
}

typedef void(*__ctype_glGetnUniformiv)(GLuint, GLint, GLsizei, GLint *);
static __ctype_glGetnUniformiv __glintercept_fnptr_glGetnUniformiv;
void __glintercept_glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint * params) {
  __glintercept_fnptr_glGetnUniformiv(program, location, bufSize, params);
  __glintercept_log(" - glGetnUniformiv(program: %ld, location: %ld, bufSize: %ld, params: %ld)", program, location, bufSize, params);
}

typedef void(*__ctype_glGetnUniformivARB)(GLuint, GLint, GLsizei, GLint *);
static __ctype_glGetnUniformivARB __glintercept_fnptr_glGetnUniformivARB;
void __glintercept_glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint * params) {
  __glintercept_fnptr_glGetnUniformivARB(program, location, bufSize, params);
  __glintercept_log(" - glGetnUniformivARB(program: %ld, location: %ld, bufSize: %ld, params: %ld)", program, location, bufSize, params);
}

typedef void(*__ctype_glGetnUniformivEXT)(GLuint, GLint, GLsizei, GLint *);
static __ctype_glGetnUniformivEXT __glintercept_fnptr_glGetnUniformivEXT;
void __glintercept_glGetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint * params) {
  __glintercept_fnptr_glGetnUniformivEXT(program, location, bufSize, params);
  __glintercept_log(" - glGetnUniformivEXT(program: %ld, location: %ld, bufSize: %ld, params: %ld)", program, location, bufSize, params);
}

typedef void(*__ctype_glGetnUniformivKHR)(GLuint, GLint, GLsizei, GLint *);
static __ctype_glGetnUniformivKHR __glintercept_fnptr_glGetnUniformivKHR;
void __glintercept_glGetnUniformivKHR(GLuint program, GLint location, GLsizei bufSize, GLint * params) {
  __glintercept_fnptr_glGetnUniformivKHR(program, location, bufSize, params);
  __glintercept_log(" - glGetnUniformivKHR(program: %ld, location: %ld, bufSize: %ld, params: %ld)", program, location, bufSize, params);
}

typedef void(*__ctype_glGetnUniformui64vARB)(GLuint, GLint, GLsizei, GLuint64 *);
static __ctype_glGetnUniformui64vARB __glintercept_fnptr_glGetnUniformui64vARB;
void __glintercept_glGetnUniformui64vARB(GLuint program, GLint location, GLsizei bufSize, GLuint64 * params) {
  __glintercept_fnptr_glGetnUniformui64vARB(program, location, bufSize, params);
  __glintercept_log(" - glGetnUniformui64vARB(program: %ld, location: %ld, bufSize: %ld, params: %ld)", program, location, bufSize, params);
}

typedef void(*__ctype_glGetnUniformuiv)(GLuint, GLint, GLsizei, GLuint *);
static __ctype_glGetnUniformuiv __glintercept_fnptr_glGetnUniformuiv;
void __glintercept_glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint * params) {
  __glintercept_fnptr_glGetnUniformuiv(program, location, bufSize, params);
  __glintercept_log(" - glGetnUniformuiv(program: %ld, location: %ld, bufSize: %ld, params: %ld)", program, location, bufSize, params);
}

typedef void(*__ctype_glGetnUniformuivARB)(GLuint, GLint, GLsizei, GLuint *);
static __ctype_glGetnUniformuivARB __glintercept_fnptr_glGetnUniformuivARB;
void __glintercept_glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint * params) {
  __glintercept_fnptr_glGetnUniformuivARB(program, location, bufSize, params);
  __glintercept_log(" - glGetnUniformuivARB(program: %ld, location: %ld, bufSize: %ld, params: %ld)", program, location, bufSize, params);
}

typedef void(*__ctype_glGetnUniformuivKHR)(GLuint, GLint, GLsizei, GLuint *);
static __ctype_glGetnUniformuivKHR __glintercept_fnptr_glGetnUniformuivKHR;
void __glintercept_glGetnUniformuivKHR(GLuint program, GLint location, GLsizei bufSize, GLuint * params) {
  __glintercept_fnptr_glGetnUniformuivKHR(program, location, bufSize, params);
  __glintercept_log(" - glGetnUniformuivKHR(program: %ld, location: %ld, bufSize: %ld, params: %ld)", program, location, bufSize, params);
}

typedef void(*__ctype_glGlobalAlphaFactorbSUN)(GLbyte);
static __ctype_glGlobalAlphaFactorbSUN __glintercept_fnptr_glGlobalAlphaFactorbSUN;
void __glintercept_glGlobalAlphaFactorbSUN(GLbyte factor) {
  __glintercept_fnptr_glGlobalAlphaFactorbSUN(factor);
  __glintercept_log(" - glGlobalAlphaFactorbSUN(factor: %ld)", factor);
}

typedef void(*__ctype_glGlobalAlphaFactordSUN)(GLdouble);
static __ctype_glGlobalAlphaFactordSUN __glintercept_fnptr_glGlobalAlphaFactordSUN;
void __glintercept_glGlobalAlphaFactordSUN(GLdouble factor) {
  __glintercept_fnptr_glGlobalAlphaFactordSUN(factor);
  __glintercept_log(" - glGlobalAlphaFactordSUN(factor: %ld)", factor);
}

typedef void(*__ctype_glGlobalAlphaFactorfSUN)(GLfloat);
static __ctype_glGlobalAlphaFactorfSUN __glintercept_fnptr_glGlobalAlphaFactorfSUN;
void __glintercept_glGlobalAlphaFactorfSUN(GLfloat factor) {
  __glintercept_fnptr_glGlobalAlphaFactorfSUN(factor);
  __glintercept_log(" - glGlobalAlphaFactorfSUN(factor: %ld)", factor);
}

typedef void(*__ctype_glGlobalAlphaFactoriSUN)(GLint);
static __ctype_glGlobalAlphaFactoriSUN __glintercept_fnptr_glGlobalAlphaFactoriSUN;
void __glintercept_glGlobalAlphaFactoriSUN(GLint factor) {
  __glintercept_fnptr_glGlobalAlphaFactoriSUN(factor);
  __glintercept_log(" - glGlobalAlphaFactoriSUN(factor: %ld)", factor);
}

typedef void(*__ctype_glGlobalAlphaFactorsSUN)(GLshort);
static __ctype_glGlobalAlphaFactorsSUN __glintercept_fnptr_glGlobalAlphaFactorsSUN;
void __glintercept_glGlobalAlphaFactorsSUN(GLshort factor) {
  __glintercept_fnptr_glGlobalAlphaFactorsSUN(factor);
  __glintercept_log(" - glGlobalAlphaFactorsSUN(factor: %ld)", factor);
}

typedef void(*__ctype_glGlobalAlphaFactorubSUN)(GLubyte);
static __ctype_glGlobalAlphaFactorubSUN __glintercept_fnptr_glGlobalAlphaFactorubSUN;
void __glintercept_glGlobalAlphaFactorubSUN(GLubyte factor) {
  __glintercept_fnptr_glGlobalAlphaFactorubSUN(factor);
  __glintercept_log(" - glGlobalAlphaFactorubSUN(factor: %ld)", factor);
}

typedef void(*__ctype_glGlobalAlphaFactoruiSUN)(GLuint);
static __ctype_glGlobalAlphaFactoruiSUN __glintercept_fnptr_glGlobalAlphaFactoruiSUN;
void __glintercept_glGlobalAlphaFactoruiSUN(GLuint factor) {
  __glintercept_fnptr_glGlobalAlphaFactoruiSUN(factor);
  __glintercept_log(" - glGlobalAlphaFactoruiSUN(factor: %ld)", factor);
}

typedef void(*__ctype_glGlobalAlphaFactorusSUN)(GLushort);
static __ctype_glGlobalAlphaFactorusSUN __glintercept_fnptr_glGlobalAlphaFactorusSUN;
void __glintercept_glGlobalAlphaFactorusSUN(GLushort factor) {
  __glintercept_fnptr_glGlobalAlphaFactorusSUN(factor);
  __glintercept_log(" - glGlobalAlphaFactorusSUN(factor: %ld)", factor);
}

typedef void(*__ctype_glHint)(GLenum, GLenum);
static __ctype_glHint __glintercept_fnptr_glHint;
void __glintercept_glHint(GLenum target, GLenum mode) {
  __glintercept_fnptr_glHint(target, mode);
  __glintercept_log(" - glHint(target: %ld (%s), mode: %ld (%s))", target, __gl_intercept_formatenum(target), mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glHintPGI)(GLenum, GLint);
static __ctype_glHintPGI __glintercept_fnptr_glHintPGI;
void __glintercept_glHintPGI(GLenum target, GLint mode) {
  __glintercept_fnptr_glHintPGI(target, mode);
  __glintercept_log(" - glHintPGI(target: %ld (%s), mode: %ld)", target, __gl_intercept_formatenum(target), mode);
}

typedef void(*__ctype_glHistogram)(GLenum, GLsizei, GLenum, GLboolean);
static __ctype_glHistogram __glintercept_fnptr_glHistogram;
void __glintercept_glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) {
  __glintercept_fnptr_glHistogram(target, width, internalformat, sink);
  __glintercept_log(" - glHistogram(target: %ld (%s), width: %ld, internalformat: %ld (%s), sink: %ld)", target, __gl_intercept_formatenum(target), width, internalformat, __gl_intercept_formatenum(internalformat), sink);
}

typedef void(*__ctype_glHistogramEXT)(GLenum, GLsizei, GLenum, GLboolean);
static __ctype_glHistogramEXT __glintercept_fnptr_glHistogramEXT;
void __glintercept_glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) {
  __glintercept_fnptr_glHistogramEXT(target, width, internalformat, sink);
  __glintercept_log(" - glHistogramEXT(target: %ld (%s), width: %ld, internalformat: %ld (%s), sink: %ld)", target, __gl_intercept_formatenum(target), width, internalformat, __gl_intercept_formatenum(internalformat), sink);
}

typedef void(*__ctype_glIglooInterfaceSGIX)(GLenum, const void *);
static __ctype_glIglooInterfaceSGIX __glintercept_fnptr_glIglooInterfaceSGIX;
void __glintercept_glIglooInterfaceSGIX(GLenum pname, const void * params) {
  __glintercept_fnptr_glIglooInterfaceSGIX(pname, params);
  __glintercept_log(" - glIglooInterfaceSGIX(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glImageTransformParameterfHP)(GLenum, GLenum, GLfloat);
static __ctype_glImageTransformParameterfHP __glintercept_fnptr_glImageTransformParameterfHP;
void __glintercept_glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param) {
  __glintercept_fnptr_glImageTransformParameterfHP(target, pname, param);
  __glintercept_log(" - glImageTransformParameterfHP(target: %ld (%s), pname: %ld (%s), param: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glImageTransformParameterfvHP)(GLenum, GLenum, const GLfloat *);
static __ctype_glImageTransformParameterfvHP __glintercept_fnptr_glImageTransformParameterfvHP;
void __glintercept_glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glImageTransformParameterfvHP(target, pname, params);
  __glintercept_log(" - glImageTransformParameterfvHP(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glImageTransformParameteriHP)(GLenum, GLenum, GLint);
static __ctype_glImageTransformParameteriHP __glintercept_fnptr_glImageTransformParameteriHP;
void __glintercept_glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param) {
  __glintercept_fnptr_glImageTransformParameteriHP(target, pname, param);
  __glintercept_log(" - glImageTransformParameteriHP(target: %ld (%s), pname: %ld (%s), param: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glImageTransformParameterivHP)(GLenum, GLenum, const GLint *);
static __ctype_glImageTransformParameterivHP __glintercept_fnptr_glImageTransformParameterivHP;
void __glintercept_glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glImageTransformParameterivHP(target, pname, params);
  __glintercept_log(" - glImageTransformParameterivHP(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glImportMemoryFdEXT)(GLuint, GLuint64, GLenum, GLint);
static __ctype_glImportMemoryFdEXT __glintercept_fnptr_glImportMemoryFdEXT;
void __glintercept_glImportMemoryFdEXT(GLuint memory, GLuint64 size, GLenum handleType, GLint fd) {
  __glintercept_fnptr_glImportMemoryFdEXT(memory, size, handleType, fd);
  __glintercept_log(" - glImportMemoryFdEXT(memory: %ld, size: %ld, handleType: %ld (%s), fd: %ld)", memory, size, handleType, __gl_intercept_formatenum(handleType), fd);
}

typedef void(*__ctype_glImportMemoryWin32HandleEXT)(GLuint, GLuint64, GLenum, void *);
static __ctype_glImportMemoryWin32HandleEXT __glintercept_fnptr_glImportMemoryWin32HandleEXT;
void __glintercept_glImportMemoryWin32HandleEXT(GLuint memory, GLuint64 size, GLenum handleType, void * handle) {
  __glintercept_fnptr_glImportMemoryWin32HandleEXT(memory, size, handleType, handle);
  __glintercept_log(" - glImportMemoryWin32HandleEXT(memory: %ld, size: %ld, handleType: %ld (%s), handle: %ld)", memory, size, handleType, __gl_intercept_formatenum(handleType), handle);
}

typedef void(*__ctype_glImportMemoryWin32NameEXT)(GLuint, GLuint64, GLenum, const void *);
static __ctype_glImportMemoryWin32NameEXT __glintercept_fnptr_glImportMemoryWin32NameEXT;
void __glintercept_glImportMemoryWin32NameEXT(GLuint memory, GLuint64 size, GLenum handleType, const void * name) {
  __glintercept_fnptr_glImportMemoryWin32NameEXT(memory, size, handleType, name);
  __glintercept_log(" - glImportMemoryWin32NameEXT(memory: %ld, size: %ld, handleType: %ld (%s), name: %ld)", memory, size, handleType, __gl_intercept_formatenum(handleType), name);
}

typedef void(*__ctype_glImportSemaphoreFdEXT)(GLuint, GLenum, GLint);
static __ctype_glImportSemaphoreFdEXT __glintercept_fnptr_glImportSemaphoreFdEXT;
void __glintercept_glImportSemaphoreFdEXT(GLuint semaphore, GLenum handleType, GLint fd) {
  __glintercept_fnptr_glImportSemaphoreFdEXT(semaphore, handleType, fd);
  __glintercept_log(" - glImportSemaphoreFdEXT(semaphore: %ld, handleType: %ld (%s), fd: %ld)", semaphore, handleType, __gl_intercept_formatenum(handleType), fd);
}

typedef void(*__ctype_glImportSemaphoreWin32HandleEXT)(GLuint, GLenum, void *);
static __ctype_glImportSemaphoreWin32HandleEXT __glintercept_fnptr_glImportSemaphoreWin32HandleEXT;
void __glintercept_glImportSemaphoreWin32HandleEXT(GLuint semaphore, GLenum handleType, void * handle) {
  __glintercept_fnptr_glImportSemaphoreWin32HandleEXT(semaphore, handleType, handle);
  __glintercept_log(" - glImportSemaphoreWin32HandleEXT(semaphore: %ld, handleType: %ld (%s), handle: %ld)", semaphore, handleType, __gl_intercept_formatenum(handleType), handle);
}

typedef void(*__ctype_glImportSemaphoreWin32NameEXT)(GLuint, GLenum, const void *);
static __ctype_glImportSemaphoreWin32NameEXT __glintercept_fnptr_glImportSemaphoreWin32NameEXT;
void __glintercept_glImportSemaphoreWin32NameEXT(GLuint semaphore, GLenum handleType, const void * name) {
  __glintercept_fnptr_glImportSemaphoreWin32NameEXT(semaphore, handleType, name);
  __glintercept_log(" - glImportSemaphoreWin32NameEXT(semaphore: %ld, handleType: %ld (%s), name: %ld)", semaphore, handleType, __gl_intercept_formatenum(handleType), name);
}

typedef GLsync(*__ctype_glImportSyncEXT)(GLenum, GLintptr, GLbitfield);
static __ctype_glImportSyncEXT __glintercept_fnptr_glImportSyncEXT;
GLsync __glintercept_glImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags) {
  GLsync __ret = __glintercept_fnptr_glImportSyncEXT(external_sync_type, external_sync, flags);
  __glintercept_log(" - glImportSyncEXT(external_sync_type: %ld (%s), external_sync: %ld, flags: %ld) -> %ld", external_sync_type, __gl_intercept_formatenum(external_sync_type), external_sync, flags, __ret);
  return __ret;
}

typedef void(*__ctype_glIndexFormatNV)(GLenum, GLsizei);
static __ctype_glIndexFormatNV __glintercept_fnptr_glIndexFormatNV;
void __glintercept_glIndexFormatNV(GLenum type, GLsizei stride) {
  __glintercept_fnptr_glIndexFormatNV(type, stride);
  __glintercept_log(" - glIndexFormatNV(type: %ld (%s), stride: %ld)", type, __gl_intercept_formatenum(type), stride);
}

typedef void(*__ctype_glIndexFuncEXT)(GLenum, GLclampf);
static __ctype_glIndexFuncEXT __glintercept_fnptr_glIndexFuncEXT;
void __glintercept_glIndexFuncEXT(GLenum func, GLclampf ref) {
  __glintercept_fnptr_glIndexFuncEXT(func, ref);
  __glintercept_log(" - glIndexFuncEXT(func: %ld (%s), ref: %ld)", func, __gl_intercept_formatenum(func), ref);
}

typedef void(*__ctype_glIndexMask)(GLuint);
static __ctype_glIndexMask __glintercept_fnptr_glIndexMask;
void __glintercept_glIndexMask(GLuint mask) {
  __glintercept_fnptr_glIndexMask(mask);
  __glintercept_log(" - glIndexMask(mask: %ld)", mask);
}

typedef void(*__ctype_glIndexMaterialEXT)(GLenum, GLenum);
static __ctype_glIndexMaterialEXT __glintercept_fnptr_glIndexMaterialEXT;
void __glintercept_glIndexMaterialEXT(GLenum face, GLenum mode) {
  __glintercept_fnptr_glIndexMaterialEXT(face, mode);
  __glintercept_log(" - glIndexMaterialEXT(face: %ld (%s), mode: %ld (%s))", face, __gl_intercept_formatenum(face), mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glIndexPointer)(GLenum, GLsizei, const void *);
static __ctype_glIndexPointer __glintercept_fnptr_glIndexPointer;
void __glintercept_glIndexPointer(GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glIndexPointer(type, stride, pointer);
  __glintercept_log(" - glIndexPointer(type: %ld (%s), stride: %ld, pointer: %ld)", type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glIndexPointerEXT)(GLenum, GLsizei, GLsizei, const void *);
static __ctype_glIndexPointerEXT __glintercept_fnptr_glIndexPointerEXT;
void __glintercept_glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void * pointer) {
  __glintercept_fnptr_glIndexPointerEXT(type, stride, count, pointer);
  __glintercept_log(" - glIndexPointerEXT(type: %ld (%s), stride: %ld, count: %ld, pointer: %ld)", type, __gl_intercept_formatenum(type), stride, count, pointer);
}

typedef void(*__ctype_glIndexPointerListIBM)(GLenum, GLint, const void **, GLint);
static __ctype_glIndexPointerListIBM __glintercept_fnptr_glIndexPointerListIBM;
void __glintercept_glIndexPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride) {
  __glintercept_fnptr_glIndexPointerListIBM(type, stride, pointer, ptrstride);
  __glintercept_log(" - glIndexPointerListIBM(type: %ld (%s), stride: %ld, pointer: %ld, ptrstride: %ld)", type, __gl_intercept_formatenum(type), stride, pointer, ptrstride);
}

typedef void(*__ctype_glIndexd)(GLdouble);
static __ctype_glIndexd __glintercept_fnptr_glIndexd;
void __glintercept_glIndexd(GLdouble c) {
  __glintercept_fnptr_glIndexd(c);
  __glintercept_log(" - glIndexd(c: %ld)", c);
}

typedef void(*__ctype_glIndexdv)(const GLdouble *);
static __ctype_glIndexdv __glintercept_fnptr_glIndexdv;
void __glintercept_glIndexdv(const GLdouble * c) {
  __glintercept_fnptr_glIndexdv(c);
  __glintercept_log(" - glIndexdv(c: %ld)", c);
}

typedef void(*__ctype_glIndexf)(GLfloat);
static __ctype_glIndexf __glintercept_fnptr_glIndexf;
void __glintercept_glIndexf(GLfloat c) {
  __glintercept_fnptr_glIndexf(c);
  __glintercept_log(" - glIndexf(c: %ld)", c);
}

typedef void(*__ctype_glIndexfv)(const GLfloat *);
static __ctype_glIndexfv __glintercept_fnptr_glIndexfv;
void __glintercept_glIndexfv(const GLfloat * c) {
  __glintercept_fnptr_glIndexfv(c);
  __glintercept_log(" - glIndexfv(c: %ld)", c);
}

typedef void(*__ctype_glIndexi)(GLint);
static __ctype_glIndexi __glintercept_fnptr_glIndexi;
void __glintercept_glIndexi(GLint c) {
  __glintercept_fnptr_glIndexi(c);
  __glintercept_log(" - glIndexi(c: %ld)", c);
}

typedef void(*__ctype_glIndexiv)(const GLint *);
static __ctype_glIndexiv __glintercept_fnptr_glIndexiv;
void __glintercept_glIndexiv(const GLint * c) {
  __glintercept_fnptr_glIndexiv(c);
  __glintercept_log(" - glIndexiv(c: %ld)", c);
}

typedef void(*__ctype_glIndexs)(GLshort);
static __ctype_glIndexs __glintercept_fnptr_glIndexs;
void __glintercept_glIndexs(GLshort c) {
  __glintercept_fnptr_glIndexs(c);
  __glintercept_log(" - glIndexs(c: %ld)", c);
}

typedef void(*__ctype_glIndexsv)(const GLshort *);
static __ctype_glIndexsv __glintercept_fnptr_glIndexsv;
void __glintercept_glIndexsv(const GLshort * c) {
  __glintercept_fnptr_glIndexsv(c);
  __glintercept_log(" - glIndexsv(c: %ld)", c);
}

typedef void(*__ctype_glIndexub)(GLubyte);
static __ctype_glIndexub __glintercept_fnptr_glIndexub;
void __glintercept_glIndexub(GLubyte c) {
  __glintercept_fnptr_glIndexub(c);
  __glintercept_log(" - glIndexub(c: %ld)", c);
}

typedef void(*__ctype_glIndexubv)(const GLubyte *);
static __ctype_glIndexubv __glintercept_fnptr_glIndexubv;
void __glintercept_glIndexubv(const GLubyte * c) {
  __glintercept_fnptr_glIndexubv(c);
  __glintercept_log(" - glIndexubv(c: %s)", c);
}

typedef void(*__ctype_glIndexxOES)(GLfixed);
static __ctype_glIndexxOES __glintercept_fnptr_glIndexxOES;
void __glintercept_glIndexxOES(GLfixed component) {
  __glintercept_fnptr_glIndexxOES(component);
  __glintercept_log(" - glIndexxOES(component: %ld)", component);
}

typedef void(*__ctype_glIndexxvOES)(const GLfixed *);
static __ctype_glIndexxvOES __glintercept_fnptr_glIndexxvOES;
void __glintercept_glIndexxvOES(const GLfixed * component) {
  __glintercept_fnptr_glIndexxvOES(component);
  __glintercept_log(" - glIndexxvOES(component: %ld)", component);
}

typedef void(*__ctype_glInitNames)();
static __ctype_glInitNames __glintercept_fnptr_glInitNames;
void __glintercept_glInitNames() {
  __glintercept_fnptr_glInitNames();
  __glintercept_log(" - glInitNames()");
}

typedef void(*__ctype_glInsertComponentEXT)(GLuint, GLuint, GLuint);
static __ctype_glInsertComponentEXT __glintercept_fnptr_glInsertComponentEXT;
void __glintercept_glInsertComponentEXT(GLuint res, GLuint src, GLuint num) {
  __glintercept_fnptr_glInsertComponentEXT(res, src, num);
  __glintercept_log(" - glInsertComponentEXT(res: %ld, src: %ld, num: %ld)", res, src, num);
}

typedef void(*__ctype_glInsertEventMarkerEXT)(GLsizei, const GLchar *);
static __ctype_glInsertEventMarkerEXT __glintercept_fnptr_glInsertEventMarkerEXT;
void __glintercept_glInsertEventMarkerEXT(GLsizei length, const GLchar * marker) {
  __glintercept_fnptr_glInsertEventMarkerEXT(length, marker);
  __glintercept_log(" - glInsertEventMarkerEXT(length: %ld, marker: %ld)", length, marker);
}

typedef void(*__ctype_glInstrumentsBufferSGIX)(GLsizei, GLint *);
static __ctype_glInstrumentsBufferSGIX __glintercept_fnptr_glInstrumentsBufferSGIX;
void __glintercept_glInstrumentsBufferSGIX(GLsizei size, GLint * buffer) {
  __glintercept_fnptr_glInstrumentsBufferSGIX(size, buffer);
  __glintercept_log(" - glInstrumentsBufferSGIX(size: %ld, buffer: %ld)", size, buffer);
}

typedef void(*__ctype_glInterleavedArrays)(GLenum, GLsizei, const void *);
static __ctype_glInterleavedArrays __glintercept_fnptr_glInterleavedArrays;
void __glintercept_glInterleavedArrays(GLenum format, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glInterleavedArrays(format, stride, pointer);
  __glintercept_log(" - glInterleavedArrays(format: %ld (%s), stride: %ld, pointer: %ld)", format, __gl_intercept_formatenum(format), stride, pointer);
}

typedef void(*__ctype_glInterpolatePathsNV)(GLuint, GLuint, GLuint, GLfloat);
static __ctype_glInterpolatePathsNV __glintercept_fnptr_glInterpolatePathsNV;
void __glintercept_glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) {
  __glintercept_fnptr_glInterpolatePathsNV(resultPath, pathA, pathB, weight);
  __glintercept_log(" - glInterpolatePathsNV(resultPath: %ld, pathA: %ld, pathB: %ld, weight: %ld)", resultPath, pathA, pathB, weight);
}

typedef void(*__ctype_glInvalidateBufferData)(GLuint);
static __ctype_glInvalidateBufferData __glintercept_fnptr_glInvalidateBufferData;
void __glintercept_glInvalidateBufferData(GLuint buffer) {
  __glintercept_fnptr_glInvalidateBufferData(buffer);
  __glintercept_log(" - glInvalidateBufferData(buffer: %ld)", buffer);
}

typedef void(*__ctype_glInvalidateBufferSubData)(GLuint, GLintptr, GLsizeiptr);
static __ctype_glInvalidateBufferSubData __glintercept_fnptr_glInvalidateBufferSubData;
void __glintercept_glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length) {
  __glintercept_fnptr_glInvalidateBufferSubData(buffer, offset, length);
  __glintercept_log(" - glInvalidateBufferSubData(buffer: %ld, offset: %ld, length: %ld)", buffer, offset, length);
}

typedef void(*__ctype_glInvalidateFramebuffer)(GLenum, GLsizei, const GLenum *);
static __ctype_glInvalidateFramebuffer __glintercept_fnptr_glInvalidateFramebuffer;
void __glintercept_glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments) {
  __glintercept_fnptr_glInvalidateFramebuffer(target, numAttachments, attachments);
  __glintercept_log(" - glInvalidateFramebuffer(target: %ld (%s), numAttachments: %ld, attachments: %ld)", target, __gl_intercept_formatenum(target), numAttachments, attachments);
}

typedef void(*__ctype_glInvalidateNamedFramebufferData)(GLuint, GLsizei, const GLenum *);
static __ctype_glInvalidateNamedFramebufferData __glintercept_fnptr_glInvalidateNamedFramebufferData;
void __glintercept_glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments) {
  __glintercept_fnptr_glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments);
  __glintercept_log(" - glInvalidateNamedFramebufferData(framebuffer: %ld, numAttachments: %ld, attachments: %ld)", framebuffer, numAttachments, attachments);
}

typedef void(*__ctype_glInvalidateNamedFramebufferSubData)(GLuint, GLsizei, const GLenum *, GLint, GLint, GLsizei, GLsizei);
static __ctype_glInvalidateNamedFramebufferSubData __glintercept_fnptr_glInvalidateNamedFramebufferSubData;
void __glintercept_glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height);
  __glintercept_log(" - glInvalidateNamedFramebufferSubData(framebuffer: %ld, numAttachments: %ld, attachments: %ld, x: %ld, y: %ld, width: %ld, height: %ld)", framebuffer, numAttachments, attachments, x, y, width, height);
}

typedef void(*__ctype_glInvalidateSubFramebuffer)(GLenum, GLsizei, const GLenum *, GLint, GLint, GLsizei, GLsizei);
static __ctype_glInvalidateSubFramebuffer __glintercept_fnptr_glInvalidateSubFramebuffer;
void __glintercept_glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
  __glintercept_log(" - glInvalidateSubFramebuffer(target: %ld (%s), numAttachments: %ld, attachments: %ld, x: %ld, y: %ld, width: %ld, height: %ld)", target, __gl_intercept_formatenum(target), numAttachments, attachments, x, y, width, height);
}

typedef void(*__ctype_glInvalidateTexImage)(GLuint, GLint);
static __ctype_glInvalidateTexImage __glintercept_fnptr_glInvalidateTexImage;
void __glintercept_glInvalidateTexImage(GLuint texture, GLint level) {
  __glintercept_fnptr_glInvalidateTexImage(texture, level);
  __glintercept_log(" - glInvalidateTexImage(texture: %ld, level: %ld)", texture, level);
}

typedef void(*__ctype_glInvalidateTexSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
static __ctype_glInvalidateTexSubImage __glintercept_fnptr_glInvalidateTexSubImage;
void __glintercept_glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) {
  __glintercept_fnptr_glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
  __glintercept_log(" - glInvalidateTexSubImage(texture: %ld, level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld)", texture, level, xoffset, yoffset, zoffset, width, height, depth);
}

typedef GLboolean(*__ctype_glIsAsyncMarkerSGIX)(GLuint);
static __ctype_glIsAsyncMarkerSGIX __glintercept_fnptr_glIsAsyncMarkerSGIX;
GLboolean __glintercept_glIsAsyncMarkerSGIX(GLuint marker) {
  GLboolean __ret = __glintercept_fnptr_glIsAsyncMarkerSGIX(marker);
  __glintercept_log(" - glIsAsyncMarkerSGIX(marker: %ld) -> %ld", marker, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsBuffer)(GLuint);
static __ctype_glIsBuffer __glintercept_fnptr_glIsBuffer;
GLboolean __glintercept_glIsBuffer(GLuint buffer) {
  GLboolean __ret = __glintercept_fnptr_glIsBuffer(buffer);
  __glintercept_log(" - glIsBuffer(buffer: %ld) -> %ld", buffer, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsBufferARB)(GLuint);
static __ctype_glIsBufferARB __glintercept_fnptr_glIsBufferARB;
GLboolean __glintercept_glIsBufferARB(GLuint buffer) {
  GLboolean __ret = __glintercept_fnptr_glIsBufferARB(buffer);
  __glintercept_log(" - glIsBufferARB(buffer: %ld) -> %ld", buffer, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsBufferResidentNV)(GLenum);
static __ctype_glIsBufferResidentNV __glintercept_fnptr_glIsBufferResidentNV;
GLboolean __glintercept_glIsBufferResidentNV(GLenum target) {
  GLboolean __ret = __glintercept_fnptr_glIsBufferResidentNV(target);
  __glintercept_log(" - glIsBufferResidentNV(target: %ld (%s)) -> %ld", target, __gl_intercept_formatenum(target), __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsCommandListNV)(GLuint);
static __ctype_glIsCommandListNV __glintercept_fnptr_glIsCommandListNV;
GLboolean __glintercept_glIsCommandListNV(GLuint list) {
  GLboolean __ret = __glintercept_fnptr_glIsCommandListNV(list);
  __glintercept_log(" - glIsCommandListNV(list: %ld) -> %ld", list, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsEnabled)(GLenum);
static __ctype_glIsEnabled __glintercept_fnptr_glIsEnabled;
GLboolean __glintercept_glIsEnabled(GLenum cap) {
  GLboolean __ret = __glintercept_fnptr_glIsEnabled(cap);
  __glintercept_log(" - glIsEnabled(cap: %ld (%s)) -> %ld", cap, __gl_intercept_formatenum(cap), __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsEnabledIndexedEXT)(GLenum, GLuint);
static __ctype_glIsEnabledIndexedEXT __glintercept_fnptr_glIsEnabledIndexedEXT;
GLboolean __glintercept_glIsEnabledIndexedEXT(GLenum target, GLuint index) {
  GLboolean __ret = __glintercept_fnptr_glIsEnabledIndexedEXT(target, index);
  __glintercept_log(" - glIsEnabledIndexedEXT(target: %ld (%s), index: %ld) -> %ld", target, __gl_intercept_formatenum(target), index, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsEnabledi)(GLenum, GLuint);
static __ctype_glIsEnabledi __glintercept_fnptr_glIsEnabledi;
GLboolean __glintercept_glIsEnabledi(GLenum target, GLuint index) {
  GLboolean __ret = __glintercept_fnptr_glIsEnabledi(target, index);
  __glintercept_log(" - glIsEnabledi(target: %ld (%s), index: %ld) -> %ld", target, __gl_intercept_formatenum(target), index, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsEnablediEXT)(GLenum, GLuint);
static __ctype_glIsEnablediEXT __glintercept_fnptr_glIsEnablediEXT;
GLboolean __glintercept_glIsEnablediEXT(GLenum target, GLuint index) {
  GLboolean __ret = __glintercept_fnptr_glIsEnablediEXT(target, index);
  __glintercept_log(" - glIsEnablediEXT(target: %ld (%s), index: %ld) -> %ld", target, __gl_intercept_formatenum(target), index, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsEnablediNV)(GLenum, GLuint);
static __ctype_glIsEnablediNV __glintercept_fnptr_glIsEnablediNV;
GLboolean __glintercept_glIsEnablediNV(GLenum target, GLuint index) {
  GLboolean __ret = __glintercept_fnptr_glIsEnablediNV(target, index);
  __glintercept_log(" - glIsEnablediNV(target: %ld (%s), index: %ld) -> %ld", target, __gl_intercept_formatenum(target), index, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsEnablediOES)(GLenum, GLuint);
static __ctype_glIsEnablediOES __glintercept_fnptr_glIsEnablediOES;
GLboolean __glintercept_glIsEnablediOES(GLenum target, GLuint index) {
  GLboolean __ret = __glintercept_fnptr_glIsEnablediOES(target, index);
  __glintercept_log(" - glIsEnablediOES(target: %ld (%s), index: %ld) -> %ld", target, __gl_intercept_formatenum(target), index, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsFenceAPPLE)(GLuint);
static __ctype_glIsFenceAPPLE __glintercept_fnptr_glIsFenceAPPLE;
GLboolean __glintercept_glIsFenceAPPLE(GLuint fence) {
  GLboolean __ret = __glintercept_fnptr_glIsFenceAPPLE(fence);
  __glintercept_log(" - glIsFenceAPPLE(fence: %ld) -> %ld", fence, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsFenceNV)(GLuint);
static __ctype_glIsFenceNV __glintercept_fnptr_glIsFenceNV;
GLboolean __glintercept_glIsFenceNV(GLuint fence) {
  GLboolean __ret = __glintercept_fnptr_glIsFenceNV(fence);
  __glintercept_log(" - glIsFenceNV(fence: %ld) -> %ld", fence, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsFramebuffer)(GLuint);
static __ctype_glIsFramebuffer __glintercept_fnptr_glIsFramebuffer;
GLboolean __glintercept_glIsFramebuffer(GLuint framebuffer) {
  GLboolean __ret = __glintercept_fnptr_glIsFramebuffer(framebuffer);
  __glintercept_log(" - glIsFramebuffer(framebuffer: %ld) -> %ld", framebuffer, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsFramebufferEXT)(GLuint);
static __ctype_glIsFramebufferEXT __glintercept_fnptr_glIsFramebufferEXT;
GLboolean __glintercept_glIsFramebufferEXT(GLuint framebuffer) {
  GLboolean __ret = __glintercept_fnptr_glIsFramebufferEXT(framebuffer);
  __glintercept_log(" - glIsFramebufferEXT(framebuffer: %ld) -> %ld", framebuffer, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsFramebufferOES)(GLuint);
static __ctype_glIsFramebufferOES __glintercept_fnptr_glIsFramebufferOES;
GLboolean __glintercept_glIsFramebufferOES(GLuint framebuffer) {
  GLboolean __ret = __glintercept_fnptr_glIsFramebufferOES(framebuffer);
  __glintercept_log(" - glIsFramebufferOES(framebuffer: %ld) -> %ld", framebuffer, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsImageHandleResidentARB)(GLuint64);
static __ctype_glIsImageHandleResidentARB __glintercept_fnptr_glIsImageHandleResidentARB;
GLboolean __glintercept_glIsImageHandleResidentARB(GLuint64 handle) {
  GLboolean __ret = __glintercept_fnptr_glIsImageHandleResidentARB(handle);
  __glintercept_log(" - glIsImageHandleResidentARB(handle: %ld) -> %ld", handle, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsImageHandleResidentNV)(GLuint64);
static __ctype_glIsImageHandleResidentNV __glintercept_fnptr_glIsImageHandleResidentNV;
GLboolean __glintercept_glIsImageHandleResidentNV(GLuint64 handle) {
  GLboolean __ret = __glintercept_fnptr_glIsImageHandleResidentNV(handle);
  __glintercept_log(" - glIsImageHandleResidentNV(handle: %ld) -> %ld", handle, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsList)(GLuint);
static __ctype_glIsList __glintercept_fnptr_glIsList;
GLboolean __glintercept_glIsList(GLuint list) {
  GLboolean __ret = __glintercept_fnptr_glIsList(list);
  __glintercept_log(" - glIsList(list: %ld) -> %ld", list, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsMemoryObjectEXT)(GLuint);
static __ctype_glIsMemoryObjectEXT __glintercept_fnptr_glIsMemoryObjectEXT;
GLboolean __glintercept_glIsMemoryObjectEXT(GLuint memoryObject) {
  GLboolean __ret = __glintercept_fnptr_glIsMemoryObjectEXT(memoryObject);
  __glintercept_log(" - glIsMemoryObjectEXT(memoryObject: %ld) -> %ld", memoryObject, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsNameAMD)(GLenum, GLuint);
static __ctype_glIsNameAMD __glintercept_fnptr_glIsNameAMD;
GLboolean __glintercept_glIsNameAMD(GLenum identifier, GLuint name) {
  GLboolean __ret = __glintercept_fnptr_glIsNameAMD(identifier, name);
  __glintercept_log(" - glIsNameAMD(identifier: %ld (%s), name: %ld) -> %ld", identifier, __gl_intercept_formatenum(identifier), name, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsNamedBufferResidentNV)(GLuint);
static __ctype_glIsNamedBufferResidentNV __glintercept_fnptr_glIsNamedBufferResidentNV;
GLboolean __glintercept_glIsNamedBufferResidentNV(GLuint buffer) {
  GLboolean __ret = __glintercept_fnptr_glIsNamedBufferResidentNV(buffer);
  __glintercept_log(" - glIsNamedBufferResidentNV(buffer: %ld) -> %ld", buffer, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsNamedStringARB)(GLint, const GLchar *);
static __ctype_glIsNamedStringARB __glintercept_fnptr_glIsNamedStringARB;
GLboolean __glintercept_glIsNamedStringARB(GLint namelen, const GLchar * name) {
  GLboolean __ret = __glintercept_fnptr_glIsNamedStringARB(namelen, name);
  __glintercept_log(" - glIsNamedStringARB(namelen: %ld, name: %ld) -> %ld", namelen, name, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsObjectBufferATI)(GLuint);
static __ctype_glIsObjectBufferATI __glintercept_fnptr_glIsObjectBufferATI;
GLboolean __glintercept_glIsObjectBufferATI(GLuint buffer) {
  GLboolean __ret = __glintercept_fnptr_glIsObjectBufferATI(buffer);
  __glintercept_log(" - glIsObjectBufferATI(buffer: %ld) -> %ld", buffer, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsOcclusionQueryNV)(GLuint);
static __ctype_glIsOcclusionQueryNV __glintercept_fnptr_glIsOcclusionQueryNV;
GLboolean __glintercept_glIsOcclusionQueryNV(GLuint id) {
  GLboolean __ret = __glintercept_fnptr_glIsOcclusionQueryNV(id);
  __glintercept_log(" - glIsOcclusionQueryNV(id: %ld) -> %ld", id, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsPathNV)(GLuint);
static __ctype_glIsPathNV __glintercept_fnptr_glIsPathNV;
GLboolean __glintercept_glIsPathNV(GLuint path) {
  GLboolean __ret = __glintercept_fnptr_glIsPathNV(path);
  __glintercept_log(" - glIsPathNV(path: %ld) -> %ld", path, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsPointInFillPathNV)(GLuint, GLuint, GLfloat, GLfloat);
static __ctype_glIsPointInFillPathNV __glintercept_fnptr_glIsPointInFillPathNV;
GLboolean __glintercept_glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y) {
  GLboolean __ret = __glintercept_fnptr_glIsPointInFillPathNV(path, mask, x, y);
  __glintercept_log(" - glIsPointInFillPathNV(path: %ld, mask: %ld, x: %ld, y: %ld) -> %ld", path, mask, x, y, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsPointInStrokePathNV)(GLuint, GLfloat, GLfloat);
static __ctype_glIsPointInStrokePathNV __glintercept_fnptr_glIsPointInStrokePathNV;
GLboolean __glintercept_glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y) {
  GLboolean __ret = __glintercept_fnptr_glIsPointInStrokePathNV(path, x, y);
  __glintercept_log(" - glIsPointInStrokePathNV(path: %ld, x: %ld, y: %ld) -> %ld", path, x, y, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsProgram)(GLuint);
static __ctype_glIsProgram __glintercept_fnptr_glIsProgram;
GLboolean __glintercept_glIsProgram(GLuint program) {
  GLboolean __ret = __glintercept_fnptr_glIsProgram(program);
  __glintercept_log(" - glIsProgram(program: %ld) -> %ld", program, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsProgramARB)(GLuint);
static __ctype_glIsProgramARB __glintercept_fnptr_glIsProgramARB;
GLboolean __glintercept_glIsProgramARB(GLuint program) {
  GLboolean __ret = __glintercept_fnptr_glIsProgramARB(program);
  __glintercept_log(" - glIsProgramARB(program: %ld) -> %ld", program, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsProgramNV)(GLuint);
static __ctype_glIsProgramNV __glintercept_fnptr_glIsProgramNV;
GLboolean __glintercept_glIsProgramNV(GLuint id) {
  GLboolean __ret = __glintercept_fnptr_glIsProgramNV(id);
  __glintercept_log(" - glIsProgramNV(id: %ld) -> %ld", id, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsProgramPipeline)(GLuint);
static __ctype_glIsProgramPipeline __glintercept_fnptr_glIsProgramPipeline;
GLboolean __glintercept_glIsProgramPipeline(GLuint pipeline) {
  GLboolean __ret = __glintercept_fnptr_glIsProgramPipeline(pipeline);
  __glintercept_log(" - glIsProgramPipeline(pipeline: %ld) -> %ld", pipeline, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsProgramPipelineEXT)(GLuint);
static __ctype_glIsProgramPipelineEXT __glintercept_fnptr_glIsProgramPipelineEXT;
GLboolean __glintercept_glIsProgramPipelineEXT(GLuint pipeline) {
  GLboolean __ret = __glintercept_fnptr_glIsProgramPipelineEXT(pipeline);
  __glintercept_log(" - glIsProgramPipelineEXT(pipeline: %ld) -> %ld", pipeline, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsQuery)(GLuint);
static __ctype_glIsQuery __glintercept_fnptr_glIsQuery;
GLboolean __glintercept_glIsQuery(GLuint id) {
  GLboolean __ret = __glintercept_fnptr_glIsQuery(id);
  __glintercept_log(" - glIsQuery(id: %ld) -> %ld", id, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsQueryARB)(GLuint);
static __ctype_glIsQueryARB __glintercept_fnptr_glIsQueryARB;
GLboolean __glintercept_glIsQueryARB(GLuint id) {
  GLboolean __ret = __glintercept_fnptr_glIsQueryARB(id);
  __glintercept_log(" - glIsQueryARB(id: %ld) -> %ld", id, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsQueryEXT)(GLuint);
static __ctype_glIsQueryEXT __glintercept_fnptr_glIsQueryEXT;
GLboolean __glintercept_glIsQueryEXT(GLuint id) {
  GLboolean __ret = __glintercept_fnptr_glIsQueryEXT(id);
  __glintercept_log(" - glIsQueryEXT(id: %ld) -> %ld", id, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsRenderbuffer)(GLuint);
static __ctype_glIsRenderbuffer __glintercept_fnptr_glIsRenderbuffer;
GLboolean __glintercept_glIsRenderbuffer(GLuint renderbuffer) {
  GLboolean __ret = __glintercept_fnptr_glIsRenderbuffer(renderbuffer);
  __glintercept_log(" - glIsRenderbuffer(renderbuffer: %ld) -> %ld", renderbuffer, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsRenderbufferEXT)(GLuint);
static __ctype_glIsRenderbufferEXT __glintercept_fnptr_glIsRenderbufferEXT;
GLboolean __glintercept_glIsRenderbufferEXT(GLuint renderbuffer) {
  GLboolean __ret = __glintercept_fnptr_glIsRenderbufferEXT(renderbuffer);
  __glintercept_log(" - glIsRenderbufferEXT(renderbuffer: %ld) -> %ld", renderbuffer, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsRenderbufferOES)(GLuint);
static __ctype_glIsRenderbufferOES __glintercept_fnptr_glIsRenderbufferOES;
GLboolean __glintercept_glIsRenderbufferOES(GLuint renderbuffer) {
  GLboolean __ret = __glintercept_fnptr_glIsRenderbufferOES(renderbuffer);
  __glintercept_log(" - glIsRenderbufferOES(renderbuffer: %ld) -> %ld", renderbuffer, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsSemaphoreEXT)(GLuint);
static __ctype_glIsSemaphoreEXT __glintercept_fnptr_glIsSemaphoreEXT;
GLboolean __glintercept_glIsSemaphoreEXT(GLuint semaphore) {
  GLboolean __ret = __glintercept_fnptr_glIsSemaphoreEXT(semaphore);
  __glintercept_log(" - glIsSemaphoreEXT(semaphore: %ld) -> %ld", semaphore, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsSampler)(GLuint);
static __ctype_glIsSampler __glintercept_fnptr_glIsSampler;
GLboolean __glintercept_glIsSampler(GLuint sampler) {
  GLboolean __ret = __glintercept_fnptr_glIsSampler(sampler);
  __glintercept_log(" - glIsSampler(sampler: %ld) -> %ld", sampler, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsShader)(GLuint);
static __ctype_glIsShader __glintercept_fnptr_glIsShader;
GLboolean __glintercept_glIsShader(GLuint shader) {
  GLboolean __ret = __glintercept_fnptr_glIsShader(shader);
  __glintercept_log(" - glIsShader(shader: %ld) -> %ld", shader, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsStateNV)(GLuint);
static __ctype_glIsStateNV __glintercept_fnptr_glIsStateNV;
GLboolean __glintercept_glIsStateNV(GLuint state) {
  GLboolean __ret = __glintercept_fnptr_glIsStateNV(state);
  __glintercept_log(" - glIsStateNV(state: %ld) -> %ld", state, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsSync)(GLsync);
static __ctype_glIsSync __glintercept_fnptr_glIsSync;
GLboolean __glintercept_glIsSync(GLsync sync) {
  GLboolean __ret = __glintercept_fnptr_glIsSync(sync);
  __glintercept_log(" - glIsSync(sync: %ld) -> %ld", sync, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsSyncAPPLE)(GLsync);
static __ctype_glIsSyncAPPLE __glintercept_fnptr_glIsSyncAPPLE;
GLboolean __glintercept_glIsSyncAPPLE(GLsync sync) {
  GLboolean __ret = __glintercept_fnptr_glIsSyncAPPLE(sync);
  __glintercept_log(" - glIsSyncAPPLE(sync: %ld) -> %ld", sync, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsTexture)(GLuint);
static __ctype_glIsTexture __glintercept_fnptr_glIsTexture;
GLboolean __glintercept_glIsTexture(GLuint texture) {
  GLboolean __ret = __glintercept_fnptr_glIsTexture(texture);
  __glintercept_log(" - glIsTexture(texture: %ld) -> %ld", texture, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsTextureEXT)(GLuint);
static __ctype_glIsTextureEXT __glintercept_fnptr_glIsTextureEXT;
GLboolean __glintercept_glIsTextureEXT(GLuint texture) {
  GLboolean __ret = __glintercept_fnptr_glIsTextureEXT(texture);
  __glintercept_log(" - glIsTextureEXT(texture: %ld) -> %ld", texture, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsTextureHandleResidentARB)(GLuint64);
static __ctype_glIsTextureHandleResidentARB __glintercept_fnptr_glIsTextureHandleResidentARB;
GLboolean __glintercept_glIsTextureHandleResidentARB(GLuint64 handle) {
  GLboolean __ret = __glintercept_fnptr_glIsTextureHandleResidentARB(handle);
  __glintercept_log(" - glIsTextureHandleResidentARB(handle: %ld) -> %ld", handle, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsTextureHandleResidentNV)(GLuint64);
static __ctype_glIsTextureHandleResidentNV __glintercept_fnptr_glIsTextureHandleResidentNV;
GLboolean __glintercept_glIsTextureHandleResidentNV(GLuint64 handle) {
  GLboolean __ret = __glintercept_fnptr_glIsTextureHandleResidentNV(handle);
  __glintercept_log(" - glIsTextureHandleResidentNV(handle: %ld) -> %ld", handle, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsTransformFeedback)(GLuint);
static __ctype_glIsTransformFeedback __glintercept_fnptr_glIsTransformFeedback;
GLboolean __glintercept_glIsTransformFeedback(GLuint id) {
  GLboolean __ret = __glintercept_fnptr_glIsTransformFeedback(id);
  __glintercept_log(" - glIsTransformFeedback(id: %ld) -> %ld", id, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsTransformFeedbackNV)(GLuint);
static __ctype_glIsTransformFeedbackNV __glintercept_fnptr_glIsTransformFeedbackNV;
GLboolean __glintercept_glIsTransformFeedbackNV(GLuint id) {
  GLboolean __ret = __glintercept_fnptr_glIsTransformFeedbackNV(id);
  __glintercept_log(" - glIsTransformFeedbackNV(id: %ld) -> %ld", id, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsVariantEnabledEXT)(GLuint, GLenum);
static __ctype_glIsVariantEnabledEXT __glintercept_fnptr_glIsVariantEnabledEXT;
GLboolean __glintercept_glIsVariantEnabledEXT(GLuint id, GLenum cap) {
  GLboolean __ret = __glintercept_fnptr_glIsVariantEnabledEXT(id, cap);
  __glintercept_log(" - glIsVariantEnabledEXT(id: %ld, cap: %ld (%s)) -> %ld", id, cap, __gl_intercept_formatenum(cap), __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsVertexArray)(GLuint);
static __ctype_glIsVertexArray __glintercept_fnptr_glIsVertexArray;
GLboolean __glintercept_glIsVertexArray(GLuint array) {
  GLboolean __ret = __glintercept_fnptr_glIsVertexArray(array);
  __glintercept_log(" - glIsVertexArray(array: %ld) -> %ld", array, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsVertexArrayAPPLE)(GLuint);
static __ctype_glIsVertexArrayAPPLE __glintercept_fnptr_glIsVertexArrayAPPLE;
GLboolean __glintercept_glIsVertexArrayAPPLE(GLuint array) {
  GLboolean __ret = __glintercept_fnptr_glIsVertexArrayAPPLE(array);
  __glintercept_log(" - glIsVertexArrayAPPLE(array: %ld) -> %ld", array, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsVertexArrayOES)(GLuint);
static __ctype_glIsVertexArrayOES __glintercept_fnptr_glIsVertexArrayOES;
GLboolean __glintercept_glIsVertexArrayOES(GLuint array) {
  GLboolean __ret = __glintercept_fnptr_glIsVertexArrayOES(array);
  __glintercept_log(" - glIsVertexArrayOES(array: %ld) -> %ld", array, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glIsVertexAttribEnabledAPPLE)(GLuint, GLenum);
static __ctype_glIsVertexAttribEnabledAPPLE __glintercept_fnptr_glIsVertexAttribEnabledAPPLE;
GLboolean __glintercept_glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname) {
  GLboolean __ret = __glintercept_fnptr_glIsVertexAttribEnabledAPPLE(index, pname);
  __glintercept_log(" - glIsVertexAttribEnabledAPPLE(index: %ld, pname: %ld (%s)) -> %ld", index, pname, __gl_intercept_formatenum(pname), __ret);
  return __ret;
}

typedef void(*__ctype_glLGPUCopyImageSubDataNVX)(GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
static __ctype_glLGPUCopyImageSubDataNVX __glintercept_fnptr_glLGPUCopyImageSubDataNVX;
void __glintercept_glLGPUCopyImageSubDataNVX(GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) {
  __glintercept_fnptr_glLGPUCopyImageSubDataNVX(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  __glintercept_log(" - glLGPUCopyImageSubDataNVX(sourceGpu: %ld, destinationGpuMask: %ld, srcName: %ld, srcTarget: %ld (%s), srcLevel: %ld, srcX: %ld, srxY: %ld, srcZ: %ld, dstName: %ld, dstTarget: %ld (%s), dstLevel: %ld, dstX: %ld, dstY: %ld, dstZ: %ld, width: %ld, height: %ld, depth: %ld)", sourceGpu, destinationGpuMask, srcName, srcTarget, __gl_intercept_formatenum(srcTarget), srcLevel, srcX, srxY, srcZ, dstName, dstTarget, __gl_intercept_formatenum(dstTarget), dstLevel, dstX, dstY, dstZ, width, height, depth);
}

typedef void(*__ctype_glLGPUInterlockNVX)();
static __ctype_glLGPUInterlockNVX __glintercept_fnptr_glLGPUInterlockNVX;
void __glintercept_glLGPUInterlockNVX() {
  __glintercept_fnptr_glLGPUInterlockNVX();
  __glintercept_log(" - glLGPUInterlockNVX()");
}

typedef void(*__ctype_glLGPUNamedBufferSubDataNVX)(GLbitfield, GLuint, GLintptr, GLsizeiptr, const void *);
static __ctype_glLGPUNamedBufferSubDataNVX __glintercept_fnptr_glLGPUNamedBufferSubDataNVX;
void __glintercept_glLGPUNamedBufferSubDataNVX(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) {
  __glintercept_fnptr_glLGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data);
  __glintercept_log(" - glLGPUNamedBufferSubDataNVX(gpuMask: %ld, buffer: %ld, offset: %ld, size: %ld, data: %ld)", gpuMask, buffer, offset, size, data);
}

typedef void(*__ctype_glLabelObjectEXT)(GLenum, GLuint, GLsizei, const GLchar *);
static __ctype_glLabelObjectEXT __glintercept_fnptr_glLabelObjectEXT;
void __glintercept_glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar * label) {
  __glintercept_fnptr_glLabelObjectEXT(type, object, length, label);
  __glintercept_log(" - glLabelObjectEXT(type: %ld (%s), object: %ld, length: %ld, label: %ld)", type, __gl_intercept_formatenum(type), object, length, label);
}

typedef void(*__ctype_glLightEnviSGIX)(GLenum, GLint);
static __ctype_glLightEnviSGIX __glintercept_fnptr_glLightEnviSGIX;
void __glintercept_glLightEnviSGIX(GLenum pname, GLint param) {
  __glintercept_fnptr_glLightEnviSGIX(pname, param);
  __glintercept_log(" - glLightEnviSGIX(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glLightModelf)(GLenum, GLfloat);
static __ctype_glLightModelf __glintercept_fnptr_glLightModelf;
void __glintercept_glLightModelf(GLenum pname, GLfloat param) {
  __glintercept_fnptr_glLightModelf(pname, param);
  __glintercept_log(" - glLightModelf(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glLightModelfv)(GLenum, const GLfloat *);
static __ctype_glLightModelfv __glintercept_fnptr_glLightModelfv;
void __glintercept_glLightModelfv(GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glLightModelfv(pname, params);
  __glintercept_log(" - glLightModelfv(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glLightModeli)(GLenum, GLint);
static __ctype_glLightModeli __glintercept_fnptr_glLightModeli;
void __glintercept_glLightModeli(GLenum pname, GLint param) {
  __glintercept_fnptr_glLightModeli(pname, param);
  __glintercept_log(" - glLightModeli(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glLightModeliv)(GLenum, const GLint *);
static __ctype_glLightModeliv __glintercept_fnptr_glLightModeliv;
void __glintercept_glLightModeliv(GLenum pname, const GLint * params) {
  __glintercept_fnptr_glLightModeliv(pname, params);
  __glintercept_log(" - glLightModeliv(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glLightModelx)(GLenum, GLfixed);
static __ctype_glLightModelx __glintercept_fnptr_glLightModelx;
void __glintercept_glLightModelx(GLenum pname, GLfixed param) {
  __glintercept_fnptr_glLightModelx(pname, param);
  __glintercept_log(" - glLightModelx(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glLightModelxOES)(GLenum, GLfixed);
static __ctype_glLightModelxOES __glintercept_fnptr_glLightModelxOES;
void __glintercept_glLightModelxOES(GLenum pname, GLfixed param) {
  __glintercept_fnptr_glLightModelxOES(pname, param);
  __glintercept_log(" - glLightModelxOES(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glLightModelxv)(GLenum, const GLfixed *);
static __ctype_glLightModelxv __glintercept_fnptr_glLightModelxv;
void __glintercept_glLightModelxv(GLenum pname, const GLfixed * param) {
  __glintercept_fnptr_glLightModelxv(pname, param);
  __glintercept_log(" - glLightModelxv(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glLightModelxvOES)(GLenum, const GLfixed *);
static __ctype_glLightModelxvOES __glintercept_fnptr_glLightModelxvOES;
void __glintercept_glLightModelxvOES(GLenum pname, const GLfixed * param) {
  __glintercept_fnptr_glLightModelxvOES(pname, param);
  __glintercept_log(" - glLightModelxvOES(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glLightf)(GLenum, GLenum, GLfloat);
static __ctype_glLightf __glintercept_fnptr_glLightf;
void __glintercept_glLightf(GLenum light, GLenum pname, GLfloat param) {
  __glintercept_fnptr_glLightf(light, pname, param);
  __glintercept_log(" - glLightf(light: %ld (%s), pname: %ld (%s), param: %ld)", light, __gl_intercept_formatenum(light), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glLightfv)(GLenum, GLenum, const GLfloat *);
static __ctype_glLightfv __glintercept_fnptr_glLightfv;
void __glintercept_glLightfv(GLenum light, GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glLightfv(light, pname, params);
  __glintercept_log(" - glLightfv(light: %ld (%s), pname: %ld (%s), params: %ld)", light, __gl_intercept_formatenum(light), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glLighti)(GLenum, GLenum, GLint);
static __ctype_glLighti __glintercept_fnptr_glLighti;
void __glintercept_glLighti(GLenum light, GLenum pname, GLint param) {
  __glintercept_fnptr_glLighti(light, pname, param);
  __glintercept_log(" - glLighti(light: %ld (%s), pname: %ld (%s), param: %ld)", light, __gl_intercept_formatenum(light), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glLightiv)(GLenum, GLenum, const GLint *);
static __ctype_glLightiv __glintercept_fnptr_glLightiv;
void __glintercept_glLightiv(GLenum light, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glLightiv(light, pname, params);
  __glintercept_log(" - glLightiv(light: %ld (%s), pname: %ld (%s), params: %ld)", light, __gl_intercept_formatenum(light), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glLightx)(GLenum, GLenum, GLfixed);
static __ctype_glLightx __glintercept_fnptr_glLightx;
void __glintercept_glLightx(GLenum light, GLenum pname, GLfixed param) {
  __glintercept_fnptr_glLightx(light, pname, param);
  __glintercept_log(" - glLightx(light: %ld (%s), pname: %ld (%s), param: %ld)", light, __gl_intercept_formatenum(light), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glLightxOES)(GLenum, GLenum, GLfixed);
static __ctype_glLightxOES __glintercept_fnptr_glLightxOES;
void __glintercept_glLightxOES(GLenum light, GLenum pname, GLfixed param) {
  __glintercept_fnptr_glLightxOES(light, pname, param);
  __glintercept_log(" - glLightxOES(light: %ld (%s), pname: %ld (%s), param: %ld)", light, __gl_intercept_formatenum(light), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glLightxv)(GLenum, GLenum, const GLfixed *);
static __ctype_glLightxv __glintercept_fnptr_glLightxv;
void __glintercept_glLightxv(GLenum light, GLenum pname, const GLfixed * params) {
  __glintercept_fnptr_glLightxv(light, pname, params);
  __glintercept_log(" - glLightxv(light: %ld (%s), pname: %ld (%s), params: %ld)", light, __gl_intercept_formatenum(light), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glLightxvOES)(GLenum, GLenum, const GLfixed *);
static __ctype_glLightxvOES __glintercept_fnptr_glLightxvOES;
void __glintercept_glLightxvOES(GLenum light, GLenum pname, const GLfixed * params) {
  __glintercept_fnptr_glLightxvOES(light, pname, params);
  __glintercept_log(" - glLightxvOES(light: %ld (%s), pname: %ld (%s), params: %ld)", light, __gl_intercept_formatenum(light), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glLineStipple)(GLint, GLushort);
static __ctype_glLineStipple __glintercept_fnptr_glLineStipple;
void __glintercept_glLineStipple(GLint factor, GLushort pattern) {
  __glintercept_fnptr_glLineStipple(factor, pattern);
  __glintercept_log(" - glLineStipple(factor: %ld, pattern: %ld)", factor, pattern);
}

typedef void(*__ctype_glLineWidth)(GLfloat);
static __ctype_glLineWidth __glintercept_fnptr_glLineWidth;
void __glintercept_glLineWidth(GLfloat width) {
  __glintercept_fnptr_glLineWidth(width);
  __glintercept_log(" - glLineWidth(width: %ld)", width);
}

typedef void(*__ctype_glLineWidthx)(GLfixed);
static __ctype_glLineWidthx __glintercept_fnptr_glLineWidthx;
void __glintercept_glLineWidthx(GLfixed width) {
  __glintercept_fnptr_glLineWidthx(width);
  __glintercept_log(" - glLineWidthx(width: %ld)", width);
}

typedef void(*__ctype_glLineWidthxOES)(GLfixed);
static __ctype_glLineWidthxOES __glintercept_fnptr_glLineWidthxOES;
void __glintercept_glLineWidthxOES(GLfixed width) {
  __glintercept_fnptr_glLineWidthxOES(width);
  __glintercept_log(" - glLineWidthxOES(width: %ld)", width);
}

typedef void(*__ctype_glLinkProgram)(GLuint);
static __ctype_glLinkProgram __glintercept_fnptr_glLinkProgram;
void __glintercept_glLinkProgram(GLuint program) {
  __glintercept_fnptr_glLinkProgram(program);
  __glintercept_log(" - glLinkProgram(program: %ld)", program);
}

typedef void(*__ctype_glLinkProgramARB)(GLhandleARB);
static __ctype_glLinkProgramARB __glintercept_fnptr_glLinkProgramARB;
void __glintercept_glLinkProgramARB(GLhandleARB programObj) {
  __glintercept_fnptr_glLinkProgramARB(programObj);
  __glintercept_log(" - glLinkProgramARB(programObj: %ld)", programObj);
}

typedef void(*__ctype_glListBase)(GLuint);
static __ctype_glListBase __glintercept_fnptr_glListBase;
void __glintercept_glListBase(GLuint base) {
  __glintercept_fnptr_glListBase(base);
  __glintercept_log(" - glListBase(base: %ld)", base);
}

typedef void(*__ctype_glListDrawCommandsStatesClientNV)(GLuint, GLuint, const void **, const GLsizei *, const GLuint *, const GLuint *, GLuint);
static __ctype_glListDrawCommandsStatesClientNV __glintercept_fnptr_glListDrawCommandsStatesClientNV;
void __glintercept_glListDrawCommandsStatesClientNV(GLuint list, GLuint segment, const void ** indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) {
  __glintercept_fnptr_glListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos, count);
  __glintercept_log(" - glListDrawCommandsStatesClientNV(list: %ld, segment: %ld, indirects: %ld, sizes: %ld, states: %ld, fbos: %ld, count: %ld)", list, segment, indirects, sizes, states, fbos, count);
}

typedef void(*__ctype_glListParameterfSGIX)(GLuint, GLenum, GLfloat);
static __ctype_glListParameterfSGIX __glintercept_fnptr_glListParameterfSGIX;
void __glintercept_glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param) {
  __glintercept_fnptr_glListParameterfSGIX(list, pname, param);
  __glintercept_log(" - glListParameterfSGIX(list: %ld, pname: %ld (%s), param: %ld)", list, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glListParameterfvSGIX)(GLuint, GLenum, const GLfloat *);
static __ctype_glListParameterfvSGIX __glintercept_fnptr_glListParameterfvSGIX;
void __glintercept_glListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glListParameterfvSGIX(list, pname, params);
  __glintercept_log(" - glListParameterfvSGIX(list: %ld, pname: %ld (%s), params: %ld)", list, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glListParameteriSGIX)(GLuint, GLenum, GLint);
static __ctype_glListParameteriSGIX __glintercept_fnptr_glListParameteriSGIX;
void __glintercept_glListParameteriSGIX(GLuint list, GLenum pname, GLint param) {
  __glintercept_fnptr_glListParameteriSGIX(list, pname, param);
  __glintercept_log(" - glListParameteriSGIX(list: %ld, pname: %ld (%s), param: %ld)", list, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glListParameterivSGIX)(GLuint, GLenum, const GLint *);
static __ctype_glListParameterivSGIX __glintercept_fnptr_glListParameterivSGIX;
void __glintercept_glListParameterivSGIX(GLuint list, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glListParameterivSGIX(list, pname, params);
  __glintercept_log(" - glListParameterivSGIX(list: %ld, pname: %ld (%s), params: %ld)", list, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glLoadIdentity)();
static __ctype_glLoadIdentity __glintercept_fnptr_glLoadIdentity;
void __glintercept_glLoadIdentity() {
  __glintercept_fnptr_glLoadIdentity();
  __glintercept_log(" - glLoadIdentity()");
}

typedef void(*__ctype_glLoadIdentityDeformationMapSGIX)(GLbitfield);
static __ctype_glLoadIdentityDeformationMapSGIX __glintercept_fnptr_glLoadIdentityDeformationMapSGIX;
void __glintercept_glLoadIdentityDeformationMapSGIX(GLbitfield mask) {
  __glintercept_fnptr_glLoadIdentityDeformationMapSGIX(mask);
  __glintercept_log(" - glLoadIdentityDeformationMapSGIX(mask: %ld)", mask);
}

typedef void(*__ctype_glLoadMatrixd)(const GLdouble *);
static __ctype_glLoadMatrixd __glintercept_fnptr_glLoadMatrixd;
void __glintercept_glLoadMatrixd(const GLdouble * m) {
  __glintercept_fnptr_glLoadMatrixd(m);
  __glintercept_log(" - glLoadMatrixd(m: %ld)", m);
}

typedef void(*__ctype_glLoadMatrixf)(const GLfloat *);
static __ctype_glLoadMatrixf __glintercept_fnptr_glLoadMatrixf;
void __glintercept_glLoadMatrixf(const GLfloat * m) {
  __glintercept_fnptr_glLoadMatrixf(m);
  __glintercept_log(" - glLoadMatrixf(m: %ld)", m);
}

typedef void(*__ctype_glLoadMatrixx)(const GLfixed *);
static __ctype_glLoadMatrixx __glintercept_fnptr_glLoadMatrixx;
void __glintercept_glLoadMatrixx(const GLfixed * m) {
  __glintercept_fnptr_glLoadMatrixx(m);
  __glintercept_log(" - glLoadMatrixx(m: %ld)", m);
}

typedef void(*__ctype_glLoadMatrixxOES)(const GLfixed *);
static __ctype_glLoadMatrixxOES __glintercept_fnptr_glLoadMatrixxOES;
void __glintercept_glLoadMatrixxOES(const GLfixed * m) {
  __glintercept_fnptr_glLoadMatrixxOES(m);
  __glintercept_log(" - glLoadMatrixxOES(m: %ld)", m);
}

typedef void(*__ctype_glLoadName)(GLuint);
static __ctype_glLoadName __glintercept_fnptr_glLoadName;
void __glintercept_glLoadName(GLuint name) {
  __glintercept_fnptr_glLoadName(name);
  __glintercept_log(" - glLoadName(name: %ld)", name);
}

typedef void(*__ctype_glLoadPaletteFromModelViewMatrixOES)();
static __ctype_glLoadPaletteFromModelViewMatrixOES __glintercept_fnptr_glLoadPaletteFromModelViewMatrixOES;
void __glintercept_glLoadPaletteFromModelViewMatrixOES() {
  __glintercept_fnptr_glLoadPaletteFromModelViewMatrixOES();
  __glintercept_log(" - glLoadPaletteFromModelViewMatrixOES()");
}

typedef void(*__ctype_glLoadProgramNV)(GLenum, GLuint, GLsizei, const GLubyte *);
static __ctype_glLoadProgramNV __glintercept_fnptr_glLoadProgramNV;
void __glintercept_glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte * program) {
  __glintercept_fnptr_glLoadProgramNV(target, id, len, program);
  __glintercept_log(" - glLoadProgramNV(target: %ld (%s), id: %ld, len: %ld, program: %s)", target, __gl_intercept_formatenum(target), id, len, program);
}

typedef void(*__ctype_glLoadTransposeMatrixd)(const GLdouble *);
static __ctype_glLoadTransposeMatrixd __glintercept_fnptr_glLoadTransposeMatrixd;
void __glintercept_glLoadTransposeMatrixd(const GLdouble * m) {
  __glintercept_fnptr_glLoadTransposeMatrixd(m);
  __glintercept_log(" - glLoadTransposeMatrixd(m: %ld)", m);
}

typedef void(*__ctype_glLoadTransposeMatrixdARB)(const GLdouble *);
static __ctype_glLoadTransposeMatrixdARB __glintercept_fnptr_glLoadTransposeMatrixdARB;
void __glintercept_glLoadTransposeMatrixdARB(const GLdouble * m) {
  __glintercept_fnptr_glLoadTransposeMatrixdARB(m);
  __glintercept_log(" - glLoadTransposeMatrixdARB(m: %ld)", m);
}

typedef void(*__ctype_glLoadTransposeMatrixf)(const GLfloat *);
static __ctype_glLoadTransposeMatrixf __glintercept_fnptr_glLoadTransposeMatrixf;
void __glintercept_glLoadTransposeMatrixf(const GLfloat * m) {
  __glintercept_fnptr_glLoadTransposeMatrixf(m);
  __glintercept_log(" - glLoadTransposeMatrixf(m: %ld)", m);
}

typedef void(*__ctype_glLoadTransposeMatrixfARB)(const GLfloat *);
static __ctype_glLoadTransposeMatrixfARB __glintercept_fnptr_glLoadTransposeMatrixfARB;
void __glintercept_glLoadTransposeMatrixfARB(const GLfloat * m) {
  __glintercept_fnptr_glLoadTransposeMatrixfARB(m);
  __glintercept_log(" - glLoadTransposeMatrixfARB(m: %ld)", m);
}

typedef void(*__ctype_glLoadTransposeMatrixxOES)(const GLfixed *);
static __ctype_glLoadTransposeMatrixxOES __glintercept_fnptr_glLoadTransposeMatrixxOES;
void __glintercept_glLoadTransposeMatrixxOES(const GLfixed * m) {
  __glintercept_fnptr_glLoadTransposeMatrixxOES(m);
  __glintercept_log(" - glLoadTransposeMatrixxOES(m: %ld)", m);
}

typedef void(*__ctype_glLockArraysEXT)(GLint, GLsizei);
static __ctype_glLockArraysEXT __glintercept_fnptr_glLockArraysEXT;
void __glintercept_glLockArraysEXT(GLint first, GLsizei count) {
  __glintercept_fnptr_glLockArraysEXT(first, count);
  __glintercept_log(" - glLockArraysEXT(first: %ld, count: %ld)", first, count);
}

typedef void(*__ctype_glLogicOp)(GLenum);
static __ctype_glLogicOp __glintercept_fnptr_glLogicOp;
void __glintercept_glLogicOp(GLenum opcode) {
  __glintercept_fnptr_glLogicOp(opcode);
  __glintercept_log(" - glLogicOp(opcode: %ld (%s))", opcode, __gl_intercept_formatenum(opcode));
}

typedef void(*__ctype_glMakeBufferNonResidentNV)(GLenum);
static __ctype_glMakeBufferNonResidentNV __glintercept_fnptr_glMakeBufferNonResidentNV;
void __glintercept_glMakeBufferNonResidentNV(GLenum target) {
  __glintercept_fnptr_glMakeBufferNonResidentNV(target);
  __glintercept_log(" - glMakeBufferNonResidentNV(target: %ld (%s))", target, __gl_intercept_formatenum(target));
}

typedef void(*__ctype_glMakeBufferResidentNV)(GLenum, GLenum);
static __ctype_glMakeBufferResidentNV __glintercept_fnptr_glMakeBufferResidentNV;
void __glintercept_glMakeBufferResidentNV(GLenum target, GLenum access) {
  __glintercept_fnptr_glMakeBufferResidentNV(target, access);
  __glintercept_log(" - glMakeBufferResidentNV(target: %ld (%s), access: %ld (%s))", target, __gl_intercept_formatenum(target), access, __gl_intercept_formatenum(access));
}

typedef void(*__ctype_glMakeImageHandleNonResidentARB)(GLuint64);
static __ctype_glMakeImageHandleNonResidentARB __glintercept_fnptr_glMakeImageHandleNonResidentARB;
void __glintercept_glMakeImageHandleNonResidentARB(GLuint64 handle) {
  __glintercept_fnptr_glMakeImageHandleNonResidentARB(handle);
  __glintercept_log(" - glMakeImageHandleNonResidentARB(handle: %ld)", handle);
}

typedef void(*__ctype_glMakeImageHandleNonResidentNV)(GLuint64);
static __ctype_glMakeImageHandleNonResidentNV __glintercept_fnptr_glMakeImageHandleNonResidentNV;
void __glintercept_glMakeImageHandleNonResidentNV(GLuint64 handle) {
  __glintercept_fnptr_glMakeImageHandleNonResidentNV(handle);
  __glintercept_log(" - glMakeImageHandleNonResidentNV(handle: %ld)", handle);
}

typedef void(*__ctype_glMakeImageHandleResidentARB)(GLuint64, GLenum);
static __ctype_glMakeImageHandleResidentARB __glintercept_fnptr_glMakeImageHandleResidentARB;
void __glintercept_glMakeImageHandleResidentARB(GLuint64 handle, GLenum access) {
  __glintercept_fnptr_glMakeImageHandleResidentARB(handle, access);
  __glintercept_log(" - glMakeImageHandleResidentARB(handle: %ld, access: %ld (%s))", handle, access, __gl_intercept_formatenum(access));
}

typedef void(*__ctype_glMakeImageHandleResidentNV)(GLuint64, GLenum);
static __ctype_glMakeImageHandleResidentNV __glintercept_fnptr_glMakeImageHandleResidentNV;
void __glintercept_glMakeImageHandleResidentNV(GLuint64 handle, GLenum access) {
  __glintercept_fnptr_glMakeImageHandleResidentNV(handle, access);
  __glintercept_log(" - glMakeImageHandleResidentNV(handle: %ld, access: %ld (%s))", handle, access, __gl_intercept_formatenum(access));
}

typedef void(*__ctype_glMakeNamedBufferNonResidentNV)(GLuint);
static __ctype_glMakeNamedBufferNonResidentNV __glintercept_fnptr_glMakeNamedBufferNonResidentNV;
void __glintercept_glMakeNamedBufferNonResidentNV(GLuint buffer) {
  __glintercept_fnptr_glMakeNamedBufferNonResidentNV(buffer);
  __glintercept_log(" - glMakeNamedBufferNonResidentNV(buffer: %ld)", buffer);
}

typedef void(*__ctype_glMakeNamedBufferResidentNV)(GLuint, GLenum);
static __ctype_glMakeNamedBufferResidentNV __glintercept_fnptr_glMakeNamedBufferResidentNV;
void __glintercept_glMakeNamedBufferResidentNV(GLuint buffer, GLenum access) {
  __glintercept_fnptr_glMakeNamedBufferResidentNV(buffer, access);
  __glintercept_log(" - glMakeNamedBufferResidentNV(buffer: %ld, access: %ld (%s))", buffer, access, __gl_intercept_formatenum(access));
}

typedef void(*__ctype_glMakeTextureHandleNonResidentARB)(GLuint64);
static __ctype_glMakeTextureHandleNonResidentARB __glintercept_fnptr_glMakeTextureHandleNonResidentARB;
void __glintercept_glMakeTextureHandleNonResidentARB(GLuint64 handle) {
  __glintercept_fnptr_glMakeTextureHandleNonResidentARB(handle);
  __glintercept_log(" - glMakeTextureHandleNonResidentARB(handle: %ld)", handle);
}

typedef void(*__ctype_glMakeTextureHandleNonResidentNV)(GLuint64);
static __ctype_glMakeTextureHandleNonResidentNV __glintercept_fnptr_glMakeTextureHandleNonResidentNV;
void __glintercept_glMakeTextureHandleNonResidentNV(GLuint64 handle) {
  __glintercept_fnptr_glMakeTextureHandleNonResidentNV(handle);
  __glintercept_log(" - glMakeTextureHandleNonResidentNV(handle: %ld)", handle);
}

typedef void(*__ctype_glMakeTextureHandleResidentARB)(GLuint64);
static __ctype_glMakeTextureHandleResidentARB __glintercept_fnptr_glMakeTextureHandleResidentARB;
void __glintercept_glMakeTextureHandleResidentARB(GLuint64 handle) {
  __glintercept_fnptr_glMakeTextureHandleResidentARB(handle);
  __glintercept_log(" - glMakeTextureHandleResidentARB(handle: %ld)", handle);
}

typedef void(*__ctype_glMakeTextureHandleResidentNV)(GLuint64);
static __ctype_glMakeTextureHandleResidentNV __glintercept_fnptr_glMakeTextureHandleResidentNV;
void __glintercept_glMakeTextureHandleResidentNV(GLuint64 handle) {
  __glintercept_fnptr_glMakeTextureHandleResidentNV(handle);
  __glintercept_log(" - glMakeTextureHandleResidentNV(handle: %ld)", handle);
}

typedef void(*__ctype_glMap1d)(GLenum, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
static __ctype_glMap1d __glintercept_fnptr_glMap1d;
void __glintercept_glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) {
  __glintercept_fnptr_glMap1d(target, u1, u2, stride, order, points);
  __glintercept_log(" - glMap1d(target: %ld (%s), u1: %ld, u2: %ld, stride: %ld, order: %ld, points: %ld)", target, __gl_intercept_formatenum(target), u1, u2, stride, order, points);
}

typedef void(*__ctype_glMap1f)(GLenum, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
static __ctype_glMap1f __glintercept_fnptr_glMap1f;
void __glintercept_glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) {
  __glintercept_fnptr_glMap1f(target, u1, u2, stride, order, points);
  __glintercept_log(" - glMap1f(target: %ld (%s), u1: %ld, u2: %ld, stride: %ld, order: %ld, points: %ld)", target, __gl_intercept_formatenum(target), u1, u2, stride, order, points);
}

typedef void(*__ctype_glMap1xOES)(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed);
static __ctype_glMap1xOES __glintercept_fnptr_glMap1xOES;
void __glintercept_glMap1xOES(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points) {
  __glintercept_fnptr_glMap1xOES(target, u1, u2, stride, order, points);
  __glintercept_log(" - glMap1xOES(target: %ld (%s), u1: %ld, u2: %ld, stride: %ld, order: %ld, points: %ld)", target, __gl_intercept_formatenum(target), u1, u2, stride, order, points);
}

typedef void(*__ctype_glMap2d)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
static __ctype_glMap2d __glintercept_fnptr_glMap2d;
void __glintercept_glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) {
  __glintercept_fnptr_glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  __glintercept_log(" - glMap2d(target: %ld (%s), u1: %ld, u2: %ld, ustride: %ld, uorder: %ld, v1: %ld, v2: %ld, vstride: %ld, vorder: %ld, points: %ld)", target, __gl_intercept_formatenum(target), u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

typedef void(*__ctype_glMap2f)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
static __ctype_glMap2f __glintercept_fnptr_glMap2f;
void __glintercept_glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) {
  __glintercept_fnptr_glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  __glintercept_log(" - glMap2f(target: %ld (%s), u1: %ld, u2: %ld, ustride: %ld, uorder: %ld, v1: %ld, v2: %ld, vstride: %ld, vorder: %ld, points: %ld)", target, __gl_intercept_formatenum(target), u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

typedef void(*__ctype_glMap2xOES)(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed);
static __ctype_glMap2xOES __glintercept_fnptr_glMap2xOES;
void __glintercept_glMap2xOES(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points) {
  __glintercept_fnptr_glMap2xOES(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  __glintercept_log(" - glMap2xOES(target: %ld (%s), u1: %ld, u2: %ld, ustride: %ld, uorder: %ld, v1: %ld, v2: %ld, vstride: %ld, vorder: %ld, points: %ld)", target, __gl_intercept_formatenum(target), u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

typedef void *(*__ctype_glMapBuffer)(GLenum, GLenum);
static __ctype_glMapBuffer __glintercept_fnptr_glMapBuffer;
void * __glintercept_glMapBuffer(GLenum target, GLenum access) {
  void * __ret = __glintercept_fnptr_glMapBuffer(target, access);
  __glintercept_log(" - glMapBuffer(target: %ld (%s), access: %ld (%s)) -> %ld", target, __gl_intercept_formatenum(target), access, __gl_intercept_formatenum(access), __ret);
  return __ret;
}

typedef void *(*__ctype_glMapBufferARB)(GLenum, GLenum);
static __ctype_glMapBufferARB __glintercept_fnptr_glMapBufferARB;
void * __glintercept_glMapBufferARB(GLenum target, GLenum access) {
  void * __ret = __glintercept_fnptr_glMapBufferARB(target, access);
  __glintercept_log(" - glMapBufferARB(target: %ld (%s), access: %ld (%s)) -> %ld", target, __gl_intercept_formatenum(target), access, __gl_intercept_formatenum(access), __ret);
  return __ret;
}

typedef void *(*__ctype_glMapBufferOES)(GLenum, GLenum);
static __ctype_glMapBufferOES __glintercept_fnptr_glMapBufferOES;
void * __glintercept_glMapBufferOES(GLenum target, GLenum access) {
  void * __ret = __glintercept_fnptr_glMapBufferOES(target, access);
  __glintercept_log(" - glMapBufferOES(target: %ld (%s), access: %ld (%s)) -> %ld", target, __gl_intercept_formatenum(target), access, __gl_intercept_formatenum(access), __ret);
  return __ret;
}

typedef void *(*__ctype_glMapBufferRange)(GLenum, GLintptr, GLsizeiptr, GLbitfield);
static __ctype_glMapBufferRange __glintercept_fnptr_glMapBufferRange;
void * __glintercept_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  void * __ret = __glintercept_fnptr_glMapBufferRange(target, offset, length, access);
  __glintercept_log(" - glMapBufferRange(target: %ld (%s), offset: %ld, length: %ld, access: %ld) -> %ld", target, __gl_intercept_formatenum(target), offset, length, access, __ret);
  return __ret;
}

typedef void *(*__ctype_glMapBufferRangeEXT)(GLenum, GLintptr, GLsizeiptr, GLbitfield);
static __ctype_glMapBufferRangeEXT __glintercept_fnptr_glMapBufferRangeEXT;
void * __glintercept_glMapBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  void * __ret = __glintercept_fnptr_glMapBufferRangeEXT(target, offset, length, access);
  __glintercept_log(" - glMapBufferRangeEXT(target: %ld (%s), offset: %ld, length: %ld, access: %ld) -> %ld", target, __gl_intercept_formatenum(target), offset, length, access, __ret);
  return __ret;
}

typedef void(*__ctype_glMapControlPointsNV)(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, const void *);
static __ctype_glMapControlPointsNV __glintercept_fnptr_glMapControlPointsNV;
void __glintercept_glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void * points) {
  __glintercept_fnptr_glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points);
  __glintercept_log(" - glMapControlPointsNV(target: %ld (%s), index: %ld, type: %ld (%s), ustride: %ld, vstride: %ld, uorder: %ld, vorder: %ld, packed: %ld, points: %ld)", target, __gl_intercept_formatenum(target), index, type, __gl_intercept_formatenum(type), ustride, vstride, uorder, vorder, packed, points);
}

typedef void(*__ctype_glMapGrid1d)(GLint, GLdouble, GLdouble);
static __ctype_glMapGrid1d __glintercept_fnptr_glMapGrid1d;
void __glintercept_glMapGrid1d(GLint un, GLdouble u1, GLdouble u2) {
  __glintercept_fnptr_glMapGrid1d(un, u1, u2);
  __glintercept_log(" - glMapGrid1d(un: %ld, u1: %ld, u2: %ld)", un, u1, u2);
}

typedef void(*__ctype_glMapGrid1f)(GLint, GLfloat, GLfloat);
static __ctype_glMapGrid1f __glintercept_fnptr_glMapGrid1f;
void __glintercept_glMapGrid1f(GLint un, GLfloat u1, GLfloat u2) {
  __glintercept_fnptr_glMapGrid1f(un, u1, u2);
  __glintercept_log(" - glMapGrid1f(un: %ld, u1: %ld, u2: %ld)", un, u1, u2);
}

typedef void(*__ctype_glMapGrid1xOES)(GLint, GLfixed, GLfixed);
static __ctype_glMapGrid1xOES __glintercept_fnptr_glMapGrid1xOES;
void __glintercept_glMapGrid1xOES(GLint n, GLfixed u1, GLfixed u2) {
  __glintercept_fnptr_glMapGrid1xOES(n, u1, u2);
  __glintercept_log(" - glMapGrid1xOES(n: %ld, u1: %ld, u2: %ld)", n, u1, u2);
}

typedef void(*__ctype_glMapGrid2d)(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble);
static __ctype_glMapGrid2d __glintercept_fnptr_glMapGrid2d;
void __glintercept_glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) {
  __glintercept_fnptr_glMapGrid2d(un, u1, u2, vn, v1, v2);
  __glintercept_log(" - glMapGrid2d(un: %ld, u1: %ld, u2: %ld, vn: %ld, v1: %ld, v2: %ld)", un, u1, u2, vn, v1, v2);
}

typedef void(*__ctype_glMapGrid2f)(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat);
static __ctype_glMapGrid2f __glintercept_fnptr_glMapGrid2f;
void __glintercept_glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) {
  __glintercept_fnptr_glMapGrid2f(un, u1, u2, vn, v1, v2);
  __glintercept_log(" - glMapGrid2f(un: %ld, u1: %ld, u2: %ld, vn: %ld, v1: %ld, v2: %ld)", un, u1, u2, vn, v1, v2);
}

typedef void(*__ctype_glMapGrid2xOES)(GLint, GLfixed, GLfixed, GLfixed, GLfixed);
static __ctype_glMapGrid2xOES __glintercept_fnptr_glMapGrid2xOES;
void __glintercept_glMapGrid2xOES(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2) {
  __glintercept_fnptr_glMapGrid2xOES(n, u1, u2, v1, v2);
  __glintercept_log(" - glMapGrid2xOES(n: %ld, u1: %ld, u2: %ld, v1: %ld, v2: %ld)", n, u1, u2, v1, v2);
}

typedef void *(*__ctype_glMapNamedBuffer)(GLuint, GLenum);
static __ctype_glMapNamedBuffer __glintercept_fnptr_glMapNamedBuffer;
void * __glintercept_glMapNamedBuffer(GLuint buffer, GLenum access) {
  void * __ret = __glintercept_fnptr_glMapNamedBuffer(buffer, access);
  __glintercept_log(" - glMapNamedBuffer(buffer: %ld, access: %ld (%s)) -> %ld", buffer, access, __gl_intercept_formatenum(access), __ret);
  return __ret;
}

typedef void *(*__ctype_glMapNamedBufferEXT)(GLuint, GLenum);
static __ctype_glMapNamedBufferEXT __glintercept_fnptr_glMapNamedBufferEXT;
void * __glintercept_glMapNamedBufferEXT(GLuint buffer, GLenum access) {
  void * __ret = __glintercept_fnptr_glMapNamedBufferEXT(buffer, access);
  __glintercept_log(" - glMapNamedBufferEXT(buffer: %ld, access: %ld (%s)) -> %ld", buffer, access, __gl_intercept_formatenum(access), __ret);
  return __ret;
}

typedef void *(*__ctype_glMapNamedBufferRange)(GLuint, GLintptr, GLsizeiptr, GLbitfield);
static __ctype_glMapNamedBufferRange __glintercept_fnptr_glMapNamedBufferRange;
void * __glintercept_glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  void * __ret = __glintercept_fnptr_glMapNamedBufferRange(buffer, offset, length, access);
  __glintercept_log(" - glMapNamedBufferRange(buffer: %ld, offset: %ld, length: %ld, access: %ld) -> %ld", buffer, offset, length, access, __ret);
  return __ret;
}

typedef void *(*__ctype_glMapNamedBufferRangeEXT)(GLuint, GLintptr, GLsizeiptr, GLbitfield);
static __ctype_glMapNamedBufferRangeEXT __glintercept_fnptr_glMapNamedBufferRangeEXT;
void * __glintercept_glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  void * __ret = __glintercept_fnptr_glMapNamedBufferRangeEXT(buffer, offset, length, access);
  __glintercept_log(" - glMapNamedBufferRangeEXT(buffer: %ld, offset: %ld, length: %ld, access: %ld) -> %ld", buffer, offset, length, access, __ret);
  return __ret;
}

typedef void *(*__ctype_glMapObjectBufferATI)(GLuint);
static __ctype_glMapObjectBufferATI __glintercept_fnptr_glMapObjectBufferATI;
void * __glintercept_glMapObjectBufferATI(GLuint buffer) {
  void * __ret = __glintercept_fnptr_glMapObjectBufferATI(buffer);
  __glintercept_log(" - glMapObjectBufferATI(buffer: %ld) -> %ld", buffer, __ret);
  return __ret;
}

typedef void(*__ctype_glMapParameterfvNV)(GLenum, GLenum, const GLfloat *);
static __ctype_glMapParameterfvNV __glintercept_fnptr_glMapParameterfvNV;
void __glintercept_glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glMapParameterfvNV(target, pname, params);
  __glintercept_log(" - glMapParameterfvNV(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glMapParameterivNV)(GLenum, GLenum, const GLint *);
static __ctype_glMapParameterivNV __glintercept_fnptr_glMapParameterivNV;
void __glintercept_glMapParameterivNV(GLenum target, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glMapParameterivNV(target, pname, params);
  __glintercept_log(" - glMapParameterivNV(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void *(*__ctype_glMapTexture2DINTEL)(GLuint, GLint, GLbitfield, GLint *, GLenum *);
static __ctype_glMapTexture2DINTEL __glintercept_fnptr_glMapTexture2DINTEL;
void * __glintercept_glMapTexture2DINTEL(GLuint texture, GLint level, GLbitfield access, GLint * stride, GLenum * layout) {
  void * __ret = __glintercept_fnptr_glMapTexture2DINTEL(texture, level, access, stride, layout);
  __glintercept_log(" - glMapTexture2DINTEL(texture: %ld, level: %ld, access: %ld, stride: %ld, layout: %ld) -> %ld", texture, level, access, stride, layout, __ret);
  return __ret;
}

typedef void(*__ctype_glMapVertexAttrib1dAPPLE)(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
static __ctype_glMapVertexAttrib1dAPPLE __glintercept_fnptr_glMapVertexAttrib1dAPPLE;
void __glintercept_glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) {
  __glintercept_fnptr_glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points);
  __glintercept_log(" - glMapVertexAttrib1dAPPLE(index: %ld, size: %ld, u1: %ld, u2: %ld, stride: %ld, order: %ld, points: %ld)", index, size, u1, u2, stride, order, points);
}

typedef void(*__ctype_glMapVertexAttrib1fAPPLE)(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
static __ctype_glMapVertexAttrib1fAPPLE __glintercept_fnptr_glMapVertexAttrib1fAPPLE;
void __glintercept_glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) {
  __glintercept_fnptr_glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points);
  __glintercept_log(" - glMapVertexAttrib1fAPPLE(index: %ld, size: %ld, u1: %ld, u2: %ld, stride: %ld, order: %ld, points: %ld)", index, size, u1, u2, stride, order, points);
}

typedef void(*__ctype_glMapVertexAttrib2dAPPLE)(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
static __ctype_glMapVertexAttrib2dAPPLE __glintercept_fnptr_glMapVertexAttrib2dAPPLE;
void __glintercept_glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) {
  __glintercept_fnptr_glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  __glintercept_log(" - glMapVertexAttrib2dAPPLE(index: %ld, size: %ld, u1: %ld, u2: %ld, ustride: %ld, uorder: %ld, v1: %ld, v2: %ld, vstride: %ld, vorder: %ld, points: %ld)", index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

typedef void(*__ctype_glMapVertexAttrib2fAPPLE)(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
static __ctype_glMapVertexAttrib2fAPPLE __glintercept_fnptr_glMapVertexAttrib2fAPPLE;
void __glintercept_glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) {
  __glintercept_fnptr_glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  __glintercept_log(" - glMapVertexAttrib2fAPPLE(index: %ld, size: %ld, u1: %ld, u2: %ld, ustride: %ld, uorder: %ld, v1: %ld, v2: %ld, vstride: %ld, vorder: %ld, points: %ld)", index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

typedef void(*__ctype_glMaterialf)(GLenum, GLenum, GLfloat);
static __ctype_glMaterialf __glintercept_fnptr_glMaterialf;
void __glintercept_glMaterialf(GLenum face, GLenum pname, GLfloat param) {
  __glintercept_fnptr_glMaterialf(face, pname, param);
  __glintercept_log(" - glMaterialf(face: %ld (%s), pname: %ld (%s), param: %ld)", face, __gl_intercept_formatenum(face), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glMaterialfv)(GLenum, GLenum, const GLfloat *);
static __ctype_glMaterialfv __glintercept_fnptr_glMaterialfv;
void __glintercept_glMaterialfv(GLenum face, GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glMaterialfv(face, pname, params);
  __glintercept_log(" - glMaterialfv(face: %ld (%s), pname: %ld (%s), params: %ld)", face, __gl_intercept_formatenum(face), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glMateriali)(GLenum, GLenum, GLint);
static __ctype_glMateriali __glintercept_fnptr_glMateriali;
void __glintercept_glMateriali(GLenum face, GLenum pname, GLint param) {
  __glintercept_fnptr_glMateriali(face, pname, param);
  __glintercept_log(" - glMateriali(face: %ld (%s), pname: %ld (%s), param: %ld)", face, __gl_intercept_formatenum(face), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glMaterialiv)(GLenum, GLenum, const GLint *);
static __ctype_glMaterialiv __glintercept_fnptr_glMaterialiv;
void __glintercept_glMaterialiv(GLenum face, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glMaterialiv(face, pname, params);
  __glintercept_log(" - glMaterialiv(face: %ld (%s), pname: %ld (%s), params: %ld)", face, __gl_intercept_formatenum(face), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glMaterialx)(GLenum, GLenum, GLfixed);
static __ctype_glMaterialx __glintercept_fnptr_glMaterialx;
void __glintercept_glMaterialx(GLenum face, GLenum pname, GLfixed param) {
  __glintercept_fnptr_glMaterialx(face, pname, param);
  __glintercept_log(" - glMaterialx(face: %ld (%s), pname: %ld (%s), param: %ld)", face, __gl_intercept_formatenum(face), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glMaterialxOES)(GLenum, GLenum, GLfixed);
static __ctype_glMaterialxOES __glintercept_fnptr_glMaterialxOES;
void __glintercept_glMaterialxOES(GLenum face, GLenum pname, GLfixed param) {
  __glintercept_fnptr_glMaterialxOES(face, pname, param);
  __glintercept_log(" - glMaterialxOES(face: %ld (%s), pname: %ld (%s), param: %ld)", face, __gl_intercept_formatenum(face), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glMaterialxv)(GLenum, GLenum, const GLfixed *);
static __ctype_glMaterialxv __glintercept_fnptr_glMaterialxv;
void __glintercept_glMaterialxv(GLenum face, GLenum pname, const GLfixed * param) {
  __glintercept_fnptr_glMaterialxv(face, pname, param);
  __glintercept_log(" - glMaterialxv(face: %ld (%s), pname: %ld (%s), param: %ld)", face, __gl_intercept_formatenum(face), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glMaterialxvOES)(GLenum, GLenum, const GLfixed *);
static __ctype_glMaterialxvOES __glintercept_fnptr_glMaterialxvOES;
void __glintercept_glMaterialxvOES(GLenum face, GLenum pname, const GLfixed * param) {
  __glintercept_fnptr_glMaterialxvOES(face, pname, param);
  __glintercept_log(" - glMaterialxvOES(face: %ld (%s), pname: %ld (%s), param: %ld)", face, __gl_intercept_formatenum(face), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glMatrixFrustumEXT)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glMatrixFrustumEXT __glintercept_fnptr_glMatrixFrustumEXT;
void __glintercept_glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  __glintercept_fnptr_glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar);
  __glintercept_log(" - glMatrixFrustumEXT(mode: %ld (%s), left: %ld, right: %ld, bottom: %ld, top: %ld, zNear: %ld, zFar: %ld)", mode, __gl_intercept_formatenum(mode), left, right, bottom, top, zNear, zFar);
}

typedef void(*__ctype_glMatrixIndexPointerARB)(GLint, GLenum, GLsizei, const void *);
static __ctype_glMatrixIndexPointerARB __glintercept_fnptr_glMatrixIndexPointerARB;
void __glintercept_glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glMatrixIndexPointerARB(size, type, stride, pointer);
  __glintercept_log(" - glMatrixIndexPointerARB(size: %ld, type: %ld (%s), stride: %ld, pointer: %ld)", size, type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glMatrixIndexPointerOES)(GLint, GLenum, GLsizei, const void *);
static __ctype_glMatrixIndexPointerOES __glintercept_fnptr_glMatrixIndexPointerOES;
void __glintercept_glMatrixIndexPointerOES(GLint size, GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glMatrixIndexPointerOES(size, type, stride, pointer);
  __glintercept_log(" - glMatrixIndexPointerOES(size: %ld, type: %ld (%s), stride: %ld, pointer: %ld)", size, type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glMatrixIndexubvARB)(GLint, const GLubyte *);
static __ctype_glMatrixIndexubvARB __glintercept_fnptr_glMatrixIndexubvARB;
void __glintercept_glMatrixIndexubvARB(GLint size, const GLubyte * indices) {
  __glintercept_fnptr_glMatrixIndexubvARB(size, indices);
  __glintercept_log(" - glMatrixIndexubvARB(size: %ld, indices: %s)", size, indices);
}

typedef void(*__ctype_glMatrixIndexuivARB)(GLint, const GLuint *);
static __ctype_glMatrixIndexuivARB __glintercept_fnptr_glMatrixIndexuivARB;
void __glintercept_glMatrixIndexuivARB(GLint size, const GLuint * indices) {
  __glintercept_fnptr_glMatrixIndexuivARB(size, indices);
  __glintercept_log(" - glMatrixIndexuivARB(size: %ld, indices: %ld)", size, indices);
}

typedef void(*__ctype_glMatrixIndexusvARB)(GLint, const GLushort *);
static __ctype_glMatrixIndexusvARB __glintercept_fnptr_glMatrixIndexusvARB;
void __glintercept_glMatrixIndexusvARB(GLint size, const GLushort * indices) {
  __glintercept_fnptr_glMatrixIndexusvARB(size, indices);
  __glintercept_log(" - glMatrixIndexusvARB(size: %ld, indices: %ld)", size, indices);
}

typedef void(*__ctype_glMatrixLoad3x2fNV)(GLenum, const GLfloat *);
static __ctype_glMatrixLoad3x2fNV __glintercept_fnptr_glMatrixLoad3x2fNV;
void __glintercept_glMatrixLoad3x2fNV(GLenum matrixMode, const GLfloat * m) {
  __glintercept_fnptr_glMatrixLoad3x2fNV(matrixMode, m);
  __glintercept_log(" - glMatrixLoad3x2fNV(matrixMode: %ld (%s), m: %ld)", matrixMode, __gl_intercept_formatenum(matrixMode), m);
}

typedef void(*__ctype_glMatrixLoad3x3fNV)(GLenum, const GLfloat *);
static __ctype_glMatrixLoad3x3fNV __glintercept_fnptr_glMatrixLoad3x3fNV;
void __glintercept_glMatrixLoad3x3fNV(GLenum matrixMode, const GLfloat * m) {
  __glintercept_fnptr_glMatrixLoad3x3fNV(matrixMode, m);
  __glintercept_log(" - glMatrixLoad3x3fNV(matrixMode: %ld (%s), m: %ld)", matrixMode, __gl_intercept_formatenum(matrixMode), m);
}

typedef void(*__ctype_glMatrixLoadIdentityEXT)(GLenum);
static __ctype_glMatrixLoadIdentityEXT __glintercept_fnptr_glMatrixLoadIdentityEXT;
void __glintercept_glMatrixLoadIdentityEXT(GLenum mode) {
  __glintercept_fnptr_glMatrixLoadIdentityEXT(mode);
  __glintercept_log(" - glMatrixLoadIdentityEXT(mode: %ld (%s))", mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glMatrixLoadTranspose3x3fNV)(GLenum, const GLfloat *);
static __ctype_glMatrixLoadTranspose3x3fNV __glintercept_fnptr_glMatrixLoadTranspose3x3fNV;
void __glintercept_glMatrixLoadTranspose3x3fNV(GLenum matrixMode, const GLfloat * m) {
  __glintercept_fnptr_glMatrixLoadTranspose3x3fNV(matrixMode, m);
  __glintercept_log(" - glMatrixLoadTranspose3x3fNV(matrixMode: %ld (%s), m: %ld)", matrixMode, __gl_intercept_formatenum(matrixMode), m);
}

typedef void(*__ctype_glMatrixLoadTransposedEXT)(GLenum, const GLdouble *);
static __ctype_glMatrixLoadTransposedEXT __glintercept_fnptr_glMatrixLoadTransposedEXT;
void __glintercept_glMatrixLoadTransposedEXT(GLenum mode, const GLdouble * m) {
  __glintercept_fnptr_glMatrixLoadTransposedEXT(mode, m);
  __glintercept_log(" - glMatrixLoadTransposedEXT(mode: %ld (%s), m: %ld)", mode, __gl_intercept_formatenum(mode), m);
}

typedef void(*__ctype_glMatrixLoadTransposefEXT)(GLenum, const GLfloat *);
static __ctype_glMatrixLoadTransposefEXT __glintercept_fnptr_glMatrixLoadTransposefEXT;
void __glintercept_glMatrixLoadTransposefEXT(GLenum mode, const GLfloat * m) {
  __glintercept_fnptr_glMatrixLoadTransposefEXT(mode, m);
  __glintercept_log(" - glMatrixLoadTransposefEXT(mode: %ld (%s), m: %ld)", mode, __gl_intercept_formatenum(mode), m);
}

typedef void(*__ctype_glMatrixLoaddEXT)(GLenum, const GLdouble *);
static __ctype_glMatrixLoaddEXT __glintercept_fnptr_glMatrixLoaddEXT;
void __glintercept_glMatrixLoaddEXT(GLenum mode, const GLdouble * m) {
  __glintercept_fnptr_glMatrixLoaddEXT(mode, m);
  __glintercept_log(" - glMatrixLoaddEXT(mode: %ld (%s), m: %ld)", mode, __gl_intercept_formatenum(mode), m);
}

typedef void(*__ctype_glMatrixLoadfEXT)(GLenum, const GLfloat *);
static __ctype_glMatrixLoadfEXT __glintercept_fnptr_glMatrixLoadfEXT;
void __glintercept_glMatrixLoadfEXT(GLenum mode, const GLfloat * m) {
  __glintercept_fnptr_glMatrixLoadfEXT(mode, m);
  __glintercept_log(" - glMatrixLoadfEXT(mode: %ld (%s), m: %ld)", mode, __gl_intercept_formatenum(mode), m);
}

typedef void(*__ctype_glMatrixMode)(GLenum);
static __ctype_glMatrixMode __glintercept_fnptr_glMatrixMode;
void __glintercept_glMatrixMode(GLenum mode) {
  __glintercept_fnptr_glMatrixMode(mode);
  __glintercept_log(" - glMatrixMode(mode: %ld (%s))", mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glMatrixMult3x2fNV)(GLenum, const GLfloat *);
static __ctype_glMatrixMult3x2fNV __glintercept_fnptr_glMatrixMult3x2fNV;
void __glintercept_glMatrixMult3x2fNV(GLenum matrixMode, const GLfloat * m) {
  __glintercept_fnptr_glMatrixMult3x2fNV(matrixMode, m);
  __glintercept_log(" - glMatrixMult3x2fNV(matrixMode: %ld (%s), m: %ld)", matrixMode, __gl_intercept_formatenum(matrixMode), m);
}

typedef void(*__ctype_glMatrixMult3x3fNV)(GLenum, const GLfloat *);
static __ctype_glMatrixMult3x3fNV __glintercept_fnptr_glMatrixMult3x3fNV;
void __glintercept_glMatrixMult3x3fNV(GLenum matrixMode, const GLfloat * m) {
  __glintercept_fnptr_glMatrixMult3x3fNV(matrixMode, m);
  __glintercept_log(" - glMatrixMult3x3fNV(matrixMode: %ld (%s), m: %ld)", matrixMode, __gl_intercept_formatenum(matrixMode), m);
}

typedef void(*__ctype_glMatrixMultTranspose3x3fNV)(GLenum, const GLfloat *);
static __ctype_glMatrixMultTranspose3x3fNV __glintercept_fnptr_glMatrixMultTranspose3x3fNV;
void __glintercept_glMatrixMultTranspose3x3fNV(GLenum matrixMode, const GLfloat * m) {
  __glintercept_fnptr_glMatrixMultTranspose3x3fNV(matrixMode, m);
  __glintercept_log(" - glMatrixMultTranspose3x3fNV(matrixMode: %ld (%s), m: %ld)", matrixMode, __gl_intercept_formatenum(matrixMode), m);
}

typedef void(*__ctype_glMatrixMultTransposedEXT)(GLenum, const GLdouble *);
static __ctype_glMatrixMultTransposedEXT __glintercept_fnptr_glMatrixMultTransposedEXT;
void __glintercept_glMatrixMultTransposedEXT(GLenum mode, const GLdouble * m) {
  __glintercept_fnptr_glMatrixMultTransposedEXT(mode, m);
  __glintercept_log(" - glMatrixMultTransposedEXT(mode: %ld (%s), m: %ld)", mode, __gl_intercept_formatenum(mode), m);
}

typedef void(*__ctype_glMatrixMultTransposefEXT)(GLenum, const GLfloat *);
static __ctype_glMatrixMultTransposefEXT __glintercept_fnptr_glMatrixMultTransposefEXT;
void __glintercept_glMatrixMultTransposefEXT(GLenum mode, const GLfloat * m) {
  __glintercept_fnptr_glMatrixMultTransposefEXT(mode, m);
  __glintercept_log(" - glMatrixMultTransposefEXT(mode: %ld (%s), m: %ld)", mode, __gl_intercept_formatenum(mode), m);
}

typedef void(*__ctype_glMatrixMultdEXT)(GLenum, const GLdouble *);
static __ctype_glMatrixMultdEXT __glintercept_fnptr_glMatrixMultdEXT;
void __glintercept_glMatrixMultdEXT(GLenum mode, const GLdouble * m) {
  __glintercept_fnptr_glMatrixMultdEXT(mode, m);
  __glintercept_log(" - glMatrixMultdEXT(mode: %ld (%s), m: %ld)", mode, __gl_intercept_formatenum(mode), m);
}

typedef void(*__ctype_glMatrixMultfEXT)(GLenum, const GLfloat *);
static __ctype_glMatrixMultfEXT __glintercept_fnptr_glMatrixMultfEXT;
void __glintercept_glMatrixMultfEXT(GLenum mode, const GLfloat * m) {
  __glintercept_fnptr_glMatrixMultfEXT(mode, m);
  __glintercept_log(" - glMatrixMultfEXT(mode: %ld (%s), m: %ld)", mode, __gl_intercept_formatenum(mode), m);
}

typedef void(*__ctype_glMatrixOrthoEXT)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glMatrixOrthoEXT __glintercept_fnptr_glMatrixOrthoEXT;
void __glintercept_glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  __glintercept_fnptr_glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar);
  __glintercept_log(" - glMatrixOrthoEXT(mode: %ld (%s), left: %ld, right: %ld, bottom: %ld, top: %ld, zNear: %ld, zFar: %ld)", mode, __gl_intercept_formatenum(mode), left, right, bottom, top, zNear, zFar);
}

typedef void(*__ctype_glMatrixPopEXT)(GLenum);
static __ctype_glMatrixPopEXT __glintercept_fnptr_glMatrixPopEXT;
void __glintercept_glMatrixPopEXT(GLenum mode) {
  __glintercept_fnptr_glMatrixPopEXT(mode);
  __glintercept_log(" - glMatrixPopEXT(mode: %ld (%s))", mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glMatrixPushEXT)(GLenum);
static __ctype_glMatrixPushEXT __glintercept_fnptr_glMatrixPushEXT;
void __glintercept_glMatrixPushEXT(GLenum mode) {
  __glintercept_fnptr_glMatrixPushEXT(mode);
  __glintercept_log(" - glMatrixPushEXT(mode: %ld (%s))", mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glMatrixRotatedEXT)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glMatrixRotatedEXT __glintercept_fnptr_glMatrixRotatedEXT;
void __glintercept_glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
  __glintercept_fnptr_glMatrixRotatedEXT(mode, angle, x, y, z);
  __glintercept_log(" - glMatrixRotatedEXT(mode: %ld (%s), angle: %ld, x: %ld, y: %ld, z: %ld)", mode, __gl_intercept_formatenum(mode), angle, x, y, z);
}

typedef void(*__ctype_glMatrixRotatefEXT)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glMatrixRotatefEXT __glintercept_fnptr_glMatrixRotatefEXT;
void __glintercept_glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glMatrixRotatefEXT(mode, angle, x, y, z);
  __glintercept_log(" - glMatrixRotatefEXT(mode: %ld (%s), angle: %ld, x: %ld, y: %ld, z: %ld)", mode, __gl_intercept_formatenum(mode), angle, x, y, z);
}

typedef void(*__ctype_glMatrixScaledEXT)(GLenum, GLdouble, GLdouble, GLdouble);
static __ctype_glMatrixScaledEXT __glintercept_fnptr_glMatrixScaledEXT;
void __glintercept_glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) {
  __glintercept_fnptr_glMatrixScaledEXT(mode, x, y, z);
  __glintercept_log(" - glMatrixScaledEXT(mode: %ld (%s), x: %ld, y: %ld, z: %ld)", mode, __gl_intercept_formatenum(mode), x, y, z);
}

typedef void(*__ctype_glMatrixScalefEXT)(GLenum, GLfloat, GLfloat, GLfloat);
static __ctype_glMatrixScalefEXT __glintercept_fnptr_glMatrixScalefEXT;
void __glintercept_glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glMatrixScalefEXT(mode, x, y, z);
  __glintercept_log(" - glMatrixScalefEXT(mode: %ld (%s), x: %ld, y: %ld, z: %ld)", mode, __gl_intercept_formatenum(mode), x, y, z);
}

typedef void(*__ctype_glMatrixTranslatedEXT)(GLenum, GLdouble, GLdouble, GLdouble);
static __ctype_glMatrixTranslatedEXT __glintercept_fnptr_glMatrixTranslatedEXT;
void __glintercept_glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) {
  __glintercept_fnptr_glMatrixTranslatedEXT(mode, x, y, z);
  __glintercept_log(" - glMatrixTranslatedEXT(mode: %ld (%s), x: %ld, y: %ld, z: %ld)", mode, __gl_intercept_formatenum(mode), x, y, z);
}

typedef void(*__ctype_glMatrixTranslatefEXT)(GLenum, GLfloat, GLfloat, GLfloat);
static __ctype_glMatrixTranslatefEXT __glintercept_fnptr_glMatrixTranslatefEXT;
void __glintercept_glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glMatrixTranslatefEXT(mode, x, y, z);
  __glintercept_log(" - glMatrixTranslatefEXT(mode: %ld (%s), x: %ld, y: %ld, z: %ld)", mode, __gl_intercept_formatenum(mode), x, y, z);
}

typedef void(*__ctype_glMaxShaderCompilerThreadsKHR)(GLuint);
static __ctype_glMaxShaderCompilerThreadsKHR __glintercept_fnptr_glMaxShaderCompilerThreadsKHR;
void __glintercept_glMaxShaderCompilerThreadsKHR(GLuint count) {
  __glintercept_fnptr_glMaxShaderCompilerThreadsKHR(count);
  __glintercept_log(" - glMaxShaderCompilerThreadsKHR(count: %ld)", count);
}

typedef void(*__ctype_glMaxShaderCompilerThreadsARB)(GLuint);
static __ctype_glMaxShaderCompilerThreadsARB __glintercept_fnptr_glMaxShaderCompilerThreadsARB;
void __glintercept_glMaxShaderCompilerThreadsARB(GLuint count) {
  __glintercept_fnptr_glMaxShaderCompilerThreadsARB(count);
  __glintercept_log(" - glMaxShaderCompilerThreadsARB(count: %ld)", count);
}

typedef void(*__ctype_glMemoryBarrier)(GLbitfield);
static __ctype_glMemoryBarrier __glintercept_fnptr_glMemoryBarrier;
void __glintercept_glMemoryBarrier(GLbitfield barriers) {
  __glintercept_fnptr_glMemoryBarrier(barriers);
  __glintercept_log(" - glMemoryBarrier(barriers: %ld)", barriers);
}

typedef void(*__ctype_glMemoryBarrierByRegion)(GLbitfield);
static __ctype_glMemoryBarrierByRegion __glintercept_fnptr_glMemoryBarrierByRegion;
void __glintercept_glMemoryBarrierByRegion(GLbitfield barriers) {
  __glintercept_fnptr_glMemoryBarrierByRegion(barriers);
  __glintercept_log(" - glMemoryBarrierByRegion(barriers: %ld)", barriers);
}

typedef void(*__ctype_glMemoryBarrierEXT)(GLbitfield);
static __ctype_glMemoryBarrierEXT __glintercept_fnptr_glMemoryBarrierEXT;
void __glintercept_glMemoryBarrierEXT(GLbitfield barriers) {
  __glintercept_fnptr_glMemoryBarrierEXT(barriers);
  __glintercept_log(" - glMemoryBarrierEXT(barriers: %ld)", barriers);
}

typedef void(*__ctype_glMemoryObjectParameterivEXT)(GLuint, GLenum, const GLint *);
static __ctype_glMemoryObjectParameterivEXT __glintercept_fnptr_glMemoryObjectParameterivEXT;
void __glintercept_glMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glMemoryObjectParameterivEXT(memoryObject, pname, params);
  __glintercept_log(" - glMemoryObjectParameterivEXT(memoryObject: %ld, pname: %ld (%s), params: %ld)", memoryObject, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glMinSampleShading)(GLfloat);
static __ctype_glMinSampleShading __glintercept_fnptr_glMinSampleShading;
void __glintercept_glMinSampleShading(GLfloat value) {
  __glintercept_fnptr_glMinSampleShading(value);
  __glintercept_log(" - glMinSampleShading(value: %ld)", value);
}

typedef void(*__ctype_glMinSampleShadingARB)(GLfloat);
static __ctype_glMinSampleShadingARB __glintercept_fnptr_glMinSampleShadingARB;
void __glintercept_glMinSampleShadingARB(GLfloat value) {
  __glintercept_fnptr_glMinSampleShadingARB(value);
  __glintercept_log(" - glMinSampleShadingARB(value: %ld)", value);
}

typedef void(*__ctype_glMinSampleShadingOES)(GLfloat);
static __ctype_glMinSampleShadingOES __glintercept_fnptr_glMinSampleShadingOES;
void __glintercept_glMinSampleShadingOES(GLfloat value) {
  __glintercept_fnptr_glMinSampleShadingOES(value);
  __glintercept_log(" - glMinSampleShadingOES(value: %ld)", value);
}

typedef void(*__ctype_glMinmax)(GLenum, GLenum, GLboolean);
static __ctype_glMinmax __glintercept_fnptr_glMinmax;
void __glintercept_glMinmax(GLenum target, GLenum internalformat, GLboolean sink) {
  __glintercept_fnptr_glMinmax(target, internalformat, sink);
  __glintercept_log(" - glMinmax(target: %ld (%s), internalformat: %ld (%s), sink: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), sink);
}

typedef void(*__ctype_glMinmaxEXT)(GLenum, GLenum, GLboolean);
static __ctype_glMinmaxEXT __glintercept_fnptr_glMinmaxEXT;
void __glintercept_glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink) {
  __glintercept_fnptr_glMinmaxEXT(target, internalformat, sink);
  __glintercept_log(" - glMinmaxEXT(target: %ld (%s), internalformat: %ld (%s), sink: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), sink);
}

typedef void(*__ctype_glMultMatrixd)(const GLdouble *);
static __ctype_glMultMatrixd __glintercept_fnptr_glMultMatrixd;
void __glintercept_glMultMatrixd(const GLdouble * m) {
  __glintercept_fnptr_glMultMatrixd(m);
  __glintercept_log(" - glMultMatrixd(m: %ld)", m);
}

typedef void(*__ctype_glMultMatrixf)(const GLfloat *);
static __ctype_glMultMatrixf __glintercept_fnptr_glMultMatrixf;
void __glintercept_glMultMatrixf(const GLfloat * m) {
  __glintercept_fnptr_glMultMatrixf(m);
  __glintercept_log(" - glMultMatrixf(m: %ld)", m);
}

typedef void(*__ctype_glMultMatrixx)(const GLfixed *);
static __ctype_glMultMatrixx __glintercept_fnptr_glMultMatrixx;
void __glintercept_glMultMatrixx(const GLfixed * m) {
  __glintercept_fnptr_glMultMatrixx(m);
  __glintercept_log(" - glMultMatrixx(m: %ld)", m);
}

typedef void(*__ctype_glMultMatrixxOES)(const GLfixed *);
static __ctype_glMultMatrixxOES __glintercept_fnptr_glMultMatrixxOES;
void __glintercept_glMultMatrixxOES(const GLfixed * m) {
  __glintercept_fnptr_glMultMatrixxOES(m);
  __glintercept_log(" - glMultMatrixxOES(m: %ld)", m);
}

typedef void(*__ctype_glMultTransposeMatrixd)(const GLdouble *);
static __ctype_glMultTransposeMatrixd __glintercept_fnptr_glMultTransposeMatrixd;
void __glintercept_glMultTransposeMatrixd(const GLdouble * m) {
  __glintercept_fnptr_glMultTransposeMatrixd(m);
  __glintercept_log(" - glMultTransposeMatrixd(m: %ld)", m);
}

typedef void(*__ctype_glMultTransposeMatrixdARB)(const GLdouble *);
static __ctype_glMultTransposeMatrixdARB __glintercept_fnptr_glMultTransposeMatrixdARB;
void __glintercept_glMultTransposeMatrixdARB(const GLdouble * m) {
  __glintercept_fnptr_glMultTransposeMatrixdARB(m);
  __glintercept_log(" - glMultTransposeMatrixdARB(m: %ld)", m);
}

typedef void(*__ctype_glMultTransposeMatrixf)(const GLfloat *);
static __ctype_glMultTransposeMatrixf __glintercept_fnptr_glMultTransposeMatrixf;
void __glintercept_glMultTransposeMatrixf(const GLfloat * m) {
  __glintercept_fnptr_glMultTransposeMatrixf(m);
  __glintercept_log(" - glMultTransposeMatrixf(m: %ld)", m);
}

typedef void(*__ctype_glMultTransposeMatrixfARB)(const GLfloat *);
static __ctype_glMultTransposeMatrixfARB __glintercept_fnptr_glMultTransposeMatrixfARB;
void __glintercept_glMultTransposeMatrixfARB(const GLfloat * m) {
  __glintercept_fnptr_glMultTransposeMatrixfARB(m);
  __glintercept_log(" - glMultTransposeMatrixfARB(m: %ld)", m);
}

typedef void(*__ctype_glMultTransposeMatrixxOES)(const GLfixed *);
static __ctype_glMultTransposeMatrixxOES __glintercept_fnptr_glMultTransposeMatrixxOES;
void __glintercept_glMultTransposeMatrixxOES(const GLfixed * m) {
  __glintercept_fnptr_glMultTransposeMatrixxOES(m);
  __glintercept_log(" - glMultTransposeMatrixxOES(m: %ld)", m);
}

typedef void(*__ctype_glMultiDrawArrays)(GLenum, const GLint *, const GLsizei *, GLsizei);
static __ctype_glMultiDrawArrays __glintercept_fnptr_glMultiDrawArrays;
void __glintercept_glMultiDrawArrays(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount) {
  __glintercept_fnptr_glMultiDrawArrays(mode, first, count, drawcount);
  __glintercept_log(" - glMultiDrawArrays(mode: %ld (%s), first: %ld, count: %ld, drawcount: %ld)", mode, __gl_intercept_formatenum(mode), first, count, drawcount);
}

typedef void(*__ctype_glMultiDrawArraysEXT)(GLenum, const GLint *, const GLsizei *, GLsizei);
static __ctype_glMultiDrawArraysEXT __glintercept_fnptr_glMultiDrawArraysEXT;
void __glintercept_glMultiDrawArraysEXT(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount) {
  __glintercept_fnptr_glMultiDrawArraysEXT(mode, first, count, primcount);
  __glintercept_log(" - glMultiDrawArraysEXT(mode: %ld (%s), first: %ld, count: %ld, primcount: %ld)", mode, __gl_intercept_formatenum(mode), first, count, primcount);
}

typedef void(*__ctype_glMultiDrawArraysIndirect)(GLenum, const void *, GLsizei, GLsizei);
static __ctype_glMultiDrawArraysIndirect __glintercept_fnptr_glMultiDrawArraysIndirect;
void __glintercept_glMultiDrawArraysIndirect(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride) {
  __glintercept_fnptr_glMultiDrawArraysIndirect(mode, indirect, drawcount, stride);
  __glintercept_log(" - glMultiDrawArraysIndirect(mode: %ld (%s), indirect: %ld, drawcount: %ld, stride: %ld)", mode, __gl_intercept_formatenum(mode), indirect, drawcount, stride);
}

typedef void(*__ctype_glMultiDrawArraysIndirectAMD)(GLenum, const void *, GLsizei, GLsizei);
static __ctype_glMultiDrawArraysIndirectAMD __glintercept_fnptr_glMultiDrawArraysIndirectAMD;
void __glintercept_glMultiDrawArraysIndirectAMD(GLenum mode, const void * indirect, GLsizei primcount, GLsizei stride) {
  __glintercept_fnptr_glMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride);
  __glintercept_log(" - glMultiDrawArraysIndirectAMD(mode: %ld (%s), indirect: %ld, primcount: %ld, stride: %ld)", mode, __gl_intercept_formatenum(mode), indirect, primcount, stride);
}

typedef void(*__ctype_glMultiDrawArraysIndirectBindlessCountNV)(GLenum, const void *, GLsizei, GLsizei, GLsizei, GLint);
static __ctype_glMultiDrawArraysIndirectBindlessCountNV __glintercept_fnptr_glMultiDrawArraysIndirectBindlessCountNV;
void __glintercept_glMultiDrawArraysIndirectBindlessCountNV(GLenum mode, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) {
  __glintercept_fnptr_glMultiDrawArraysIndirectBindlessCountNV(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
  __glintercept_log(" - glMultiDrawArraysIndirectBindlessCountNV(mode: %ld (%s), indirect: %ld, drawCount: %ld, maxDrawCount: %ld, stride: %ld, vertexBufferCount: %ld)", mode, __gl_intercept_formatenum(mode), indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
}

typedef void(*__ctype_glMultiDrawArraysIndirectBindlessNV)(GLenum, const void *, GLsizei, GLsizei, GLint);
static __ctype_glMultiDrawArraysIndirectBindlessNV __glintercept_fnptr_glMultiDrawArraysIndirectBindlessNV;
void __glintercept_glMultiDrawArraysIndirectBindlessNV(GLenum mode, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) {
  __glintercept_fnptr_glMultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount);
  __glintercept_log(" - glMultiDrawArraysIndirectBindlessNV(mode: %ld (%s), indirect: %ld, drawCount: %ld, stride: %ld, vertexBufferCount: %ld)", mode, __gl_intercept_formatenum(mode), indirect, drawCount, stride, vertexBufferCount);
}

typedef void(*__ctype_glMultiDrawArraysIndirectCount)(GLenum, const void *, GLintptr, GLsizei, GLsizei);
static __ctype_glMultiDrawArraysIndirectCount __glintercept_fnptr_glMultiDrawArraysIndirectCount;
void __glintercept_glMultiDrawArraysIndirectCount(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
  __glintercept_fnptr_glMultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride);
  __glintercept_log(" - glMultiDrawArraysIndirectCount(mode: %ld (%s), indirect: %ld, drawcount: %ld, maxdrawcount: %ld, stride: %ld)", mode, __gl_intercept_formatenum(mode), indirect, drawcount, maxdrawcount, stride);
}

typedef void(*__ctype_glMultiDrawArraysIndirectCountARB)(GLenum, const void *, GLintptr, GLsizei, GLsizei);
static __ctype_glMultiDrawArraysIndirectCountARB __glintercept_fnptr_glMultiDrawArraysIndirectCountARB;
void __glintercept_glMultiDrawArraysIndirectCountARB(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
  __glintercept_fnptr_glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride);
  __glintercept_log(" - glMultiDrawArraysIndirectCountARB(mode: %ld (%s), indirect: %ld, drawcount: %ld, maxdrawcount: %ld, stride: %ld)", mode, __gl_intercept_formatenum(mode), indirect, drawcount, maxdrawcount, stride);
}

typedef void(*__ctype_glMultiDrawArraysIndirectEXT)(GLenum, const void *, GLsizei, GLsizei);
static __ctype_glMultiDrawArraysIndirectEXT __glintercept_fnptr_glMultiDrawArraysIndirectEXT;
void __glintercept_glMultiDrawArraysIndirectEXT(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride) {
  __glintercept_fnptr_glMultiDrawArraysIndirectEXT(mode, indirect, drawcount, stride);
  __glintercept_log(" - glMultiDrawArraysIndirectEXT(mode: %ld (%s), indirect: %ld, drawcount: %ld, stride: %ld)", mode, __gl_intercept_formatenum(mode), indirect, drawcount, stride);
}

typedef void(*__ctype_glMultiDrawElementArrayAPPLE)(GLenum, const GLint *, const GLsizei *, GLsizei);
static __ctype_glMultiDrawElementArrayAPPLE __glintercept_fnptr_glMultiDrawElementArrayAPPLE;
void __glintercept_glMultiDrawElementArrayAPPLE(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount) {
  __glintercept_fnptr_glMultiDrawElementArrayAPPLE(mode, first, count, primcount);
  __glintercept_log(" - glMultiDrawElementArrayAPPLE(mode: %ld (%s), first: %ld, count: %ld, primcount: %ld)", mode, __gl_intercept_formatenum(mode), first, count, primcount);
}

typedef void(*__ctype_glMultiDrawElements)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei);
static __ctype_glMultiDrawElements __glintercept_fnptr_glMultiDrawElements;
void __glintercept_glMultiDrawElements(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount) {
  __glintercept_fnptr_glMultiDrawElements(mode, count, type, indices, drawcount);
  __glintercept_log(" - glMultiDrawElements(mode: %ld (%s), count: %ld, type: %ld (%s), indices: %ld, drawcount: %ld)", mode, __gl_intercept_formatenum(mode), count, type, __gl_intercept_formatenum(type), indices, drawcount);
}

typedef void(*__ctype_glMultiDrawElementsBaseVertex)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei, const GLint *);
static __ctype_glMultiDrawElementsBaseVertex __glintercept_fnptr_glMultiDrawElementsBaseVertex;
void __glintercept_glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex) {
  __glintercept_fnptr_glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);
  __glintercept_log(" - glMultiDrawElementsBaseVertex(mode: %ld (%s), count: %ld, type: %ld (%s), indices: %ld, drawcount: %ld, basevertex: %ld)", mode, __gl_intercept_formatenum(mode), count, type, __gl_intercept_formatenum(type), indices, drawcount, basevertex);
}

typedef void(*__ctype_glMultiDrawElementsBaseVertexEXT)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei, const GLint *);
static __ctype_glMultiDrawElementsBaseVertexEXT __glintercept_fnptr_glMultiDrawElementsBaseVertexEXT;
void __glintercept_glMultiDrawElementsBaseVertexEXT(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex) {
  __glintercept_fnptr_glMultiDrawElementsBaseVertexEXT(mode, count, type, indices, drawcount, basevertex);
  __glintercept_log(" - glMultiDrawElementsBaseVertexEXT(mode: %ld (%s), count: %ld, type: %ld (%s), indices: %ld, drawcount: %ld, basevertex: %ld)", mode, __gl_intercept_formatenum(mode), count, type, __gl_intercept_formatenum(type), indices, drawcount, basevertex);
}

typedef void(*__ctype_glMultiDrawElementsEXT)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei);
static __ctype_glMultiDrawElementsEXT __glintercept_fnptr_glMultiDrawElementsEXT;
void __glintercept_glMultiDrawElementsEXT(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount) {
  __glintercept_fnptr_glMultiDrawElementsEXT(mode, count, type, indices, primcount);
  __glintercept_log(" - glMultiDrawElementsEXT(mode: %ld (%s), count: %ld, type: %ld (%s), indices: %ld, primcount: %ld)", mode, __gl_intercept_formatenum(mode), count, type, __gl_intercept_formatenum(type), indices, primcount);
}

typedef void(*__ctype_glMultiDrawElementsIndirect)(GLenum, GLenum, const void *, GLsizei, GLsizei);
static __ctype_glMultiDrawElementsIndirect __glintercept_fnptr_glMultiDrawElementsIndirect;
void __glintercept_glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride) {
  __glintercept_fnptr_glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);
  __glintercept_log(" - glMultiDrawElementsIndirect(mode: %ld (%s), type: %ld (%s), indirect: %ld, drawcount: %ld, stride: %ld)", mode, __gl_intercept_formatenum(mode), type, __gl_intercept_formatenum(type), indirect, drawcount, stride);
}

typedef void(*__ctype_glMultiDrawElementsIndirectAMD)(GLenum, GLenum, const void *, GLsizei, GLsizei);
static __ctype_glMultiDrawElementsIndirectAMD __glintercept_fnptr_glMultiDrawElementsIndirectAMD;
void __glintercept_glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const void * indirect, GLsizei primcount, GLsizei stride) {
  __glintercept_fnptr_glMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride);
  __glintercept_log(" - glMultiDrawElementsIndirectAMD(mode: %ld (%s), type: %ld (%s), indirect: %ld, primcount: %ld, stride: %ld)", mode, __gl_intercept_formatenum(mode), type, __gl_intercept_formatenum(type), indirect, primcount, stride);
}

typedef void(*__ctype_glMultiDrawElementsIndirectBindlessCountNV)(GLenum, GLenum, const void *, GLsizei, GLsizei, GLsizei, GLint);
static __ctype_glMultiDrawElementsIndirectBindlessCountNV __glintercept_fnptr_glMultiDrawElementsIndirectBindlessCountNV;
void __glintercept_glMultiDrawElementsIndirectBindlessCountNV(GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) {
  __glintercept_fnptr_glMultiDrawElementsIndirectBindlessCountNV(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
  __glintercept_log(" - glMultiDrawElementsIndirectBindlessCountNV(mode: %ld (%s), type: %ld (%s), indirect: %ld, drawCount: %ld, maxDrawCount: %ld, stride: %ld, vertexBufferCount: %ld)", mode, __gl_intercept_formatenum(mode), type, __gl_intercept_formatenum(type), indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
}

typedef void(*__ctype_glMultiDrawElementsIndirectBindlessNV)(GLenum, GLenum, const void *, GLsizei, GLsizei, GLint);
static __ctype_glMultiDrawElementsIndirectBindlessNV __glintercept_fnptr_glMultiDrawElementsIndirectBindlessNV;
void __glintercept_glMultiDrawElementsIndirectBindlessNV(GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) {
  __glintercept_fnptr_glMultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount);
  __glintercept_log(" - glMultiDrawElementsIndirectBindlessNV(mode: %ld (%s), type: %ld (%s), indirect: %ld, drawCount: %ld, stride: %ld, vertexBufferCount: %ld)", mode, __gl_intercept_formatenum(mode), type, __gl_intercept_formatenum(type), indirect, drawCount, stride, vertexBufferCount);
}

typedef void(*__ctype_glMultiDrawElementsIndirectCount)(GLenum, GLenum, const void *, GLintptr, GLsizei, GLsizei);
static __ctype_glMultiDrawElementsIndirectCount __glintercept_fnptr_glMultiDrawElementsIndirectCount;
void __glintercept_glMultiDrawElementsIndirectCount(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
  __glintercept_fnptr_glMultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride);
  __glintercept_log(" - glMultiDrawElementsIndirectCount(mode: %ld (%s), type: %ld (%s), indirect: %ld, drawcount: %ld, maxdrawcount: %ld, stride: %ld)", mode, __gl_intercept_formatenum(mode), type, __gl_intercept_formatenum(type), indirect, drawcount, maxdrawcount, stride);
}

typedef void(*__ctype_glMultiDrawElementsIndirectCountARB)(GLenum, GLenum, const void *, GLintptr, GLsizei, GLsizei);
static __ctype_glMultiDrawElementsIndirectCountARB __glintercept_fnptr_glMultiDrawElementsIndirectCountARB;
void __glintercept_glMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
  __glintercept_fnptr_glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride);
  __glintercept_log(" - glMultiDrawElementsIndirectCountARB(mode: %ld (%s), type: %ld (%s), indirect: %ld, drawcount: %ld, maxdrawcount: %ld, stride: %ld)", mode, __gl_intercept_formatenum(mode), type, __gl_intercept_formatenum(type), indirect, drawcount, maxdrawcount, stride);
}

typedef void(*__ctype_glMultiDrawElementsIndirectEXT)(GLenum, GLenum, const void *, GLsizei, GLsizei);
static __ctype_glMultiDrawElementsIndirectEXT __glintercept_fnptr_glMultiDrawElementsIndirectEXT;
void __glintercept_glMultiDrawElementsIndirectEXT(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride) {
  __glintercept_fnptr_glMultiDrawElementsIndirectEXT(mode, type, indirect, drawcount, stride);
  __glintercept_log(" - glMultiDrawElementsIndirectEXT(mode: %ld (%s), type: %ld (%s), indirect: %ld, drawcount: %ld, stride: %ld)", mode, __gl_intercept_formatenum(mode), type, __gl_intercept_formatenum(type), indirect, drawcount, stride);
}

typedef void(*__ctype_glMultiDrawMeshTasksIndirectNV)(GLintptr, GLsizei, GLsizei);
static __ctype_glMultiDrawMeshTasksIndirectNV __glintercept_fnptr_glMultiDrawMeshTasksIndirectNV;
void __glintercept_glMultiDrawMeshTasksIndirectNV(GLintptr indirect, GLsizei drawcount, GLsizei stride) {
  __glintercept_fnptr_glMultiDrawMeshTasksIndirectNV(indirect, drawcount, stride);
  __glintercept_log(" - glMultiDrawMeshTasksIndirectNV(indirect: %ld, drawcount: %ld, stride: %ld)", indirect, drawcount, stride);
}

typedef void(*__ctype_glMultiDrawMeshTasksIndirectCountNV)(GLintptr, GLintptr, GLsizei, GLsizei);
static __ctype_glMultiDrawMeshTasksIndirectCountNV __glintercept_fnptr_glMultiDrawMeshTasksIndirectCountNV;
void __glintercept_glMultiDrawMeshTasksIndirectCountNV(GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
  __glintercept_fnptr_glMultiDrawMeshTasksIndirectCountNV(indirect, drawcount, maxdrawcount, stride);
  __glintercept_log(" - glMultiDrawMeshTasksIndirectCountNV(indirect: %ld, drawcount: %ld, maxdrawcount: %ld, stride: %ld)", indirect, drawcount, maxdrawcount, stride);
}

typedef void(*__ctype_glMultiDrawRangeElementArrayAPPLE)(GLenum, GLuint, GLuint, const GLint *, const GLsizei *, GLsizei);
static __ctype_glMultiDrawRangeElementArrayAPPLE __glintercept_fnptr_glMultiDrawRangeElementArrayAPPLE;
void __glintercept_glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint * first, const GLsizei * count, GLsizei primcount) {
  __glintercept_fnptr_glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount);
  __glintercept_log(" - glMultiDrawRangeElementArrayAPPLE(mode: %ld (%s), start: %ld, end: %ld, first: %ld, count: %ld, primcount: %ld)", mode, __gl_intercept_formatenum(mode), start, end, first, count, primcount);
}

typedef void(*__ctype_glMultiModeDrawArraysIBM)(const GLenum *, const GLint *, const GLsizei *, GLsizei, GLint);
static __ctype_glMultiModeDrawArraysIBM __glintercept_fnptr_glMultiModeDrawArraysIBM;
void __glintercept_glMultiModeDrawArraysIBM(const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei primcount, GLint modestride) {
  __glintercept_fnptr_glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride);
  __glintercept_log(" - glMultiModeDrawArraysIBM(mode: %ld, first: %ld, count: %ld, primcount: %ld, modestride: %ld)", mode, first, count, primcount, modestride);
}

typedef void(*__ctype_glMultiModeDrawElementsIBM)(const GLenum *, const GLsizei *, GLenum, const void *const*, GLsizei, GLint);
static __ctype_glMultiModeDrawElementsIBM __glintercept_fnptr_glMultiModeDrawElementsIBM;
void __glintercept_glMultiModeDrawElementsIBM(const GLenum * mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, GLint modestride) {
  __glintercept_fnptr_glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride);
  __glintercept_log(" - glMultiModeDrawElementsIBM(mode: %ld, count: %ld, type: %ld (%s), indices: %ld, primcount: %ld, modestride: %ld)", mode, count, type, __gl_intercept_formatenum(type), indices, primcount, modestride);
}

typedef void(*__ctype_glMultiTexBufferEXT)(GLenum, GLenum, GLenum, GLuint);
static __ctype_glMultiTexBufferEXT __glintercept_fnptr_glMultiTexBufferEXT;
void __glintercept_glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) {
  __glintercept_fnptr_glMultiTexBufferEXT(texunit, target, internalformat, buffer);
  __glintercept_log(" - glMultiTexBufferEXT(texunit: %ld (%s), target: %ld (%s), internalformat: %ld (%s), buffer: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), buffer);
}

typedef void(*__ctype_glMultiTexCoord1bOES)(GLenum, GLbyte);
static __ctype_glMultiTexCoord1bOES __glintercept_fnptr_glMultiTexCoord1bOES;
void __glintercept_glMultiTexCoord1bOES(GLenum texture, GLbyte s) {
  __glintercept_fnptr_glMultiTexCoord1bOES(texture, s);
  __glintercept_log(" - glMultiTexCoord1bOES(texture: %ld (%s), s: %ld)", texture, __gl_intercept_formatenum(texture), s);
}

typedef void(*__ctype_glMultiTexCoord1bvOES)(GLenum, const GLbyte *);
static __ctype_glMultiTexCoord1bvOES __glintercept_fnptr_glMultiTexCoord1bvOES;
void __glintercept_glMultiTexCoord1bvOES(GLenum texture, const GLbyte * coords) {
  __glintercept_fnptr_glMultiTexCoord1bvOES(texture, coords);
  __glintercept_log(" - glMultiTexCoord1bvOES(texture: %ld (%s), coords: %ld)", texture, __gl_intercept_formatenum(texture), coords);
}

typedef void(*__ctype_glMultiTexCoord1d)(GLenum, GLdouble);
static __ctype_glMultiTexCoord1d __glintercept_fnptr_glMultiTexCoord1d;
void __glintercept_glMultiTexCoord1d(GLenum target, GLdouble s) {
  __glintercept_fnptr_glMultiTexCoord1d(target, s);
  __glintercept_log(" - glMultiTexCoord1d(target: %ld (%s), s: %ld)", target, __gl_intercept_formatenum(target), s);
}

typedef void(*__ctype_glMultiTexCoord1dARB)(GLenum, GLdouble);
static __ctype_glMultiTexCoord1dARB __glintercept_fnptr_glMultiTexCoord1dARB;
void __glintercept_glMultiTexCoord1dARB(GLenum target, GLdouble s) {
  __glintercept_fnptr_glMultiTexCoord1dARB(target, s);
  __glintercept_log(" - glMultiTexCoord1dARB(target: %ld (%s), s: %ld)", target, __gl_intercept_formatenum(target), s);
}

typedef void(*__ctype_glMultiTexCoord1dv)(GLenum, const GLdouble *);
static __ctype_glMultiTexCoord1dv __glintercept_fnptr_glMultiTexCoord1dv;
void __glintercept_glMultiTexCoord1dv(GLenum target, const GLdouble * v) {
  __glintercept_fnptr_glMultiTexCoord1dv(target, v);
  __glintercept_log(" - glMultiTexCoord1dv(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord1dvARB)(GLenum, const GLdouble *);
static __ctype_glMultiTexCoord1dvARB __glintercept_fnptr_glMultiTexCoord1dvARB;
void __glintercept_glMultiTexCoord1dvARB(GLenum target, const GLdouble * v) {
  __glintercept_fnptr_glMultiTexCoord1dvARB(target, v);
  __glintercept_log(" - glMultiTexCoord1dvARB(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord1f)(GLenum, GLfloat);
static __ctype_glMultiTexCoord1f __glintercept_fnptr_glMultiTexCoord1f;
void __glintercept_glMultiTexCoord1f(GLenum target, GLfloat s) {
  __glintercept_fnptr_glMultiTexCoord1f(target, s);
  __glintercept_log(" - glMultiTexCoord1f(target: %ld (%s), s: %ld)", target, __gl_intercept_formatenum(target), s);
}

typedef void(*__ctype_glMultiTexCoord1fARB)(GLenum, GLfloat);
static __ctype_glMultiTexCoord1fARB __glintercept_fnptr_glMultiTexCoord1fARB;
void __glintercept_glMultiTexCoord1fARB(GLenum target, GLfloat s) {
  __glintercept_fnptr_glMultiTexCoord1fARB(target, s);
  __glintercept_log(" - glMultiTexCoord1fARB(target: %ld (%s), s: %ld)", target, __gl_intercept_formatenum(target), s);
}

typedef void(*__ctype_glMultiTexCoord1fv)(GLenum, const GLfloat *);
static __ctype_glMultiTexCoord1fv __glintercept_fnptr_glMultiTexCoord1fv;
void __glintercept_glMultiTexCoord1fv(GLenum target, const GLfloat * v) {
  __glintercept_fnptr_glMultiTexCoord1fv(target, v);
  __glintercept_log(" - glMultiTexCoord1fv(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord1fvARB)(GLenum, const GLfloat *);
static __ctype_glMultiTexCoord1fvARB __glintercept_fnptr_glMultiTexCoord1fvARB;
void __glintercept_glMultiTexCoord1fvARB(GLenum target, const GLfloat * v) {
  __glintercept_fnptr_glMultiTexCoord1fvARB(target, v);
  __glintercept_log(" - glMultiTexCoord1fvARB(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord1hNV)(GLenum, GLhalfNV);
static __ctype_glMultiTexCoord1hNV __glintercept_fnptr_glMultiTexCoord1hNV;
void __glintercept_glMultiTexCoord1hNV(GLenum target, GLhalfNV s) {
  __glintercept_fnptr_glMultiTexCoord1hNV(target, s);
  __glintercept_log(" - glMultiTexCoord1hNV(target: %ld (%s), s: %ld)", target, __gl_intercept_formatenum(target), s);
}

typedef void(*__ctype_glMultiTexCoord1hvNV)(GLenum, const GLhalfNV *);
static __ctype_glMultiTexCoord1hvNV __glintercept_fnptr_glMultiTexCoord1hvNV;
void __glintercept_glMultiTexCoord1hvNV(GLenum target, const GLhalfNV * v) {
  __glintercept_fnptr_glMultiTexCoord1hvNV(target, v);
  __glintercept_log(" - glMultiTexCoord1hvNV(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord1i)(GLenum, GLint);
static __ctype_glMultiTexCoord1i __glintercept_fnptr_glMultiTexCoord1i;
void __glintercept_glMultiTexCoord1i(GLenum target, GLint s) {
  __glintercept_fnptr_glMultiTexCoord1i(target, s);
  __glintercept_log(" - glMultiTexCoord1i(target: %ld (%s), s: %ld)", target, __gl_intercept_formatenum(target), s);
}

typedef void(*__ctype_glMultiTexCoord1iARB)(GLenum, GLint);
static __ctype_glMultiTexCoord1iARB __glintercept_fnptr_glMultiTexCoord1iARB;
void __glintercept_glMultiTexCoord1iARB(GLenum target, GLint s) {
  __glintercept_fnptr_glMultiTexCoord1iARB(target, s);
  __glintercept_log(" - glMultiTexCoord1iARB(target: %ld (%s), s: %ld)", target, __gl_intercept_formatenum(target), s);
}

typedef void(*__ctype_glMultiTexCoord1iv)(GLenum, const GLint *);
static __ctype_glMultiTexCoord1iv __glintercept_fnptr_glMultiTexCoord1iv;
void __glintercept_glMultiTexCoord1iv(GLenum target, const GLint * v) {
  __glintercept_fnptr_glMultiTexCoord1iv(target, v);
  __glintercept_log(" - glMultiTexCoord1iv(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord1ivARB)(GLenum, const GLint *);
static __ctype_glMultiTexCoord1ivARB __glintercept_fnptr_glMultiTexCoord1ivARB;
void __glintercept_glMultiTexCoord1ivARB(GLenum target, const GLint * v) {
  __glintercept_fnptr_glMultiTexCoord1ivARB(target, v);
  __glintercept_log(" - glMultiTexCoord1ivARB(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord1s)(GLenum, GLshort);
static __ctype_glMultiTexCoord1s __glintercept_fnptr_glMultiTexCoord1s;
void __glintercept_glMultiTexCoord1s(GLenum target, GLshort s) {
  __glintercept_fnptr_glMultiTexCoord1s(target, s);
  __glintercept_log(" - glMultiTexCoord1s(target: %ld (%s), s: %ld)", target, __gl_intercept_formatenum(target), s);
}

typedef void(*__ctype_glMultiTexCoord1sARB)(GLenum, GLshort);
static __ctype_glMultiTexCoord1sARB __glintercept_fnptr_glMultiTexCoord1sARB;
void __glintercept_glMultiTexCoord1sARB(GLenum target, GLshort s) {
  __glintercept_fnptr_glMultiTexCoord1sARB(target, s);
  __glintercept_log(" - glMultiTexCoord1sARB(target: %ld (%s), s: %ld)", target, __gl_intercept_formatenum(target), s);
}

typedef void(*__ctype_glMultiTexCoord1sv)(GLenum, const GLshort *);
static __ctype_glMultiTexCoord1sv __glintercept_fnptr_glMultiTexCoord1sv;
void __glintercept_glMultiTexCoord1sv(GLenum target, const GLshort * v) {
  __glintercept_fnptr_glMultiTexCoord1sv(target, v);
  __glintercept_log(" - glMultiTexCoord1sv(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord1svARB)(GLenum, const GLshort *);
static __ctype_glMultiTexCoord1svARB __glintercept_fnptr_glMultiTexCoord1svARB;
void __glintercept_glMultiTexCoord1svARB(GLenum target, const GLshort * v) {
  __glintercept_fnptr_glMultiTexCoord1svARB(target, v);
  __glintercept_log(" - glMultiTexCoord1svARB(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord1xOES)(GLenum, GLfixed);
static __ctype_glMultiTexCoord1xOES __glintercept_fnptr_glMultiTexCoord1xOES;
void __glintercept_glMultiTexCoord1xOES(GLenum texture, GLfixed s) {
  __glintercept_fnptr_glMultiTexCoord1xOES(texture, s);
  __glintercept_log(" - glMultiTexCoord1xOES(texture: %ld (%s), s: %ld)", texture, __gl_intercept_formatenum(texture), s);
}

typedef void(*__ctype_glMultiTexCoord1xvOES)(GLenum, const GLfixed *);
static __ctype_glMultiTexCoord1xvOES __glintercept_fnptr_glMultiTexCoord1xvOES;
void __glintercept_glMultiTexCoord1xvOES(GLenum texture, const GLfixed * coords) {
  __glintercept_fnptr_glMultiTexCoord1xvOES(texture, coords);
  __glintercept_log(" - glMultiTexCoord1xvOES(texture: %ld (%s), coords: %ld)", texture, __gl_intercept_formatenum(texture), coords);
}

typedef void(*__ctype_glMultiTexCoord2bOES)(GLenum, GLbyte, GLbyte);
static __ctype_glMultiTexCoord2bOES __glintercept_fnptr_glMultiTexCoord2bOES;
void __glintercept_glMultiTexCoord2bOES(GLenum texture, GLbyte s, GLbyte t) {
  __glintercept_fnptr_glMultiTexCoord2bOES(texture, s, t);
  __glintercept_log(" - glMultiTexCoord2bOES(texture: %ld (%s), s: %ld, t: %ld)", texture, __gl_intercept_formatenum(texture), s, t);
}

typedef void(*__ctype_glMultiTexCoord2bvOES)(GLenum, const GLbyte *);
static __ctype_glMultiTexCoord2bvOES __glintercept_fnptr_glMultiTexCoord2bvOES;
void __glintercept_glMultiTexCoord2bvOES(GLenum texture, const GLbyte * coords) {
  __glintercept_fnptr_glMultiTexCoord2bvOES(texture, coords);
  __glintercept_log(" - glMultiTexCoord2bvOES(texture: %ld (%s), coords: %ld)", texture, __gl_intercept_formatenum(texture), coords);
}

typedef void(*__ctype_glMultiTexCoord2d)(GLenum, GLdouble, GLdouble);
static __ctype_glMultiTexCoord2d __glintercept_fnptr_glMultiTexCoord2d;
void __glintercept_glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t) {
  __glintercept_fnptr_glMultiTexCoord2d(target, s, t);
  __glintercept_log(" - glMultiTexCoord2d(target: %ld (%s), s: %ld, t: %ld)", target, __gl_intercept_formatenum(target), s, t);
}

typedef void(*__ctype_glMultiTexCoord2dARB)(GLenum, GLdouble, GLdouble);
static __ctype_glMultiTexCoord2dARB __glintercept_fnptr_glMultiTexCoord2dARB;
void __glintercept_glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t) {
  __glintercept_fnptr_glMultiTexCoord2dARB(target, s, t);
  __glintercept_log(" - glMultiTexCoord2dARB(target: %ld (%s), s: %ld, t: %ld)", target, __gl_intercept_formatenum(target), s, t);
}

typedef void(*__ctype_glMultiTexCoord2dv)(GLenum, const GLdouble *);
static __ctype_glMultiTexCoord2dv __glintercept_fnptr_glMultiTexCoord2dv;
void __glintercept_glMultiTexCoord2dv(GLenum target, const GLdouble * v) {
  __glintercept_fnptr_glMultiTexCoord2dv(target, v);
  __glintercept_log(" - glMultiTexCoord2dv(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord2dvARB)(GLenum, const GLdouble *);
static __ctype_glMultiTexCoord2dvARB __glintercept_fnptr_glMultiTexCoord2dvARB;
void __glintercept_glMultiTexCoord2dvARB(GLenum target, const GLdouble * v) {
  __glintercept_fnptr_glMultiTexCoord2dvARB(target, v);
  __glintercept_log(" - glMultiTexCoord2dvARB(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord2f)(GLenum, GLfloat, GLfloat);
static __ctype_glMultiTexCoord2f __glintercept_fnptr_glMultiTexCoord2f;
void __glintercept_glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t) {
  __glintercept_fnptr_glMultiTexCoord2f(target, s, t);
  __glintercept_log(" - glMultiTexCoord2f(target: %ld (%s), s: %ld, t: %ld)", target, __gl_intercept_formatenum(target), s, t);
}

typedef void(*__ctype_glMultiTexCoord2fARB)(GLenum, GLfloat, GLfloat);
static __ctype_glMultiTexCoord2fARB __glintercept_fnptr_glMultiTexCoord2fARB;
void __glintercept_glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t) {
  __glintercept_fnptr_glMultiTexCoord2fARB(target, s, t);
  __glintercept_log(" - glMultiTexCoord2fARB(target: %ld (%s), s: %ld, t: %ld)", target, __gl_intercept_formatenum(target), s, t);
}

typedef void(*__ctype_glMultiTexCoord2fv)(GLenum, const GLfloat *);
static __ctype_glMultiTexCoord2fv __glintercept_fnptr_glMultiTexCoord2fv;
void __glintercept_glMultiTexCoord2fv(GLenum target, const GLfloat * v) {
  __glintercept_fnptr_glMultiTexCoord2fv(target, v);
  __glintercept_log(" - glMultiTexCoord2fv(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord2fvARB)(GLenum, const GLfloat *);
static __ctype_glMultiTexCoord2fvARB __glintercept_fnptr_glMultiTexCoord2fvARB;
void __glintercept_glMultiTexCoord2fvARB(GLenum target, const GLfloat * v) {
  __glintercept_fnptr_glMultiTexCoord2fvARB(target, v);
  __glintercept_log(" - glMultiTexCoord2fvARB(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord2hNV)(GLenum, GLhalfNV, GLhalfNV);
static __ctype_glMultiTexCoord2hNV __glintercept_fnptr_glMultiTexCoord2hNV;
void __glintercept_glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t) {
  __glintercept_fnptr_glMultiTexCoord2hNV(target, s, t);
  __glintercept_log(" - glMultiTexCoord2hNV(target: %ld (%s), s: %ld, t: %ld)", target, __gl_intercept_formatenum(target), s, t);
}

typedef void(*__ctype_glMultiTexCoord2hvNV)(GLenum, const GLhalfNV *);
static __ctype_glMultiTexCoord2hvNV __glintercept_fnptr_glMultiTexCoord2hvNV;
void __glintercept_glMultiTexCoord2hvNV(GLenum target, const GLhalfNV * v) {
  __glintercept_fnptr_glMultiTexCoord2hvNV(target, v);
  __glintercept_log(" - glMultiTexCoord2hvNV(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord2i)(GLenum, GLint, GLint);
static __ctype_glMultiTexCoord2i __glintercept_fnptr_glMultiTexCoord2i;
void __glintercept_glMultiTexCoord2i(GLenum target, GLint s, GLint t) {
  __glintercept_fnptr_glMultiTexCoord2i(target, s, t);
  __glintercept_log(" - glMultiTexCoord2i(target: %ld (%s), s: %ld, t: %ld)", target, __gl_intercept_formatenum(target), s, t);
}

typedef void(*__ctype_glMultiTexCoord2iARB)(GLenum, GLint, GLint);
static __ctype_glMultiTexCoord2iARB __glintercept_fnptr_glMultiTexCoord2iARB;
void __glintercept_glMultiTexCoord2iARB(GLenum target, GLint s, GLint t) {
  __glintercept_fnptr_glMultiTexCoord2iARB(target, s, t);
  __glintercept_log(" - glMultiTexCoord2iARB(target: %ld (%s), s: %ld, t: %ld)", target, __gl_intercept_formatenum(target), s, t);
}

typedef void(*__ctype_glMultiTexCoord2iv)(GLenum, const GLint *);
static __ctype_glMultiTexCoord2iv __glintercept_fnptr_glMultiTexCoord2iv;
void __glintercept_glMultiTexCoord2iv(GLenum target, const GLint * v) {
  __glintercept_fnptr_glMultiTexCoord2iv(target, v);
  __glintercept_log(" - glMultiTexCoord2iv(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord2ivARB)(GLenum, const GLint *);
static __ctype_glMultiTexCoord2ivARB __glintercept_fnptr_glMultiTexCoord2ivARB;
void __glintercept_glMultiTexCoord2ivARB(GLenum target, const GLint * v) {
  __glintercept_fnptr_glMultiTexCoord2ivARB(target, v);
  __glintercept_log(" - glMultiTexCoord2ivARB(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord2s)(GLenum, GLshort, GLshort);
static __ctype_glMultiTexCoord2s __glintercept_fnptr_glMultiTexCoord2s;
void __glintercept_glMultiTexCoord2s(GLenum target, GLshort s, GLshort t) {
  __glintercept_fnptr_glMultiTexCoord2s(target, s, t);
  __glintercept_log(" - glMultiTexCoord2s(target: %ld (%s), s: %ld, t: %ld)", target, __gl_intercept_formatenum(target), s, t);
}

typedef void(*__ctype_glMultiTexCoord2sARB)(GLenum, GLshort, GLshort);
static __ctype_glMultiTexCoord2sARB __glintercept_fnptr_glMultiTexCoord2sARB;
void __glintercept_glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t) {
  __glintercept_fnptr_glMultiTexCoord2sARB(target, s, t);
  __glintercept_log(" - glMultiTexCoord2sARB(target: %ld (%s), s: %ld, t: %ld)", target, __gl_intercept_formatenum(target), s, t);
}

typedef void(*__ctype_glMultiTexCoord2sv)(GLenum, const GLshort *);
static __ctype_glMultiTexCoord2sv __glintercept_fnptr_glMultiTexCoord2sv;
void __glintercept_glMultiTexCoord2sv(GLenum target, const GLshort * v) {
  __glintercept_fnptr_glMultiTexCoord2sv(target, v);
  __glintercept_log(" - glMultiTexCoord2sv(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord2svARB)(GLenum, const GLshort *);
static __ctype_glMultiTexCoord2svARB __glintercept_fnptr_glMultiTexCoord2svARB;
void __glintercept_glMultiTexCoord2svARB(GLenum target, const GLshort * v) {
  __glintercept_fnptr_glMultiTexCoord2svARB(target, v);
  __glintercept_log(" - glMultiTexCoord2svARB(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord2xOES)(GLenum, GLfixed, GLfixed);
static __ctype_glMultiTexCoord2xOES __glintercept_fnptr_glMultiTexCoord2xOES;
void __glintercept_glMultiTexCoord2xOES(GLenum texture, GLfixed s, GLfixed t) {
  __glintercept_fnptr_glMultiTexCoord2xOES(texture, s, t);
  __glintercept_log(" - glMultiTexCoord2xOES(texture: %ld (%s), s: %ld, t: %ld)", texture, __gl_intercept_formatenum(texture), s, t);
}

typedef void(*__ctype_glMultiTexCoord2xvOES)(GLenum, const GLfixed *);
static __ctype_glMultiTexCoord2xvOES __glintercept_fnptr_glMultiTexCoord2xvOES;
void __glintercept_glMultiTexCoord2xvOES(GLenum texture, const GLfixed * coords) {
  __glintercept_fnptr_glMultiTexCoord2xvOES(texture, coords);
  __glintercept_log(" - glMultiTexCoord2xvOES(texture: %ld (%s), coords: %ld)", texture, __gl_intercept_formatenum(texture), coords);
}

typedef void(*__ctype_glMultiTexCoord3bOES)(GLenum, GLbyte, GLbyte, GLbyte);
static __ctype_glMultiTexCoord3bOES __glintercept_fnptr_glMultiTexCoord3bOES;
void __glintercept_glMultiTexCoord3bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r) {
  __glintercept_fnptr_glMultiTexCoord3bOES(texture, s, t, r);
  __glintercept_log(" - glMultiTexCoord3bOES(texture: %ld (%s), s: %ld, t: %ld, r: %ld)", texture, __gl_intercept_formatenum(texture), s, t, r);
}

typedef void(*__ctype_glMultiTexCoord3bvOES)(GLenum, const GLbyte *);
static __ctype_glMultiTexCoord3bvOES __glintercept_fnptr_glMultiTexCoord3bvOES;
void __glintercept_glMultiTexCoord3bvOES(GLenum texture, const GLbyte * coords) {
  __glintercept_fnptr_glMultiTexCoord3bvOES(texture, coords);
  __glintercept_log(" - glMultiTexCoord3bvOES(texture: %ld (%s), coords: %ld)", texture, __gl_intercept_formatenum(texture), coords);
}

typedef void(*__ctype_glMultiTexCoord3d)(GLenum, GLdouble, GLdouble, GLdouble);
static __ctype_glMultiTexCoord3d __glintercept_fnptr_glMultiTexCoord3d;
void __glintercept_glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r) {
  __glintercept_fnptr_glMultiTexCoord3d(target, s, t, r);
  __glintercept_log(" - glMultiTexCoord3d(target: %ld (%s), s: %ld, t: %ld, r: %ld)", target, __gl_intercept_formatenum(target), s, t, r);
}

typedef void(*__ctype_glMultiTexCoord3dARB)(GLenum, GLdouble, GLdouble, GLdouble);
static __ctype_glMultiTexCoord3dARB __glintercept_fnptr_glMultiTexCoord3dARB;
void __glintercept_glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r) {
  __glintercept_fnptr_glMultiTexCoord3dARB(target, s, t, r);
  __glintercept_log(" - glMultiTexCoord3dARB(target: %ld (%s), s: %ld, t: %ld, r: %ld)", target, __gl_intercept_formatenum(target), s, t, r);
}

typedef void(*__ctype_glMultiTexCoord3dv)(GLenum, const GLdouble *);
static __ctype_glMultiTexCoord3dv __glintercept_fnptr_glMultiTexCoord3dv;
void __glintercept_glMultiTexCoord3dv(GLenum target, const GLdouble * v) {
  __glintercept_fnptr_glMultiTexCoord3dv(target, v);
  __glintercept_log(" - glMultiTexCoord3dv(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord3dvARB)(GLenum, const GLdouble *);
static __ctype_glMultiTexCoord3dvARB __glintercept_fnptr_glMultiTexCoord3dvARB;
void __glintercept_glMultiTexCoord3dvARB(GLenum target, const GLdouble * v) {
  __glintercept_fnptr_glMultiTexCoord3dvARB(target, v);
  __glintercept_log(" - glMultiTexCoord3dvARB(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord3f)(GLenum, GLfloat, GLfloat, GLfloat);
static __ctype_glMultiTexCoord3f __glintercept_fnptr_glMultiTexCoord3f;
void __glintercept_glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r) {
  __glintercept_fnptr_glMultiTexCoord3f(target, s, t, r);
  __glintercept_log(" - glMultiTexCoord3f(target: %ld (%s), s: %ld, t: %ld, r: %ld)", target, __gl_intercept_formatenum(target), s, t, r);
}

typedef void(*__ctype_glMultiTexCoord3fARB)(GLenum, GLfloat, GLfloat, GLfloat);
static __ctype_glMultiTexCoord3fARB __glintercept_fnptr_glMultiTexCoord3fARB;
void __glintercept_glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r) {
  __glintercept_fnptr_glMultiTexCoord3fARB(target, s, t, r);
  __glintercept_log(" - glMultiTexCoord3fARB(target: %ld (%s), s: %ld, t: %ld, r: %ld)", target, __gl_intercept_formatenum(target), s, t, r);
}

typedef void(*__ctype_glMultiTexCoord3fv)(GLenum, const GLfloat *);
static __ctype_glMultiTexCoord3fv __glintercept_fnptr_glMultiTexCoord3fv;
void __glintercept_glMultiTexCoord3fv(GLenum target, const GLfloat * v) {
  __glintercept_fnptr_glMultiTexCoord3fv(target, v);
  __glintercept_log(" - glMultiTexCoord3fv(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord3fvARB)(GLenum, const GLfloat *);
static __ctype_glMultiTexCoord3fvARB __glintercept_fnptr_glMultiTexCoord3fvARB;
void __glintercept_glMultiTexCoord3fvARB(GLenum target, const GLfloat * v) {
  __glintercept_fnptr_glMultiTexCoord3fvARB(target, v);
  __glintercept_log(" - glMultiTexCoord3fvARB(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord3hNV)(GLenum, GLhalfNV, GLhalfNV, GLhalfNV);
static __ctype_glMultiTexCoord3hNV __glintercept_fnptr_glMultiTexCoord3hNV;
void __glintercept_glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r) {
  __glintercept_fnptr_glMultiTexCoord3hNV(target, s, t, r);
  __glintercept_log(" - glMultiTexCoord3hNV(target: %ld (%s), s: %ld, t: %ld, r: %ld)", target, __gl_intercept_formatenum(target), s, t, r);
}

typedef void(*__ctype_glMultiTexCoord3hvNV)(GLenum, const GLhalfNV *);
static __ctype_glMultiTexCoord3hvNV __glintercept_fnptr_glMultiTexCoord3hvNV;
void __glintercept_glMultiTexCoord3hvNV(GLenum target, const GLhalfNV * v) {
  __glintercept_fnptr_glMultiTexCoord3hvNV(target, v);
  __glintercept_log(" - glMultiTexCoord3hvNV(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord3i)(GLenum, GLint, GLint, GLint);
static __ctype_glMultiTexCoord3i __glintercept_fnptr_glMultiTexCoord3i;
void __glintercept_glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r) {
  __glintercept_fnptr_glMultiTexCoord3i(target, s, t, r);
  __glintercept_log(" - glMultiTexCoord3i(target: %ld (%s), s: %ld, t: %ld, r: %ld)", target, __gl_intercept_formatenum(target), s, t, r);
}

typedef void(*__ctype_glMultiTexCoord3iARB)(GLenum, GLint, GLint, GLint);
static __ctype_glMultiTexCoord3iARB __glintercept_fnptr_glMultiTexCoord3iARB;
void __glintercept_glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r) {
  __glintercept_fnptr_glMultiTexCoord3iARB(target, s, t, r);
  __glintercept_log(" - glMultiTexCoord3iARB(target: %ld (%s), s: %ld, t: %ld, r: %ld)", target, __gl_intercept_formatenum(target), s, t, r);
}

typedef void(*__ctype_glMultiTexCoord3iv)(GLenum, const GLint *);
static __ctype_glMultiTexCoord3iv __glintercept_fnptr_glMultiTexCoord3iv;
void __glintercept_glMultiTexCoord3iv(GLenum target, const GLint * v) {
  __glintercept_fnptr_glMultiTexCoord3iv(target, v);
  __glintercept_log(" - glMultiTexCoord3iv(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord3ivARB)(GLenum, const GLint *);
static __ctype_glMultiTexCoord3ivARB __glintercept_fnptr_glMultiTexCoord3ivARB;
void __glintercept_glMultiTexCoord3ivARB(GLenum target, const GLint * v) {
  __glintercept_fnptr_glMultiTexCoord3ivARB(target, v);
  __glintercept_log(" - glMultiTexCoord3ivARB(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord3s)(GLenum, GLshort, GLshort, GLshort);
static __ctype_glMultiTexCoord3s __glintercept_fnptr_glMultiTexCoord3s;
void __glintercept_glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r) {
  __glintercept_fnptr_glMultiTexCoord3s(target, s, t, r);
  __glintercept_log(" - glMultiTexCoord3s(target: %ld (%s), s: %ld, t: %ld, r: %ld)", target, __gl_intercept_formatenum(target), s, t, r);
}

typedef void(*__ctype_glMultiTexCoord3sARB)(GLenum, GLshort, GLshort, GLshort);
static __ctype_glMultiTexCoord3sARB __glintercept_fnptr_glMultiTexCoord3sARB;
void __glintercept_glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r) {
  __glintercept_fnptr_glMultiTexCoord3sARB(target, s, t, r);
  __glintercept_log(" - glMultiTexCoord3sARB(target: %ld (%s), s: %ld, t: %ld, r: %ld)", target, __gl_intercept_formatenum(target), s, t, r);
}

typedef void(*__ctype_glMultiTexCoord3sv)(GLenum, const GLshort *);
static __ctype_glMultiTexCoord3sv __glintercept_fnptr_glMultiTexCoord3sv;
void __glintercept_glMultiTexCoord3sv(GLenum target, const GLshort * v) {
  __glintercept_fnptr_glMultiTexCoord3sv(target, v);
  __glintercept_log(" - glMultiTexCoord3sv(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord3svARB)(GLenum, const GLshort *);
static __ctype_glMultiTexCoord3svARB __glintercept_fnptr_glMultiTexCoord3svARB;
void __glintercept_glMultiTexCoord3svARB(GLenum target, const GLshort * v) {
  __glintercept_fnptr_glMultiTexCoord3svARB(target, v);
  __glintercept_log(" - glMultiTexCoord3svARB(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord3xOES)(GLenum, GLfixed, GLfixed, GLfixed);
static __ctype_glMultiTexCoord3xOES __glintercept_fnptr_glMultiTexCoord3xOES;
void __glintercept_glMultiTexCoord3xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r) {
  __glintercept_fnptr_glMultiTexCoord3xOES(texture, s, t, r);
  __glintercept_log(" - glMultiTexCoord3xOES(texture: %ld (%s), s: %ld, t: %ld, r: %ld)", texture, __gl_intercept_formatenum(texture), s, t, r);
}

typedef void(*__ctype_glMultiTexCoord3xvOES)(GLenum, const GLfixed *);
static __ctype_glMultiTexCoord3xvOES __glintercept_fnptr_glMultiTexCoord3xvOES;
void __glintercept_glMultiTexCoord3xvOES(GLenum texture, const GLfixed * coords) {
  __glintercept_fnptr_glMultiTexCoord3xvOES(texture, coords);
  __glintercept_log(" - glMultiTexCoord3xvOES(texture: %ld (%s), coords: %ld)", texture, __gl_intercept_formatenum(texture), coords);
}

typedef void(*__ctype_glMultiTexCoord4bOES)(GLenum, GLbyte, GLbyte, GLbyte, GLbyte);
static __ctype_glMultiTexCoord4bOES __glintercept_fnptr_glMultiTexCoord4bOES;
void __glintercept_glMultiTexCoord4bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q) {
  __glintercept_fnptr_glMultiTexCoord4bOES(texture, s, t, r, q);
  __glintercept_log(" - glMultiTexCoord4bOES(texture: %ld (%s), s: %ld, t: %ld, r: %ld, q: %ld)", texture, __gl_intercept_formatenum(texture), s, t, r, q);
}

typedef void(*__ctype_glMultiTexCoord4bvOES)(GLenum, const GLbyte *);
static __ctype_glMultiTexCoord4bvOES __glintercept_fnptr_glMultiTexCoord4bvOES;
void __glintercept_glMultiTexCoord4bvOES(GLenum texture, const GLbyte * coords) {
  __glintercept_fnptr_glMultiTexCoord4bvOES(texture, coords);
  __glintercept_log(" - glMultiTexCoord4bvOES(texture: %ld (%s), coords: %ld)", texture, __gl_intercept_formatenum(texture), coords);
}

typedef void(*__ctype_glMultiTexCoord4d)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glMultiTexCoord4d __glintercept_fnptr_glMultiTexCoord4d;
void __glintercept_glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
  __glintercept_fnptr_glMultiTexCoord4d(target, s, t, r, q);
  __glintercept_log(" - glMultiTexCoord4d(target: %ld (%s), s: %ld, t: %ld, r: %ld, q: %ld)", target, __gl_intercept_formatenum(target), s, t, r, q);
}

typedef void(*__ctype_glMultiTexCoord4dARB)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glMultiTexCoord4dARB __glintercept_fnptr_glMultiTexCoord4dARB;
void __glintercept_glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
  __glintercept_fnptr_glMultiTexCoord4dARB(target, s, t, r, q);
  __glintercept_log(" - glMultiTexCoord4dARB(target: %ld (%s), s: %ld, t: %ld, r: %ld, q: %ld)", target, __gl_intercept_formatenum(target), s, t, r, q);
}

typedef void(*__ctype_glMultiTexCoord4dv)(GLenum, const GLdouble *);
static __ctype_glMultiTexCoord4dv __glintercept_fnptr_glMultiTexCoord4dv;
void __glintercept_glMultiTexCoord4dv(GLenum target, const GLdouble * v) {
  __glintercept_fnptr_glMultiTexCoord4dv(target, v);
  __glintercept_log(" - glMultiTexCoord4dv(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord4dvARB)(GLenum, const GLdouble *);
static __ctype_glMultiTexCoord4dvARB __glintercept_fnptr_glMultiTexCoord4dvARB;
void __glintercept_glMultiTexCoord4dvARB(GLenum target, const GLdouble * v) {
  __glintercept_fnptr_glMultiTexCoord4dvARB(target, v);
  __glintercept_log(" - glMultiTexCoord4dvARB(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord4f)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glMultiTexCoord4f __glintercept_fnptr_glMultiTexCoord4f;
void __glintercept_glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
  __glintercept_fnptr_glMultiTexCoord4f(target, s, t, r, q);
  __glintercept_log(" - glMultiTexCoord4f(target: %ld (%s), s: %ld, t: %ld, r: %ld, q: %ld)", target, __gl_intercept_formatenum(target), s, t, r, q);
}

typedef void(*__ctype_glMultiTexCoord4fARB)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glMultiTexCoord4fARB __glintercept_fnptr_glMultiTexCoord4fARB;
void __glintercept_glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
  __glintercept_fnptr_glMultiTexCoord4fARB(target, s, t, r, q);
  __glintercept_log(" - glMultiTexCoord4fARB(target: %ld (%s), s: %ld, t: %ld, r: %ld, q: %ld)", target, __gl_intercept_formatenum(target), s, t, r, q);
}

typedef void(*__ctype_glMultiTexCoord4fv)(GLenum, const GLfloat *);
static __ctype_glMultiTexCoord4fv __glintercept_fnptr_glMultiTexCoord4fv;
void __glintercept_glMultiTexCoord4fv(GLenum target, const GLfloat * v) {
  __glintercept_fnptr_glMultiTexCoord4fv(target, v);
  __glintercept_log(" - glMultiTexCoord4fv(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord4fvARB)(GLenum, const GLfloat *);
static __ctype_glMultiTexCoord4fvARB __glintercept_fnptr_glMultiTexCoord4fvARB;
void __glintercept_glMultiTexCoord4fvARB(GLenum target, const GLfloat * v) {
  __glintercept_fnptr_glMultiTexCoord4fvARB(target, v);
  __glintercept_log(" - glMultiTexCoord4fvARB(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord4hNV)(GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
static __ctype_glMultiTexCoord4hNV __glintercept_fnptr_glMultiTexCoord4hNV;
void __glintercept_glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) {
  __glintercept_fnptr_glMultiTexCoord4hNV(target, s, t, r, q);
  __glintercept_log(" - glMultiTexCoord4hNV(target: %ld (%s), s: %ld, t: %ld, r: %ld, q: %ld)", target, __gl_intercept_formatenum(target), s, t, r, q);
}

typedef void(*__ctype_glMultiTexCoord4hvNV)(GLenum, const GLhalfNV *);
static __ctype_glMultiTexCoord4hvNV __glintercept_fnptr_glMultiTexCoord4hvNV;
void __glintercept_glMultiTexCoord4hvNV(GLenum target, const GLhalfNV * v) {
  __glintercept_fnptr_glMultiTexCoord4hvNV(target, v);
  __glintercept_log(" - glMultiTexCoord4hvNV(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord4i)(GLenum, GLint, GLint, GLint, GLint);
static __ctype_glMultiTexCoord4i __glintercept_fnptr_glMultiTexCoord4i;
void __glintercept_glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q) {
  __glintercept_fnptr_glMultiTexCoord4i(target, s, t, r, q);
  __glintercept_log(" - glMultiTexCoord4i(target: %ld (%s), s: %ld, t: %ld, r: %ld, q: %ld)", target, __gl_intercept_formatenum(target), s, t, r, q);
}

typedef void(*__ctype_glMultiTexCoord4iARB)(GLenum, GLint, GLint, GLint, GLint);
static __ctype_glMultiTexCoord4iARB __glintercept_fnptr_glMultiTexCoord4iARB;
void __glintercept_glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q) {
  __glintercept_fnptr_glMultiTexCoord4iARB(target, s, t, r, q);
  __glintercept_log(" - glMultiTexCoord4iARB(target: %ld (%s), s: %ld, t: %ld, r: %ld, q: %ld)", target, __gl_intercept_formatenum(target), s, t, r, q);
}

typedef void(*__ctype_glMultiTexCoord4iv)(GLenum, const GLint *);
static __ctype_glMultiTexCoord4iv __glintercept_fnptr_glMultiTexCoord4iv;
void __glintercept_glMultiTexCoord4iv(GLenum target, const GLint * v) {
  __glintercept_fnptr_glMultiTexCoord4iv(target, v);
  __glintercept_log(" - glMultiTexCoord4iv(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord4ivARB)(GLenum, const GLint *);
static __ctype_glMultiTexCoord4ivARB __glintercept_fnptr_glMultiTexCoord4ivARB;
void __glintercept_glMultiTexCoord4ivARB(GLenum target, const GLint * v) {
  __glintercept_fnptr_glMultiTexCoord4ivARB(target, v);
  __glintercept_log(" - glMultiTexCoord4ivARB(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord4s)(GLenum, GLshort, GLshort, GLshort, GLshort);
static __ctype_glMultiTexCoord4s __glintercept_fnptr_glMultiTexCoord4s;
void __glintercept_glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) {
  __glintercept_fnptr_glMultiTexCoord4s(target, s, t, r, q);
  __glintercept_log(" - glMultiTexCoord4s(target: %ld (%s), s: %ld, t: %ld, r: %ld, q: %ld)", target, __gl_intercept_formatenum(target), s, t, r, q);
}

typedef void(*__ctype_glMultiTexCoord4sARB)(GLenum, GLshort, GLshort, GLshort, GLshort);
static __ctype_glMultiTexCoord4sARB __glintercept_fnptr_glMultiTexCoord4sARB;
void __glintercept_glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) {
  __glintercept_fnptr_glMultiTexCoord4sARB(target, s, t, r, q);
  __glintercept_log(" - glMultiTexCoord4sARB(target: %ld (%s), s: %ld, t: %ld, r: %ld, q: %ld)", target, __gl_intercept_formatenum(target), s, t, r, q);
}

typedef void(*__ctype_glMultiTexCoord4sv)(GLenum, const GLshort *);
static __ctype_glMultiTexCoord4sv __glintercept_fnptr_glMultiTexCoord4sv;
void __glintercept_glMultiTexCoord4sv(GLenum target, const GLshort * v) {
  __glintercept_fnptr_glMultiTexCoord4sv(target, v);
  __glintercept_log(" - glMultiTexCoord4sv(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord4svARB)(GLenum, const GLshort *);
static __ctype_glMultiTexCoord4svARB __glintercept_fnptr_glMultiTexCoord4svARB;
void __glintercept_glMultiTexCoord4svARB(GLenum target, const GLshort * v) {
  __glintercept_fnptr_glMultiTexCoord4svARB(target, v);
  __glintercept_log(" - glMultiTexCoord4svARB(target: %ld (%s), v: %ld)", target, __gl_intercept_formatenum(target), v);
}

typedef void(*__ctype_glMultiTexCoord4x)(GLenum, GLfixed, GLfixed, GLfixed, GLfixed);
static __ctype_glMultiTexCoord4x __glintercept_fnptr_glMultiTexCoord4x;
void __glintercept_glMultiTexCoord4x(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) {
  __glintercept_fnptr_glMultiTexCoord4x(texture, s, t, r, q);
  __glintercept_log(" - glMultiTexCoord4x(texture: %ld (%s), s: %ld, t: %ld, r: %ld, q: %ld)", texture, __gl_intercept_formatenum(texture), s, t, r, q);
}

typedef void(*__ctype_glMultiTexCoord4xOES)(GLenum, GLfixed, GLfixed, GLfixed, GLfixed);
static __ctype_glMultiTexCoord4xOES __glintercept_fnptr_glMultiTexCoord4xOES;
void __glintercept_glMultiTexCoord4xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) {
  __glintercept_fnptr_glMultiTexCoord4xOES(texture, s, t, r, q);
  __glintercept_log(" - glMultiTexCoord4xOES(texture: %ld (%s), s: %ld, t: %ld, r: %ld, q: %ld)", texture, __gl_intercept_formatenum(texture), s, t, r, q);
}

typedef void(*__ctype_glMultiTexCoord4xvOES)(GLenum, const GLfixed *);
static __ctype_glMultiTexCoord4xvOES __glintercept_fnptr_glMultiTexCoord4xvOES;
void __glintercept_glMultiTexCoord4xvOES(GLenum texture, const GLfixed * coords) {
  __glintercept_fnptr_glMultiTexCoord4xvOES(texture, coords);
  __glintercept_log(" - glMultiTexCoord4xvOES(texture: %ld (%s), coords: %ld)", texture, __gl_intercept_formatenum(texture), coords);
}

typedef void(*__ctype_glMultiTexCoordP1ui)(GLenum, GLenum, GLuint);
static __ctype_glMultiTexCoordP1ui __glintercept_fnptr_glMultiTexCoordP1ui;
void __glintercept_glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords) {
  __glintercept_fnptr_glMultiTexCoordP1ui(texture, type, coords);
  __glintercept_log(" - glMultiTexCoordP1ui(texture: %ld (%s), type: %ld (%s), coords: %ld)", texture, __gl_intercept_formatenum(texture), type, __gl_intercept_formatenum(type), coords);
}

typedef void(*__ctype_glMultiTexCoordP1uiv)(GLenum, GLenum, const GLuint *);
static __ctype_glMultiTexCoordP1uiv __glintercept_fnptr_glMultiTexCoordP1uiv;
void __glintercept_glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint * coords) {
  __glintercept_fnptr_glMultiTexCoordP1uiv(texture, type, coords);
  __glintercept_log(" - glMultiTexCoordP1uiv(texture: %ld (%s), type: %ld (%s), coords: %ld)", texture, __gl_intercept_formatenum(texture), type, __gl_intercept_formatenum(type), coords);
}

typedef void(*__ctype_glMultiTexCoordP2ui)(GLenum, GLenum, GLuint);
static __ctype_glMultiTexCoordP2ui __glintercept_fnptr_glMultiTexCoordP2ui;
void __glintercept_glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords) {
  __glintercept_fnptr_glMultiTexCoordP2ui(texture, type, coords);
  __glintercept_log(" - glMultiTexCoordP2ui(texture: %ld (%s), type: %ld (%s), coords: %ld)", texture, __gl_intercept_formatenum(texture), type, __gl_intercept_formatenum(type), coords);
}

typedef void(*__ctype_glMultiTexCoordP2uiv)(GLenum, GLenum, const GLuint *);
static __ctype_glMultiTexCoordP2uiv __glintercept_fnptr_glMultiTexCoordP2uiv;
void __glintercept_glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint * coords) {
  __glintercept_fnptr_glMultiTexCoordP2uiv(texture, type, coords);
  __glintercept_log(" - glMultiTexCoordP2uiv(texture: %ld (%s), type: %ld (%s), coords: %ld)", texture, __gl_intercept_formatenum(texture), type, __gl_intercept_formatenum(type), coords);
}

typedef void(*__ctype_glMultiTexCoordP3ui)(GLenum, GLenum, GLuint);
static __ctype_glMultiTexCoordP3ui __glintercept_fnptr_glMultiTexCoordP3ui;
void __glintercept_glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords) {
  __glintercept_fnptr_glMultiTexCoordP3ui(texture, type, coords);
  __glintercept_log(" - glMultiTexCoordP3ui(texture: %ld (%s), type: %ld (%s), coords: %ld)", texture, __gl_intercept_formatenum(texture), type, __gl_intercept_formatenum(type), coords);
}

typedef void(*__ctype_glMultiTexCoordP3uiv)(GLenum, GLenum, const GLuint *);
static __ctype_glMultiTexCoordP3uiv __glintercept_fnptr_glMultiTexCoordP3uiv;
void __glintercept_glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint * coords) {
  __glintercept_fnptr_glMultiTexCoordP3uiv(texture, type, coords);
  __glintercept_log(" - glMultiTexCoordP3uiv(texture: %ld (%s), type: %ld (%s), coords: %ld)", texture, __gl_intercept_formatenum(texture), type, __gl_intercept_formatenum(type), coords);
}

typedef void(*__ctype_glMultiTexCoordP4ui)(GLenum, GLenum, GLuint);
static __ctype_glMultiTexCoordP4ui __glintercept_fnptr_glMultiTexCoordP4ui;
void __glintercept_glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords) {
  __glintercept_fnptr_glMultiTexCoordP4ui(texture, type, coords);
  __glintercept_log(" - glMultiTexCoordP4ui(texture: %ld (%s), type: %ld (%s), coords: %ld)", texture, __gl_intercept_formatenum(texture), type, __gl_intercept_formatenum(type), coords);
}

typedef void(*__ctype_glMultiTexCoordP4uiv)(GLenum, GLenum, const GLuint *);
static __ctype_glMultiTexCoordP4uiv __glintercept_fnptr_glMultiTexCoordP4uiv;
void __glintercept_glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint * coords) {
  __glintercept_fnptr_glMultiTexCoordP4uiv(texture, type, coords);
  __glintercept_log(" - glMultiTexCoordP4uiv(texture: %ld (%s), type: %ld (%s), coords: %ld)", texture, __gl_intercept_formatenum(texture), type, __gl_intercept_formatenum(type), coords);
}

typedef void(*__ctype_glMultiTexCoordPointerEXT)(GLenum, GLint, GLenum, GLsizei, const void *);
static __ctype_glMultiTexCoordPointerEXT __glintercept_fnptr_glMultiTexCoordPointerEXT;
void __glintercept_glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer);
  __glintercept_log(" - glMultiTexCoordPointerEXT(texunit: %ld (%s), size: %ld, type: %ld (%s), stride: %ld, pointer: %ld)", texunit, __gl_intercept_formatenum(texunit), size, type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glMultiTexEnvfEXT)(GLenum, GLenum, GLenum, GLfloat);
static __ctype_glMultiTexEnvfEXT __glintercept_fnptr_glMultiTexEnvfEXT;
void __glintercept_glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) {
  __glintercept_fnptr_glMultiTexEnvfEXT(texunit, target, pname, param);
  __glintercept_log(" - glMultiTexEnvfEXT(texunit: %ld (%s), target: %ld (%s), pname: %ld (%s), param: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glMultiTexEnvfvEXT)(GLenum, GLenum, GLenum, const GLfloat *);
static __ctype_glMultiTexEnvfvEXT __glintercept_fnptr_glMultiTexEnvfvEXT;
void __glintercept_glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glMultiTexEnvfvEXT(texunit, target, pname, params);
  __glintercept_log(" - glMultiTexEnvfvEXT(texunit: %ld (%s), target: %ld (%s), pname: %ld (%s), params: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glMultiTexEnviEXT)(GLenum, GLenum, GLenum, GLint);
static __ctype_glMultiTexEnviEXT __glintercept_fnptr_glMultiTexEnviEXT;
void __glintercept_glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) {
  __glintercept_fnptr_glMultiTexEnviEXT(texunit, target, pname, param);
  __glintercept_log(" - glMultiTexEnviEXT(texunit: %ld (%s), target: %ld (%s), pname: %ld (%s), param: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glMultiTexEnvivEXT)(GLenum, GLenum, GLenum, const GLint *);
static __ctype_glMultiTexEnvivEXT __glintercept_fnptr_glMultiTexEnvivEXT;
void __glintercept_glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glMultiTexEnvivEXT(texunit, target, pname, params);
  __glintercept_log(" - glMultiTexEnvivEXT(texunit: %ld (%s), target: %ld (%s), pname: %ld (%s), params: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glMultiTexGendEXT)(GLenum, GLenum, GLenum, GLdouble);
static __ctype_glMultiTexGendEXT __glintercept_fnptr_glMultiTexGendEXT;
void __glintercept_glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param) {
  __glintercept_fnptr_glMultiTexGendEXT(texunit, coord, pname, param);
  __glintercept_log(" - glMultiTexGendEXT(texunit: %ld (%s), coord: %ld (%s), pname: %ld (%s), param: %ld)", texunit, __gl_intercept_formatenum(texunit), coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glMultiTexGendvEXT)(GLenum, GLenum, GLenum, const GLdouble *);
static __ctype_glMultiTexGendvEXT __glintercept_fnptr_glMultiTexGendvEXT;
void __glintercept_glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble * params) {
  __glintercept_fnptr_glMultiTexGendvEXT(texunit, coord, pname, params);
  __glintercept_log(" - glMultiTexGendvEXT(texunit: %ld (%s), coord: %ld (%s), pname: %ld (%s), params: %ld)", texunit, __gl_intercept_formatenum(texunit), coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glMultiTexGenfEXT)(GLenum, GLenum, GLenum, GLfloat);
static __ctype_glMultiTexGenfEXT __glintercept_fnptr_glMultiTexGenfEXT;
void __glintercept_glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param) {
  __glintercept_fnptr_glMultiTexGenfEXT(texunit, coord, pname, param);
  __glintercept_log(" - glMultiTexGenfEXT(texunit: %ld (%s), coord: %ld (%s), pname: %ld (%s), param: %ld)", texunit, __gl_intercept_formatenum(texunit), coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glMultiTexGenfvEXT)(GLenum, GLenum, GLenum, const GLfloat *);
static __ctype_glMultiTexGenfvEXT __glintercept_fnptr_glMultiTexGenfvEXT;
void __glintercept_glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glMultiTexGenfvEXT(texunit, coord, pname, params);
  __glintercept_log(" - glMultiTexGenfvEXT(texunit: %ld (%s), coord: %ld (%s), pname: %ld (%s), params: %ld)", texunit, __gl_intercept_formatenum(texunit), coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glMultiTexGeniEXT)(GLenum, GLenum, GLenum, GLint);
static __ctype_glMultiTexGeniEXT __glintercept_fnptr_glMultiTexGeniEXT;
void __glintercept_glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param) {
  __glintercept_fnptr_glMultiTexGeniEXT(texunit, coord, pname, param);
  __glintercept_log(" - glMultiTexGeniEXT(texunit: %ld (%s), coord: %ld (%s), pname: %ld (%s), param: %ld)", texunit, __gl_intercept_formatenum(texunit), coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glMultiTexGenivEXT)(GLenum, GLenum, GLenum, const GLint *);
static __ctype_glMultiTexGenivEXT __glintercept_fnptr_glMultiTexGenivEXT;
void __glintercept_glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glMultiTexGenivEXT(texunit, coord, pname, params);
  __glintercept_log(" - glMultiTexGenivEXT(texunit: %ld (%s), coord: %ld (%s), pname: %ld (%s), params: %ld)", texunit, __gl_intercept_formatenum(texunit), coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glMultiTexImage1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *);
static __ctype_glMultiTexImage1DEXT __glintercept_fnptr_glMultiTexImage1DEXT;
void __glintercept_glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels);
  __glintercept_log(" - glMultiTexImage1DEXT(texunit: %ld (%s), target: %ld (%s), level: %ld, internalformat: %ld, width: %ld, border: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), level, internalformat, width, border, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glMultiTexImage2DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
static __ctype_glMultiTexImage2DEXT __glintercept_fnptr_glMultiTexImage2DEXT;
void __glintercept_glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels);
  __glintercept_log(" - glMultiTexImage2DEXT(texunit: %ld (%s), target: %ld (%s), level: %ld, internalformat: %ld, width: %ld, height: %ld, border: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), level, internalformat, width, height, border, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glMultiTexImage3DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
static __ctype_glMultiTexImage3DEXT __glintercept_fnptr_glMultiTexImage3DEXT;
void __glintercept_glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
  __glintercept_log(" - glMultiTexImage3DEXT(texunit: %ld (%s), target: %ld (%s), level: %ld, internalformat: %ld, width: %ld, height: %ld, depth: %ld, border: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), level, internalformat, width, height, depth, border, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glMultiTexParameterIivEXT)(GLenum, GLenum, GLenum, const GLint *);
static __ctype_glMultiTexParameterIivEXT __glintercept_fnptr_glMultiTexParameterIivEXT;
void __glintercept_glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glMultiTexParameterIivEXT(texunit, target, pname, params);
  __glintercept_log(" - glMultiTexParameterIivEXT(texunit: %ld (%s), target: %ld (%s), pname: %ld (%s), params: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glMultiTexParameterIuivEXT)(GLenum, GLenum, GLenum, const GLuint *);
static __ctype_glMultiTexParameterIuivEXT __glintercept_fnptr_glMultiTexParameterIuivEXT;
void __glintercept_glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint * params) {
  __glintercept_fnptr_glMultiTexParameterIuivEXT(texunit, target, pname, params);
  __glintercept_log(" - glMultiTexParameterIuivEXT(texunit: %ld (%s), target: %ld (%s), pname: %ld (%s), params: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glMultiTexParameterfEXT)(GLenum, GLenum, GLenum, GLfloat);
static __ctype_glMultiTexParameterfEXT __glintercept_fnptr_glMultiTexParameterfEXT;
void __glintercept_glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) {
  __glintercept_fnptr_glMultiTexParameterfEXT(texunit, target, pname, param);
  __glintercept_log(" - glMultiTexParameterfEXT(texunit: %ld (%s), target: %ld (%s), pname: %ld (%s), param: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glMultiTexParameterfvEXT)(GLenum, GLenum, GLenum, const GLfloat *);
static __ctype_glMultiTexParameterfvEXT __glintercept_fnptr_glMultiTexParameterfvEXT;
void __glintercept_glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glMultiTexParameterfvEXT(texunit, target, pname, params);
  __glintercept_log(" - glMultiTexParameterfvEXT(texunit: %ld (%s), target: %ld (%s), pname: %ld (%s), params: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glMultiTexParameteriEXT)(GLenum, GLenum, GLenum, GLint);
static __ctype_glMultiTexParameteriEXT __glintercept_fnptr_glMultiTexParameteriEXT;
void __glintercept_glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) {
  __glintercept_fnptr_glMultiTexParameteriEXT(texunit, target, pname, param);
  __glintercept_log(" - glMultiTexParameteriEXT(texunit: %ld (%s), target: %ld (%s), pname: %ld (%s), param: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glMultiTexParameterivEXT)(GLenum, GLenum, GLenum, const GLint *);
static __ctype_glMultiTexParameterivEXT __glintercept_fnptr_glMultiTexParameterivEXT;
void __glintercept_glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glMultiTexParameterivEXT(texunit, target, pname, params);
  __glintercept_log(" - glMultiTexParameterivEXT(texunit: %ld (%s), target: %ld (%s), pname: %ld (%s), params: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glMultiTexRenderbufferEXT)(GLenum, GLenum, GLuint);
static __ctype_glMultiTexRenderbufferEXT __glintercept_fnptr_glMultiTexRenderbufferEXT;
void __glintercept_glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer) {
  __glintercept_fnptr_glMultiTexRenderbufferEXT(texunit, target, renderbuffer);
  __glintercept_log(" - glMultiTexRenderbufferEXT(texunit: %ld (%s), target: %ld (%s), renderbuffer: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), renderbuffer);
}

typedef void(*__ctype_glMultiTexSubImage1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
static __ctype_glMultiTexSubImage1DEXT __glintercept_fnptr_glMultiTexSubImage1DEXT;
void __glintercept_glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels);
  __glintercept_log(" - glMultiTexSubImage1DEXT(texunit: %ld (%s), target: %ld (%s), level: %ld, xoffset: %ld, width: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), level, xoffset, width, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glMultiTexSubImage2DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
static __ctype_glMultiTexSubImage2DEXT __glintercept_fnptr_glMultiTexSubImage2DEXT;
void __glintercept_glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
  __glintercept_log(" - glMultiTexSubImage2DEXT(texunit: %ld (%s), target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, width: %ld, height: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), level, xoffset, yoffset, width, height, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glMultiTexSubImage3DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
static __ctype_glMultiTexSubImage3DEXT __glintercept_fnptr_glMultiTexSubImage3DEXT;
void __glintercept_glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  __glintercept_log(" - glMultiTexSubImage3DEXT(texunit: %ld (%s), target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", texunit, __gl_intercept_formatenum(texunit), target, __gl_intercept_formatenum(target), level, xoffset, yoffset, zoffset, width, height, depth, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glMulticastBarrierNV)();
static __ctype_glMulticastBarrierNV __glintercept_fnptr_glMulticastBarrierNV;
void __glintercept_glMulticastBarrierNV() {
  __glintercept_fnptr_glMulticastBarrierNV();
  __glintercept_log(" - glMulticastBarrierNV()");
}

typedef void(*__ctype_glMulticastBlitFramebufferNV)(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
static __ctype_glMulticastBlitFramebufferNV __glintercept_fnptr_glMulticastBlitFramebufferNV;
void __glintercept_glMulticastBlitFramebufferNV(GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  __glintercept_fnptr_glMulticastBlitFramebufferNV(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  __glintercept_log(" - glMulticastBlitFramebufferNV(srcGpu: %ld, dstGpu: %ld, srcX0: %ld, srcY0: %ld, srcX1: %ld, srcY1: %ld, dstX0: %ld, dstY0: %ld, dstX1: %ld, dstY1: %ld, mask: %ld, filter: %ld (%s))", srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter, __gl_intercept_formatenum(filter));
}

typedef void(*__ctype_glMulticastBufferSubDataNV)(GLbitfield, GLuint, GLintptr, GLsizeiptr, const void *);
static __ctype_glMulticastBufferSubDataNV __glintercept_fnptr_glMulticastBufferSubDataNV;
void __glintercept_glMulticastBufferSubDataNV(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) {
  __glintercept_fnptr_glMulticastBufferSubDataNV(gpuMask, buffer, offset, size, data);
  __glintercept_log(" - glMulticastBufferSubDataNV(gpuMask: %ld, buffer: %ld, offset: %ld, size: %ld, data: %ld)", gpuMask, buffer, offset, size, data);
}

typedef void(*__ctype_glMulticastCopyBufferSubDataNV)(GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
static __ctype_glMulticastCopyBufferSubDataNV __glintercept_fnptr_glMulticastCopyBufferSubDataNV;
void __glintercept_glMulticastCopyBufferSubDataNV(GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  __glintercept_fnptr_glMulticastCopyBufferSubDataNV(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size);
  __glintercept_log(" - glMulticastCopyBufferSubDataNV(readGpu: %ld, writeGpuMask: %ld, readBuffer: %ld, writeBuffer: %ld, readOffset: %ld, writeOffset: %ld, size: %ld)", readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size);
}

typedef void(*__ctype_glMulticastCopyImageSubDataNV)(GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
static __ctype_glMulticastCopyImageSubDataNV __glintercept_fnptr_glMulticastCopyImageSubDataNV;
void __glintercept_glMulticastCopyImageSubDataNV(GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
  __glintercept_fnptr_glMulticastCopyImageSubDataNV(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  __glintercept_log(" - glMulticastCopyImageSubDataNV(srcGpu: %ld, dstGpuMask: %ld, srcName: %ld, srcTarget: %ld (%s), srcLevel: %ld, srcX: %ld, srcY: %ld, srcZ: %ld, dstName: %ld, dstTarget: %ld (%s), dstLevel: %ld, dstX: %ld, dstY: %ld, dstZ: %ld, srcWidth: %ld, srcHeight: %ld, srcDepth: %ld)", srcGpu, dstGpuMask, srcName, srcTarget, __gl_intercept_formatenum(srcTarget), srcLevel, srcX, srcY, srcZ, dstName, dstTarget, __gl_intercept_formatenum(dstTarget), dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}

typedef void(*__ctype_glMulticastFramebufferSampleLocationsfvNV)(GLuint, GLuint, GLuint, GLsizei, const GLfloat *);
static __ctype_glMulticastFramebufferSampleLocationsfvNV __glintercept_fnptr_glMulticastFramebufferSampleLocationsfvNV;
void __glintercept_glMulticastFramebufferSampleLocationsfvNV(GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) {
  __glintercept_fnptr_glMulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v);
  __glintercept_log(" - glMulticastFramebufferSampleLocationsfvNV(gpu: %ld, framebuffer: %ld, start: %ld, count: %ld, v: %ld)", gpu, framebuffer, start, count, v);
}

typedef void(*__ctype_glMulticastGetQueryObjecti64vNV)(GLuint, GLuint, GLenum, GLint64 *);
static __ctype_glMulticastGetQueryObjecti64vNV __glintercept_fnptr_glMulticastGetQueryObjecti64vNV;
void __glintercept_glMulticastGetQueryObjecti64vNV(GLuint gpu, GLuint id, GLenum pname, GLint64 * params) {
  __glintercept_fnptr_glMulticastGetQueryObjecti64vNV(gpu, id, pname, params);
  __glintercept_log(" - glMulticastGetQueryObjecti64vNV(gpu: %ld, id: %ld, pname: %ld (%s), params: %ld)", gpu, id, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glMulticastGetQueryObjectivNV)(GLuint, GLuint, GLenum, GLint *);
static __ctype_glMulticastGetQueryObjectivNV __glintercept_fnptr_glMulticastGetQueryObjectivNV;
void __glintercept_glMulticastGetQueryObjectivNV(GLuint gpu, GLuint id, GLenum pname, GLint * params) {
  __glintercept_fnptr_glMulticastGetQueryObjectivNV(gpu, id, pname, params);
  __glintercept_log(" - glMulticastGetQueryObjectivNV(gpu: %ld, id: %ld, pname: %ld (%s), params: %ld)", gpu, id, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glMulticastGetQueryObjectui64vNV)(GLuint, GLuint, GLenum, GLuint64 *);
static __ctype_glMulticastGetQueryObjectui64vNV __glintercept_fnptr_glMulticastGetQueryObjectui64vNV;
void __glintercept_glMulticastGetQueryObjectui64vNV(GLuint gpu, GLuint id, GLenum pname, GLuint64 * params) {
  __glintercept_fnptr_glMulticastGetQueryObjectui64vNV(gpu, id, pname, params);
  __glintercept_log(" - glMulticastGetQueryObjectui64vNV(gpu: %ld, id: %ld, pname: %ld (%s), params: %ld)", gpu, id, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glMulticastGetQueryObjectuivNV)(GLuint, GLuint, GLenum, GLuint *);
static __ctype_glMulticastGetQueryObjectuivNV __glintercept_fnptr_glMulticastGetQueryObjectuivNV;
void __glintercept_glMulticastGetQueryObjectuivNV(GLuint gpu, GLuint id, GLenum pname, GLuint * params) {
  __glintercept_fnptr_glMulticastGetQueryObjectuivNV(gpu, id, pname, params);
  __glintercept_log(" - glMulticastGetQueryObjectuivNV(gpu: %ld, id: %ld, pname: %ld (%s), params: %ld)", gpu, id, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glMulticastScissorArrayvNVX)(GLuint, GLuint, GLsizei, const GLint *);
static __ctype_glMulticastScissorArrayvNVX __glintercept_fnptr_glMulticastScissorArrayvNVX;
void __glintercept_glMulticastScissorArrayvNVX(GLuint gpu, GLuint first, GLsizei count, const GLint * v) {
  __glintercept_fnptr_glMulticastScissorArrayvNVX(gpu, first, count, v);
  __glintercept_log(" - glMulticastScissorArrayvNVX(gpu: %ld, first: %ld, count: %ld, v: %ld)", gpu, first, count, v);
}

typedef void(*__ctype_glMulticastViewportArrayvNVX)(GLuint, GLuint, GLsizei, const GLfloat *);
static __ctype_glMulticastViewportArrayvNVX __glintercept_fnptr_glMulticastViewportArrayvNVX;
void __glintercept_glMulticastViewportArrayvNVX(GLuint gpu, GLuint first, GLsizei count, const GLfloat * v) {
  __glintercept_fnptr_glMulticastViewportArrayvNVX(gpu, first, count, v);
  __glintercept_log(" - glMulticastViewportArrayvNVX(gpu: %ld, first: %ld, count: %ld, v: %ld)", gpu, first, count, v);
}

typedef void(*__ctype_glMulticastViewportPositionWScaleNVX)(GLuint, GLuint, GLfloat, GLfloat);
static __ctype_glMulticastViewportPositionWScaleNVX __glintercept_fnptr_glMulticastViewportPositionWScaleNVX;
void __glintercept_glMulticastViewportPositionWScaleNVX(GLuint gpu, GLuint index, GLfloat xcoeff, GLfloat ycoeff) {
  __glintercept_fnptr_glMulticastViewportPositionWScaleNVX(gpu, index, xcoeff, ycoeff);
  __glintercept_log(" - glMulticastViewportPositionWScaleNVX(gpu: %ld, index: %ld, xcoeff: %ld, ycoeff: %ld)", gpu, index, xcoeff, ycoeff);
}

typedef void(*__ctype_glMulticastWaitSyncNV)(GLuint, GLbitfield);
static __ctype_glMulticastWaitSyncNV __glintercept_fnptr_glMulticastWaitSyncNV;
void __glintercept_glMulticastWaitSyncNV(GLuint signalGpu, GLbitfield waitGpuMask) {
  __glintercept_fnptr_glMulticastWaitSyncNV(signalGpu, waitGpuMask);
  __glintercept_log(" - glMulticastWaitSyncNV(signalGpu: %ld, waitGpuMask: %ld)", signalGpu, waitGpuMask);
}

typedef void(*__ctype_glNamedBufferAttachMemoryNV)(GLuint, GLuint, GLuint64);
static __ctype_glNamedBufferAttachMemoryNV __glintercept_fnptr_glNamedBufferAttachMemoryNV;
void __glintercept_glNamedBufferAttachMemoryNV(GLuint buffer, GLuint memory, GLuint64 offset) {
  __glintercept_fnptr_glNamedBufferAttachMemoryNV(buffer, memory, offset);
  __glintercept_log(" - glNamedBufferAttachMemoryNV(buffer: %ld, memory: %ld, offset: %ld)", buffer, memory, offset);
}

typedef void(*__ctype_glNamedBufferData)(GLuint, GLsizeiptr, const void *, GLenum);
static __ctype_glNamedBufferData __glintercept_fnptr_glNamedBufferData;
void __glintercept_glNamedBufferData(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage) {
  __glintercept_fnptr_glNamedBufferData(buffer, size, data, usage);
  __glintercept_log(" - glNamedBufferData(buffer: %ld, size: %ld, data: %ld, usage: %ld (%s))", buffer, size, data, usage, __gl_intercept_formatenum(usage));
}

typedef void(*__ctype_glNamedBufferDataEXT)(GLuint, GLsizeiptr, const void *, GLenum);
static __ctype_glNamedBufferDataEXT __glintercept_fnptr_glNamedBufferDataEXT;
void __glintercept_glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage) {
  __glintercept_fnptr_glNamedBufferDataEXT(buffer, size, data, usage);
  __glintercept_log(" - glNamedBufferDataEXT(buffer: %ld, size: %ld, data: %ld, usage: %ld (%s))", buffer, size, data, usage, __gl_intercept_formatenum(usage));
}

typedef void(*__ctype_glNamedBufferPageCommitmentARB)(GLuint, GLintptr, GLsizeiptr, GLboolean);
static __ctype_glNamedBufferPageCommitmentARB __glintercept_fnptr_glNamedBufferPageCommitmentARB;
void __glintercept_glNamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) {
  __glintercept_fnptr_glNamedBufferPageCommitmentARB(buffer, offset, size, commit);
  __glintercept_log(" - glNamedBufferPageCommitmentARB(buffer: %ld, offset: %ld, size: %ld, commit: %ld)", buffer, offset, size, commit);
}

typedef void(*__ctype_glNamedBufferPageCommitmentEXT)(GLuint, GLintptr, GLsizeiptr, GLboolean);
static __ctype_glNamedBufferPageCommitmentEXT __glintercept_fnptr_glNamedBufferPageCommitmentEXT;
void __glintercept_glNamedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) {
  __glintercept_fnptr_glNamedBufferPageCommitmentEXT(buffer, offset, size, commit);
  __glintercept_log(" - glNamedBufferPageCommitmentEXT(buffer: %ld, offset: %ld, size: %ld, commit: %ld)", buffer, offset, size, commit);
}

typedef void(*__ctype_glNamedBufferPageCommitmentMemNV)(GLuint, GLintptr, GLsizeiptr, GLuint, GLuint64, GLboolean);
static __ctype_glNamedBufferPageCommitmentMemNV __glintercept_fnptr_glNamedBufferPageCommitmentMemNV;
void __glintercept_glNamedBufferPageCommitmentMemNV(GLuint buffer, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit) {
  __glintercept_fnptr_glNamedBufferPageCommitmentMemNV(buffer, offset, size, memory, memOffset, commit);
  __glintercept_log(" - glNamedBufferPageCommitmentMemNV(buffer: %ld, offset: %ld, size: %ld, memory: %ld, memOffset: %ld, commit: %ld)", buffer, offset, size, memory, memOffset, commit);
}

typedef void(*__ctype_glNamedBufferStorage)(GLuint, GLsizeiptr, const void *, GLbitfield);
static __ctype_glNamedBufferStorage __glintercept_fnptr_glNamedBufferStorage;
void __glintercept_glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags) {
  __glintercept_fnptr_glNamedBufferStorage(buffer, size, data, flags);
  __glintercept_log(" - glNamedBufferStorage(buffer: %ld, size: %ld, data: %ld, flags: %ld)", buffer, size, data, flags);
}

typedef void(*__ctype_glNamedBufferStorageExternalEXT)(GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield);
static __ctype_glNamedBufferStorageExternalEXT __glintercept_fnptr_glNamedBufferStorageExternalEXT;
void __glintercept_glNamedBufferStorageExternalEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) {
  __glintercept_fnptr_glNamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer, flags);
  __glintercept_log(" - glNamedBufferStorageExternalEXT(buffer: %ld, offset: %ld, size: %ld, clientBuffer: %ld, flags: %ld)", buffer, offset, size, clientBuffer, flags);
}

typedef void(*__ctype_glNamedBufferStorageEXT)(GLuint, GLsizeiptr, const void *, GLbitfield);
static __ctype_glNamedBufferStorageEXT __glintercept_fnptr_glNamedBufferStorageEXT;
void __glintercept_glNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags) {
  __glintercept_fnptr_glNamedBufferStorageEXT(buffer, size, data, flags);
  __glintercept_log(" - glNamedBufferStorageEXT(buffer: %ld, size: %ld, data: %ld, flags: %ld)", buffer, size, data, flags);
}

typedef void(*__ctype_glNamedBufferStorageMemEXT)(GLuint, GLsizeiptr, GLuint, GLuint64);
static __ctype_glNamedBufferStorageMemEXT __glintercept_fnptr_glNamedBufferStorageMemEXT;
void __glintercept_glNamedBufferStorageMemEXT(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset) {
  __glintercept_fnptr_glNamedBufferStorageMemEXT(buffer, size, memory, offset);
  __glintercept_log(" - glNamedBufferStorageMemEXT(buffer: %ld, size: %ld, memory: %ld, offset: %ld)", buffer, size, memory, offset);
}

typedef void(*__ctype_glNamedBufferSubData)(GLuint, GLintptr, GLsizeiptr, const void *);
static __ctype_glNamedBufferSubData __glintercept_fnptr_glNamedBufferSubData;
void __glintercept_glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) {
  __glintercept_fnptr_glNamedBufferSubData(buffer, offset, size, data);
  __glintercept_log(" - glNamedBufferSubData(buffer: %ld, offset: %ld, size: %ld, data: %ld)", buffer, offset, size, data);
}

typedef void(*__ctype_glNamedBufferSubDataEXT)(GLuint, GLintptr, GLsizeiptr, const void *);
static __ctype_glNamedBufferSubDataEXT __glintercept_fnptr_glNamedBufferSubDataEXT;
void __glintercept_glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) {
  __glintercept_fnptr_glNamedBufferSubDataEXT(buffer, offset, size, data);
  __glintercept_log(" - glNamedBufferSubDataEXT(buffer: %ld, offset: %ld, size: %ld, data: %ld)", buffer, offset, size, data);
}

typedef void(*__ctype_glNamedCopyBufferSubDataEXT)(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
static __ctype_glNamedCopyBufferSubDataEXT __glintercept_fnptr_glNamedCopyBufferSubDataEXT;
void __glintercept_glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  __glintercept_fnptr_glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size);
  __glintercept_log(" - glNamedCopyBufferSubDataEXT(readBuffer: %ld, writeBuffer: %ld, readOffset: %ld, writeOffset: %ld, size: %ld)", readBuffer, writeBuffer, readOffset, writeOffset, size);
}

typedef void(*__ctype_glNamedFramebufferDrawBuffer)(GLuint, GLenum);
static __ctype_glNamedFramebufferDrawBuffer __glintercept_fnptr_glNamedFramebufferDrawBuffer;
void __glintercept_glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf) {
  __glintercept_fnptr_glNamedFramebufferDrawBuffer(framebuffer, buf);
  __glintercept_log(" - glNamedFramebufferDrawBuffer(framebuffer: %ld, buf: %ld (%s))", framebuffer, buf, __gl_intercept_formatenum(buf));
}

typedef void(*__ctype_glNamedFramebufferDrawBuffers)(GLuint, GLsizei, const GLenum *);
static __ctype_glNamedFramebufferDrawBuffers __glintercept_fnptr_glNamedFramebufferDrawBuffers;
void __glintercept_glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum * bufs) {
  __glintercept_fnptr_glNamedFramebufferDrawBuffers(framebuffer, n, bufs);
  __glintercept_log(" - glNamedFramebufferDrawBuffers(framebuffer: %ld, n: %ld, bufs: %ld)", framebuffer, n, bufs);
}

typedef void(*__ctype_glNamedFramebufferParameteri)(GLuint, GLenum, GLint);
static __ctype_glNamedFramebufferParameteri __glintercept_fnptr_glNamedFramebufferParameteri;
void __glintercept_glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param) {
  __glintercept_fnptr_glNamedFramebufferParameteri(framebuffer, pname, param);
  __glintercept_log(" - glNamedFramebufferParameteri(framebuffer: %ld, pname: %ld (%s), param: %ld)", framebuffer, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glNamedFramebufferParameteriEXT)(GLuint, GLenum, GLint);
static __ctype_glNamedFramebufferParameteriEXT __glintercept_fnptr_glNamedFramebufferParameteriEXT;
void __glintercept_glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param) {
  __glintercept_fnptr_glNamedFramebufferParameteriEXT(framebuffer, pname, param);
  __glintercept_log(" - glNamedFramebufferParameteriEXT(framebuffer: %ld, pname: %ld (%s), param: %ld)", framebuffer, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glNamedFramebufferReadBuffer)(GLuint, GLenum);
static __ctype_glNamedFramebufferReadBuffer __glintercept_fnptr_glNamedFramebufferReadBuffer;
void __glintercept_glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src) {
  __glintercept_fnptr_glNamedFramebufferReadBuffer(framebuffer, src);
  __glintercept_log(" - glNamedFramebufferReadBuffer(framebuffer: %ld, src: %ld (%s))", framebuffer, src, __gl_intercept_formatenum(src));
}

typedef void(*__ctype_glNamedFramebufferRenderbuffer)(GLuint, GLenum, GLenum, GLuint);
static __ctype_glNamedFramebufferRenderbuffer __glintercept_fnptr_glNamedFramebufferRenderbuffer;
void __glintercept_glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  __glintercept_fnptr_glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer);
  __glintercept_log(" - glNamedFramebufferRenderbuffer(framebuffer: %ld, attachment: %ld (%s), renderbuffertarget: %ld (%s), renderbuffer: %ld)", framebuffer, attachment, __gl_intercept_formatenum(attachment), renderbuffertarget, __gl_intercept_formatenum(renderbuffertarget), renderbuffer);
}

typedef void(*__ctype_glNamedFramebufferRenderbufferEXT)(GLuint, GLenum, GLenum, GLuint);
static __ctype_glNamedFramebufferRenderbufferEXT __glintercept_fnptr_glNamedFramebufferRenderbufferEXT;
void __glintercept_glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  __glintercept_fnptr_glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer);
  __glintercept_log(" - glNamedFramebufferRenderbufferEXT(framebuffer: %ld, attachment: %ld (%s), renderbuffertarget: %ld (%s), renderbuffer: %ld)", framebuffer, attachment, __gl_intercept_formatenum(attachment), renderbuffertarget, __gl_intercept_formatenum(renderbuffertarget), renderbuffer);
}

typedef void(*__ctype_glNamedFramebufferSampleLocationsfvARB)(GLuint, GLuint, GLsizei, const GLfloat *);
static __ctype_glNamedFramebufferSampleLocationsfvARB __glintercept_fnptr_glNamedFramebufferSampleLocationsfvARB;
void __glintercept_glNamedFramebufferSampleLocationsfvARB(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) {
  __glintercept_fnptr_glNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v);
  __glintercept_log(" - glNamedFramebufferSampleLocationsfvARB(framebuffer: %ld, start: %ld, count: %ld, v: %ld)", framebuffer, start, count, v);
}

typedef void(*__ctype_glNamedFramebufferSampleLocationsfvNV)(GLuint, GLuint, GLsizei, const GLfloat *);
static __ctype_glNamedFramebufferSampleLocationsfvNV __glintercept_fnptr_glNamedFramebufferSampleLocationsfvNV;
void __glintercept_glNamedFramebufferSampleLocationsfvNV(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) {
  __glintercept_fnptr_glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v);
  __glintercept_log(" - glNamedFramebufferSampleLocationsfvNV(framebuffer: %ld, start: %ld, count: %ld, v: %ld)", framebuffer, start, count, v);
}

typedef void(*__ctype_glNamedFramebufferTexture)(GLuint, GLenum, GLuint, GLint);
static __ctype_glNamedFramebufferTexture __glintercept_fnptr_glNamedFramebufferTexture;
void __glintercept_glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) {
  __glintercept_fnptr_glNamedFramebufferTexture(framebuffer, attachment, texture, level);
  __glintercept_log(" - glNamedFramebufferTexture(framebuffer: %ld, attachment: %ld (%s), texture: %ld, level: %ld)", framebuffer, attachment, __gl_intercept_formatenum(attachment), texture, level);
}

typedef void(*__ctype_glNamedFramebufferSamplePositionsfvAMD)(GLuint, GLuint, GLuint, const GLfloat *);
static __ctype_glNamedFramebufferSamplePositionsfvAMD __glintercept_fnptr_glNamedFramebufferSamplePositionsfvAMD;
void __glintercept_glNamedFramebufferSamplePositionsfvAMD(GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat * values) {
  __glintercept_fnptr_glNamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values);
  __glintercept_log(" - glNamedFramebufferSamplePositionsfvAMD(framebuffer: %ld, numsamples: %ld, pixelindex: %ld, values: %ld)", framebuffer, numsamples, pixelindex, values);
}

typedef void(*__ctype_glNamedFramebufferTexture1DEXT)(GLuint, GLenum, GLenum, GLuint, GLint);
static __ctype_glNamedFramebufferTexture1DEXT __glintercept_fnptr_glNamedFramebufferTexture1DEXT;
void __glintercept_glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  __glintercept_fnptr_glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level);
  __glintercept_log(" - glNamedFramebufferTexture1DEXT(framebuffer: %ld, attachment: %ld (%s), textarget: %ld (%s), texture: %ld, level: %ld)", framebuffer, attachment, __gl_intercept_formatenum(attachment), textarget, __gl_intercept_formatenum(textarget), texture, level);
}

typedef void(*__ctype_glNamedFramebufferTexture2DEXT)(GLuint, GLenum, GLenum, GLuint, GLint);
static __ctype_glNamedFramebufferTexture2DEXT __glintercept_fnptr_glNamedFramebufferTexture2DEXT;
void __glintercept_glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  __glintercept_fnptr_glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level);
  __glintercept_log(" - glNamedFramebufferTexture2DEXT(framebuffer: %ld, attachment: %ld (%s), textarget: %ld (%s), texture: %ld, level: %ld)", framebuffer, attachment, __gl_intercept_formatenum(attachment), textarget, __gl_intercept_formatenum(textarget), texture, level);
}

typedef void(*__ctype_glNamedFramebufferTexture3DEXT)(GLuint, GLenum, GLenum, GLuint, GLint, GLint);
static __ctype_glNamedFramebufferTexture3DEXT __glintercept_fnptr_glNamedFramebufferTexture3DEXT;
void __glintercept_glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
  __glintercept_fnptr_glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset);
  __glintercept_log(" - glNamedFramebufferTexture3DEXT(framebuffer: %ld, attachment: %ld (%s), textarget: %ld (%s), texture: %ld, level: %ld, zoffset: %ld)", framebuffer, attachment, __gl_intercept_formatenum(attachment), textarget, __gl_intercept_formatenum(textarget), texture, level, zoffset);
}

typedef void(*__ctype_glNamedFramebufferTextureEXT)(GLuint, GLenum, GLuint, GLint);
static __ctype_glNamedFramebufferTextureEXT __glintercept_fnptr_glNamedFramebufferTextureEXT;
void __glintercept_glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) {
  __glintercept_fnptr_glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level);
  __glintercept_log(" - glNamedFramebufferTextureEXT(framebuffer: %ld, attachment: %ld (%s), texture: %ld, level: %ld)", framebuffer, attachment, __gl_intercept_formatenum(attachment), texture, level);
}

typedef void(*__ctype_glNamedFramebufferTextureFaceEXT)(GLuint, GLenum, GLuint, GLint, GLenum);
static __ctype_glNamedFramebufferTextureFaceEXT __glintercept_fnptr_glNamedFramebufferTextureFaceEXT;
void __glintercept_glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) {
  __glintercept_fnptr_glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face);
  __glintercept_log(" - glNamedFramebufferTextureFaceEXT(framebuffer: %ld, attachment: %ld (%s), texture: %ld, level: %ld, face: %ld (%s))", framebuffer, attachment, __gl_intercept_formatenum(attachment), texture, level, face, __gl_intercept_formatenum(face));
}

typedef void(*__ctype_glNamedFramebufferTextureLayer)(GLuint, GLenum, GLuint, GLint, GLint);
static __ctype_glNamedFramebufferTextureLayer __glintercept_fnptr_glNamedFramebufferTextureLayer;
void __glintercept_glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  __glintercept_fnptr_glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer);
  __glintercept_log(" - glNamedFramebufferTextureLayer(framebuffer: %ld, attachment: %ld (%s), texture: %ld, level: %ld, layer: %ld)", framebuffer, attachment, __gl_intercept_formatenum(attachment), texture, level, layer);
}

typedef void(*__ctype_glNamedFramebufferTextureLayerEXT)(GLuint, GLenum, GLuint, GLint, GLint);
static __ctype_glNamedFramebufferTextureLayerEXT __glintercept_fnptr_glNamedFramebufferTextureLayerEXT;
void __glintercept_glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  __glintercept_fnptr_glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer);
  __glintercept_log(" - glNamedFramebufferTextureLayerEXT(framebuffer: %ld, attachment: %ld (%s), texture: %ld, level: %ld, layer: %ld)", framebuffer, attachment, __gl_intercept_formatenum(attachment), texture, level, layer);
}

typedef void(*__ctype_glNamedProgramLocalParameter4dEXT)(GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glNamedProgramLocalParameter4dEXT __glintercept_fnptr_glNamedProgramLocalParameter4dEXT;
void __glintercept_glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  __glintercept_fnptr_glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w);
  __glintercept_log(" - glNamedProgramLocalParameter4dEXT(program: %ld, target: %ld (%s), index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", program, target, __gl_intercept_formatenum(target), index, x, y, z, w);
}

typedef void(*__ctype_glNamedProgramLocalParameter4dvEXT)(GLuint, GLenum, GLuint, const GLdouble *);
static __ctype_glNamedProgramLocalParameter4dvEXT __glintercept_fnptr_glNamedProgramLocalParameter4dvEXT;
void __glintercept_glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble * params) {
  __glintercept_fnptr_glNamedProgramLocalParameter4dvEXT(program, target, index, params);
  __glintercept_log(" - glNamedProgramLocalParameter4dvEXT(program: %ld, target: %ld (%s), index: %ld, params: %ld)", program, target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glNamedProgramLocalParameter4fEXT)(GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glNamedProgramLocalParameter4fEXT __glintercept_fnptr_glNamedProgramLocalParameter4fEXT;
void __glintercept_glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  __glintercept_fnptr_glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w);
  __glintercept_log(" - glNamedProgramLocalParameter4fEXT(program: %ld, target: %ld (%s), index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", program, target, __gl_intercept_formatenum(target), index, x, y, z, w);
}

typedef void(*__ctype_glNamedProgramLocalParameter4fvEXT)(GLuint, GLenum, GLuint, const GLfloat *);
static __ctype_glNamedProgramLocalParameter4fvEXT __glintercept_fnptr_glNamedProgramLocalParameter4fvEXT;
void __glintercept_glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat * params) {
  __glintercept_fnptr_glNamedProgramLocalParameter4fvEXT(program, target, index, params);
  __glintercept_log(" - glNamedProgramLocalParameter4fvEXT(program: %ld, target: %ld (%s), index: %ld, params: %ld)", program, target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glNamedProgramLocalParameterI4iEXT)(GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint);
static __ctype_glNamedProgramLocalParameterI4iEXT __glintercept_fnptr_glNamedProgramLocalParameterI4iEXT;
void __glintercept_glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {
  __glintercept_fnptr_glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w);
  __glintercept_log(" - glNamedProgramLocalParameterI4iEXT(program: %ld, target: %ld (%s), index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", program, target, __gl_intercept_formatenum(target), index, x, y, z, w);
}

typedef void(*__ctype_glNamedProgramLocalParameterI4ivEXT)(GLuint, GLenum, GLuint, const GLint *);
static __ctype_glNamedProgramLocalParameterI4ivEXT __glintercept_fnptr_glNamedProgramLocalParameterI4ivEXT;
void __glintercept_glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint * params) {
  __glintercept_fnptr_glNamedProgramLocalParameterI4ivEXT(program, target, index, params);
  __glintercept_log(" - glNamedProgramLocalParameterI4ivEXT(program: %ld, target: %ld (%s), index: %ld, params: %ld)", program, target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glNamedProgramLocalParameterI4uiEXT)(GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
static __ctype_glNamedProgramLocalParameterI4uiEXT __glintercept_fnptr_glNamedProgramLocalParameterI4uiEXT;
void __glintercept_glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  __glintercept_fnptr_glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w);
  __glintercept_log(" - glNamedProgramLocalParameterI4uiEXT(program: %ld, target: %ld (%s), index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", program, target, __gl_intercept_formatenum(target), index, x, y, z, w);
}

typedef void(*__ctype_glNamedProgramLocalParameterI4uivEXT)(GLuint, GLenum, GLuint, const GLuint *);
static __ctype_glNamedProgramLocalParameterI4uivEXT __glintercept_fnptr_glNamedProgramLocalParameterI4uivEXT;
void __glintercept_glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint * params) {
  __glintercept_fnptr_glNamedProgramLocalParameterI4uivEXT(program, target, index, params);
  __glintercept_log(" - glNamedProgramLocalParameterI4uivEXT(program: %ld, target: %ld (%s), index: %ld, params: %ld)", program, target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glNamedProgramLocalParameters4fvEXT)(GLuint, GLenum, GLuint, GLsizei, const GLfloat *);
static __ctype_glNamedProgramLocalParameters4fvEXT __glintercept_fnptr_glNamedProgramLocalParameters4fvEXT;
void __glintercept_glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat * params) {
  __glintercept_fnptr_glNamedProgramLocalParameters4fvEXT(program, target, index, count, params);
  __glintercept_log(" - glNamedProgramLocalParameters4fvEXT(program: %ld, target: %ld (%s), index: %ld, count: %ld, params: %ld)", program, target, __gl_intercept_formatenum(target), index, count, params);
}

typedef void(*__ctype_glNamedProgramLocalParametersI4ivEXT)(GLuint, GLenum, GLuint, GLsizei, const GLint *);
static __ctype_glNamedProgramLocalParametersI4ivEXT __glintercept_fnptr_glNamedProgramLocalParametersI4ivEXT;
void __glintercept_glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint * params) {
  __glintercept_fnptr_glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params);
  __glintercept_log(" - glNamedProgramLocalParametersI4ivEXT(program: %ld, target: %ld (%s), index: %ld, count: %ld, params: %ld)", program, target, __gl_intercept_formatenum(target), index, count, params);
}

typedef void(*__ctype_glNamedProgramLocalParametersI4uivEXT)(GLuint, GLenum, GLuint, GLsizei, const GLuint *);
static __ctype_glNamedProgramLocalParametersI4uivEXT __glintercept_fnptr_glNamedProgramLocalParametersI4uivEXT;
void __glintercept_glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint * params) {
  __glintercept_fnptr_glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params);
  __glintercept_log(" - glNamedProgramLocalParametersI4uivEXT(program: %ld, target: %ld (%s), index: %ld, count: %ld, params: %ld)", program, target, __gl_intercept_formatenum(target), index, count, params);
}

typedef void(*__ctype_glNamedProgramStringEXT)(GLuint, GLenum, GLenum, GLsizei, const void *);
static __ctype_glNamedProgramStringEXT __glintercept_fnptr_glNamedProgramStringEXT;
void __glintercept_glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const void * string) {
  __glintercept_fnptr_glNamedProgramStringEXT(program, target, format, len, string);
  __glintercept_log(" - glNamedProgramStringEXT(program: %ld, target: %ld (%s), format: %ld (%s), len: %ld, string: %ld)", program, target, __gl_intercept_formatenum(target), format, __gl_intercept_formatenum(format), len, string);
}

typedef void(*__ctype_glNamedRenderbufferStorage)(GLuint, GLenum, GLsizei, GLsizei);
static __ctype_glNamedRenderbufferStorage __glintercept_fnptr_glNamedRenderbufferStorage;
void __glintercept_glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glNamedRenderbufferStorage(renderbuffer, internalformat, width, height);
  __glintercept_log(" - glNamedRenderbufferStorage(renderbuffer: %ld, internalformat: %ld (%s), width: %ld, height: %ld)", renderbuffer, internalformat, __gl_intercept_formatenum(internalformat), width, height);
}

typedef void(*__ctype_glNamedRenderbufferStorageEXT)(GLuint, GLenum, GLsizei, GLsizei);
static __ctype_glNamedRenderbufferStorageEXT __glintercept_fnptr_glNamedRenderbufferStorageEXT;
void __glintercept_glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height);
  __glintercept_log(" - glNamedRenderbufferStorageEXT(renderbuffer: %ld, internalformat: %ld (%s), width: %ld, height: %ld)", renderbuffer, internalformat, __gl_intercept_formatenum(internalformat), width, height);
}

typedef void(*__ctype_glNamedRenderbufferStorageMultisample)(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
static __ctype_glNamedRenderbufferStorageMultisample __glintercept_fnptr_glNamedRenderbufferStorageMultisample;
void __glintercept_glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height);
  __glintercept_log(" - glNamedRenderbufferStorageMultisample(renderbuffer: %ld, samples: %ld, internalformat: %ld (%s), width: %ld, height: %ld)", renderbuffer, samples, internalformat, __gl_intercept_formatenum(internalformat), width, height);
}

typedef void(*__ctype_glNamedRenderbufferStorageMultisampleAdvancedAMD)(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
static __ctype_glNamedRenderbufferStorageMultisampleAdvancedAMD __glintercept_fnptr_glNamedRenderbufferStorageMultisampleAdvancedAMD;
void __glintercept_glNamedRenderbufferStorageMultisampleAdvancedAMD(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glNamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer, samples, storageSamples, internalformat, width, height);
  __glintercept_log(" - glNamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer: %ld, samples: %ld, storageSamples: %ld, internalformat: %ld (%s), width: %ld, height: %ld)", renderbuffer, samples, storageSamples, internalformat, __gl_intercept_formatenum(internalformat), width, height);
}

typedef void(*__ctype_glNamedRenderbufferStorageMultisampleCoverageEXT)(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
static __ctype_glNamedRenderbufferStorageMultisampleCoverageEXT __glintercept_fnptr_glNamedRenderbufferStorageMultisampleCoverageEXT;
void __glintercept_glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
  __glintercept_log(" - glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer: %ld, coverageSamples: %ld, colorSamples: %ld, internalformat: %ld (%s), width: %ld, height: %ld)", renderbuffer, coverageSamples, colorSamples, internalformat, __gl_intercept_formatenum(internalformat), width, height);
}

typedef void(*__ctype_glNamedRenderbufferStorageMultisampleEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
static __ctype_glNamedRenderbufferStorageMultisampleEXT __glintercept_fnptr_glNamedRenderbufferStorageMultisampleEXT;
void __glintercept_glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height);
  __glintercept_log(" - glNamedRenderbufferStorageMultisampleEXT(renderbuffer: %ld, samples: %ld, internalformat: %ld (%s), width: %ld, height: %ld)", renderbuffer, samples, internalformat, __gl_intercept_formatenum(internalformat), width, height);
}

typedef void(*__ctype_glNamedStringARB)(GLenum, GLint, const GLchar *, GLint, const GLchar *);
static __ctype_glNamedStringARB __glintercept_fnptr_glNamedStringARB;
void __glintercept_glNamedStringARB(GLenum type, GLint namelen, const GLchar * name, GLint stringlen, const GLchar * string) {
  __glintercept_fnptr_glNamedStringARB(type, namelen, name, stringlen, string);
  __glintercept_log(" - glNamedStringARB(type: %ld (%s), namelen: %ld, name: %ld, stringlen: %ld, string: %ld)", type, __gl_intercept_formatenum(type), namelen, name, stringlen, string);
}

typedef void(*__ctype_glNewList)(GLuint, GLenum);
static __ctype_glNewList __glintercept_fnptr_glNewList;
void __glintercept_glNewList(GLuint list, GLenum mode) {
  __glintercept_fnptr_glNewList(list, mode);
  __glintercept_log(" - glNewList(list: %ld, mode: %ld (%s))", list, mode, __gl_intercept_formatenum(mode));
}

typedef GLuint(*__ctype_glNewObjectBufferATI)(GLsizei, const void *, GLenum);
static __ctype_glNewObjectBufferATI __glintercept_fnptr_glNewObjectBufferATI;
GLuint __glintercept_glNewObjectBufferATI(GLsizei size, const void * pointer, GLenum usage) {
  GLuint __ret = __glintercept_fnptr_glNewObjectBufferATI(size, pointer, usage);
  __glintercept_log(" - glNewObjectBufferATI(size: %ld, pointer: %ld, usage: %ld (%s)) -> %ld", size, pointer, usage, __gl_intercept_formatenum(usage), __ret);
  return __ret;
}

typedef void(*__ctype_glNormal3b)(GLbyte, GLbyte, GLbyte);
static __ctype_glNormal3b __glintercept_fnptr_glNormal3b;
void __glintercept_glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz) {
  __glintercept_fnptr_glNormal3b(nx, ny, nz);
  __glintercept_log(" - glNormal3b(nx: %ld, ny: %ld, nz: %ld)", nx, ny, nz);
}

typedef void(*__ctype_glNormal3bv)(const GLbyte *);
static __ctype_glNormal3bv __glintercept_fnptr_glNormal3bv;
void __glintercept_glNormal3bv(const GLbyte * v) {
  __glintercept_fnptr_glNormal3bv(v);
  __glintercept_log(" - glNormal3bv(v: %ld)", v);
}

typedef void(*__ctype_glNormal3d)(GLdouble, GLdouble, GLdouble);
static __ctype_glNormal3d __glintercept_fnptr_glNormal3d;
void __glintercept_glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz) {
  __glintercept_fnptr_glNormal3d(nx, ny, nz);
  __glintercept_log(" - glNormal3d(nx: %ld, ny: %ld, nz: %ld)", nx, ny, nz);
}

typedef void(*__ctype_glNormal3dv)(const GLdouble *);
static __ctype_glNormal3dv __glintercept_fnptr_glNormal3dv;
void __glintercept_glNormal3dv(const GLdouble * v) {
  __glintercept_fnptr_glNormal3dv(v);
  __glintercept_log(" - glNormal3dv(v: %ld)", v);
}

typedef void(*__ctype_glNormal3f)(GLfloat, GLfloat, GLfloat);
static __ctype_glNormal3f __glintercept_fnptr_glNormal3f;
void __glintercept_glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz) {
  __glintercept_fnptr_glNormal3f(nx, ny, nz);
  __glintercept_log(" - glNormal3f(nx: %ld, ny: %ld, nz: %ld)", nx, ny, nz);
}

typedef void(*__ctype_glNormal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glNormal3fVertex3fSUN __glintercept_fnptr_glNormal3fVertex3fSUN;
void __glintercept_glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glNormal3fVertex3fSUN(nx, ny, nz, x, y, z);
  __glintercept_log(" - glNormal3fVertex3fSUN(nx: %ld, ny: %ld, nz: %ld, x: %ld, y: %ld, z: %ld)", nx, ny, nz, x, y, z);
}

typedef void(*__ctype_glNormal3fVertex3fvSUN)(const GLfloat *, const GLfloat *);
static __ctype_glNormal3fVertex3fvSUN __glintercept_fnptr_glNormal3fVertex3fvSUN;
void __glintercept_glNormal3fVertex3fvSUN(const GLfloat * n, const GLfloat * v) {
  __glintercept_fnptr_glNormal3fVertex3fvSUN(n, v);
  __glintercept_log(" - glNormal3fVertex3fvSUN(n: %ld, v: %ld)", n, v);
}

typedef void(*__ctype_glNormal3fv)(const GLfloat *);
static __ctype_glNormal3fv __glintercept_fnptr_glNormal3fv;
void __glintercept_glNormal3fv(const GLfloat * v) {
  __glintercept_fnptr_glNormal3fv(v);
  __glintercept_log(" - glNormal3fv(v: %ld)", v);
}

typedef void(*__ctype_glNormal3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
static __ctype_glNormal3hNV __glintercept_fnptr_glNormal3hNV;
void __glintercept_glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz) {
  __glintercept_fnptr_glNormal3hNV(nx, ny, nz);
  __glintercept_log(" - glNormal3hNV(nx: %ld, ny: %ld, nz: %ld)", nx, ny, nz);
}

typedef void(*__ctype_glNormal3hvNV)(const GLhalfNV *);
static __ctype_glNormal3hvNV __glintercept_fnptr_glNormal3hvNV;
void __glintercept_glNormal3hvNV(const GLhalfNV * v) {
  __glintercept_fnptr_glNormal3hvNV(v);
  __glintercept_log(" - glNormal3hvNV(v: %ld)", v);
}

typedef void(*__ctype_glNormal3i)(GLint, GLint, GLint);
static __ctype_glNormal3i __glintercept_fnptr_glNormal3i;
void __glintercept_glNormal3i(GLint nx, GLint ny, GLint nz) {
  __glintercept_fnptr_glNormal3i(nx, ny, nz);
  __glintercept_log(" - glNormal3i(nx: %ld, ny: %ld, nz: %ld)", nx, ny, nz);
}

typedef void(*__ctype_glNormal3iv)(const GLint *);
static __ctype_glNormal3iv __glintercept_fnptr_glNormal3iv;
void __glintercept_glNormal3iv(const GLint * v) {
  __glintercept_fnptr_glNormal3iv(v);
  __glintercept_log(" - glNormal3iv(v: %ld)", v);
}

typedef void(*__ctype_glNormal3s)(GLshort, GLshort, GLshort);
static __ctype_glNormal3s __glintercept_fnptr_glNormal3s;
void __glintercept_glNormal3s(GLshort nx, GLshort ny, GLshort nz) {
  __glintercept_fnptr_glNormal3s(nx, ny, nz);
  __glintercept_log(" - glNormal3s(nx: %ld, ny: %ld, nz: %ld)", nx, ny, nz);
}

typedef void(*__ctype_glNormal3sv)(const GLshort *);
static __ctype_glNormal3sv __glintercept_fnptr_glNormal3sv;
void __glintercept_glNormal3sv(const GLshort * v) {
  __glintercept_fnptr_glNormal3sv(v);
  __glintercept_log(" - glNormal3sv(v: %ld)", v);
}

typedef void(*__ctype_glNormal3x)(GLfixed, GLfixed, GLfixed);
static __ctype_glNormal3x __glintercept_fnptr_glNormal3x;
void __glintercept_glNormal3x(GLfixed nx, GLfixed ny, GLfixed nz) {
  __glintercept_fnptr_glNormal3x(nx, ny, nz);
  __glintercept_log(" - glNormal3x(nx: %ld, ny: %ld, nz: %ld)", nx, ny, nz);
}

typedef void(*__ctype_glNormal3xOES)(GLfixed, GLfixed, GLfixed);
static __ctype_glNormal3xOES __glintercept_fnptr_glNormal3xOES;
void __glintercept_glNormal3xOES(GLfixed nx, GLfixed ny, GLfixed nz) {
  __glintercept_fnptr_glNormal3xOES(nx, ny, nz);
  __glintercept_log(" - glNormal3xOES(nx: %ld, ny: %ld, nz: %ld)", nx, ny, nz);
}

typedef void(*__ctype_glNormal3xvOES)(const GLfixed *);
static __ctype_glNormal3xvOES __glintercept_fnptr_glNormal3xvOES;
void __glintercept_glNormal3xvOES(const GLfixed * coords) {
  __glintercept_fnptr_glNormal3xvOES(coords);
  __glintercept_log(" - glNormal3xvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glNormalFormatNV)(GLenum, GLsizei);
static __ctype_glNormalFormatNV __glintercept_fnptr_glNormalFormatNV;
void __glintercept_glNormalFormatNV(GLenum type, GLsizei stride) {
  __glintercept_fnptr_glNormalFormatNV(type, stride);
  __glintercept_log(" - glNormalFormatNV(type: %ld (%s), stride: %ld)", type, __gl_intercept_formatenum(type), stride);
}

typedef void(*__ctype_glNormalP3ui)(GLenum, GLuint);
static __ctype_glNormalP3ui __glintercept_fnptr_glNormalP3ui;
void __glintercept_glNormalP3ui(GLenum type, GLuint coords) {
  __glintercept_fnptr_glNormalP3ui(type, coords);
  __glintercept_log(" - glNormalP3ui(type: %ld (%s), coords: %ld)", type, __gl_intercept_formatenum(type), coords);
}

typedef void(*__ctype_glNormalP3uiv)(GLenum, const GLuint *);
static __ctype_glNormalP3uiv __glintercept_fnptr_glNormalP3uiv;
void __glintercept_glNormalP3uiv(GLenum type, const GLuint * coords) {
  __glintercept_fnptr_glNormalP3uiv(type, coords);
  __glintercept_log(" - glNormalP3uiv(type: %ld (%s), coords: %ld)", type, __gl_intercept_formatenum(type), coords);
}

typedef void(*__ctype_glNormalPointer)(GLenum, GLsizei, const void *);
static __ctype_glNormalPointer __glintercept_fnptr_glNormalPointer;
void __glintercept_glNormalPointer(GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glNormalPointer(type, stride, pointer);
  __glintercept_log(" - glNormalPointer(type: %ld (%s), stride: %ld, pointer: %ld)", type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glNormalPointerEXT)(GLenum, GLsizei, GLsizei, const void *);
static __ctype_glNormalPointerEXT __glintercept_fnptr_glNormalPointerEXT;
void __glintercept_glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void * pointer) {
  __glintercept_fnptr_glNormalPointerEXT(type, stride, count, pointer);
  __glintercept_log(" - glNormalPointerEXT(type: %ld (%s), stride: %ld, count: %ld, pointer: %ld)", type, __gl_intercept_formatenum(type), stride, count, pointer);
}

typedef void(*__ctype_glNormalPointerListIBM)(GLenum, GLint, const void **, GLint);
static __ctype_glNormalPointerListIBM __glintercept_fnptr_glNormalPointerListIBM;
void __glintercept_glNormalPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride) {
  __glintercept_fnptr_glNormalPointerListIBM(type, stride, pointer, ptrstride);
  __glintercept_log(" - glNormalPointerListIBM(type: %ld (%s), stride: %ld, pointer: %ld, ptrstride: %ld)", type, __gl_intercept_formatenum(type), stride, pointer, ptrstride);
}

typedef void(*__ctype_glNormalPointervINTEL)(GLenum, const void **);
static __ctype_glNormalPointervINTEL __glintercept_fnptr_glNormalPointervINTEL;
void __glintercept_glNormalPointervINTEL(GLenum type, const void ** pointer) {
  __glintercept_fnptr_glNormalPointervINTEL(type, pointer);
  __glintercept_log(" - glNormalPointervINTEL(type: %ld (%s), pointer: %ld)", type, __gl_intercept_formatenum(type), pointer);
}

typedef void(*__ctype_glNormalStream3bATI)(GLenum, GLbyte, GLbyte, GLbyte);
static __ctype_glNormalStream3bATI __glintercept_fnptr_glNormalStream3bATI;
void __glintercept_glNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz) {
  __glintercept_fnptr_glNormalStream3bATI(stream, nx, ny, nz);
  __glintercept_log(" - glNormalStream3bATI(stream: %ld (%s), nx: %ld, ny: %ld, nz: %ld)", stream, __gl_intercept_formatenum(stream), nx, ny, nz);
}

typedef void(*__ctype_glNormalStream3bvATI)(GLenum, const GLbyte *);
static __ctype_glNormalStream3bvATI __glintercept_fnptr_glNormalStream3bvATI;
void __glintercept_glNormalStream3bvATI(GLenum stream, const GLbyte * coords) {
  __glintercept_fnptr_glNormalStream3bvATI(stream, coords);
  __glintercept_log(" - glNormalStream3bvATI(stream: %ld (%s), coords: %ld)", stream, __gl_intercept_formatenum(stream), coords);
}

typedef void(*__ctype_glNormalStream3dATI)(GLenum, GLdouble, GLdouble, GLdouble);
static __ctype_glNormalStream3dATI __glintercept_fnptr_glNormalStream3dATI;
void __glintercept_glNormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz) {
  __glintercept_fnptr_glNormalStream3dATI(stream, nx, ny, nz);
  __glintercept_log(" - glNormalStream3dATI(stream: %ld (%s), nx: %ld, ny: %ld, nz: %ld)", stream, __gl_intercept_formatenum(stream), nx, ny, nz);
}

typedef void(*__ctype_glNormalStream3dvATI)(GLenum, const GLdouble *);
static __ctype_glNormalStream3dvATI __glintercept_fnptr_glNormalStream3dvATI;
void __glintercept_glNormalStream3dvATI(GLenum stream, const GLdouble * coords) {
  __glintercept_fnptr_glNormalStream3dvATI(stream, coords);
  __glintercept_log(" - glNormalStream3dvATI(stream: %ld (%s), coords: %ld)", stream, __gl_intercept_formatenum(stream), coords);
}

typedef void(*__ctype_glNormalStream3fATI)(GLenum, GLfloat, GLfloat, GLfloat);
static __ctype_glNormalStream3fATI __glintercept_fnptr_glNormalStream3fATI;
void __glintercept_glNormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz) {
  __glintercept_fnptr_glNormalStream3fATI(stream, nx, ny, nz);
  __glintercept_log(" - glNormalStream3fATI(stream: %ld (%s), nx: %ld, ny: %ld, nz: %ld)", stream, __gl_intercept_formatenum(stream), nx, ny, nz);
}

typedef void(*__ctype_glNormalStream3fvATI)(GLenum, const GLfloat *);
static __ctype_glNormalStream3fvATI __glintercept_fnptr_glNormalStream3fvATI;
void __glintercept_glNormalStream3fvATI(GLenum stream, const GLfloat * coords) {
  __glintercept_fnptr_glNormalStream3fvATI(stream, coords);
  __glintercept_log(" - glNormalStream3fvATI(stream: %ld (%s), coords: %ld)", stream, __gl_intercept_formatenum(stream), coords);
}

typedef void(*__ctype_glNormalStream3iATI)(GLenum, GLint, GLint, GLint);
static __ctype_glNormalStream3iATI __glintercept_fnptr_glNormalStream3iATI;
void __glintercept_glNormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz) {
  __glintercept_fnptr_glNormalStream3iATI(stream, nx, ny, nz);
  __glintercept_log(" - glNormalStream3iATI(stream: %ld (%s), nx: %ld, ny: %ld, nz: %ld)", stream, __gl_intercept_formatenum(stream), nx, ny, nz);
}

typedef void(*__ctype_glNormalStream3ivATI)(GLenum, const GLint *);
static __ctype_glNormalStream3ivATI __glintercept_fnptr_glNormalStream3ivATI;
void __glintercept_glNormalStream3ivATI(GLenum stream, const GLint * coords) {
  __glintercept_fnptr_glNormalStream3ivATI(stream, coords);
  __glintercept_log(" - glNormalStream3ivATI(stream: %ld (%s), coords: %ld)", stream, __gl_intercept_formatenum(stream), coords);
}

typedef void(*__ctype_glNormalStream3sATI)(GLenum, GLshort, GLshort, GLshort);
static __ctype_glNormalStream3sATI __glintercept_fnptr_glNormalStream3sATI;
void __glintercept_glNormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz) {
  __glintercept_fnptr_glNormalStream3sATI(stream, nx, ny, nz);
  __glintercept_log(" - glNormalStream3sATI(stream: %ld (%s), nx: %ld, ny: %ld, nz: %ld)", stream, __gl_intercept_formatenum(stream), nx, ny, nz);
}

typedef void(*__ctype_glNormalStream3svATI)(GLenum, const GLshort *);
static __ctype_glNormalStream3svATI __glintercept_fnptr_glNormalStream3svATI;
void __glintercept_glNormalStream3svATI(GLenum stream, const GLshort * coords) {
  __glintercept_fnptr_glNormalStream3svATI(stream, coords);
  __glintercept_log(" - glNormalStream3svATI(stream: %ld (%s), coords: %ld)", stream, __gl_intercept_formatenum(stream), coords);
}

typedef void(*__ctype_glObjectLabel)(GLenum, GLuint, GLsizei, const GLchar *);
static __ctype_glObjectLabel __glintercept_fnptr_glObjectLabel;
void __glintercept_glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar * label) {
  __glintercept_fnptr_glObjectLabel(identifier, name, length, label);
  __glintercept_log(" - glObjectLabel(identifier: %ld (%s), name: %ld, length: %ld, label: %ld)", identifier, __gl_intercept_formatenum(identifier), name, length, label);
}

typedef void(*__ctype_glObjectLabelKHR)(GLenum, GLuint, GLsizei, const GLchar *);
static __ctype_glObjectLabelKHR __glintercept_fnptr_glObjectLabelKHR;
void __glintercept_glObjectLabelKHR(GLenum identifier, GLuint name, GLsizei length, const GLchar * label) {
  __glintercept_fnptr_glObjectLabelKHR(identifier, name, length, label);
  __glintercept_log(" - glObjectLabelKHR(identifier: %ld (%s), name: %ld, length: %ld, label: %ld)", identifier, __gl_intercept_formatenum(identifier), name, length, label);
}

typedef void(*__ctype_glObjectPtrLabel)(const void *, GLsizei, const GLchar *);
static __ctype_glObjectPtrLabel __glintercept_fnptr_glObjectPtrLabel;
void __glintercept_glObjectPtrLabel(const void * ptr, GLsizei length, const GLchar * label) {
  __glintercept_fnptr_glObjectPtrLabel(ptr, length, label);
  __glintercept_log(" - glObjectPtrLabel(ptr: %ld, length: %ld, label: %ld)", ptr, length, label);
}

typedef void(*__ctype_glObjectPtrLabelKHR)(const void *, GLsizei, const GLchar *);
static __ctype_glObjectPtrLabelKHR __glintercept_fnptr_glObjectPtrLabelKHR;
void __glintercept_glObjectPtrLabelKHR(const void * ptr, GLsizei length, const GLchar * label) {
  __glintercept_fnptr_glObjectPtrLabelKHR(ptr, length, label);
  __glintercept_log(" - glObjectPtrLabelKHR(ptr: %ld, length: %ld, label: %ld)", ptr, length, label);
}

typedef GLenum(*__ctype_glObjectPurgeableAPPLE)(GLenum, GLuint, GLenum);
static __ctype_glObjectPurgeableAPPLE __glintercept_fnptr_glObjectPurgeableAPPLE;
GLenum __glintercept_glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option) {
  GLenum __ret = __glintercept_fnptr_glObjectPurgeableAPPLE(objectType, name, option);
  __glintercept_log(" - glObjectPurgeableAPPLE(objectType: %ld (%s), name: %ld, option: %ld (%s)) -> %ld", objectType, __gl_intercept_formatenum(objectType), name, option, __gl_intercept_formatenum(option), __ret);
  return __ret;
}

typedef GLenum(*__ctype_glObjectUnpurgeableAPPLE)(GLenum, GLuint, GLenum);
static __ctype_glObjectUnpurgeableAPPLE __glintercept_fnptr_glObjectUnpurgeableAPPLE;
GLenum __glintercept_glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option) {
  GLenum __ret = __glintercept_fnptr_glObjectUnpurgeableAPPLE(objectType, name, option);
  __glintercept_log(" - glObjectUnpurgeableAPPLE(objectType: %ld (%s), name: %ld, option: %ld (%s)) -> %ld", objectType, __gl_intercept_formatenum(objectType), name, option, __gl_intercept_formatenum(option), __ret);
  return __ret;
}

typedef void(*__ctype_glOrtho)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glOrtho __glintercept_fnptr_glOrtho;
void __glintercept_glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  __glintercept_fnptr_glOrtho(left, right, bottom, top, zNear, zFar);
  __glintercept_log(" - glOrtho(left: %ld, right: %ld, bottom: %ld, top: %ld, zNear: %ld, zFar: %ld)", left, right, bottom, top, zNear, zFar);
}

typedef void(*__ctype_glOrthof)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glOrthof __glintercept_fnptr_glOrthof;
void __glintercept_glOrthof(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) {
  __glintercept_fnptr_glOrthof(l, r, b, t, n, f);
  __glintercept_log(" - glOrthof(l: %ld, r: %ld, b: %ld, t: %ld, n: %ld, f: %ld)", l, r, b, t, n, f);
}

typedef void(*__ctype_glOrthofOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glOrthofOES __glintercept_fnptr_glOrthofOES;
void __glintercept_glOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) {
  __glintercept_fnptr_glOrthofOES(l, r, b, t, n, f);
  __glintercept_log(" - glOrthofOES(l: %ld, r: %ld, b: %ld, t: %ld, n: %ld, f: %ld)", l, r, b, t, n, f);
}

typedef void(*__ctype_glOrthox)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
static __ctype_glOrthox __glintercept_fnptr_glOrthox;
void __glintercept_glOrthox(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) {
  __glintercept_fnptr_glOrthox(l, r, b, t, n, f);
  __glintercept_log(" - glOrthox(l: %ld, r: %ld, b: %ld, t: %ld, n: %ld, f: %ld)", l, r, b, t, n, f);
}

typedef void(*__ctype_glOrthoxOES)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
static __ctype_glOrthoxOES __glintercept_fnptr_glOrthoxOES;
void __glintercept_glOrthoxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) {
  __glintercept_fnptr_glOrthoxOES(l, r, b, t, n, f);
  __glintercept_log(" - glOrthoxOES(l: %ld, r: %ld, b: %ld, t: %ld, n: %ld, f: %ld)", l, r, b, t, n, f);
}

typedef void(*__ctype_glPNTrianglesfATI)(GLenum, GLfloat);
static __ctype_glPNTrianglesfATI __glintercept_fnptr_glPNTrianglesfATI;
void __glintercept_glPNTrianglesfATI(GLenum pname, GLfloat param) {
  __glintercept_fnptr_glPNTrianglesfATI(pname, param);
  __glintercept_log(" - glPNTrianglesfATI(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glPNTrianglesiATI)(GLenum, GLint);
static __ctype_glPNTrianglesiATI __glintercept_fnptr_glPNTrianglesiATI;
void __glintercept_glPNTrianglesiATI(GLenum pname, GLint param) {
  __glintercept_fnptr_glPNTrianglesiATI(pname, param);
  __glintercept_log(" - glPNTrianglesiATI(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glPassTexCoordATI)(GLuint, GLuint, GLenum);
static __ctype_glPassTexCoordATI __glintercept_fnptr_glPassTexCoordATI;
void __glintercept_glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle) {
  __glintercept_fnptr_glPassTexCoordATI(dst, coord, swizzle);
  __glintercept_log(" - glPassTexCoordATI(dst: %ld, coord: %ld, swizzle: %ld (%s))", dst, coord, swizzle, __gl_intercept_formatenum(swizzle));
}

typedef void(*__ctype_glPassThrough)(GLfloat);
static __ctype_glPassThrough __glintercept_fnptr_glPassThrough;
void __glintercept_glPassThrough(GLfloat token) {
  __glintercept_fnptr_glPassThrough(token);
  __glintercept_log(" - glPassThrough(token: %ld)", token);
}

typedef void(*__ctype_glPassThroughxOES)(GLfixed);
static __ctype_glPassThroughxOES __glintercept_fnptr_glPassThroughxOES;
void __glintercept_glPassThroughxOES(GLfixed token) {
  __glintercept_fnptr_glPassThroughxOES(token);
  __glintercept_log(" - glPassThroughxOES(token: %ld)", token);
}

typedef void(*__ctype_glPatchParameterfv)(GLenum, const GLfloat *);
static __ctype_glPatchParameterfv __glintercept_fnptr_glPatchParameterfv;
void __glintercept_glPatchParameterfv(GLenum pname, const GLfloat * values) {
  __glintercept_fnptr_glPatchParameterfv(pname, values);
  __glintercept_log(" - glPatchParameterfv(pname: %ld (%s), values: %ld)", pname, __gl_intercept_formatenum(pname), values);
}

typedef void(*__ctype_glPatchParameteri)(GLenum, GLint);
static __ctype_glPatchParameteri __glintercept_fnptr_glPatchParameteri;
void __glintercept_glPatchParameteri(GLenum pname, GLint value) {
  __glintercept_fnptr_glPatchParameteri(pname, value);
  __glintercept_log(" - glPatchParameteri(pname: %ld (%s), value: %ld)", pname, __gl_intercept_formatenum(pname), value);
}

typedef void(*__ctype_glPatchParameteriEXT)(GLenum, GLint);
static __ctype_glPatchParameteriEXT __glintercept_fnptr_glPatchParameteriEXT;
void __glintercept_glPatchParameteriEXT(GLenum pname, GLint value) {
  __glintercept_fnptr_glPatchParameteriEXT(pname, value);
  __glintercept_log(" - glPatchParameteriEXT(pname: %ld (%s), value: %ld)", pname, __gl_intercept_formatenum(pname), value);
}

typedef void(*__ctype_glPatchParameteriOES)(GLenum, GLint);
static __ctype_glPatchParameteriOES __glintercept_fnptr_glPatchParameteriOES;
void __glintercept_glPatchParameteriOES(GLenum pname, GLint value) {
  __glintercept_fnptr_glPatchParameteriOES(pname, value);
  __glintercept_log(" - glPatchParameteriOES(pname: %ld (%s), value: %ld)", pname, __gl_intercept_formatenum(pname), value);
}

typedef void(*__ctype_glPathColorGenNV)(GLenum, GLenum, GLenum, const GLfloat *);
static __ctype_glPathColorGenNV __glintercept_fnptr_glPathColorGenNV;
void __glintercept_glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat * coeffs) {
  __glintercept_fnptr_glPathColorGenNV(color, genMode, colorFormat, coeffs);
  __glintercept_log(" - glPathColorGenNV(color: %ld (%s), genMode: %ld (%s), colorFormat: %ld (%s), coeffs: %ld)", color, __gl_intercept_formatenum(color), genMode, __gl_intercept_formatenum(genMode), colorFormat, __gl_intercept_formatenum(colorFormat), coeffs);
}

typedef void(*__ctype_glPathCommandsNV)(GLuint, GLsizei, const GLubyte *, GLsizei, GLenum, const void *);
static __ctype_glPathCommandsNV __glintercept_fnptr_glPathCommandsNV;
void __glintercept_glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords) {
  __glintercept_fnptr_glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords);
  __glintercept_log(" - glPathCommandsNV(path: %ld, numCommands: %ld, commands: %s, numCoords: %ld, coordType: %ld (%s), coords: %ld)", path, numCommands, commands, numCoords, coordType, __gl_intercept_formatenum(coordType), coords);
}

typedef void(*__ctype_glPathCoordsNV)(GLuint, GLsizei, GLenum, const void *);
static __ctype_glPathCoordsNV __glintercept_fnptr_glPathCoordsNV;
void __glintercept_glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void * coords) {
  __glintercept_fnptr_glPathCoordsNV(path, numCoords, coordType, coords);
  __glintercept_log(" - glPathCoordsNV(path: %ld, numCoords: %ld, coordType: %ld (%s), coords: %ld)", path, numCoords, coordType, __gl_intercept_formatenum(coordType), coords);
}

typedef void(*__ctype_glPathCoverDepthFuncNV)(GLenum);
static __ctype_glPathCoverDepthFuncNV __glintercept_fnptr_glPathCoverDepthFuncNV;
void __glintercept_glPathCoverDepthFuncNV(GLenum func) {
  __glintercept_fnptr_glPathCoverDepthFuncNV(func);
  __glintercept_log(" - glPathCoverDepthFuncNV(func: %ld (%s))", func, __gl_intercept_formatenum(func));
}

typedef void(*__ctype_glPathDashArrayNV)(GLuint, GLsizei, const GLfloat *);
static __ctype_glPathDashArrayNV __glintercept_fnptr_glPathDashArrayNV;
void __glintercept_glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat * dashArray) {
  __glintercept_fnptr_glPathDashArrayNV(path, dashCount, dashArray);
  __glintercept_log(" - glPathDashArrayNV(path: %ld, dashCount: %ld, dashArray: %ld)", path, dashCount, dashArray);
}

typedef void(*__ctype_glPathFogGenNV)(GLenum);
static __ctype_glPathFogGenNV __glintercept_fnptr_glPathFogGenNV;
void __glintercept_glPathFogGenNV(GLenum genMode) {
  __glintercept_fnptr_glPathFogGenNV(genMode);
  __glintercept_log(" - glPathFogGenNV(genMode: %ld (%s))", genMode, __gl_intercept_formatenum(genMode));
}

typedef GLenum(*__ctype_glPathGlyphIndexArrayNV)(GLuint, GLenum, const void *, GLbitfield, GLuint, GLsizei, GLuint, GLfloat);
static __ctype_glPathGlyphIndexArrayNV __glintercept_fnptr_glPathGlyphIndexArrayNV;
GLenum __glintercept_glPathGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
  GLenum __ret = __glintercept_fnptr_glPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
  __glintercept_log(" - glPathGlyphIndexArrayNV(firstPathName: %ld, fontTarget: %ld (%s), fontName: %ld, fontStyle: %ld, firstGlyphIndex: %ld, numGlyphs: %ld, pathParameterTemplate: %ld, emScale: %ld) -> %ld", firstPathName, fontTarget, __gl_intercept_formatenum(fontTarget), fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale, __ret);
  return __ret;
}

typedef GLenum(*__ctype_glPathGlyphIndexRangeNV)(GLenum, const void *, GLbitfield, GLuint, GLfloat, GLuint *);
static __ctype_glPathGlyphIndexRangeNV __glintercept_fnptr_glPathGlyphIndexRangeNV;
GLenum __glintercept_glPathGlyphIndexRangeNV(GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint * baseAndCount) {
  GLenum __ret = __glintercept_fnptr_glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);
  __glintercept_log(" - glPathGlyphIndexRangeNV(fontTarget: %ld (%s), fontName: %ld, fontStyle: %ld, pathParameterTemplate: %ld, emScale: %ld, baseAndCount: %ld) -> %ld", fontTarget, __gl_intercept_formatenum(fontTarget), fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount, __ret);
  return __ret;
}

typedef void(*__ctype_glPathGlyphRangeNV)(GLuint, GLenum, const void *, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat);
static __ctype_glPathGlyphRangeNV __glintercept_fnptr_glPathGlyphRangeNV;
void __glintercept_glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
  __glintercept_fnptr_glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
  __glintercept_log(" - glPathGlyphRangeNV(firstPathName: %ld, fontTarget: %ld (%s), fontName: %ld, fontStyle: %ld, firstGlyph: %ld, numGlyphs: %ld, handleMissingGlyphs: %ld (%s), pathParameterTemplate: %ld, emScale: %ld)", firstPathName, fontTarget, __gl_intercept_formatenum(fontTarget), fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, __gl_intercept_formatenum(handleMissingGlyphs), pathParameterTemplate, emScale);
}

typedef void(*__ctype_glPathGlyphsNV)(GLuint, GLenum, const void *, GLbitfield, GLsizei, GLenum, const void *, GLenum, GLuint, GLfloat);
static __ctype_glPathGlyphsNV __glintercept_fnptr_glPathGlyphsNV;
void __glintercept_glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void * charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
  __glintercept_fnptr_glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
  __glintercept_log(" - glPathGlyphsNV(firstPathName: %ld, fontTarget: %ld (%s), fontName: %ld, fontStyle: %ld, numGlyphs: %ld, type: %ld (%s), charcodes: %ld, handleMissingGlyphs: %ld (%s), pathParameterTemplate: %ld, emScale: %ld)", firstPathName, fontTarget, __gl_intercept_formatenum(fontTarget), fontName, fontStyle, numGlyphs, type, __gl_intercept_formatenum(type), charcodes, handleMissingGlyphs, __gl_intercept_formatenum(handleMissingGlyphs), pathParameterTemplate, emScale);
}

typedef GLenum(*__ctype_glPathMemoryGlyphIndexArrayNV)(GLuint, GLenum, GLsizeiptr, const void *, GLsizei, GLuint, GLsizei, GLuint, GLfloat);
static __ctype_glPathMemoryGlyphIndexArrayNV __glintercept_fnptr_glPathMemoryGlyphIndexArrayNV;
GLenum __glintercept_glPathMemoryGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void * fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
  GLenum __ret = __glintercept_fnptr_glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
  __glintercept_log(" - glPathMemoryGlyphIndexArrayNV(firstPathName: %ld, fontTarget: %ld (%s), fontSize: %ld, fontData: %ld, faceIndex: %ld, firstGlyphIndex: %ld, numGlyphs: %ld, pathParameterTemplate: %ld, emScale: %ld) -> %ld", firstPathName, fontTarget, __gl_intercept_formatenum(fontTarget), fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale, __ret);
  return __ret;
}

typedef void(*__ctype_glPathParameterfNV)(GLuint, GLenum, GLfloat);
static __ctype_glPathParameterfNV __glintercept_fnptr_glPathParameterfNV;
void __glintercept_glPathParameterfNV(GLuint path, GLenum pname, GLfloat value) {
  __glintercept_fnptr_glPathParameterfNV(path, pname, value);
  __glintercept_log(" - glPathParameterfNV(path: %ld, pname: %ld (%s), value: %ld)", path, pname, __gl_intercept_formatenum(pname), value);
}

typedef void(*__ctype_glPathParameterfvNV)(GLuint, GLenum, const GLfloat *);
static __ctype_glPathParameterfvNV __glintercept_fnptr_glPathParameterfvNV;
void __glintercept_glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat * value) {
  __glintercept_fnptr_glPathParameterfvNV(path, pname, value);
  __glintercept_log(" - glPathParameterfvNV(path: %ld, pname: %ld (%s), value: %ld)", path, pname, __gl_intercept_formatenum(pname), value);
}

typedef void(*__ctype_glPathParameteriNV)(GLuint, GLenum, GLint);
static __ctype_glPathParameteriNV __glintercept_fnptr_glPathParameteriNV;
void __glintercept_glPathParameteriNV(GLuint path, GLenum pname, GLint value) {
  __glintercept_fnptr_glPathParameteriNV(path, pname, value);
  __glintercept_log(" - glPathParameteriNV(path: %ld, pname: %ld (%s), value: %ld)", path, pname, __gl_intercept_formatenum(pname), value);
}

typedef void(*__ctype_glPathParameterivNV)(GLuint, GLenum, const GLint *);
static __ctype_glPathParameterivNV __glintercept_fnptr_glPathParameterivNV;
void __glintercept_glPathParameterivNV(GLuint path, GLenum pname, const GLint * value) {
  __glintercept_fnptr_glPathParameterivNV(path, pname, value);
  __glintercept_log(" - glPathParameterivNV(path: %ld, pname: %ld (%s), value: %ld)", path, pname, __gl_intercept_formatenum(pname), value);
}

typedef void(*__ctype_glPathStencilDepthOffsetNV)(GLfloat, GLfloat);
static __ctype_glPathStencilDepthOffsetNV __glintercept_fnptr_glPathStencilDepthOffsetNV;
void __glintercept_glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units) {
  __glintercept_fnptr_glPathStencilDepthOffsetNV(factor, units);
  __glintercept_log(" - glPathStencilDepthOffsetNV(factor: %ld, units: %ld)", factor, units);
}

typedef void(*__ctype_glPathStencilFuncNV)(GLenum, GLint, GLuint);
static __ctype_glPathStencilFuncNV __glintercept_fnptr_glPathStencilFuncNV;
void __glintercept_glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask) {
  __glintercept_fnptr_glPathStencilFuncNV(func, ref, mask);
  __glintercept_log(" - glPathStencilFuncNV(func: %ld (%s), ref: %ld, mask: %ld)", func, __gl_intercept_formatenum(func), ref, mask);
}

typedef void(*__ctype_glPathStringNV)(GLuint, GLenum, GLsizei, const void *);
static __ctype_glPathStringNV __glintercept_fnptr_glPathStringNV;
void __glintercept_glPathStringNV(GLuint path, GLenum format, GLsizei length, const void * pathString) {
  __glintercept_fnptr_glPathStringNV(path, format, length, pathString);
  __glintercept_log(" - glPathStringNV(path: %ld, format: %ld (%s), length: %ld, pathString: %ld)", path, format, __gl_intercept_formatenum(format), length, pathString);
}

typedef void(*__ctype_glPathSubCommandsNV)(GLuint, GLsizei, GLsizei, GLsizei, const GLubyte *, GLsizei, GLenum, const void *);
static __ctype_glPathSubCommandsNV __glintercept_fnptr_glPathSubCommandsNV;
void __glintercept_glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords) {
  __glintercept_fnptr_glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
  __glintercept_log(" - glPathSubCommandsNV(path: %ld, commandStart: %ld, commandsToDelete: %ld, numCommands: %ld, commands: %s, numCoords: %ld, coordType: %ld (%s), coords: %ld)", path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, __gl_intercept_formatenum(coordType), coords);
}

typedef void(*__ctype_glPathSubCoordsNV)(GLuint, GLsizei, GLsizei, GLenum, const void *);
static __ctype_glPathSubCoordsNV __glintercept_fnptr_glPathSubCoordsNV;
void __glintercept_glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void * coords) {
  __glintercept_fnptr_glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords);
  __glintercept_log(" - glPathSubCoordsNV(path: %ld, coordStart: %ld, numCoords: %ld, coordType: %ld (%s), coords: %ld)", path, coordStart, numCoords, coordType, __gl_intercept_formatenum(coordType), coords);
}

typedef void(*__ctype_glPathTexGenNV)(GLenum, GLenum, GLint, const GLfloat *);
static __ctype_glPathTexGenNV __glintercept_fnptr_glPathTexGenNV;
void __glintercept_glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat * coeffs) {
  __glintercept_fnptr_glPathTexGenNV(texCoordSet, genMode, components, coeffs);
  __glintercept_log(" - glPathTexGenNV(texCoordSet: %ld (%s), genMode: %ld (%s), components: %ld, coeffs: %ld)", texCoordSet, __gl_intercept_formatenum(texCoordSet), genMode, __gl_intercept_formatenum(genMode), components, coeffs);
}

typedef void(*__ctype_glPauseTransformFeedback)();
static __ctype_glPauseTransformFeedback __glintercept_fnptr_glPauseTransformFeedback;
void __glintercept_glPauseTransformFeedback() {
  __glintercept_fnptr_glPauseTransformFeedback();
  __glintercept_log(" - glPauseTransformFeedback()");
}

typedef void(*__ctype_glPauseTransformFeedbackNV)();
static __ctype_glPauseTransformFeedbackNV __glintercept_fnptr_glPauseTransformFeedbackNV;
void __glintercept_glPauseTransformFeedbackNV() {
  __glintercept_fnptr_glPauseTransformFeedbackNV();
  __glintercept_log(" - glPauseTransformFeedbackNV()");
}

typedef void(*__ctype_glPixelDataRangeNV)(GLenum, GLsizei, const void *);
static __ctype_glPixelDataRangeNV __glintercept_fnptr_glPixelDataRangeNV;
void __glintercept_glPixelDataRangeNV(GLenum target, GLsizei length, const void * pointer) {
  __glintercept_fnptr_glPixelDataRangeNV(target, length, pointer);
  __glintercept_log(" - glPixelDataRangeNV(target: %ld (%s), length: %ld, pointer: %ld)", target, __gl_intercept_formatenum(target), length, pointer);
}

typedef void(*__ctype_glPixelMapfv)(GLenum, GLsizei, const GLfloat *);
static __ctype_glPixelMapfv __glintercept_fnptr_glPixelMapfv;
void __glintercept_glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat * values) {
  __glintercept_fnptr_glPixelMapfv(map, mapsize, values);
  __glintercept_log(" - glPixelMapfv(map: %ld (%s), mapsize: %ld, values: %ld)", map, __gl_intercept_formatenum(map), mapsize, values);
}

typedef void(*__ctype_glPixelMapuiv)(GLenum, GLsizei, const GLuint *);
static __ctype_glPixelMapuiv __glintercept_fnptr_glPixelMapuiv;
void __glintercept_glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint * values) {
  __glintercept_fnptr_glPixelMapuiv(map, mapsize, values);
  __glintercept_log(" - glPixelMapuiv(map: %ld (%s), mapsize: %ld, values: %ld)", map, __gl_intercept_formatenum(map), mapsize, values);
}

typedef void(*__ctype_glPixelMapusv)(GLenum, GLsizei, const GLushort *);
static __ctype_glPixelMapusv __glintercept_fnptr_glPixelMapusv;
void __glintercept_glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort * values) {
  __glintercept_fnptr_glPixelMapusv(map, mapsize, values);
  __glintercept_log(" - glPixelMapusv(map: %ld (%s), mapsize: %ld, values: %ld)", map, __gl_intercept_formatenum(map), mapsize, values);
}

typedef void(*__ctype_glPixelMapx)(GLenum, GLint, const GLfixed *);
static __ctype_glPixelMapx __glintercept_fnptr_glPixelMapx;
void __glintercept_glPixelMapx(GLenum map, GLint size, const GLfixed * values) {
  __glintercept_fnptr_glPixelMapx(map, size, values);
  __glintercept_log(" - glPixelMapx(map: %ld (%s), size: %ld, values: %ld)", map, __gl_intercept_formatenum(map), size, values);
}

typedef void(*__ctype_glPixelStoref)(GLenum, GLfloat);
static __ctype_glPixelStoref __glintercept_fnptr_glPixelStoref;
void __glintercept_glPixelStoref(GLenum pname, GLfloat param) {
  __glintercept_fnptr_glPixelStoref(pname, param);
  __glintercept_log(" - glPixelStoref(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glPixelStorei)(GLenum, GLint);
static __ctype_glPixelStorei __glintercept_fnptr_glPixelStorei;
void __glintercept_glPixelStorei(GLenum pname, GLint param) {
  __glintercept_fnptr_glPixelStorei(pname, param);
  __glintercept_log(" - glPixelStorei(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glPixelStorex)(GLenum, GLfixed);
static __ctype_glPixelStorex __glintercept_fnptr_glPixelStorex;
void __glintercept_glPixelStorex(GLenum pname, GLfixed param) {
  __glintercept_fnptr_glPixelStorex(pname, param);
  __glintercept_log(" - glPixelStorex(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glPixelTexGenParameterfSGIS)(GLenum, GLfloat);
static __ctype_glPixelTexGenParameterfSGIS __glintercept_fnptr_glPixelTexGenParameterfSGIS;
void __glintercept_glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param) {
  __glintercept_fnptr_glPixelTexGenParameterfSGIS(pname, param);
  __glintercept_log(" - glPixelTexGenParameterfSGIS(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glPixelTexGenParameterfvSGIS)(GLenum, const GLfloat *);
static __ctype_glPixelTexGenParameterfvSGIS __glintercept_fnptr_glPixelTexGenParameterfvSGIS;
void __glintercept_glPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glPixelTexGenParameterfvSGIS(pname, params);
  __glintercept_log(" - glPixelTexGenParameterfvSGIS(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glPixelTexGenParameteriSGIS)(GLenum, GLint);
static __ctype_glPixelTexGenParameteriSGIS __glintercept_fnptr_glPixelTexGenParameteriSGIS;
void __glintercept_glPixelTexGenParameteriSGIS(GLenum pname, GLint param) {
  __glintercept_fnptr_glPixelTexGenParameteriSGIS(pname, param);
  __glintercept_log(" - glPixelTexGenParameteriSGIS(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glPixelTexGenParameterivSGIS)(GLenum, const GLint *);
static __ctype_glPixelTexGenParameterivSGIS __glintercept_fnptr_glPixelTexGenParameterivSGIS;
void __glintercept_glPixelTexGenParameterivSGIS(GLenum pname, const GLint * params) {
  __glintercept_fnptr_glPixelTexGenParameterivSGIS(pname, params);
  __glintercept_log(" - glPixelTexGenParameterivSGIS(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glPixelTexGenSGIX)(GLenum);
static __ctype_glPixelTexGenSGIX __glintercept_fnptr_glPixelTexGenSGIX;
void __glintercept_glPixelTexGenSGIX(GLenum mode) {
  __glintercept_fnptr_glPixelTexGenSGIX(mode);
  __glintercept_log(" - glPixelTexGenSGIX(mode: %ld (%s))", mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glPixelTransferf)(GLenum, GLfloat);
static __ctype_glPixelTransferf __glintercept_fnptr_glPixelTransferf;
void __glintercept_glPixelTransferf(GLenum pname, GLfloat param) {
  __glintercept_fnptr_glPixelTransferf(pname, param);
  __glintercept_log(" - glPixelTransferf(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glPixelTransferi)(GLenum, GLint);
static __ctype_glPixelTransferi __glintercept_fnptr_glPixelTransferi;
void __glintercept_glPixelTransferi(GLenum pname, GLint param) {
  __glintercept_fnptr_glPixelTransferi(pname, param);
  __glintercept_log(" - glPixelTransferi(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glPixelTransferxOES)(GLenum, GLfixed);
static __ctype_glPixelTransferxOES __glintercept_fnptr_glPixelTransferxOES;
void __glintercept_glPixelTransferxOES(GLenum pname, GLfixed param) {
  __glintercept_fnptr_glPixelTransferxOES(pname, param);
  __glintercept_log(" - glPixelTransferxOES(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glPixelTransformParameterfEXT)(GLenum, GLenum, GLfloat);
static __ctype_glPixelTransformParameterfEXT __glintercept_fnptr_glPixelTransformParameterfEXT;
void __glintercept_glPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param) {
  __glintercept_fnptr_glPixelTransformParameterfEXT(target, pname, param);
  __glintercept_log(" - glPixelTransformParameterfEXT(target: %ld (%s), pname: %ld (%s), param: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glPixelTransformParameterfvEXT)(GLenum, GLenum, const GLfloat *);
static __ctype_glPixelTransformParameterfvEXT __glintercept_fnptr_glPixelTransformParameterfvEXT;
void __glintercept_glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glPixelTransformParameterfvEXT(target, pname, params);
  __glintercept_log(" - glPixelTransformParameterfvEXT(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glPixelTransformParameteriEXT)(GLenum, GLenum, GLint);
static __ctype_glPixelTransformParameteriEXT __glintercept_fnptr_glPixelTransformParameteriEXT;
void __glintercept_glPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param) {
  __glintercept_fnptr_glPixelTransformParameteriEXT(target, pname, param);
  __glintercept_log(" - glPixelTransformParameteriEXT(target: %ld (%s), pname: %ld (%s), param: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glPixelTransformParameterivEXT)(GLenum, GLenum, const GLint *);
static __ctype_glPixelTransformParameterivEXT __glintercept_fnptr_glPixelTransformParameterivEXT;
void __glintercept_glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glPixelTransformParameterivEXT(target, pname, params);
  __glintercept_log(" - glPixelTransformParameterivEXT(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glPixelZoom)(GLfloat, GLfloat);
static __ctype_glPixelZoom __glintercept_fnptr_glPixelZoom;
void __glintercept_glPixelZoom(GLfloat xfactor, GLfloat yfactor) {
  __glintercept_fnptr_glPixelZoom(xfactor, yfactor);
  __glintercept_log(" - glPixelZoom(xfactor: %ld, yfactor: %ld)", xfactor, yfactor);
}

typedef void(*__ctype_glPixelZoomxOES)(GLfixed, GLfixed);
static __ctype_glPixelZoomxOES __glintercept_fnptr_glPixelZoomxOES;
void __glintercept_glPixelZoomxOES(GLfixed xfactor, GLfixed yfactor) {
  __glintercept_fnptr_glPixelZoomxOES(xfactor, yfactor);
  __glintercept_log(" - glPixelZoomxOES(xfactor: %ld, yfactor: %ld)", xfactor, yfactor);
}

typedef GLboolean(*__ctype_glPointAlongPathNV)(GLuint, GLsizei, GLsizei, GLfloat, GLfloat *, GLfloat *, GLfloat *, GLfloat *);
static __ctype_glPointAlongPathNV __glintercept_fnptr_glPointAlongPathNV;
GLboolean __glintercept_glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY) {
  GLboolean __ret = __glintercept_fnptr_glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
  __glintercept_log(" - glPointAlongPathNV(path: %ld, startSegment: %ld, numSegments: %ld, distance: %ld, x: %ld, y: %ld, tangentX: %ld, tangentY: %ld) -> %ld", path, startSegment, numSegments, distance, x, y, tangentX, tangentY, __ret);
  return __ret;
}

typedef void(*__ctype_glPointParameterf)(GLenum, GLfloat);
static __ctype_glPointParameterf __glintercept_fnptr_glPointParameterf;
void __glintercept_glPointParameterf(GLenum pname, GLfloat param) {
  __glintercept_fnptr_glPointParameterf(pname, param);
  __glintercept_log(" - glPointParameterf(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glPointParameterfARB)(GLenum, GLfloat);
static __ctype_glPointParameterfARB __glintercept_fnptr_glPointParameterfARB;
void __glintercept_glPointParameterfARB(GLenum pname, GLfloat param) {
  __glintercept_fnptr_glPointParameterfARB(pname, param);
  __glintercept_log(" - glPointParameterfARB(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glPointParameterfEXT)(GLenum, GLfloat);
static __ctype_glPointParameterfEXT __glintercept_fnptr_glPointParameterfEXT;
void __glintercept_glPointParameterfEXT(GLenum pname, GLfloat param) {
  __glintercept_fnptr_glPointParameterfEXT(pname, param);
  __glintercept_log(" - glPointParameterfEXT(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glPointParameterfSGIS)(GLenum, GLfloat);
static __ctype_glPointParameterfSGIS __glintercept_fnptr_glPointParameterfSGIS;
void __glintercept_glPointParameterfSGIS(GLenum pname, GLfloat param) {
  __glintercept_fnptr_glPointParameterfSGIS(pname, param);
  __glintercept_log(" - glPointParameterfSGIS(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glPointParameterfv)(GLenum, const GLfloat *);
static __ctype_glPointParameterfv __glintercept_fnptr_glPointParameterfv;
void __glintercept_glPointParameterfv(GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glPointParameterfv(pname, params);
  __glintercept_log(" - glPointParameterfv(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glPointParameterfvARB)(GLenum, const GLfloat *);
static __ctype_glPointParameterfvARB __glintercept_fnptr_glPointParameterfvARB;
void __glintercept_glPointParameterfvARB(GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glPointParameterfvARB(pname, params);
  __glintercept_log(" - glPointParameterfvARB(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glPointParameterfvEXT)(GLenum, const GLfloat *);
static __ctype_glPointParameterfvEXT __glintercept_fnptr_glPointParameterfvEXT;
void __glintercept_glPointParameterfvEXT(GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glPointParameterfvEXT(pname, params);
  __glintercept_log(" - glPointParameterfvEXT(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glPointParameterfvSGIS)(GLenum, const GLfloat *);
static __ctype_glPointParameterfvSGIS __glintercept_fnptr_glPointParameterfvSGIS;
void __glintercept_glPointParameterfvSGIS(GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glPointParameterfvSGIS(pname, params);
  __glintercept_log(" - glPointParameterfvSGIS(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glPointParameteri)(GLenum, GLint);
static __ctype_glPointParameteri __glintercept_fnptr_glPointParameteri;
void __glintercept_glPointParameteri(GLenum pname, GLint param) {
  __glintercept_fnptr_glPointParameteri(pname, param);
  __glintercept_log(" - glPointParameteri(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glPointParameteriNV)(GLenum, GLint);
static __ctype_glPointParameteriNV __glintercept_fnptr_glPointParameteriNV;
void __glintercept_glPointParameteriNV(GLenum pname, GLint param) {
  __glintercept_fnptr_glPointParameteriNV(pname, param);
  __glintercept_log(" - glPointParameteriNV(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glPointParameteriv)(GLenum, const GLint *);
static __ctype_glPointParameteriv __glintercept_fnptr_glPointParameteriv;
void __glintercept_glPointParameteriv(GLenum pname, const GLint * params) {
  __glintercept_fnptr_glPointParameteriv(pname, params);
  __glintercept_log(" - glPointParameteriv(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glPointParameterivNV)(GLenum, const GLint *);
static __ctype_glPointParameterivNV __glintercept_fnptr_glPointParameterivNV;
void __glintercept_glPointParameterivNV(GLenum pname, const GLint * params) {
  __glintercept_fnptr_glPointParameterivNV(pname, params);
  __glintercept_log(" - glPointParameterivNV(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glPointParameterx)(GLenum, GLfixed);
static __ctype_glPointParameterx __glintercept_fnptr_glPointParameterx;
void __glintercept_glPointParameterx(GLenum pname, GLfixed param) {
  __glintercept_fnptr_glPointParameterx(pname, param);
  __glintercept_log(" - glPointParameterx(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glPointParameterxOES)(GLenum, GLfixed);
static __ctype_glPointParameterxOES __glintercept_fnptr_glPointParameterxOES;
void __glintercept_glPointParameterxOES(GLenum pname, GLfixed param) {
  __glintercept_fnptr_glPointParameterxOES(pname, param);
  __glintercept_log(" - glPointParameterxOES(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glPointParameterxv)(GLenum, const GLfixed *);
static __ctype_glPointParameterxv __glintercept_fnptr_glPointParameterxv;
void __glintercept_glPointParameterxv(GLenum pname, const GLfixed * params) {
  __glintercept_fnptr_glPointParameterxv(pname, params);
  __glintercept_log(" - glPointParameterxv(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glPointParameterxvOES)(GLenum, const GLfixed *);
static __ctype_glPointParameterxvOES __glintercept_fnptr_glPointParameterxvOES;
void __glintercept_glPointParameterxvOES(GLenum pname, const GLfixed * params) {
  __glintercept_fnptr_glPointParameterxvOES(pname, params);
  __glintercept_log(" - glPointParameterxvOES(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glPointSize)(GLfloat);
static __ctype_glPointSize __glintercept_fnptr_glPointSize;
void __glintercept_glPointSize(GLfloat size) {
  __glintercept_fnptr_glPointSize(size);
  __glintercept_log(" - glPointSize(size: %ld)", size);
}

typedef void(*__ctype_glPointSizePointerOES)(GLenum, GLsizei, const void *);
static __ctype_glPointSizePointerOES __glintercept_fnptr_glPointSizePointerOES;
void __glintercept_glPointSizePointerOES(GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glPointSizePointerOES(type, stride, pointer);
  __glintercept_log(" - glPointSizePointerOES(type: %ld (%s), stride: %ld, pointer: %ld)", type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glPointSizex)(GLfixed);
static __ctype_glPointSizex __glintercept_fnptr_glPointSizex;
void __glintercept_glPointSizex(GLfixed size) {
  __glintercept_fnptr_glPointSizex(size);
  __glintercept_log(" - glPointSizex(size: %ld)", size);
}

typedef void(*__ctype_glPointSizexOES)(GLfixed);
static __ctype_glPointSizexOES __glintercept_fnptr_glPointSizexOES;
void __glintercept_glPointSizexOES(GLfixed size) {
  __glintercept_fnptr_glPointSizexOES(size);
  __glintercept_log(" - glPointSizexOES(size: %ld)", size);
}

typedef GLint(*__ctype_glPollAsyncSGIX)(GLuint *);
static __ctype_glPollAsyncSGIX __glintercept_fnptr_glPollAsyncSGIX;
GLint __glintercept_glPollAsyncSGIX(GLuint * markerp) {
  GLint __ret = __glintercept_fnptr_glPollAsyncSGIX(markerp);
  __glintercept_log(" - glPollAsyncSGIX(markerp: %ld) -> %ld", markerp, __ret);
  return __ret;
}

typedef GLint(*__ctype_glPollInstrumentsSGIX)(GLint *);
static __ctype_glPollInstrumentsSGIX __glintercept_fnptr_glPollInstrumentsSGIX;
GLint __glintercept_glPollInstrumentsSGIX(GLint * marker_p) {
  GLint __ret = __glintercept_fnptr_glPollInstrumentsSGIX(marker_p);
  __glintercept_log(" - glPollInstrumentsSGIX(marker_p: %ld) -> %ld", marker_p, __ret);
  return __ret;
}

typedef void(*__ctype_glPolygonMode)(GLenum, GLenum);
static __ctype_glPolygonMode __glintercept_fnptr_glPolygonMode;
void __glintercept_glPolygonMode(GLenum face, GLenum mode) {
  __glintercept_fnptr_glPolygonMode(face, mode);
  __glintercept_log(" - glPolygonMode(face: %ld (%s), mode: %ld (%s))", face, __gl_intercept_formatenum(face), mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glPolygonModeNV)(GLenum, GLenum);
static __ctype_glPolygonModeNV __glintercept_fnptr_glPolygonModeNV;
void __glintercept_glPolygonModeNV(GLenum face, GLenum mode) {
  __glintercept_fnptr_glPolygonModeNV(face, mode);
  __glintercept_log(" - glPolygonModeNV(face: %ld (%s), mode: %ld (%s))", face, __gl_intercept_formatenum(face), mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glPolygonOffset)(GLfloat, GLfloat);
static __ctype_glPolygonOffset __glintercept_fnptr_glPolygonOffset;
void __glintercept_glPolygonOffset(GLfloat factor, GLfloat units) {
  __glintercept_fnptr_glPolygonOffset(factor, units);
  __glintercept_log(" - glPolygonOffset(factor: %ld, units: %ld)", factor, units);
}

typedef void(*__ctype_glPolygonOffsetClamp)(GLfloat, GLfloat, GLfloat);
static __ctype_glPolygonOffsetClamp __glintercept_fnptr_glPolygonOffsetClamp;
void __glintercept_glPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp) {
  __glintercept_fnptr_glPolygonOffsetClamp(factor, units, clamp);
  __glintercept_log(" - glPolygonOffsetClamp(factor: %ld, units: %ld, clamp: %ld)", factor, units, clamp);
}

typedef void(*__ctype_glPolygonOffsetClampEXT)(GLfloat, GLfloat, GLfloat);
static __ctype_glPolygonOffsetClampEXT __glintercept_fnptr_glPolygonOffsetClampEXT;
void __glintercept_glPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp) {
  __glintercept_fnptr_glPolygonOffsetClampEXT(factor, units, clamp);
  __glintercept_log(" - glPolygonOffsetClampEXT(factor: %ld, units: %ld, clamp: %ld)", factor, units, clamp);
}

typedef void(*__ctype_glPolygonOffsetEXT)(GLfloat, GLfloat);
static __ctype_glPolygonOffsetEXT __glintercept_fnptr_glPolygonOffsetEXT;
void __glintercept_glPolygonOffsetEXT(GLfloat factor, GLfloat bias) {
  __glintercept_fnptr_glPolygonOffsetEXT(factor, bias);
  __glintercept_log(" - glPolygonOffsetEXT(factor: %ld, bias: %ld)", factor, bias);
}

typedef void(*__ctype_glPolygonOffsetx)(GLfixed, GLfixed);
static __ctype_glPolygonOffsetx __glintercept_fnptr_glPolygonOffsetx;
void __glintercept_glPolygonOffsetx(GLfixed factor, GLfixed units) {
  __glintercept_fnptr_glPolygonOffsetx(factor, units);
  __glintercept_log(" - glPolygonOffsetx(factor: %ld, units: %ld)", factor, units);
}

typedef void(*__ctype_glPolygonOffsetxOES)(GLfixed, GLfixed);
static __ctype_glPolygonOffsetxOES __glintercept_fnptr_glPolygonOffsetxOES;
void __glintercept_glPolygonOffsetxOES(GLfixed factor, GLfixed units) {
  __glintercept_fnptr_glPolygonOffsetxOES(factor, units);
  __glintercept_log(" - glPolygonOffsetxOES(factor: %ld, units: %ld)", factor, units);
}

typedef void(*__ctype_glPolygonStipple)(const GLubyte *);
static __ctype_glPolygonStipple __glintercept_fnptr_glPolygonStipple;
void __glintercept_glPolygonStipple(const GLubyte * mask) {
  __glintercept_fnptr_glPolygonStipple(mask);
  __glintercept_log(" - glPolygonStipple(mask: %s)", mask);
}

typedef void(*__ctype_glPopAttrib)();
static __ctype_glPopAttrib __glintercept_fnptr_glPopAttrib;
void __glintercept_glPopAttrib() {
  __glintercept_fnptr_glPopAttrib();
  __glintercept_log(" - glPopAttrib()");
}

typedef void(*__ctype_glPopClientAttrib)();
static __ctype_glPopClientAttrib __glintercept_fnptr_glPopClientAttrib;
void __glintercept_glPopClientAttrib() {
  __glintercept_fnptr_glPopClientAttrib();
  __glintercept_log(" - glPopClientAttrib()");
}

typedef void(*__ctype_glPopDebugGroup)();
static __ctype_glPopDebugGroup __glintercept_fnptr_glPopDebugGroup;
void __glintercept_glPopDebugGroup() {
  __glintercept_fnptr_glPopDebugGroup();
  __glintercept_log(" - glPopDebugGroup()");
}

typedef void(*__ctype_glPopDebugGroupKHR)();
static __ctype_glPopDebugGroupKHR __glintercept_fnptr_glPopDebugGroupKHR;
void __glintercept_glPopDebugGroupKHR() {
  __glintercept_fnptr_glPopDebugGroupKHR();
  __glintercept_log(" - glPopDebugGroupKHR()");
}

typedef void(*__ctype_glPopGroupMarkerEXT)();
static __ctype_glPopGroupMarkerEXT __glintercept_fnptr_glPopGroupMarkerEXT;
void __glintercept_glPopGroupMarkerEXT() {
  __glintercept_fnptr_glPopGroupMarkerEXT();
  __glintercept_log(" - glPopGroupMarkerEXT()");
}

typedef void(*__ctype_glPopMatrix)();
static __ctype_glPopMatrix __glintercept_fnptr_glPopMatrix;
void __glintercept_glPopMatrix() {
  __glintercept_fnptr_glPopMatrix();
  __glintercept_log(" - glPopMatrix()");
}

typedef void(*__ctype_glPopName)();
static __ctype_glPopName __glintercept_fnptr_glPopName;
void __glintercept_glPopName() {
  __glintercept_fnptr_glPopName();
  __glintercept_log(" - glPopName()");
}

typedef void(*__ctype_glPresentFrameDualFillNV)(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint);
static __ctype_glPresentFrameDualFillNV __glintercept_fnptr_glPresentFrameDualFillNV;
void __glintercept_glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3) {
  __glintercept_fnptr_glPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
  __glintercept_log(" - glPresentFrameDualFillNV(video_slot: %ld, minPresentTime: %ld, beginPresentTimeId: %ld, presentDurationId: %ld, type: %ld (%s), target0: %ld (%s), fill0: %ld, target1: %ld (%s), fill1: %ld, target2: %ld (%s), fill2: %ld, target3: %ld (%s), fill3: %ld)", video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, __gl_intercept_formatenum(type), target0, __gl_intercept_formatenum(target0), fill0, target1, __gl_intercept_formatenum(target1), fill1, target2, __gl_intercept_formatenum(target2), fill2, target3, __gl_intercept_formatenum(target3), fill3);
}

typedef void(*__ctype_glPresentFrameKeyedNV)(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint);
static __ctype_glPresentFrameKeyedNV __glintercept_fnptr_glPresentFrameKeyedNV;
void __glintercept_glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1) {
  __glintercept_fnptr_glPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
  __glintercept_log(" - glPresentFrameKeyedNV(video_slot: %ld, minPresentTime: %ld, beginPresentTimeId: %ld, presentDurationId: %ld, type: %ld (%s), target0: %ld (%s), fill0: %ld, key0: %ld, target1: %ld (%s), fill1: %ld, key1: %ld)", video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, __gl_intercept_formatenum(type), target0, __gl_intercept_formatenum(target0), fill0, key0, target1, __gl_intercept_formatenum(target1), fill1, key1);
}

typedef void(*__ctype_glPrimitiveBoundingBox)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glPrimitiveBoundingBox __glintercept_fnptr_glPrimitiveBoundingBox;
void __glintercept_glPrimitiveBoundingBox(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) {
  __glintercept_fnptr_glPrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
  __glintercept_log(" - glPrimitiveBoundingBox(minX: %ld, minY: %ld, minZ: %ld, minW: %ld, maxX: %ld, maxY: %ld, maxZ: %ld, maxW: %ld)", minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}

typedef void(*__ctype_glPrimitiveBoundingBoxARB)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glPrimitiveBoundingBoxARB __glintercept_fnptr_glPrimitiveBoundingBoxARB;
void __glintercept_glPrimitiveBoundingBoxARB(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) {
  __glintercept_fnptr_glPrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
  __glintercept_log(" - glPrimitiveBoundingBoxARB(minX: %ld, minY: %ld, minZ: %ld, minW: %ld, maxX: %ld, maxY: %ld, maxZ: %ld, maxW: %ld)", minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}

typedef void(*__ctype_glPrimitiveBoundingBoxEXT)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glPrimitiveBoundingBoxEXT __glintercept_fnptr_glPrimitiveBoundingBoxEXT;
void __glintercept_glPrimitiveBoundingBoxEXT(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) {
  __glintercept_fnptr_glPrimitiveBoundingBoxEXT(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
  __glintercept_log(" - glPrimitiveBoundingBoxEXT(minX: %ld, minY: %ld, minZ: %ld, minW: %ld, maxX: %ld, maxY: %ld, maxZ: %ld, maxW: %ld)", minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}

typedef void(*__ctype_glPrimitiveBoundingBoxOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glPrimitiveBoundingBoxOES __glintercept_fnptr_glPrimitiveBoundingBoxOES;
void __glintercept_glPrimitiveBoundingBoxOES(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) {
  __glintercept_fnptr_glPrimitiveBoundingBoxOES(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
  __glintercept_log(" - glPrimitiveBoundingBoxOES(minX: %ld, minY: %ld, minZ: %ld, minW: %ld, maxX: %ld, maxY: %ld, maxZ: %ld, maxW: %ld)", minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}

typedef void(*__ctype_glPrimitiveRestartIndex)(GLuint);
static __ctype_glPrimitiveRestartIndex __glintercept_fnptr_glPrimitiveRestartIndex;
void __glintercept_glPrimitiveRestartIndex(GLuint index) {
  __glintercept_fnptr_glPrimitiveRestartIndex(index);
  __glintercept_log(" - glPrimitiveRestartIndex(index: %ld)", index);
}

typedef void(*__ctype_glPrimitiveRestartIndexNV)(GLuint);
static __ctype_glPrimitiveRestartIndexNV __glintercept_fnptr_glPrimitiveRestartIndexNV;
void __glintercept_glPrimitiveRestartIndexNV(GLuint index) {
  __glintercept_fnptr_glPrimitiveRestartIndexNV(index);
  __glintercept_log(" - glPrimitiveRestartIndexNV(index: %ld)", index);
}

typedef void(*__ctype_glPrimitiveRestartNV)();
static __ctype_glPrimitiveRestartNV __glintercept_fnptr_glPrimitiveRestartNV;
void __glintercept_glPrimitiveRestartNV() {
  __glintercept_fnptr_glPrimitiveRestartNV();
  __glintercept_log(" - glPrimitiveRestartNV()");
}

typedef void(*__ctype_glPrioritizeTextures)(GLsizei, const GLuint *, const GLfloat *);
static __ctype_glPrioritizeTextures __glintercept_fnptr_glPrioritizeTextures;
void __glintercept_glPrioritizeTextures(GLsizei n, const GLuint * textures, const GLfloat * priorities) {
  __glintercept_fnptr_glPrioritizeTextures(n, textures, priorities);
  __glintercept_log(" - glPrioritizeTextures(n: %ld, textures: %ld, priorities: %ld)", n, textures, priorities);
}

typedef void(*__ctype_glPrioritizeTexturesEXT)(GLsizei, const GLuint *, const GLclampf *);
static __ctype_glPrioritizeTexturesEXT __glintercept_fnptr_glPrioritizeTexturesEXT;
void __glintercept_glPrioritizeTexturesEXT(GLsizei n, const GLuint * textures, const GLclampf * priorities) {
  __glintercept_fnptr_glPrioritizeTexturesEXT(n, textures, priorities);
  __glintercept_log(" - glPrioritizeTexturesEXT(n: %ld, textures: %ld, priorities: %ld)", n, textures, priorities);
}

typedef void(*__ctype_glPrioritizeTexturesxOES)(GLsizei, const GLuint *, const GLfixed *);
static __ctype_glPrioritizeTexturesxOES __glintercept_fnptr_glPrioritizeTexturesxOES;
void __glintercept_glPrioritizeTexturesxOES(GLsizei n, const GLuint * textures, const GLfixed * priorities) {
  __glintercept_fnptr_glPrioritizeTexturesxOES(n, textures, priorities);
  __glintercept_log(" - glPrioritizeTexturesxOES(n: %ld, textures: %ld, priorities: %ld)", n, textures, priorities);
}

typedef void(*__ctype_glProgramBinary)(GLuint, GLenum, const void *, GLsizei);
static __ctype_glProgramBinary __glintercept_fnptr_glProgramBinary;
void __glintercept_glProgramBinary(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length) {
  __glintercept_fnptr_glProgramBinary(program, binaryFormat, binary, length);
  __glintercept_log(" - glProgramBinary(program: %ld, binaryFormat: %ld (%s), binary: %ld, length: %ld)", program, binaryFormat, __gl_intercept_formatenum(binaryFormat), binary, length);
}

typedef void(*__ctype_glProgramBinaryOES)(GLuint, GLenum, const void *, GLint);
static __ctype_glProgramBinaryOES __glintercept_fnptr_glProgramBinaryOES;
void __glintercept_glProgramBinaryOES(GLuint program, GLenum binaryFormat, const void * binary, GLint length) {
  __glintercept_fnptr_glProgramBinaryOES(program, binaryFormat, binary, length);
  __glintercept_log(" - glProgramBinaryOES(program: %ld, binaryFormat: %ld (%s), binary: %ld, length: %ld)", program, binaryFormat, __gl_intercept_formatenum(binaryFormat), binary, length);
}

typedef void(*__ctype_glProgramBufferParametersIivNV)(GLenum, GLuint, GLuint, GLsizei, const GLint *);
static __ctype_glProgramBufferParametersIivNV __glintercept_fnptr_glProgramBufferParametersIivNV;
void __glintercept_glProgramBufferParametersIivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint * params) {
  __glintercept_fnptr_glProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, params);
  __glintercept_log(" - glProgramBufferParametersIivNV(target: %ld (%s), bindingIndex: %ld, wordIndex: %ld, count: %ld, params: %ld)", target, __gl_intercept_formatenum(target), bindingIndex, wordIndex, count, params);
}

typedef void(*__ctype_glProgramBufferParametersIuivNV)(GLenum, GLuint, GLuint, GLsizei, const GLuint *);
static __ctype_glProgramBufferParametersIuivNV __glintercept_fnptr_glProgramBufferParametersIuivNV;
void __glintercept_glProgramBufferParametersIuivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint * params) {
  __glintercept_fnptr_glProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, params);
  __glintercept_log(" - glProgramBufferParametersIuivNV(target: %ld (%s), bindingIndex: %ld, wordIndex: %ld, count: %ld, params: %ld)", target, __gl_intercept_formatenum(target), bindingIndex, wordIndex, count, params);
}

typedef void(*__ctype_glProgramBufferParametersfvNV)(GLenum, GLuint, GLuint, GLsizei, const GLfloat *);
static __ctype_glProgramBufferParametersfvNV __glintercept_fnptr_glProgramBufferParametersfvNV;
void __glintercept_glProgramBufferParametersfvNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat * params) {
  __glintercept_fnptr_glProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, params);
  __glintercept_log(" - glProgramBufferParametersfvNV(target: %ld (%s), bindingIndex: %ld, wordIndex: %ld, count: %ld, params: %ld)", target, __gl_intercept_formatenum(target), bindingIndex, wordIndex, count, params);
}

typedef void(*__ctype_glProgramEnvParameter4dARB)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glProgramEnvParameter4dARB __glintercept_fnptr_glProgramEnvParameter4dARB;
void __glintercept_glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  __glintercept_fnptr_glProgramEnvParameter4dARB(target, index, x, y, z, w);
  __glintercept_log(" - glProgramEnvParameter4dARB(target: %ld (%s), index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", target, __gl_intercept_formatenum(target), index, x, y, z, w);
}

typedef void(*__ctype_glProgramEnvParameter4dvARB)(GLenum, GLuint, const GLdouble *);
static __ctype_glProgramEnvParameter4dvARB __glintercept_fnptr_glProgramEnvParameter4dvARB;
void __glintercept_glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble * params) {
  __glintercept_fnptr_glProgramEnvParameter4dvARB(target, index, params);
  __glintercept_log(" - glProgramEnvParameter4dvARB(target: %ld (%s), index: %ld, params: %ld)", target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glProgramEnvParameter4fARB)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glProgramEnvParameter4fARB __glintercept_fnptr_glProgramEnvParameter4fARB;
void __glintercept_glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  __glintercept_fnptr_glProgramEnvParameter4fARB(target, index, x, y, z, w);
  __glintercept_log(" - glProgramEnvParameter4fARB(target: %ld (%s), index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", target, __gl_intercept_formatenum(target), index, x, y, z, w);
}

typedef void(*__ctype_glProgramEnvParameter4fvARB)(GLenum, GLuint, const GLfloat *);
static __ctype_glProgramEnvParameter4fvARB __glintercept_fnptr_glProgramEnvParameter4fvARB;
void __glintercept_glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat * params) {
  __glintercept_fnptr_glProgramEnvParameter4fvARB(target, index, params);
  __glintercept_log(" - glProgramEnvParameter4fvARB(target: %ld (%s), index: %ld, params: %ld)", target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glProgramEnvParameterI4iNV)(GLenum, GLuint, GLint, GLint, GLint, GLint);
static __ctype_glProgramEnvParameterI4iNV __glintercept_fnptr_glProgramEnvParameterI4iNV;
void __glintercept_glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {
  __glintercept_fnptr_glProgramEnvParameterI4iNV(target, index, x, y, z, w);
  __glintercept_log(" - glProgramEnvParameterI4iNV(target: %ld (%s), index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", target, __gl_intercept_formatenum(target), index, x, y, z, w);
}

typedef void(*__ctype_glProgramEnvParameterI4ivNV)(GLenum, GLuint, const GLint *);
static __ctype_glProgramEnvParameterI4ivNV __glintercept_fnptr_glProgramEnvParameterI4ivNV;
void __glintercept_glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint * params) {
  __glintercept_fnptr_glProgramEnvParameterI4ivNV(target, index, params);
  __glintercept_log(" - glProgramEnvParameterI4ivNV(target: %ld (%s), index: %ld, params: %ld)", target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glProgramEnvParameterI4uiNV)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
static __ctype_glProgramEnvParameterI4uiNV __glintercept_fnptr_glProgramEnvParameterI4uiNV;
void __glintercept_glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  __glintercept_fnptr_glProgramEnvParameterI4uiNV(target, index, x, y, z, w);
  __glintercept_log(" - glProgramEnvParameterI4uiNV(target: %ld (%s), index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", target, __gl_intercept_formatenum(target), index, x, y, z, w);
}

typedef void(*__ctype_glProgramEnvParameterI4uivNV)(GLenum, GLuint, const GLuint *);
static __ctype_glProgramEnvParameterI4uivNV __glintercept_fnptr_glProgramEnvParameterI4uivNV;
void __glintercept_glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint * params) {
  __glintercept_fnptr_glProgramEnvParameterI4uivNV(target, index, params);
  __glintercept_log(" - glProgramEnvParameterI4uivNV(target: %ld (%s), index: %ld, params: %ld)", target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glProgramEnvParameters4fvEXT)(GLenum, GLuint, GLsizei, const GLfloat *);
static __ctype_glProgramEnvParameters4fvEXT __glintercept_fnptr_glProgramEnvParameters4fvEXT;
void __glintercept_glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat * params) {
  __glintercept_fnptr_glProgramEnvParameters4fvEXT(target, index, count, params);
  __glintercept_log(" - glProgramEnvParameters4fvEXT(target: %ld (%s), index: %ld, count: %ld, params: %ld)", target, __gl_intercept_formatenum(target), index, count, params);
}

typedef void(*__ctype_glProgramEnvParametersI4ivNV)(GLenum, GLuint, GLsizei, const GLint *);
static __ctype_glProgramEnvParametersI4ivNV __glintercept_fnptr_glProgramEnvParametersI4ivNV;
void __glintercept_glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint * params) {
  __glintercept_fnptr_glProgramEnvParametersI4ivNV(target, index, count, params);
  __glintercept_log(" - glProgramEnvParametersI4ivNV(target: %ld (%s), index: %ld, count: %ld, params: %ld)", target, __gl_intercept_formatenum(target), index, count, params);
}

typedef void(*__ctype_glProgramEnvParametersI4uivNV)(GLenum, GLuint, GLsizei, const GLuint *);
static __ctype_glProgramEnvParametersI4uivNV __glintercept_fnptr_glProgramEnvParametersI4uivNV;
void __glintercept_glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint * params) {
  __glintercept_fnptr_glProgramEnvParametersI4uivNV(target, index, count, params);
  __glintercept_log(" - glProgramEnvParametersI4uivNV(target: %ld (%s), index: %ld, count: %ld, params: %ld)", target, __gl_intercept_formatenum(target), index, count, params);
}

typedef void(*__ctype_glProgramLocalParameter4dARB)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glProgramLocalParameter4dARB __glintercept_fnptr_glProgramLocalParameter4dARB;
void __glintercept_glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  __glintercept_fnptr_glProgramLocalParameter4dARB(target, index, x, y, z, w);
  __glintercept_log(" - glProgramLocalParameter4dARB(target: %ld (%s), index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", target, __gl_intercept_formatenum(target), index, x, y, z, w);
}

typedef void(*__ctype_glProgramLocalParameter4dvARB)(GLenum, GLuint, const GLdouble *);
static __ctype_glProgramLocalParameter4dvARB __glintercept_fnptr_glProgramLocalParameter4dvARB;
void __glintercept_glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble * params) {
  __glintercept_fnptr_glProgramLocalParameter4dvARB(target, index, params);
  __glintercept_log(" - glProgramLocalParameter4dvARB(target: %ld (%s), index: %ld, params: %ld)", target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glProgramLocalParameter4fARB)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glProgramLocalParameter4fARB __glintercept_fnptr_glProgramLocalParameter4fARB;
void __glintercept_glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  __glintercept_fnptr_glProgramLocalParameter4fARB(target, index, x, y, z, w);
  __glintercept_log(" - glProgramLocalParameter4fARB(target: %ld (%s), index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", target, __gl_intercept_formatenum(target), index, x, y, z, w);
}

typedef void(*__ctype_glProgramLocalParameter4fvARB)(GLenum, GLuint, const GLfloat *);
static __ctype_glProgramLocalParameter4fvARB __glintercept_fnptr_glProgramLocalParameter4fvARB;
void __glintercept_glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat * params) {
  __glintercept_fnptr_glProgramLocalParameter4fvARB(target, index, params);
  __glintercept_log(" - glProgramLocalParameter4fvARB(target: %ld (%s), index: %ld, params: %ld)", target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glProgramLocalParameterI4iNV)(GLenum, GLuint, GLint, GLint, GLint, GLint);
static __ctype_glProgramLocalParameterI4iNV __glintercept_fnptr_glProgramLocalParameterI4iNV;
void __glintercept_glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {
  __glintercept_fnptr_glProgramLocalParameterI4iNV(target, index, x, y, z, w);
  __glintercept_log(" - glProgramLocalParameterI4iNV(target: %ld (%s), index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", target, __gl_intercept_formatenum(target), index, x, y, z, w);
}

typedef void(*__ctype_glProgramLocalParameterI4ivNV)(GLenum, GLuint, const GLint *);
static __ctype_glProgramLocalParameterI4ivNV __glintercept_fnptr_glProgramLocalParameterI4ivNV;
void __glintercept_glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint * params) {
  __glintercept_fnptr_glProgramLocalParameterI4ivNV(target, index, params);
  __glintercept_log(" - glProgramLocalParameterI4ivNV(target: %ld (%s), index: %ld, params: %ld)", target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glProgramLocalParameterI4uiNV)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
static __ctype_glProgramLocalParameterI4uiNV __glintercept_fnptr_glProgramLocalParameterI4uiNV;
void __glintercept_glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  __glintercept_fnptr_glProgramLocalParameterI4uiNV(target, index, x, y, z, w);
  __glintercept_log(" - glProgramLocalParameterI4uiNV(target: %ld (%s), index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", target, __gl_intercept_formatenum(target), index, x, y, z, w);
}

typedef void(*__ctype_glProgramLocalParameterI4uivNV)(GLenum, GLuint, const GLuint *);
static __ctype_glProgramLocalParameterI4uivNV __glintercept_fnptr_glProgramLocalParameterI4uivNV;
void __glintercept_glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint * params) {
  __glintercept_fnptr_glProgramLocalParameterI4uivNV(target, index, params);
  __glintercept_log(" - glProgramLocalParameterI4uivNV(target: %ld (%s), index: %ld, params: %ld)", target, __gl_intercept_formatenum(target), index, params);
}

typedef void(*__ctype_glProgramLocalParameters4fvEXT)(GLenum, GLuint, GLsizei, const GLfloat *);
static __ctype_glProgramLocalParameters4fvEXT __glintercept_fnptr_glProgramLocalParameters4fvEXT;
void __glintercept_glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat * params) {
  __glintercept_fnptr_glProgramLocalParameters4fvEXT(target, index, count, params);
  __glintercept_log(" - glProgramLocalParameters4fvEXT(target: %ld (%s), index: %ld, count: %ld, params: %ld)", target, __gl_intercept_formatenum(target), index, count, params);
}

typedef void(*__ctype_glProgramLocalParametersI4ivNV)(GLenum, GLuint, GLsizei, const GLint *);
static __ctype_glProgramLocalParametersI4ivNV __glintercept_fnptr_glProgramLocalParametersI4ivNV;
void __glintercept_glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint * params) {
  __glintercept_fnptr_glProgramLocalParametersI4ivNV(target, index, count, params);
  __glintercept_log(" - glProgramLocalParametersI4ivNV(target: %ld (%s), index: %ld, count: %ld, params: %ld)", target, __gl_intercept_formatenum(target), index, count, params);
}

typedef void(*__ctype_glProgramLocalParametersI4uivNV)(GLenum, GLuint, GLsizei, const GLuint *);
static __ctype_glProgramLocalParametersI4uivNV __glintercept_fnptr_glProgramLocalParametersI4uivNV;
void __glintercept_glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint * params) {
  __glintercept_fnptr_glProgramLocalParametersI4uivNV(target, index, count, params);
  __glintercept_log(" - glProgramLocalParametersI4uivNV(target: %ld (%s), index: %ld, count: %ld, params: %ld)", target, __gl_intercept_formatenum(target), index, count, params);
}

typedef void(*__ctype_glProgramNamedParameter4dNV)(GLuint, GLsizei, const GLubyte *, GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glProgramNamedParameter4dNV __glintercept_fnptr_glProgramNamedParameter4dNV;
void __glintercept_glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  __glintercept_fnptr_glProgramNamedParameter4dNV(id, len, name, x, y, z, w);
  __glintercept_log(" - glProgramNamedParameter4dNV(id: %ld, len: %ld, name: %s, x: %ld, y: %ld, z: %ld, w: %ld)", id, len, name, x, y, z, w);
}

typedef void(*__ctype_glProgramNamedParameter4dvNV)(GLuint, GLsizei, const GLubyte *, const GLdouble *);
static __ctype_glProgramNamedParameter4dvNV __glintercept_fnptr_glProgramNamedParameter4dvNV;
void __glintercept_glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v) {
  __glintercept_fnptr_glProgramNamedParameter4dvNV(id, len, name, v);
  __glintercept_log(" - glProgramNamedParameter4dvNV(id: %ld, len: %ld, name: %s, v: %ld)", id, len, name, v);
}

typedef void(*__ctype_glProgramNamedParameter4fNV)(GLuint, GLsizei, const GLubyte *, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glProgramNamedParameter4fNV __glintercept_fnptr_glProgramNamedParameter4fNV;
void __glintercept_glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  __glintercept_fnptr_glProgramNamedParameter4fNV(id, len, name, x, y, z, w);
  __glintercept_log(" - glProgramNamedParameter4fNV(id: %ld, len: %ld, name: %s, x: %ld, y: %ld, z: %ld, w: %ld)", id, len, name, x, y, z, w);
}

typedef void(*__ctype_glProgramNamedParameter4fvNV)(GLuint, GLsizei, const GLubyte *, const GLfloat *);
static __ctype_glProgramNamedParameter4fvNV __glintercept_fnptr_glProgramNamedParameter4fvNV;
void __glintercept_glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v) {
  __glintercept_fnptr_glProgramNamedParameter4fvNV(id, len, name, v);
  __glintercept_log(" - glProgramNamedParameter4fvNV(id: %ld, len: %ld, name: %s, v: %ld)", id, len, name, v);
}

typedef void(*__ctype_glProgramParameter4dNV)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glProgramParameter4dNV __glintercept_fnptr_glProgramParameter4dNV;
void __glintercept_glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  __glintercept_fnptr_glProgramParameter4dNV(target, index, x, y, z, w);
  __glintercept_log(" - glProgramParameter4dNV(target: %ld (%s), index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", target, __gl_intercept_formatenum(target), index, x, y, z, w);
}

typedef void(*__ctype_glProgramParameter4dvNV)(GLenum, GLuint, const GLdouble *);
static __ctype_glProgramParameter4dvNV __glintercept_fnptr_glProgramParameter4dvNV;
void __glintercept_glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble * v) {
  __glintercept_fnptr_glProgramParameter4dvNV(target, index, v);
  __glintercept_log(" - glProgramParameter4dvNV(target: %ld (%s), index: %ld, v: %ld)", target, __gl_intercept_formatenum(target), index, v);
}

typedef void(*__ctype_glProgramParameter4fNV)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glProgramParameter4fNV __glintercept_fnptr_glProgramParameter4fNV;
void __glintercept_glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  __glintercept_fnptr_glProgramParameter4fNV(target, index, x, y, z, w);
  __glintercept_log(" - glProgramParameter4fNV(target: %ld (%s), index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", target, __gl_intercept_formatenum(target), index, x, y, z, w);
}

typedef void(*__ctype_glProgramParameter4fvNV)(GLenum, GLuint, const GLfloat *);
static __ctype_glProgramParameter4fvNV __glintercept_fnptr_glProgramParameter4fvNV;
void __glintercept_glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat * v) {
  __glintercept_fnptr_glProgramParameter4fvNV(target, index, v);
  __glintercept_log(" - glProgramParameter4fvNV(target: %ld (%s), index: %ld, v: %ld)", target, __gl_intercept_formatenum(target), index, v);
}

typedef void(*__ctype_glProgramParameteri)(GLuint, GLenum, GLint);
static __ctype_glProgramParameteri __glintercept_fnptr_glProgramParameteri;
void __glintercept_glProgramParameteri(GLuint program, GLenum pname, GLint value) {
  __glintercept_fnptr_glProgramParameteri(program, pname, value);
  __glintercept_log(" - glProgramParameteri(program: %ld, pname: %ld (%s), value: %ld)", program, pname, __gl_intercept_formatenum(pname), value);
}

typedef void(*__ctype_glProgramParameteriARB)(GLuint, GLenum, GLint);
static __ctype_glProgramParameteriARB __glintercept_fnptr_glProgramParameteriARB;
void __glintercept_glProgramParameteriARB(GLuint program, GLenum pname, GLint value) {
  __glintercept_fnptr_glProgramParameteriARB(program, pname, value);
  __glintercept_log(" - glProgramParameteriARB(program: %ld, pname: %ld (%s), value: %ld)", program, pname, __gl_intercept_formatenum(pname), value);
}

typedef void(*__ctype_glProgramParameteriEXT)(GLuint, GLenum, GLint);
static __ctype_glProgramParameteriEXT __glintercept_fnptr_glProgramParameteriEXT;
void __glintercept_glProgramParameteriEXT(GLuint program, GLenum pname, GLint value) {
  __glintercept_fnptr_glProgramParameteriEXT(program, pname, value);
  __glintercept_log(" - glProgramParameteriEXT(program: %ld, pname: %ld (%s), value: %ld)", program, pname, __gl_intercept_formatenum(pname), value);
}

typedef void(*__ctype_glProgramParameters4dvNV)(GLenum, GLuint, GLsizei, const GLdouble *);
static __ctype_glProgramParameters4dvNV __glintercept_fnptr_glProgramParameters4dvNV;
void __glintercept_glProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble * v) {
  __glintercept_fnptr_glProgramParameters4dvNV(target, index, count, v);
  __glintercept_log(" - glProgramParameters4dvNV(target: %ld (%s), index: %ld, count: %ld, v: %ld)", target, __gl_intercept_formatenum(target), index, count, v);
}

typedef void(*__ctype_glProgramParameters4fvNV)(GLenum, GLuint, GLsizei, const GLfloat *);
static __ctype_glProgramParameters4fvNV __glintercept_fnptr_glProgramParameters4fvNV;
void __glintercept_glProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat * v) {
  __glintercept_fnptr_glProgramParameters4fvNV(target, index, count, v);
  __glintercept_log(" - glProgramParameters4fvNV(target: %ld (%s), index: %ld, count: %ld, v: %ld)", target, __gl_intercept_formatenum(target), index, count, v);
}

typedef void(*__ctype_glProgramPathFragmentInputGenNV)(GLuint, GLint, GLenum, GLint, const GLfloat *);
static __ctype_glProgramPathFragmentInputGenNV __glintercept_fnptr_glProgramPathFragmentInputGenNV;
void __glintercept_glProgramPathFragmentInputGenNV(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat * coeffs) {
  __glintercept_fnptr_glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs);
  __glintercept_log(" - glProgramPathFragmentInputGenNV(program: %ld, location: %ld, genMode: %ld (%s), components: %ld, coeffs: %ld)", program, location, genMode, __gl_intercept_formatenum(genMode), components, coeffs);
}

typedef void(*__ctype_glProgramStringARB)(GLenum, GLenum, GLsizei, const void *);
static __ctype_glProgramStringARB __glintercept_fnptr_glProgramStringARB;
void __glintercept_glProgramStringARB(GLenum target, GLenum format, GLsizei len, const void * string) {
  __glintercept_fnptr_glProgramStringARB(target, format, len, string);
  __glintercept_log(" - glProgramStringARB(target: %ld (%s), format: %ld (%s), len: %ld, string: %ld)", target, __gl_intercept_formatenum(target), format, __gl_intercept_formatenum(format), len, string);
}

typedef void(*__ctype_glProgramSubroutineParametersuivNV)(GLenum, GLsizei, const GLuint *);
static __ctype_glProgramSubroutineParametersuivNV __glintercept_fnptr_glProgramSubroutineParametersuivNV;
void __glintercept_glProgramSubroutineParametersuivNV(GLenum target, GLsizei count, const GLuint * params) {
  __glintercept_fnptr_glProgramSubroutineParametersuivNV(target, count, params);
  __glintercept_log(" - glProgramSubroutineParametersuivNV(target: %ld (%s), count: %ld, params: %ld)", target, __gl_intercept_formatenum(target), count, params);
}

typedef void(*__ctype_glProgramUniform1d)(GLuint, GLint, GLdouble);
static __ctype_glProgramUniform1d __glintercept_fnptr_glProgramUniform1d;
void __glintercept_glProgramUniform1d(GLuint program, GLint location, GLdouble v0) {
  __glintercept_fnptr_glProgramUniform1d(program, location, v0);
  __glintercept_log(" - glProgramUniform1d(program: %ld, location: %ld, v0: %ld)", program, location, v0);
}

typedef void(*__ctype_glProgramUniform1dEXT)(GLuint, GLint, GLdouble);
static __ctype_glProgramUniform1dEXT __glintercept_fnptr_glProgramUniform1dEXT;
void __glintercept_glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x) {
  __glintercept_fnptr_glProgramUniform1dEXT(program, location, x);
  __glintercept_log(" - glProgramUniform1dEXT(program: %ld, location: %ld, x: %ld)", program, location, x);
}

typedef void(*__ctype_glProgramUniform1dv)(GLuint, GLint, GLsizei, const GLdouble *);
static __ctype_glProgramUniform1dv __glintercept_fnptr_glProgramUniform1dv;
void __glintercept_glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniform1dv(program, location, count, value);
  __glintercept_log(" - glProgramUniform1dv(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform1dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
static __ctype_glProgramUniform1dvEXT __glintercept_fnptr_glProgramUniform1dvEXT;
void __glintercept_glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniform1dvEXT(program, location, count, value);
  __glintercept_log(" - glProgramUniform1dvEXT(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform1f)(GLuint, GLint, GLfloat);
static __ctype_glProgramUniform1f __glintercept_fnptr_glProgramUniform1f;
void __glintercept_glProgramUniform1f(GLuint program, GLint location, GLfloat v0) {
  __glintercept_fnptr_glProgramUniform1f(program, location, v0);
  __glintercept_log(" - glProgramUniform1f(program: %ld, location: %ld, v0: %ld)", program, location, v0);
}

typedef void(*__ctype_glProgramUniform1fEXT)(GLuint, GLint, GLfloat);
static __ctype_glProgramUniform1fEXT __glintercept_fnptr_glProgramUniform1fEXT;
void __glintercept_glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0) {
  __glintercept_fnptr_glProgramUniform1fEXT(program, location, v0);
  __glintercept_log(" - glProgramUniform1fEXT(program: %ld, location: %ld, v0: %ld)", program, location, v0);
}

typedef void(*__ctype_glProgramUniform1fv)(GLuint, GLint, GLsizei, const GLfloat *);
static __ctype_glProgramUniform1fv __glintercept_fnptr_glProgramUniform1fv;
void __glintercept_glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniform1fv(program, location, count, value);
  __glintercept_log(" - glProgramUniform1fv(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform1fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
static __ctype_glProgramUniform1fvEXT __glintercept_fnptr_glProgramUniform1fvEXT;
void __glintercept_glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniform1fvEXT(program, location, count, value);
  __glintercept_log(" - glProgramUniform1fvEXT(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform1i)(GLuint, GLint, GLint);
static __ctype_glProgramUniform1i __glintercept_fnptr_glProgramUniform1i;
void __glintercept_glProgramUniform1i(GLuint program, GLint location, GLint v0) {
  __glintercept_fnptr_glProgramUniform1i(program, location, v0);
  __glintercept_log(" - glProgramUniform1i(program: %ld, location: %ld, v0: %ld)", program, location, v0);
}

typedef void(*__ctype_glProgramUniform1i64ARB)(GLuint, GLint, GLint64);
static __ctype_glProgramUniform1i64ARB __glintercept_fnptr_glProgramUniform1i64ARB;
void __glintercept_glProgramUniform1i64ARB(GLuint program, GLint location, GLint64 x) {
  __glintercept_fnptr_glProgramUniform1i64ARB(program, location, x);
  __glintercept_log(" - glProgramUniform1i64ARB(program: %ld, location: %ld, x: %ld)", program, location, x);
}

typedef void(*__ctype_glProgramUniform1i64NV)(GLuint, GLint, GLint64EXT);
static __ctype_glProgramUniform1i64NV __glintercept_fnptr_glProgramUniform1i64NV;
void __glintercept_glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x) {
  __glintercept_fnptr_glProgramUniform1i64NV(program, location, x);
  __glintercept_log(" - glProgramUniform1i64NV(program: %ld, location: %ld, x: %ld)", program, location, x);
}

typedef void(*__ctype_glProgramUniform1i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
static __ctype_glProgramUniform1i64vARB __glintercept_fnptr_glProgramUniform1i64vARB;
void __glintercept_glProgramUniform1i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) {
  __glintercept_fnptr_glProgramUniform1i64vARB(program, location, count, value);
  __glintercept_log(" - glProgramUniform1i64vARB(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform1i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
static __ctype_glProgramUniform1i64vNV __glintercept_fnptr_glProgramUniform1i64vNV;
void __glintercept_glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) {
  __glintercept_fnptr_glProgramUniform1i64vNV(program, location, count, value);
  __glintercept_log(" - glProgramUniform1i64vNV(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform1iEXT)(GLuint, GLint, GLint);
static __ctype_glProgramUniform1iEXT __glintercept_fnptr_glProgramUniform1iEXT;
void __glintercept_glProgramUniform1iEXT(GLuint program, GLint location, GLint v0) {
  __glintercept_fnptr_glProgramUniform1iEXT(program, location, v0);
  __glintercept_log(" - glProgramUniform1iEXT(program: %ld, location: %ld, v0: %ld)", program, location, v0);
}

typedef void(*__ctype_glProgramUniform1iv)(GLuint, GLint, GLsizei, const GLint *);
static __ctype_glProgramUniform1iv __glintercept_fnptr_glProgramUniform1iv;
void __glintercept_glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint * value) {
  __glintercept_fnptr_glProgramUniform1iv(program, location, count, value);
  __glintercept_log(" - glProgramUniform1iv(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform1ivEXT)(GLuint, GLint, GLsizei, const GLint *);
static __ctype_glProgramUniform1ivEXT __glintercept_fnptr_glProgramUniform1ivEXT;
void __glintercept_glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) {
  __glintercept_fnptr_glProgramUniform1ivEXT(program, location, count, value);
  __glintercept_log(" - glProgramUniform1ivEXT(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform1ui)(GLuint, GLint, GLuint);
static __ctype_glProgramUniform1ui __glintercept_fnptr_glProgramUniform1ui;
void __glintercept_glProgramUniform1ui(GLuint program, GLint location, GLuint v0) {
  __glintercept_fnptr_glProgramUniform1ui(program, location, v0);
  __glintercept_log(" - glProgramUniform1ui(program: %ld, location: %ld, v0: %ld)", program, location, v0);
}

typedef void(*__ctype_glProgramUniform1ui64ARB)(GLuint, GLint, GLuint64);
static __ctype_glProgramUniform1ui64ARB __glintercept_fnptr_glProgramUniform1ui64ARB;
void __glintercept_glProgramUniform1ui64ARB(GLuint program, GLint location, GLuint64 x) {
  __glintercept_fnptr_glProgramUniform1ui64ARB(program, location, x);
  __glintercept_log(" - glProgramUniform1ui64ARB(program: %ld, location: %ld, x: %ld)", program, location, x);
}

typedef void(*__ctype_glProgramUniform1ui64NV)(GLuint, GLint, GLuint64EXT);
static __ctype_glProgramUniform1ui64NV __glintercept_fnptr_glProgramUniform1ui64NV;
void __glintercept_glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x) {
  __glintercept_fnptr_glProgramUniform1ui64NV(program, location, x);
  __glintercept_log(" - glProgramUniform1ui64NV(program: %ld, location: %ld, x: %ld)", program, location, x);
}

typedef void(*__ctype_glProgramUniform1ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
static __ctype_glProgramUniform1ui64vARB __glintercept_fnptr_glProgramUniform1ui64vARB;
void __glintercept_glProgramUniform1ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) {
  __glintercept_fnptr_glProgramUniform1ui64vARB(program, location, count, value);
  __glintercept_log(" - glProgramUniform1ui64vARB(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform1ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
static __ctype_glProgramUniform1ui64vNV __glintercept_fnptr_glProgramUniform1ui64vNV;
void __glintercept_glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) {
  __glintercept_fnptr_glProgramUniform1ui64vNV(program, location, count, value);
  __glintercept_log(" - glProgramUniform1ui64vNV(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform1uiEXT)(GLuint, GLint, GLuint);
static __ctype_glProgramUniform1uiEXT __glintercept_fnptr_glProgramUniform1uiEXT;
void __glintercept_glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0) {
  __glintercept_fnptr_glProgramUniform1uiEXT(program, location, v0);
  __glintercept_log(" - glProgramUniform1uiEXT(program: %ld, location: %ld, v0: %ld)", program, location, v0);
}

typedef void(*__ctype_glProgramUniform1uiv)(GLuint, GLint, GLsizei, const GLuint *);
static __ctype_glProgramUniform1uiv __glintercept_fnptr_glProgramUniform1uiv;
void __glintercept_glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  __glintercept_fnptr_glProgramUniform1uiv(program, location, count, value);
  __glintercept_log(" - glProgramUniform1uiv(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform1uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
static __ctype_glProgramUniform1uivEXT __glintercept_fnptr_glProgramUniform1uivEXT;
void __glintercept_glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  __glintercept_fnptr_glProgramUniform1uivEXT(program, location, count, value);
  __glintercept_log(" - glProgramUniform1uivEXT(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform2d)(GLuint, GLint, GLdouble, GLdouble);
static __ctype_glProgramUniform2d __glintercept_fnptr_glProgramUniform2d;
void __glintercept_glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1) {
  __glintercept_fnptr_glProgramUniform2d(program, location, v0, v1);
  __glintercept_log(" - glProgramUniform2d(program: %ld, location: %ld, v0: %ld, v1: %ld)", program, location, v0, v1);
}

typedef void(*__ctype_glProgramUniform2dEXT)(GLuint, GLint, GLdouble, GLdouble);
static __ctype_glProgramUniform2dEXT __glintercept_fnptr_glProgramUniform2dEXT;
void __glintercept_glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y) {
  __glintercept_fnptr_glProgramUniform2dEXT(program, location, x, y);
  __glintercept_log(" - glProgramUniform2dEXT(program: %ld, location: %ld, x: %ld, y: %ld)", program, location, x, y);
}

typedef void(*__ctype_glProgramUniform2dv)(GLuint, GLint, GLsizei, const GLdouble *);
static __ctype_glProgramUniform2dv __glintercept_fnptr_glProgramUniform2dv;
void __glintercept_glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniform2dv(program, location, count, value);
  __glintercept_log(" - glProgramUniform2dv(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform2dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
static __ctype_glProgramUniform2dvEXT __glintercept_fnptr_glProgramUniform2dvEXT;
void __glintercept_glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniform2dvEXT(program, location, count, value);
  __glintercept_log(" - glProgramUniform2dvEXT(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform2f)(GLuint, GLint, GLfloat, GLfloat);
static __ctype_glProgramUniform2f __glintercept_fnptr_glProgramUniform2f;
void __glintercept_glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1) {
  __glintercept_fnptr_glProgramUniform2f(program, location, v0, v1);
  __glintercept_log(" - glProgramUniform2f(program: %ld, location: %ld, v0: %ld, v1: %ld)", program, location, v0, v1);
}

typedef void(*__ctype_glProgramUniform2fEXT)(GLuint, GLint, GLfloat, GLfloat);
static __ctype_glProgramUniform2fEXT __glintercept_fnptr_glProgramUniform2fEXT;
void __glintercept_glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1) {
  __glintercept_fnptr_glProgramUniform2fEXT(program, location, v0, v1);
  __glintercept_log(" - glProgramUniform2fEXT(program: %ld, location: %ld, v0: %ld, v1: %ld)", program, location, v0, v1);
}

typedef void(*__ctype_glProgramUniform2fv)(GLuint, GLint, GLsizei, const GLfloat *);
static __ctype_glProgramUniform2fv __glintercept_fnptr_glProgramUniform2fv;
void __glintercept_glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniform2fv(program, location, count, value);
  __glintercept_log(" - glProgramUniform2fv(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform2fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
static __ctype_glProgramUniform2fvEXT __glintercept_fnptr_glProgramUniform2fvEXT;
void __glintercept_glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniform2fvEXT(program, location, count, value);
  __glintercept_log(" - glProgramUniform2fvEXT(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform2i)(GLuint, GLint, GLint, GLint);
static __ctype_glProgramUniform2i __glintercept_fnptr_glProgramUniform2i;
void __glintercept_glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1) {
  __glintercept_fnptr_glProgramUniform2i(program, location, v0, v1);
  __glintercept_log(" - glProgramUniform2i(program: %ld, location: %ld, v0: %ld, v1: %ld)", program, location, v0, v1);
}

typedef void(*__ctype_glProgramUniform2i64ARB)(GLuint, GLint, GLint64, GLint64);
static __ctype_glProgramUniform2i64ARB __glintercept_fnptr_glProgramUniform2i64ARB;
void __glintercept_glProgramUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y) {
  __glintercept_fnptr_glProgramUniform2i64ARB(program, location, x, y);
  __glintercept_log(" - glProgramUniform2i64ARB(program: %ld, location: %ld, x: %ld, y: %ld)", program, location, x, y);
}

typedef void(*__ctype_glProgramUniform2i64NV)(GLuint, GLint, GLint64EXT, GLint64EXT);
static __ctype_glProgramUniform2i64NV __glintercept_fnptr_glProgramUniform2i64NV;
void __glintercept_glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y) {
  __glintercept_fnptr_glProgramUniform2i64NV(program, location, x, y);
  __glintercept_log(" - glProgramUniform2i64NV(program: %ld, location: %ld, x: %ld, y: %ld)", program, location, x, y);
}

typedef void(*__ctype_glProgramUniform2i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
static __ctype_glProgramUniform2i64vARB __glintercept_fnptr_glProgramUniform2i64vARB;
void __glintercept_glProgramUniform2i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) {
  __glintercept_fnptr_glProgramUniform2i64vARB(program, location, count, value);
  __glintercept_log(" - glProgramUniform2i64vARB(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform2i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
static __ctype_glProgramUniform2i64vNV __glintercept_fnptr_glProgramUniform2i64vNV;
void __glintercept_glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) {
  __glintercept_fnptr_glProgramUniform2i64vNV(program, location, count, value);
  __glintercept_log(" - glProgramUniform2i64vNV(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform2iEXT)(GLuint, GLint, GLint, GLint);
static __ctype_glProgramUniform2iEXT __glintercept_fnptr_glProgramUniform2iEXT;
void __glintercept_glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1) {
  __glintercept_fnptr_glProgramUniform2iEXT(program, location, v0, v1);
  __glintercept_log(" - glProgramUniform2iEXT(program: %ld, location: %ld, v0: %ld, v1: %ld)", program, location, v0, v1);
}

typedef void(*__ctype_glProgramUniform2iv)(GLuint, GLint, GLsizei, const GLint *);
static __ctype_glProgramUniform2iv __glintercept_fnptr_glProgramUniform2iv;
void __glintercept_glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint * value) {
  __glintercept_fnptr_glProgramUniform2iv(program, location, count, value);
  __glintercept_log(" - glProgramUniform2iv(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform2ivEXT)(GLuint, GLint, GLsizei, const GLint *);
static __ctype_glProgramUniform2ivEXT __glintercept_fnptr_glProgramUniform2ivEXT;
void __glintercept_glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) {
  __glintercept_fnptr_glProgramUniform2ivEXT(program, location, count, value);
  __glintercept_log(" - glProgramUniform2ivEXT(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform2ui)(GLuint, GLint, GLuint, GLuint);
static __ctype_glProgramUniform2ui __glintercept_fnptr_glProgramUniform2ui;
void __glintercept_glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1) {
  __glintercept_fnptr_glProgramUniform2ui(program, location, v0, v1);
  __glintercept_log(" - glProgramUniform2ui(program: %ld, location: %ld, v0: %ld, v1: %ld)", program, location, v0, v1);
}

typedef void(*__ctype_glProgramUniform2ui64ARB)(GLuint, GLint, GLuint64, GLuint64);
static __ctype_glProgramUniform2ui64ARB __glintercept_fnptr_glProgramUniform2ui64ARB;
void __glintercept_glProgramUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y) {
  __glintercept_fnptr_glProgramUniform2ui64ARB(program, location, x, y);
  __glintercept_log(" - glProgramUniform2ui64ARB(program: %ld, location: %ld, x: %ld, y: %ld)", program, location, x, y);
}

typedef void(*__ctype_glProgramUniform2ui64NV)(GLuint, GLint, GLuint64EXT, GLuint64EXT);
static __ctype_glProgramUniform2ui64NV __glintercept_fnptr_glProgramUniform2ui64NV;
void __glintercept_glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y) {
  __glintercept_fnptr_glProgramUniform2ui64NV(program, location, x, y);
  __glintercept_log(" - glProgramUniform2ui64NV(program: %ld, location: %ld, x: %ld, y: %ld)", program, location, x, y);
}

typedef void(*__ctype_glProgramUniform2ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
static __ctype_glProgramUniform2ui64vARB __glintercept_fnptr_glProgramUniform2ui64vARB;
void __glintercept_glProgramUniform2ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) {
  __glintercept_fnptr_glProgramUniform2ui64vARB(program, location, count, value);
  __glintercept_log(" - glProgramUniform2ui64vARB(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform2ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
static __ctype_glProgramUniform2ui64vNV __glintercept_fnptr_glProgramUniform2ui64vNV;
void __glintercept_glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) {
  __glintercept_fnptr_glProgramUniform2ui64vNV(program, location, count, value);
  __glintercept_log(" - glProgramUniform2ui64vNV(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform2uiEXT)(GLuint, GLint, GLuint, GLuint);
static __ctype_glProgramUniform2uiEXT __glintercept_fnptr_glProgramUniform2uiEXT;
void __glintercept_glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1) {
  __glintercept_fnptr_glProgramUniform2uiEXT(program, location, v0, v1);
  __glintercept_log(" - glProgramUniform2uiEXT(program: %ld, location: %ld, v0: %ld, v1: %ld)", program, location, v0, v1);
}

typedef void(*__ctype_glProgramUniform2uiv)(GLuint, GLint, GLsizei, const GLuint *);
static __ctype_glProgramUniform2uiv __glintercept_fnptr_glProgramUniform2uiv;
void __glintercept_glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  __glintercept_fnptr_glProgramUniform2uiv(program, location, count, value);
  __glintercept_log(" - glProgramUniform2uiv(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform2uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
static __ctype_glProgramUniform2uivEXT __glintercept_fnptr_glProgramUniform2uivEXT;
void __glintercept_glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  __glintercept_fnptr_glProgramUniform2uivEXT(program, location, count, value);
  __glintercept_log(" - glProgramUniform2uivEXT(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform3d)(GLuint, GLint, GLdouble, GLdouble, GLdouble);
static __ctype_glProgramUniform3d __glintercept_fnptr_glProgramUniform3d;
void __glintercept_glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) {
  __glintercept_fnptr_glProgramUniform3d(program, location, v0, v1, v2);
  __glintercept_log(" - glProgramUniform3d(program: %ld, location: %ld, v0: %ld, v1: %ld, v2: %ld)", program, location, v0, v1, v2);
}

typedef void(*__ctype_glProgramUniform3dEXT)(GLuint, GLint, GLdouble, GLdouble, GLdouble);
static __ctype_glProgramUniform3dEXT __glintercept_fnptr_glProgramUniform3dEXT;
void __glintercept_glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z) {
  __glintercept_fnptr_glProgramUniform3dEXT(program, location, x, y, z);
  __glintercept_log(" - glProgramUniform3dEXT(program: %ld, location: %ld, x: %ld, y: %ld, z: %ld)", program, location, x, y, z);
}

typedef void(*__ctype_glProgramUniform3dv)(GLuint, GLint, GLsizei, const GLdouble *);
static __ctype_glProgramUniform3dv __glintercept_fnptr_glProgramUniform3dv;
void __glintercept_glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniform3dv(program, location, count, value);
  __glintercept_log(" - glProgramUniform3dv(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform3dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
static __ctype_glProgramUniform3dvEXT __glintercept_fnptr_glProgramUniform3dvEXT;
void __glintercept_glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniform3dvEXT(program, location, count, value);
  __glintercept_log(" - glProgramUniform3dvEXT(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform3f)(GLuint, GLint, GLfloat, GLfloat, GLfloat);
static __ctype_glProgramUniform3f __glintercept_fnptr_glProgramUniform3f;
void __glintercept_glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  __glintercept_fnptr_glProgramUniform3f(program, location, v0, v1, v2);
  __glintercept_log(" - glProgramUniform3f(program: %ld, location: %ld, v0: %ld, v1: %ld, v2: %ld)", program, location, v0, v1, v2);
}

typedef void(*__ctype_glProgramUniform3fEXT)(GLuint, GLint, GLfloat, GLfloat, GLfloat);
static __ctype_glProgramUniform3fEXT __glintercept_fnptr_glProgramUniform3fEXT;
void __glintercept_glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  __glintercept_fnptr_glProgramUniform3fEXT(program, location, v0, v1, v2);
  __glintercept_log(" - glProgramUniform3fEXT(program: %ld, location: %ld, v0: %ld, v1: %ld, v2: %ld)", program, location, v0, v1, v2);
}

typedef void(*__ctype_glProgramUniform3fv)(GLuint, GLint, GLsizei, const GLfloat *);
static __ctype_glProgramUniform3fv __glintercept_fnptr_glProgramUniform3fv;
void __glintercept_glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniform3fv(program, location, count, value);
  __glintercept_log(" - glProgramUniform3fv(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform3fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
static __ctype_glProgramUniform3fvEXT __glintercept_fnptr_glProgramUniform3fvEXT;
void __glintercept_glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniform3fvEXT(program, location, count, value);
  __glintercept_log(" - glProgramUniform3fvEXT(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform3i)(GLuint, GLint, GLint, GLint, GLint);
static __ctype_glProgramUniform3i __glintercept_fnptr_glProgramUniform3i;
void __glintercept_glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {
  __glintercept_fnptr_glProgramUniform3i(program, location, v0, v1, v2);
  __glintercept_log(" - glProgramUniform3i(program: %ld, location: %ld, v0: %ld, v1: %ld, v2: %ld)", program, location, v0, v1, v2);
}

typedef void(*__ctype_glProgramUniform3i64ARB)(GLuint, GLint, GLint64, GLint64, GLint64);
static __ctype_glProgramUniform3i64ARB __glintercept_fnptr_glProgramUniform3i64ARB;
void __glintercept_glProgramUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z) {
  __glintercept_fnptr_glProgramUniform3i64ARB(program, location, x, y, z);
  __glintercept_log(" - glProgramUniform3i64ARB(program: %ld, location: %ld, x: %ld, y: %ld, z: %ld)", program, location, x, y, z);
}

typedef void(*__ctype_glProgramUniform3i64NV)(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT);
static __ctype_glProgramUniform3i64NV __glintercept_fnptr_glProgramUniform3i64NV;
void __glintercept_glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
  __glintercept_fnptr_glProgramUniform3i64NV(program, location, x, y, z);
  __glintercept_log(" - glProgramUniform3i64NV(program: %ld, location: %ld, x: %ld, y: %ld, z: %ld)", program, location, x, y, z);
}

typedef void(*__ctype_glProgramUniform3i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
static __ctype_glProgramUniform3i64vARB __glintercept_fnptr_glProgramUniform3i64vARB;
void __glintercept_glProgramUniform3i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) {
  __glintercept_fnptr_glProgramUniform3i64vARB(program, location, count, value);
  __glintercept_log(" - glProgramUniform3i64vARB(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform3i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
static __ctype_glProgramUniform3i64vNV __glintercept_fnptr_glProgramUniform3i64vNV;
void __glintercept_glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) {
  __glintercept_fnptr_glProgramUniform3i64vNV(program, location, count, value);
  __glintercept_log(" - glProgramUniform3i64vNV(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform3iEXT)(GLuint, GLint, GLint, GLint, GLint);
static __ctype_glProgramUniform3iEXT __glintercept_fnptr_glProgramUniform3iEXT;
void __glintercept_glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {
  __glintercept_fnptr_glProgramUniform3iEXT(program, location, v0, v1, v2);
  __glintercept_log(" - glProgramUniform3iEXT(program: %ld, location: %ld, v0: %ld, v1: %ld, v2: %ld)", program, location, v0, v1, v2);
}

typedef void(*__ctype_glProgramUniform3iv)(GLuint, GLint, GLsizei, const GLint *);
static __ctype_glProgramUniform3iv __glintercept_fnptr_glProgramUniform3iv;
void __glintercept_glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint * value) {
  __glintercept_fnptr_glProgramUniform3iv(program, location, count, value);
  __glintercept_log(" - glProgramUniform3iv(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform3ivEXT)(GLuint, GLint, GLsizei, const GLint *);
static __ctype_glProgramUniform3ivEXT __glintercept_fnptr_glProgramUniform3ivEXT;
void __glintercept_glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) {
  __glintercept_fnptr_glProgramUniform3ivEXT(program, location, count, value);
  __glintercept_log(" - glProgramUniform3ivEXT(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform3ui)(GLuint, GLint, GLuint, GLuint, GLuint);
static __ctype_glProgramUniform3ui __glintercept_fnptr_glProgramUniform3ui;
void __glintercept_glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {
  __glintercept_fnptr_glProgramUniform3ui(program, location, v0, v1, v2);
  __glintercept_log(" - glProgramUniform3ui(program: %ld, location: %ld, v0: %ld, v1: %ld, v2: %ld)", program, location, v0, v1, v2);
}

typedef void(*__ctype_glProgramUniform3ui64ARB)(GLuint, GLint, GLuint64, GLuint64, GLuint64);
static __ctype_glProgramUniform3ui64ARB __glintercept_fnptr_glProgramUniform3ui64ARB;
void __glintercept_glProgramUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z) {
  __glintercept_fnptr_glProgramUniform3ui64ARB(program, location, x, y, z);
  __glintercept_log(" - glProgramUniform3ui64ARB(program: %ld, location: %ld, x: %ld, y: %ld, z: %ld)", program, location, x, y, z);
}

typedef void(*__ctype_glProgramUniform3ui64NV)(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
static __ctype_glProgramUniform3ui64NV __glintercept_fnptr_glProgramUniform3ui64NV;
void __glintercept_glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
  __glintercept_fnptr_glProgramUniform3ui64NV(program, location, x, y, z);
  __glintercept_log(" - glProgramUniform3ui64NV(program: %ld, location: %ld, x: %ld, y: %ld, z: %ld)", program, location, x, y, z);
}

typedef void(*__ctype_glProgramUniform3ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
static __ctype_glProgramUniform3ui64vARB __glintercept_fnptr_glProgramUniform3ui64vARB;
void __glintercept_glProgramUniform3ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) {
  __glintercept_fnptr_glProgramUniform3ui64vARB(program, location, count, value);
  __glintercept_log(" - glProgramUniform3ui64vARB(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform3ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
static __ctype_glProgramUniform3ui64vNV __glintercept_fnptr_glProgramUniform3ui64vNV;
void __glintercept_glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) {
  __glintercept_fnptr_glProgramUniform3ui64vNV(program, location, count, value);
  __glintercept_log(" - glProgramUniform3ui64vNV(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform3uiEXT)(GLuint, GLint, GLuint, GLuint, GLuint);
static __ctype_glProgramUniform3uiEXT __glintercept_fnptr_glProgramUniform3uiEXT;
void __glintercept_glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {
  __glintercept_fnptr_glProgramUniform3uiEXT(program, location, v0, v1, v2);
  __glintercept_log(" - glProgramUniform3uiEXT(program: %ld, location: %ld, v0: %ld, v1: %ld, v2: %ld)", program, location, v0, v1, v2);
}

typedef void(*__ctype_glProgramUniform3uiv)(GLuint, GLint, GLsizei, const GLuint *);
static __ctype_glProgramUniform3uiv __glintercept_fnptr_glProgramUniform3uiv;
void __glintercept_glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  __glintercept_fnptr_glProgramUniform3uiv(program, location, count, value);
  __glintercept_log(" - glProgramUniform3uiv(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform3uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
static __ctype_glProgramUniform3uivEXT __glintercept_fnptr_glProgramUniform3uivEXT;
void __glintercept_glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  __glintercept_fnptr_glProgramUniform3uivEXT(program, location, count, value);
  __glintercept_log(" - glProgramUniform3uivEXT(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform4d)(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glProgramUniform4d __glintercept_fnptr_glProgramUniform4d;
void __glintercept_glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) {
  __glintercept_fnptr_glProgramUniform4d(program, location, v0, v1, v2, v3);
  __glintercept_log(" - glProgramUniform4d(program: %ld, location: %ld, v0: %ld, v1: %ld, v2: %ld, v3: %ld)", program, location, v0, v1, v2, v3);
}

typedef void(*__ctype_glProgramUniform4dEXT)(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glProgramUniform4dEXT __glintercept_fnptr_glProgramUniform4dEXT;
void __glintercept_glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  __glintercept_fnptr_glProgramUniform4dEXT(program, location, x, y, z, w);
  __glintercept_log(" - glProgramUniform4dEXT(program: %ld, location: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", program, location, x, y, z, w);
}

typedef void(*__ctype_glProgramUniform4dv)(GLuint, GLint, GLsizei, const GLdouble *);
static __ctype_glProgramUniform4dv __glintercept_fnptr_glProgramUniform4dv;
void __glintercept_glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniform4dv(program, location, count, value);
  __glintercept_log(" - glProgramUniform4dv(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform4dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
static __ctype_glProgramUniform4dvEXT __glintercept_fnptr_glProgramUniform4dvEXT;
void __glintercept_glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniform4dvEXT(program, location, count, value);
  __glintercept_log(" - glProgramUniform4dvEXT(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform4f)(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glProgramUniform4f __glintercept_fnptr_glProgramUniform4f;
void __glintercept_glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  __glintercept_fnptr_glProgramUniform4f(program, location, v0, v1, v2, v3);
  __glintercept_log(" - glProgramUniform4f(program: %ld, location: %ld, v0: %ld, v1: %ld, v2: %ld, v3: %ld)", program, location, v0, v1, v2, v3);
}

typedef void(*__ctype_glProgramUniform4fEXT)(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glProgramUniform4fEXT __glintercept_fnptr_glProgramUniform4fEXT;
void __glintercept_glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  __glintercept_fnptr_glProgramUniform4fEXT(program, location, v0, v1, v2, v3);
  __glintercept_log(" - glProgramUniform4fEXT(program: %ld, location: %ld, v0: %ld, v1: %ld, v2: %ld, v3: %ld)", program, location, v0, v1, v2, v3);
}

typedef void(*__ctype_glProgramUniform4fv)(GLuint, GLint, GLsizei, const GLfloat *);
static __ctype_glProgramUniform4fv __glintercept_fnptr_glProgramUniform4fv;
void __glintercept_glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniform4fv(program, location, count, value);
  __glintercept_log(" - glProgramUniform4fv(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform4fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
static __ctype_glProgramUniform4fvEXT __glintercept_fnptr_glProgramUniform4fvEXT;
void __glintercept_glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniform4fvEXT(program, location, count, value);
  __glintercept_log(" - glProgramUniform4fvEXT(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform4i)(GLuint, GLint, GLint, GLint, GLint, GLint);
static __ctype_glProgramUniform4i __glintercept_fnptr_glProgramUniform4i;
void __glintercept_glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  __glintercept_fnptr_glProgramUniform4i(program, location, v0, v1, v2, v3);
  __glintercept_log(" - glProgramUniform4i(program: %ld, location: %ld, v0: %ld, v1: %ld, v2: %ld, v3: %ld)", program, location, v0, v1, v2, v3);
}

typedef void(*__ctype_glProgramUniform4i64ARB)(GLuint, GLint, GLint64, GLint64, GLint64, GLint64);
static __ctype_glProgramUniform4i64ARB __glintercept_fnptr_glProgramUniform4i64ARB;
void __glintercept_glProgramUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) {
  __glintercept_fnptr_glProgramUniform4i64ARB(program, location, x, y, z, w);
  __glintercept_log(" - glProgramUniform4i64ARB(program: %ld, location: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", program, location, x, y, z, w);
}

typedef void(*__ctype_glProgramUniform4i64NV)(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
static __ctype_glProgramUniform4i64NV __glintercept_fnptr_glProgramUniform4i64NV;
void __glintercept_glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
  __glintercept_fnptr_glProgramUniform4i64NV(program, location, x, y, z, w);
  __glintercept_log(" - glProgramUniform4i64NV(program: %ld, location: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", program, location, x, y, z, w);
}

typedef void(*__ctype_glProgramUniform4i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
static __ctype_glProgramUniform4i64vARB __glintercept_fnptr_glProgramUniform4i64vARB;
void __glintercept_glProgramUniform4i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) {
  __glintercept_fnptr_glProgramUniform4i64vARB(program, location, count, value);
  __glintercept_log(" - glProgramUniform4i64vARB(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform4i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
static __ctype_glProgramUniform4i64vNV __glintercept_fnptr_glProgramUniform4i64vNV;
void __glintercept_glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) {
  __glintercept_fnptr_glProgramUniform4i64vNV(program, location, count, value);
  __glintercept_log(" - glProgramUniform4i64vNV(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform4iEXT)(GLuint, GLint, GLint, GLint, GLint, GLint);
static __ctype_glProgramUniform4iEXT __glintercept_fnptr_glProgramUniform4iEXT;
void __glintercept_glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  __glintercept_fnptr_glProgramUniform4iEXT(program, location, v0, v1, v2, v3);
  __glintercept_log(" - glProgramUniform4iEXT(program: %ld, location: %ld, v0: %ld, v1: %ld, v2: %ld, v3: %ld)", program, location, v0, v1, v2, v3);
}

typedef void(*__ctype_glProgramUniform4iv)(GLuint, GLint, GLsizei, const GLint *);
static __ctype_glProgramUniform4iv __glintercept_fnptr_glProgramUniform4iv;
void __glintercept_glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint * value) {
  __glintercept_fnptr_glProgramUniform4iv(program, location, count, value);
  __glintercept_log(" - glProgramUniform4iv(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform4ivEXT)(GLuint, GLint, GLsizei, const GLint *);
static __ctype_glProgramUniform4ivEXT __glintercept_fnptr_glProgramUniform4ivEXT;
void __glintercept_glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) {
  __glintercept_fnptr_glProgramUniform4ivEXT(program, location, count, value);
  __glintercept_log(" - glProgramUniform4ivEXT(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform4ui)(GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
static __ctype_glProgramUniform4ui __glintercept_fnptr_glProgramUniform4ui;
void __glintercept_glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  __glintercept_fnptr_glProgramUniform4ui(program, location, v0, v1, v2, v3);
  __glintercept_log(" - glProgramUniform4ui(program: %ld, location: %ld, v0: %ld, v1: %ld, v2: %ld, v3: %ld)", program, location, v0, v1, v2, v3);
}

typedef void(*__ctype_glProgramUniform4ui64ARB)(GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64);
static __ctype_glProgramUniform4ui64ARB __glintercept_fnptr_glProgramUniform4ui64ARB;
void __glintercept_glProgramUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) {
  __glintercept_fnptr_glProgramUniform4ui64ARB(program, location, x, y, z, w);
  __glintercept_log(" - glProgramUniform4ui64ARB(program: %ld, location: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", program, location, x, y, z, w);
}

typedef void(*__ctype_glProgramUniform4ui64NV)(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
static __ctype_glProgramUniform4ui64NV __glintercept_fnptr_glProgramUniform4ui64NV;
void __glintercept_glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
  __glintercept_fnptr_glProgramUniform4ui64NV(program, location, x, y, z, w);
  __glintercept_log(" - glProgramUniform4ui64NV(program: %ld, location: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", program, location, x, y, z, w);
}

typedef void(*__ctype_glProgramUniform4ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
static __ctype_glProgramUniform4ui64vARB __glintercept_fnptr_glProgramUniform4ui64vARB;
void __glintercept_glProgramUniform4ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) {
  __glintercept_fnptr_glProgramUniform4ui64vARB(program, location, count, value);
  __glintercept_log(" - glProgramUniform4ui64vARB(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform4ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
static __ctype_glProgramUniform4ui64vNV __glintercept_fnptr_glProgramUniform4ui64vNV;
void __glintercept_glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) {
  __glintercept_fnptr_glProgramUniform4ui64vNV(program, location, count, value);
  __glintercept_log(" - glProgramUniform4ui64vNV(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform4uiEXT)(GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
static __ctype_glProgramUniform4uiEXT __glintercept_fnptr_glProgramUniform4uiEXT;
void __glintercept_glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  __glintercept_fnptr_glProgramUniform4uiEXT(program, location, v0, v1, v2, v3);
  __glintercept_log(" - glProgramUniform4uiEXT(program: %ld, location: %ld, v0: %ld, v1: %ld, v2: %ld, v3: %ld)", program, location, v0, v1, v2, v3);
}

typedef void(*__ctype_glProgramUniform4uiv)(GLuint, GLint, GLsizei, const GLuint *);
static __ctype_glProgramUniform4uiv __glintercept_fnptr_glProgramUniform4uiv;
void __glintercept_glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  __glintercept_fnptr_glProgramUniform4uiv(program, location, count, value);
  __glintercept_log(" - glProgramUniform4uiv(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniform4uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
static __ctype_glProgramUniform4uivEXT __glintercept_fnptr_glProgramUniform4uivEXT;
void __glintercept_glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  __glintercept_fnptr_glProgramUniform4uivEXT(program, location, count, value);
  __glintercept_log(" - glProgramUniform4uivEXT(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramUniformHandleui64ARB)(GLuint, GLint, GLuint64);
static __ctype_glProgramUniformHandleui64ARB __glintercept_fnptr_glProgramUniformHandleui64ARB;
void __glintercept_glProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value) {
  __glintercept_fnptr_glProgramUniformHandleui64ARB(program, location, value);
  __glintercept_log(" - glProgramUniformHandleui64ARB(program: %ld, location: %ld, value: %ld)", program, location, value);
}

typedef void(*__ctype_glProgramUniformHandleui64IMG)(GLuint, GLint, GLuint64);
static __ctype_glProgramUniformHandleui64IMG __glintercept_fnptr_glProgramUniformHandleui64IMG;
void __glintercept_glProgramUniformHandleui64IMG(GLuint program, GLint location, GLuint64 value) {
  __glintercept_fnptr_glProgramUniformHandleui64IMG(program, location, value);
  __glintercept_log(" - glProgramUniformHandleui64IMG(program: %ld, location: %ld, value: %ld)", program, location, value);
}

typedef void(*__ctype_glProgramUniformHandleui64NV)(GLuint, GLint, GLuint64);
static __ctype_glProgramUniformHandleui64NV __glintercept_fnptr_glProgramUniformHandleui64NV;
void __glintercept_glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value) {
  __glintercept_fnptr_glProgramUniformHandleui64NV(program, location, value);
  __glintercept_log(" - glProgramUniformHandleui64NV(program: %ld, location: %ld, value: %ld)", program, location, value);
}

typedef void(*__ctype_glProgramUniformHandleui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
static __ctype_glProgramUniformHandleui64vARB __glintercept_fnptr_glProgramUniformHandleui64vARB;
void __glintercept_glProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * values) {
  __glintercept_fnptr_glProgramUniformHandleui64vARB(program, location, count, values);
  __glintercept_log(" - glProgramUniformHandleui64vARB(program: %ld, location: %ld, count: %ld, values: %ld)", program, location, count, values);
}

typedef void(*__ctype_glProgramUniformHandleui64vIMG)(GLuint, GLint, GLsizei, const GLuint64 *);
static __ctype_glProgramUniformHandleui64vIMG __glintercept_fnptr_glProgramUniformHandleui64vIMG;
void __glintercept_glProgramUniformHandleui64vIMG(GLuint program, GLint location, GLsizei count, const GLuint64 * values) {
  __glintercept_fnptr_glProgramUniformHandleui64vIMG(program, location, count, values);
  __glintercept_log(" - glProgramUniformHandleui64vIMG(program: %ld, location: %ld, count: %ld, values: %ld)", program, location, count, values);
}

typedef void(*__ctype_glProgramUniformHandleui64vNV)(GLuint, GLint, GLsizei, const GLuint64 *);
static __ctype_glProgramUniformHandleui64vNV __glintercept_fnptr_glProgramUniformHandleui64vNV;
void __glintercept_glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 * values) {
  __glintercept_fnptr_glProgramUniformHandleui64vNV(program, location, count, values);
  __glintercept_log(" - glProgramUniformHandleui64vNV(program: %ld, location: %ld, count: %ld, values: %ld)", program, location, count, values);
}

typedef void(*__ctype_glProgramUniformMatrix2dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glProgramUniformMatrix2dv __glintercept_fnptr_glProgramUniformMatrix2dv;
void __glintercept_glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniformMatrix2dv(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix2dv(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix2dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glProgramUniformMatrix2dvEXT __glintercept_fnptr_glProgramUniformMatrix2dvEXT;
void __glintercept_glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniformMatrix2dvEXT(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix2dvEXT(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix2fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glProgramUniformMatrix2fv __glintercept_fnptr_glProgramUniformMatrix2fv;
void __glintercept_glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniformMatrix2fv(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix2fv(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix2fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glProgramUniformMatrix2fvEXT __glintercept_fnptr_glProgramUniformMatrix2fvEXT;
void __glintercept_glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniformMatrix2fvEXT(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix2fvEXT(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix2x3dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glProgramUniformMatrix2x3dv __glintercept_fnptr_glProgramUniformMatrix2x3dv;
void __glintercept_glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniformMatrix2x3dv(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix2x3dv(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix2x3dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glProgramUniformMatrix2x3dvEXT __glintercept_fnptr_glProgramUniformMatrix2x3dvEXT;
void __glintercept_glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix2x3dvEXT(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix2x3fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glProgramUniformMatrix2x3fv __glintercept_fnptr_glProgramUniformMatrix2x3fv;
void __glintercept_glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniformMatrix2x3fv(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix2x3fv(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix2x3fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glProgramUniformMatrix2x3fvEXT __glintercept_fnptr_glProgramUniformMatrix2x3fvEXT;
void __glintercept_glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix2x3fvEXT(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix2x4dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glProgramUniformMatrix2x4dv __glintercept_fnptr_glProgramUniformMatrix2x4dv;
void __glintercept_glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniformMatrix2x4dv(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix2x4dv(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix2x4dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glProgramUniformMatrix2x4dvEXT __glintercept_fnptr_glProgramUniformMatrix2x4dvEXT;
void __glintercept_glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix2x4dvEXT(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix2x4fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glProgramUniformMatrix2x4fv __glintercept_fnptr_glProgramUniformMatrix2x4fv;
void __glintercept_glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniformMatrix2x4fv(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix2x4fv(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix2x4fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glProgramUniformMatrix2x4fvEXT __glintercept_fnptr_glProgramUniformMatrix2x4fvEXT;
void __glintercept_glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix2x4fvEXT(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix3dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glProgramUniformMatrix3dv __glintercept_fnptr_glProgramUniformMatrix3dv;
void __glintercept_glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniformMatrix3dv(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix3dv(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix3dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glProgramUniformMatrix3dvEXT __glintercept_fnptr_glProgramUniformMatrix3dvEXT;
void __glintercept_glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniformMatrix3dvEXT(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix3dvEXT(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix3fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glProgramUniformMatrix3fv __glintercept_fnptr_glProgramUniformMatrix3fv;
void __glintercept_glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniformMatrix3fv(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix3fv(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix3fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glProgramUniformMatrix3fvEXT __glintercept_fnptr_glProgramUniformMatrix3fvEXT;
void __glintercept_glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniformMatrix3fvEXT(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix3fvEXT(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix3x2dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glProgramUniformMatrix3x2dv __glintercept_fnptr_glProgramUniformMatrix3x2dv;
void __glintercept_glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniformMatrix3x2dv(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix3x2dv(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix3x2dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glProgramUniformMatrix3x2dvEXT __glintercept_fnptr_glProgramUniformMatrix3x2dvEXT;
void __glintercept_glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix3x2dvEXT(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix3x2fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glProgramUniformMatrix3x2fv __glintercept_fnptr_glProgramUniformMatrix3x2fv;
void __glintercept_glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniformMatrix3x2fv(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix3x2fv(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix3x2fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glProgramUniformMatrix3x2fvEXT __glintercept_fnptr_glProgramUniformMatrix3x2fvEXT;
void __glintercept_glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix3x2fvEXT(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix3x4dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glProgramUniformMatrix3x4dv __glintercept_fnptr_glProgramUniformMatrix3x4dv;
void __glintercept_glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniformMatrix3x4dv(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix3x4dv(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix3x4dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glProgramUniformMatrix3x4dvEXT __glintercept_fnptr_glProgramUniformMatrix3x4dvEXT;
void __glintercept_glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix3x4dvEXT(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix3x4fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glProgramUniformMatrix3x4fv __glintercept_fnptr_glProgramUniformMatrix3x4fv;
void __glintercept_glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniformMatrix3x4fv(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix3x4fv(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix3x4fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glProgramUniformMatrix3x4fvEXT __glintercept_fnptr_glProgramUniformMatrix3x4fvEXT;
void __glintercept_glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix3x4fvEXT(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix4dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glProgramUniformMatrix4dv __glintercept_fnptr_glProgramUniformMatrix4dv;
void __glintercept_glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniformMatrix4dv(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix4dv(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix4dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glProgramUniformMatrix4dvEXT __glintercept_fnptr_glProgramUniformMatrix4dvEXT;
void __glintercept_glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniformMatrix4dvEXT(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix4dvEXT(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix4fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glProgramUniformMatrix4fv __glintercept_fnptr_glProgramUniformMatrix4fv;
void __glintercept_glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniformMatrix4fv(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix4fv(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix4fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glProgramUniformMatrix4fvEXT __glintercept_fnptr_glProgramUniformMatrix4fvEXT;
void __glintercept_glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniformMatrix4fvEXT(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix4fvEXT(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix4x2dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glProgramUniformMatrix4x2dv __glintercept_fnptr_glProgramUniformMatrix4x2dv;
void __glintercept_glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniformMatrix4x2dv(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix4x2dv(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix4x2dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glProgramUniformMatrix4x2dvEXT __glintercept_fnptr_glProgramUniformMatrix4x2dvEXT;
void __glintercept_glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix4x2dvEXT(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix4x2fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glProgramUniformMatrix4x2fv __glintercept_fnptr_glProgramUniformMatrix4x2fv;
void __glintercept_glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniformMatrix4x2fv(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix4x2fv(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix4x2fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glProgramUniformMatrix4x2fvEXT __glintercept_fnptr_glProgramUniformMatrix4x2fvEXT;
void __glintercept_glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix4x2fvEXT(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix4x3dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glProgramUniformMatrix4x3dv __glintercept_fnptr_glProgramUniformMatrix4x3dv;
void __glintercept_glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniformMatrix4x3dv(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix4x3dv(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix4x3dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glProgramUniformMatrix4x3dvEXT __glintercept_fnptr_glProgramUniformMatrix4x3dvEXT;
void __glintercept_glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix4x3dvEXT(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix4x3fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glProgramUniformMatrix4x3fv __glintercept_fnptr_glProgramUniformMatrix4x3fv;
void __glintercept_glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniformMatrix4x3fv(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix4x3fv(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformMatrix4x3fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glProgramUniformMatrix4x3fvEXT __glintercept_fnptr_glProgramUniformMatrix4x3fvEXT;
void __glintercept_glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value);
  __glintercept_log(" - glProgramUniformMatrix4x3fvEXT(program: %ld, location: %ld, count: %ld, transpose: %ld, value: %ld)", program, location, count, transpose, value);
}

typedef void(*__ctype_glProgramUniformui64NV)(GLuint, GLint, GLuint64EXT);
static __ctype_glProgramUniformui64NV __glintercept_fnptr_glProgramUniformui64NV;
void __glintercept_glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT value) {
  __glintercept_fnptr_glProgramUniformui64NV(program, location, value);
  __glintercept_log(" - glProgramUniformui64NV(program: %ld, location: %ld, value: %ld)", program, location, value);
}

typedef void(*__ctype_glProgramUniformui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
static __ctype_glProgramUniformui64vNV __glintercept_fnptr_glProgramUniformui64vNV;
void __glintercept_glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) {
  __glintercept_fnptr_glProgramUniformui64vNV(program, location, count, value);
  __glintercept_log(" - glProgramUniformui64vNV(program: %ld, location: %ld, count: %ld, value: %ld)", program, location, count, value);
}

typedef void(*__ctype_glProgramVertexLimitNV)(GLenum, GLint);
static __ctype_glProgramVertexLimitNV __glintercept_fnptr_glProgramVertexLimitNV;
void __glintercept_glProgramVertexLimitNV(GLenum target, GLint limit) {
  __glintercept_fnptr_glProgramVertexLimitNV(target, limit);
  __glintercept_log(" - glProgramVertexLimitNV(target: %ld (%s), limit: %ld)", target, __gl_intercept_formatenum(target), limit);
}

typedef void(*__ctype_glProvokingVertex)(GLenum);
static __ctype_glProvokingVertex __glintercept_fnptr_glProvokingVertex;
void __glintercept_glProvokingVertex(GLenum mode) {
  __glintercept_fnptr_glProvokingVertex(mode);
  __glintercept_log(" - glProvokingVertex(mode: %ld (%s))", mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glProvokingVertexEXT)(GLenum);
static __ctype_glProvokingVertexEXT __glintercept_fnptr_glProvokingVertexEXT;
void __glintercept_glProvokingVertexEXT(GLenum mode) {
  __glintercept_fnptr_glProvokingVertexEXT(mode);
  __glintercept_log(" - glProvokingVertexEXT(mode: %ld (%s))", mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glPushAttrib)(GLbitfield);
static __ctype_glPushAttrib __glintercept_fnptr_glPushAttrib;
void __glintercept_glPushAttrib(GLbitfield mask) {
  __glintercept_fnptr_glPushAttrib(mask);
  __glintercept_log(" - glPushAttrib(mask: %ld)", mask);
}

typedef void(*__ctype_glPushClientAttrib)(GLbitfield);
static __ctype_glPushClientAttrib __glintercept_fnptr_glPushClientAttrib;
void __glintercept_glPushClientAttrib(GLbitfield mask) {
  __glintercept_fnptr_glPushClientAttrib(mask);
  __glintercept_log(" - glPushClientAttrib(mask: %ld)", mask);
}

typedef void(*__ctype_glPushClientAttribDefaultEXT)(GLbitfield);
static __ctype_glPushClientAttribDefaultEXT __glintercept_fnptr_glPushClientAttribDefaultEXT;
void __glintercept_glPushClientAttribDefaultEXT(GLbitfield mask) {
  __glintercept_fnptr_glPushClientAttribDefaultEXT(mask);
  __glintercept_log(" - glPushClientAttribDefaultEXT(mask: %ld)", mask);
}

typedef void(*__ctype_glPushDebugGroup)(GLenum, GLuint, GLsizei, const GLchar *);
static __ctype_glPushDebugGroup __glintercept_fnptr_glPushDebugGroup;
void __glintercept_glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar * message) {
  __glintercept_fnptr_glPushDebugGroup(source, id, length, message);
  __glintercept_log(" - glPushDebugGroup(source: %ld (%s), id: %ld, length: %ld, message: %ld)", source, __gl_intercept_formatenum(source), id, length, message);
}

typedef void(*__ctype_glPushDebugGroupKHR)(GLenum, GLuint, GLsizei, const GLchar *);
static __ctype_glPushDebugGroupKHR __glintercept_fnptr_glPushDebugGroupKHR;
void __glintercept_glPushDebugGroupKHR(GLenum source, GLuint id, GLsizei length, const GLchar * message) {
  __glintercept_fnptr_glPushDebugGroupKHR(source, id, length, message);
  __glintercept_log(" - glPushDebugGroupKHR(source: %ld (%s), id: %ld, length: %ld, message: %ld)", source, __gl_intercept_formatenum(source), id, length, message);
}

typedef void(*__ctype_glPushGroupMarkerEXT)(GLsizei, const GLchar *);
static __ctype_glPushGroupMarkerEXT __glintercept_fnptr_glPushGroupMarkerEXT;
void __glintercept_glPushGroupMarkerEXT(GLsizei length, const GLchar * marker) {
  __glintercept_fnptr_glPushGroupMarkerEXT(length, marker);
  __glintercept_log(" - glPushGroupMarkerEXT(length: %ld, marker: %ld)", length, marker);
}

typedef void(*__ctype_glPushMatrix)();
static __ctype_glPushMatrix __glintercept_fnptr_glPushMatrix;
void __glintercept_glPushMatrix() {
  __glintercept_fnptr_glPushMatrix();
  __glintercept_log(" - glPushMatrix()");
}

typedef void(*__ctype_glPushName)(GLuint);
static __ctype_glPushName __glintercept_fnptr_glPushName;
void __glintercept_glPushName(GLuint name) {
  __glintercept_fnptr_glPushName(name);
  __glintercept_log(" - glPushName(name: %ld)", name);
}

typedef void(*__ctype_glQueryCounter)(GLuint, GLenum);
static __ctype_glQueryCounter __glintercept_fnptr_glQueryCounter;
void __glintercept_glQueryCounter(GLuint id, GLenum target) {
  __glintercept_fnptr_glQueryCounter(id, target);
  __glintercept_log(" - glQueryCounter(id: %ld, target: %ld (%s))", id, target, __gl_intercept_formatenum(target));
}

typedef void(*__ctype_glQueryCounterEXT)(GLuint, GLenum);
static __ctype_glQueryCounterEXT __glintercept_fnptr_glQueryCounterEXT;
void __glintercept_glQueryCounterEXT(GLuint id, GLenum target) {
  __glintercept_fnptr_glQueryCounterEXT(id, target);
  __glintercept_log(" - glQueryCounterEXT(id: %ld, target: %ld (%s))", id, target, __gl_intercept_formatenum(target));
}

typedef GLbitfield(*__ctype_glQueryMatrixxOES)(GLfixed *, GLint *);
static __ctype_glQueryMatrixxOES __glintercept_fnptr_glQueryMatrixxOES;
GLbitfield __glintercept_glQueryMatrixxOES(GLfixed * mantissa, GLint * exponent) {
  GLbitfield __ret = __glintercept_fnptr_glQueryMatrixxOES(mantissa, exponent);
  __glintercept_log(" - glQueryMatrixxOES(mantissa: %ld, exponent: %ld) -> %ld", mantissa, exponent, __ret);
  return __ret;
}

typedef void(*__ctype_glQueryObjectParameteruiAMD)(GLenum, GLuint, GLenum, GLuint);
static __ctype_glQueryObjectParameteruiAMD __glintercept_fnptr_glQueryObjectParameteruiAMD;
void __glintercept_glQueryObjectParameteruiAMD(GLenum target, GLuint id, GLenum pname, GLuint param) {
  __glintercept_fnptr_glQueryObjectParameteruiAMD(target, id, pname, param);
  __glintercept_log(" - glQueryObjectParameteruiAMD(target: %ld (%s), id: %ld, pname: %ld (%s), param: %ld)", target, __gl_intercept_formatenum(target), id, pname, __gl_intercept_formatenum(pname), param);
}

typedef GLint(*__ctype_glQueryResourceNV)(GLenum, GLint, GLuint, GLint *);
static __ctype_glQueryResourceNV __glintercept_fnptr_glQueryResourceNV;
GLint __glintercept_glQueryResourceNV(GLenum queryType, GLint tagId, GLuint count, GLint * buffer) {
  GLint __ret = __glintercept_fnptr_glQueryResourceNV(queryType, tagId, count, buffer);
  __glintercept_log(" - glQueryResourceNV(queryType: %ld (%s), tagId: %ld, count: %ld, buffer: %ld) -> %ld", queryType, __gl_intercept_formatenum(queryType), tagId, count, buffer, __ret);
  return __ret;
}

typedef void(*__ctype_glQueryResourceTagNV)(GLint, const GLchar *);
static __ctype_glQueryResourceTagNV __glintercept_fnptr_glQueryResourceTagNV;
void __glintercept_glQueryResourceTagNV(GLint tagId, const GLchar * tagString) {
  __glintercept_fnptr_glQueryResourceTagNV(tagId, tagString);
  __glintercept_log(" - glQueryResourceTagNV(tagId: %ld, tagString: %ld)", tagId, tagString);
}

typedef void(*__ctype_glRasterPos2d)(GLdouble, GLdouble);
static __ctype_glRasterPos2d __glintercept_fnptr_glRasterPos2d;
void __glintercept_glRasterPos2d(GLdouble x, GLdouble y) {
  __glintercept_fnptr_glRasterPos2d(x, y);
  __glintercept_log(" - glRasterPos2d(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glRasterPos2dv)(const GLdouble *);
static __ctype_glRasterPos2dv __glintercept_fnptr_glRasterPos2dv;
void __glintercept_glRasterPos2dv(const GLdouble * v) {
  __glintercept_fnptr_glRasterPos2dv(v);
  __glintercept_log(" - glRasterPos2dv(v: %ld)", v);
}

typedef void(*__ctype_glRasterPos2f)(GLfloat, GLfloat);
static __ctype_glRasterPos2f __glintercept_fnptr_glRasterPos2f;
void __glintercept_glRasterPos2f(GLfloat x, GLfloat y) {
  __glintercept_fnptr_glRasterPos2f(x, y);
  __glintercept_log(" - glRasterPos2f(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glRasterPos2fv)(const GLfloat *);
static __ctype_glRasterPos2fv __glintercept_fnptr_glRasterPos2fv;
void __glintercept_glRasterPos2fv(const GLfloat * v) {
  __glintercept_fnptr_glRasterPos2fv(v);
  __glintercept_log(" - glRasterPos2fv(v: %ld)", v);
}

typedef void(*__ctype_glRasterPos2i)(GLint, GLint);
static __ctype_glRasterPos2i __glintercept_fnptr_glRasterPos2i;
void __glintercept_glRasterPos2i(GLint x, GLint y) {
  __glintercept_fnptr_glRasterPos2i(x, y);
  __glintercept_log(" - glRasterPos2i(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glRasterPos2iv)(const GLint *);
static __ctype_glRasterPos2iv __glintercept_fnptr_glRasterPos2iv;
void __glintercept_glRasterPos2iv(const GLint * v) {
  __glintercept_fnptr_glRasterPos2iv(v);
  __glintercept_log(" - glRasterPos2iv(v: %ld)", v);
}

typedef void(*__ctype_glRasterPos2s)(GLshort, GLshort);
static __ctype_glRasterPos2s __glintercept_fnptr_glRasterPos2s;
void __glintercept_glRasterPos2s(GLshort x, GLshort y) {
  __glintercept_fnptr_glRasterPos2s(x, y);
  __glintercept_log(" - glRasterPos2s(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glRasterPos2sv)(const GLshort *);
static __ctype_glRasterPos2sv __glintercept_fnptr_glRasterPos2sv;
void __glintercept_glRasterPos2sv(const GLshort * v) {
  __glintercept_fnptr_glRasterPos2sv(v);
  __glintercept_log(" - glRasterPos2sv(v: %ld)", v);
}

typedef void(*__ctype_glRasterPos2xOES)(GLfixed, GLfixed);
static __ctype_glRasterPos2xOES __glintercept_fnptr_glRasterPos2xOES;
void __glintercept_glRasterPos2xOES(GLfixed x, GLfixed y) {
  __glintercept_fnptr_glRasterPos2xOES(x, y);
  __glintercept_log(" - glRasterPos2xOES(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glRasterPos2xvOES)(const GLfixed *);
static __ctype_glRasterPos2xvOES __glintercept_fnptr_glRasterPos2xvOES;
void __glintercept_glRasterPos2xvOES(const GLfixed * coords) {
  __glintercept_fnptr_glRasterPos2xvOES(coords);
  __glintercept_log(" - glRasterPos2xvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glRasterPos3d)(GLdouble, GLdouble, GLdouble);
static __ctype_glRasterPos3d __glintercept_fnptr_glRasterPos3d;
void __glintercept_glRasterPos3d(GLdouble x, GLdouble y, GLdouble z) {
  __glintercept_fnptr_glRasterPos3d(x, y, z);
  __glintercept_log(" - glRasterPos3d(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glRasterPos3dv)(const GLdouble *);
static __ctype_glRasterPos3dv __glintercept_fnptr_glRasterPos3dv;
void __glintercept_glRasterPos3dv(const GLdouble * v) {
  __glintercept_fnptr_glRasterPos3dv(v);
  __glintercept_log(" - glRasterPos3dv(v: %ld)", v);
}

typedef void(*__ctype_glRasterPos3f)(GLfloat, GLfloat, GLfloat);
static __ctype_glRasterPos3f __glintercept_fnptr_glRasterPos3f;
void __glintercept_glRasterPos3f(GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glRasterPos3f(x, y, z);
  __glintercept_log(" - glRasterPos3f(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glRasterPos3fv)(const GLfloat *);
static __ctype_glRasterPos3fv __glintercept_fnptr_glRasterPos3fv;
void __glintercept_glRasterPos3fv(const GLfloat * v) {
  __glintercept_fnptr_glRasterPos3fv(v);
  __glintercept_log(" - glRasterPos3fv(v: %ld)", v);
}

typedef void(*__ctype_glRasterPos3i)(GLint, GLint, GLint);
static __ctype_glRasterPos3i __glintercept_fnptr_glRasterPos3i;
void __glintercept_glRasterPos3i(GLint x, GLint y, GLint z) {
  __glintercept_fnptr_glRasterPos3i(x, y, z);
  __glintercept_log(" - glRasterPos3i(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glRasterPos3iv)(const GLint *);
static __ctype_glRasterPos3iv __glintercept_fnptr_glRasterPos3iv;
void __glintercept_glRasterPos3iv(const GLint * v) {
  __glintercept_fnptr_glRasterPos3iv(v);
  __glintercept_log(" - glRasterPos3iv(v: %ld)", v);
}

typedef void(*__ctype_glRasterPos3s)(GLshort, GLshort, GLshort);
static __ctype_glRasterPos3s __glintercept_fnptr_glRasterPos3s;
void __glintercept_glRasterPos3s(GLshort x, GLshort y, GLshort z) {
  __glintercept_fnptr_glRasterPos3s(x, y, z);
  __glintercept_log(" - glRasterPos3s(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glRasterPos3sv)(const GLshort *);
static __ctype_glRasterPos3sv __glintercept_fnptr_glRasterPos3sv;
void __glintercept_glRasterPos3sv(const GLshort * v) {
  __glintercept_fnptr_glRasterPos3sv(v);
  __glintercept_log(" - glRasterPos3sv(v: %ld)", v);
}

typedef void(*__ctype_glRasterPos3xOES)(GLfixed, GLfixed, GLfixed);
static __ctype_glRasterPos3xOES __glintercept_fnptr_glRasterPos3xOES;
void __glintercept_glRasterPos3xOES(GLfixed x, GLfixed y, GLfixed z) {
  __glintercept_fnptr_glRasterPos3xOES(x, y, z);
  __glintercept_log(" - glRasterPos3xOES(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glRasterPos3xvOES)(const GLfixed *);
static __ctype_glRasterPos3xvOES __glintercept_fnptr_glRasterPos3xvOES;
void __glintercept_glRasterPos3xvOES(const GLfixed * coords) {
  __glintercept_fnptr_glRasterPos3xvOES(coords);
  __glintercept_log(" - glRasterPos3xvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glRasterPos4d)(GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glRasterPos4d __glintercept_fnptr_glRasterPos4d;
void __glintercept_glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  __glintercept_fnptr_glRasterPos4d(x, y, z, w);
  __glintercept_log(" - glRasterPos4d(x: %ld, y: %ld, z: %ld, w: %ld)", x, y, z, w);
}

typedef void(*__ctype_glRasterPos4dv)(const GLdouble *);
static __ctype_glRasterPos4dv __glintercept_fnptr_glRasterPos4dv;
void __glintercept_glRasterPos4dv(const GLdouble * v) {
  __glintercept_fnptr_glRasterPos4dv(v);
  __glintercept_log(" - glRasterPos4dv(v: %ld)", v);
}

typedef void(*__ctype_glRasterPos4f)(GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glRasterPos4f __glintercept_fnptr_glRasterPos4f;
void __glintercept_glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  __glintercept_fnptr_glRasterPos4f(x, y, z, w);
  __glintercept_log(" - glRasterPos4f(x: %ld, y: %ld, z: %ld, w: %ld)", x, y, z, w);
}

typedef void(*__ctype_glRasterPos4fv)(const GLfloat *);
static __ctype_glRasterPos4fv __glintercept_fnptr_glRasterPos4fv;
void __glintercept_glRasterPos4fv(const GLfloat * v) {
  __glintercept_fnptr_glRasterPos4fv(v);
  __glintercept_log(" - glRasterPos4fv(v: %ld)", v);
}

typedef void(*__ctype_glRasterPos4i)(GLint, GLint, GLint, GLint);
static __ctype_glRasterPos4i __glintercept_fnptr_glRasterPos4i;
void __glintercept_glRasterPos4i(GLint x, GLint y, GLint z, GLint w) {
  __glintercept_fnptr_glRasterPos4i(x, y, z, w);
  __glintercept_log(" - glRasterPos4i(x: %ld, y: %ld, z: %ld, w: %ld)", x, y, z, w);
}

typedef void(*__ctype_glRasterPos4iv)(const GLint *);
static __ctype_glRasterPos4iv __glintercept_fnptr_glRasterPos4iv;
void __glintercept_glRasterPos4iv(const GLint * v) {
  __glintercept_fnptr_glRasterPos4iv(v);
  __glintercept_log(" - glRasterPos4iv(v: %ld)", v);
}

typedef void(*__ctype_glRasterPos4s)(GLshort, GLshort, GLshort, GLshort);
static __ctype_glRasterPos4s __glintercept_fnptr_glRasterPos4s;
void __glintercept_glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w) {
  __glintercept_fnptr_glRasterPos4s(x, y, z, w);
  __glintercept_log(" - glRasterPos4s(x: %ld, y: %ld, z: %ld, w: %ld)", x, y, z, w);
}

typedef void(*__ctype_glRasterPos4sv)(const GLshort *);
static __ctype_glRasterPos4sv __glintercept_fnptr_glRasterPos4sv;
void __glintercept_glRasterPos4sv(const GLshort * v) {
  __glintercept_fnptr_glRasterPos4sv(v);
  __glintercept_log(" - glRasterPos4sv(v: %ld)", v);
}

typedef void(*__ctype_glRasterPos4xOES)(GLfixed, GLfixed, GLfixed, GLfixed);
static __ctype_glRasterPos4xOES __glintercept_fnptr_glRasterPos4xOES;
void __glintercept_glRasterPos4xOES(GLfixed x, GLfixed y, GLfixed z, GLfixed w) {
  __glintercept_fnptr_glRasterPos4xOES(x, y, z, w);
  __glintercept_log(" - glRasterPos4xOES(x: %ld, y: %ld, z: %ld, w: %ld)", x, y, z, w);
}

typedef void(*__ctype_glRasterPos4xvOES)(const GLfixed *);
static __ctype_glRasterPos4xvOES __glintercept_fnptr_glRasterPos4xvOES;
void __glintercept_glRasterPos4xvOES(const GLfixed * coords) {
  __glintercept_fnptr_glRasterPos4xvOES(coords);
  __glintercept_log(" - glRasterPos4xvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glRasterSamplesEXT)(GLuint, GLboolean);
static __ctype_glRasterSamplesEXT __glintercept_fnptr_glRasterSamplesEXT;
void __glintercept_glRasterSamplesEXT(GLuint samples, GLboolean fixedsamplelocations) {
  __glintercept_fnptr_glRasterSamplesEXT(samples, fixedsamplelocations);
  __glintercept_log(" - glRasterSamplesEXT(samples: %ld, fixedsamplelocations: %ld)", samples, fixedsamplelocations);
}

typedef void(*__ctype_glReadBuffer)(GLenum);
static __ctype_glReadBuffer __glintercept_fnptr_glReadBuffer;
void __glintercept_glReadBuffer(GLenum src) {
  __glintercept_fnptr_glReadBuffer(src);
  __glintercept_log(" - glReadBuffer(src: %ld (%s))", src, __gl_intercept_formatenum(src));
}

typedef void(*__ctype_glReadBufferIndexedEXT)(GLenum, GLint);
static __ctype_glReadBufferIndexedEXT __glintercept_fnptr_glReadBufferIndexedEXT;
void __glintercept_glReadBufferIndexedEXT(GLenum src, GLint index) {
  __glintercept_fnptr_glReadBufferIndexedEXT(src, index);
  __glintercept_log(" - glReadBufferIndexedEXT(src: %ld (%s), index: %ld)", src, __gl_intercept_formatenum(src), index);
}

typedef void(*__ctype_glReadBufferNV)(GLenum);
static __ctype_glReadBufferNV __glintercept_fnptr_glReadBufferNV;
void __glintercept_glReadBufferNV(GLenum mode) {
  __glintercept_fnptr_glReadBufferNV(mode);
  __glintercept_log(" - glReadBufferNV(mode: %ld (%s))", mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glReadInstrumentsSGIX)(GLint);
static __ctype_glReadInstrumentsSGIX __glintercept_fnptr_glReadInstrumentsSGIX;
void __glintercept_glReadInstrumentsSGIX(GLint marker) {
  __glintercept_fnptr_glReadInstrumentsSGIX(marker);
  __glintercept_log(" - glReadInstrumentsSGIX(marker: %ld)", marker);
}

typedef void(*__ctype_glReadPixels)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, void *);
static __ctype_glReadPixels __glintercept_fnptr_glReadPixels;
void __glintercept_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels) {
  __glintercept_fnptr_glReadPixels(x, y, width, height, format, type, pixels);
  __glintercept_log(" - glReadPixels(x: %ld, y: %ld, width: %ld, height: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", x, y, width, height, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glReadnPixels)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
static __ctype_glReadnPixels __glintercept_fnptr_glReadnPixels;
void __glintercept_glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) {
  __glintercept_fnptr_glReadnPixels(x, y, width, height, format, type, bufSize, data);
  __glintercept_log(" - glReadnPixels(x: %ld, y: %ld, width: %ld, height: %ld, format: %ld (%s), type: %ld (%s), bufSize: %ld, data: %ld)", x, y, width, height, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), bufSize, data);
}

typedef void(*__ctype_glReadnPixelsARB)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
static __ctype_glReadnPixelsARB __glintercept_fnptr_glReadnPixelsARB;
void __glintercept_glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) {
  __glintercept_fnptr_glReadnPixelsARB(x, y, width, height, format, type, bufSize, data);
  __glintercept_log(" - glReadnPixelsARB(x: %ld, y: %ld, width: %ld, height: %ld, format: %ld (%s), type: %ld (%s), bufSize: %ld, data: %ld)", x, y, width, height, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), bufSize, data);
}

typedef void(*__ctype_glReadnPixelsEXT)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
static __ctype_glReadnPixelsEXT __glintercept_fnptr_glReadnPixelsEXT;
void __glintercept_glReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) {
  __glintercept_fnptr_glReadnPixelsEXT(x, y, width, height, format, type, bufSize, data);
  __glintercept_log(" - glReadnPixelsEXT(x: %ld, y: %ld, width: %ld, height: %ld, format: %ld (%s), type: %ld (%s), bufSize: %ld, data: %ld)", x, y, width, height, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), bufSize, data);
}

typedef void(*__ctype_glReadnPixelsKHR)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
static __ctype_glReadnPixelsKHR __glintercept_fnptr_glReadnPixelsKHR;
void __glintercept_glReadnPixelsKHR(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) {
  __glintercept_fnptr_glReadnPixelsKHR(x, y, width, height, format, type, bufSize, data);
  __glintercept_log(" - glReadnPixelsKHR(x: %ld, y: %ld, width: %ld, height: %ld, format: %ld (%s), type: %ld (%s), bufSize: %ld, data: %ld)", x, y, width, height, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), bufSize, data);
}

typedef GLboolean(*__ctype_glReleaseKeyedMutexWin32EXT)(GLuint, GLuint64);
static __ctype_glReleaseKeyedMutexWin32EXT __glintercept_fnptr_glReleaseKeyedMutexWin32EXT;
GLboolean __glintercept_glReleaseKeyedMutexWin32EXT(GLuint memory, GLuint64 key) {
  GLboolean __ret = __glintercept_fnptr_glReleaseKeyedMutexWin32EXT(memory, key);
  __glintercept_log(" - glReleaseKeyedMutexWin32EXT(memory: %ld, key: %ld) -> %ld", memory, key, __ret);
  return __ret;
}

typedef void(*__ctype_glRectd)(GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glRectd __glintercept_fnptr_glRectd;
void __glintercept_glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) {
  __glintercept_fnptr_glRectd(x1, y1, x2, y2);
  __glintercept_log(" - glRectd(x1: %ld, y1: %ld, x2: %ld, y2: %ld)", x1, y1, x2, y2);
}

typedef void(*__ctype_glRectdv)(const GLdouble *, const GLdouble *);
static __ctype_glRectdv __glintercept_fnptr_glRectdv;
void __glintercept_glRectdv(const GLdouble * v1, const GLdouble * v2) {
  __glintercept_fnptr_glRectdv(v1, v2);
  __glintercept_log(" - glRectdv(v1: %ld, v2: %ld)", v1, v2);
}

typedef void(*__ctype_glRectf)(GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glRectf __glintercept_fnptr_glRectf;
void __glintercept_glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) {
  __glintercept_fnptr_glRectf(x1, y1, x2, y2);
  __glintercept_log(" - glRectf(x1: %ld, y1: %ld, x2: %ld, y2: %ld)", x1, y1, x2, y2);
}

typedef void(*__ctype_glRectfv)(const GLfloat *, const GLfloat *);
static __ctype_glRectfv __glintercept_fnptr_glRectfv;
void __glintercept_glRectfv(const GLfloat * v1, const GLfloat * v2) {
  __glintercept_fnptr_glRectfv(v1, v2);
  __glintercept_log(" - glRectfv(v1: %ld, v2: %ld)", v1, v2);
}

typedef void(*__ctype_glRecti)(GLint, GLint, GLint, GLint);
static __ctype_glRecti __glintercept_fnptr_glRecti;
void __glintercept_glRecti(GLint x1, GLint y1, GLint x2, GLint y2) {
  __glintercept_fnptr_glRecti(x1, y1, x2, y2);
  __glintercept_log(" - glRecti(x1: %ld, y1: %ld, x2: %ld, y2: %ld)", x1, y1, x2, y2);
}

typedef void(*__ctype_glRectiv)(const GLint *, const GLint *);
static __ctype_glRectiv __glintercept_fnptr_glRectiv;
void __glintercept_glRectiv(const GLint * v1, const GLint * v2) {
  __glintercept_fnptr_glRectiv(v1, v2);
  __glintercept_log(" - glRectiv(v1: %ld, v2: %ld)", v1, v2);
}

typedef void(*__ctype_glRects)(GLshort, GLshort, GLshort, GLshort);
static __ctype_glRects __glintercept_fnptr_glRects;
void __glintercept_glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2) {
  __glintercept_fnptr_glRects(x1, y1, x2, y2);
  __glintercept_log(" - glRects(x1: %ld, y1: %ld, x2: %ld, y2: %ld)", x1, y1, x2, y2);
}

typedef void(*__ctype_glRectsv)(const GLshort *, const GLshort *);
static __ctype_glRectsv __glintercept_fnptr_glRectsv;
void __glintercept_glRectsv(const GLshort * v1, const GLshort * v2) {
  __glintercept_fnptr_glRectsv(v1, v2);
  __glintercept_log(" - glRectsv(v1: %ld, v2: %ld)", v1, v2);
}

typedef void(*__ctype_glRectxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
static __ctype_glRectxOES __glintercept_fnptr_glRectxOES;
void __glintercept_glRectxOES(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2) {
  __glintercept_fnptr_glRectxOES(x1, y1, x2, y2);
  __glintercept_log(" - glRectxOES(x1: %ld, y1: %ld, x2: %ld, y2: %ld)", x1, y1, x2, y2);
}

typedef void(*__ctype_glRectxvOES)(const GLfixed *, const GLfixed *);
static __ctype_glRectxvOES __glintercept_fnptr_glRectxvOES;
void __glintercept_glRectxvOES(const GLfixed * v1, const GLfixed * v2) {
  __glintercept_fnptr_glRectxvOES(v1, v2);
  __glintercept_log(" - glRectxvOES(v1: %ld, v2: %ld)", v1, v2);
}

typedef void(*__ctype_glReferencePlaneSGIX)(const GLdouble *);
static __ctype_glReferencePlaneSGIX __glintercept_fnptr_glReferencePlaneSGIX;
void __glintercept_glReferencePlaneSGIX(const GLdouble * equation) {
  __glintercept_fnptr_glReferencePlaneSGIX(equation);
  __glintercept_log(" - glReferencePlaneSGIX(equation: %ld)", equation);
}

typedef void(*__ctype_glReleaseShaderCompiler)();
static __ctype_glReleaseShaderCompiler __glintercept_fnptr_glReleaseShaderCompiler;
void __glintercept_glReleaseShaderCompiler() {
  __glintercept_fnptr_glReleaseShaderCompiler();
  __glintercept_log(" - glReleaseShaderCompiler()");
}

typedef void(*__ctype_glRenderGpuMaskNV)(GLbitfield);
static __ctype_glRenderGpuMaskNV __glintercept_fnptr_glRenderGpuMaskNV;
void __glintercept_glRenderGpuMaskNV(GLbitfield mask) {
  __glintercept_fnptr_glRenderGpuMaskNV(mask);
  __glintercept_log(" - glRenderGpuMaskNV(mask: %ld)", mask);
}

typedef GLint(*__ctype_glRenderMode)(GLenum);
static __ctype_glRenderMode __glintercept_fnptr_glRenderMode;
GLint __glintercept_glRenderMode(GLenum mode) {
  GLint __ret = __glintercept_fnptr_glRenderMode(mode);
  __glintercept_log(" - glRenderMode(mode: %ld (%s)) -> %ld", mode, __gl_intercept_formatenum(mode), __ret);
  return __ret;
}

typedef void(*__ctype_glRenderbufferStorage)(GLenum, GLenum, GLsizei, GLsizei);
static __ctype_glRenderbufferStorage __glintercept_fnptr_glRenderbufferStorage;
void __glintercept_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glRenderbufferStorage(target, internalformat, width, height);
  __glintercept_log(" - glRenderbufferStorage(target: %ld (%s), internalformat: %ld (%s), width: %ld, height: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), width, height);
}

typedef void(*__ctype_glRenderbufferStorageEXT)(GLenum, GLenum, GLsizei, GLsizei);
static __ctype_glRenderbufferStorageEXT __glintercept_fnptr_glRenderbufferStorageEXT;
void __glintercept_glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glRenderbufferStorageEXT(target, internalformat, width, height);
  __glintercept_log(" - glRenderbufferStorageEXT(target: %ld (%s), internalformat: %ld (%s), width: %ld, height: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), width, height);
}

typedef void(*__ctype_glRenderbufferStorageMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
static __ctype_glRenderbufferStorageMultisample __glintercept_fnptr_glRenderbufferStorageMultisample;
void __glintercept_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
  __glintercept_log(" - glRenderbufferStorageMultisample(target: %ld (%s), samples: %ld, internalformat: %ld (%s), width: %ld, height: %ld)", target, __gl_intercept_formatenum(target), samples, internalformat, __gl_intercept_formatenum(internalformat), width, height);
}

typedef void(*__ctype_glRenderbufferStorageMultisampleANGLE)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
static __ctype_glRenderbufferStorageMultisampleANGLE __glintercept_fnptr_glRenderbufferStorageMultisampleANGLE;
void __glintercept_glRenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glRenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height);
  __glintercept_log(" - glRenderbufferStorageMultisampleANGLE(target: %ld (%s), samples: %ld, internalformat: %ld (%s), width: %ld, height: %ld)", target, __gl_intercept_formatenum(target), samples, internalformat, __gl_intercept_formatenum(internalformat), width, height);
}

typedef void(*__ctype_glRenderbufferStorageMultisampleAPPLE)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
static __ctype_glRenderbufferStorageMultisampleAPPLE __glintercept_fnptr_glRenderbufferStorageMultisampleAPPLE;
void __glintercept_glRenderbufferStorageMultisampleAPPLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glRenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height);
  __glintercept_log(" - glRenderbufferStorageMultisampleAPPLE(target: %ld (%s), samples: %ld, internalformat: %ld (%s), width: %ld, height: %ld)", target, __gl_intercept_formatenum(target), samples, internalformat, __gl_intercept_formatenum(internalformat), width, height);
}

typedef void(*__ctype_glRenderbufferStorageMultisampleAdvancedAMD)(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
static __ctype_glRenderbufferStorageMultisampleAdvancedAMD __glintercept_fnptr_glRenderbufferStorageMultisampleAdvancedAMD;
void __glintercept_glRenderbufferStorageMultisampleAdvancedAMD(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glRenderbufferStorageMultisampleAdvancedAMD(target, samples, storageSamples, internalformat, width, height);
  __glintercept_log(" - glRenderbufferStorageMultisampleAdvancedAMD(target: %ld (%s), samples: %ld, storageSamples: %ld, internalformat: %ld (%s), width: %ld, height: %ld)", target, __gl_intercept_formatenum(target), samples, storageSamples, internalformat, __gl_intercept_formatenum(internalformat), width, height);
}

typedef void(*__ctype_glRenderbufferStorageMultisampleCoverageNV)(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
static __ctype_glRenderbufferStorageMultisampleCoverageNV __glintercept_fnptr_glRenderbufferStorageMultisampleCoverageNV;
void __glintercept_glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height);
  __glintercept_log(" - glRenderbufferStorageMultisampleCoverageNV(target: %ld (%s), coverageSamples: %ld, colorSamples: %ld, internalformat: %ld (%s), width: %ld, height: %ld)", target, __gl_intercept_formatenum(target), coverageSamples, colorSamples, internalformat, __gl_intercept_formatenum(internalformat), width, height);
}

typedef void(*__ctype_glRenderbufferStorageMultisampleEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
static __ctype_glRenderbufferStorageMultisampleEXT __glintercept_fnptr_glRenderbufferStorageMultisampleEXT;
void __glintercept_glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);
  __glintercept_log(" - glRenderbufferStorageMultisampleEXT(target: %ld (%s), samples: %ld, internalformat: %ld (%s), width: %ld, height: %ld)", target, __gl_intercept_formatenum(target), samples, internalformat, __gl_intercept_formatenum(internalformat), width, height);
}

typedef void(*__ctype_glRenderbufferStorageMultisampleIMG)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
static __ctype_glRenderbufferStorageMultisampleIMG __glintercept_fnptr_glRenderbufferStorageMultisampleIMG;
void __glintercept_glRenderbufferStorageMultisampleIMG(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glRenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height);
  __glintercept_log(" - glRenderbufferStorageMultisampleIMG(target: %ld (%s), samples: %ld, internalformat: %ld (%s), width: %ld, height: %ld)", target, __gl_intercept_formatenum(target), samples, internalformat, __gl_intercept_formatenum(internalformat), width, height);
}

typedef void(*__ctype_glRenderbufferStorageMultisampleNV)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
static __ctype_glRenderbufferStorageMultisampleNV __glintercept_fnptr_glRenderbufferStorageMultisampleNV;
void __glintercept_glRenderbufferStorageMultisampleNV(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glRenderbufferStorageMultisampleNV(target, samples, internalformat, width, height);
  __glintercept_log(" - glRenderbufferStorageMultisampleNV(target: %ld (%s), samples: %ld, internalformat: %ld (%s), width: %ld, height: %ld)", target, __gl_intercept_formatenum(target), samples, internalformat, __gl_intercept_formatenum(internalformat), width, height);
}

typedef void(*__ctype_glRenderbufferStorageOES)(GLenum, GLenum, GLsizei, GLsizei);
static __ctype_glRenderbufferStorageOES __glintercept_fnptr_glRenderbufferStorageOES;
void __glintercept_glRenderbufferStorageOES(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glRenderbufferStorageOES(target, internalformat, width, height);
  __glintercept_log(" - glRenderbufferStorageOES(target: %ld (%s), internalformat: %ld (%s), width: %ld, height: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), width, height);
}

typedef void(*__ctype_glReplacementCodePointerSUN)(GLenum, GLsizei, const void **);
static __ctype_glReplacementCodePointerSUN __glintercept_fnptr_glReplacementCodePointerSUN;
void __glintercept_glReplacementCodePointerSUN(GLenum type, GLsizei stride, const void ** pointer) {
  __glintercept_fnptr_glReplacementCodePointerSUN(type, stride, pointer);
  __glintercept_log(" - glReplacementCodePointerSUN(type: %ld (%s), stride: %ld, pointer: %ld)", type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glReplacementCodeubSUN)(GLubyte);
static __ctype_glReplacementCodeubSUN __glintercept_fnptr_glReplacementCodeubSUN;
void __glintercept_glReplacementCodeubSUN(GLubyte code) {
  __glintercept_fnptr_glReplacementCodeubSUN(code);
  __glintercept_log(" - glReplacementCodeubSUN(code: %ld)", code);
}

typedef void(*__ctype_glReplacementCodeubvSUN)(const GLubyte *);
static __ctype_glReplacementCodeubvSUN __glintercept_fnptr_glReplacementCodeubvSUN;
void __glintercept_glReplacementCodeubvSUN(const GLubyte * code) {
  __glintercept_fnptr_glReplacementCodeubvSUN(code);
  __glintercept_log(" - glReplacementCodeubvSUN(code: %s)", code);
}

typedef void(*__ctype_glReplacementCodeuiColor3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glReplacementCodeuiColor3fVertex3fSUN __glintercept_fnptr_glReplacementCodeuiColor3fVertex3fSUN;
void __glintercept_glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z);
  __glintercept_log(" - glReplacementCodeuiColor3fVertex3fSUN(rc: %ld, r: %ld, g: %ld, b: %ld, x: %ld, y: %ld, z: %ld)", rc, r, g, b, x, y, z);
}

typedef void(*__ctype_glReplacementCodeuiColor3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *);
static __ctype_glReplacementCodeuiColor3fVertex3fvSUN __glintercept_fnptr_glReplacementCodeuiColor3fVertex3fvSUN;
void __glintercept_glReplacementCodeuiColor3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * v) {
  __glintercept_fnptr_glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v);
  __glintercept_log(" - glReplacementCodeuiColor3fVertex3fvSUN(rc: %ld, c: %ld, v: %ld)", rc, c, v);
}

typedef void(*__ctype_glReplacementCodeuiColor4fNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glReplacementCodeuiColor4fNormal3fVertex3fSUN __glintercept_fnptr_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
void __glintercept_glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z);
  __glintercept_log(" - glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc: %ld, r: %ld, g: %ld, b: %ld, a: %ld, nx: %ld, ny: %ld, nz: %ld, x: %ld, y: %ld, z: %ld)", rc, r, g, b, a, nx, ny, nz, x, y, z);
}

typedef void(*__ctype_glReplacementCodeuiColor4fNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *);
static __ctype_glReplacementCodeuiColor4fNormal3fVertex3fvSUN __glintercept_fnptr_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
void __glintercept_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v) {
  __glintercept_fnptr_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v);
  __glintercept_log(" - glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc: %ld, c: %ld, n: %ld, v: %ld)", rc, c, n, v);
}

typedef void(*__ctype_glReplacementCodeuiColor4ubVertex3fSUN)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
static __ctype_glReplacementCodeuiColor4ubVertex3fSUN __glintercept_fnptr_glReplacementCodeuiColor4ubVertex3fSUN;
void __glintercept_glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z);
  __glintercept_log(" - glReplacementCodeuiColor4ubVertex3fSUN(rc: %ld, r: %ld, g: %ld, b: %ld, a: %ld, x: %ld, y: %ld, z: %ld)", rc, r, g, b, a, x, y, z);
}

typedef void(*__ctype_glReplacementCodeuiColor4ubVertex3fvSUN)(const GLuint *, const GLubyte *, const GLfloat *);
static __ctype_glReplacementCodeuiColor4ubVertex3fvSUN __glintercept_fnptr_glReplacementCodeuiColor4ubVertex3fvSUN;
void __glintercept_glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint * rc, const GLubyte * c, const GLfloat * v) {
  __glintercept_fnptr_glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v);
  __glintercept_log(" - glReplacementCodeuiColor4ubVertex3fvSUN(rc: %ld, c: %s, v: %ld)", rc, c, v);
}

typedef void(*__ctype_glReplacementCodeuiNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glReplacementCodeuiNormal3fVertex3fSUN __glintercept_fnptr_glReplacementCodeuiNormal3fVertex3fSUN;
void __glintercept_glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z);
  __glintercept_log(" - glReplacementCodeuiNormal3fVertex3fSUN(rc: %ld, nx: %ld, ny: %ld, nz: %ld, x: %ld, y: %ld, z: %ld)", rc, nx, ny, nz, x, y, z);
}

typedef void(*__ctype_glReplacementCodeuiNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *);
static __ctype_glReplacementCodeuiNormal3fVertex3fvSUN __glintercept_fnptr_glReplacementCodeuiNormal3fVertex3fvSUN;
void __glintercept_glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * n, const GLfloat * v) {
  __glintercept_fnptr_glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v);
  __glintercept_log(" - glReplacementCodeuiNormal3fVertex3fvSUN(rc: %ld, n: %ld, v: %ld)", rc, n, v);
}

typedef void(*__ctype_glReplacementCodeuiSUN)(GLuint);
static __ctype_glReplacementCodeuiSUN __glintercept_fnptr_glReplacementCodeuiSUN;
void __glintercept_glReplacementCodeuiSUN(GLuint code) {
  __glintercept_fnptr_glReplacementCodeuiSUN(code);
  __glintercept_log(" - glReplacementCodeuiSUN(code: %ld)", code);
}

typedef void(*__ctype_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN __glintercept_fnptr_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
void __glintercept_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
  __glintercept_log(" - glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc: %ld, s: %ld, t: %ld, r: %ld, g: %ld, b: %ld, a: %ld, nx: %ld, ny: %ld, nz: %ld, x: %ld, y: %ld, z: %ld)", rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
}

typedef void(*__ctype_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
static __ctype_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN __glintercept_fnptr_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
void __glintercept_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) {
  __glintercept_fnptr_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v);
  __glintercept_log(" - glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc: %ld, tc: %ld, c: %ld, n: %ld, v: %ld)", rc, tc, c, n, v);
}

typedef void(*__ctype_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN __glintercept_fnptr_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
void __glintercept_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z);
  __glintercept_log(" - glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc: %ld, s: %ld, t: %ld, nx: %ld, ny: %ld, nz: %ld, x: %ld, y: %ld, z: %ld)", rc, s, t, nx, ny, nz, x, y, z);
}

typedef void(*__ctype_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *);
static __ctype_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN __glintercept_fnptr_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
void __glintercept_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * n, const GLfloat * v) {
  __glintercept_fnptr_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v);
  __glintercept_log(" - glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc: %ld, tc: %ld, n: %ld, v: %ld)", rc, tc, n, v);
}

typedef void(*__ctype_glReplacementCodeuiTexCoord2fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glReplacementCodeuiTexCoord2fVertex3fSUN __glintercept_fnptr_glReplacementCodeuiTexCoord2fVertex3fSUN;
void __glintercept_glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z);
  __glintercept_log(" - glReplacementCodeuiTexCoord2fVertex3fSUN(rc: %ld, s: %ld, t: %ld, x: %ld, y: %ld, z: %ld)", rc, s, t, x, y, z);
}

typedef void(*__ctype_glReplacementCodeuiTexCoord2fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *);
static __ctype_glReplacementCodeuiTexCoord2fVertex3fvSUN __glintercept_fnptr_glReplacementCodeuiTexCoord2fVertex3fvSUN;
void __glintercept_glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * v) {
  __glintercept_fnptr_glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v);
  __glintercept_log(" - glReplacementCodeuiTexCoord2fVertex3fvSUN(rc: %ld, tc: %ld, v: %ld)", rc, tc, v);
}

typedef void(*__ctype_glReplacementCodeuiVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat);
static __ctype_glReplacementCodeuiVertex3fSUN __glintercept_fnptr_glReplacementCodeuiVertex3fSUN;
void __glintercept_glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glReplacementCodeuiVertex3fSUN(rc, x, y, z);
  __glintercept_log(" - glReplacementCodeuiVertex3fSUN(rc: %ld, x: %ld, y: %ld, z: %ld)", rc, x, y, z);
}

typedef void(*__ctype_glReplacementCodeuiVertex3fvSUN)(const GLuint *, const GLfloat *);
static __ctype_glReplacementCodeuiVertex3fvSUN __glintercept_fnptr_glReplacementCodeuiVertex3fvSUN;
void __glintercept_glReplacementCodeuiVertex3fvSUN(const GLuint * rc, const GLfloat * v) {
  __glintercept_fnptr_glReplacementCodeuiVertex3fvSUN(rc, v);
  __glintercept_log(" - glReplacementCodeuiVertex3fvSUN(rc: %ld, v: %ld)", rc, v);
}

typedef void(*__ctype_glReplacementCodeuivSUN)(const GLuint *);
static __ctype_glReplacementCodeuivSUN __glintercept_fnptr_glReplacementCodeuivSUN;
void __glintercept_glReplacementCodeuivSUN(const GLuint * code) {
  __glintercept_fnptr_glReplacementCodeuivSUN(code);
  __glintercept_log(" - glReplacementCodeuivSUN(code: %ld)", code);
}

typedef void(*__ctype_glReplacementCodeusSUN)(GLushort);
static __ctype_glReplacementCodeusSUN __glintercept_fnptr_glReplacementCodeusSUN;
void __glintercept_glReplacementCodeusSUN(GLushort code) {
  __glintercept_fnptr_glReplacementCodeusSUN(code);
  __glintercept_log(" - glReplacementCodeusSUN(code: %ld)", code);
}

typedef void(*__ctype_glReplacementCodeusvSUN)(const GLushort *);
static __ctype_glReplacementCodeusvSUN __glintercept_fnptr_glReplacementCodeusvSUN;
void __glintercept_glReplacementCodeusvSUN(const GLushort * code) {
  __glintercept_fnptr_glReplacementCodeusvSUN(code);
  __glintercept_log(" - glReplacementCodeusvSUN(code: %ld)", code);
}

typedef void(*__ctype_glRequestResidentProgramsNV)(GLsizei, const GLuint *);
static __ctype_glRequestResidentProgramsNV __glintercept_fnptr_glRequestResidentProgramsNV;
void __glintercept_glRequestResidentProgramsNV(GLsizei n, const GLuint * programs) {
  __glintercept_fnptr_glRequestResidentProgramsNV(n, programs);
  __glintercept_log(" - glRequestResidentProgramsNV(n: %ld, programs: %ld)", n, programs);
}

typedef void(*__ctype_glResetHistogram)(GLenum);
static __ctype_glResetHistogram __glintercept_fnptr_glResetHistogram;
void __glintercept_glResetHistogram(GLenum target) {
  __glintercept_fnptr_glResetHistogram(target);
  __glintercept_log(" - glResetHistogram(target: %ld (%s))", target, __gl_intercept_formatenum(target));
}

typedef void(*__ctype_glResetHistogramEXT)(GLenum);
static __ctype_glResetHistogramEXT __glintercept_fnptr_glResetHistogramEXT;
void __glintercept_glResetHistogramEXT(GLenum target) {
  __glintercept_fnptr_glResetHistogramEXT(target);
  __glintercept_log(" - glResetHistogramEXT(target: %ld (%s))", target, __gl_intercept_formatenum(target));
}

typedef void(*__ctype_glResetMemoryObjectParameterNV)(GLuint, GLenum);
static __ctype_glResetMemoryObjectParameterNV __glintercept_fnptr_glResetMemoryObjectParameterNV;
void __glintercept_glResetMemoryObjectParameterNV(GLuint memory, GLenum pname) {
  __glintercept_fnptr_glResetMemoryObjectParameterNV(memory, pname);
  __glintercept_log(" - glResetMemoryObjectParameterNV(memory: %ld, pname: %ld (%s))", memory, pname, __gl_intercept_formatenum(pname));
}

typedef void(*__ctype_glResetMinmax)(GLenum);
static __ctype_glResetMinmax __glintercept_fnptr_glResetMinmax;
void __glintercept_glResetMinmax(GLenum target) {
  __glintercept_fnptr_glResetMinmax(target);
  __glintercept_log(" - glResetMinmax(target: %ld (%s))", target, __gl_intercept_formatenum(target));
}

typedef void(*__ctype_glResetMinmaxEXT)(GLenum);
static __ctype_glResetMinmaxEXT __glintercept_fnptr_glResetMinmaxEXT;
void __glintercept_glResetMinmaxEXT(GLenum target) {
  __glintercept_fnptr_glResetMinmaxEXT(target);
  __glintercept_log(" - glResetMinmaxEXT(target: %ld (%s))", target, __gl_intercept_formatenum(target));
}

typedef void(*__ctype_glResizeBuffersMESA)();
static __ctype_glResizeBuffersMESA __glintercept_fnptr_glResizeBuffersMESA;
void __glintercept_glResizeBuffersMESA() {
  __glintercept_fnptr_glResizeBuffersMESA();
  __glintercept_log(" - glResizeBuffersMESA()");
}

typedef void(*__ctype_glResolveDepthValuesNV)();
static __ctype_glResolveDepthValuesNV __glintercept_fnptr_glResolveDepthValuesNV;
void __glintercept_glResolveDepthValuesNV() {
  __glintercept_fnptr_glResolveDepthValuesNV();
  __glintercept_log(" - glResolveDepthValuesNV()");
}

typedef void(*__ctype_glResolveMultisampleFramebufferAPPLE)();
static __ctype_glResolveMultisampleFramebufferAPPLE __glintercept_fnptr_glResolveMultisampleFramebufferAPPLE;
void __glintercept_glResolveMultisampleFramebufferAPPLE() {
  __glintercept_fnptr_glResolveMultisampleFramebufferAPPLE();
  __glintercept_log(" - glResolveMultisampleFramebufferAPPLE()");
}

typedef void(*__ctype_glResumeTransformFeedback)();
static __ctype_glResumeTransformFeedback __glintercept_fnptr_glResumeTransformFeedback;
void __glintercept_glResumeTransformFeedback() {
  __glintercept_fnptr_glResumeTransformFeedback();
  __glintercept_log(" - glResumeTransformFeedback()");
}

typedef void(*__ctype_glResumeTransformFeedbackNV)();
static __ctype_glResumeTransformFeedbackNV __glintercept_fnptr_glResumeTransformFeedbackNV;
void __glintercept_glResumeTransformFeedbackNV() {
  __glintercept_fnptr_glResumeTransformFeedbackNV();
  __glintercept_log(" - glResumeTransformFeedbackNV()");
}

typedef void(*__ctype_glRotated)(GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glRotated __glintercept_fnptr_glRotated;
void __glintercept_glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
  __glintercept_fnptr_glRotated(angle, x, y, z);
  __glintercept_log(" - glRotated(angle: %ld, x: %ld, y: %ld, z: %ld)", angle, x, y, z);
}

typedef void(*__ctype_glRotatef)(GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glRotatef __glintercept_fnptr_glRotatef;
void __glintercept_glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glRotatef(angle, x, y, z);
  __glintercept_log(" - glRotatef(angle: %ld, x: %ld, y: %ld, z: %ld)", angle, x, y, z);
}

typedef void(*__ctype_glRotatex)(GLfixed, GLfixed, GLfixed, GLfixed);
static __ctype_glRotatex __glintercept_fnptr_glRotatex;
void __glintercept_glRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z) {
  __glintercept_fnptr_glRotatex(angle, x, y, z);
  __glintercept_log(" - glRotatex(angle: %ld, x: %ld, y: %ld, z: %ld)", angle, x, y, z);
}

typedef void(*__ctype_glRotatexOES)(GLfixed, GLfixed, GLfixed, GLfixed);
static __ctype_glRotatexOES __glintercept_fnptr_glRotatexOES;
void __glintercept_glRotatexOES(GLfixed angle, GLfixed x, GLfixed y, GLfixed z) {
  __glintercept_fnptr_glRotatexOES(angle, x, y, z);
  __glintercept_log(" - glRotatexOES(angle: %ld, x: %ld, y: %ld, z: %ld)", angle, x, y, z);
}

typedef void(*__ctype_glSampleCoverage)(GLfloat, GLboolean);
static __ctype_glSampleCoverage __glintercept_fnptr_glSampleCoverage;
void __glintercept_glSampleCoverage(GLfloat value, GLboolean invert) {
  __glintercept_fnptr_glSampleCoverage(value, invert);
  __glintercept_log(" - glSampleCoverage(value: %ld, invert: %ld)", value, invert);
}

typedef void(*__ctype_glSampleCoverageARB)(GLfloat, GLboolean);
static __ctype_glSampleCoverageARB __glintercept_fnptr_glSampleCoverageARB;
void __glintercept_glSampleCoverageARB(GLfloat value, GLboolean invert) {
  __glintercept_fnptr_glSampleCoverageARB(value, invert);
  __glintercept_log(" - glSampleCoverageARB(value: %ld, invert: %ld)", value, invert);
}

typedef void(*__ctype_glSampleCoveragex)(GLclampx, GLboolean);
static __ctype_glSampleCoveragex __glintercept_fnptr_glSampleCoveragex;
void __glintercept_glSampleCoveragex(GLclampx value, GLboolean invert) {
  __glintercept_fnptr_glSampleCoveragex(value, invert);
  __glintercept_log(" - glSampleCoveragex(value: %ld, invert: %ld)", value, invert);
}

typedef void(*__ctype_glSampleCoveragexOES)(GLclampx, GLboolean);
static __ctype_glSampleCoveragexOES __glintercept_fnptr_glSampleCoveragexOES;
void __glintercept_glSampleCoveragexOES(GLclampx value, GLboolean invert) {
  __glintercept_fnptr_glSampleCoveragexOES(value, invert);
  __glintercept_log(" - glSampleCoveragexOES(value: %ld, invert: %ld)", value, invert);
}

typedef void(*__ctype_glSampleMapATI)(GLuint, GLuint, GLenum);
static __ctype_glSampleMapATI __glintercept_fnptr_glSampleMapATI;
void __glintercept_glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle) {
  __glintercept_fnptr_glSampleMapATI(dst, interp, swizzle);
  __glintercept_log(" - glSampleMapATI(dst: %ld, interp: %ld, swizzle: %ld (%s))", dst, interp, swizzle, __gl_intercept_formatenum(swizzle));
}

typedef void(*__ctype_glSampleMaskEXT)(GLclampf, GLboolean);
static __ctype_glSampleMaskEXT __glintercept_fnptr_glSampleMaskEXT;
void __glintercept_glSampleMaskEXT(GLclampf value, GLboolean invert) {
  __glintercept_fnptr_glSampleMaskEXT(value, invert);
  __glintercept_log(" - glSampleMaskEXT(value: %ld, invert: %ld)", value, invert);
}

typedef void(*__ctype_glSampleMaskIndexedNV)(GLuint, GLbitfield);
static __ctype_glSampleMaskIndexedNV __glintercept_fnptr_glSampleMaskIndexedNV;
void __glintercept_glSampleMaskIndexedNV(GLuint index, GLbitfield mask) {
  __glintercept_fnptr_glSampleMaskIndexedNV(index, mask);
  __glintercept_log(" - glSampleMaskIndexedNV(index: %ld, mask: %ld)", index, mask);
}

typedef void(*__ctype_glSampleMaskSGIS)(GLclampf, GLboolean);
static __ctype_glSampleMaskSGIS __glintercept_fnptr_glSampleMaskSGIS;
void __glintercept_glSampleMaskSGIS(GLclampf value, GLboolean invert) {
  __glintercept_fnptr_glSampleMaskSGIS(value, invert);
  __glintercept_log(" - glSampleMaskSGIS(value: %ld, invert: %ld)", value, invert);
}

typedef void(*__ctype_glSampleMaski)(GLuint, GLbitfield);
static __ctype_glSampleMaski __glintercept_fnptr_glSampleMaski;
void __glintercept_glSampleMaski(GLuint maskNumber, GLbitfield mask) {
  __glintercept_fnptr_glSampleMaski(maskNumber, mask);
  __glintercept_log(" - glSampleMaski(maskNumber: %ld, mask: %ld)", maskNumber, mask);
}

typedef void(*__ctype_glSamplePatternEXT)(GLenum);
static __ctype_glSamplePatternEXT __glintercept_fnptr_glSamplePatternEXT;
void __glintercept_glSamplePatternEXT(GLenum pattern) {
  __glintercept_fnptr_glSamplePatternEXT(pattern);
  __glintercept_log(" - glSamplePatternEXT(pattern: %ld (%s))", pattern, __gl_intercept_formatenum(pattern));
}

typedef void(*__ctype_glSamplePatternSGIS)(GLenum);
static __ctype_glSamplePatternSGIS __glintercept_fnptr_glSamplePatternSGIS;
void __glintercept_glSamplePatternSGIS(GLenum pattern) {
  __glintercept_fnptr_glSamplePatternSGIS(pattern);
  __glintercept_log(" - glSamplePatternSGIS(pattern: %ld (%s))", pattern, __gl_intercept_formatenum(pattern));
}

typedef void(*__ctype_glSamplerParameterIiv)(GLuint, GLenum, const GLint *);
static __ctype_glSamplerParameterIiv __glintercept_fnptr_glSamplerParameterIiv;
void __glintercept_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint * param) {
  __glintercept_fnptr_glSamplerParameterIiv(sampler, pname, param);
  __glintercept_log(" - glSamplerParameterIiv(sampler: %ld, pname: %ld (%s), param: %ld)", sampler, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glSamplerParameterIivEXT)(GLuint, GLenum, const GLint *);
static __ctype_glSamplerParameterIivEXT __glintercept_fnptr_glSamplerParameterIivEXT;
void __glintercept_glSamplerParameterIivEXT(GLuint sampler, GLenum pname, const GLint * param) {
  __glintercept_fnptr_glSamplerParameterIivEXT(sampler, pname, param);
  __glintercept_log(" - glSamplerParameterIivEXT(sampler: %ld, pname: %ld (%s), param: %ld)", sampler, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glSamplerParameterIivOES)(GLuint, GLenum, const GLint *);
static __ctype_glSamplerParameterIivOES __glintercept_fnptr_glSamplerParameterIivOES;
void __glintercept_glSamplerParameterIivOES(GLuint sampler, GLenum pname, const GLint * param) {
  __glintercept_fnptr_glSamplerParameterIivOES(sampler, pname, param);
  __glintercept_log(" - glSamplerParameterIivOES(sampler: %ld, pname: %ld (%s), param: %ld)", sampler, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glSamplerParameterIuiv)(GLuint, GLenum, const GLuint *);
static __ctype_glSamplerParameterIuiv __glintercept_fnptr_glSamplerParameterIuiv;
void __glintercept_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint * param) {
  __glintercept_fnptr_glSamplerParameterIuiv(sampler, pname, param);
  __glintercept_log(" - glSamplerParameterIuiv(sampler: %ld, pname: %ld (%s), param: %ld)", sampler, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glSamplerParameterIuivEXT)(GLuint, GLenum, const GLuint *);
static __ctype_glSamplerParameterIuivEXT __glintercept_fnptr_glSamplerParameterIuivEXT;
void __glintercept_glSamplerParameterIuivEXT(GLuint sampler, GLenum pname, const GLuint * param) {
  __glintercept_fnptr_glSamplerParameterIuivEXT(sampler, pname, param);
  __glintercept_log(" - glSamplerParameterIuivEXT(sampler: %ld, pname: %ld (%s), param: %ld)", sampler, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glSamplerParameterIuivOES)(GLuint, GLenum, const GLuint *);
static __ctype_glSamplerParameterIuivOES __glintercept_fnptr_glSamplerParameterIuivOES;
void __glintercept_glSamplerParameterIuivOES(GLuint sampler, GLenum pname, const GLuint * param) {
  __glintercept_fnptr_glSamplerParameterIuivOES(sampler, pname, param);
  __glintercept_log(" - glSamplerParameterIuivOES(sampler: %ld, pname: %ld (%s), param: %ld)", sampler, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glSamplerParameterf)(GLuint, GLenum, GLfloat);
static __ctype_glSamplerParameterf __glintercept_fnptr_glSamplerParameterf;
void __glintercept_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param) {
  __glintercept_fnptr_glSamplerParameterf(sampler, pname, param);
  __glintercept_log(" - glSamplerParameterf(sampler: %ld, pname: %ld (%s), param: %ld)", sampler, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glSamplerParameterfv)(GLuint, GLenum, const GLfloat *);
static __ctype_glSamplerParameterfv __glintercept_fnptr_glSamplerParameterfv;
void __glintercept_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat * param) {
  __glintercept_fnptr_glSamplerParameterfv(sampler, pname, param);
  __glintercept_log(" - glSamplerParameterfv(sampler: %ld, pname: %ld (%s), param: %ld)", sampler, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glSamplerParameteri)(GLuint, GLenum, GLint);
static __ctype_glSamplerParameteri __glintercept_fnptr_glSamplerParameteri;
void __glintercept_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param) {
  __glintercept_fnptr_glSamplerParameteri(sampler, pname, param);
  __glintercept_log(" - glSamplerParameteri(sampler: %ld, pname: %ld (%s), param: %ld)", sampler, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glSamplerParameteriv)(GLuint, GLenum, const GLint *);
static __ctype_glSamplerParameteriv __glintercept_fnptr_glSamplerParameteriv;
void __glintercept_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint * param) {
  __glintercept_fnptr_glSamplerParameteriv(sampler, pname, param);
  __glintercept_log(" - glSamplerParameteriv(sampler: %ld, pname: %ld (%s), param: %ld)", sampler, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glScaled)(GLdouble, GLdouble, GLdouble);
static __ctype_glScaled __glintercept_fnptr_glScaled;
void __glintercept_glScaled(GLdouble x, GLdouble y, GLdouble z) {
  __glintercept_fnptr_glScaled(x, y, z);
  __glintercept_log(" - glScaled(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glScalef)(GLfloat, GLfloat, GLfloat);
static __ctype_glScalef __glintercept_fnptr_glScalef;
void __glintercept_glScalef(GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glScalef(x, y, z);
  __glintercept_log(" - glScalef(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glScalex)(GLfixed, GLfixed, GLfixed);
static __ctype_glScalex __glintercept_fnptr_glScalex;
void __glintercept_glScalex(GLfixed x, GLfixed y, GLfixed z) {
  __glintercept_fnptr_glScalex(x, y, z);
  __glintercept_log(" - glScalex(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glScalexOES)(GLfixed, GLfixed, GLfixed);
static __ctype_glScalexOES __glintercept_fnptr_glScalexOES;
void __glintercept_glScalexOES(GLfixed x, GLfixed y, GLfixed z) {
  __glintercept_fnptr_glScalexOES(x, y, z);
  __glintercept_log(" - glScalexOES(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glScissor)(GLint, GLint, GLsizei, GLsizei);
static __ctype_glScissor __glintercept_fnptr_glScissor;
void __glintercept_glScissor(GLint x, GLint y, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glScissor(x, y, width, height);
  __glintercept_log(" - glScissor(x: %ld, y: %ld, width: %ld, height: %ld)", x, y, width, height);
}

typedef void(*__ctype_glScissorArrayv)(GLuint, GLsizei, const GLint *);
static __ctype_glScissorArrayv __glintercept_fnptr_glScissorArrayv;
void __glintercept_glScissorArrayv(GLuint first, GLsizei count, const GLint * v) {
  __glintercept_fnptr_glScissorArrayv(first, count, v);
  __glintercept_log(" - glScissorArrayv(first: %ld, count: %ld, v: %ld)", first, count, v);
}

typedef void(*__ctype_glScissorArrayvNV)(GLuint, GLsizei, const GLint *);
static __ctype_glScissorArrayvNV __glintercept_fnptr_glScissorArrayvNV;
void __glintercept_glScissorArrayvNV(GLuint first, GLsizei count, const GLint * v) {
  __glintercept_fnptr_glScissorArrayvNV(first, count, v);
  __glintercept_log(" - glScissorArrayvNV(first: %ld, count: %ld, v: %ld)", first, count, v);
}

typedef void(*__ctype_glScissorArrayvOES)(GLuint, GLsizei, const GLint *);
static __ctype_glScissorArrayvOES __glintercept_fnptr_glScissorArrayvOES;
void __glintercept_glScissorArrayvOES(GLuint first, GLsizei count, const GLint * v) {
  __glintercept_fnptr_glScissorArrayvOES(first, count, v);
  __glintercept_log(" - glScissorArrayvOES(first: %ld, count: %ld, v: %ld)", first, count, v);
}

typedef void(*__ctype_glScissorExclusiveArrayvNV)(GLuint, GLsizei, const GLint *);
static __ctype_glScissorExclusiveArrayvNV __glintercept_fnptr_glScissorExclusiveArrayvNV;
void __glintercept_glScissorExclusiveArrayvNV(GLuint first, GLsizei count, const GLint * v) {
  __glintercept_fnptr_glScissorExclusiveArrayvNV(first, count, v);
  __glintercept_log(" - glScissorExclusiveArrayvNV(first: %ld, count: %ld, v: %ld)", first, count, v);
}

typedef void(*__ctype_glScissorExclusiveNV)(GLint, GLint, GLsizei, GLsizei);
static __ctype_glScissorExclusiveNV __glintercept_fnptr_glScissorExclusiveNV;
void __glintercept_glScissorExclusiveNV(GLint x, GLint y, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glScissorExclusiveNV(x, y, width, height);
  __glintercept_log(" - glScissorExclusiveNV(x: %ld, y: %ld, width: %ld, height: %ld)", x, y, width, height);
}

typedef void(*__ctype_glScissorIndexed)(GLuint, GLint, GLint, GLsizei, GLsizei);
static __ctype_glScissorIndexed __glintercept_fnptr_glScissorIndexed;
void __glintercept_glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glScissorIndexed(index, left, bottom, width, height);
  __glintercept_log(" - glScissorIndexed(index: %ld, left: %ld, bottom: %ld, width: %ld, height: %ld)", index, left, bottom, width, height);
}

typedef void(*__ctype_glScissorIndexedNV)(GLuint, GLint, GLint, GLsizei, GLsizei);
static __ctype_glScissorIndexedNV __glintercept_fnptr_glScissorIndexedNV;
void __glintercept_glScissorIndexedNV(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glScissorIndexedNV(index, left, bottom, width, height);
  __glintercept_log(" - glScissorIndexedNV(index: %ld, left: %ld, bottom: %ld, width: %ld, height: %ld)", index, left, bottom, width, height);
}

typedef void(*__ctype_glScissorIndexedOES)(GLuint, GLint, GLint, GLsizei, GLsizei);
static __ctype_glScissorIndexedOES __glintercept_fnptr_glScissorIndexedOES;
void __glintercept_glScissorIndexedOES(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glScissorIndexedOES(index, left, bottom, width, height);
  __glintercept_log(" - glScissorIndexedOES(index: %ld, left: %ld, bottom: %ld, width: %ld, height: %ld)", index, left, bottom, width, height);
}

typedef void(*__ctype_glScissorIndexedv)(GLuint, const GLint *);
static __ctype_glScissorIndexedv __glintercept_fnptr_glScissorIndexedv;
void __glintercept_glScissorIndexedv(GLuint index, const GLint * v) {
  __glintercept_fnptr_glScissorIndexedv(index, v);
  __glintercept_log(" - glScissorIndexedv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glScissorIndexedvNV)(GLuint, const GLint *);
static __ctype_glScissorIndexedvNV __glintercept_fnptr_glScissorIndexedvNV;
void __glintercept_glScissorIndexedvNV(GLuint index, const GLint * v) {
  __glintercept_fnptr_glScissorIndexedvNV(index, v);
  __glintercept_log(" - glScissorIndexedvNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glScissorIndexedvOES)(GLuint, const GLint *);
static __ctype_glScissorIndexedvOES __glintercept_fnptr_glScissorIndexedvOES;
void __glintercept_glScissorIndexedvOES(GLuint index, const GLint * v) {
  __glintercept_fnptr_glScissorIndexedvOES(index, v);
  __glintercept_log(" - glScissorIndexedvOES(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glSecondaryColor3b)(GLbyte, GLbyte, GLbyte);
static __ctype_glSecondaryColor3b __glintercept_fnptr_glSecondaryColor3b;
void __glintercept_glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue) {
  __glintercept_fnptr_glSecondaryColor3b(red, green, blue);
  __glintercept_log(" - glSecondaryColor3b(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glSecondaryColor3bEXT)(GLbyte, GLbyte, GLbyte);
static __ctype_glSecondaryColor3bEXT __glintercept_fnptr_glSecondaryColor3bEXT;
void __glintercept_glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue) {
  __glintercept_fnptr_glSecondaryColor3bEXT(red, green, blue);
  __glintercept_log(" - glSecondaryColor3bEXT(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glSecondaryColor3bv)(const GLbyte *);
static __ctype_glSecondaryColor3bv __glintercept_fnptr_glSecondaryColor3bv;
void __glintercept_glSecondaryColor3bv(const GLbyte * v) {
  __glintercept_fnptr_glSecondaryColor3bv(v);
  __glintercept_log(" - glSecondaryColor3bv(v: %ld)", v);
}

typedef void(*__ctype_glSecondaryColor3bvEXT)(const GLbyte *);
static __ctype_glSecondaryColor3bvEXT __glintercept_fnptr_glSecondaryColor3bvEXT;
void __glintercept_glSecondaryColor3bvEXT(const GLbyte * v) {
  __glintercept_fnptr_glSecondaryColor3bvEXT(v);
  __glintercept_log(" - glSecondaryColor3bvEXT(v: %ld)", v);
}

typedef void(*__ctype_glSecondaryColor3d)(GLdouble, GLdouble, GLdouble);
static __ctype_glSecondaryColor3d __glintercept_fnptr_glSecondaryColor3d;
void __glintercept_glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue) {
  __glintercept_fnptr_glSecondaryColor3d(red, green, blue);
  __glintercept_log(" - glSecondaryColor3d(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glSecondaryColor3dEXT)(GLdouble, GLdouble, GLdouble);
static __ctype_glSecondaryColor3dEXT __glintercept_fnptr_glSecondaryColor3dEXT;
void __glintercept_glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue) {
  __glintercept_fnptr_glSecondaryColor3dEXT(red, green, blue);
  __glintercept_log(" - glSecondaryColor3dEXT(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glSecondaryColor3dv)(const GLdouble *);
static __ctype_glSecondaryColor3dv __glintercept_fnptr_glSecondaryColor3dv;
void __glintercept_glSecondaryColor3dv(const GLdouble * v) {
  __glintercept_fnptr_glSecondaryColor3dv(v);
  __glintercept_log(" - glSecondaryColor3dv(v: %ld)", v);
}

typedef void(*__ctype_glSecondaryColor3dvEXT)(const GLdouble *);
static __ctype_glSecondaryColor3dvEXT __glintercept_fnptr_glSecondaryColor3dvEXT;
void __glintercept_glSecondaryColor3dvEXT(const GLdouble * v) {
  __glintercept_fnptr_glSecondaryColor3dvEXT(v);
  __glintercept_log(" - glSecondaryColor3dvEXT(v: %ld)", v);
}

typedef void(*__ctype_glSecondaryColor3f)(GLfloat, GLfloat, GLfloat);
static __ctype_glSecondaryColor3f __glintercept_fnptr_glSecondaryColor3f;
void __glintercept_glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue) {
  __glintercept_fnptr_glSecondaryColor3f(red, green, blue);
  __glintercept_log(" - glSecondaryColor3f(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glSecondaryColor3fEXT)(GLfloat, GLfloat, GLfloat);
static __ctype_glSecondaryColor3fEXT __glintercept_fnptr_glSecondaryColor3fEXT;
void __glintercept_glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue) {
  __glintercept_fnptr_glSecondaryColor3fEXT(red, green, blue);
  __glintercept_log(" - glSecondaryColor3fEXT(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glSecondaryColor3fv)(const GLfloat *);
static __ctype_glSecondaryColor3fv __glintercept_fnptr_glSecondaryColor3fv;
void __glintercept_glSecondaryColor3fv(const GLfloat * v) {
  __glintercept_fnptr_glSecondaryColor3fv(v);
  __glintercept_log(" - glSecondaryColor3fv(v: %ld)", v);
}

typedef void(*__ctype_glSecondaryColor3fvEXT)(const GLfloat *);
static __ctype_glSecondaryColor3fvEXT __glintercept_fnptr_glSecondaryColor3fvEXT;
void __glintercept_glSecondaryColor3fvEXT(const GLfloat * v) {
  __glintercept_fnptr_glSecondaryColor3fvEXT(v);
  __glintercept_log(" - glSecondaryColor3fvEXT(v: %ld)", v);
}

typedef void(*__ctype_glSecondaryColor3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
static __ctype_glSecondaryColor3hNV __glintercept_fnptr_glSecondaryColor3hNV;
void __glintercept_glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue) {
  __glintercept_fnptr_glSecondaryColor3hNV(red, green, blue);
  __glintercept_log(" - glSecondaryColor3hNV(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glSecondaryColor3hvNV)(const GLhalfNV *);
static __ctype_glSecondaryColor3hvNV __glintercept_fnptr_glSecondaryColor3hvNV;
void __glintercept_glSecondaryColor3hvNV(const GLhalfNV * v) {
  __glintercept_fnptr_glSecondaryColor3hvNV(v);
  __glintercept_log(" - glSecondaryColor3hvNV(v: %ld)", v);
}

typedef void(*__ctype_glSecondaryColor3i)(GLint, GLint, GLint);
static __ctype_glSecondaryColor3i __glintercept_fnptr_glSecondaryColor3i;
void __glintercept_glSecondaryColor3i(GLint red, GLint green, GLint blue) {
  __glintercept_fnptr_glSecondaryColor3i(red, green, blue);
  __glintercept_log(" - glSecondaryColor3i(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glSecondaryColor3iEXT)(GLint, GLint, GLint);
static __ctype_glSecondaryColor3iEXT __glintercept_fnptr_glSecondaryColor3iEXT;
void __glintercept_glSecondaryColor3iEXT(GLint red, GLint green, GLint blue) {
  __glintercept_fnptr_glSecondaryColor3iEXT(red, green, blue);
  __glintercept_log(" - glSecondaryColor3iEXT(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glSecondaryColor3iv)(const GLint *);
static __ctype_glSecondaryColor3iv __glintercept_fnptr_glSecondaryColor3iv;
void __glintercept_glSecondaryColor3iv(const GLint * v) {
  __glintercept_fnptr_glSecondaryColor3iv(v);
  __glintercept_log(" - glSecondaryColor3iv(v: %ld)", v);
}

typedef void(*__ctype_glSecondaryColor3ivEXT)(const GLint *);
static __ctype_glSecondaryColor3ivEXT __glintercept_fnptr_glSecondaryColor3ivEXT;
void __glintercept_glSecondaryColor3ivEXT(const GLint * v) {
  __glintercept_fnptr_glSecondaryColor3ivEXT(v);
  __glintercept_log(" - glSecondaryColor3ivEXT(v: %ld)", v);
}

typedef void(*__ctype_glSecondaryColor3s)(GLshort, GLshort, GLshort);
static __ctype_glSecondaryColor3s __glintercept_fnptr_glSecondaryColor3s;
void __glintercept_glSecondaryColor3s(GLshort red, GLshort green, GLshort blue) {
  __glintercept_fnptr_glSecondaryColor3s(red, green, blue);
  __glintercept_log(" - glSecondaryColor3s(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glSecondaryColor3sEXT)(GLshort, GLshort, GLshort);
static __ctype_glSecondaryColor3sEXT __glintercept_fnptr_glSecondaryColor3sEXT;
void __glintercept_glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue) {
  __glintercept_fnptr_glSecondaryColor3sEXT(red, green, blue);
  __glintercept_log(" - glSecondaryColor3sEXT(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glSecondaryColor3sv)(const GLshort *);
static __ctype_glSecondaryColor3sv __glintercept_fnptr_glSecondaryColor3sv;
void __glintercept_glSecondaryColor3sv(const GLshort * v) {
  __glintercept_fnptr_glSecondaryColor3sv(v);
  __glintercept_log(" - glSecondaryColor3sv(v: %ld)", v);
}

typedef void(*__ctype_glSecondaryColor3svEXT)(const GLshort *);
static __ctype_glSecondaryColor3svEXT __glintercept_fnptr_glSecondaryColor3svEXT;
void __glintercept_glSecondaryColor3svEXT(const GLshort * v) {
  __glintercept_fnptr_glSecondaryColor3svEXT(v);
  __glintercept_log(" - glSecondaryColor3svEXT(v: %ld)", v);
}

typedef void(*__ctype_glSecondaryColor3ub)(GLubyte, GLubyte, GLubyte);
static __ctype_glSecondaryColor3ub __glintercept_fnptr_glSecondaryColor3ub;
void __glintercept_glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue) {
  __glintercept_fnptr_glSecondaryColor3ub(red, green, blue);
  __glintercept_log(" - glSecondaryColor3ub(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glSecondaryColor3ubEXT)(GLubyte, GLubyte, GLubyte);
static __ctype_glSecondaryColor3ubEXT __glintercept_fnptr_glSecondaryColor3ubEXT;
void __glintercept_glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue) {
  __glintercept_fnptr_glSecondaryColor3ubEXT(red, green, blue);
  __glintercept_log(" - glSecondaryColor3ubEXT(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glSecondaryColor3ubv)(const GLubyte *);
static __ctype_glSecondaryColor3ubv __glintercept_fnptr_glSecondaryColor3ubv;
void __glintercept_glSecondaryColor3ubv(const GLubyte * v) {
  __glintercept_fnptr_glSecondaryColor3ubv(v);
  __glintercept_log(" - glSecondaryColor3ubv(v: %s)", v);
}

typedef void(*__ctype_glSecondaryColor3ubvEXT)(const GLubyte *);
static __ctype_glSecondaryColor3ubvEXT __glintercept_fnptr_glSecondaryColor3ubvEXT;
void __glintercept_glSecondaryColor3ubvEXT(const GLubyte * v) {
  __glintercept_fnptr_glSecondaryColor3ubvEXT(v);
  __glintercept_log(" - glSecondaryColor3ubvEXT(v: %s)", v);
}

typedef void(*__ctype_glSecondaryColor3ui)(GLuint, GLuint, GLuint);
static __ctype_glSecondaryColor3ui __glintercept_fnptr_glSecondaryColor3ui;
void __glintercept_glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue) {
  __glintercept_fnptr_glSecondaryColor3ui(red, green, blue);
  __glintercept_log(" - glSecondaryColor3ui(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glSecondaryColor3uiEXT)(GLuint, GLuint, GLuint);
static __ctype_glSecondaryColor3uiEXT __glintercept_fnptr_glSecondaryColor3uiEXT;
void __glintercept_glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue) {
  __glintercept_fnptr_glSecondaryColor3uiEXT(red, green, blue);
  __glintercept_log(" - glSecondaryColor3uiEXT(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glSecondaryColor3uiv)(const GLuint *);
static __ctype_glSecondaryColor3uiv __glintercept_fnptr_glSecondaryColor3uiv;
void __glintercept_glSecondaryColor3uiv(const GLuint * v) {
  __glintercept_fnptr_glSecondaryColor3uiv(v);
  __glintercept_log(" - glSecondaryColor3uiv(v: %ld)", v);
}

typedef void(*__ctype_glSecondaryColor3uivEXT)(const GLuint *);
static __ctype_glSecondaryColor3uivEXT __glintercept_fnptr_glSecondaryColor3uivEXT;
void __glintercept_glSecondaryColor3uivEXT(const GLuint * v) {
  __glintercept_fnptr_glSecondaryColor3uivEXT(v);
  __glintercept_log(" - glSecondaryColor3uivEXT(v: %ld)", v);
}

typedef void(*__ctype_glSecondaryColor3us)(GLushort, GLushort, GLushort);
static __ctype_glSecondaryColor3us __glintercept_fnptr_glSecondaryColor3us;
void __glintercept_glSecondaryColor3us(GLushort red, GLushort green, GLushort blue) {
  __glintercept_fnptr_glSecondaryColor3us(red, green, blue);
  __glintercept_log(" - glSecondaryColor3us(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glSecondaryColor3usEXT)(GLushort, GLushort, GLushort);
static __ctype_glSecondaryColor3usEXT __glintercept_fnptr_glSecondaryColor3usEXT;
void __glintercept_glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue) {
  __glintercept_fnptr_glSecondaryColor3usEXT(red, green, blue);
  __glintercept_log(" - glSecondaryColor3usEXT(red: %ld, green: %ld, blue: %ld)", red, green, blue);
}

typedef void(*__ctype_glSecondaryColor3usv)(const GLushort *);
static __ctype_glSecondaryColor3usv __glintercept_fnptr_glSecondaryColor3usv;
void __glintercept_glSecondaryColor3usv(const GLushort * v) {
  __glintercept_fnptr_glSecondaryColor3usv(v);
  __glintercept_log(" - glSecondaryColor3usv(v: %ld)", v);
}

typedef void(*__ctype_glSecondaryColor3usvEXT)(const GLushort *);
static __ctype_glSecondaryColor3usvEXT __glintercept_fnptr_glSecondaryColor3usvEXT;
void __glintercept_glSecondaryColor3usvEXT(const GLushort * v) {
  __glintercept_fnptr_glSecondaryColor3usvEXT(v);
  __glintercept_log(" - glSecondaryColor3usvEXT(v: %ld)", v);
}

typedef void(*__ctype_glSecondaryColorFormatNV)(GLint, GLenum, GLsizei);
static __ctype_glSecondaryColorFormatNV __glintercept_fnptr_glSecondaryColorFormatNV;
void __glintercept_glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride) {
  __glintercept_fnptr_glSecondaryColorFormatNV(size, type, stride);
  __glintercept_log(" - glSecondaryColorFormatNV(size: %ld, type: %ld (%s), stride: %ld)", size, type, __gl_intercept_formatenum(type), stride);
}

typedef void(*__ctype_glSecondaryColorP3ui)(GLenum, GLuint);
static __ctype_glSecondaryColorP3ui __glintercept_fnptr_glSecondaryColorP3ui;
void __glintercept_glSecondaryColorP3ui(GLenum type, GLuint color) {
  __glintercept_fnptr_glSecondaryColorP3ui(type, color);
  __glintercept_log(" - glSecondaryColorP3ui(type: %ld (%s), color: %ld)", type, __gl_intercept_formatenum(type), color);
}

typedef void(*__ctype_glSecondaryColorP3uiv)(GLenum, const GLuint *);
static __ctype_glSecondaryColorP3uiv __glintercept_fnptr_glSecondaryColorP3uiv;
void __glintercept_glSecondaryColorP3uiv(GLenum type, const GLuint * color) {
  __glintercept_fnptr_glSecondaryColorP3uiv(type, color);
  __glintercept_log(" - glSecondaryColorP3uiv(type: %ld (%s), color: %ld)", type, __gl_intercept_formatenum(type), color);
}

typedef void(*__ctype_glSecondaryColorPointer)(GLint, GLenum, GLsizei, const void *);
static __ctype_glSecondaryColorPointer __glintercept_fnptr_glSecondaryColorPointer;
void __glintercept_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glSecondaryColorPointer(size, type, stride, pointer);
  __glintercept_log(" - glSecondaryColorPointer(size: %ld, type: %ld (%s), stride: %ld, pointer: %ld)", size, type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glSecondaryColorPointerEXT)(GLint, GLenum, GLsizei, const void *);
static __ctype_glSecondaryColorPointerEXT __glintercept_fnptr_glSecondaryColorPointerEXT;
void __glintercept_glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glSecondaryColorPointerEXT(size, type, stride, pointer);
  __glintercept_log(" - glSecondaryColorPointerEXT(size: %ld, type: %ld (%s), stride: %ld, pointer: %ld)", size, type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glSecondaryColorPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
static __ctype_glSecondaryColorPointerListIBM __glintercept_fnptr_glSecondaryColorPointerListIBM;
void __glintercept_glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) {
  __glintercept_fnptr_glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride);
  __glintercept_log(" - glSecondaryColorPointerListIBM(size: %ld, type: %ld (%s), stride: %ld, pointer: %ld, ptrstride: %ld)", size, type, __gl_intercept_formatenum(type), stride, pointer, ptrstride);
}

typedef void(*__ctype_glSelectBuffer)(GLsizei, GLuint *);
static __ctype_glSelectBuffer __glintercept_fnptr_glSelectBuffer;
void __glintercept_glSelectBuffer(GLsizei size, GLuint * buffer) {
  __glintercept_fnptr_glSelectBuffer(size, buffer);
  __glintercept_log(" - glSelectBuffer(size: %ld, buffer: %ld)", size, buffer);
}

typedef void(*__ctype_glSelectPerfMonitorCountersAMD)(GLuint, GLboolean, GLuint, GLint, GLuint *);
static __ctype_glSelectPerfMonitorCountersAMD __glintercept_fnptr_glSelectPerfMonitorCountersAMD;
void __glintercept_glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint * counterList) {
  __glintercept_fnptr_glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList);
  __glintercept_log(" - glSelectPerfMonitorCountersAMD(monitor: %ld, enable: %ld, group: %ld, numCounters: %ld, counterList: %ld)", monitor, enable, group, numCounters, counterList);
}

typedef void(*__ctype_glSemaphoreParameterivNV)(GLuint, GLenum, const GLint *);
static __ctype_glSemaphoreParameterivNV __glintercept_fnptr_glSemaphoreParameterivNV;
void __glintercept_glSemaphoreParameterivNV(GLuint semaphore, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glSemaphoreParameterivNV(semaphore, pname, params);
  __glintercept_log(" - glSemaphoreParameterivNV(semaphore: %ld, pname: %ld (%s), params: %ld)", semaphore, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glSemaphoreParameterui64vEXT)(GLuint, GLenum, const GLuint64 *);
static __ctype_glSemaphoreParameterui64vEXT __glintercept_fnptr_glSemaphoreParameterui64vEXT;
void __glintercept_glSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, const GLuint64 * params) {
  __glintercept_fnptr_glSemaphoreParameterui64vEXT(semaphore, pname, params);
  __glintercept_log(" - glSemaphoreParameterui64vEXT(semaphore: %ld, pname: %ld (%s), params: %ld)", semaphore, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glSeparableFilter2D)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *, const void *);
static __ctype_glSeparableFilter2D __glintercept_fnptr_glSeparableFilter2D;
void __glintercept_glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column) {
  __glintercept_fnptr_glSeparableFilter2D(target, internalformat, width, height, format, type, row, column);
  __glintercept_log(" - glSeparableFilter2D(target: %ld (%s), internalformat: %ld (%s), width: %ld, height: %ld, format: %ld (%s), type: %ld (%s), row: %ld, column: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), width, height, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), row, column);
}

typedef void(*__ctype_glSeparableFilter2DEXT)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *, const void *);
static __ctype_glSeparableFilter2DEXT __glintercept_fnptr_glSeparableFilter2DEXT;
void __glintercept_glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column) {
  __glintercept_fnptr_glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column);
  __glintercept_log(" - glSeparableFilter2DEXT(target: %ld (%s), internalformat: %ld (%s), width: %ld, height: %ld, format: %ld (%s), type: %ld (%s), row: %ld, column: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), width, height, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), row, column);
}

typedef void(*__ctype_glSetFenceAPPLE)(GLuint);
static __ctype_glSetFenceAPPLE __glintercept_fnptr_glSetFenceAPPLE;
void __glintercept_glSetFenceAPPLE(GLuint fence) {
  __glintercept_fnptr_glSetFenceAPPLE(fence);
  __glintercept_log(" - glSetFenceAPPLE(fence: %ld)", fence);
}

typedef void(*__ctype_glSetFenceNV)(GLuint, GLenum);
static __ctype_glSetFenceNV __glintercept_fnptr_glSetFenceNV;
void __glintercept_glSetFenceNV(GLuint fence, GLenum condition) {
  __glintercept_fnptr_glSetFenceNV(fence, condition);
  __glintercept_log(" - glSetFenceNV(fence: %ld, condition: %ld (%s))", fence, condition, __gl_intercept_formatenum(condition));
}

typedef void(*__ctype_glSetFragmentShaderConstantATI)(GLuint, const GLfloat *);
static __ctype_glSetFragmentShaderConstantATI __glintercept_fnptr_glSetFragmentShaderConstantATI;
void __glintercept_glSetFragmentShaderConstantATI(GLuint dst, const GLfloat * value) {
  __glintercept_fnptr_glSetFragmentShaderConstantATI(dst, value);
  __glintercept_log(" - glSetFragmentShaderConstantATI(dst: %ld, value: %ld)", dst, value);
}

typedef void(*__ctype_glSetInvariantEXT)(GLuint, GLenum, const void *);
static __ctype_glSetInvariantEXT __glintercept_fnptr_glSetInvariantEXT;
void __glintercept_glSetInvariantEXT(GLuint id, GLenum type, const void * addr) {
  __glintercept_fnptr_glSetInvariantEXT(id, type, addr);
  __glintercept_log(" - glSetInvariantEXT(id: %ld, type: %ld (%s), addr: %ld)", id, type, __gl_intercept_formatenum(type), addr);
}

typedef void(*__ctype_glSetLocalConstantEXT)(GLuint, GLenum, const void *);
static __ctype_glSetLocalConstantEXT __glintercept_fnptr_glSetLocalConstantEXT;
void __glintercept_glSetLocalConstantEXT(GLuint id, GLenum type, const void * addr) {
  __glintercept_fnptr_glSetLocalConstantEXT(id, type, addr);
  __glintercept_log(" - glSetLocalConstantEXT(id: %ld, type: %ld (%s), addr: %ld)", id, type, __gl_intercept_formatenum(type), addr);
}

typedef void(*__ctype_glSetMultisamplefvAMD)(GLenum, GLuint, const GLfloat *);
static __ctype_glSetMultisamplefvAMD __glintercept_fnptr_glSetMultisamplefvAMD;
void __glintercept_glSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat * val) {
  __glintercept_fnptr_glSetMultisamplefvAMD(pname, index, val);
  __glintercept_log(" - glSetMultisamplefvAMD(pname: %ld (%s), index: %ld, val: %ld)", pname, __gl_intercept_formatenum(pname), index, val);
}

typedef void(*__ctype_glShadeModel)(GLenum);
static __ctype_glShadeModel __glintercept_fnptr_glShadeModel;
void __glintercept_glShadeModel(GLenum mode) {
  __glintercept_fnptr_glShadeModel(mode);
  __glintercept_log(" - glShadeModel(mode: %ld (%s))", mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glShaderBinary)(GLsizei, const GLuint *, GLenum, const void *, GLsizei);
static __ctype_glShaderBinary __glintercept_fnptr_glShaderBinary;
void __glintercept_glShaderBinary(GLsizei count, const GLuint * shaders, GLenum binaryFormat, const void * binary, GLsizei length) {
  __glintercept_fnptr_glShaderBinary(count, shaders, binaryFormat, binary, length);
  __glintercept_log(" - glShaderBinary(count: %ld, shaders: %ld, binaryFormat: %ld (%s), binary: %ld, length: %ld)", count, shaders, binaryFormat, __gl_intercept_formatenum(binaryFormat), binary, length);
}

typedef void(*__ctype_glShaderOp1EXT)(GLenum, GLuint, GLuint);
static __ctype_glShaderOp1EXT __glintercept_fnptr_glShaderOp1EXT;
void __glintercept_glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1) {
  __glintercept_fnptr_glShaderOp1EXT(op, res, arg1);
  __glintercept_log(" - glShaderOp1EXT(op: %ld (%s), res: %ld, arg1: %ld)", op, __gl_intercept_formatenum(op), res, arg1);
}

typedef void(*__ctype_glShaderOp2EXT)(GLenum, GLuint, GLuint, GLuint);
static __ctype_glShaderOp2EXT __glintercept_fnptr_glShaderOp2EXT;
void __glintercept_glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2) {
  __glintercept_fnptr_glShaderOp2EXT(op, res, arg1, arg2);
  __glintercept_log(" - glShaderOp2EXT(op: %ld (%s), res: %ld, arg1: %ld, arg2: %ld)", op, __gl_intercept_formatenum(op), res, arg1, arg2);
}

typedef void(*__ctype_glShaderOp3EXT)(GLenum, GLuint, GLuint, GLuint, GLuint);
static __ctype_glShaderOp3EXT __glintercept_fnptr_glShaderOp3EXT;
void __glintercept_glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3) {
  __glintercept_fnptr_glShaderOp3EXT(op, res, arg1, arg2, arg3);
  __glintercept_log(" - glShaderOp3EXT(op: %ld (%s), res: %ld, arg1: %ld, arg2: %ld, arg3: %ld)", op, __gl_intercept_formatenum(op), res, arg1, arg2, arg3);
}

typedef void(*__ctype_glShaderSource)(GLuint, GLsizei, const GLchar *const*, const GLint *);
static __ctype_glShaderSource __glintercept_fnptr_glShaderSource;
void __glintercept_glShaderSource(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length) {
  __glintercept_fnptr_glShaderSource(shader, count, string, length);
  __glintercept_log(" - glShaderSource(shader: %ld, count: %ld, string: %ld, length: %ld)", shader, count, string, length);
}

typedef void(*__ctype_glShaderSourceARB)(GLhandleARB, GLsizei, const GLcharARB **, const GLint *);
static __ctype_glShaderSourceARB __glintercept_fnptr_glShaderSourceARB;
void __glintercept_glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint * length) {
  __glintercept_fnptr_glShaderSourceARB(shaderObj, count, string, length);
  __glintercept_log(" - glShaderSourceARB(shaderObj: %ld, count: %ld, string: %ld, length: %ld)", shaderObj, count, string, length);
}

typedef void(*__ctype_glShaderStorageBlockBinding)(GLuint, GLuint, GLuint);
static __ctype_glShaderStorageBlockBinding __glintercept_fnptr_glShaderStorageBlockBinding;
void __glintercept_glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) {
  __glintercept_fnptr_glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
  __glintercept_log(" - glShaderStorageBlockBinding(program: %ld, storageBlockIndex: %ld, storageBlockBinding: %ld)", program, storageBlockIndex, storageBlockBinding);
}

typedef void(*__ctype_glShadingRateImageBarrierNV)(GLboolean);
static __ctype_glShadingRateImageBarrierNV __glintercept_fnptr_glShadingRateImageBarrierNV;
void __glintercept_glShadingRateImageBarrierNV(GLboolean synchronize) {
  __glintercept_fnptr_glShadingRateImageBarrierNV(synchronize);
  __glintercept_log(" - glShadingRateImageBarrierNV(synchronize: %ld)", synchronize);
}

typedef void(*__ctype_glShadingRateQCOM)(GLenum);
static __ctype_glShadingRateQCOM __glintercept_fnptr_glShadingRateQCOM;
void __glintercept_glShadingRateQCOM(GLenum rate) {
  __glintercept_fnptr_glShadingRateQCOM(rate);
  __glintercept_log(" - glShadingRateQCOM(rate: %ld (%s))", rate, __gl_intercept_formatenum(rate));
}

typedef void(*__ctype_glShadingRateImagePaletteNV)(GLuint, GLuint, GLsizei, const GLenum *);
static __ctype_glShadingRateImagePaletteNV __glintercept_fnptr_glShadingRateImagePaletteNV;
void __glintercept_glShadingRateImagePaletteNV(GLuint viewport, GLuint first, GLsizei count, const GLenum * rates) {
  __glintercept_fnptr_glShadingRateImagePaletteNV(viewport, first, count, rates);
  __glintercept_log(" - glShadingRateImagePaletteNV(viewport: %ld, first: %ld, count: %ld, rates: %ld)", viewport, first, count, rates);
}

typedef void(*__ctype_glShadingRateSampleOrderNV)(GLenum);
static __ctype_glShadingRateSampleOrderNV __glintercept_fnptr_glShadingRateSampleOrderNV;
void __glintercept_glShadingRateSampleOrderNV(GLenum order) {
  __glintercept_fnptr_glShadingRateSampleOrderNV(order);
  __glintercept_log(" - glShadingRateSampleOrderNV(order: %ld (%s))", order, __gl_intercept_formatenum(order));
}

typedef void(*__ctype_glShadingRateSampleOrderCustomNV)(GLenum, GLuint, const GLint *);
static __ctype_glShadingRateSampleOrderCustomNV __glintercept_fnptr_glShadingRateSampleOrderCustomNV;
void __glintercept_glShadingRateSampleOrderCustomNV(GLenum rate, GLuint samples, const GLint * locations) {
  __glintercept_fnptr_glShadingRateSampleOrderCustomNV(rate, samples, locations);
  __glintercept_log(" - glShadingRateSampleOrderCustomNV(rate: %ld (%s), samples: %ld, locations: %ld)", rate, __gl_intercept_formatenum(rate), samples, locations);
}

typedef void(*__ctype_glSharpenTexFuncSGIS)(GLenum, GLsizei, const GLfloat *);
static __ctype_glSharpenTexFuncSGIS __glintercept_fnptr_glSharpenTexFuncSGIS;
void __glintercept_glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat * points) {
  __glintercept_fnptr_glSharpenTexFuncSGIS(target, n, points);
  __glintercept_log(" - glSharpenTexFuncSGIS(target: %ld (%s), n: %ld, points: %ld)", target, __gl_intercept_formatenum(target), n, points);
}

typedef void(*__ctype_glSignalSemaphoreEXT)(GLuint, GLuint, const GLuint *, GLuint, const GLuint *, const GLenum *);
static __ctype_glSignalSemaphoreEXT __glintercept_fnptr_glSignalSemaphoreEXT;
void __glintercept_glSignalSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint * buffers, GLuint numTextureBarriers, const GLuint * textures, const GLenum * dstLayouts) {
  __glintercept_fnptr_glSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
  __glintercept_log(" - glSignalSemaphoreEXT(semaphore: %ld, numBufferBarriers: %ld, buffers: %ld, numTextureBarriers: %ld, textures: %ld, dstLayouts: %ld)", semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
}

typedef void(*__ctype_glSignalSemaphoreui64NVX)(GLuint, GLsizei, const GLuint *, const GLuint64 *);
static __ctype_glSignalSemaphoreui64NVX __glintercept_fnptr_glSignalSemaphoreui64NVX;
void __glintercept_glSignalSemaphoreui64NVX(GLuint signalGpu, GLsizei fenceObjectCount, const GLuint * semaphoreArray, const GLuint64 * fenceValueArray) {
  __glintercept_fnptr_glSignalSemaphoreui64NVX(signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
  __glintercept_log(" - glSignalSemaphoreui64NVX(signalGpu: %ld, fenceObjectCount: %ld, semaphoreArray: %ld, fenceValueArray: %ld)", signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
}

typedef void(*__ctype_glSpecializeShader)(GLuint, const GLchar *, GLuint, const GLuint *, const GLuint *);
static __ctype_glSpecializeShader __glintercept_fnptr_glSpecializeShader;
void __glintercept_glSpecializeShader(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue) {
  __glintercept_fnptr_glSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
  __glintercept_log(" - glSpecializeShader(shader: %ld, pEntryPoint: %ld, numSpecializationConstants: %ld, pConstantIndex: %ld, pConstantValue: %ld)", shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
}

typedef void(*__ctype_glSpecializeShaderARB)(GLuint, const GLchar *, GLuint, const GLuint *, const GLuint *);
static __ctype_glSpecializeShaderARB __glintercept_fnptr_glSpecializeShaderARB;
void __glintercept_glSpecializeShaderARB(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue) {
  __glintercept_fnptr_glSpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
  __glintercept_log(" - glSpecializeShaderARB(shader: %ld, pEntryPoint: %ld, numSpecializationConstants: %ld, pConstantIndex: %ld, pConstantValue: %ld)", shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
}

typedef void(*__ctype_glSpriteParameterfSGIX)(GLenum, GLfloat);
static __ctype_glSpriteParameterfSGIX __glintercept_fnptr_glSpriteParameterfSGIX;
void __glintercept_glSpriteParameterfSGIX(GLenum pname, GLfloat param) {
  __glintercept_fnptr_glSpriteParameterfSGIX(pname, param);
  __glintercept_log(" - glSpriteParameterfSGIX(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glSpriteParameterfvSGIX)(GLenum, const GLfloat *);
static __ctype_glSpriteParameterfvSGIX __glintercept_fnptr_glSpriteParameterfvSGIX;
void __glintercept_glSpriteParameterfvSGIX(GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glSpriteParameterfvSGIX(pname, params);
  __glintercept_log(" - glSpriteParameterfvSGIX(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glSpriteParameteriSGIX)(GLenum, GLint);
static __ctype_glSpriteParameteriSGIX __glintercept_fnptr_glSpriteParameteriSGIX;
void __glintercept_glSpriteParameteriSGIX(GLenum pname, GLint param) {
  __glintercept_fnptr_glSpriteParameteriSGIX(pname, param);
  __glintercept_log(" - glSpriteParameteriSGIX(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glSpriteParameterivSGIX)(GLenum, const GLint *);
static __ctype_glSpriteParameterivSGIX __glintercept_fnptr_glSpriteParameterivSGIX;
void __glintercept_glSpriteParameterivSGIX(GLenum pname, const GLint * params) {
  __glintercept_fnptr_glSpriteParameterivSGIX(pname, params);
  __glintercept_log(" - glSpriteParameterivSGIX(pname: %ld (%s), params: %ld)", pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glStartInstrumentsSGIX)();
static __ctype_glStartInstrumentsSGIX __glintercept_fnptr_glStartInstrumentsSGIX;
void __glintercept_glStartInstrumentsSGIX() {
  __glintercept_fnptr_glStartInstrumentsSGIX();
  __glintercept_log(" - glStartInstrumentsSGIX()");
}

typedef void(*__ctype_glStartTilingQCOM)(GLuint, GLuint, GLuint, GLuint, GLbitfield);
static __ctype_glStartTilingQCOM __glintercept_fnptr_glStartTilingQCOM;
void __glintercept_glStartTilingQCOM(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask) {
  __glintercept_fnptr_glStartTilingQCOM(x, y, width, height, preserveMask);
  __glintercept_log(" - glStartTilingQCOM(x: %ld, y: %ld, width: %ld, height: %ld, preserveMask: %ld)", x, y, width, height, preserveMask);
}

typedef void(*__ctype_glStateCaptureNV)(GLuint, GLenum);
static __ctype_glStateCaptureNV __glintercept_fnptr_glStateCaptureNV;
void __glintercept_glStateCaptureNV(GLuint state, GLenum mode) {
  __glintercept_fnptr_glStateCaptureNV(state, mode);
  __glintercept_log(" - glStateCaptureNV(state: %ld, mode: %ld (%s))", state, mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glStencilClearTagEXT)(GLsizei, GLuint);
static __ctype_glStencilClearTagEXT __glintercept_fnptr_glStencilClearTagEXT;
void __glintercept_glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag) {
  __glintercept_fnptr_glStencilClearTagEXT(stencilTagBits, stencilClearTag);
  __glintercept_log(" - glStencilClearTagEXT(stencilTagBits: %ld, stencilClearTag: %ld)", stencilTagBits, stencilClearTag);
}

typedef void(*__ctype_glStencilFillPathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLuint, GLenum, const GLfloat *);
static __ctype_glStencilFillPathInstancedNV __glintercept_fnptr_glStencilFillPathInstancedNV;
void __glintercept_glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat * transformValues) {
  __glintercept_fnptr_glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
  __glintercept_log(" - glStencilFillPathInstancedNV(numPaths: %ld, pathNameType: %ld (%s), paths: %ld, pathBase: %ld, fillMode: %ld (%s), mask: %ld, transformType: %ld (%s), transformValues: %ld)", numPaths, pathNameType, __gl_intercept_formatenum(pathNameType), paths, pathBase, fillMode, __gl_intercept_formatenum(fillMode), mask, transformType, __gl_intercept_formatenum(transformType), transformValues);
}

typedef void(*__ctype_glStencilFillPathNV)(GLuint, GLenum, GLuint);
static __ctype_glStencilFillPathNV __glintercept_fnptr_glStencilFillPathNV;
void __glintercept_glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask) {
  __glintercept_fnptr_glStencilFillPathNV(path, fillMode, mask);
  __glintercept_log(" - glStencilFillPathNV(path: %ld, fillMode: %ld (%s), mask: %ld)", path, fillMode, __gl_intercept_formatenum(fillMode), mask);
}

typedef void(*__ctype_glStencilFunc)(GLenum, GLint, GLuint);
static __ctype_glStencilFunc __glintercept_fnptr_glStencilFunc;
void __glintercept_glStencilFunc(GLenum func, GLint ref, GLuint mask) {
  __glintercept_fnptr_glStencilFunc(func, ref, mask);
  __glintercept_log(" - glStencilFunc(func: %ld (%s), ref: %ld, mask: %ld)", func, __gl_intercept_formatenum(func), ref, mask);
}

typedef void(*__ctype_glStencilFuncSeparate)(GLenum, GLenum, GLint, GLuint);
static __ctype_glStencilFuncSeparate __glintercept_fnptr_glStencilFuncSeparate;
void __glintercept_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) {
  __glintercept_fnptr_glStencilFuncSeparate(face, func, ref, mask);
  __glintercept_log(" - glStencilFuncSeparate(face: %ld (%s), func: %ld (%s), ref: %ld, mask: %ld)", face, __gl_intercept_formatenum(face), func, __gl_intercept_formatenum(func), ref, mask);
}

typedef void(*__ctype_glStencilFuncSeparateATI)(GLenum, GLenum, GLint, GLuint);
static __ctype_glStencilFuncSeparateATI __glintercept_fnptr_glStencilFuncSeparateATI;
void __glintercept_glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask) {
  __glintercept_fnptr_glStencilFuncSeparateATI(frontfunc, backfunc, ref, mask);
  __glintercept_log(" - glStencilFuncSeparateATI(frontfunc: %ld (%s), backfunc: %ld (%s), ref: %ld, mask: %ld)", frontfunc, __gl_intercept_formatenum(frontfunc), backfunc, __gl_intercept_formatenum(backfunc), ref, mask);
}

typedef void(*__ctype_glStencilMask)(GLuint);
static __ctype_glStencilMask __glintercept_fnptr_glStencilMask;
void __glintercept_glStencilMask(GLuint mask) {
  __glintercept_fnptr_glStencilMask(mask);
  __glintercept_log(" - glStencilMask(mask: %ld)", mask);
}

typedef void(*__ctype_glStencilMaskSeparate)(GLenum, GLuint);
static __ctype_glStencilMaskSeparate __glintercept_fnptr_glStencilMaskSeparate;
void __glintercept_glStencilMaskSeparate(GLenum face, GLuint mask) {
  __glintercept_fnptr_glStencilMaskSeparate(face, mask);
  __glintercept_log(" - glStencilMaskSeparate(face: %ld (%s), mask: %ld)", face, __gl_intercept_formatenum(face), mask);
}

typedef void(*__ctype_glStencilOp)(GLenum, GLenum, GLenum);
static __ctype_glStencilOp __glintercept_fnptr_glStencilOp;
void __glintercept_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass) {
  __glintercept_fnptr_glStencilOp(fail, zfail, zpass);
  __glintercept_log(" - glStencilOp(fail: %ld (%s), zfail: %ld (%s), zpass: %ld (%s))", fail, __gl_intercept_formatenum(fail), zfail, __gl_intercept_formatenum(zfail), zpass, __gl_intercept_formatenum(zpass));
}

typedef void(*__ctype_glStencilOpSeparate)(GLenum, GLenum, GLenum, GLenum);
static __ctype_glStencilOpSeparate __glintercept_fnptr_glStencilOpSeparate;
void __glintercept_glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {
  __glintercept_fnptr_glStencilOpSeparate(face, sfail, dpfail, dppass);
  __glintercept_log(" - glStencilOpSeparate(face: %ld (%s), sfail: %ld (%s), dpfail: %ld (%s), dppass: %ld (%s))", face, __gl_intercept_formatenum(face), sfail, __gl_intercept_formatenum(sfail), dpfail, __gl_intercept_formatenum(dpfail), dppass, __gl_intercept_formatenum(dppass));
}

typedef void(*__ctype_glStencilOpSeparateATI)(GLenum, GLenum, GLenum, GLenum);
static __ctype_glStencilOpSeparateATI __glintercept_fnptr_glStencilOpSeparateATI;
void __glintercept_glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {
  __glintercept_fnptr_glStencilOpSeparateATI(face, sfail, dpfail, dppass);
  __glintercept_log(" - glStencilOpSeparateATI(face: %ld (%s), sfail: %ld (%s), dpfail: %ld (%s), dppass: %ld (%s))", face, __gl_intercept_formatenum(face), sfail, __gl_intercept_formatenum(sfail), dpfail, __gl_intercept_formatenum(dpfail), dppass, __gl_intercept_formatenum(dppass));
}

typedef void(*__ctype_glStencilOpValueAMD)(GLenum, GLuint);
static __ctype_glStencilOpValueAMD __glintercept_fnptr_glStencilOpValueAMD;
void __glintercept_glStencilOpValueAMD(GLenum face, GLuint value) {
  __glintercept_fnptr_glStencilOpValueAMD(face, value);
  __glintercept_log(" - glStencilOpValueAMD(face: %ld (%s), value: %ld)", face, __gl_intercept_formatenum(face), value);
}

typedef void(*__ctype_glStencilStrokePathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLint, GLuint, GLenum, const GLfloat *);
static __ctype_glStencilStrokePathInstancedNV __glintercept_fnptr_glStencilStrokePathInstancedNV;
void __glintercept_glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat * transformValues) {
  __glintercept_fnptr_glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
  __glintercept_log(" - glStencilStrokePathInstancedNV(numPaths: %ld, pathNameType: %ld (%s), paths: %ld, pathBase: %ld, reference: %ld, mask: %ld, transformType: %ld (%s), transformValues: %ld)", numPaths, pathNameType, __gl_intercept_formatenum(pathNameType), paths, pathBase, reference, mask, transformType, __gl_intercept_formatenum(transformType), transformValues);
}

typedef void(*__ctype_glStencilStrokePathNV)(GLuint, GLint, GLuint);
static __ctype_glStencilStrokePathNV __glintercept_fnptr_glStencilStrokePathNV;
void __glintercept_glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask) {
  __glintercept_fnptr_glStencilStrokePathNV(path, reference, mask);
  __glintercept_log(" - glStencilStrokePathNV(path: %ld, reference: %ld, mask: %ld)", path, reference, mask);
}

typedef void(*__ctype_glStencilThenCoverFillPathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLuint, GLenum, GLenum, const GLfloat *);
static __ctype_glStencilThenCoverFillPathInstancedNV __glintercept_fnptr_glStencilThenCoverFillPathInstancedNV;
void __glintercept_glStencilThenCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) {
  __glintercept_fnptr_glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
  __glintercept_log(" - glStencilThenCoverFillPathInstancedNV(numPaths: %ld, pathNameType: %ld (%s), paths: %ld, pathBase: %ld, fillMode: %ld (%s), mask: %ld, coverMode: %ld (%s), transformType: %ld (%s), transformValues: %ld)", numPaths, pathNameType, __gl_intercept_formatenum(pathNameType), paths, pathBase, fillMode, __gl_intercept_formatenum(fillMode), mask, coverMode, __gl_intercept_formatenum(coverMode), transformType, __gl_intercept_formatenum(transformType), transformValues);
}

typedef void(*__ctype_glStencilThenCoverFillPathNV)(GLuint, GLenum, GLuint, GLenum);
static __ctype_glStencilThenCoverFillPathNV __glintercept_fnptr_glStencilThenCoverFillPathNV;
void __glintercept_glStencilThenCoverFillPathNV(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) {
  __glintercept_fnptr_glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode);
  __glintercept_log(" - glStencilThenCoverFillPathNV(path: %ld, fillMode: %ld (%s), mask: %ld, coverMode: %ld (%s))", path, fillMode, __gl_intercept_formatenum(fillMode), mask, coverMode, __gl_intercept_formatenum(coverMode));
}

typedef void(*__ctype_glStencilThenCoverStrokePathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLint, GLuint, GLenum, GLenum, const GLfloat *);
static __ctype_glStencilThenCoverStrokePathInstancedNV __glintercept_fnptr_glStencilThenCoverStrokePathInstancedNV;
void __glintercept_glStencilThenCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) {
  __glintercept_fnptr_glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
  __glintercept_log(" - glStencilThenCoverStrokePathInstancedNV(numPaths: %ld, pathNameType: %ld (%s), paths: %ld, pathBase: %ld, reference: %ld, mask: %ld, coverMode: %ld (%s), transformType: %ld (%s), transformValues: %ld)", numPaths, pathNameType, __gl_intercept_formatenum(pathNameType), paths, pathBase, reference, mask, coverMode, __gl_intercept_formatenum(coverMode), transformType, __gl_intercept_formatenum(transformType), transformValues);
}

typedef void(*__ctype_glStencilThenCoverStrokePathNV)(GLuint, GLint, GLuint, GLenum);
static __ctype_glStencilThenCoverStrokePathNV __glintercept_fnptr_glStencilThenCoverStrokePathNV;
void __glintercept_glStencilThenCoverStrokePathNV(GLuint path, GLint reference, GLuint mask, GLenum coverMode) {
  __glintercept_fnptr_glStencilThenCoverStrokePathNV(path, reference, mask, coverMode);
  __glintercept_log(" - glStencilThenCoverStrokePathNV(path: %ld, reference: %ld, mask: %ld, coverMode: %ld (%s))", path, reference, mask, coverMode, __gl_intercept_formatenum(coverMode));
}

typedef void(*__ctype_glStopInstrumentsSGIX)(GLint);
static __ctype_glStopInstrumentsSGIX __glintercept_fnptr_glStopInstrumentsSGIX;
void __glintercept_glStopInstrumentsSGIX(GLint marker) {
  __glintercept_fnptr_glStopInstrumentsSGIX(marker);
  __glintercept_log(" - glStopInstrumentsSGIX(marker: %ld)", marker);
}

typedef void(*__ctype_glStringMarkerGREMEDY)(GLsizei, const void *);
static __ctype_glStringMarkerGREMEDY __glintercept_fnptr_glStringMarkerGREMEDY;
void __glintercept_glStringMarkerGREMEDY(GLsizei len, const void * string) {
  __glintercept_fnptr_glStringMarkerGREMEDY(len, string);
  __glintercept_log(" - glStringMarkerGREMEDY(len: %ld, string: %ld)", len, string);
}

typedef void(*__ctype_glSubpixelPrecisionBiasNV)(GLuint, GLuint);
static __ctype_glSubpixelPrecisionBiasNV __glintercept_fnptr_glSubpixelPrecisionBiasNV;
void __glintercept_glSubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits) {
  __glintercept_fnptr_glSubpixelPrecisionBiasNV(xbits, ybits);
  __glintercept_log(" - glSubpixelPrecisionBiasNV(xbits: %ld, ybits: %ld)", xbits, ybits);
}

typedef void(*__ctype_glSwizzleEXT)(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);
static __ctype_glSwizzleEXT __glintercept_fnptr_glSwizzleEXT;
void __glintercept_glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) {
  __glintercept_fnptr_glSwizzleEXT(res, in, outX, outY, outZ, outW);
  __glintercept_log(" - glSwizzleEXT(res: %ld, in: %ld, outX: %ld (%s), outY: %ld (%s), outZ: %ld (%s), outW: %ld (%s))", res, in, outX, __gl_intercept_formatenum(outX), outY, __gl_intercept_formatenum(outY), outZ, __gl_intercept_formatenum(outZ), outW, __gl_intercept_formatenum(outW));
}

typedef void(*__ctype_glSyncTextureINTEL)(GLuint);
static __ctype_glSyncTextureINTEL __glintercept_fnptr_glSyncTextureINTEL;
void __glintercept_glSyncTextureINTEL(GLuint texture) {
  __glintercept_fnptr_glSyncTextureINTEL(texture);
  __glintercept_log(" - glSyncTextureINTEL(texture: %ld)", texture);
}

typedef void(*__ctype_glTagSampleBufferSGIX)();
static __ctype_glTagSampleBufferSGIX __glintercept_fnptr_glTagSampleBufferSGIX;
void __glintercept_glTagSampleBufferSGIX() {
  __glintercept_fnptr_glTagSampleBufferSGIX();
  __glintercept_log(" - glTagSampleBufferSGIX()");
}

typedef void(*__ctype_glTangent3bEXT)(GLbyte, GLbyte, GLbyte);
static __ctype_glTangent3bEXT __glintercept_fnptr_glTangent3bEXT;
void __glintercept_glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz) {
  __glintercept_fnptr_glTangent3bEXT(tx, ty, tz);
  __glintercept_log(" - glTangent3bEXT(tx: %ld, ty: %ld, tz: %ld)", tx, ty, tz);
}

typedef void(*__ctype_glTangent3bvEXT)(const GLbyte *);
static __ctype_glTangent3bvEXT __glintercept_fnptr_glTangent3bvEXT;
void __glintercept_glTangent3bvEXT(const GLbyte * v) {
  __glintercept_fnptr_glTangent3bvEXT(v);
  __glintercept_log(" - glTangent3bvEXT(v: %ld)", v);
}

typedef void(*__ctype_glTangent3dEXT)(GLdouble, GLdouble, GLdouble);
static __ctype_glTangent3dEXT __glintercept_fnptr_glTangent3dEXT;
void __glintercept_glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz) {
  __glintercept_fnptr_glTangent3dEXT(tx, ty, tz);
  __glintercept_log(" - glTangent3dEXT(tx: %ld, ty: %ld, tz: %ld)", tx, ty, tz);
}

typedef void(*__ctype_glTangent3dvEXT)(const GLdouble *);
static __ctype_glTangent3dvEXT __glintercept_fnptr_glTangent3dvEXT;
void __glintercept_glTangent3dvEXT(const GLdouble * v) {
  __glintercept_fnptr_glTangent3dvEXT(v);
  __glintercept_log(" - glTangent3dvEXT(v: %ld)", v);
}

typedef void(*__ctype_glTangent3fEXT)(GLfloat, GLfloat, GLfloat);
static __ctype_glTangent3fEXT __glintercept_fnptr_glTangent3fEXT;
void __glintercept_glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz) {
  __glintercept_fnptr_glTangent3fEXT(tx, ty, tz);
  __glintercept_log(" - glTangent3fEXT(tx: %ld, ty: %ld, tz: %ld)", tx, ty, tz);
}

typedef void(*__ctype_glTangent3fvEXT)(const GLfloat *);
static __ctype_glTangent3fvEXT __glintercept_fnptr_glTangent3fvEXT;
void __glintercept_glTangent3fvEXT(const GLfloat * v) {
  __glintercept_fnptr_glTangent3fvEXT(v);
  __glintercept_log(" - glTangent3fvEXT(v: %ld)", v);
}

typedef void(*__ctype_glTangent3iEXT)(GLint, GLint, GLint);
static __ctype_glTangent3iEXT __glintercept_fnptr_glTangent3iEXT;
void __glintercept_glTangent3iEXT(GLint tx, GLint ty, GLint tz) {
  __glintercept_fnptr_glTangent3iEXT(tx, ty, tz);
  __glintercept_log(" - glTangent3iEXT(tx: %ld, ty: %ld, tz: %ld)", tx, ty, tz);
}

typedef void(*__ctype_glTangent3ivEXT)(const GLint *);
static __ctype_glTangent3ivEXT __glintercept_fnptr_glTangent3ivEXT;
void __glintercept_glTangent3ivEXT(const GLint * v) {
  __glintercept_fnptr_glTangent3ivEXT(v);
  __glintercept_log(" - glTangent3ivEXT(v: %ld)", v);
}

typedef void(*__ctype_glTangent3sEXT)(GLshort, GLshort, GLshort);
static __ctype_glTangent3sEXT __glintercept_fnptr_glTangent3sEXT;
void __glintercept_glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz) {
  __glintercept_fnptr_glTangent3sEXT(tx, ty, tz);
  __glintercept_log(" - glTangent3sEXT(tx: %ld, ty: %ld, tz: %ld)", tx, ty, tz);
}

typedef void(*__ctype_glTangent3svEXT)(const GLshort *);
static __ctype_glTangent3svEXT __glintercept_fnptr_glTangent3svEXT;
void __glintercept_glTangent3svEXT(const GLshort * v) {
  __glintercept_fnptr_glTangent3svEXT(v);
  __glintercept_log(" - glTangent3svEXT(v: %ld)", v);
}

typedef void(*__ctype_glTangentPointerEXT)(GLenum, GLsizei, const void *);
static __ctype_glTangentPointerEXT __glintercept_fnptr_glTangentPointerEXT;
void __glintercept_glTangentPointerEXT(GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glTangentPointerEXT(type, stride, pointer);
  __glintercept_log(" - glTangentPointerEXT(type: %ld (%s), stride: %ld, pointer: %ld)", type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glTbufferMask3DFX)(GLuint);
static __ctype_glTbufferMask3DFX __glintercept_fnptr_glTbufferMask3DFX;
void __glintercept_glTbufferMask3DFX(GLuint mask) {
  __glintercept_fnptr_glTbufferMask3DFX(mask);
  __glintercept_log(" - glTbufferMask3DFX(mask: %ld)", mask);
}

typedef void(*__ctype_glTessellationFactorAMD)(GLfloat);
static __ctype_glTessellationFactorAMD __glintercept_fnptr_glTessellationFactorAMD;
void __glintercept_glTessellationFactorAMD(GLfloat factor) {
  __glintercept_fnptr_glTessellationFactorAMD(factor);
  __glintercept_log(" - glTessellationFactorAMD(factor: %ld)", factor);
}

typedef void(*__ctype_glTessellationModeAMD)(GLenum);
static __ctype_glTessellationModeAMD __glintercept_fnptr_glTessellationModeAMD;
void __glintercept_glTessellationModeAMD(GLenum mode) {
  __glintercept_fnptr_glTessellationModeAMD(mode);
  __glintercept_log(" - glTessellationModeAMD(mode: %ld (%s))", mode, __gl_intercept_formatenum(mode));
}

typedef GLboolean(*__ctype_glTestFenceAPPLE)(GLuint);
static __ctype_glTestFenceAPPLE __glintercept_fnptr_glTestFenceAPPLE;
GLboolean __glintercept_glTestFenceAPPLE(GLuint fence) {
  GLboolean __ret = __glintercept_fnptr_glTestFenceAPPLE(fence);
  __glintercept_log(" - glTestFenceAPPLE(fence: %ld) -> %ld", fence, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glTestFenceNV)(GLuint);
static __ctype_glTestFenceNV __glintercept_fnptr_glTestFenceNV;
GLboolean __glintercept_glTestFenceNV(GLuint fence) {
  GLboolean __ret = __glintercept_fnptr_glTestFenceNV(fence);
  __glintercept_log(" - glTestFenceNV(fence: %ld) -> %ld", fence, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glTestObjectAPPLE)(GLenum, GLuint);
static __ctype_glTestObjectAPPLE __glintercept_fnptr_glTestObjectAPPLE;
GLboolean __glintercept_glTestObjectAPPLE(GLenum object, GLuint name) {
  GLboolean __ret = __glintercept_fnptr_glTestObjectAPPLE(object, name);
  __glintercept_log(" - glTestObjectAPPLE(object: %ld (%s), name: %ld) -> %ld", object, __gl_intercept_formatenum(object), name, __ret);
  return __ret;
}

typedef void(*__ctype_glTexAttachMemoryNV)(GLenum, GLuint, GLuint64);
static __ctype_glTexAttachMemoryNV __glintercept_fnptr_glTexAttachMemoryNV;
void __glintercept_glTexAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset) {
  __glintercept_fnptr_glTexAttachMemoryNV(target, memory, offset);
  __glintercept_log(" - glTexAttachMemoryNV(target: %ld (%s), memory: %ld, offset: %ld)", target, __gl_intercept_formatenum(target), memory, offset);
}

typedef void(*__ctype_glTexBuffer)(GLenum, GLenum, GLuint);
static __ctype_glTexBuffer __glintercept_fnptr_glTexBuffer;
void __glintercept_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer) {
  __glintercept_fnptr_glTexBuffer(target, internalformat, buffer);
  __glintercept_log(" - glTexBuffer(target: %ld (%s), internalformat: %ld (%s), buffer: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), buffer);
}

typedef void(*__ctype_glTexBufferARB)(GLenum, GLenum, GLuint);
static __ctype_glTexBufferARB __glintercept_fnptr_glTexBufferARB;
void __glintercept_glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer) {
  __glintercept_fnptr_glTexBufferARB(target, internalformat, buffer);
  __glintercept_log(" - glTexBufferARB(target: %ld (%s), internalformat: %ld (%s), buffer: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), buffer);
}

typedef void(*__ctype_glTexBufferEXT)(GLenum, GLenum, GLuint);
static __ctype_glTexBufferEXT __glintercept_fnptr_glTexBufferEXT;
void __glintercept_glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer) {
  __glintercept_fnptr_glTexBufferEXT(target, internalformat, buffer);
  __glintercept_log(" - glTexBufferEXT(target: %ld (%s), internalformat: %ld (%s), buffer: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), buffer);
}

typedef void(*__ctype_glTexBufferOES)(GLenum, GLenum, GLuint);
static __ctype_glTexBufferOES __glintercept_fnptr_glTexBufferOES;
void __glintercept_glTexBufferOES(GLenum target, GLenum internalformat, GLuint buffer) {
  __glintercept_fnptr_glTexBufferOES(target, internalformat, buffer);
  __glintercept_log(" - glTexBufferOES(target: %ld (%s), internalformat: %ld (%s), buffer: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), buffer);
}

typedef void(*__ctype_glTexBufferRange)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
static __ctype_glTexBufferRange __glintercept_fnptr_glTexBufferRange;
void __glintercept_glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  __glintercept_fnptr_glTexBufferRange(target, internalformat, buffer, offset, size);
  __glintercept_log(" - glTexBufferRange(target: %ld (%s), internalformat: %ld (%s), buffer: %ld, offset: %ld, size: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), buffer, offset, size);
}

typedef void(*__ctype_glTexBufferRangeEXT)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
static __ctype_glTexBufferRangeEXT __glintercept_fnptr_glTexBufferRangeEXT;
void __glintercept_glTexBufferRangeEXT(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  __glintercept_fnptr_glTexBufferRangeEXT(target, internalformat, buffer, offset, size);
  __glintercept_log(" - glTexBufferRangeEXT(target: %ld (%s), internalformat: %ld (%s), buffer: %ld, offset: %ld, size: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), buffer, offset, size);
}

typedef void(*__ctype_glTexBufferRangeOES)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
static __ctype_glTexBufferRangeOES __glintercept_fnptr_glTexBufferRangeOES;
void __glintercept_glTexBufferRangeOES(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  __glintercept_fnptr_glTexBufferRangeOES(target, internalformat, buffer, offset, size);
  __glintercept_log(" - glTexBufferRangeOES(target: %ld (%s), internalformat: %ld (%s), buffer: %ld, offset: %ld, size: %ld)", target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), buffer, offset, size);
}

typedef void(*__ctype_glTexBumpParameterfvATI)(GLenum, const GLfloat *);
static __ctype_glTexBumpParameterfvATI __glintercept_fnptr_glTexBumpParameterfvATI;
void __glintercept_glTexBumpParameterfvATI(GLenum pname, const GLfloat * param) {
  __glintercept_fnptr_glTexBumpParameterfvATI(pname, param);
  __glintercept_log(" - glTexBumpParameterfvATI(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glTexBumpParameterivATI)(GLenum, const GLint *);
static __ctype_glTexBumpParameterivATI __glintercept_fnptr_glTexBumpParameterivATI;
void __glintercept_glTexBumpParameterivATI(GLenum pname, const GLint * param) {
  __glintercept_fnptr_glTexBumpParameterivATI(pname, param);
  __glintercept_log(" - glTexBumpParameterivATI(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glTexCoord1bOES)(GLbyte);
static __ctype_glTexCoord1bOES __glintercept_fnptr_glTexCoord1bOES;
void __glintercept_glTexCoord1bOES(GLbyte s) {
  __glintercept_fnptr_glTexCoord1bOES(s);
  __glintercept_log(" - glTexCoord1bOES(s: %ld)", s);
}

typedef void(*__ctype_glTexCoord1bvOES)(const GLbyte *);
static __ctype_glTexCoord1bvOES __glintercept_fnptr_glTexCoord1bvOES;
void __glintercept_glTexCoord1bvOES(const GLbyte * coords) {
  __glintercept_fnptr_glTexCoord1bvOES(coords);
  __glintercept_log(" - glTexCoord1bvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glTexCoord1d)(GLdouble);
static __ctype_glTexCoord1d __glintercept_fnptr_glTexCoord1d;
void __glintercept_glTexCoord1d(GLdouble s) {
  __glintercept_fnptr_glTexCoord1d(s);
  __glintercept_log(" - glTexCoord1d(s: %ld)", s);
}

typedef void(*__ctype_glTexCoord1dv)(const GLdouble *);
static __ctype_glTexCoord1dv __glintercept_fnptr_glTexCoord1dv;
void __glintercept_glTexCoord1dv(const GLdouble * v) {
  __glintercept_fnptr_glTexCoord1dv(v);
  __glintercept_log(" - glTexCoord1dv(v: %ld)", v);
}

typedef void(*__ctype_glTexCoord1f)(GLfloat);
static __ctype_glTexCoord1f __glintercept_fnptr_glTexCoord1f;
void __glintercept_glTexCoord1f(GLfloat s) {
  __glintercept_fnptr_glTexCoord1f(s);
  __glintercept_log(" - glTexCoord1f(s: %ld)", s);
}

typedef void(*__ctype_glTexCoord1fv)(const GLfloat *);
static __ctype_glTexCoord1fv __glintercept_fnptr_glTexCoord1fv;
void __glintercept_glTexCoord1fv(const GLfloat * v) {
  __glintercept_fnptr_glTexCoord1fv(v);
  __glintercept_log(" - glTexCoord1fv(v: %ld)", v);
}

typedef void(*__ctype_glTexCoord1hNV)(GLhalfNV);
static __ctype_glTexCoord1hNV __glintercept_fnptr_glTexCoord1hNV;
void __glintercept_glTexCoord1hNV(GLhalfNV s) {
  __glintercept_fnptr_glTexCoord1hNV(s);
  __glintercept_log(" - glTexCoord1hNV(s: %ld)", s);
}

typedef void(*__ctype_glTexCoord1hvNV)(const GLhalfNV *);
static __ctype_glTexCoord1hvNV __glintercept_fnptr_glTexCoord1hvNV;
void __glintercept_glTexCoord1hvNV(const GLhalfNV * v) {
  __glintercept_fnptr_glTexCoord1hvNV(v);
  __glintercept_log(" - glTexCoord1hvNV(v: %ld)", v);
}

typedef void(*__ctype_glTexCoord1i)(GLint);
static __ctype_glTexCoord1i __glintercept_fnptr_glTexCoord1i;
void __glintercept_glTexCoord1i(GLint s) {
  __glintercept_fnptr_glTexCoord1i(s);
  __glintercept_log(" - glTexCoord1i(s: %ld)", s);
}

typedef void(*__ctype_glTexCoord1iv)(const GLint *);
static __ctype_glTexCoord1iv __glintercept_fnptr_glTexCoord1iv;
void __glintercept_glTexCoord1iv(const GLint * v) {
  __glintercept_fnptr_glTexCoord1iv(v);
  __glintercept_log(" - glTexCoord1iv(v: %ld)", v);
}

typedef void(*__ctype_glTexCoord1s)(GLshort);
static __ctype_glTexCoord1s __glintercept_fnptr_glTexCoord1s;
void __glintercept_glTexCoord1s(GLshort s) {
  __glintercept_fnptr_glTexCoord1s(s);
  __glintercept_log(" - glTexCoord1s(s: %ld)", s);
}

typedef void(*__ctype_glTexCoord1sv)(const GLshort *);
static __ctype_glTexCoord1sv __glintercept_fnptr_glTexCoord1sv;
void __glintercept_glTexCoord1sv(const GLshort * v) {
  __glintercept_fnptr_glTexCoord1sv(v);
  __glintercept_log(" - glTexCoord1sv(v: %ld)", v);
}

typedef void(*__ctype_glTexCoord1xOES)(GLfixed);
static __ctype_glTexCoord1xOES __glintercept_fnptr_glTexCoord1xOES;
void __glintercept_glTexCoord1xOES(GLfixed s) {
  __glintercept_fnptr_glTexCoord1xOES(s);
  __glintercept_log(" - glTexCoord1xOES(s: %ld)", s);
}

typedef void(*__ctype_glTexCoord1xvOES)(const GLfixed *);
static __ctype_glTexCoord1xvOES __glintercept_fnptr_glTexCoord1xvOES;
void __glintercept_glTexCoord1xvOES(const GLfixed * coords) {
  __glintercept_fnptr_glTexCoord1xvOES(coords);
  __glintercept_log(" - glTexCoord1xvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glTexCoord2bOES)(GLbyte, GLbyte);
static __ctype_glTexCoord2bOES __glintercept_fnptr_glTexCoord2bOES;
void __glintercept_glTexCoord2bOES(GLbyte s, GLbyte t) {
  __glintercept_fnptr_glTexCoord2bOES(s, t);
  __glintercept_log(" - glTexCoord2bOES(s: %ld, t: %ld)", s, t);
}

typedef void(*__ctype_glTexCoord2bvOES)(const GLbyte *);
static __ctype_glTexCoord2bvOES __glintercept_fnptr_glTexCoord2bvOES;
void __glintercept_glTexCoord2bvOES(const GLbyte * coords) {
  __glintercept_fnptr_glTexCoord2bvOES(coords);
  __glintercept_log(" - glTexCoord2bvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glTexCoord2d)(GLdouble, GLdouble);
static __ctype_glTexCoord2d __glintercept_fnptr_glTexCoord2d;
void __glintercept_glTexCoord2d(GLdouble s, GLdouble t) {
  __glintercept_fnptr_glTexCoord2d(s, t);
  __glintercept_log(" - glTexCoord2d(s: %ld, t: %ld)", s, t);
}

typedef void(*__ctype_glTexCoord2dv)(const GLdouble *);
static __ctype_glTexCoord2dv __glintercept_fnptr_glTexCoord2dv;
void __glintercept_glTexCoord2dv(const GLdouble * v) {
  __glintercept_fnptr_glTexCoord2dv(v);
  __glintercept_log(" - glTexCoord2dv(v: %ld)", v);
}

typedef void(*__ctype_glTexCoord2f)(GLfloat, GLfloat);
static __ctype_glTexCoord2f __glintercept_fnptr_glTexCoord2f;
void __glintercept_glTexCoord2f(GLfloat s, GLfloat t) {
  __glintercept_fnptr_glTexCoord2f(s, t);
  __glintercept_log(" - glTexCoord2f(s: %ld, t: %ld)", s, t);
}

typedef void(*__ctype_glTexCoord2fColor3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glTexCoord2fColor3fVertex3fSUN __glintercept_fnptr_glTexCoord2fColor3fVertex3fSUN;
void __glintercept_glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z);
  __glintercept_log(" - glTexCoord2fColor3fVertex3fSUN(s: %ld, t: %ld, r: %ld, g: %ld, b: %ld, x: %ld, y: %ld, z: %ld)", s, t, r, g, b, x, y, z);
}

typedef void(*__ctype_glTexCoord2fColor3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *);
static __ctype_glTexCoord2fColor3fVertex3fvSUN __glintercept_fnptr_glTexCoord2fColor3fVertex3fvSUN;
void __glintercept_glTexCoord2fColor3fVertex3fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * v) {
  __glintercept_fnptr_glTexCoord2fColor3fVertex3fvSUN(tc, c, v);
  __glintercept_log(" - glTexCoord2fColor3fVertex3fvSUN(tc: %ld, c: %ld, v: %ld)", tc, c, v);
}

typedef void(*__ctype_glTexCoord2fColor4fNormal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glTexCoord2fColor4fNormal3fVertex3fSUN __glintercept_fnptr_glTexCoord2fColor4fNormal3fVertex3fSUN;
void __glintercept_glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z);
  __glintercept_log(" - glTexCoord2fColor4fNormal3fVertex3fSUN(s: %ld, t: %ld, r: %ld, g: %ld, b: %ld, a: %ld, nx: %ld, ny: %ld, nz: %ld, x: %ld, y: %ld, z: %ld)", s, t, r, g, b, a, nx, ny, nz, x, y, z);
}

typedef void(*__ctype_glTexCoord2fColor4fNormal3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
static __ctype_glTexCoord2fColor4fNormal3fVertex3fvSUN __glintercept_fnptr_glTexCoord2fColor4fNormal3fVertex3fvSUN;
void __glintercept_glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) {
  __glintercept_fnptr_glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v);
  __glintercept_log(" - glTexCoord2fColor4fNormal3fVertex3fvSUN(tc: %ld, c: %ld, n: %ld, v: %ld)", tc, c, n, v);
}

typedef void(*__ctype_glTexCoord2fColor4ubVertex3fSUN)(GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
static __ctype_glTexCoord2fColor4ubVertex3fSUN __glintercept_fnptr_glTexCoord2fColor4ubVertex3fSUN;
void __glintercept_glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z);
  __glintercept_log(" - glTexCoord2fColor4ubVertex3fSUN(s: %ld, t: %ld, r: %ld, g: %ld, b: %ld, a: %ld, x: %ld, y: %ld, z: %ld)", s, t, r, g, b, a, x, y, z);
}

typedef void(*__ctype_glTexCoord2fColor4ubVertex3fvSUN)(const GLfloat *, const GLubyte *, const GLfloat *);
static __ctype_glTexCoord2fColor4ubVertex3fvSUN __glintercept_fnptr_glTexCoord2fColor4ubVertex3fvSUN;
void __glintercept_glTexCoord2fColor4ubVertex3fvSUN(const GLfloat * tc, const GLubyte * c, const GLfloat * v) {
  __glintercept_fnptr_glTexCoord2fColor4ubVertex3fvSUN(tc, c, v);
  __glintercept_log(" - glTexCoord2fColor4ubVertex3fvSUN(tc: %ld, c: %s, v: %ld)", tc, c, v);
}

typedef void(*__ctype_glTexCoord2fNormal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glTexCoord2fNormal3fVertex3fSUN __glintercept_fnptr_glTexCoord2fNormal3fVertex3fSUN;
void __glintercept_glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z);
  __glintercept_log(" - glTexCoord2fNormal3fVertex3fSUN(s: %ld, t: %ld, nx: %ld, ny: %ld, nz: %ld, x: %ld, y: %ld, z: %ld)", s, t, nx, ny, nz, x, y, z);
}

typedef void(*__ctype_glTexCoord2fNormal3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *);
static __ctype_glTexCoord2fNormal3fVertex3fvSUN __glintercept_fnptr_glTexCoord2fNormal3fVertex3fvSUN;
void __glintercept_glTexCoord2fNormal3fVertex3fvSUN(const GLfloat * tc, const GLfloat * n, const GLfloat * v) {
  __glintercept_fnptr_glTexCoord2fNormal3fVertex3fvSUN(tc, n, v);
  __glintercept_log(" - glTexCoord2fNormal3fVertex3fvSUN(tc: %ld, n: %ld, v: %ld)", tc, n, v);
}

typedef void(*__ctype_glTexCoord2fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glTexCoord2fVertex3fSUN __glintercept_fnptr_glTexCoord2fVertex3fSUN;
void __glintercept_glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glTexCoord2fVertex3fSUN(s, t, x, y, z);
  __glintercept_log(" - glTexCoord2fVertex3fSUN(s: %ld, t: %ld, x: %ld, y: %ld, z: %ld)", s, t, x, y, z);
}

typedef void(*__ctype_glTexCoord2fVertex3fvSUN)(const GLfloat *, const GLfloat *);
static __ctype_glTexCoord2fVertex3fvSUN __glintercept_fnptr_glTexCoord2fVertex3fvSUN;
void __glintercept_glTexCoord2fVertex3fvSUN(const GLfloat * tc, const GLfloat * v) {
  __glintercept_fnptr_glTexCoord2fVertex3fvSUN(tc, v);
  __glintercept_log(" - glTexCoord2fVertex3fvSUN(tc: %ld, v: %ld)", tc, v);
}

typedef void(*__ctype_glTexCoord2fv)(const GLfloat *);
static __ctype_glTexCoord2fv __glintercept_fnptr_glTexCoord2fv;
void __glintercept_glTexCoord2fv(const GLfloat * v) {
  __glintercept_fnptr_glTexCoord2fv(v);
  __glintercept_log(" - glTexCoord2fv(v: %ld)", v);
}

typedef void(*__ctype_glTexCoord2hNV)(GLhalfNV, GLhalfNV);
static __ctype_glTexCoord2hNV __glintercept_fnptr_glTexCoord2hNV;
void __glintercept_glTexCoord2hNV(GLhalfNV s, GLhalfNV t) {
  __glintercept_fnptr_glTexCoord2hNV(s, t);
  __glintercept_log(" - glTexCoord2hNV(s: %ld, t: %ld)", s, t);
}

typedef void(*__ctype_glTexCoord2hvNV)(const GLhalfNV *);
static __ctype_glTexCoord2hvNV __glintercept_fnptr_glTexCoord2hvNV;
void __glintercept_glTexCoord2hvNV(const GLhalfNV * v) {
  __glintercept_fnptr_glTexCoord2hvNV(v);
  __glintercept_log(" - glTexCoord2hvNV(v: %ld)", v);
}

typedef void(*__ctype_glTexCoord2i)(GLint, GLint);
static __ctype_glTexCoord2i __glintercept_fnptr_glTexCoord2i;
void __glintercept_glTexCoord2i(GLint s, GLint t) {
  __glintercept_fnptr_glTexCoord2i(s, t);
  __glintercept_log(" - glTexCoord2i(s: %ld, t: %ld)", s, t);
}

typedef void(*__ctype_glTexCoord2iv)(const GLint *);
static __ctype_glTexCoord2iv __glintercept_fnptr_glTexCoord2iv;
void __glintercept_glTexCoord2iv(const GLint * v) {
  __glintercept_fnptr_glTexCoord2iv(v);
  __glintercept_log(" - glTexCoord2iv(v: %ld)", v);
}

typedef void(*__ctype_glTexCoord2s)(GLshort, GLshort);
static __ctype_glTexCoord2s __glintercept_fnptr_glTexCoord2s;
void __glintercept_glTexCoord2s(GLshort s, GLshort t) {
  __glintercept_fnptr_glTexCoord2s(s, t);
  __glintercept_log(" - glTexCoord2s(s: %ld, t: %ld)", s, t);
}

typedef void(*__ctype_glTexCoord2sv)(const GLshort *);
static __ctype_glTexCoord2sv __glintercept_fnptr_glTexCoord2sv;
void __glintercept_glTexCoord2sv(const GLshort * v) {
  __glintercept_fnptr_glTexCoord2sv(v);
  __glintercept_log(" - glTexCoord2sv(v: %ld)", v);
}

typedef void(*__ctype_glTexCoord2xOES)(GLfixed, GLfixed);
static __ctype_glTexCoord2xOES __glintercept_fnptr_glTexCoord2xOES;
void __glintercept_glTexCoord2xOES(GLfixed s, GLfixed t) {
  __glintercept_fnptr_glTexCoord2xOES(s, t);
  __glintercept_log(" - glTexCoord2xOES(s: %ld, t: %ld)", s, t);
}

typedef void(*__ctype_glTexCoord2xvOES)(const GLfixed *);
static __ctype_glTexCoord2xvOES __glintercept_fnptr_glTexCoord2xvOES;
void __glintercept_glTexCoord2xvOES(const GLfixed * coords) {
  __glintercept_fnptr_glTexCoord2xvOES(coords);
  __glintercept_log(" - glTexCoord2xvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glTexCoord3bOES)(GLbyte, GLbyte, GLbyte);
static __ctype_glTexCoord3bOES __glintercept_fnptr_glTexCoord3bOES;
void __glintercept_glTexCoord3bOES(GLbyte s, GLbyte t, GLbyte r) {
  __glintercept_fnptr_glTexCoord3bOES(s, t, r);
  __glintercept_log(" - glTexCoord3bOES(s: %ld, t: %ld, r: %ld)", s, t, r);
}

typedef void(*__ctype_glTexCoord3bvOES)(const GLbyte *);
static __ctype_glTexCoord3bvOES __glintercept_fnptr_glTexCoord3bvOES;
void __glintercept_glTexCoord3bvOES(const GLbyte * coords) {
  __glintercept_fnptr_glTexCoord3bvOES(coords);
  __glintercept_log(" - glTexCoord3bvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glTexCoord3d)(GLdouble, GLdouble, GLdouble);
static __ctype_glTexCoord3d __glintercept_fnptr_glTexCoord3d;
void __glintercept_glTexCoord3d(GLdouble s, GLdouble t, GLdouble r) {
  __glintercept_fnptr_glTexCoord3d(s, t, r);
  __glintercept_log(" - glTexCoord3d(s: %ld, t: %ld, r: %ld)", s, t, r);
}

typedef void(*__ctype_glTexCoord3dv)(const GLdouble *);
static __ctype_glTexCoord3dv __glintercept_fnptr_glTexCoord3dv;
void __glintercept_glTexCoord3dv(const GLdouble * v) {
  __glintercept_fnptr_glTexCoord3dv(v);
  __glintercept_log(" - glTexCoord3dv(v: %ld)", v);
}

typedef void(*__ctype_glTexCoord3f)(GLfloat, GLfloat, GLfloat);
static __ctype_glTexCoord3f __glintercept_fnptr_glTexCoord3f;
void __glintercept_glTexCoord3f(GLfloat s, GLfloat t, GLfloat r) {
  __glintercept_fnptr_glTexCoord3f(s, t, r);
  __glintercept_log(" - glTexCoord3f(s: %ld, t: %ld, r: %ld)", s, t, r);
}

typedef void(*__ctype_glTexCoord3fv)(const GLfloat *);
static __ctype_glTexCoord3fv __glintercept_fnptr_glTexCoord3fv;
void __glintercept_glTexCoord3fv(const GLfloat * v) {
  __glintercept_fnptr_glTexCoord3fv(v);
  __glintercept_log(" - glTexCoord3fv(v: %ld)", v);
}

typedef void(*__ctype_glTexCoord3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
static __ctype_glTexCoord3hNV __glintercept_fnptr_glTexCoord3hNV;
void __glintercept_glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r) {
  __glintercept_fnptr_glTexCoord3hNV(s, t, r);
  __glintercept_log(" - glTexCoord3hNV(s: %ld, t: %ld, r: %ld)", s, t, r);
}

typedef void(*__ctype_glTexCoord3hvNV)(const GLhalfNV *);
static __ctype_glTexCoord3hvNV __glintercept_fnptr_glTexCoord3hvNV;
void __glintercept_glTexCoord3hvNV(const GLhalfNV * v) {
  __glintercept_fnptr_glTexCoord3hvNV(v);
  __glintercept_log(" - glTexCoord3hvNV(v: %ld)", v);
}

typedef void(*__ctype_glTexCoord3i)(GLint, GLint, GLint);
static __ctype_glTexCoord3i __glintercept_fnptr_glTexCoord3i;
void __glintercept_glTexCoord3i(GLint s, GLint t, GLint r) {
  __glintercept_fnptr_glTexCoord3i(s, t, r);
  __glintercept_log(" - glTexCoord3i(s: %ld, t: %ld, r: %ld)", s, t, r);
}

typedef void(*__ctype_glTexCoord3iv)(const GLint *);
static __ctype_glTexCoord3iv __glintercept_fnptr_glTexCoord3iv;
void __glintercept_glTexCoord3iv(const GLint * v) {
  __glintercept_fnptr_glTexCoord3iv(v);
  __glintercept_log(" - glTexCoord3iv(v: %ld)", v);
}

typedef void(*__ctype_glTexCoord3s)(GLshort, GLshort, GLshort);
static __ctype_glTexCoord3s __glintercept_fnptr_glTexCoord3s;
void __glintercept_glTexCoord3s(GLshort s, GLshort t, GLshort r) {
  __glintercept_fnptr_glTexCoord3s(s, t, r);
  __glintercept_log(" - glTexCoord3s(s: %ld, t: %ld, r: %ld)", s, t, r);
}

typedef void(*__ctype_glTexCoord3sv)(const GLshort *);
static __ctype_glTexCoord3sv __glintercept_fnptr_glTexCoord3sv;
void __glintercept_glTexCoord3sv(const GLshort * v) {
  __glintercept_fnptr_glTexCoord3sv(v);
  __glintercept_log(" - glTexCoord3sv(v: %ld)", v);
}

typedef void(*__ctype_glTexCoord3xOES)(GLfixed, GLfixed, GLfixed);
static __ctype_glTexCoord3xOES __glintercept_fnptr_glTexCoord3xOES;
void __glintercept_glTexCoord3xOES(GLfixed s, GLfixed t, GLfixed r) {
  __glintercept_fnptr_glTexCoord3xOES(s, t, r);
  __glintercept_log(" - glTexCoord3xOES(s: %ld, t: %ld, r: %ld)", s, t, r);
}

typedef void(*__ctype_glTexCoord3xvOES)(const GLfixed *);
static __ctype_glTexCoord3xvOES __glintercept_fnptr_glTexCoord3xvOES;
void __glintercept_glTexCoord3xvOES(const GLfixed * coords) {
  __glintercept_fnptr_glTexCoord3xvOES(coords);
  __glintercept_log(" - glTexCoord3xvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glTexCoord4bOES)(GLbyte, GLbyte, GLbyte, GLbyte);
static __ctype_glTexCoord4bOES __glintercept_fnptr_glTexCoord4bOES;
void __glintercept_glTexCoord4bOES(GLbyte s, GLbyte t, GLbyte r, GLbyte q) {
  __glintercept_fnptr_glTexCoord4bOES(s, t, r, q);
  __glintercept_log(" - glTexCoord4bOES(s: %ld, t: %ld, r: %ld, q: %ld)", s, t, r, q);
}

typedef void(*__ctype_glTexCoord4bvOES)(const GLbyte *);
static __ctype_glTexCoord4bvOES __glintercept_fnptr_glTexCoord4bvOES;
void __glintercept_glTexCoord4bvOES(const GLbyte * coords) {
  __glintercept_fnptr_glTexCoord4bvOES(coords);
  __glintercept_log(" - glTexCoord4bvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glTexCoord4d)(GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glTexCoord4d __glintercept_fnptr_glTexCoord4d;
void __glintercept_glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
  __glintercept_fnptr_glTexCoord4d(s, t, r, q);
  __glintercept_log(" - glTexCoord4d(s: %ld, t: %ld, r: %ld, q: %ld)", s, t, r, q);
}

typedef void(*__ctype_glTexCoord4dv)(const GLdouble *);
static __ctype_glTexCoord4dv __glintercept_fnptr_glTexCoord4dv;
void __glintercept_glTexCoord4dv(const GLdouble * v) {
  __glintercept_fnptr_glTexCoord4dv(v);
  __glintercept_log(" - glTexCoord4dv(v: %ld)", v);
}

typedef void(*__ctype_glTexCoord4f)(GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glTexCoord4f __glintercept_fnptr_glTexCoord4f;
void __glintercept_glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
  __glintercept_fnptr_glTexCoord4f(s, t, r, q);
  __glintercept_log(" - glTexCoord4f(s: %ld, t: %ld, r: %ld, q: %ld)", s, t, r, q);
}

typedef void(*__ctype_glTexCoord4fColor4fNormal3fVertex4fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glTexCoord4fColor4fNormal3fVertex4fSUN __glintercept_fnptr_glTexCoord4fColor4fNormal3fVertex4fSUN;
void __glintercept_glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  __glintercept_fnptr_glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
  __glintercept_log(" - glTexCoord4fColor4fNormal3fVertex4fSUN(s: %ld, t: %ld, p: %ld, q: %ld, r: %ld, g: %ld, b: %ld, a: %ld, nx: %ld, ny: %ld, nz: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
}

typedef void(*__ctype_glTexCoord4fColor4fNormal3fVertex4fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
static __ctype_glTexCoord4fColor4fNormal3fVertex4fvSUN __glintercept_fnptr_glTexCoord4fColor4fNormal3fVertex4fvSUN;
void __glintercept_glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) {
  __glintercept_fnptr_glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v);
  __glintercept_log(" - glTexCoord4fColor4fNormal3fVertex4fvSUN(tc: %ld, c: %ld, n: %ld, v: %ld)", tc, c, n, v);
}

typedef void(*__ctype_glTexCoord4fVertex4fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glTexCoord4fVertex4fSUN __glintercept_fnptr_glTexCoord4fVertex4fSUN;
void __glintercept_glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  __glintercept_fnptr_glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w);
  __glintercept_log(" - glTexCoord4fVertex4fSUN(s: %ld, t: %ld, p: %ld, q: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", s, t, p, q, x, y, z, w);
}

typedef void(*__ctype_glTexCoord4fVertex4fvSUN)(const GLfloat *, const GLfloat *);
static __ctype_glTexCoord4fVertex4fvSUN __glintercept_fnptr_glTexCoord4fVertex4fvSUN;
void __glintercept_glTexCoord4fVertex4fvSUN(const GLfloat * tc, const GLfloat * v) {
  __glintercept_fnptr_glTexCoord4fVertex4fvSUN(tc, v);
  __glintercept_log(" - glTexCoord4fVertex4fvSUN(tc: %ld, v: %ld)", tc, v);
}

typedef void(*__ctype_glTexCoord4fv)(const GLfloat *);
static __ctype_glTexCoord4fv __glintercept_fnptr_glTexCoord4fv;
void __glintercept_glTexCoord4fv(const GLfloat * v) {
  __glintercept_fnptr_glTexCoord4fv(v);
  __glintercept_log(" - glTexCoord4fv(v: %ld)", v);
}

typedef void(*__ctype_glTexCoord4hNV)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
static __ctype_glTexCoord4hNV __glintercept_fnptr_glTexCoord4hNV;
void __glintercept_glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) {
  __glintercept_fnptr_glTexCoord4hNV(s, t, r, q);
  __glintercept_log(" - glTexCoord4hNV(s: %ld, t: %ld, r: %ld, q: %ld)", s, t, r, q);
}

typedef void(*__ctype_glTexCoord4hvNV)(const GLhalfNV *);
static __ctype_glTexCoord4hvNV __glintercept_fnptr_glTexCoord4hvNV;
void __glintercept_glTexCoord4hvNV(const GLhalfNV * v) {
  __glintercept_fnptr_glTexCoord4hvNV(v);
  __glintercept_log(" - glTexCoord4hvNV(v: %ld)", v);
}

typedef void(*__ctype_glTexCoord4i)(GLint, GLint, GLint, GLint);
static __ctype_glTexCoord4i __glintercept_fnptr_glTexCoord4i;
void __glintercept_glTexCoord4i(GLint s, GLint t, GLint r, GLint q) {
  __glintercept_fnptr_glTexCoord4i(s, t, r, q);
  __glintercept_log(" - glTexCoord4i(s: %ld, t: %ld, r: %ld, q: %ld)", s, t, r, q);
}

typedef void(*__ctype_glTexCoord4iv)(const GLint *);
static __ctype_glTexCoord4iv __glintercept_fnptr_glTexCoord4iv;
void __glintercept_glTexCoord4iv(const GLint * v) {
  __glintercept_fnptr_glTexCoord4iv(v);
  __glintercept_log(" - glTexCoord4iv(v: %ld)", v);
}

typedef void(*__ctype_glTexCoord4s)(GLshort, GLshort, GLshort, GLshort);
static __ctype_glTexCoord4s __glintercept_fnptr_glTexCoord4s;
void __glintercept_glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q) {
  __glintercept_fnptr_glTexCoord4s(s, t, r, q);
  __glintercept_log(" - glTexCoord4s(s: %ld, t: %ld, r: %ld, q: %ld)", s, t, r, q);
}

typedef void(*__ctype_glTexCoord4sv)(const GLshort *);
static __ctype_glTexCoord4sv __glintercept_fnptr_glTexCoord4sv;
void __glintercept_glTexCoord4sv(const GLshort * v) {
  __glintercept_fnptr_glTexCoord4sv(v);
  __glintercept_log(" - glTexCoord4sv(v: %ld)", v);
}

typedef void(*__ctype_glTexCoord4xOES)(GLfixed, GLfixed, GLfixed, GLfixed);
static __ctype_glTexCoord4xOES __glintercept_fnptr_glTexCoord4xOES;
void __glintercept_glTexCoord4xOES(GLfixed s, GLfixed t, GLfixed r, GLfixed q) {
  __glintercept_fnptr_glTexCoord4xOES(s, t, r, q);
  __glintercept_log(" - glTexCoord4xOES(s: %ld, t: %ld, r: %ld, q: %ld)", s, t, r, q);
}

typedef void(*__ctype_glTexCoord4xvOES)(const GLfixed *);
static __ctype_glTexCoord4xvOES __glintercept_fnptr_glTexCoord4xvOES;
void __glintercept_glTexCoord4xvOES(const GLfixed * coords) {
  __glintercept_fnptr_glTexCoord4xvOES(coords);
  __glintercept_log(" - glTexCoord4xvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glTexCoordFormatNV)(GLint, GLenum, GLsizei);
static __ctype_glTexCoordFormatNV __glintercept_fnptr_glTexCoordFormatNV;
void __glintercept_glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride) {
  __glintercept_fnptr_glTexCoordFormatNV(size, type, stride);
  __glintercept_log(" - glTexCoordFormatNV(size: %ld, type: %ld (%s), stride: %ld)", size, type, __gl_intercept_formatenum(type), stride);
}

typedef void(*__ctype_glTexCoordP1ui)(GLenum, GLuint);
static __ctype_glTexCoordP1ui __glintercept_fnptr_glTexCoordP1ui;
void __glintercept_glTexCoordP1ui(GLenum type, GLuint coords) {
  __glintercept_fnptr_glTexCoordP1ui(type, coords);
  __glintercept_log(" - glTexCoordP1ui(type: %ld (%s), coords: %ld)", type, __gl_intercept_formatenum(type), coords);
}

typedef void(*__ctype_glTexCoordP1uiv)(GLenum, const GLuint *);
static __ctype_glTexCoordP1uiv __glintercept_fnptr_glTexCoordP1uiv;
void __glintercept_glTexCoordP1uiv(GLenum type, const GLuint * coords) {
  __glintercept_fnptr_glTexCoordP1uiv(type, coords);
  __glintercept_log(" - glTexCoordP1uiv(type: %ld (%s), coords: %ld)", type, __gl_intercept_formatenum(type), coords);
}

typedef void(*__ctype_glTexCoordP2ui)(GLenum, GLuint);
static __ctype_glTexCoordP2ui __glintercept_fnptr_glTexCoordP2ui;
void __glintercept_glTexCoordP2ui(GLenum type, GLuint coords) {
  __glintercept_fnptr_glTexCoordP2ui(type, coords);
  __glintercept_log(" - glTexCoordP2ui(type: %ld (%s), coords: %ld)", type, __gl_intercept_formatenum(type), coords);
}

typedef void(*__ctype_glTexCoordP2uiv)(GLenum, const GLuint *);
static __ctype_glTexCoordP2uiv __glintercept_fnptr_glTexCoordP2uiv;
void __glintercept_glTexCoordP2uiv(GLenum type, const GLuint * coords) {
  __glintercept_fnptr_glTexCoordP2uiv(type, coords);
  __glintercept_log(" - glTexCoordP2uiv(type: %ld (%s), coords: %ld)", type, __gl_intercept_formatenum(type), coords);
}

typedef void(*__ctype_glTexCoordP3ui)(GLenum, GLuint);
static __ctype_glTexCoordP3ui __glintercept_fnptr_glTexCoordP3ui;
void __glintercept_glTexCoordP3ui(GLenum type, GLuint coords) {
  __glintercept_fnptr_glTexCoordP3ui(type, coords);
  __glintercept_log(" - glTexCoordP3ui(type: %ld (%s), coords: %ld)", type, __gl_intercept_formatenum(type), coords);
}

typedef void(*__ctype_glTexCoordP3uiv)(GLenum, const GLuint *);
static __ctype_glTexCoordP3uiv __glintercept_fnptr_glTexCoordP3uiv;
void __glintercept_glTexCoordP3uiv(GLenum type, const GLuint * coords) {
  __glintercept_fnptr_glTexCoordP3uiv(type, coords);
  __glintercept_log(" - glTexCoordP3uiv(type: %ld (%s), coords: %ld)", type, __gl_intercept_formatenum(type), coords);
}

typedef void(*__ctype_glTexCoordP4ui)(GLenum, GLuint);
static __ctype_glTexCoordP4ui __glintercept_fnptr_glTexCoordP4ui;
void __glintercept_glTexCoordP4ui(GLenum type, GLuint coords) {
  __glintercept_fnptr_glTexCoordP4ui(type, coords);
  __glintercept_log(" - glTexCoordP4ui(type: %ld (%s), coords: %ld)", type, __gl_intercept_formatenum(type), coords);
}

typedef void(*__ctype_glTexCoordP4uiv)(GLenum, const GLuint *);
static __ctype_glTexCoordP4uiv __glintercept_fnptr_glTexCoordP4uiv;
void __glintercept_glTexCoordP4uiv(GLenum type, const GLuint * coords) {
  __glintercept_fnptr_glTexCoordP4uiv(type, coords);
  __glintercept_log(" - glTexCoordP4uiv(type: %ld (%s), coords: %ld)", type, __gl_intercept_formatenum(type), coords);
}

typedef void(*__ctype_glTexCoordPointer)(GLint, GLenum, GLsizei, const void *);
static __ctype_glTexCoordPointer __glintercept_fnptr_glTexCoordPointer;
void __glintercept_glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glTexCoordPointer(size, type, stride, pointer);
  __glintercept_log(" - glTexCoordPointer(size: %ld, type: %ld (%s), stride: %ld, pointer: %ld)", size, type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glTexCoordPointerEXT)(GLint, GLenum, GLsizei, GLsizei, const void *);
static __ctype_glTexCoordPointerEXT __glintercept_fnptr_glTexCoordPointerEXT;
void __glintercept_glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) {
  __glintercept_fnptr_glTexCoordPointerEXT(size, type, stride, count, pointer);
  __glintercept_log(" - glTexCoordPointerEXT(size: %ld, type: %ld (%s), stride: %ld, count: %ld, pointer: %ld)", size, type, __gl_intercept_formatenum(type), stride, count, pointer);
}

typedef void(*__ctype_glTexCoordPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
static __ctype_glTexCoordPointerListIBM __glintercept_fnptr_glTexCoordPointerListIBM;
void __glintercept_glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) {
  __glintercept_fnptr_glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride);
  __glintercept_log(" - glTexCoordPointerListIBM(size: %ld, type: %ld (%s), stride: %ld, pointer: %ld, ptrstride: %ld)", size, type, __gl_intercept_formatenum(type), stride, pointer, ptrstride);
}

typedef void(*__ctype_glTexCoordPointervINTEL)(GLint, GLenum, const void **);
static __ctype_glTexCoordPointervINTEL __glintercept_fnptr_glTexCoordPointervINTEL;
void __glintercept_glTexCoordPointervINTEL(GLint size, GLenum type, const void ** pointer) {
  __glintercept_fnptr_glTexCoordPointervINTEL(size, type, pointer);
  __glintercept_log(" - glTexCoordPointervINTEL(size: %ld, type: %ld (%s), pointer: %ld)", size, type, __gl_intercept_formatenum(type), pointer);
}

typedef void(*__ctype_glTexEnvf)(GLenum, GLenum, GLfloat);
static __ctype_glTexEnvf __glintercept_fnptr_glTexEnvf;
void __glintercept_glTexEnvf(GLenum target, GLenum pname, GLfloat param) {
  __glintercept_fnptr_glTexEnvf(target, pname, param);
  __glintercept_log(" - glTexEnvf(target: %ld (%s), pname: %ld (%s), param: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glTexEnvfv)(GLenum, GLenum, const GLfloat *);
static __ctype_glTexEnvfv __glintercept_fnptr_glTexEnvfv;
void __glintercept_glTexEnvfv(GLenum target, GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glTexEnvfv(target, pname, params);
  __glintercept_log(" - glTexEnvfv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTexEnvi)(GLenum, GLenum, GLint);
static __ctype_glTexEnvi __glintercept_fnptr_glTexEnvi;
void __glintercept_glTexEnvi(GLenum target, GLenum pname, GLint param) {
  __glintercept_fnptr_glTexEnvi(target, pname, param);
  __glintercept_log(" - glTexEnvi(target: %ld (%s), pname: %ld (%s), param: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glTexEnviv)(GLenum, GLenum, const GLint *);
static __ctype_glTexEnviv __glintercept_fnptr_glTexEnviv;
void __glintercept_glTexEnviv(GLenum target, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glTexEnviv(target, pname, params);
  __glintercept_log(" - glTexEnviv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTexEnvx)(GLenum, GLenum, GLfixed);
static __ctype_glTexEnvx __glintercept_fnptr_glTexEnvx;
void __glintercept_glTexEnvx(GLenum target, GLenum pname, GLfixed param) {
  __glintercept_fnptr_glTexEnvx(target, pname, param);
  __glintercept_log(" - glTexEnvx(target: %ld (%s), pname: %ld (%s), param: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glTexEnvxOES)(GLenum, GLenum, GLfixed);
static __ctype_glTexEnvxOES __glintercept_fnptr_glTexEnvxOES;
void __glintercept_glTexEnvxOES(GLenum target, GLenum pname, GLfixed param) {
  __glintercept_fnptr_glTexEnvxOES(target, pname, param);
  __glintercept_log(" - glTexEnvxOES(target: %ld (%s), pname: %ld (%s), param: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glTexEnvxv)(GLenum, GLenum, const GLfixed *);
static __ctype_glTexEnvxv __glintercept_fnptr_glTexEnvxv;
void __glintercept_glTexEnvxv(GLenum target, GLenum pname, const GLfixed * params) {
  __glintercept_fnptr_glTexEnvxv(target, pname, params);
  __glintercept_log(" - glTexEnvxv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTexEnvxvOES)(GLenum, GLenum, const GLfixed *);
static __ctype_glTexEnvxvOES __glintercept_fnptr_glTexEnvxvOES;
void __glintercept_glTexEnvxvOES(GLenum target, GLenum pname, const GLfixed * params) {
  __glintercept_fnptr_glTexEnvxvOES(target, pname, params);
  __glintercept_log(" - glTexEnvxvOES(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTexEstimateMotionQCOM)(GLuint, GLuint, GLuint);
static __ctype_glTexEstimateMotionQCOM __glintercept_fnptr_glTexEstimateMotionQCOM;
void __glintercept_glTexEstimateMotionQCOM(GLuint ref, GLuint target, GLuint output) {
  __glintercept_fnptr_glTexEstimateMotionQCOM(ref, target, output);
  __glintercept_log(" - glTexEstimateMotionQCOM(ref: %ld, target: %ld, output: %ld)", ref, target, output);
}

typedef void(*__ctype_glTexEstimateMotionRegionsQCOM)(GLuint, GLuint, GLuint, GLuint);
static __ctype_glTexEstimateMotionRegionsQCOM __glintercept_fnptr_glTexEstimateMotionRegionsQCOM;
void __glintercept_glTexEstimateMotionRegionsQCOM(GLuint ref, GLuint target, GLuint output, GLuint mask) {
  __glintercept_fnptr_glTexEstimateMotionRegionsQCOM(ref, target, output, mask);
  __glintercept_log(" - glTexEstimateMotionRegionsQCOM(ref: %ld, target: %ld, output: %ld, mask: %ld)", ref, target, output, mask);
}

typedef void(*__ctype_glExtrapolateTex2DQCOM)(GLuint, GLuint, GLuint, GLfloat);
static __ctype_glExtrapolateTex2DQCOM __glintercept_fnptr_glExtrapolateTex2DQCOM;
void __glintercept_glExtrapolateTex2DQCOM(GLuint src1, GLuint src2, GLuint output, GLfloat scaleFactor) {
  __glintercept_fnptr_glExtrapolateTex2DQCOM(src1, src2, output, scaleFactor);
  __glintercept_log(" - glExtrapolateTex2DQCOM(src1: %ld, src2: %ld, output: %ld, scaleFactor: %ld)", src1, src2, output, scaleFactor);
}

typedef void(*__ctype_glTexFilterFuncSGIS)(GLenum, GLenum, GLsizei, const GLfloat *);
static __ctype_glTexFilterFuncSGIS __glintercept_fnptr_glTexFilterFuncSGIS;
void __glintercept_glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat * weights) {
  __glintercept_fnptr_glTexFilterFuncSGIS(target, filter, n, weights);
  __glintercept_log(" - glTexFilterFuncSGIS(target: %ld (%s), filter: %ld (%s), n: %ld, weights: %ld)", target, __gl_intercept_formatenum(target), filter, __gl_intercept_formatenum(filter), n, weights);
}

typedef void(*__ctype_glTexGend)(GLenum, GLenum, GLdouble);
static __ctype_glTexGend __glintercept_fnptr_glTexGend;
void __glintercept_glTexGend(GLenum coord, GLenum pname, GLdouble param) {
  __glintercept_fnptr_glTexGend(coord, pname, param);
  __glintercept_log(" - glTexGend(coord: %ld (%s), pname: %ld (%s), param: %ld)", coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glTexGendv)(GLenum, GLenum, const GLdouble *);
static __ctype_glTexGendv __glintercept_fnptr_glTexGendv;
void __glintercept_glTexGendv(GLenum coord, GLenum pname, const GLdouble * params) {
  __glintercept_fnptr_glTexGendv(coord, pname, params);
  __glintercept_log(" - glTexGendv(coord: %ld (%s), pname: %ld (%s), params: %ld)", coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTexGenf)(GLenum, GLenum, GLfloat);
static __ctype_glTexGenf __glintercept_fnptr_glTexGenf;
void __glintercept_glTexGenf(GLenum coord, GLenum pname, GLfloat param) {
  __glintercept_fnptr_glTexGenf(coord, pname, param);
  __glintercept_log(" - glTexGenf(coord: %ld (%s), pname: %ld (%s), param: %ld)", coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glTexGenfOES)(GLenum, GLenum, GLfloat);
static __ctype_glTexGenfOES __glintercept_fnptr_glTexGenfOES;
void __glintercept_glTexGenfOES(GLenum coord, GLenum pname, GLfloat param) {
  __glintercept_fnptr_glTexGenfOES(coord, pname, param);
  __glintercept_log(" - glTexGenfOES(coord: %ld (%s), pname: %ld (%s), param: %ld)", coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glTexGenfv)(GLenum, GLenum, const GLfloat *);
static __ctype_glTexGenfv __glintercept_fnptr_glTexGenfv;
void __glintercept_glTexGenfv(GLenum coord, GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glTexGenfv(coord, pname, params);
  __glintercept_log(" - glTexGenfv(coord: %ld (%s), pname: %ld (%s), params: %ld)", coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTexGenfvOES)(GLenum, GLenum, const GLfloat *);
static __ctype_glTexGenfvOES __glintercept_fnptr_glTexGenfvOES;
void __glintercept_glTexGenfvOES(GLenum coord, GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glTexGenfvOES(coord, pname, params);
  __glintercept_log(" - glTexGenfvOES(coord: %ld (%s), pname: %ld (%s), params: %ld)", coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTexGeni)(GLenum, GLenum, GLint);
static __ctype_glTexGeni __glintercept_fnptr_glTexGeni;
void __glintercept_glTexGeni(GLenum coord, GLenum pname, GLint param) {
  __glintercept_fnptr_glTexGeni(coord, pname, param);
  __glintercept_log(" - glTexGeni(coord: %ld (%s), pname: %ld (%s), param: %ld)", coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glTexGeniOES)(GLenum, GLenum, GLint);
static __ctype_glTexGeniOES __glintercept_fnptr_glTexGeniOES;
void __glintercept_glTexGeniOES(GLenum coord, GLenum pname, GLint param) {
  __glintercept_fnptr_glTexGeniOES(coord, pname, param);
  __glintercept_log(" - glTexGeniOES(coord: %ld (%s), pname: %ld (%s), param: %ld)", coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glTexGeniv)(GLenum, GLenum, const GLint *);
static __ctype_glTexGeniv __glintercept_fnptr_glTexGeniv;
void __glintercept_glTexGeniv(GLenum coord, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glTexGeniv(coord, pname, params);
  __glintercept_log(" - glTexGeniv(coord: %ld (%s), pname: %ld (%s), params: %ld)", coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTexGenivOES)(GLenum, GLenum, const GLint *);
static __ctype_glTexGenivOES __glintercept_fnptr_glTexGenivOES;
void __glintercept_glTexGenivOES(GLenum coord, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glTexGenivOES(coord, pname, params);
  __glintercept_log(" - glTexGenivOES(coord: %ld (%s), pname: %ld (%s), params: %ld)", coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTexGenxOES)(GLenum, GLenum, GLfixed);
static __ctype_glTexGenxOES __glintercept_fnptr_glTexGenxOES;
void __glintercept_glTexGenxOES(GLenum coord, GLenum pname, GLfixed param) {
  __glintercept_fnptr_glTexGenxOES(coord, pname, param);
  __glintercept_log(" - glTexGenxOES(coord: %ld (%s), pname: %ld (%s), param: %ld)", coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glTexGenxvOES)(GLenum, GLenum, const GLfixed *);
static __ctype_glTexGenxvOES __glintercept_fnptr_glTexGenxvOES;
void __glintercept_glTexGenxvOES(GLenum coord, GLenum pname, const GLfixed * params) {
  __glintercept_fnptr_glTexGenxvOES(coord, pname, params);
  __glintercept_log(" - glTexGenxvOES(coord: %ld (%s), pname: %ld (%s), params: %ld)", coord, __gl_intercept_formatenum(coord), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTexImage1D)(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *);
static __ctype_glTexImage1D __glintercept_fnptr_glTexImage1D;
void __glintercept_glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
  __glintercept_log(" - glTexImage1D(target: %ld (%s), level: %ld, internalformat: %ld, width: %ld, border: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", target, __gl_intercept_formatenum(target), level, internalformat, width, border, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTexImage2D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
static __ctype_glTexImage2D __glintercept_fnptr_glTexImage2D;
void __glintercept_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
  __glintercept_log(" - glTexImage2D(target: %ld (%s), level: %ld, internalformat: %ld, width: %ld, height: %ld, border: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", target, __gl_intercept_formatenum(target), level, internalformat, width, height, border, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTexImage2DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
static __ctype_glTexImage2DMultisample __glintercept_fnptr_glTexImage2DMultisample;
void __glintercept_glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  __glintercept_fnptr_glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
  __glintercept_log(" - glTexImage2DMultisample(target: %ld (%s), samples: %ld, internalformat: %ld (%s), width: %ld, height: %ld, fixedsamplelocations: %ld)", target, __gl_intercept_formatenum(target), samples, internalformat, __gl_intercept_formatenum(internalformat), width, height, fixedsamplelocations);
}

typedef void(*__ctype_glTexImage2DMultisampleCoverageNV)(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
static __ctype_glTexImage2DMultisampleCoverageNV __glintercept_fnptr_glTexImage2DMultisampleCoverageNV;
void __glintercept_glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {
  __glintercept_fnptr_glTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
  __glintercept_log(" - glTexImage2DMultisampleCoverageNV(target: %ld (%s), coverageSamples: %ld, colorSamples: %ld, internalFormat: %ld, width: %ld, height: %ld, fixedSampleLocations: %ld)", target, __gl_intercept_formatenum(target), coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}

typedef void(*__ctype_glTexImage3D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
static __ctype_glTexImage3D __glintercept_fnptr_glTexImage3D;
void __glintercept_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
  __glintercept_log(" - glTexImage3D(target: %ld (%s), level: %ld, internalformat: %ld, width: %ld, height: %ld, depth: %ld, border: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", target, __gl_intercept_formatenum(target), level, internalformat, width, height, depth, border, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTexImage3DEXT)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
static __ctype_glTexImage3DEXT __glintercept_fnptr_glTexImage3DEXT;
void __glintercept_glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels);
  __glintercept_log(" - glTexImage3DEXT(target: %ld (%s), level: %ld, internalformat: %ld (%s), width: %ld, height: %ld, depth: %ld, border: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), width, height, depth, border, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTexImage3DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
static __ctype_glTexImage3DMultisample __glintercept_fnptr_glTexImage3DMultisample;
void __glintercept_glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  __glintercept_fnptr_glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
  __glintercept_log(" - glTexImage3DMultisample(target: %ld (%s), samples: %ld, internalformat: %ld (%s), width: %ld, height: %ld, depth: %ld, fixedsamplelocations: %ld)", target, __gl_intercept_formatenum(target), samples, internalformat, __gl_intercept_formatenum(internalformat), width, height, depth, fixedsamplelocations);
}

typedef void(*__ctype_glTexImage3DMultisampleCoverageNV)(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
static __ctype_glTexImage3DMultisampleCoverageNV __glintercept_fnptr_glTexImage3DMultisampleCoverageNV;
void __glintercept_glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {
  __glintercept_fnptr_glTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
  __glintercept_log(" - glTexImage3DMultisampleCoverageNV(target: %ld (%s), coverageSamples: %ld, colorSamples: %ld, internalFormat: %ld, width: %ld, height: %ld, depth: %ld, fixedSampleLocations: %ld)", target, __gl_intercept_formatenum(target), coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}

typedef void(*__ctype_glTexImage3DOES)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
static __ctype_glTexImage3DOES __glintercept_fnptr_glTexImage3DOES;
void __glintercept_glTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, pixels);
  __glintercept_log(" - glTexImage3DOES(target: %ld (%s), level: %ld, internalformat: %ld (%s), width: %ld, height: %ld, depth: %ld, border: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), width, height, depth, border, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTexImage4DSGIS)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
static __ctype_glTexImage4DSGIS __glintercept_fnptr_glTexImage4DSGIS;
void __glintercept_glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
  __glintercept_log(" - glTexImage4DSGIS(target: %ld (%s), level: %ld, internalformat: %ld (%s), width: %ld, height: %ld, depth: %ld, size4d: %ld, border: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", target, __gl_intercept_formatenum(target), level, internalformat, __gl_intercept_formatenum(internalformat), width, height, depth, size4d, border, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTexPageCommitmentARB)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
static __ctype_glTexPageCommitmentARB __glintercept_fnptr_glTexPageCommitmentARB;
void __glintercept_glTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) {
  __glintercept_fnptr_glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
  __glintercept_log(" - glTexPageCommitmentARB(target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld, commit: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, yoffset, zoffset, width, height, depth, commit);
}

typedef void(*__ctype_glTexPageCommitmentEXT)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
static __ctype_glTexPageCommitmentEXT __glintercept_fnptr_glTexPageCommitmentEXT;
void __glintercept_glTexPageCommitmentEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) {
  __glintercept_fnptr_glTexPageCommitmentEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
  __glintercept_log(" - glTexPageCommitmentEXT(target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld, commit: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, yoffset, zoffset, width, height, depth, commit);
}

typedef void(*__ctype_glTexPageCommitmentMemNV)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLuint, GLuint64, GLboolean);
static __ctype_glTexPageCommitmentMemNV __glintercept_fnptr_glTexPageCommitmentMemNV;
void __glintercept_glTexPageCommitmentMemNV(GLenum target, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit) {
  __glintercept_fnptr_glTexPageCommitmentMemNV(target, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
  __glintercept_log(" - glTexPageCommitmentMemNV(target: %ld (%s), layer: %ld, level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld, memory: %ld, offset: %ld, commit: %ld)", target, __gl_intercept_formatenum(target), layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
}

typedef void(*__ctype_glTexParameterIiv)(GLenum, GLenum, const GLint *);
static __ctype_glTexParameterIiv __glintercept_fnptr_glTexParameterIiv;
void __glintercept_glTexParameterIiv(GLenum target, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glTexParameterIiv(target, pname, params);
  __glintercept_log(" - glTexParameterIiv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTexParameterIivEXT)(GLenum, GLenum, const GLint *);
static __ctype_glTexParameterIivEXT __glintercept_fnptr_glTexParameterIivEXT;
void __glintercept_glTexParameterIivEXT(GLenum target, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glTexParameterIivEXT(target, pname, params);
  __glintercept_log(" - glTexParameterIivEXT(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTexParameterIivOES)(GLenum, GLenum, const GLint *);
static __ctype_glTexParameterIivOES __glintercept_fnptr_glTexParameterIivOES;
void __glintercept_glTexParameterIivOES(GLenum target, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glTexParameterIivOES(target, pname, params);
  __glintercept_log(" - glTexParameterIivOES(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTexParameterIuiv)(GLenum, GLenum, const GLuint *);
static __ctype_glTexParameterIuiv __glintercept_fnptr_glTexParameterIuiv;
void __glintercept_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint * params) {
  __glintercept_fnptr_glTexParameterIuiv(target, pname, params);
  __glintercept_log(" - glTexParameterIuiv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTexParameterIuivEXT)(GLenum, GLenum, const GLuint *);
static __ctype_glTexParameterIuivEXT __glintercept_fnptr_glTexParameterIuivEXT;
void __glintercept_glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint * params) {
  __glintercept_fnptr_glTexParameterIuivEXT(target, pname, params);
  __glintercept_log(" - glTexParameterIuivEXT(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTexParameterIuivOES)(GLenum, GLenum, const GLuint *);
static __ctype_glTexParameterIuivOES __glintercept_fnptr_glTexParameterIuivOES;
void __glintercept_glTexParameterIuivOES(GLenum target, GLenum pname, const GLuint * params) {
  __glintercept_fnptr_glTexParameterIuivOES(target, pname, params);
  __glintercept_log(" - glTexParameterIuivOES(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTexParameterf)(GLenum, GLenum, GLfloat);
static __ctype_glTexParameterf __glintercept_fnptr_glTexParameterf;
void __glintercept_glTexParameterf(GLenum target, GLenum pname, GLfloat param) {
  __glintercept_fnptr_glTexParameterf(target, pname, param);
  __glintercept_log(" - glTexParameterf(target: %ld (%s), pname: %ld (%s), param: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glTexParameterfv)(GLenum, GLenum, const GLfloat *);
static __ctype_glTexParameterfv __glintercept_fnptr_glTexParameterfv;
void __glintercept_glTexParameterfv(GLenum target, GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glTexParameterfv(target, pname, params);
  __glintercept_log(" - glTexParameterfv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTexParameteri)(GLenum, GLenum, GLint);
static __ctype_glTexParameteri __glintercept_fnptr_glTexParameteri;
void __glintercept_glTexParameteri(GLenum target, GLenum pname, GLint param) {
  __glintercept_fnptr_glTexParameteri(target, pname, param);
  __glintercept_log(" - glTexParameteri(target: %ld (%s), pname: %ld (%s), param: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glTexParameteriv)(GLenum, GLenum, const GLint *);
static __ctype_glTexParameteriv __glintercept_fnptr_glTexParameteriv;
void __glintercept_glTexParameteriv(GLenum target, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glTexParameteriv(target, pname, params);
  __glintercept_log(" - glTexParameteriv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTexParameterx)(GLenum, GLenum, GLfixed);
static __ctype_glTexParameterx __glintercept_fnptr_glTexParameterx;
void __glintercept_glTexParameterx(GLenum target, GLenum pname, GLfixed param) {
  __glintercept_fnptr_glTexParameterx(target, pname, param);
  __glintercept_log(" - glTexParameterx(target: %ld (%s), pname: %ld (%s), param: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glTexParameterxOES)(GLenum, GLenum, GLfixed);
static __ctype_glTexParameterxOES __glintercept_fnptr_glTexParameterxOES;
void __glintercept_glTexParameterxOES(GLenum target, GLenum pname, GLfixed param) {
  __glintercept_fnptr_glTexParameterxOES(target, pname, param);
  __glintercept_log(" - glTexParameterxOES(target: %ld (%s), pname: %ld (%s), param: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glTexParameterxv)(GLenum, GLenum, const GLfixed *);
static __ctype_glTexParameterxv __glintercept_fnptr_glTexParameterxv;
void __glintercept_glTexParameterxv(GLenum target, GLenum pname, const GLfixed * params) {
  __glintercept_fnptr_glTexParameterxv(target, pname, params);
  __glintercept_log(" - glTexParameterxv(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTexParameterxvOES)(GLenum, GLenum, const GLfixed *);
static __ctype_glTexParameterxvOES __glintercept_fnptr_glTexParameterxvOES;
void __glintercept_glTexParameterxvOES(GLenum target, GLenum pname, const GLfixed * params) {
  __glintercept_fnptr_glTexParameterxvOES(target, pname, params);
  __glintercept_log(" - glTexParameterxvOES(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTexRenderbufferNV)(GLenum, GLuint);
static __ctype_glTexRenderbufferNV __glintercept_fnptr_glTexRenderbufferNV;
void __glintercept_glTexRenderbufferNV(GLenum target, GLuint renderbuffer) {
  __glintercept_fnptr_glTexRenderbufferNV(target, renderbuffer);
  __glintercept_log(" - glTexRenderbufferNV(target: %ld (%s), renderbuffer: %ld)", target, __gl_intercept_formatenum(target), renderbuffer);
}

typedef void(*__ctype_glTexStorage1D)(GLenum, GLsizei, GLenum, GLsizei);
static __ctype_glTexStorage1D __glintercept_fnptr_glTexStorage1D;
void __glintercept_glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
  __glintercept_fnptr_glTexStorage1D(target, levels, internalformat, width);
  __glintercept_log(" - glTexStorage1D(target: %ld (%s), levels: %ld, internalformat: %ld (%s), width: %ld)", target, __gl_intercept_formatenum(target), levels, internalformat, __gl_intercept_formatenum(internalformat), width);
}

typedef void(*__ctype_glTexStorage1DEXT)(GLenum, GLsizei, GLenum, GLsizei);
static __ctype_glTexStorage1DEXT __glintercept_fnptr_glTexStorage1DEXT;
void __glintercept_glTexStorage1DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
  __glintercept_fnptr_glTexStorage1DEXT(target, levels, internalformat, width);
  __glintercept_log(" - glTexStorage1DEXT(target: %ld (%s), levels: %ld, internalformat: %ld (%s), width: %ld)", target, __gl_intercept_formatenum(target), levels, internalformat, __gl_intercept_formatenum(internalformat), width);
}

typedef void(*__ctype_glTexStorage2D)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
static __ctype_glTexStorage2D __glintercept_fnptr_glTexStorage2D;
void __glintercept_glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glTexStorage2D(target, levels, internalformat, width, height);
  __glintercept_log(" - glTexStorage2D(target: %ld (%s), levels: %ld, internalformat: %ld (%s), width: %ld, height: %ld)", target, __gl_intercept_formatenum(target), levels, internalformat, __gl_intercept_formatenum(internalformat), width, height);
}

typedef void(*__ctype_glTexStorage2DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
static __ctype_glTexStorage2DEXT __glintercept_fnptr_glTexStorage2DEXT;
void __glintercept_glTexStorage2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glTexStorage2DEXT(target, levels, internalformat, width, height);
  __glintercept_log(" - glTexStorage2DEXT(target: %ld (%s), levels: %ld, internalformat: %ld (%s), width: %ld, height: %ld)", target, __gl_intercept_formatenum(target), levels, internalformat, __gl_intercept_formatenum(internalformat), width, height);
}

typedef void(*__ctype_glTexStorage2DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
static __ctype_glTexStorage2DMultisample __glintercept_fnptr_glTexStorage2DMultisample;
void __glintercept_glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  __glintercept_fnptr_glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
  __glintercept_log(" - glTexStorage2DMultisample(target: %ld (%s), samples: %ld, internalformat: %ld (%s), width: %ld, height: %ld, fixedsamplelocations: %ld)", target, __gl_intercept_formatenum(target), samples, internalformat, __gl_intercept_formatenum(internalformat), width, height, fixedsamplelocations);
}

typedef void(*__ctype_glTexStorage3D)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
static __ctype_glTexStorage3D __glintercept_fnptr_glTexStorage3D;
void __glintercept_glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  __glintercept_fnptr_glTexStorage3D(target, levels, internalformat, width, height, depth);
  __glintercept_log(" - glTexStorage3D(target: %ld (%s), levels: %ld, internalformat: %ld (%s), width: %ld, height: %ld, depth: %ld)", target, __gl_intercept_formatenum(target), levels, internalformat, __gl_intercept_formatenum(internalformat), width, height, depth);
}

typedef void(*__ctype_glTexStorage3DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
static __ctype_glTexStorage3DEXT __glintercept_fnptr_glTexStorage3DEXT;
void __glintercept_glTexStorage3DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  __glintercept_fnptr_glTexStorage3DEXT(target, levels, internalformat, width, height, depth);
  __glintercept_log(" - glTexStorage3DEXT(target: %ld (%s), levels: %ld, internalformat: %ld (%s), width: %ld, height: %ld, depth: %ld)", target, __gl_intercept_formatenum(target), levels, internalformat, __gl_intercept_formatenum(internalformat), width, height, depth);
}

typedef void(*__ctype_glTexStorage3DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
static __ctype_glTexStorage3DMultisample __glintercept_fnptr_glTexStorage3DMultisample;
void __glintercept_glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  __glintercept_fnptr_glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
  __glintercept_log(" - glTexStorage3DMultisample(target: %ld (%s), samples: %ld, internalformat: %ld (%s), width: %ld, height: %ld, depth: %ld, fixedsamplelocations: %ld)", target, __gl_intercept_formatenum(target), samples, internalformat, __gl_intercept_formatenum(internalformat), width, height, depth, fixedsamplelocations);
}

typedef void(*__ctype_glTexStorage3DMultisampleOES)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
static __ctype_glTexStorage3DMultisampleOES __glintercept_fnptr_glTexStorage3DMultisampleOES;
void __glintercept_glTexStorage3DMultisampleOES(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  __glintercept_fnptr_glTexStorage3DMultisampleOES(target, samples, internalformat, width, height, depth, fixedsamplelocations);
  __glintercept_log(" - glTexStorage3DMultisampleOES(target: %ld (%s), samples: %ld, internalformat: %ld (%s), width: %ld, height: %ld, depth: %ld, fixedsamplelocations: %ld)", target, __gl_intercept_formatenum(target), samples, internalformat, __gl_intercept_formatenum(internalformat), width, height, depth, fixedsamplelocations);
}

typedef void(*__ctype_TexStorageAttribs2DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, const int *);
static __ctype_TexStorageAttribs2DEXT __glintercept_fnptr_TexStorageAttribs2DEXT;
void __glintercept_TexStorageAttribs2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const int * attrib_list) {
  __glintercept_fnptr_TexStorageAttribs2DEXT(target, levels, internalformat, width, height, attrib_list);
  __glintercept_log(" - TexStorageAttribs2DEXT(target: %ld (%s), levels: %ld, internalformat: %ld (%s), width: %ld, height: %ld, attrib_list: %ld)", target, __gl_intercept_formatenum(target), levels, internalformat, __gl_intercept_formatenum(internalformat), width, height, attrib_list);
}

typedef void(*__ctype_TexStorageAttribs3DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, const int *);
static __ctype_TexStorageAttribs3DEXT __glintercept_fnptr_TexStorageAttribs3DEXT;
void __glintercept_TexStorageAttribs3DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const int * attrib_list) {
  __glintercept_fnptr_TexStorageAttribs3DEXT(target, levels, internalformat, width, height, depth, attrib_list);
  __glintercept_log(" - TexStorageAttribs3DEXT(target: %ld (%s), levels: %ld, internalformat: %ld (%s), width: %ld, height: %ld, depth: %ld, attrib_list: %ld)", target, __gl_intercept_formatenum(target), levels, internalformat, __gl_intercept_formatenum(internalformat), width, height, depth, attrib_list);
}

typedef void(*__ctype_glTexStorageMem1DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLuint, GLuint64);
static __ctype_glTexStorageMem1DEXT __glintercept_fnptr_glTexStorageMem1DEXT;
void __glintercept_glTexStorageMem1DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) {
  __glintercept_fnptr_glTexStorageMem1DEXT(target, levels, internalFormat, width, memory, offset);
  __glintercept_log(" - glTexStorageMem1DEXT(target: %ld (%s), levels: %ld, internalFormat: %ld (%s), width: %ld, memory: %ld, offset: %ld)", target, __gl_intercept_formatenum(target), levels, internalFormat, __gl_intercept_formatenum(internalFormat), width, memory, offset);
}

typedef void(*__ctype_glTexStorageMem2DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64);
static __ctype_glTexStorageMem2DEXT __glintercept_fnptr_glTexStorageMem2DEXT;
void __glintercept_glTexStorageMem2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) {
  __glintercept_fnptr_glTexStorageMem2DEXT(target, levels, internalFormat, width, height, memory, offset);
  __glintercept_log(" - glTexStorageMem2DEXT(target: %ld (%s), levels: %ld, internalFormat: %ld (%s), width: %ld, height: %ld, memory: %ld, offset: %ld)", target, __gl_intercept_formatenum(target), levels, internalFormat, __gl_intercept_formatenum(internalFormat), width, height, memory, offset);
}

typedef void(*__ctype_glTexStorageMem2DMultisampleEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
static __ctype_glTexStorageMem2DMultisampleEXT __glintercept_fnptr_glTexStorageMem2DMultisampleEXT;
void __glintercept_glTexStorageMem2DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
  __glintercept_fnptr_glTexStorageMem2DMultisampleEXT(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
  __glintercept_log(" - glTexStorageMem2DMultisampleEXT(target: %ld (%s), samples: %ld, internalFormat: %ld (%s), width: %ld, height: %ld, fixedSampleLocations: %ld, memory: %ld, offset: %ld)", target, __gl_intercept_formatenum(target), samples, internalFormat, __gl_intercept_formatenum(internalFormat), width, height, fixedSampleLocations, memory, offset);
}

typedef void(*__ctype_glTexStorageMem3DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64);
static __ctype_glTexStorageMem3DEXT __glintercept_fnptr_glTexStorageMem3DEXT;
void __glintercept_glTexStorageMem3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) {
  __glintercept_fnptr_glTexStorageMem3DEXT(target, levels, internalFormat, width, height, depth, memory, offset);
  __glintercept_log(" - glTexStorageMem3DEXT(target: %ld (%s), levels: %ld, internalFormat: %ld (%s), width: %ld, height: %ld, depth: %ld, memory: %ld, offset: %ld)", target, __gl_intercept_formatenum(target), levels, internalFormat, __gl_intercept_formatenum(internalFormat), width, height, depth, memory, offset);
}

typedef void(*__ctype_glTexStorageMem3DMultisampleEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
static __ctype_glTexStorageMem3DMultisampleEXT __glintercept_fnptr_glTexStorageMem3DMultisampleEXT;
void __glintercept_glTexStorageMem3DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
  __glintercept_fnptr_glTexStorageMem3DMultisampleEXT(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
  __glintercept_log(" - glTexStorageMem3DMultisampleEXT(target: %ld (%s), samples: %ld, internalFormat: %ld (%s), width: %ld, height: %ld, depth: %ld, fixedSampleLocations: %ld, memory: %ld, offset: %ld)", target, __gl_intercept_formatenum(target), samples, internalFormat, __gl_intercept_formatenum(internalFormat), width, height, depth, fixedSampleLocations, memory, offset);
}

typedef void(*__ctype_glTexStorageSparseAMD)(GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield);
static __ctype_glTexStorageSparseAMD __glintercept_fnptr_glTexStorageSparseAMD;
void __glintercept_glTexStorageSparseAMD(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) {
  __glintercept_fnptr_glTexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags);
  __glintercept_log(" - glTexStorageSparseAMD(target: %ld (%s), internalFormat: %ld (%s), width: %ld, height: %ld, depth: %ld, layers: %ld, flags: %ld)", target, __gl_intercept_formatenum(target), internalFormat, __gl_intercept_formatenum(internalFormat), width, height, depth, layers, flags);
}

typedef void(*__ctype_glTexSubImage1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
static __ctype_glTexSubImage1D __glintercept_fnptr_glTexSubImage1D;
void __glintercept_glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
  __glintercept_log(" - glTexSubImage1D(target: %ld (%s), level: %ld, xoffset: %ld, width: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, width, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTexSubImage1DEXT)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
static __ctype_glTexSubImage1DEXT __glintercept_fnptr_glTexSubImage1DEXT;
void __glintercept_glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels);
  __glintercept_log(" - glTexSubImage1DEXT(target: %ld (%s), level: %ld, xoffset: %ld, width: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, width, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTexSubImage2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
static __ctype_glTexSubImage2D __glintercept_fnptr_glTexSubImage2D;
void __glintercept_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
  __glintercept_log(" - glTexSubImage2D(target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, width: %ld, height: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, yoffset, width, height, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTexSubImage2DEXT)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
static __ctype_glTexSubImage2DEXT __glintercept_fnptr_glTexSubImage2DEXT;
void __glintercept_glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels);
  __glintercept_log(" - glTexSubImage2DEXT(target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, width: %ld, height: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, yoffset, width, height, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
static __ctype_glTexSubImage3D __glintercept_fnptr_glTexSubImage3D;
void __glintercept_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  __glintercept_log(" - glTexSubImage3D(target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, yoffset, zoffset, width, height, depth, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTexSubImage3DEXT)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
static __ctype_glTexSubImage3DEXT __glintercept_fnptr_glTexSubImage3DEXT;
void __glintercept_glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  __glintercept_log(" - glTexSubImage3DEXT(target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, yoffset, zoffset, width, height, depth, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTexSubImage3DOES)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
static __ctype_glTexSubImage3DOES __glintercept_fnptr_glTexSubImage3DOES;
void __glintercept_glTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  __glintercept_log(" - glTexSubImage3DOES(target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, yoffset, zoffset, width, height, depth, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTexSubImage4DSGIS)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
static __ctype_glTexSubImage4DSGIS __glintercept_fnptr_glTexSubImage4DSGIS;
void __glintercept_glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
  __glintercept_log(" - glTexSubImage4DSGIS(target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, woffset: %ld, width: %ld, height: %ld, depth: %ld, size4d: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", target, __gl_intercept_formatenum(target), level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTextureAttachMemoryNV)(GLuint, GLuint, GLuint64);
static __ctype_glTextureAttachMemoryNV __glintercept_fnptr_glTextureAttachMemoryNV;
void __glintercept_glTextureAttachMemoryNV(GLuint texture, GLuint memory, GLuint64 offset) {
  __glintercept_fnptr_glTextureAttachMemoryNV(texture, memory, offset);
  __glintercept_log(" - glTextureAttachMemoryNV(texture: %ld, memory: %ld, offset: %ld)", texture, memory, offset);
}

typedef void(*__ctype_glTextureBarrier)();
static __ctype_glTextureBarrier __glintercept_fnptr_glTextureBarrier;
void __glintercept_glTextureBarrier() {
  __glintercept_fnptr_glTextureBarrier();
  __glintercept_log(" - glTextureBarrier()");
}

typedef void(*__ctype_glTextureBarrierNV)();
static __ctype_glTextureBarrierNV __glintercept_fnptr_glTextureBarrierNV;
void __glintercept_glTextureBarrierNV() {
  __glintercept_fnptr_glTextureBarrierNV();
  __glintercept_log(" - glTextureBarrierNV()");
}

typedef void(*__ctype_glTextureBuffer)(GLuint, GLenum, GLuint);
static __ctype_glTextureBuffer __glintercept_fnptr_glTextureBuffer;
void __glintercept_glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer) {
  __glintercept_fnptr_glTextureBuffer(texture, internalformat, buffer);
  __glintercept_log(" - glTextureBuffer(texture: %ld, internalformat: %ld (%s), buffer: %ld)", texture, internalformat, __gl_intercept_formatenum(internalformat), buffer);
}

typedef void(*__ctype_glTextureBufferEXT)(GLuint, GLenum, GLenum, GLuint);
static __ctype_glTextureBufferEXT __glintercept_fnptr_glTextureBufferEXT;
void __glintercept_glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer) {
  __glintercept_fnptr_glTextureBufferEXT(texture, target, internalformat, buffer);
  __glintercept_log(" - glTextureBufferEXT(texture: %ld, target: %ld (%s), internalformat: %ld (%s), buffer: %ld)", texture, target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), buffer);
}

typedef void(*__ctype_glTextureBufferRange)(GLuint, GLenum, GLuint, GLintptr, GLsizeiptr);
static __ctype_glTextureBufferRange __glintercept_fnptr_glTextureBufferRange;
void __glintercept_glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  __glintercept_fnptr_glTextureBufferRange(texture, internalformat, buffer, offset, size);
  __glintercept_log(" - glTextureBufferRange(texture: %ld, internalformat: %ld (%s), buffer: %ld, offset: %ld, size: %ld)", texture, internalformat, __gl_intercept_formatenum(internalformat), buffer, offset, size);
}

typedef void(*__ctype_glTextureBufferRangeEXT)(GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
static __ctype_glTextureBufferRangeEXT __glintercept_fnptr_glTextureBufferRangeEXT;
void __glintercept_glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  __glintercept_fnptr_glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size);
  __glintercept_log(" - glTextureBufferRangeEXT(texture: %ld, target: %ld (%s), internalformat: %ld (%s), buffer: %ld, offset: %ld, size: %ld)", texture, target, __gl_intercept_formatenum(target), internalformat, __gl_intercept_formatenum(internalformat), buffer, offset, size);
}

typedef void(*__ctype_glTextureColorMaskSGIS)(GLboolean, GLboolean, GLboolean, GLboolean);
static __ctype_glTextureColorMaskSGIS __glintercept_fnptr_glTextureColorMaskSGIS;
void __glintercept_glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
  __glintercept_fnptr_glTextureColorMaskSGIS(red, green, blue, alpha);
  __glintercept_log(" - glTextureColorMaskSGIS(red: %ld, green: %ld, blue: %ld, alpha: %ld)", red, green, blue, alpha);
}

typedef void(*__ctype_glTextureFoveationParametersQCOM)(GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glTextureFoveationParametersQCOM __glintercept_fnptr_glTextureFoveationParametersQCOM;
void __glintercept_glTextureFoveationParametersQCOM(GLuint texture, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea) {
  __glintercept_fnptr_glTextureFoveationParametersQCOM(texture, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
  __glintercept_log(" - glTextureFoveationParametersQCOM(texture: %ld, layer: %ld, focalPoint: %ld, focalX: %ld, focalY: %ld, gainX: %ld, gainY: %ld, foveaArea: %ld)", texture, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
}

typedef void(*__ctype_glTextureImage1DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *);
static __ctype_glTextureImage1DEXT __glintercept_fnptr_glTextureImage1DEXT;
void __glintercept_glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels);
  __glintercept_log(" - glTextureImage1DEXT(texture: %ld, target: %ld (%s), level: %ld, internalformat: %ld, width: %ld, border: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", texture, target, __gl_intercept_formatenum(target), level, internalformat, width, border, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTextureImage2DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
static __ctype_glTextureImage2DEXT __glintercept_fnptr_glTextureImage2DEXT;
void __glintercept_glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels);
  __glintercept_log(" - glTextureImage2DEXT(texture: %ld, target: %ld (%s), level: %ld, internalformat: %ld, width: %ld, height: %ld, border: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", texture, target, __gl_intercept_formatenum(target), level, internalformat, width, height, border, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTextureImage2DMultisampleCoverageNV)(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
static __ctype_glTextureImage2DMultisampleCoverageNV __glintercept_fnptr_glTextureImage2DMultisampleCoverageNV;
void __glintercept_glTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {
  __glintercept_fnptr_glTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
  __glintercept_log(" - glTextureImage2DMultisampleCoverageNV(texture: %ld, target: %ld (%s), coverageSamples: %ld, colorSamples: %ld, internalFormat: %ld, width: %ld, height: %ld, fixedSampleLocations: %ld)", texture, target, __gl_intercept_formatenum(target), coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}

typedef void(*__ctype_glTextureImage2DMultisampleNV)(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
static __ctype_glTextureImage2DMultisampleNV __glintercept_fnptr_glTextureImage2DMultisampleNV;
void __glintercept_glTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {
  __glintercept_fnptr_glTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
  __glintercept_log(" - glTextureImage2DMultisampleNV(texture: %ld, target: %ld (%s), samples: %ld, internalFormat: %ld, width: %ld, height: %ld, fixedSampleLocations: %ld)", texture, target, __gl_intercept_formatenum(target), samples, internalFormat, width, height, fixedSampleLocations);
}

typedef void(*__ctype_glTextureImage3DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
static __ctype_glTextureImage3DEXT __glintercept_fnptr_glTextureImage3DEXT;
void __glintercept_glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
  __glintercept_log(" - glTextureImage3DEXT(texture: %ld, target: %ld (%s), level: %ld, internalformat: %ld, width: %ld, height: %ld, depth: %ld, border: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", texture, target, __gl_intercept_formatenum(target), level, internalformat, width, height, depth, border, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTextureImage3DMultisampleCoverageNV)(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
static __ctype_glTextureImage3DMultisampleCoverageNV __glintercept_fnptr_glTextureImage3DMultisampleCoverageNV;
void __glintercept_glTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {
  __glintercept_fnptr_glTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
  __glintercept_log(" - glTextureImage3DMultisampleCoverageNV(texture: %ld, target: %ld (%s), coverageSamples: %ld, colorSamples: %ld, internalFormat: %ld, width: %ld, height: %ld, depth: %ld, fixedSampleLocations: %ld)", texture, target, __gl_intercept_formatenum(target), coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}

typedef void(*__ctype_glTextureImage3DMultisampleNV)(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
static __ctype_glTextureImage3DMultisampleNV __glintercept_fnptr_glTextureImage3DMultisampleNV;
void __glintercept_glTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {
  __glintercept_fnptr_glTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
  __glintercept_log(" - glTextureImage3DMultisampleNV(texture: %ld, target: %ld (%s), samples: %ld, internalFormat: %ld, width: %ld, height: %ld, depth: %ld, fixedSampleLocations: %ld)", texture, target, __gl_intercept_formatenum(target), samples, internalFormat, width, height, depth, fixedSampleLocations);
}

typedef void(*__ctype_glTextureLightEXT)(GLenum);
static __ctype_glTextureLightEXT __glintercept_fnptr_glTextureLightEXT;
void __glintercept_glTextureLightEXT(GLenum pname) {
  __glintercept_fnptr_glTextureLightEXT(pname);
  __glintercept_log(" - glTextureLightEXT(pname: %ld (%s))", pname, __gl_intercept_formatenum(pname));
}

typedef void(*__ctype_glTextureMaterialEXT)(GLenum, GLenum);
static __ctype_glTextureMaterialEXT __glintercept_fnptr_glTextureMaterialEXT;
void __glintercept_glTextureMaterialEXT(GLenum face, GLenum mode) {
  __glintercept_fnptr_glTextureMaterialEXT(face, mode);
  __glintercept_log(" - glTextureMaterialEXT(face: %ld (%s), mode: %ld (%s))", face, __gl_intercept_formatenum(face), mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glTextureNormalEXT)(GLenum);
static __ctype_glTextureNormalEXT __glintercept_fnptr_glTextureNormalEXT;
void __glintercept_glTextureNormalEXT(GLenum mode) {
  __glintercept_fnptr_glTextureNormalEXT(mode);
  __glintercept_log(" - glTextureNormalEXT(mode: %ld (%s))", mode, __gl_intercept_formatenum(mode));
}

typedef void(*__ctype_glTexturePageCommitmentEXT)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
static __ctype_glTexturePageCommitmentEXT __glintercept_fnptr_glTexturePageCommitmentEXT;
void __glintercept_glTexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) {
  __glintercept_fnptr_glTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
  __glintercept_log(" - glTexturePageCommitmentEXT(texture: %ld, level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld, commit: %ld)", texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
}

typedef void(*__ctype_glTexturePageCommitmentMemNV)(GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLuint, GLuint64, GLboolean);
static __ctype_glTexturePageCommitmentMemNV __glintercept_fnptr_glTexturePageCommitmentMemNV;
void __glintercept_glTexturePageCommitmentMemNV(GLuint texture, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit) {
  __glintercept_fnptr_glTexturePageCommitmentMemNV(texture, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
  __glintercept_log(" - glTexturePageCommitmentMemNV(texture: %ld, layer: %ld, level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld, memory: %ld, offset: %ld, commit: %ld)", texture, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
}

typedef void(*__ctype_glTextureParameterIiv)(GLuint, GLenum, const GLint *);
static __ctype_glTextureParameterIiv __glintercept_fnptr_glTextureParameterIiv;
void __glintercept_glTextureParameterIiv(GLuint texture, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glTextureParameterIiv(texture, pname, params);
  __glintercept_log(" - glTextureParameterIiv(texture: %ld, pname: %ld (%s), params: %ld)", texture, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTextureParameterIivEXT)(GLuint, GLenum, GLenum, const GLint *);
static __ctype_glTextureParameterIivEXT __glintercept_fnptr_glTextureParameterIivEXT;
void __glintercept_glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glTextureParameterIivEXT(texture, target, pname, params);
  __glintercept_log(" - glTextureParameterIivEXT(texture: %ld, target: %ld (%s), pname: %ld (%s), params: %ld)", texture, target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTextureParameterIuiv)(GLuint, GLenum, const GLuint *);
static __ctype_glTextureParameterIuiv __glintercept_fnptr_glTextureParameterIuiv;
void __glintercept_glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint * params) {
  __glintercept_fnptr_glTextureParameterIuiv(texture, pname, params);
  __glintercept_log(" - glTextureParameterIuiv(texture: %ld, pname: %ld (%s), params: %ld)", texture, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTextureParameterIuivEXT)(GLuint, GLenum, GLenum, const GLuint *);
static __ctype_glTextureParameterIuivEXT __glintercept_fnptr_glTextureParameterIuivEXT;
void __glintercept_glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint * params) {
  __glintercept_fnptr_glTextureParameterIuivEXT(texture, target, pname, params);
  __glintercept_log(" - glTextureParameterIuivEXT(texture: %ld, target: %ld (%s), pname: %ld (%s), params: %ld)", texture, target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTextureParameterf)(GLuint, GLenum, GLfloat);
static __ctype_glTextureParameterf __glintercept_fnptr_glTextureParameterf;
void __glintercept_glTextureParameterf(GLuint texture, GLenum pname, GLfloat param) {
  __glintercept_fnptr_glTextureParameterf(texture, pname, param);
  __glintercept_log(" - glTextureParameterf(texture: %ld, pname: %ld (%s), param: %ld)", texture, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glTextureParameterfEXT)(GLuint, GLenum, GLenum, GLfloat);
static __ctype_glTextureParameterfEXT __glintercept_fnptr_glTextureParameterfEXT;
void __glintercept_glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param) {
  __glintercept_fnptr_glTextureParameterfEXT(texture, target, pname, param);
  __glintercept_log(" - glTextureParameterfEXT(texture: %ld, target: %ld (%s), pname: %ld (%s), param: %ld)", texture, target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glTextureParameterfv)(GLuint, GLenum, const GLfloat *);
static __ctype_glTextureParameterfv __glintercept_fnptr_glTextureParameterfv;
void __glintercept_glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat * param) {
  __glintercept_fnptr_glTextureParameterfv(texture, pname, param);
  __glintercept_log(" - glTextureParameterfv(texture: %ld, pname: %ld (%s), param: %ld)", texture, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glTextureParameterfvEXT)(GLuint, GLenum, GLenum, const GLfloat *);
static __ctype_glTextureParameterfvEXT __glintercept_fnptr_glTextureParameterfvEXT;
void __glintercept_glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glTextureParameterfvEXT(texture, target, pname, params);
  __glintercept_log(" - glTextureParameterfvEXT(texture: %ld, target: %ld (%s), pname: %ld (%s), params: %ld)", texture, target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTextureParameteri)(GLuint, GLenum, GLint);
static __ctype_glTextureParameteri __glintercept_fnptr_glTextureParameteri;
void __glintercept_glTextureParameteri(GLuint texture, GLenum pname, GLint param) {
  __glintercept_fnptr_glTextureParameteri(texture, pname, param);
  __glintercept_log(" - glTextureParameteri(texture: %ld, pname: %ld (%s), param: %ld)", texture, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glTextureParameteriEXT)(GLuint, GLenum, GLenum, GLint);
static __ctype_glTextureParameteriEXT __glintercept_fnptr_glTextureParameteriEXT;
void __glintercept_glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param) {
  __glintercept_fnptr_glTextureParameteriEXT(texture, target, pname, param);
  __glintercept_log(" - glTextureParameteriEXT(texture: %ld, target: %ld (%s), pname: %ld (%s), param: %ld)", texture, target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glTextureParameteriv)(GLuint, GLenum, const GLint *);
static __ctype_glTextureParameteriv __glintercept_fnptr_glTextureParameteriv;
void __glintercept_glTextureParameteriv(GLuint texture, GLenum pname, const GLint * param) {
  __glintercept_fnptr_glTextureParameteriv(texture, pname, param);
  __glintercept_log(" - glTextureParameteriv(texture: %ld, pname: %ld (%s), param: %ld)", texture, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glTextureParameterivEXT)(GLuint, GLenum, GLenum, const GLint *);
static __ctype_glTextureParameterivEXT __glintercept_fnptr_glTextureParameterivEXT;
void __glintercept_glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glTextureParameterivEXT(texture, target, pname, params);
  __glintercept_log(" - glTextureParameterivEXT(texture: %ld, target: %ld (%s), pname: %ld (%s), params: %ld)", texture, target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glTextureRangeAPPLE)(GLenum, GLsizei, const void *);
static __ctype_glTextureRangeAPPLE __glintercept_fnptr_glTextureRangeAPPLE;
void __glintercept_glTextureRangeAPPLE(GLenum target, GLsizei length, const void * pointer) {
  __glintercept_fnptr_glTextureRangeAPPLE(target, length, pointer);
  __glintercept_log(" - glTextureRangeAPPLE(target: %ld (%s), length: %ld, pointer: %ld)", target, __gl_intercept_formatenum(target), length, pointer);
}

typedef void(*__ctype_glTextureRenderbufferEXT)(GLuint, GLenum, GLuint);
static __ctype_glTextureRenderbufferEXT __glintercept_fnptr_glTextureRenderbufferEXT;
void __glintercept_glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer) {
  __glintercept_fnptr_glTextureRenderbufferEXT(texture, target, renderbuffer);
  __glintercept_log(" - glTextureRenderbufferEXT(texture: %ld, target: %ld (%s), renderbuffer: %ld)", texture, target, __gl_intercept_formatenum(target), renderbuffer);
}

typedef void(*__ctype_glTextureStorage1D)(GLuint, GLsizei, GLenum, GLsizei);
static __ctype_glTextureStorage1D __glintercept_fnptr_glTextureStorage1D;
void __glintercept_glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) {
  __glintercept_fnptr_glTextureStorage1D(texture, levels, internalformat, width);
  __glintercept_log(" - glTextureStorage1D(texture: %ld, levels: %ld, internalformat: %ld (%s), width: %ld)", texture, levels, internalformat, __gl_intercept_formatenum(internalformat), width);
}

typedef void(*__ctype_glTextureStorage1DEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei);
static __ctype_glTextureStorage1DEXT __glintercept_fnptr_glTextureStorage1DEXT;
void __glintercept_glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
  __glintercept_fnptr_glTextureStorage1DEXT(texture, target, levels, internalformat, width);
  __glintercept_log(" - glTextureStorage1DEXT(texture: %ld, target: %ld (%s), levels: %ld, internalformat: %ld (%s), width: %ld)", texture, target, __gl_intercept_formatenum(target), levels, internalformat, __gl_intercept_formatenum(internalformat), width);
}

typedef void(*__ctype_glTextureStorage2D)(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
static __ctype_glTextureStorage2D __glintercept_fnptr_glTextureStorage2D;
void __glintercept_glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glTextureStorage2D(texture, levels, internalformat, width, height);
  __glintercept_log(" - glTextureStorage2D(texture: %ld, levels: %ld, internalformat: %ld (%s), width: %ld, height: %ld)", texture, levels, internalformat, __gl_intercept_formatenum(internalformat), width, height);
}

typedef void(*__ctype_glTextureStorage2DEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei);
static __ctype_glTextureStorage2DEXT __glintercept_fnptr_glTextureStorage2DEXT;
void __glintercept_glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glTextureStorage2DEXT(texture, target, levels, internalformat, width, height);
  __glintercept_log(" - glTextureStorage2DEXT(texture: %ld, target: %ld (%s), levels: %ld, internalformat: %ld (%s), width: %ld, height: %ld)", texture, target, __gl_intercept_formatenum(target), levels, internalformat, __gl_intercept_formatenum(internalformat), width, height);
}

typedef void(*__ctype_glTextureStorage2DMultisample)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
static __ctype_glTextureStorage2DMultisample __glintercept_fnptr_glTextureStorage2DMultisample;
void __glintercept_glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  __glintercept_fnptr_glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations);
  __glintercept_log(" - glTextureStorage2DMultisample(texture: %ld, samples: %ld, internalformat: %ld (%s), width: %ld, height: %ld, fixedsamplelocations: %ld)", texture, samples, internalformat, __gl_intercept_formatenum(internalformat), width, height, fixedsamplelocations);
}

typedef void(*__ctype_glTextureStorage2DMultisampleEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
static __ctype_glTextureStorage2DMultisampleEXT __glintercept_fnptr_glTextureStorage2DMultisampleEXT;
void __glintercept_glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  __glintercept_fnptr_glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations);
  __glintercept_log(" - glTextureStorage2DMultisampleEXT(texture: %ld, target: %ld (%s), samples: %ld, internalformat: %ld (%s), width: %ld, height: %ld, fixedsamplelocations: %ld)", texture, target, __gl_intercept_formatenum(target), samples, internalformat, __gl_intercept_formatenum(internalformat), width, height, fixedsamplelocations);
}

typedef void(*__ctype_glTextureStorage3D)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
static __ctype_glTextureStorage3D __glintercept_fnptr_glTextureStorage3D;
void __glintercept_glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  __glintercept_fnptr_glTextureStorage3D(texture, levels, internalformat, width, height, depth);
  __glintercept_log(" - glTextureStorage3D(texture: %ld, levels: %ld, internalformat: %ld (%s), width: %ld, height: %ld, depth: %ld)", texture, levels, internalformat, __gl_intercept_formatenum(internalformat), width, height, depth);
}

typedef void(*__ctype_glTextureStorage3DEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
static __ctype_glTextureStorage3DEXT __glintercept_fnptr_glTextureStorage3DEXT;
void __glintercept_glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  __glintercept_fnptr_glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth);
  __glintercept_log(" - glTextureStorage3DEXT(texture: %ld, target: %ld (%s), levels: %ld, internalformat: %ld (%s), width: %ld, height: %ld, depth: %ld)", texture, target, __gl_intercept_formatenum(target), levels, internalformat, __gl_intercept_formatenum(internalformat), width, height, depth);
}

typedef void(*__ctype_glTextureStorage3DMultisample)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
static __ctype_glTextureStorage3DMultisample __glintercept_fnptr_glTextureStorage3DMultisample;
void __glintercept_glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  __glintercept_fnptr_glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
  __glintercept_log(" - glTextureStorage3DMultisample(texture: %ld, samples: %ld, internalformat: %ld (%s), width: %ld, height: %ld, depth: %ld, fixedsamplelocations: %ld)", texture, samples, internalformat, __gl_intercept_formatenum(internalformat), width, height, depth, fixedsamplelocations);
}

typedef void(*__ctype_glTextureStorage3DMultisampleEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
static __ctype_glTextureStorage3DMultisampleEXT __glintercept_fnptr_glTextureStorage3DMultisampleEXT;
void __glintercept_glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  __glintercept_fnptr_glTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
  __glintercept_log(" - glTextureStorage3DMultisampleEXT(texture: %ld, target: %ld (%s), samples: %ld, internalformat: %ld (%s), width: %ld, height: %ld, depth: %ld, fixedsamplelocations: %ld)", texture, target, __gl_intercept_formatenum(target), samples, internalformat, __gl_intercept_formatenum(internalformat), width, height, depth, fixedsamplelocations);
}

typedef void(*__ctype_glTextureStorageMem1DEXT)(GLuint, GLsizei, GLenum, GLsizei, GLuint, GLuint64);
static __ctype_glTextureStorageMem1DEXT __glintercept_fnptr_glTextureStorageMem1DEXT;
void __glintercept_glTextureStorageMem1DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) {
  __glintercept_fnptr_glTextureStorageMem1DEXT(texture, levels, internalFormat, width, memory, offset);
  __glintercept_log(" - glTextureStorageMem1DEXT(texture: %ld, levels: %ld, internalFormat: %ld (%s), width: %ld, memory: %ld, offset: %ld)", texture, levels, internalFormat, __gl_intercept_formatenum(internalFormat), width, memory, offset);
}

typedef void(*__ctype_glTextureStorageMem2DEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64);
static __ctype_glTextureStorageMem2DEXT __glintercept_fnptr_glTextureStorageMem2DEXT;
void __glintercept_glTextureStorageMem2DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) {
  __glintercept_fnptr_glTextureStorageMem2DEXT(texture, levels, internalFormat, width, height, memory, offset);
  __glintercept_log(" - glTextureStorageMem2DEXT(texture: %ld, levels: %ld, internalFormat: %ld (%s), width: %ld, height: %ld, memory: %ld, offset: %ld)", texture, levels, internalFormat, __gl_intercept_formatenum(internalFormat), width, height, memory, offset);
}

typedef void(*__ctype_glTextureStorageMem2DMultisampleEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
static __ctype_glTextureStorageMem2DMultisampleEXT __glintercept_fnptr_glTextureStorageMem2DMultisampleEXT;
void __glintercept_glTextureStorageMem2DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
  __glintercept_fnptr_glTextureStorageMem2DMultisampleEXT(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
  __glintercept_log(" - glTextureStorageMem2DMultisampleEXT(texture: %ld, samples: %ld, internalFormat: %ld (%s), width: %ld, height: %ld, fixedSampleLocations: %ld, memory: %ld, offset: %ld)", texture, samples, internalFormat, __gl_intercept_formatenum(internalFormat), width, height, fixedSampleLocations, memory, offset);
}

typedef void(*__ctype_glTextureStorageMem3DEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64);
static __ctype_glTextureStorageMem3DEXT __glintercept_fnptr_glTextureStorageMem3DEXT;
void __glintercept_glTextureStorageMem3DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) {
  __glintercept_fnptr_glTextureStorageMem3DEXT(texture, levels, internalFormat, width, height, depth, memory, offset);
  __glintercept_log(" - glTextureStorageMem3DEXT(texture: %ld, levels: %ld, internalFormat: %ld (%s), width: %ld, height: %ld, depth: %ld, memory: %ld, offset: %ld)", texture, levels, internalFormat, __gl_intercept_formatenum(internalFormat), width, height, depth, memory, offset);
}

typedef void(*__ctype_glTextureStorageMem3DMultisampleEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
static __ctype_glTextureStorageMem3DMultisampleEXT __glintercept_fnptr_glTextureStorageMem3DMultisampleEXT;
void __glintercept_glTextureStorageMem3DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
  __glintercept_fnptr_glTextureStorageMem3DMultisampleEXT(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
  __glintercept_log(" - glTextureStorageMem3DMultisampleEXT(texture: %ld, samples: %ld, internalFormat: %ld (%s), width: %ld, height: %ld, depth: %ld, fixedSampleLocations: %ld, memory: %ld, offset: %ld)", texture, samples, internalFormat, __gl_intercept_formatenum(internalFormat), width, height, depth, fixedSampleLocations, memory, offset);
}

typedef void(*__ctype_glTextureStorageSparseAMD)(GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield);
static __ctype_glTextureStorageSparseAMD __glintercept_fnptr_glTextureStorageSparseAMD;
void __glintercept_glTextureStorageSparseAMD(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) {
  __glintercept_fnptr_glTextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags);
  __glintercept_log(" - glTextureStorageSparseAMD(texture: %ld, target: %ld (%s), internalFormat: %ld (%s), width: %ld, height: %ld, depth: %ld, layers: %ld, flags: %ld)", texture, target, __gl_intercept_formatenum(target), internalFormat, __gl_intercept_formatenum(internalFormat), width, height, depth, layers, flags);
}

typedef void(*__ctype_glTextureSubImage1D)(GLuint, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
static __ctype_glTextureSubImage1D __glintercept_fnptr_glTextureSubImage1D;
void __glintercept_glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels);
  __glintercept_log(" - glTextureSubImage1D(texture: %ld, level: %ld, xoffset: %ld, width: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", texture, level, xoffset, width, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTextureSubImage1DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
static __ctype_glTextureSubImage1DEXT __glintercept_fnptr_glTextureSubImage1DEXT;
void __glintercept_glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels);
  __glintercept_log(" - glTextureSubImage1DEXT(texture: %ld, target: %ld (%s), level: %ld, xoffset: %ld, width: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", texture, target, __gl_intercept_formatenum(target), level, xoffset, width, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTextureSubImage2D)(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
static __ctype_glTextureSubImage2D __glintercept_fnptr_glTextureSubImage2D;
void __glintercept_glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);
  __glintercept_log(" - glTextureSubImage2D(texture: %ld, level: %ld, xoffset: %ld, yoffset: %ld, width: %ld, height: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", texture, level, xoffset, yoffset, width, height, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTextureSubImage2DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
static __ctype_glTextureSubImage2DEXT __glintercept_fnptr_glTextureSubImage2DEXT;
void __glintercept_glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
  __glintercept_log(" - glTextureSubImage2DEXT(texture: %ld, target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, width: %ld, height: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", texture, target, __gl_intercept_formatenum(target), level, xoffset, yoffset, width, height, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTextureSubImage3D)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
static __ctype_glTextureSubImage3D __glintercept_fnptr_glTextureSubImage3D;
void __glintercept_glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  __glintercept_log(" - glTextureSubImage3D(texture: %ld, level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", texture, level, xoffset, yoffset, zoffset, width, height, depth, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTextureSubImage3DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
static __ctype_glTextureSubImage3DEXT __glintercept_fnptr_glTextureSubImage3DEXT;
void __glintercept_glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) {
  __glintercept_fnptr_glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  __glintercept_log(" - glTextureSubImage3DEXT(texture: %ld, target: %ld (%s), level: %ld, xoffset: %ld, yoffset: %ld, zoffset: %ld, width: %ld, height: %ld, depth: %ld, format: %ld (%s), type: %ld (%s), pixels: %ld)", texture, target, __gl_intercept_formatenum(target), level, xoffset, yoffset, zoffset, width, height, depth, format, __gl_intercept_formatenum(format), type, __gl_intercept_formatenum(type), pixels);
}

typedef void(*__ctype_glTextureView)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
static __ctype_glTextureView __glintercept_fnptr_glTextureView;
void __glintercept_glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) {
  __glintercept_fnptr_glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  __glintercept_log(" - glTextureView(texture: %ld, target: %ld (%s), origtexture: %ld, internalformat: %ld (%s), minlevel: %ld, numlevels: %ld, minlayer: %ld, numlayers: %ld)", texture, target, __gl_intercept_formatenum(target), origtexture, internalformat, __gl_intercept_formatenum(internalformat), minlevel, numlevels, minlayer, numlayers);
}

typedef void(*__ctype_glTextureViewEXT)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
static __ctype_glTextureViewEXT __glintercept_fnptr_glTextureViewEXT;
void __glintercept_glTextureViewEXT(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) {
  __glintercept_fnptr_glTextureViewEXT(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  __glintercept_log(" - glTextureViewEXT(texture: %ld, target: %ld (%s), origtexture: %ld, internalformat: %ld (%s), minlevel: %ld, numlevels: %ld, minlayer: %ld, numlayers: %ld)", texture, target, __gl_intercept_formatenum(target), origtexture, internalformat, __gl_intercept_formatenum(internalformat), minlevel, numlevels, minlayer, numlayers);
}

typedef void(*__ctype_glTextureViewOES)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
static __ctype_glTextureViewOES __glintercept_fnptr_glTextureViewOES;
void __glintercept_glTextureViewOES(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) {
  __glintercept_fnptr_glTextureViewOES(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  __glintercept_log(" - glTextureViewOES(texture: %ld, target: %ld (%s), origtexture: %ld, internalformat: %ld (%s), minlevel: %ld, numlevels: %ld, minlayer: %ld, numlayers: %ld)", texture, target, __gl_intercept_formatenum(target), origtexture, internalformat, __gl_intercept_formatenum(internalformat), minlevel, numlevels, minlayer, numlayers);
}

typedef void(*__ctype_glTrackMatrixNV)(GLenum, GLuint, GLenum, GLenum);
static __ctype_glTrackMatrixNV __glintercept_fnptr_glTrackMatrixNV;
void __glintercept_glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform) {
  __glintercept_fnptr_glTrackMatrixNV(target, address, matrix, transform);
  __glintercept_log(" - glTrackMatrixNV(target: %ld (%s), address: %ld, matrix: %ld (%s), transform: %ld (%s))", target, __gl_intercept_formatenum(target), address, matrix, __gl_intercept_formatenum(matrix), transform, __gl_intercept_formatenum(transform));
}

typedef void(*__ctype_glTransformFeedbackAttribsNV)(GLsizei, const GLint *, GLenum);
static __ctype_glTransformFeedbackAttribsNV __glintercept_fnptr_glTransformFeedbackAttribsNV;
void __glintercept_glTransformFeedbackAttribsNV(GLsizei count, const GLint * attribs, GLenum bufferMode) {
  __glintercept_fnptr_glTransformFeedbackAttribsNV(count, attribs, bufferMode);
  __glintercept_log(" - glTransformFeedbackAttribsNV(count: %ld, attribs: %ld, bufferMode: %ld (%s))", count, attribs, bufferMode, __gl_intercept_formatenum(bufferMode));
}

typedef void(*__ctype_glTransformFeedbackBufferBase)(GLuint, GLuint, GLuint);
static __ctype_glTransformFeedbackBufferBase __glintercept_fnptr_glTransformFeedbackBufferBase;
void __glintercept_glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer) {
  __glintercept_fnptr_glTransformFeedbackBufferBase(xfb, index, buffer);
  __glintercept_log(" - glTransformFeedbackBufferBase(xfb: %ld, index: %ld, buffer: %ld)", xfb, index, buffer);
}

typedef void(*__ctype_glTransformFeedbackBufferRange)(GLuint, GLuint, GLuint, GLintptr, GLsizeiptr);
static __ctype_glTransformFeedbackBufferRange __glintercept_fnptr_glTransformFeedbackBufferRange;
void __glintercept_glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  __glintercept_fnptr_glTransformFeedbackBufferRange(xfb, index, buffer, offset, size);
  __glintercept_log(" - glTransformFeedbackBufferRange(xfb: %ld, index: %ld, buffer: %ld, offset: %ld, size: %ld)", xfb, index, buffer, offset, size);
}

typedef void(*__ctype_glTransformFeedbackStreamAttribsNV)(GLsizei, const GLint *, GLsizei, const GLint *, GLenum);
static __ctype_glTransformFeedbackStreamAttribsNV __glintercept_fnptr_glTransformFeedbackStreamAttribsNV;
void __glintercept_glTransformFeedbackStreamAttribsNV(GLsizei count, const GLint * attribs, GLsizei nbuffers, const GLint * bufstreams, GLenum bufferMode) {
  __glintercept_fnptr_glTransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode);
  __glintercept_log(" - glTransformFeedbackStreamAttribsNV(count: %ld, attribs: %ld, nbuffers: %ld, bufstreams: %ld, bufferMode: %ld (%s))", count, attribs, nbuffers, bufstreams, bufferMode, __gl_intercept_formatenum(bufferMode));
}

typedef void(*__ctype_glTransformFeedbackVaryings)(GLuint, GLsizei, const GLchar *const*, GLenum);
static __ctype_glTransformFeedbackVaryings __glintercept_fnptr_glTransformFeedbackVaryings;
void __glintercept_glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode) {
  __glintercept_fnptr_glTransformFeedbackVaryings(program, count, varyings, bufferMode);
  __glintercept_log(" - glTransformFeedbackVaryings(program: %ld, count: %ld, varyings: %ld, bufferMode: %ld (%s))", program, count, varyings, bufferMode, __gl_intercept_formatenum(bufferMode));
}

typedef void(*__ctype_glTransformFeedbackVaryingsEXT)(GLuint, GLsizei, const GLchar *const*, GLenum);
static __ctype_glTransformFeedbackVaryingsEXT __glintercept_fnptr_glTransformFeedbackVaryingsEXT;
void __glintercept_glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode) {
  __glintercept_fnptr_glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode);
  __glintercept_log(" - glTransformFeedbackVaryingsEXT(program: %ld, count: %ld, varyings: %ld, bufferMode: %ld (%s))", program, count, varyings, bufferMode, __gl_intercept_formatenum(bufferMode));
}

typedef void(*__ctype_glTransformFeedbackVaryingsNV)(GLuint, GLsizei, const GLint *, GLenum);
static __ctype_glTransformFeedbackVaryingsNV __glintercept_fnptr_glTransformFeedbackVaryingsNV;
void __glintercept_glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint * locations, GLenum bufferMode) {
  __glintercept_fnptr_glTransformFeedbackVaryingsNV(program, count, locations, bufferMode);
  __glintercept_log(" - glTransformFeedbackVaryingsNV(program: %ld, count: %ld, locations: %ld, bufferMode: %ld (%s))", program, count, locations, bufferMode, __gl_intercept_formatenum(bufferMode));
}

typedef void(*__ctype_glTransformPathNV)(GLuint, GLuint, GLenum, const GLfloat *);
static __ctype_glTransformPathNV __glintercept_fnptr_glTransformPathNV;
void __glintercept_glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat * transformValues) {
  __glintercept_fnptr_glTransformPathNV(resultPath, srcPath, transformType, transformValues);
  __glintercept_log(" - glTransformPathNV(resultPath: %ld, srcPath: %ld, transformType: %ld (%s), transformValues: %ld)", resultPath, srcPath, transformType, __gl_intercept_formatenum(transformType), transformValues);
}

typedef void(*__ctype_glTranslated)(GLdouble, GLdouble, GLdouble);
static __ctype_glTranslated __glintercept_fnptr_glTranslated;
void __glintercept_glTranslated(GLdouble x, GLdouble y, GLdouble z) {
  __glintercept_fnptr_glTranslated(x, y, z);
  __glintercept_log(" - glTranslated(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glTranslatef)(GLfloat, GLfloat, GLfloat);
static __ctype_glTranslatef __glintercept_fnptr_glTranslatef;
void __glintercept_glTranslatef(GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glTranslatef(x, y, z);
  __glintercept_log(" - glTranslatef(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glTranslatex)(GLfixed, GLfixed, GLfixed);
static __ctype_glTranslatex __glintercept_fnptr_glTranslatex;
void __glintercept_glTranslatex(GLfixed x, GLfixed y, GLfixed z) {
  __glintercept_fnptr_glTranslatex(x, y, z);
  __glintercept_log(" - glTranslatex(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glTranslatexOES)(GLfixed, GLfixed, GLfixed);
static __ctype_glTranslatexOES __glintercept_fnptr_glTranslatexOES;
void __glintercept_glTranslatexOES(GLfixed x, GLfixed y, GLfixed z) {
  __glintercept_fnptr_glTranslatexOES(x, y, z);
  __glintercept_log(" - glTranslatexOES(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glUniform1d)(GLint, GLdouble);
static __ctype_glUniform1d __glintercept_fnptr_glUniform1d;
void __glintercept_glUniform1d(GLint location, GLdouble x) {
  __glintercept_fnptr_glUniform1d(location, x);
  __glintercept_log(" - glUniform1d(location: %ld, x: %ld)", location, x);
}

typedef void(*__ctype_glUniform1dv)(GLint, GLsizei, const GLdouble *);
static __ctype_glUniform1dv __glintercept_fnptr_glUniform1dv;
void __glintercept_glUniform1dv(GLint location, GLsizei count, const GLdouble * value) {
  __glintercept_fnptr_glUniform1dv(location, count, value);
  __glintercept_log(" - glUniform1dv(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform1f)(GLint, GLfloat);
static __ctype_glUniform1f __glintercept_fnptr_glUniform1f;
void __glintercept_glUniform1f(GLint location, GLfloat v0) {
  __glintercept_fnptr_glUniform1f(location, v0);
  __glintercept_log(" - glUniform1f(location: %ld, v0: %ld)", location, v0);
}

typedef void(*__ctype_glUniform1fARB)(GLint, GLfloat);
static __ctype_glUniform1fARB __glintercept_fnptr_glUniform1fARB;
void __glintercept_glUniform1fARB(GLint location, GLfloat v0) {
  __glintercept_fnptr_glUniform1fARB(location, v0);
  __glintercept_log(" - glUniform1fARB(location: %ld, v0: %ld)", location, v0);
}

typedef void(*__ctype_glUniform1fv)(GLint, GLsizei, const GLfloat *);
static __ctype_glUniform1fv __glintercept_fnptr_glUniform1fv;
void __glintercept_glUniform1fv(GLint location, GLsizei count, const GLfloat * value) {
  __glintercept_fnptr_glUniform1fv(location, count, value);
  __glintercept_log(" - glUniform1fv(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform1fvARB)(GLint, GLsizei, const GLfloat *);
static __ctype_glUniform1fvARB __glintercept_fnptr_glUniform1fvARB;
void __glintercept_glUniform1fvARB(GLint location, GLsizei count, const GLfloat * value) {
  __glintercept_fnptr_glUniform1fvARB(location, count, value);
  __glintercept_log(" - glUniform1fvARB(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform1i)(GLint, GLint);
static __ctype_glUniform1i __glintercept_fnptr_glUniform1i;
void __glintercept_glUniform1i(GLint location, GLint v0) {
  __glintercept_fnptr_glUniform1i(location, v0);
  __glintercept_log(" - glUniform1i(location: %ld, v0: %ld)", location, v0);
}

typedef void(*__ctype_glUniform1i64ARB)(GLint, GLint64);
static __ctype_glUniform1i64ARB __glintercept_fnptr_glUniform1i64ARB;
void __glintercept_glUniform1i64ARB(GLint location, GLint64 x) {
  __glintercept_fnptr_glUniform1i64ARB(location, x);
  __glintercept_log(" - glUniform1i64ARB(location: %ld, x: %ld)", location, x);
}

typedef void(*__ctype_glUniform1i64NV)(GLint, GLint64EXT);
static __ctype_glUniform1i64NV __glintercept_fnptr_glUniform1i64NV;
void __glintercept_glUniform1i64NV(GLint location, GLint64EXT x) {
  __glintercept_fnptr_glUniform1i64NV(location, x);
  __glintercept_log(" - glUniform1i64NV(location: %ld, x: %ld)", location, x);
}

typedef void(*__ctype_glUniform1i64vARB)(GLint, GLsizei, const GLint64 *);
static __ctype_glUniform1i64vARB __glintercept_fnptr_glUniform1i64vARB;
void __glintercept_glUniform1i64vARB(GLint location, GLsizei count, const GLint64 * value) {
  __glintercept_fnptr_glUniform1i64vARB(location, count, value);
  __glintercept_log(" - glUniform1i64vARB(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform1i64vNV)(GLint, GLsizei, const GLint64EXT *);
static __ctype_glUniform1i64vNV __glintercept_fnptr_glUniform1i64vNV;
void __glintercept_glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT * value) {
  __glintercept_fnptr_glUniform1i64vNV(location, count, value);
  __glintercept_log(" - glUniform1i64vNV(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform1iARB)(GLint, GLint);
static __ctype_glUniform1iARB __glintercept_fnptr_glUniform1iARB;
void __glintercept_glUniform1iARB(GLint location, GLint v0) {
  __glintercept_fnptr_glUniform1iARB(location, v0);
  __glintercept_log(" - glUniform1iARB(location: %ld, v0: %ld)", location, v0);
}

typedef void(*__ctype_glUniform1iv)(GLint, GLsizei, const GLint *);
static __ctype_glUniform1iv __glintercept_fnptr_glUniform1iv;
void __glintercept_glUniform1iv(GLint location, GLsizei count, const GLint * value) {
  __glintercept_fnptr_glUniform1iv(location, count, value);
  __glintercept_log(" - glUniform1iv(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform1ivARB)(GLint, GLsizei, const GLint *);
static __ctype_glUniform1ivARB __glintercept_fnptr_glUniform1ivARB;
void __glintercept_glUniform1ivARB(GLint location, GLsizei count, const GLint * value) {
  __glintercept_fnptr_glUniform1ivARB(location, count, value);
  __glintercept_log(" - glUniform1ivARB(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform1ui)(GLint, GLuint);
static __ctype_glUniform1ui __glintercept_fnptr_glUniform1ui;
void __glintercept_glUniform1ui(GLint location, GLuint v0) {
  __glintercept_fnptr_glUniform1ui(location, v0);
  __glintercept_log(" - glUniform1ui(location: %ld, v0: %ld)", location, v0);
}

typedef void(*__ctype_glUniform1ui64ARB)(GLint, GLuint64);
static __ctype_glUniform1ui64ARB __glintercept_fnptr_glUniform1ui64ARB;
void __glintercept_glUniform1ui64ARB(GLint location, GLuint64 x) {
  __glintercept_fnptr_glUniform1ui64ARB(location, x);
  __glintercept_log(" - glUniform1ui64ARB(location: %ld, x: %ld)", location, x);
}

typedef void(*__ctype_glUniform1ui64NV)(GLint, GLuint64EXT);
static __ctype_glUniform1ui64NV __glintercept_fnptr_glUniform1ui64NV;
void __glintercept_glUniform1ui64NV(GLint location, GLuint64EXT x) {
  __glintercept_fnptr_glUniform1ui64NV(location, x);
  __glintercept_log(" - glUniform1ui64NV(location: %ld, x: %ld)", location, x);
}

typedef void(*__ctype_glUniform1ui64vARB)(GLint, GLsizei, const GLuint64 *);
static __ctype_glUniform1ui64vARB __glintercept_fnptr_glUniform1ui64vARB;
void __glintercept_glUniform1ui64vARB(GLint location, GLsizei count, const GLuint64 * value) {
  __glintercept_fnptr_glUniform1ui64vARB(location, count, value);
  __glintercept_log(" - glUniform1ui64vARB(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform1ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
static __ctype_glUniform1ui64vNV __glintercept_fnptr_glUniform1ui64vNV;
void __glintercept_glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) {
  __glintercept_fnptr_glUniform1ui64vNV(location, count, value);
  __glintercept_log(" - glUniform1ui64vNV(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform1uiEXT)(GLint, GLuint);
static __ctype_glUniform1uiEXT __glintercept_fnptr_glUniform1uiEXT;
void __glintercept_glUniform1uiEXT(GLint location, GLuint v0) {
  __glintercept_fnptr_glUniform1uiEXT(location, v0);
  __glintercept_log(" - glUniform1uiEXT(location: %ld, v0: %ld)", location, v0);
}

typedef void(*__ctype_glUniform1uiv)(GLint, GLsizei, const GLuint *);
static __ctype_glUniform1uiv __glintercept_fnptr_glUniform1uiv;
void __glintercept_glUniform1uiv(GLint location, GLsizei count, const GLuint * value) {
  __glintercept_fnptr_glUniform1uiv(location, count, value);
  __glintercept_log(" - glUniform1uiv(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform1uivEXT)(GLint, GLsizei, const GLuint *);
static __ctype_glUniform1uivEXT __glintercept_fnptr_glUniform1uivEXT;
void __glintercept_glUniform1uivEXT(GLint location, GLsizei count, const GLuint * value) {
  __glintercept_fnptr_glUniform1uivEXT(location, count, value);
  __glintercept_log(" - glUniform1uivEXT(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform2d)(GLint, GLdouble, GLdouble);
static __ctype_glUniform2d __glintercept_fnptr_glUniform2d;
void __glintercept_glUniform2d(GLint location, GLdouble x, GLdouble y) {
  __glintercept_fnptr_glUniform2d(location, x, y);
  __glintercept_log(" - glUniform2d(location: %ld, x: %ld, y: %ld)", location, x, y);
}

typedef void(*__ctype_glUniform2dv)(GLint, GLsizei, const GLdouble *);
static __ctype_glUniform2dv __glintercept_fnptr_glUniform2dv;
void __glintercept_glUniform2dv(GLint location, GLsizei count, const GLdouble * value) {
  __glintercept_fnptr_glUniform2dv(location, count, value);
  __glintercept_log(" - glUniform2dv(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform2f)(GLint, GLfloat, GLfloat);
static __ctype_glUniform2f __glintercept_fnptr_glUniform2f;
void __glintercept_glUniform2f(GLint location, GLfloat v0, GLfloat v1) {
  __glintercept_fnptr_glUniform2f(location, v0, v1);
  __glintercept_log(" - glUniform2f(location: %ld, v0: %ld, v1: %ld)", location, v0, v1);
}

typedef void(*__ctype_glUniform2fARB)(GLint, GLfloat, GLfloat);
static __ctype_glUniform2fARB __glintercept_fnptr_glUniform2fARB;
void __glintercept_glUniform2fARB(GLint location, GLfloat v0, GLfloat v1) {
  __glintercept_fnptr_glUniform2fARB(location, v0, v1);
  __glintercept_log(" - glUniform2fARB(location: %ld, v0: %ld, v1: %ld)", location, v0, v1);
}

typedef void(*__ctype_glUniform2fv)(GLint, GLsizei, const GLfloat *);
static __ctype_glUniform2fv __glintercept_fnptr_glUniform2fv;
void __glintercept_glUniform2fv(GLint location, GLsizei count, const GLfloat * value) {
  __glintercept_fnptr_glUniform2fv(location, count, value);
  __glintercept_log(" - glUniform2fv(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform2fvARB)(GLint, GLsizei, const GLfloat *);
static __ctype_glUniform2fvARB __glintercept_fnptr_glUniform2fvARB;
void __glintercept_glUniform2fvARB(GLint location, GLsizei count, const GLfloat * value) {
  __glintercept_fnptr_glUniform2fvARB(location, count, value);
  __glintercept_log(" - glUniform2fvARB(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform2i)(GLint, GLint, GLint);
static __ctype_glUniform2i __glintercept_fnptr_glUniform2i;
void __glintercept_glUniform2i(GLint location, GLint v0, GLint v1) {
  __glintercept_fnptr_glUniform2i(location, v0, v1);
  __glintercept_log(" - glUniform2i(location: %ld, v0: %ld, v1: %ld)", location, v0, v1);
}

typedef void(*__ctype_glUniform2i64ARB)(GLint, GLint64, GLint64);
static __ctype_glUniform2i64ARB __glintercept_fnptr_glUniform2i64ARB;
void __glintercept_glUniform2i64ARB(GLint location, GLint64 x, GLint64 y) {
  __glintercept_fnptr_glUniform2i64ARB(location, x, y);
  __glintercept_log(" - glUniform2i64ARB(location: %ld, x: %ld, y: %ld)", location, x, y);
}

typedef void(*__ctype_glUniform2i64NV)(GLint, GLint64EXT, GLint64EXT);
static __ctype_glUniform2i64NV __glintercept_fnptr_glUniform2i64NV;
void __glintercept_glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y) {
  __glintercept_fnptr_glUniform2i64NV(location, x, y);
  __glintercept_log(" - glUniform2i64NV(location: %ld, x: %ld, y: %ld)", location, x, y);
}

typedef void(*__ctype_glUniform2i64vARB)(GLint, GLsizei, const GLint64 *);
static __ctype_glUniform2i64vARB __glintercept_fnptr_glUniform2i64vARB;
void __glintercept_glUniform2i64vARB(GLint location, GLsizei count, const GLint64 * value) {
  __glintercept_fnptr_glUniform2i64vARB(location, count, value);
  __glintercept_log(" - glUniform2i64vARB(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform2i64vNV)(GLint, GLsizei, const GLint64EXT *);
static __ctype_glUniform2i64vNV __glintercept_fnptr_glUniform2i64vNV;
void __glintercept_glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT * value) {
  __glintercept_fnptr_glUniform2i64vNV(location, count, value);
  __glintercept_log(" - glUniform2i64vNV(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform2iARB)(GLint, GLint, GLint);
static __ctype_glUniform2iARB __glintercept_fnptr_glUniform2iARB;
void __glintercept_glUniform2iARB(GLint location, GLint v0, GLint v1) {
  __glintercept_fnptr_glUniform2iARB(location, v0, v1);
  __glintercept_log(" - glUniform2iARB(location: %ld, v0: %ld, v1: %ld)", location, v0, v1);
}

typedef void(*__ctype_glUniform2iv)(GLint, GLsizei, const GLint *);
static __ctype_glUniform2iv __glintercept_fnptr_glUniform2iv;
void __glintercept_glUniform2iv(GLint location, GLsizei count, const GLint * value) {
  __glintercept_fnptr_glUniform2iv(location, count, value);
  __glintercept_log(" - glUniform2iv(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform2ivARB)(GLint, GLsizei, const GLint *);
static __ctype_glUniform2ivARB __glintercept_fnptr_glUniform2ivARB;
void __glintercept_glUniform2ivARB(GLint location, GLsizei count, const GLint * value) {
  __glintercept_fnptr_glUniform2ivARB(location, count, value);
  __glintercept_log(" - glUniform2ivARB(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform2ui)(GLint, GLuint, GLuint);
static __ctype_glUniform2ui __glintercept_fnptr_glUniform2ui;
void __glintercept_glUniform2ui(GLint location, GLuint v0, GLuint v1) {
  __glintercept_fnptr_glUniform2ui(location, v0, v1);
  __glintercept_log(" - glUniform2ui(location: %ld, v0: %ld, v1: %ld)", location, v0, v1);
}

typedef void(*__ctype_glUniform2ui64ARB)(GLint, GLuint64, GLuint64);
static __ctype_glUniform2ui64ARB __glintercept_fnptr_glUniform2ui64ARB;
void __glintercept_glUniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y) {
  __glintercept_fnptr_glUniform2ui64ARB(location, x, y);
  __glintercept_log(" - glUniform2ui64ARB(location: %ld, x: %ld, y: %ld)", location, x, y);
}

typedef void(*__ctype_glUniform2ui64NV)(GLint, GLuint64EXT, GLuint64EXT);
static __ctype_glUniform2ui64NV __glintercept_fnptr_glUniform2ui64NV;
void __glintercept_glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y) {
  __glintercept_fnptr_glUniform2ui64NV(location, x, y);
  __glintercept_log(" - glUniform2ui64NV(location: %ld, x: %ld, y: %ld)", location, x, y);
}

typedef void(*__ctype_glUniform2ui64vARB)(GLint, GLsizei, const GLuint64 *);
static __ctype_glUniform2ui64vARB __glintercept_fnptr_glUniform2ui64vARB;
void __glintercept_glUniform2ui64vARB(GLint location, GLsizei count, const GLuint64 * value) {
  __glintercept_fnptr_glUniform2ui64vARB(location, count, value);
  __glintercept_log(" - glUniform2ui64vARB(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform2ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
static __ctype_glUniform2ui64vNV __glintercept_fnptr_glUniform2ui64vNV;
void __glintercept_glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) {
  __glintercept_fnptr_glUniform2ui64vNV(location, count, value);
  __glintercept_log(" - glUniform2ui64vNV(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform2uiEXT)(GLint, GLuint, GLuint);
static __ctype_glUniform2uiEXT __glintercept_fnptr_glUniform2uiEXT;
void __glintercept_glUniform2uiEXT(GLint location, GLuint v0, GLuint v1) {
  __glintercept_fnptr_glUniform2uiEXT(location, v0, v1);
  __glintercept_log(" - glUniform2uiEXT(location: %ld, v0: %ld, v1: %ld)", location, v0, v1);
}

typedef void(*__ctype_glUniform2uiv)(GLint, GLsizei, const GLuint *);
static __ctype_glUniform2uiv __glintercept_fnptr_glUniform2uiv;
void __glintercept_glUniform2uiv(GLint location, GLsizei count, const GLuint * value) {
  __glintercept_fnptr_glUniform2uiv(location, count, value);
  __glintercept_log(" - glUniform2uiv(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform2uivEXT)(GLint, GLsizei, const GLuint *);
static __ctype_glUniform2uivEXT __glintercept_fnptr_glUniform2uivEXT;
void __glintercept_glUniform2uivEXT(GLint location, GLsizei count, const GLuint * value) {
  __glintercept_fnptr_glUniform2uivEXT(location, count, value);
  __glintercept_log(" - glUniform2uivEXT(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform3d)(GLint, GLdouble, GLdouble, GLdouble);
static __ctype_glUniform3d __glintercept_fnptr_glUniform3d;
void __glintercept_glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z) {
  __glintercept_fnptr_glUniform3d(location, x, y, z);
  __glintercept_log(" - glUniform3d(location: %ld, x: %ld, y: %ld, z: %ld)", location, x, y, z);
}

typedef void(*__ctype_glUniform3dv)(GLint, GLsizei, const GLdouble *);
static __ctype_glUniform3dv __glintercept_fnptr_glUniform3dv;
void __glintercept_glUniform3dv(GLint location, GLsizei count, const GLdouble * value) {
  __glintercept_fnptr_glUniform3dv(location, count, value);
  __glintercept_log(" - glUniform3dv(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform3f)(GLint, GLfloat, GLfloat, GLfloat);
static __ctype_glUniform3f __glintercept_fnptr_glUniform3f;
void __glintercept_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  __glintercept_fnptr_glUniform3f(location, v0, v1, v2);
  __glintercept_log(" - glUniform3f(location: %ld, v0: %ld, v1: %ld, v2: %ld)", location, v0, v1, v2);
}

typedef void(*__ctype_glUniform3fARB)(GLint, GLfloat, GLfloat, GLfloat);
static __ctype_glUniform3fARB __glintercept_fnptr_glUniform3fARB;
void __glintercept_glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  __glintercept_fnptr_glUniform3fARB(location, v0, v1, v2);
  __glintercept_log(" - glUniform3fARB(location: %ld, v0: %ld, v1: %ld, v2: %ld)", location, v0, v1, v2);
}

typedef void(*__ctype_glUniform3fv)(GLint, GLsizei, const GLfloat *);
static __ctype_glUniform3fv __glintercept_fnptr_glUniform3fv;
void __glintercept_glUniform3fv(GLint location, GLsizei count, const GLfloat * value) {
  __glintercept_fnptr_glUniform3fv(location, count, value);
  __glintercept_log(" - glUniform3fv(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform3fvARB)(GLint, GLsizei, const GLfloat *);
static __ctype_glUniform3fvARB __glintercept_fnptr_glUniform3fvARB;
void __glintercept_glUniform3fvARB(GLint location, GLsizei count, const GLfloat * value) {
  __glintercept_fnptr_glUniform3fvARB(location, count, value);
  __glintercept_log(" - glUniform3fvARB(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform3i)(GLint, GLint, GLint, GLint);
static __ctype_glUniform3i __glintercept_fnptr_glUniform3i;
void __glintercept_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2) {
  __glintercept_fnptr_glUniform3i(location, v0, v1, v2);
  __glintercept_log(" - glUniform3i(location: %ld, v0: %ld, v1: %ld, v2: %ld)", location, v0, v1, v2);
}

typedef void(*__ctype_glUniform3i64ARB)(GLint, GLint64, GLint64, GLint64);
static __ctype_glUniform3i64ARB __glintercept_fnptr_glUniform3i64ARB;
void __glintercept_glUniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z) {
  __glintercept_fnptr_glUniform3i64ARB(location, x, y, z);
  __glintercept_log(" - glUniform3i64ARB(location: %ld, x: %ld, y: %ld, z: %ld)", location, x, y, z);
}

typedef void(*__ctype_glUniform3i64NV)(GLint, GLint64EXT, GLint64EXT, GLint64EXT);
static __ctype_glUniform3i64NV __glintercept_fnptr_glUniform3i64NV;
void __glintercept_glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
  __glintercept_fnptr_glUniform3i64NV(location, x, y, z);
  __glintercept_log(" - glUniform3i64NV(location: %ld, x: %ld, y: %ld, z: %ld)", location, x, y, z);
}

typedef void(*__ctype_glUniform3i64vARB)(GLint, GLsizei, const GLint64 *);
static __ctype_glUniform3i64vARB __glintercept_fnptr_glUniform3i64vARB;
void __glintercept_glUniform3i64vARB(GLint location, GLsizei count, const GLint64 * value) {
  __glintercept_fnptr_glUniform3i64vARB(location, count, value);
  __glintercept_log(" - glUniform3i64vARB(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform3i64vNV)(GLint, GLsizei, const GLint64EXT *);
static __ctype_glUniform3i64vNV __glintercept_fnptr_glUniform3i64vNV;
void __glintercept_glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT * value) {
  __glintercept_fnptr_glUniform3i64vNV(location, count, value);
  __glintercept_log(" - glUniform3i64vNV(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform3iARB)(GLint, GLint, GLint, GLint);
static __ctype_glUniform3iARB __glintercept_fnptr_glUniform3iARB;
void __glintercept_glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2) {
  __glintercept_fnptr_glUniform3iARB(location, v0, v1, v2);
  __glintercept_log(" - glUniform3iARB(location: %ld, v0: %ld, v1: %ld, v2: %ld)", location, v0, v1, v2);
}

typedef void(*__ctype_glUniform3iv)(GLint, GLsizei, const GLint *);
static __ctype_glUniform3iv __glintercept_fnptr_glUniform3iv;
void __glintercept_glUniform3iv(GLint location, GLsizei count, const GLint * value) {
  __glintercept_fnptr_glUniform3iv(location, count, value);
  __glintercept_log(" - glUniform3iv(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform3ivARB)(GLint, GLsizei, const GLint *);
static __ctype_glUniform3ivARB __glintercept_fnptr_glUniform3ivARB;
void __glintercept_glUniform3ivARB(GLint location, GLsizei count, const GLint * value) {
  __glintercept_fnptr_glUniform3ivARB(location, count, value);
  __glintercept_log(" - glUniform3ivARB(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform3ui)(GLint, GLuint, GLuint, GLuint);
static __ctype_glUniform3ui __glintercept_fnptr_glUniform3ui;
void __glintercept_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) {
  __glintercept_fnptr_glUniform3ui(location, v0, v1, v2);
  __glintercept_log(" - glUniform3ui(location: %ld, v0: %ld, v1: %ld, v2: %ld)", location, v0, v1, v2);
}

typedef void(*__ctype_glUniform3ui64ARB)(GLint, GLuint64, GLuint64, GLuint64);
static __ctype_glUniform3ui64ARB __glintercept_fnptr_glUniform3ui64ARB;
void __glintercept_glUniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z) {
  __glintercept_fnptr_glUniform3ui64ARB(location, x, y, z);
  __glintercept_log(" - glUniform3ui64ARB(location: %ld, x: %ld, y: %ld, z: %ld)", location, x, y, z);
}

typedef void(*__ctype_glUniform3ui64NV)(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
static __ctype_glUniform3ui64NV __glintercept_fnptr_glUniform3ui64NV;
void __glintercept_glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
  __glintercept_fnptr_glUniform3ui64NV(location, x, y, z);
  __glintercept_log(" - glUniform3ui64NV(location: %ld, x: %ld, y: %ld, z: %ld)", location, x, y, z);
}

typedef void(*__ctype_glUniform3ui64vARB)(GLint, GLsizei, const GLuint64 *);
static __ctype_glUniform3ui64vARB __glintercept_fnptr_glUniform3ui64vARB;
void __glintercept_glUniform3ui64vARB(GLint location, GLsizei count, const GLuint64 * value) {
  __glintercept_fnptr_glUniform3ui64vARB(location, count, value);
  __glintercept_log(" - glUniform3ui64vARB(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform3ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
static __ctype_glUniform3ui64vNV __glintercept_fnptr_glUniform3ui64vNV;
void __glintercept_glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) {
  __glintercept_fnptr_glUniform3ui64vNV(location, count, value);
  __glintercept_log(" - glUniform3ui64vNV(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform3uiEXT)(GLint, GLuint, GLuint, GLuint);
static __ctype_glUniform3uiEXT __glintercept_fnptr_glUniform3uiEXT;
void __glintercept_glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2) {
  __glintercept_fnptr_glUniform3uiEXT(location, v0, v1, v2);
  __glintercept_log(" - glUniform3uiEXT(location: %ld, v0: %ld, v1: %ld, v2: %ld)", location, v0, v1, v2);
}

typedef void(*__ctype_glUniform3uiv)(GLint, GLsizei, const GLuint *);
static __ctype_glUniform3uiv __glintercept_fnptr_glUniform3uiv;
void __glintercept_glUniform3uiv(GLint location, GLsizei count, const GLuint * value) {
  __glintercept_fnptr_glUniform3uiv(location, count, value);
  __glintercept_log(" - glUniform3uiv(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform3uivEXT)(GLint, GLsizei, const GLuint *);
static __ctype_glUniform3uivEXT __glintercept_fnptr_glUniform3uivEXT;
void __glintercept_glUniform3uivEXT(GLint location, GLsizei count, const GLuint * value) {
  __glintercept_fnptr_glUniform3uivEXT(location, count, value);
  __glintercept_log(" - glUniform3uivEXT(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform4d)(GLint, GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glUniform4d __glintercept_fnptr_glUniform4d;
void __glintercept_glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  __glintercept_fnptr_glUniform4d(location, x, y, z, w);
  __glintercept_log(" - glUniform4d(location: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", location, x, y, z, w);
}

typedef void(*__ctype_glUniform4dv)(GLint, GLsizei, const GLdouble *);
static __ctype_glUniform4dv __glintercept_fnptr_glUniform4dv;
void __glintercept_glUniform4dv(GLint location, GLsizei count, const GLdouble * value) {
  __glintercept_fnptr_glUniform4dv(location, count, value);
  __glintercept_log(" - glUniform4dv(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform4f)(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glUniform4f __glintercept_fnptr_glUniform4f;
void __glintercept_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  __glintercept_fnptr_glUniform4f(location, v0, v1, v2, v3);
  __glintercept_log(" - glUniform4f(location: %ld, v0: %ld, v1: %ld, v2: %ld, v3: %ld)", location, v0, v1, v2, v3);
}

typedef void(*__ctype_glUniform4fARB)(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glUniform4fARB __glintercept_fnptr_glUniform4fARB;
void __glintercept_glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  __glintercept_fnptr_glUniform4fARB(location, v0, v1, v2, v3);
  __glintercept_log(" - glUniform4fARB(location: %ld, v0: %ld, v1: %ld, v2: %ld, v3: %ld)", location, v0, v1, v2, v3);
}

typedef void(*__ctype_glUniform4fv)(GLint, GLsizei, const GLfloat *);
static __ctype_glUniform4fv __glintercept_fnptr_glUniform4fv;
void __glintercept_glUniform4fv(GLint location, GLsizei count, const GLfloat * value) {
  __glintercept_fnptr_glUniform4fv(location, count, value);
  __glintercept_log(" - glUniform4fv(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform4fvARB)(GLint, GLsizei, const GLfloat *);
static __ctype_glUniform4fvARB __glintercept_fnptr_glUniform4fvARB;
void __glintercept_glUniform4fvARB(GLint location, GLsizei count, const GLfloat * value) {
  __glintercept_fnptr_glUniform4fvARB(location, count, value);
  __glintercept_log(" - glUniform4fvARB(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform4i)(GLint, GLint, GLint, GLint, GLint);
static __ctype_glUniform4i __glintercept_fnptr_glUniform4i;
void __glintercept_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  __glintercept_fnptr_glUniform4i(location, v0, v1, v2, v3);
  __glintercept_log(" - glUniform4i(location: %ld, v0: %ld, v1: %ld, v2: %ld, v3: %ld)", location, v0, v1, v2, v3);
}

typedef void(*__ctype_glUniform4i64ARB)(GLint, GLint64, GLint64, GLint64, GLint64);
static __ctype_glUniform4i64ARB __glintercept_fnptr_glUniform4i64ARB;
void __glintercept_glUniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) {
  __glintercept_fnptr_glUniform4i64ARB(location, x, y, z, w);
  __glintercept_log(" - glUniform4i64ARB(location: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", location, x, y, z, w);
}

typedef void(*__ctype_glUniform4i64NV)(GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
static __ctype_glUniform4i64NV __glintercept_fnptr_glUniform4i64NV;
void __glintercept_glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
  __glintercept_fnptr_glUniform4i64NV(location, x, y, z, w);
  __glintercept_log(" - glUniform4i64NV(location: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", location, x, y, z, w);
}

typedef void(*__ctype_glUniform4i64vARB)(GLint, GLsizei, const GLint64 *);
static __ctype_glUniform4i64vARB __glintercept_fnptr_glUniform4i64vARB;
void __glintercept_glUniform4i64vARB(GLint location, GLsizei count, const GLint64 * value) {
  __glintercept_fnptr_glUniform4i64vARB(location, count, value);
  __glintercept_log(" - glUniform4i64vARB(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform4i64vNV)(GLint, GLsizei, const GLint64EXT *);
static __ctype_glUniform4i64vNV __glintercept_fnptr_glUniform4i64vNV;
void __glintercept_glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT * value) {
  __glintercept_fnptr_glUniform4i64vNV(location, count, value);
  __glintercept_log(" - glUniform4i64vNV(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform4iARB)(GLint, GLint, GLint, GLint, GLint);
static __ctype_glUniform4iARB __glintercept_fnptr_glUniform4iARB;
void __glintercept_glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  __glintercept_fnptr_glUniform4iARB(location, v0, v1, v2, v3);
  __glintercept_log(" - glUniform4iARB(location: %ld, v0: %ld, v1: %ld, v2: %ld, v3: %ld)", location, v0, v1, v2, v3);
}

typedef void(*__ctype_glUniform4iv)(GLint, GLsizei, const GLint *);
static __ctype_glUniform4iv __glintercept_fnptr_glUniform4iv;
void __glintercept_glUniform4iv(GLint location, GLsizei count, const GLint * value) {
  __glintercept_fnptr_glUniform4iv(location, count, value);
  __glintercept_log(" - glUniform4iv(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform4ivARB)(GLint, GLsizei, const GLint *);
static __ctype_glUniform4ivARB __glintercept_fnptr_glUniform4ivARB;
void __glintercept_glUniform4ivARB(GLint location, GLsizei count, const GLint * value) {
  __glintercept_fnptr_glUniform4ivARB(location, count, value);
  __glintercept_log(" - glUniform4ivARB(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform4ui)(GLint, GLuint, GLuint, GLuint, GLuint);
static __ctype_glUniform4ui __glintercept_fnptr_glUniform4ui;
void __glintercept_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  __glintercept_fnptr_glUniform4ui(location, v0, v1, v2, v3);
  __glintercept_log(" - glUniform4ui(location: %ld, v0: %ld, v1: %ld, v2: %ld, v3: %ld)", location, v0, v1, v2, v3);
}

typedef void(*__ctype_glUniform4ui64ARB)(GLint, GLuint64, GLuint64, GLuint64, GLuint64);
static __ctype_glUniform4ui64ARB __glintercept_fnptr_glUniform4ui64ARB;
void __glintercept_glUniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) {
  __glintercept_fnptr_glUniform4ui64ARB(location, x, y, z, w);
  __glintercept_log(" - glUniform4ui64ARB(location: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", location, x, y, z, w);
}

typedef void(*__ctype_glUniform4ui64NV)(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
static __ctype_glUniform4ui64NV __glintercept_fnptr_glUniform4ui64NV;
void __glintercept_glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
  __glintercept_fnptr_glUniform4ui64NV(location, x, y, z, w);
  __glintercept_log(" - glUniform4ui64NV(location: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", location, x, y, z, w);
}

typedef void(*__ctype_glUniform4ui64vARB)(GLint, GLsizei, const GLuint64 *);
static __ctype_glUniform4ui64vARB __glintercept_fnptr_glUniform4ui64vARB;
void __glintercept_glUniform4ui64vARB(GLint location, GLsizei count, const GLuint64 * value) {
  __glintercept_fnptr_glUniform4ui64vARB(location, count, value);
  __glintercept_log(" - glUniform4ui64vARB(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform4ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
static __ctype_glUniform4ui64vNV __glintercept_fnptr_glUniform4ui64vNV;
void __glintercept_glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) {
  __glintercept_fnptr_glUniform4ui64vNV(location, count, value);
  __glintercept_log(" - glUniform4ui64vNV(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform4uiEXT)(GLint, GLuint, GLuint, GLuint, GLuint);
static __ctype_glUniform4uiEXT __glintercept_fnptr_glUniform4uiEXT;
void __glintercept_glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  __glintercept_fnptr_glUniform4uiEXT(location, v0, v1, v2, v3);
  __glintercept_log(" - glUniform4uiEXT(location: %ld, v0: %ld, v1: %ld, v2: %ld, v3: %ld)", location, v0, v1, v2, v3);
}

typedef void(*__ctype_glUniform4uiv)(GLint, GLsizei, const GLuint *);
static __ctype_glUniform4uiv __glintercept_fnptr_glUniform4uiv;
void __glintercept_glUniform4uiv(GLint location, GLsizei count, const GLuint * value) {
  __glintercept_fnptr_glUniform4uiv(location, count, value);
  __glintercept_log(" - glUniform4uiv(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniform4uivEXT)(GLint, GLsizei, const GLuint *);
static __ctype_glUniform4uivEXT __glintercept_fnptr_glUniform4uivEXT;
void __glintercept_glUniform4uivEXT(GLint location, GLsizei count, const GLuint * value) {
  __glintercept_fnptr_glUniform4uivEXT(location, count, value);
  __glintercept_log(" - glUniform4uivEXT(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniformBlockBinding)(GLuint, GLuint, GLuint);
static __ctype_glUniformBlockBinding __glintercept_fnptr_glUniformBlockBinding;
void __glintercept_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) {
  __glintercept_fnptr_glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
  __glintercept_log(" - glUniformBlockBinding(program: %ld, uniformBlockIndex: %ld, uniformBlockBinding: %ld)", program, uniformBlockIndex, uniformBlockBinding);
}

typedef void(*__ctype_glUniformBufferEXT)(GLuint, GLint, GLuint);
static __ctype_glUniformBufferEXT __glintercept_fnptr_glUniformBufferEXT;
void __glintercept_glUniformBufferEXT(GLuint program, GLint location, GLuint buffer) {
  __glintercept_fnptr_glUniformBufferEXT(program, location, buffer);
  __glintercept_log(" - glUniformBufferEXT(program: %ld, location: %ld, buffer: %ld)", program, location, buffer);
}

typedef void(*__ctype_glUniformHandleui64ARB)(GLint, GLuint64);
static __ctype_glUniformHandleui64ARB __glintercept_fnptr_glUniformHandleui64ARB;
void __glintercept_glUniformHandleui64ARB(GLint location, GLuint64 value) {
  __glintercept_fnptr_glUniformHandleui64ARB(location, value);
  __glintercept_log(" - glUniformHandleui64ARB(location: %ld, value: %ld)", location, value);
}

typedef void(*__ctype_glUniformHandleui64IMG)(GLint, GLuint64);
static __ctype_glUniformHandleui64IMG __glintercept_fnptr_glUniformHandleui64IMG;
void __glintercept_glUniformHandleui64IMG(GLint location, GLuint64 value) {
  __glintercept_fnptr_glUniformHandleui64IMG(location, value);
  __glintercept_log(" - glUniformHandleui64IMG(location: %ld, value: %ld)", location, value);
}

typedef void(*__ctype_glUniformHandleui64NV)(GLint, GLuint64);
static __ctype_glUniformHandleui64NV __glintercept_fnptr_glUniformHandleui64NV;
void __glintercept_glUniformHandleui64NV(GLint location, GLuint64 value) {
  __glintercept_fnptr_glUniformHandleui64NV(location, value);
  __glintercept_log(" - glUniformHandleui64NV(location: %ld, value: %ld)", location, value);
}

typedef void(*__ctype_glUniformHandleui64vARB)(GLint, GLsizei, const GLuint64 *);
static __ctype_glUniformHandleui64vARB __glintercept_fnptr_glUniformHandleui64vARB;
void __glintercept_glUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 * value) {
  __glintercept_fnptr_glUniformHandleui64vARB(location, count, value);
  __glintercept_log(" - glUniformHandleui64vARB(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniformHandleui64vIMG)(GLint, GLsizei, const GLuint64 *);
static __ctype_glUniformHandleui64vIMG __glintercept_fnptr_glUniformHandleui64vIMG;
void __glintercept_glUniformHandleui64vIMG(GLint location, GLsizei count, const GLuint64 * value) {
  __glintercept_fnptr_glUniformHandleui64vIMG(location, count, value);
  __glintercept_log(" - glUniformHandleui64vIMG(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniformHandleui64vNV)(GLint, GLsizei, const GLuint64 *);
static __ctype_glUniformHandleui64vNV __glintercept_fnptr_glUniformHandleui64vNV;
void __glintercept_glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 * value) {
  __glintercept_fnptr_glUniformHandleui64vNV(location, count, value);
  __glintercept_log(" - glUniformHandleui64vNV(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUniformMatrix2dv)(GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glUniformMatrix2dv __glintercept_fnptr_glUniformMatrix2dv;
void __glintercept_glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glUniformMatrix2dv(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix2dv(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix2fv)(GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glUniformMatrix2fv __glintercept_fnptr_glUniformMatrix2fv;
void __glintercept_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glUniformMatrix2fv(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix2fv(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix2fvARB)(GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glUniformMatrix2fvARB __glintercept_fnptr_glUniformMatrix2fvARB;
void __glintercept_glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glUniformMatrix2fvARB(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix2fvARB(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix2x3dv)(GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glUniformMatrix2x3dv __glintercept_fnptr_glUniformMatrix2x3dv;
void __glintercept_glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glUniformMatrix2x3dv(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix2x3dv(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix2x3fv)(GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glUniformMatrix2x3fv __glintercept_fnptr_glUniformMatrix2x3fv;
void __glintercept_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glUniformMatrix2x3fv(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix2x3fv(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix2x3fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glUniformMatrix2x3fvNV __glintercept_fnptr_glUniformMatrix2x3fvNV;
void __glintercept_glUniformMatrix2x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glUniformMatrix2x3fvNV(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix2x3fvNV(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix2x4dv)(GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glUniformMatrix2x4dv __glintercept_fnptr_glUniformMatrix2x4dv;
void __glintercept_glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glUniformMatrix2x4dv(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix2x4dv(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix2x4fv)(GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glUniformMatrix2x4fv __glintercept_fnptr_glUniformMatrix2x4fv;
void __glintercept_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glUniformMatrix2x4fv(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix2x4fv(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix2x4fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glUniformMatrix2x4fvNV __glintercept_fnptr_glUniformMatrix2x4fvNV;
void __glintercept_glUniformMatrix2x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glUniformMatrix2x4fvNV(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix2x4fvNV(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix3dv)(GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glUniformMatrix3dv __glintercept_fnptr_glUniformMatrix3dv;
void __glintercept_glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glUniformMatrix3dv(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix3dv(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix3fv)(GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glUniformMatrix3fv __glintercept_fnptr_glUniformMatrix3fv;
void __glintercept_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glUniformMatrix3fv(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix3fv(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix3fvARB)(GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glUniformMatrix3fvARB __glintercept_fnptr_glUniformMatrix3fvARB;
void __glintercept_glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glUniformMatrix3fvARB(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix3fvARB(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix3x2dv)(GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glUniformMatrix3x2dv __glintercept_fnptr_glUniformMatrix3x2dv;
void __glintercept_glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glUniformMatrix3x2dv(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix3x2dv(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix3x2fv)(GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glUniformMatrix3x2fv __glintercept_fnptr_glUniformMatrix3x2fv;
void __glintercept_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glUniformMatrix3x2fv(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix3x2fv(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix3x2fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glUniformMatrix3x2fvNV __glintercept_fnptr_glUniformMatrix3x2fvNV;
void __glintercept_glUniformMatrix3x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glUniformMatrix3x2fvNV(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix3x2fvNV(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix3x4dv)(GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glUniformMatrix3x4dv __glintercept_fnptr_glUniformMatrix3x4dv;
void __glintercept_glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glUniformMatrix3x4dv(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix3x4dv(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix3x4fv)(GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glUniformMatrix3x4fv __glintercept_fnptr_glUniformMatrix3x4fv;
void __glintercept_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glUniformMatrix3x4fv(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix3x4fv(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix3x4fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glUniformMatrix3x4fvNV __glintercept_fnptr_glUniformMatrix3x4fvNV;
void __glintercept_glUniformMatrix3x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glUniformMatrix3x4fvNV(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix3x4fvNV(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix4dv)(GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glUniformMatrix4dv __glintercept_fnptr_glUniformMatrix4dv;
void __glintercept_glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glUniformMatrix4dv(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix4dv(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix4fv)(GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glUniformMatrix4fv __glintercept_fnptr_glUniformMatrix4fv;
void __glintercept_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glUniformMatrix4fv(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix4fv(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix4fvARB)(GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glUniformMatrix4fvARB __glintercept_fnptr_glUniformMatrix4fvARB;
void __glintercept_glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glUniformMatrix4fvARB(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix4fvARB(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix4x2dv)(GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glUniformMatrix4x2dv __glintercept_fnptr_glUniformMatrix4x2dv;
void __glintercept_glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glUniformMatrix4x2dv(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix4x2dv(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix4x2fv)(GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glUniformMatrix4x2fv __glintercept_fnptr_glUniformMatrix4x2fv;
void __glintercept_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glUniformMatrix4x2fv(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix4x2fv(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix4x2fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glUniformMatrix4x2fvNV __glintercept_fnptr_glUniformMatrix4x2fvNV;
void __glintercept_glUniformMatrix4x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glUniformMatrix4x2fvNV(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix4x2fvNV(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix4x3dv)(GLint, GLsizei, GLboolean, const GLdouble *);
static __ctype_glUniformMatrix4x3dv __glintercept_fnptr_glUniformMatrix4x3dv;
void __glintercept_glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  __glintercept_fnptr_glUniformMatrix4x3dv(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix4x3dv(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix4x3fv)(GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glUniformMatrix4x3fv __glintercept_fnptr_glUniformMatrix4x3fv;
void __glintercept_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glUniformMatrix4x3fv(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix4x3fv(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformMatrix4x3fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
static __ctype_glUniformMatrix4x3fvNV __glintercept_fnptr_glUniformMatrix4x3fvNV;
void __glintercept_glUniformMatrix4x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  __glintercept_fnptr_glUniformMatrix4x3fvNV(location, count, transpose, value);
  __glintercept_log(" - glUniformMatrix4x3fvNV(location: %ld, count: %ld, transpose: %ld, value: %ld)", location, count, transpose, value);
}

typedef void(*__ctype_glUniformSubroutinesuiv)(GLenum, GLsizei, const GLuint *);
static __ctype_glUniformSubroutinesuiv __glintercept_fnptr_glUniformSubroutinesuiv;
void __glintercept_glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint * indices) {
  __glintercept_fnptr_glUniformSubroutinesuiv(shadertype, count, indices);
  __glintercept_log(" - glUniformSubroutinesuiv(shadertype: %ld (%s), count: %ld, indices: %ld)", shadertype, __gl_intercept_formatenum(shadertype), count, indices);
}

typedef void(*__ctype_glUniformui64NV)(GLint, GLuint64EXT);
static __ctype_glUniformui64NV __glintercept_fnptr_glUniformui64NV;
void __glintercept_glUniformui64NV(GLint location, GLuint64EXT value) {
  __glintercept_fnptr_glUniformui64NV(location, value);
  __glintercept_log(" - glUniformui64NV(location: %ld, value: %ld)", location, value);
}

typedef void(*__ctype_glUniformui64vNV)(GLint, GLsizei, const GLuint64EXT *);
static __ctype_glUniformui64vNV __glintercept_fnptr_glUniformui64vNV;
void __glintercept_glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) {
  __glintercept_fnptr_glUniformui64vNV(location, count, value);
  __glintercept_log(" - glUniformui64vNV(location: %ld, count: %ld, value: %ld)", location, count, value);
}

typedef void(*__ctype_glUnlockArraysEXT)();
static __ctype_glUnlockArraysEXT __glintercept_fnptr_glUnlockArraysEXT;
void __glintercept_glUnlockArraysEXT() {
  __glintercept_fnptr_glUnlockArraysEXT();
  __glintercept_log(" - glUnlockArraysEXT()");
}

typedef GLboolean(*__ctype_glUnmapBuffer)(GLenum);
static __ctype_glUnmapBuffer __glintercept_fnptr_glUnmapBuffer;
GLboolean __glintercept_glUnmapBuffer(GLenum target) {
  GLboolean __ret = __glintercept_fnptr_glUnmapBuffer(target);
  __glintercept_log(" - glUnmapBuffer(target: %ld (%s)) -> %ld", target, __gl_intercept_formatenum(target), __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glUnmapBufferARB)(GLenum);
static __ctype_glUnmapBufferARB __glintercept_fnptr_glUnmapBufferARB;
GLboolean __glintercept_glUnmapBufferARB(GLenum target) {
  GLboolean __ret = __glintercept_fnptr_glUnmapBufferARB(target);
  __glintercept_log(" - glUnmapBufferARB(target: %ld (%s)) -> %ld", target, __gl_intercept_formatenum(target), __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glUnmapBufferOES)(GLenum);
static __ctype_glUnmapBufferOES __glintercept_fnptr_glUnmapBufferOES;
GLboolean __glintercept_glUnmapBufferOES(GLenum target) {
  GLboolean __ret = __glintercept_fnptr_glUnmapBufferOES(target);
  __glintercept_log(" - glUnmapBufferOES(target: %ld (%s)) -> %ld", target, __gl_intercept_formatenum(target), __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glUnmapNamedBuffer)(GLuint);
static __ctype_glUnmapNamedBuffer __glintercept_fnptr_glUnmapNamedBuffer;
GLboolean __glintercept_glUnmapNamedBuffer(GLuint buffer) {
  GLboolean __ret = __glintercept_fnptr_glUnmapNamedBuffer(buffer);
  __glintercept_log(" - glUnmapNamedBuffer(buffer: %ld) -> %ld", buffer, __ret);
  return __ret;
}

typedef GLboolean(*__ctype_glUnmapNamedBufferEXT)(GLuint);
static __ctype_glUnmapNamedBufferEXT __glintercept_fnptr_glUnmapNamedBufferEXT;
GLboolean __glintercept_glUnmapNamedBufferEXT(GLuint buffer) {
  GLboolean __ret = __glintercept_fnptr_glUnmapNamedBufferEXT(buffer);
  __glintercept_log(" - glUnmapNamedBufferEXT(buffer: %ld) -> %ld", buffer, __ret);
  return __ret;
}

typedef void(*__ctype_glUnmapObjectBufferATI)(GLuint);
static __ctype_glUnmapObjectBufferATI __glintercept_fnptr_glUnmapObjectBufferATI;
void __glintercept_glUnmapObjectBufferATI(GLuint buffer) {
  __glintercept_fnptr_glUnmapObjectBufferATI(buffer);
  __glintercept_log(" - glUnmapObjectBufferATI(buffer: %ld)", buffer);
}

typedef void(*__ctype_glUnmapTexture2DINTEL)(GLuint, GLint);
static __ctype_glUnmapTexture2DINTEL __glintercept_fnptr_glUnmapTexture2DINTEL;
void __glintercept_glUnmapTexture2DINTEL(GLuint texture, GLint level) {
  __glintercept_fnptr_glUnmapTexture2DINTEL(texture, level);
  __glintercept_log(" - glUnmapTexture2DINTEL(texture: %ld, level: %ld)", texture, level);
}

typedef void(*__ctype_glUpdateObjectBufferATI)(GLuint, GLuint, GLsizei, const void *, GLenum);
static __ctype_glUpdateObjectBufferATI __glintercept_fnptr_glUpdateObjectBufferATI;
void __glintercept_glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const void * pointer, GLenum preserve) {
  __glintercept_fnptr_glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve);
  __glintercept_log(" - glUpdateObjectBufferATI(buffer: %ld, offset: %ld, size: %ld, pointer: %ld, preserve: %ld (%s))", buffer, offset, size, pointer, preserve, __gl_intercept_formatenum(preserve));
}

typedef void(*__ctype_glUploadGpuMaskNVX)(GLbitfield);
static __ctype_glUploadGpuMaskNVX __glintercept_fnptr_glUploadGpuMaskNVX;
void __glintercept_glUploadGpuMaskNVX(GLbitfield mask) {
  __glintercept_fnptr_glUploadGpuMaskNVX(mask);
  __glintercept_log(" - glUploadGpuMaskNVX(mask: %ld)", mask);
}

typedef void(*__ctype_glUseProgram)(GLuint);
static __ctype_glUseProgram __glintercept_fnptr_glUseProgram;
void __glintercept_glUseProgram(GLuint program) {
  __glintercept_fnptr_glUseProgram(program);
  __glintercept_log(" - glUseProgram(program: %ld)", program);
}

typedef void(*__ctype_glUseProgramObjectARB)(GLhandleARB);
static __ctype_glUseProgramObjectARB __glintercept_fnptr_glUseProgramObjectARB;
void __glintercept_glUseProgramObjectARB(GLhandleARB programObj) {
  __glintercept_fnptr_glUseProgramObjectARB(programObj);
  __glintercept_log(" - glUseProgramObjectARB(programObj: %ld)", programObj);
}

typedef void(*__ctype_glUseProgramStages)(GLuint, GLbitfield, GLuint);
static __ctype_glUseProgramStages __glintercept_fnptr_glUseProgramStages;
void __glintercept_glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program) {
  __glintercept_fnptr_glUseProgramStages(pipeline, stages, program);
  __glintercept_log(" - glUseProgramStages(pipeline: %ld, stages: %ld, program: %ld)", pipeline, stages, program);
}

typedef void(*__ctype_glUseProgramStagesEXT)(GLuint, GLbitfield, GLuint);
static __ctype_glUseProgramStagesEXT __glintercept_fnptr_glUseProgramStagesEXT;
void __glintercept_glUseProgramStagesEXT(GLuint pipeline, GLbitfield stages, GLuint program) {
  __glintercept_fnptr_glUseProgramStagesEXT(pipeline, stages, program);
  __glintercept_log(" - glUseProgramStagesEXT(pipeline: %ld, stages: %ld, program: %ld)", pipeline, stages, program);
}

typedef void(*__ctype_glUseShaderProgramEXT)(GLenum, GLuint);
static __ctype_glUseShaderProgramEXT __glintercept_fnptr_glUseShaderProgramEXT;
void __glintercept_glUseShaderProgramEXT(GLenum type, GLuint program) {
  __glintercept_fnptr_glUseShaderProgramEXT(type, program);
  __glintercept_log(" - glUseShaderProgramEXT(type: %ld (%s), program: %ld)", type, __gl_intercept_formatenum(type), program);
}

typedef void(*__ctype_glVDPAUFiniNV)();
static __ctype_glVDPAUFiniNV __glintercept_fnptr_glVDPAUFiniNV;
void __glintercept_glVDPAUFiniNV() {
  __glintercept_fnptr_glVDPAUFiniNV();
  __glintercept_log(" - glVDPAUFiniNV()");
}

typedef void(*__ctype_glVDPAUGetSurfaceivNV)(GLvdpauSurfaceNV, GLenum, GLsizei, GLsizei *, GLint *);
static __ctype_glVDPAUGetSurfaceivNV __glintercept_fnptr_glVDPAUGetSurfaceivNV;
void __glintercept_glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei count, GLsizei * length, GLint * values) {
  __glintercept_fnptr_glVDPAUGetSurfaceivNV(surface, pname, count, length, values);
  __glintercept_log(" - glVDPAUGetSurfaceivNV(surface: %ld, pname: %ld (%s), count: %ld, length: %ld, values: %ld)", surface, pname, __gl_intercept_formatenum(pname), count, length, values);
}

typedef void(*__ctype_glVDPAUInitNV)(const void *, const void *);
static __ctype_glVDPAUInitNV __glintercept_fnptr_glVDPAUInitNV;
void __glintercept_glVDPAUInitNV(const void * vdpDevice, const void * getProcAddress) {
  __glintercept_fnptr_glVDPAUInitNV(vdpDevice, getProcAddress);
  __glintercept_log(" - glVDPAUInitNV(vdpDevice: %ld, getProcAddress: %ld)", vdpDevice, getProcAddress);
}

typedef GLboolean(*__ctype_glVDPAUIsSurfaceNV)(GLvdpauSurfaceNV);
static __ctype_glVDPAUIsSurfaceNV __glintercept_fnptr_glVDPAUIsSurfaceNV;
GLboolean __glintercept_glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface) {
  GLboolean __ret = __glintercept_fnptr_glVDPAUIsSurfaceNV(surface);
  __glintercept_log(" - glVDPAUIsSurfaceNV(surface: %ld) -> %ld", surface, __ret);
  return __ret;
}

typedef void(*__ctype_glVDPAUMapSurfacesNV)(GLsizei, const GLvdpauSurfaceNV *);
static __ctype_glVDPAUMapSurfacesNV __glintercept_fnptr_glVDPAUMapSurfacesNV;
void __glintercept_glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV * surfaces) {
  __glintercept_fnptr_glVDPAUMapSurfacesNV(numSurfaces, surfaces);
  __glintercept_log(" - glVDPAUMapSurfacesNV(numSurfaces: %ld, surfaces: %ld)", numSurfaces, surfaces);
}

typedef GLvdpauSurfaceNV(*__ctype_glVDPAURegisterOutputSurfaceNV)(const void *, GLenum, GLsizei, const GLuint *);
static __ctype_glVDPAURegisterOutputSurfaceNV __glintercept_fnptr_glVDPAURegisterOutputSurfaceNV;
GLvdpauSurfaceNV __glintercept_glVDPAURegisterOutputSurfaceNV(const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames) {
  GLvdpauSurfaceNV __ret = __glintercept_fnptr_glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
  __glintercept_log(" - glVDPAURegisterOutputSurfaceNV(vdpSurface: %ld, target: %ld (%s), numTextureNames: %ld, textureNames: %ld) -> %ld", vdpSurface, target, __gl_intercept_formatenum(target), numTextureNames, textureNames, __ret);
  return __ret;
}

typedef GLvdpauSurfaceNV(*__ctype_glVDPAURegisterVideoSurfaceNV)(const void *, GLenum, GLsizei, const GLuint *);
static __ctype_glVDPAURegisterVideoSurfaceNV __glintercept_fnptr_glVDPAURegisterVideoSurfaceNV;
GLvdpauSurfaceNV __glintercept_glVDPAURegisterVideoSurfaceNV(const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames) {
  GLvdpauSurfaceNV __ret = __glintercept_fnptr_glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
  __glintercept_log(" - glVDPAURegisterVideoSurfaceNV(vdpSurface: %ld, target: %ld (%s), numTextureNames: %ld, textureNames: %ld) -> %ld", vdpSurface, target, __gl_intercept_formatenum(target), numTextureNames, textureNames, __ret);
  return __ret;
}

typedef GLvdpauSurfaceNV(*__ctype_glVDPAURegisterVideoSurfaceWithPictureStructureNV)(const void *, GLenum, GLsizei, const GLuint *, GLboolean);
static __ctype_glVDPAURegisterVideoSurfaceWithPictureStructureNV __glintercept_fnptr_glVDPAURegisterVideoSurfaceWithPictureStructureNV;
GLvdpauSurfaceNV __glintercept_glVDPAURegisterVideoSurfaceWithPictureStructureNV(const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames, GLboolean isFrameStructure) {
  GLvdpauSurfaceNV __ret = __glintercept_fnptr_glVDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface, target, numTextureNames, textureNames, isFrameStructure);
  __glintercept_log(" - glVDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface: %ld, target: %ld (%s), numTextureNames: %ld, textureNames: %ld, isFrameStructure: %ld) -> %ld", vdpSurface, target, __gl_intercept_formatenum(target), numTextureNames, textureNames, isFrameStructure, __ret);
  return __ret;
}

typedef void(*__ctype_glVDPAUSurfaceAccessNV)(GLvdpauSurfaceNV, GLenum);
static __ctype_glVDPAUSurfaceAccessNV __glintercept_fnptr_glVDPAUSurfaceAccessNV;
void __glintercept_glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access) {
  __glintercept_fnptr_glVDPAUSurfaceAccessNV(surface, access);
  __glintercept_log(" - glVDPAUSurfaceAccessNV(surface: %ld, access: %ld (%s))", surface, access, __gl_intercept_formatenum(access));
}

typedef void(*__ctype_glVDPAUUnmapSurfacesNV)(GLsizei, const GLvdpauSurfaceNV *);
static __ctype_glVDPAUUnmapSurfacesNV __glintercept_fnptr_glVDPAUUnmapSurfacesNV;
void __glintercept_glVDPAUUnmapSurfacesNV(GLsizei numSurface, const GLvdpauSurfaceNV * surfaces) {
  __glintercept_fnptr_glVDPAUUnmapSurfacesNV(numSurface, surfaces);
  __glintercept_log(" - glVDPAUUnmapSurfacesNV(numSurface: %ld, surfaces: %ld)", numSurface, surfaces);
}

typedef void(*__ctype_glVDPAUUnregisterSurfaceNV)(GLvdpauSurfaceNV);
static __ctype_glVDPAUUnregisterSurfaceNV __glintercept_fnptr_glVDPAUUnregisterSurfaceNV;
void __glintercept_glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface) {
  __glintercept_fnptr_glVDPAUUnregisterSurfaceNV(surface);
  __glintercept_log(" - glVDPAUUnregisterSurfaceNV(surface: %ld)", surface);
}

typedef void(*__ctype_glValidateProgram)(GLuint);
static __ctype_glValidateProgram __glintercept_fnptr_glValidateProgram;
void __glintercept_glValidateProgram(GLuint program) {
  __glintercept_fnptr_glValidateProgram(program);
  __glintercept_log(" - glValidateProgram(program: %ld)", program);
}

typedef void(*__ctype_glValidateProgramARB)(GLhandleARB);
static __ctype_glValidateProgramARB __glintercept_fnptr_glValidateProgramARB;
void __glintercept_glValidateProgramARB(GLhandleARB programObj) {
  __glintercept_fnptr_glValidateProgramARB(programObj);
  __glintercept_log(" - glValidateProgramARB(programObj: %ld)", programObj);
}

typedef void(*__ctype_glValidateProgramPipeline)(GLuint);
static __ctype_glValidateProgramPipeline __glintercept_fnptr_glValidateProgramPipeline;
void __glintercept_glValidateProgramPipeline(GLuint pipeline) {
  __glintercept_fnptr_glValidateProgramPipeline(pipeline);
  __glintercept_log(" - glValidateProgramPipeline(pipeline: %ld)", pipeline);
}

typedef void(*__ctype_glValidateProgramPipelineEXT)(GLuint);
static __ctype_glValidateProgramPipelineEXT __glintercept_fnptr_glValidateProgramPipelineEXT;
void __glintercept_glValidateProgramPipelineEXT(GLuint pipeline) {
  __glintercept_fnptr_glValidateProgramPipelineEXT(pipeline);
  __glintercept_log(" - glValidateProgramPipelineEXT(pipeline: %ld)", pipeline);
}

typedef void(*__ctype_glVariantArrayObjectATI)(GLuint, GLenum, GLsizei, GLuint, GLuint);
static __ctype_glVariantArrayObjectATI __glintercept_fnptr_glVariantArrayObjectATI;
void __glintercept_glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) {
  __glintercept_fnptr_glVariantArrayObjectATI(id, type, stride, buffer, offset);
  __glintercept_log(" - glVariantArrayObjectATI(id: %ld, type: %ld (%s), stride: %ld, buffer: %ld, offset: %ld)", id, type, __gl_intercept_formatenum(type), stride, buffer, offset);
}

typedef void(*__ctype_glVariantPointerEXT)(GLuint, GLenum, GLuint, const void *);
static __ctype_glVariantPointerEXT __glintercept_fnptr_glVariantPointerEXT;
void __glintercept_glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const void * addr) {
  __glintercept_fnptr_glVariantPointerEXT(id, type, stride, addr);
  __glintercept_log(" - glVariantPointerEXT(id: %ld, type: %ld (%s), stride: %ld, addr: %ld)", id, type, __gl_intercept_formatenum(type), stride, addr);
}

typedef void(*__ctype_glVariantbvEXT)(GLuint, const GLbyte *);
static __ctype_glVariantbvEXT __glintercept_fnptr_glVariantbvEXT;
void __glintercept_glVariantbvEXT(GLuint id, const GLbyte * addr) {
  __glintercept_fnptr_glVariantbvEXT(id, addr);
  __glintercept_log(" - glVariantbvEXT(id: %ld, addr: %ld)", id, addr);
}

typedef void(*__ctype_glVariantdvEXT)(GLuint, const GLdouble *);
static __ctype_glVariantdvEXT __glintercept_fnptr_glVariantdvEXT;
void __glintercept_glVariantdvEXT(GLuint id, const GLdouble * addr) {
  __glintercept_fnptr_glVariantdvEXT(id, addr);
  __glintercept_log(" - glVariantdvEXT(id: %ld, addr: %ld)", id, addr);
}

typedef void(*__ctype_glVariantfvEXT)(GLuint, const GLfloat *);
static __ctype_glVariantfvEXT __glintercept_fnptr_glVariantfvEXT;
void __glintercept_glVariantfvEXT(GLuint id, const GLfloat * addr) {
  __glintercept_fnptr_glVariantfvEXT(id, addr);
  __glintercept_log(" - glVariantfvEXT(id: %ld, addr: %ld)", id, addr);
}

typedef void(*__ctype_glVariantivEXT)(GLuint, const GLint *);
static __ctype_glVariantivEXT __glintercept_fnptr_glVariantivEXT;
void __glintercept_glVariantivEXT(GLuint id, const GLint * addr) {
  __glintercept_fnptr_glVariantivEXT(id, addr);
  __glintercept_log(" - glVariantivEXT(id: %ld, addr: %ld)", id, addr);
}

typedef void(*__ctype_glVariantsvEXT)(GLuint, const GLshort *);
static __ctype_glVariantsvEXT __glintercept_fnptr_glVariantsvEXT;
void __glintercept_glVariantsvEXT(GLuint id, const GLshort * addr) {
  __glintercept_fnptr_glVariantsvEXT(id, addr);
  __glintercept_log(" - glVariantsvEXT(id: %ld, addr: %ld)", id, addr);
}

typedef void(*__ctype_glVariantubvEXT)(GLuint, const GLubyte *);
static __ctype_glVariantubvEXT __glintercept_fnptr_glVariantubvEXT;
void __glintercept_glVariantubvEXT(GLuint id, const GLubyte * addr) {
  __glintercept_fnptr_glVariantubvEXT(id, addr);
  __glintercept_log(" - glVariantubvEXT(id: %ld, addr: %s)", id, addr);
}

typedef void(*__ctype_glVariantuivEXT)(GLuint, const GLuint *);
static __ctype_glVariantuivEXT __glintercept_fnptr_glVariantuivEXT;
void __glintercept_glVariantuivEXT(GLuint id, const GLuint * addr) {
  __glintercept_fnptr_glVariantuivEXT(id, addr);
  __glintercept_log(" - glVariantuivEXT(id: %ld, addr: %ld)", id, addr);
}

typedef void(*__ctype_glVariantusvEXT)(GLuint, const GLushort *);
static __ctype_glVariantusvEXT __glintercept_fnptr_glVariantusvEXT;
void __glintercept_glVariantusvEXT(GLuint id, const GLushort * addr) {
  __glintercept_fnptr_glVariantusvEXT(id, addr);
  __glintercept_log(" - glVariantusvEXT(id: %ld, addr: %ld)", id, addr);
}

typedef void(*__ctype_glVertex2bOES)(GLbyte, GLbyte);
static __ctype_glVertex2bOES __glintercept_fnptr_glVertex2bOES;
void __glintercept_glVertex2bOES(GLbyte x, GLbyte y) {
  __glintercept_fnptr_glVertex2bOES(x, y);
  __glintercept_log(" - glVertex2bOES(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glVertex2bvOES)(const GLbyte *);
static __ctype_glVertex2bvOES __glintercept_fnptr_glVertex2bvOES;
void __glintercept_glVertex2bvOES(const GLbyte * coords) {
  __glintercept_fnptr_glVertex2bvOES(coords);
  __glintercept_log(" - glVertex2bvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glVertex2d)(GLdouble, GLdouble);
static __ctype_glVertex2d __glintercept_fnptr_glVertex2d;
void __glintercept_glVertex2d(GLdouble x, GLdouble y) {
  __glintercept_fnptr_glVertex2d(x, y);
  __glintercept_log(" - glVertex2d(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glVertex2dv)(const GLdouble *);
static __ctype_glVertex2dv __glintercept_fnptr_glVertex2dv;
void __glintercept_glVertex2dv(const GLdouble * v) {
  __glintercept_fnptr_glVertex2dv(v);
  __glintercept_log(" - glVertex2dv(v: %ld)", v);
}

typedef void(*__ctype_glVertex2f)(GLfloat, GLfloat);
static __ctype_glVertex2f __glintercept_fnptr_glVertex2f;
void __glintercept_glVertex2f(GLfloat x, GLfloat y) {
  __glintercept_fnptr_glVertex2f(x, y);
  __glintercept_log(" - glVertex2f(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glVertex2fv)(const GLfloat *);
static __ctype_glVertex2fv __glintercept_fnptr_glVertex2fv;
void __glintercept_glVertex2fv(const GLfloat * v) {
  __glintercept_fnptr_glVertex2fv(v);
  __glintercept_log(" - glVertex2fv(v: %ld)", v);
}

typedef void(*__ctype_glVertex2hNV)(GLhalfNV, GLhalfNV);
static __ctype_glVertex2hNV __glintercept_fnptr_glVertex2hNV;
void __glintercept_glVertex2hNV(GLhalfNV x, GLhalfNV y) {
  __glintercept_fnptr_glVertex2hNV(x, y);
  __glintercept_log(" - glVertex2hNV(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glVertex2hvNV)(const GLhalfNV *);
static __ctype_glVertex2hvNV __glintercept_fnptr_glVertex2hvNV;
void __glintercept_glVertex2hvNV(const GLhalfNV * v) {
  __glintercept_fnptr_glVertex2hvNV(v);
  __glintercept_log(" - glVertex2hvNV(v: %ld)", v);
}

typedef void(*__ctype_glVertex2i)(GLint, GLint);
static __ctype_glVertex2i __glintercept_fnptr_glVertex2i;
void __glintercept_glVertex2i(GLint x, GLint y) {
  __glintercept_fnptr_glVertex2i(x, y);
  __glintercept_log(" - glVertex2i(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glVertex2iv)(const GLint *);
static __ctype_glVertex2iv __glintercept_fnptr_glVertex2iv;
void __glintercept_glVertex2iv(const GLint * v) {
  __glintercept_fnptr_glVertex2iv(v);
  __glintercept_log(" - glVertex2iv(v: %ld)", v);
}

typedef void(*__ctype_glVertex2s)(GLshort, GLshort);
static __ctype_glVertex2s __glintercept_fnptr_glVertex2s;
void __glintercept_glVertex2s(GLshort x, GLshort y) {
  __glintercept_fnptr_glVertex2s(x, y);
  __glintercept_log(" - glVertex2s(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glVertex2sv)(const GLshort *);
static __ctype_glVertex2sv __glintercept_fnptr_glVertex2sv;
void __glintercept_glVertex2sv(const GLshort * v) {
  __glintercept_fnptr_glVertex2sv(v);
  __glintercept_log(" - glVertex2sv(v: %ld)", v);
}

typedef void(*__ctype_glVertex2xOES)(GLfixed);
static __ctype_glVertex2xOES __glintercept_fnptr_glVertex2xOES;
void __glintercept_glVertex2xOES(GLfixed x) {
  __glintercept_fnptr_glVertex2xOES(x);
  __glintercept_log(" - glVertex2xOES(x: %ld)", x);
}

typedef void(*__ctype_glVertex2xvOES)(const GLfixed *);
static __ctype_glVertex2xvOES __glintercept_fnptr_glVertex2xvOES;
void __glintercept_glVertex2xvOES(const GLfixed * coords) {
  __glintercept_fnptr_glVertex2xvOES(coords);
  __glintercept_log(" - glVertex2xvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glVertex3bOES)(GLbyte, GLbyte, GLbyte);
static __ctype_glVertex3bOES __glintercept_fnptr_glVertex3bOES;
void __glintercept_glVertex3bOES(GLbyte x, GLbyte y, GLbyte z) {
  __glintercept_fnptr_glVertex3bOES(x, y, z);
  __glintercept_log(" - glVertex3bOES(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glVertex3bvOES)(const GLbyte *);
static __ctype_glVertex3bvOES __glintercept_fnptr_glVertex3bvOES;
void __glintercept_glVertex3bvOES(const GLbyte * coords) {
  __glintercept_fnptr_glVertex3bvOES(coords);
  __glintercept_log(" - glVertex3bvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glVertex3d)(GLdouble, GLdouble, GLdouble);
static __ctype_glVertex3d __glintercept_fnptr_glVertex3d;
void __glintercept_glVertex3d(GLdouble x, GLdouble y, GLdouble z) {
  __glintercept_fnptr_glVertex3d(x, y, z);
  __glintercept_log(" - glVertex3d(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glVertex3dv)(const GLdouble *);
static __ctype_glVertex3dv __glintercept_fnptr_glVertex3dv;
void __glintercept_glVertex3dv(const GLdouble * v) {
  __glintercept_fnptr_glVertex3dv(v);
  __glintercept_log(" - glVertex3dv(v: %ld)", v);
}

typedef void(*__ctype_glVertex3f)(GLfloat, GLfloat, GLfloat);
static __ctype_glVertex3f __glintercept_fnptr_glVertex3f;
void __glintercept_glVertex3f(GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glVertex3f(x, y, z);
  __glintercept_log(" - glVertex3f(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glVertex3fv)(const GLfloat *);
static __ctype_glVertex3fv __glintercept_fnptr_glVertex3fv;
void __glintercept_glVertex3fv(const GLfloat * v) {
  __glintercept_fnptr_glVertex3fv(v);
  __glintercept_log(" - glVertex3fv(v: %ld)", v);
}

typedef void(*__ctype_glVertex3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
static __ctype_glVertex3hNV __glintercept_fnptr_glVertex3hNV;
void __glintercept_glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z) {
  __glintercept_fnptr_glVertex3hNV(x, y, z);
  __glintercept_log(" - glVertex3hNV(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glVertex3hvNV)(const GLhalfNV *);
static __ctype_glVertex3hvNV __glintercept_fnptr_glVertex3hvNV;
void __glintercept_glVertex3hvNV(const GLhalfNV * v) {
  __glintercept_fnptr_glVertex3hvNV(v);
  __glintercept_log(" - glVertex3hvNV(v: %ld)", v);
}

typedef void(*__ctype_glVertex3i)(GLint, GLint, GLint);
static __ctype_glVertex3i __glintercept_fnptr_glVertex3i;
void __glintercept_glVertex3i(GLint x, GLint y, GLint z) {
  __glintercept_fnptr_glVertex3i(x, y, z);
  __glintercept_log(" - glVertex3i(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glVertex3iv)(const GLint *);
static __ctype_glVertex3iv __glintercept_fnptr_glVertex3iv;
void __glintercept_glVertex3iv(const GLint * v) {
  __glintercept_fnptr_glVertex3iv(v);
  __glintercept_log(" - glVertex3iv(v: %ld)", v);
}

typedef void(*__ctype_glVertex3s)(GLshort, GLshort, GLshort);
static __ctype_glVertex3s __glintercept_fnptr_glVertex3s;
void __glintercept_glVertex3s(GLshort x, GLshort y, GLshort z) {
  __glintercept_fnptr_glVertex3s(x, y, z);
  __glintercept_log(" - glVertex3s(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glVertex3sv)(const GLshort *);
static __ctype_glVertex3sv __glintercept_fnptr_glVertex3sv;
void __glintercept_glVertex3sv(const GLshort * v) {
  __glintercept_fnptr_glVertex3sv(v);
  __glintercept_log(" - glVertex3sv(v: %ld)", v);
}

typedef void(*__ctype_glVertex3xOES)(GLfixed, GLfixed);
static __ctype_glVertex3xOES __glintercept_fnptr_glVertex3xOES;
void __glintercept_glVertex3xOES(GLfixed x, GLfixed y) {
  __glintercept_fnptr_glVertex3xOES(x, y);
  __glintercept_log(" - glVertex3xOES(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glVertex3xvOES)(const GLfixed *);
static __ctype_glVertex3xvOES __glintercept_fnptr_glVertex3xvOES;
void __glintercept_glVertex3xvOES(const GLfixed * coords) {
  __glintercept_fnptr_glVertex3xvOES(coords);
  __glintercept_log(" - glVertex3xvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glVertex4bOES)(GLbyte, GLbyte, GLbyte, GLbyte);
static __ctype_glVertex4bOES __glintercept_fnptr_glVertex4bOES;
void __glintercept_glVertex4bOES(GLbyte x, GLbyte y, GLbyte z, GLbyte w) {
  __glintercept_fnptr_glVertex4bOES(x, y, z, w);
  __glintercept_log(" - glVertex4bOES(x: %ld, y: %ld, z: %ld, w: %ld)", x, y, z, w);
}

typedef void(*__ctype_glVertex4bvOES)(const GLbyte *);
static __ctype_glVertex4bvOES __glintercept_fnptr_glVertex4bvOES;
void __glintercept_glVertex4bvOES(const GLbyte * coords) {
  __glintercept_fnptr_glVertex4bvOES(coords);
  __glintercept_log(" - glVertex4bvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glVertex4d)(GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glVertex4d __glintercept_fnptr_glVertex4d;
void __glintercept_glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  __glintercept_fnptr_glVertex4d(x, y, z, w);
  __glintercept_log(" - glVertex4d(x: %ld, y: %ld, z: %ld, w: %ld)", x, y, z, w);
}

typedef void(*__ctype_glVertex4dv)(const GLdouble *);
static __ctype_glVertex4dv __glintercept_fnptr_glVertex4dv;
void __glintercept_glVertex4dv(const GLdouble * v) {
  __glintercept_fnptr_glVertex4dv(v);
  __glintercept_log(" - glVertex4dv(v: %ld)", v);
}

typedef void(*__ctype_glVertex4f)(GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glVertex4f __glintercept_fnptr_glVertex4f;
void __glintercept_glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  __glintercept_fnptr_glVertex4f(x, y, z, w);
  __glintercept_log(" - glVertex4f(x: %ld, y: %ld, z: %ld, w: %ld)", x, y, z, w);
}

typedef void(*__ctype_glVertex4fv)(const GLfloat *);
static __ctype_glVertex4fv __glintercept_fnptr_glVertex4fv;
void __glintercept_glVertex4fv(const GLfloat * v) {
  __glintercept_fnptr_glVertex4fv(v);
  __glintercept_log(" - glVertex4fv(v: %ld)", v);
}

typedef void(*__ctype_glVertex4hNV)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
static __ctype_glVertex4hNV __glintercept_fnptr_glVertex4hNV;
void __glintercept_glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) {
  __glintercept_fnptr_glVertex4hNV(x, y, z, w);
  __glintercept_log(" - glVertex4hNV(x: %ld, y: %ld, z: %ld, w: %ld)", x, y, z, w);
}

typedef void(*__ctype_glVertex4hvNV)(const GLhalfNV *);
static __ctype_glVertex4hvNV __glintercept_fnptr_glVertex4hvNV;
void __glintercept_glVertex4hvNV(const GLhalfNV * v) {
  __glintercept_fnptr_glVertex4hvNV(v);
  __glintercept_log(" - glVertex4hvNV(v: %ld)", v);
}

typedef void(*__ctype_glVertex4i)(GLint, GLint, GLint, GLint);
static __ctype_glVertex4i __glintercept_fnptr_glVertex4i;
void __glintercept_glVertex4i(GLint x, GLint y, GLint z, GLint w) {
  __glintercept_fnptr_glVertex4i(x, y, z, w);
  __glintercept_log(" - glVertex4i(x: %ld, y: %ld, z: %ld, w: %ld)", x, y, z, w);
}

typedef void(*__ctype_glVertex4iv)(const GLint *);
static __ctype_glVertex4iv __glintercept_fnptr_glVertex4iv;
void __glintercept_glVertex4iv(const GLint * v) {
  __glintercept_fnptr_glVertex4iv(v);
  __glintercept_log(" - glVertex4iv(v: %ld)", v);
}

typedef void(*__ctype_glVertex4s)(GLshort, GLshort, GLshort, GLshort);
static __ctype_glVertex4s __glintercept_fnptr_glVertex4s;
void __glintercept_glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w) {
  __glintercept_fnptr_glVertex4s(x, y, z, w);
  __glintercept_log(" - glVertex4s(x: %ld, y: %ld, z: %ld, w: %ld)", x, y, z, w);
}

typedef void(*__ctype_glVertex4sv)(const GLshort *);
static __ctype_glVertex4sv __glintercept_fnptr_glVertex4sv;
void __glintercept_glVertex4sv(const GLshort * v) {
  __glintercept_fnptr_glVertex4sv(v);
  __glintercept_log(" - glVertex4sv(v: %ld)", v);
}

typedef void(*__ctype_glVertex4xOES)(GLfixed, GLfixed, GLfixed);
static __ctype_glVertex4xOES __glintercept_fnptr_glVertex4xOES;
void __glintercept_glVertex4xOES(GLfixed x, GLfixed y, GLfixed z) {
  __glintercept_fnptr_glVertex4xOES(x, y, z);
  __glintercept_log(" - glVertex4xOES(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glVertex4xvOES)(const GLfixed *);
static __ctype_glVertex4xvOES __glintercept_fnptr_glVertex4xvOES;
void __glintercept_glVertex4xvOES(const GLfixed * coords) {
  __glintercept_fnptr_glVertex4xvOES(coords);
  __glintercept_log(" - glVertex4xvOES(coords: %ld)", coords);
}

typedef void(*__ctype_glVertexArrayAttribBinding)(GLuint, GLuint, GLuint);
static __ctype_glVertexArrayAttribBinding __glintercept_fnptr_glVertexArrayAttribBinding;
void __glintercept_glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex) {
  __glintercept_fnptr_glVertexArrayAttribBinding(vaobj, attribindex, bindingindex);
  __glintercept_log(" - glVertexArrayAttribBinding(vaobj: %ld, attribindex: %ld, bindingindex: %ld)", vaobj, attribindex, bindingindex);
}

typedef void(*__ctype_glVertexArrayAttribFormat)(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint);
static __ctype_glVertexArrayAttribFormat __glintercept_fnptr_glVertexArrayAttribFormat;
void __glintercept_glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
  __glintercept_fnptr_glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset);
  __glintercept_log(" - glVertexArrayAttribFormat(vaobj: %ld, attribindex: %ld, size: %ld, type: %ld (%s), normalized: %ld, relativeoffset: %ld)", vaobj, attribindex, size, type, __gl_intercept_formatenum(type), normalized, relativeoffset);
}

typedef void(*__ctype_glVertexArrayAttribIFormat)(GLuint, GLuint, GLint, GLenum, GLuint);
static __ctype_glVertexArrayAttribIFormat __glintercept_fnptr_glVertexArrayAttribIFormat;
void __glintercept_glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  __glintercept_fnptr_glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset);
  __glintercept_log(" - glVertexArrayAttribIFormat(vaobj: %ld, attribindex: %ld, size: %ld, type: %ld (%s), relativeoffset: %ld)", vaobj, attribindex, size, type, __gl_intercept_formatenum(type), relativeoffset);
}

typedef void(*__ctype_glVertexArrayAttribLFormat)(GLuint, GLuint, GLint, GLenum, GLuint);
static __ctype_glVertexArrayAttribLFormat __glintercept_fnptr_glVertexArrayAttribLFormat;
void __glintercept_glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  __glintercept_fnptr_glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset);
  __glintercept_log(" - glVertexArrayAttribLFormat(vaobj: %ld, attribindex: %ld, size: %ld, type: %ld (%s), relativeoffset: %ld)", vaobj, attribindex, size, type, __gl_intercept_formatenum(type), relativeoffset);
}

typedef void(*__ctype_glVertexArrayBindVertexBufferEXT)(GLuint, GLuint, GLuint, GLintptr, GLsizei);
static __ctype_glVertexArrayBindVertexBufferEXT __glintercept_fnptr_glVertexArrayBindVertexBufferEXT;
void __glintercept_glVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
  __glintercept_fnptr_glVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride);
  __glintercept_log(" - glVertexArrayBindVertexBufferEXT(vaobj: %ld, bindingindex: %ld, buffer: %ld, offset: %ld, stride: %ld)", vaobj, bindingindex, buffer, offset, stride);
}

typedef void(*__ctype_glVertexArrayBindingDivisor)(GLuint, GLuint, GLuint);
static __ctype_glVertexArrayBindingDivisor __glintercept_fnptr_glVertexArrayBindingDivisor;
void __glintercept_glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor) {
  __glintercept_fnptr_glVertexArrayBindingDivisor(vaobj, bindingindex, divisor);
  __glintercept_log(" - glVertexArrayBindingDivisor(vaobj: %ld, bindingindex: %ld, divisor: %ld)", vaobj, bindingindex, divisor);
}

typedef void(*__ctype_glVertexArrayColorOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
static __ctype_glVertexArrayColorOffsetEXT __glintercept_fnptr_glVertexArrayColorOffsetEXT;
void __glintercept_glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  __glintercept_fnptr_glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
  __glintercept_log(" - glVertexArrayColorOffsetEXT(vaobj: %ld, buffer: %ld, size: %ld, type: %ld (%s), stride: %ld, offset: %ld)", vaobj, buffer, size, type, __gl_intercept_formatenum(type), stride, offset);
}

typedef void(*__ctype_glVertexArrayEdgeFlagOffsetEXT)(GLuint, GLuint, GLsizei, GLintptr);
static __ctype_glVertexArrayEdgeFlagOffsetEXT __glintercept_fnptr_glVertexArrayEdgeFlagOffsetEXT;
void __glintercept_glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset) {
  __glintercept_fnptr_glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset);
  __glintercept_log(" - glVertexArrayEdgeFlagOffsetEXT(vaobj: %ld, buffer: %ld, stride: %ld, offset: %ld)", vaobj, buffer, stride, offset);
}

typedef void(*__ctype_glVertexArrayElementBuffer)(GLuint, GLuint);
static __ctype_glVertexArrayElementBuffer __glintercept_fnptr_glVertexArrayElementBuffer;
void __glintercept_glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer) {
  __glintercept_fnptr_glVertexArrayElementBuffer(vaobj, buffer);
  __glintercept_log(" - glVertexArrayElementBuffer(vaobj: %ld, buffer: %ld)", vaobj, buffer);
}

typedef void(*__ctype_glVertexArrayFogCoordOffsetEXT)(GLuint, GLuint, GLenum, GLsizei, GLintptr);
static __ctype_glVertexArrayFogCoordOffsetEXT __glintercept_fnptr_glVertexArrayFogCoordOffsetEXT;
void __glintercept_glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {
  __glintercept_fnptr_glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset);
  __glintercept_log(" - glVertexArrayFogCoordOffsetEXT(vaobj: %ld, buffer: %ld, type: %ld (%s), stride: %ld, offset: %ld)", vaobj, buffer, type, __gl_intercept_formatenum(type), stride, offset);
}

typedef void(*__ctype_glVertexArrayIndexOffsetEXT)(GLuint, GLuint, GLenum, GLsizei, GLintptr);
static __ctype_glVertexArrayIndexOffsetEXT __glintercept_fnptr_glVertexArrayIndexOffsetEXT;
void __glintercept_glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {
  __glintercept_fnptr_glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset);
  __glintercept_log(" - glVertexArrayIndexOffsetEXT(vaobj: %ld, buffer: %ld, type: %ld (%s), stride: %ld, offset: %ld)", vaobj, buffer, type, __gl_intercept_formatenum(type), stride, offset);
}

typedef void(*__ctype_glVertexArrayMultiTexCoordOffsetEXT)(GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr);
static __ctype_glVertexArrayMultiTexCoordOffsetEXT __glintercept_fnptr_glVertexArrayMultiTexCoordOffsetEXT;
void __glintercept_glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  __glintercept_fnptr_glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset);
  __glintercept_log(" - glVertexArrayMultiTexCoordOffsetEXT(vaobj: %ld, buffer: %ld, texunit: %ld (%s), size: %ld, type: %ld (%s), stride: %ld, offset: %ld)", vaobj, buffer, texunit, __gl_intercept_formatenum(texunit), size, type, __gl_intercept_formatenum(type), stride, offset);
}

typedef void(*__ctype_glVertexArrayNormalOffsetEXT)(GLuint, GLuint, GLenum, GLsizei, GLintptr);
static __ctype_glVertexArrayNormalOffsetEXT __glintercept_fnptr_glVertexArrayNormalOffsetEXT;
void __glintercept_glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {
  __glintercept_fnptr_glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset);
  __glintercept_log(" - glVertexArrayNormalOffsetEXT(vaobj: %ld, buffer: %ld, type: %ld (%s), stride: %ld, offset: %ld)", vaobj, buffer, type, __gl_intercept_formatenum(type), stride, offset);
}

typedef void(*__ctype_glVertexArrayParameteriAPPLE)(GLenum, GLint);
static __ctype_glVertexArrayParameteriAPPLE __glintercept_fnptr_glVertexArrayParameteriAPPLE;
void __glintercept_glVertexArrayParameteriAPPLE(GLenum pname, GLint param) {
  __glintercept_fnptr_glVertexArrayParameteriAPPLE(pname, param);
  __glintercept_log(" - glVertexArrayParameteriAPPLE(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glVertexArrayRangeAPPLE)(GLsizei, void *);
static __ctype_glVertexArrayRangeAPPLE __glintercept_fnptr_glVertexArrayRangeAPPLE;
void __glintercept_glVertexArrayRangeAPPLE(GLsizei length, void * pointer) {
  __glintercept_fnptr_glVertexArrayRangeAPPLE(length, pointer);
  __glintercept_log(" - glVertexArrayRangeAPPLE(length: %ld, pointer: %ld)", length, pointer);
}

typedef void(*__ctype_glVertexArrayRangeNV)(GLsizei, const void *);
static __ctype_glVertexArrayRangeNV __glintercept_fnptr_glVertexArrayRangeNV;
void __glintercept_glVertexArrayRangeNV(GLsizei length, const void * pointer) {
  __glintercept_fnptr_glVertexArrayRangeNV(length, pointer);
  __glintercept_log(" - glVertexArrayRangeNV(length: %ld, pointer: %ld)", length, pointer);
}

typedef void(*__ctype_glVertexArraySecondaryColorOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
static __ctype_glVertexArraySecondaryColorOffsetEXT __glintercept_fnptr_glVertexArraySecondaryColorOffsetEXT;
void __glintercept_glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  __glintercept_fnptr_glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
  __glintercept_log(" - glVertexArraySecondaryColorOffsetEXT(vaobj: %ld, buffer: %ld, size: %ld, type: %ld (%s), stride: %ld, offset: %ld)", vaobj, buffer, size, type, __gl_intercept_formatenum(type), stride, offset);
}

typedef void(*__ctype_glVertexArrayTexCoordOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
static __ctype_glVertexArrayTexCoordOffsetEXT __glintercept_fnptr_glVertexArrayTexCoordOffsetEXT;
void __glintercept_glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  __glintercept_fnptr_glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset);
  __glintercept_log(" - glVertexArrayTexCoordOffsetEXT(vaobj: %ld, buffer: %ld, size: %ld, type: %ld (%s), stride: %ld, offset: %ld)", vaobj, buffer, size, type, __gl_intercept_formatenum(type), stride, offset);
}

typedef void(*__ctype_glVertexArrayVertexAttribBindingEXT)(GLuint, GLuint, GLuint);
static __ctype_glVertexArrayVertexAttribBindingEXT __glintercept_fnptr_glVertexArrayVertexAttribBindingEXT;
void __glintercept_glVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex) {
  __glintercept_fnptr_glVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex);
  __glintercept_log(" - glVertexArrayVertexAttribBindingEXT(vaobj: %ld, attribindex: %ld, bindingindex: %ld)", vaobj, attribindex, bindingindex);
}

typedef void(*__ctype_glVertexArrayVertexAttribDivisorEXT)(GLuint, GLuint, GLuint);
static __ctype_glVertexArrayVertexAttribDivisorEXT __glintercept_fnptr_glVertexArrayVertexAttribDivisorEXT;
void __glintercept_glVertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor) {
  __glintercept_fnptr_glVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor);
  __glintercept_log(" - glVertexArrayVertexAttribDivisorEXT(vaobj: %ld, index: %ld, divisor: %ld)", vaobj, index, divisor);
}

typedef void(*__ctype_glVertexArrayVertexAttribFormatEXT)(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint);
static __ctype_glVertexArrayVertexAttribFormatEXT __glintercept_fnptr_glVertexArrayVertexAttribFormatEXT;
void __glintercept_glVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
  __glintercept_fnptr_glVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset);
  __glintercept_log(" - glVertexArrayVertexAttribFormatEXT(vaobj: %ld, attribindex: %ld, size: %ld, type: %ld (%s), normalized: %ld, relativeoffset: %ld)", vaobj, attribindex, size, type, __gl_intercept_formatenum(type), normalized, relativeoffset);
}

typedef void(*__ctype_glVertexArrayVertexAttribIFormatEXT)(GLuint, GLuint, GLint, GLenum, GLuint);
static __ctype_glVertexArrayVertexAttribIFormatEXT __glintercept_fnptr_glVertexArrayVertexAttribIFormatEXT;
void __glintercept_glVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  __glintercept_fnptr_glVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset);
  __glintercept_log(" - glVertexArrayVertexAttribIFormatEXT(vaobj: %ld, attribindex: %ld, size: %ld, type: %ld (%s), relativeoffset: %ld)", vaobj, attribindex, size, type, __gl_intercept_formatenum(type), relativeoffset);
}

typedef void(*__ctype_glVertexArrayVertexAttribIOffsetEXT)(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
static __ctype_glVertexArrayVertexAttribIOffsetEXT __glintercept_fnptr_glVertexArrayVertexAttribIOffsetEXT;
void __glintercept_glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  __glintercept_fnptr_glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
  __glintercept_log(" - glVertexArrayVertexAttribIOffsetEXT(vaobj: %ld, buffer: %ld, index: %ld, size: %ld, type: %ld (%s), stride: %ld, offset: %ld)", vaobj, buffer, index, size, type, __gl_intercept_formatenum(type), stride, offset);
}

typedef void(*__ctype_glVertexArrayVertexAttribLFormatEXT)(GLuint, GLuint, GLint, GLenum, GLuint);
static __ctype_glVertexArrayVertexAttribLFormatEXT __glintercept_fnptr_glVertexArrayVertexAttribLFormatEXT;
void __glintercept_glVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  __glintercept_fnptr_glVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset);
  __glintercept_log(" - glVertexArrayVertexAttribLFormatEXT(vaobj: %ld, attribindex: %ld, size: %ld, type: %ld (%s), relativeoffset: %ld)", vaobj, attribindex, size, type, __gl_intercept_formatenum(type), relativeoffset);
}

typedef void(*__ctype_glVertexArrayVertexAttribLOffsetEXT)(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
static __ctype_glVertexArrayVertexAttribLOffsetEXT __glintercept_fnptr_glVertexArrayVertexAttribLOffsetEXT;
void __glintercept_glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  __glintercept_fnptr_glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
  __glintercept_log(" - glVertexArrayVertexAttribLOffsetEXT(vaobj: %ld, buffer: %ld, index: %ld, size: %ld, type: %ld (%s), stride: %ld, offset: %ld)", vaobj, buffer, index, size, type, __gl_intercept_formatenum(type), stride, offset);
}

typedef void(*__ctype_glVertexArrayVertexAttribOffsetEXT)(GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr);
static __ctype_glVertexArrayVertexAttribOffsetEXT __glintercept_fnptr_glVertexArrayVertexAttribOffsetEXT;
void __glintercept_glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset) {
  __glintercept_fnptr_glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset);
  __glintercept_log(" - glVertexArrayVertexAttribOffsetEXT(vaobj: %ld, buffer: %ld, index: %ld, size: %ld, type: %ld (%s), normalized: %ld, stride: %ld, offset: %ld)", vaobj, buffer, index, size, type, __gl_intercept_formatenum(type), normalized, stride, offset);
}

typedef void(*__ctype_glVertexArrayVertexBindingDivisorEXT)(GLuint, GLuint, GLuint);
static __ctype_glVertexArrayVertexBindingDivisorEXT __glintercept_fnptr_glVertexArrayVertexBindingDivisorEXT;
void __glintercept_glVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor) {
  __glintercept_fnptr_glVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor);
  __glintercept_log(" - glVertexArrayVertexBindingDivisorEXT(vaobj: %ld, bindingindex: %ld, divisor: %ld)", vaobj, bindingindex, divisor);
}

typedef void(*__ctype_glVertexArrayVertexBuffer)(GLuint, GLuint, GLuint, GLintptr, GLsizei);
static __ctype_glVertexArrayVertexBuffer __glintercept_fnptr_glVertexArrayVertexBuffer;
void __glintercept_glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
  __glintercept_fnptr_glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);
  __glintercept_log(" - glVertexArrayVertexBuffer(vaobj: %ld, bindingindex: %ld, buffer: %ld, offset: %ld, stride: %ld)", vaobj, bindingindex, buffer, offset, stride);
}

typedef void(*__ctype_glVertexArrayVertexBuffers)(GLuint, GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizei *);
static __ctype_glVertexArrayVertexBuffers __glintercept_fnptr_glVertexArrayVertexBuffers;
void __glintercept_glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) {
  __glintercept_fnptr_glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides);
  __glintercept_log(" - glVertexArrayVertexBuffers(vaobj: %ld, first: %ld, count: %ld, buffers: %ld, offsets: %ld, strides: %ld)", vaobj, first, count, buffers, offsets, strides);
}

typedef void(*__ctype_glVertexArrayVertexOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
static __ctype_glVertexArrayVertexOffsetEXT __glintercept_fnptr_glVertexArrayVertexOffsetEXT;
void __glintercept_glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  __glintercept_fnptr_glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset);
  __glintercept_log(" - glVertexArrayVertexOffsetEXT(vaobj: %ld, buffer: %ld, size: %ld, type: %ld (%s), stride: %ld, offset: %ld)", vaobj, buffer, size, type, __gl_intercept_formatenum(type), stride, offset);
}

typedef void(*__ctype_glVertexAttrib1d)(GLuint, GLdouble);
static __ctype_glVertexAttrib1d __glintercept_fnptr_glVertexAttrib1d;
void __glintercept_glVertexAttrib1d(GLuint index, GLdouble x) {
  __glintercept_fnptr_glVertexAttrib1d(index, x);
  __glintercept_log(" - glVertexAttrib1d(index: %ld, x: %ld)", index, x);
}

typedef void(*__ctype_glVertexAttrib1dARB)(GLuint, GLdouble);
static __ctype_glVertexAttrib1dARB __glintercept_fnptr_glVertexAttrib1dARB;
void __glintercept_glVertexAttrib1dARB(GLuint index, GLdouble x) {
  __glintercept_fnptr_glVertexAttrib1dARB(index, x);
  __glintercept_log(" - glVertexAttrib1dARB(index: %ld, x: %ld)", index, x);
}

typedef void(*__ctype_glVertexAttrib1dNV)(GLuint, GLdouble);
static __ctype_glVertexAttrib1dNV __glintercept_fnptr_glVertexAttrib1dNV;
void __glintercept_glVertexAttrib1dNV(GLuint index, GLdouble x) {
  __glintercept_fnptr_glVertexAttrib1dNV(index, x);
  __glintercept_log(" - glVertexAttrib1dNV(index: %ld, x: %ld)", index, x);
}

typedef void(*__ctype_glVertexAttrib1dv)(GLuint, const GLdouble *);
static __ctype_glVertexAttrib1dv __glintercept_fnptr_glVertexAttrib1dv;
void __glintercept_glVertexAttrib1dv(GLuint index, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttrib1dv(index, v);
  __glintercept_log(" - glVertexAttrib1dv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib1dvARB)(GLuint, const GLdouble *);
static __ctype_glVertexAttrib1dvARB __glintercept_fnptr_glVertexAttrib1dvARB;
void __glintercept_glVertexAttrib1dvARB(GLuint index, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttrib1dvARB(index, v);
  __glintercept_log(" - glVertexAttrib1dvARB(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib1dvNV)(GLuint, const GLdouble *);
static __ctype_glVertexAttrib1dvNV __glintercept_fnptr_glVertexAttrib1dvNV;
void __glintercept_glVertexAttrib1dvNV(GLuint index, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttrib1dvNV(index, v);
  __glintercept_log(" - glVertexAttrib1dvNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib1f)(GLuint, GLfloat);
static __ctype_glVertexAttrib1f __glintercept_fnptr_glVertexAttrib1f;
void __glintercept_glVertexAttrib1f(GLuint index, GLfloat x) {
  __glintercept_fnptr_glVertexAttrib1f(index, x);
  __glintercept_log(" - glVertexAttrib1f(index: %ld, x: %ld)", index, x);
}

typedef void(*__ctype_glVertexAttrib1fARB)(GLuint, GLfloat);
static __ctype_glVertexAttrib1fARB __glintercept_fnptr_glVertexAttrib1fARB;
void __glintercept_glVertexAttrib1fARB(GLuint index, GLfloat x) {
  __glintercept_fnptr_glVertexAttrib1fARB(index, x);
  __glintercept_log(" - glVertexAttrib1fARB(index: %ld, x: %ld)", index, x);
}

typedef void(*__ctype_glVertexAttrib1fNV)(GLuint, GLfloat);
static __ctype_glVertexAttrib1fNV __glintercept_fnptr_glVertexAttrib1fNV;
void __glintercept_glVertexAttrib1fNV(GLuint index, GLfloat x) {
  __glintercept_fnptr_glVertexAttrib1fNV(index, x);
  __glintercept_log(" - glVertexAttrib1fNV(index: %ld, x: %ld)", index, x);
}

typedef void(*__ctype_glVertexAttrib1fv)(GLuint, const GLfloat *);
static __ctype_glVertexAttrib1fv __glintercept_fnptr_glVertexAttrib1fv;
void __glintercept_glVertexAttrib1fv(GLuint index, const GLfloat * v) {
  __glintercept_fnptr_glVertexAttrib1fv(index, v);
  __glintercept_log(" - glVertexAttrib1fv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib1fvARB)(GLuint, const GLfloat *);
static __ctype_glVertexAttrib1fvARB __glintercept_fnptr_glVertexAttrib1fvARB;
void __glintercept_glVertexAttrib1fvARB(GLuint index, const GLfloat * v) {
  __glintercept_fnptr_glVertexAttrib1fvARB(index, v);
  __glintercept_log(" - glVertexAttrib1fvARB(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib1fvNV)(GLuint, const GLfloat *);
static __ctype_glVertexAttrib1fvNV __glintercept_fnptr_glVertexAttrib1fvNV;
void __glintercept_glVertexAttrib1fvNV(GLuint index, const GLfloat * v) {
  __glintercept_fnptr_glVertexAttrib1fvNV(index, v);
  __glintercept_log(" - glVertexAttrib1fvNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib1hNV)(GLuint, GLhalfNV);
static __ctype_glVertexAttrib1hNV __glintercept_fnptr_glVertexAttrib1hNV;
void __glintercept_glVertexAttrib1hNV(GLuint index, GLhalfNV x) {
  __glintercept_fnptr_glVertexAttrib1hNV(index, x);
  __glintercept_log(" - glVertexAttrib1hNV(index: %ld, x: %ld)", index, x);
}

typedef void(*__ctype_glVertexAttrib1hvNV)(GLuint, const GLhalfNV *);
static __ctype_glVertexAttrib1hvNV __glintercept_fnptr_glVertexAttrib1hvNV;
void __glintercept_glVertexAttrib1hvNV(GLuint index, const GLhalfNV * v) {
  __glintercept_fnptr_glVertexAttrib1hvNV(index, v);
  __glintercept_log(" - glVertexAttrib1hvNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib1s)(GLuint, GLshort);
static __ctype_glVertexAttrib1s __glintercept_fnptr_glVertexAttrib1s;
void __glintercept_glVertexAttrib1s(GLuint index, GLshort x) {
  __glintercept_fnptr_glVertexAttrib1s(index, x);
  __glintercept_log(" - glVertexAttrib1s(index: %ld, x: %ld)", index, x);
}

typedef void(*__ctype_glVertexAttrib1sARB)(GLuint, GLshort);
static __ctype_glVertexAttrib1sARB __glintercept_fnptr_glVertexAttrib1sARB;
void __glintercept_glVertexAttrib1sARB(GLuint index, GLshort x) {
  __glintercept_fnptr_glVertexAttrib1sARB(index, x);
  __glintercept_log(" - glVertexAttrib1sARB(index: %ld, x: %ld)", index, x);
}

typedef void(*__ctype_glVertexAttrib1sNV)(GLuint, GLshort);
static __ctype_glVertexAttrib1sNV __glintercept_fnptr_glVertexAttrib1sNV;
void __glintercept_glVertexAttrib1sNV(GLuint index, GLshort x) {
  __glintercept_fnptr_glVertexAttrib1sNV(index, x);
  __glintercept_log(" - glVertexAttrib1sNV(index: %ld, x: %ld)", index, x);
}

typedef void(*__ctype_glVertexAttrib1sv)(GLuint, const GLshort *);
static __ctype_glVertexAttrib1sv __glintercept_fnptr_glVertexAttrib1sv;
void __glintercept_glVertexAttrib1sv(GLuint index, const GLshort * v) {
  __glintercept_fnptr_glVertexAttrib1sv(index, v);
  __glintercept_log(" - glVertexAttrib1sv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib1svARB)(GLuint, const GLshort *);
static __ctype_glVertexAttrib1svARB __glintercept_fnptr_glVertexAttrib1svARB;
void __glintercept_glVertexAttrib1svARB(GLuint index, const GLshort * v) {
  __glintercept_fnptr_glVertexAttrib1svARB(index, v);
  __glintercept_log(" - glVertexAttrib1svARB(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib1svNV)(GLuint, const GLshort *);
static __ctype_glVertexAttrib1svNV __glintercept_fnptr_glVertexAttrib1svNV;
void __glintercept_glVertexAttrib1svNV(GLuint index, const GLshort * v) {
  __glintercept_fnptr_glVertexAttrib1svNV(index, v);
  __glintercept_log(" - glVertexAttrib1svNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib2d)(GLuint, GLdouble, GLdouble);
static __ctype_glVertexAttrib2d __glintercept_fnptr_glVertexAttrib2d;
void __glintercept_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) {
  __glintercept_fnptr_glVertexAttrib2d(index, x, y);
  __glintercept_log(" - glVertexAttrib2d(index: %ld, x: %ld, y: %ld)", index, x, y);
}

typedef void(*__ctype_glVertexAttrib2dARB)(GLuint, GLdouble, GLdouble);
static __ctype_glVertexAttrib2dARB __glintercept_fnptr_glVertexAttrib2dARB;
void __glintercept_glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y) {
  __glintercept_fnptr_glVertexAttrib2dARB(index, x, y);
  __glintercept_log(" - glVertexAttrib2dARB(index: %ld, x: %ld, y: %ld)", index, x, y);
}

typedef void(*__ctype_glVertexAttrib2dNV)(GLuint, GLdouble, GLdouble);
static __ctype_glVertexAttrib2dNV __glintercept_fnptr_glVertexAttrib2dNV;
void __glintercept_glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y) {
  __glintercept_fnptr_glVertexAttrib2dNV(index, x, y);
  __glintercept_log(" - glVertexAttrib2dNV(index: %ld, x: %ld, y: %ld)", index, x, y);
}

typedef void(*__ctype_glVertexAttrib2dv)(GLuint, const GLdouble *);
static __ctype_glVertexAttrib2dv __glintercept_fnptr_glVertexAttrib2dv;
void __glintercept_glVertexAttrib2dv(GLuint index, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttrib2dv(index, v);
  __glintercept_log(" - glVertexAttrib2dv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib2dvARB)(GLuint, const GLdouble *);
static __ctype_glVertexAttrib2dvARB __glintercept_fnptr_glVertexAttrib2dvARB;
void __glintercept_glVertexAttrib2dvARB(GLuint index, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttrib2dvARB(index, v);
  __glintercept_log(" - glVertexAttrib2dvARB(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib2dvNV)(GLuint, const GLdouble *);
static __ctype_glVertexAttrib2dvNV __glintercept_fnptr_glVertexAttrib2dvNV;
void __glintercept_glVertexAttrib2dvNV(GLuint index, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttrib2dvNV(index, v);
  __glintercept_log(" - glVertexAttrib2dvNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib2f)(GLuint, GLfloat, GLfloat);
static __ctype_glVertexAttrib2f __glintercept_fnptr_glVertexAttrib2f;
void __glintercept_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) {
  __glintercept_fnptr_glVertexAttrib2f(index, x, y);
  __glintercept_log(" - glVertexAttrib2f(index: %ld, x: %ld, y: %ld)", index, x, y);
}

typedef void(*__ctype_glVertexAttrib2fARB)(GLuint, GLfloat, GLfloat);
static __ctype_glVertexAttrib2fARB __glintercept_fnptr_glVertexAttrib2fARB;
void __glintercept_glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y) {
  __glintercept_fnptr_glVertexAttrib2fARB(index, x, y);
  __glintercept_log(" - glVertexAttrib2fARB(index: %ld, x: %ld, y: %ld)", index, x, y);
}

typedef void(*__ctype_glVertexAttrib2fNV)(GLuint, GLfloat, GLfloat);
static __ctype_glVertexAttrib2fNV __glintercept_fnptr_glVertexAttrib2fNV;
void __glintercept_glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y) {
  __glintercept_fnptr_glVertexAttrib2fNV(index, x, y);
  __glintercept_log(" - glVertexAttrib2fNV(index: %ld, x: %ld, y: %ld)", index, x, y);
}

typedef void(*__ctype_glVertexAttrib2fv)(GLuint, const GLfloat *);
static __ctype_glVertexAttrib2fv __glintercept_fnptr_glVertexAttrib2fv;
void __glintercept_glVertexAttrib2fv(GLuint index, const GLfloat * v) {
  __glintercept_fnptr_glVertexAttrib2fv(index, v);
  __glintercept_log(" - glVertexAttrib2fv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib2fvARB)(GLuint, const GLfloat *);
static __ctype_glVertexAttrib2fvARB __glintercept_fnptr_glVertexAttrib2fvARB;
void __glintercept_glVertexAttrib2fvARB(GLuint index, const GLfloat * v) {
  __glintercept_fnptr_glVertexAttrib2fvARB(index, v);
  __glintercept_log(" - glVertexAttrib2fvARB(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib2fvNV)(GLuint, const GLfloat *);
static __ctype_glVertexAttrib2fvNV __glintercept_fnptr_glVertexAttrib2fvNV;
void __glintercept_glVertexAttrib2fvNV(GLuint index, const GLfloat * v) {
  __glintercept_fnptr_glVertexAttrib2fvNV(index, v);
  __glintercept_log(" - glVertexAttrib2fvNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib2hNV)(GLuint, GLhalfNV, GLhalfNV);
static __ctype_glVertexAttrib2hNV __glintercept_fnptr_glVertexAttrib2hNV;
void __glintercept_glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y) {
  __glintercept_fnptr_glVertexAttrib2hNV(index, x, y);
  __glintercept_log(" - glVertexAttrib2hNV(index: %ld, x: %ld, y: %ld)", index, x, y);
}

typedef void(*__ctype_glVertexAttrib2hvNV)(GLuint, const GLhalfNV *);
static __ctype_glVertexAttrib2hvNV __glintercept_fnptr_glVertexAttrib2hvNV;
void __glintercept_glVertexAttrib2hvNV(GLuint index, const GLhalfNV * v) {
  __glintercept_fnptr_glVertexAttrib2hvNV(index, v);
  __glintercept_log(" - glVertexAttrib2hvNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib2s)(GLuint, GLshort, GLshort);
static __ctype_glVertexAttrib2s __glintercept_fnptr_glVertexAttrib2s;
void __glintercept_glVertexAttrib2s(GLuint index, GLshort x, GLshort y) {
  __glintercept_fnptr_glVertexAttrib2s(index, x, y);
  __glintercept_log(" - glVertexAttrib2s(index: %ld, x: %ld, y: %ld)", index, x, y);
}

typedef void(*__ctype_glVertexAttrib2sARB)(GLuint, GLshort, GLshort);
static __ctype_glVertexAttrib2sARB __glintercept_fnptr_glVertexAttrib2sARB;
void __glintercept_glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y) {
  __glintercept_fnptr_glVertexAttrib2sARB(index, x, y);
  __glintercept_log(" - glVertexAttrib2sARB(index: %ld, x: %ld, y: %ld)", index, x, y);
}

typedef void(*__ctype_glVertexAttrib2sNV)(GLuint, GLshort, GLshort);
static __ctype_glVertexAttrib2sNV __glintercept_fnptr_glVertexAttrib2sNV;
void __glintercept_glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y) {
  __glintercept_fnptr_glVertexAttrib2sNV(index, x, y);
  __glintercept_log(" - glVertexAttrib2sNV(index: %ld, x: %ld, y: %ld)", index, x, y);
}

typedef void(*__ctype_glVertexAttrib2sv)(GLuint, const GLshort *);
static __ctype_glVertexAttrib2sv __glintercept_fnptr_glVertexAttrib2sv;
void __glintercept_glVertexAttrib2sv(GLuint index, const GLshort * v) {
  __glintercept_fnptr_glVertexAttrib2sv(index, v);
  __glintercept_log(" - glVertexAttrib2sv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib2svARB)(GLuint, const GLshort *);
static __ctype_glVertexAttrib2svARB __glintercept_fnptr_glVertexAttrib2svARB;
void __glintercept_glVertexAttrib2svARB(GLuint index, const GLshort * v) {
  __glintercept_fnptr_glVertexAttrib2svARB(index, v);
  __glintercept_log(" - glVertexAttrib2svARB(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib2svNV)(GLuint, const GLshort *);
static __ctype_glVertexAttrib2svNV __glintercept_fnptr_glVertexAttrib2svNV;
void __glintercept_glVertexAttrib2svNV(GLuint index, const GLshort * v) {
  __glintercept_fnptr_glVertexAttrib2svNV(index, v);
  __glintercept_log(" - glVertexAttrib2svNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib3d)(GLuint, GLdouble, GLdouble, GLdouble);
static __ctype_glVertexAttrib3d __glintercept_fnptr_glVertexAttrib3d;
void __glintercept_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  __glintercept_fnptr_glVertexAttrib3d(index, x, y, z);
  __glintercept_log(" - glVertexAttrib3d(index: %ld, x: %ld, y: %ld, z: %ld)", index, x, y, z);
}

typedef void(*__ctype_glVertexAttrib3dARB)(GLuint, GLdouble, GLdouble, GLdouble);
static __ctype_glVertexAttrib3dARB __glintercept_fnptr_glVertexAttrib3dARB;
void __glintercept_glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  __glintercept_fnptr_glVertexAttrib3dARB(index, x, y, z);
  __glintercept_log(" - glVertexAttrib3dARB(index: %ld, x: %ld, y: %ld, z: %ld)", index, x, y, z);
}

typedef void(*__ctype_glVertexAttrib3dNV)(GLuint, GLdouble, GLdouble, GLdouble);
static __ctype_glVertexAttrib3dNV __glintercept_fnptr_glVertexAttrib3dNV;
void __glintercept_glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  __glintercept_fnptr_glVertexAttrib3dNV(index, x, y, z);
  __glintercept_log(" - glVertexAttrib3dNV(index: %ld, x: %ld, y: %ld, z: %ld)", index, x, y, z);
}

typedef void(*__ctype_glVertexAttrib3dv)(GLuint, const GLdouble *);
static __ctype_glVertexAttrib3dv __glintercept_fnptr_glVertexAttrib3dv;
void __glintercept_glVertexAttrib3dv(GLuint index, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttrib3dv(index, v);
  __glintercept_log(" - glVertexAttrib3dv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib3dvARB)(GLuint, const GLdouble *);
static __ctype_glVertexAttrib3dvARB __glintercept_fnptr_glVertexAttrib3dvARB;
void __glintercept_glVertexAttrib3dvARB(GLuint index, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttrib3dvARB(index, v);
  __glintercept_log(" - glVertexAttrib3dvARB(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib3dvNV)(GLuint, const GLdouble *);
static __ctype_glVertexAttrib3dvNV __glintercept_fnptr_glVertexAttrib3dvNV;
void __glintercept_glVertexAttrib3dvNV(GLuint index, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttrib3dvNV(index, v);
  __glintercept_log(" - glVertexAttrib3dvNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib3f)(GLuint, GLfloat, GLfloat, GLfloat);
static __ctype_glVertexAttrib3f __glintercept_fnptr_glVertexAttrib3f;
void __glintercept_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glVertexAttrib3f(index, x, y, z);
  __glintercept_log(" - glVertexAttrib3f(index: %ld, x: %ld, y: %ld, z: %ld)", index, x, y, z);
}

typedef void(*__ctype_glVertexAttrib3fARB)(GLuint, GLfloat, GLfloat, GLfloat);
static __ctype_glVertexAttrib3fARB __glintercept_fnptr_glVertexAttrib3fARB;
void __glintercept_glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glVertexAttrib3fARB(index, x, y, z);
  __glintercept_log(" - glVertexAttrib3fARB(index: %ld, x: %ld, y: %ld, z: %ld)", index, x, y, z);
}

typedef void(*__ctype_glVertexAttrib3fNV)(GLuint, GLfloat, GLfloat, GLfloat);
static __ctype_glVertexAttrib3fNV __glintercept_fnptr_glVertexAttrib3fNV;
void __glintercept_glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glVertexAttrib3fNV(index, x, y, z);
  __glintercept_log(" - glVertexAttrib3fNV(index: %ld, x: %ld, y: %ld, z: %ld)", index, x, y, z);
}

typedef void(*__ctype_glVertexAttrib3fv)(GLuint, const GLfloat *);
static __ctype_glVertexAttrib3fv __glintercept_fnptr_glVertexAttrib3fv;
void __glintercept_glVertexAttrib3fv(GLuint index, const GLfloat * v) {
  __glintercept_fnptr_glVertexAttrib3fv(index, v);
  __glintercept_log(" - glVertexAttrib3fv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib3fvARB)(GLuint, const GLfloat *);
static __ctype_glVertexAttrib3fvARB __glintercept_fnptr_glVertexAttrib3fvARB;
void __glintercept_glVertexAttrib3fvARB(GLuint index, const GLfloat * v) {
  __glintercept_fnptr_glVertexAttrib3fvARB(index, v);
  __glintercept_log(" - glVertexAttrib3fvARB(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib3fvNV)(GLuint, const GLfloat *);
static __ctype_glVertexAttrib3fvNV __glintercept_fnptr_glVertexAttrib3fvNV;
void __glintercept_glVertexAttrib3fvNV(GLuint index, const GLfloat * v) {
  __glintercept_fnptr_glVertexAttrib3fvNV(index, v);
  __glintercept_log(" - glVertexAttrib3fvNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib3hNV)(GLuint, GLhalfNV, GLhalfNV, GLhalfNV);
static __ctype_glVertexAttrib3hNV __glintercept_fnptr_glVertexAttrib3hNV;
void __glintercept_glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z) {
  __glintercept_fnptr_glVertexAttrib3hNV(index, x, y, z);
  __glintercept_log(" - glVertexAttrib3hNV(index: %ld, x: %ld, y: %ld, z: %ld)", index, x, y, z);
}

typedef void(*__ctype_glVertexAttrib3hvNV)(GLuint, const GLhalfNV *);
static __ctype_glVertexAttrib3hvNV __glintercept_fnptr_glVertexAttrib3hvNV;
void __glintercept_glVertexAttrib3hvNV(GLuint index, const GLhalfNV * v) {
  __glintercept_fnptr_glVertexAttrib3hvNV(index, v);
  __glintercept_log(" - glVertexAttrib3hvNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib3s)(GLuint, GLshort, GLshort, GLshort);
static __ctype_glVertexAttrib3s __glintercept_fnptr_glVertexAttrib3s;
void __glintercept_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) {
  __glintercept_fnptr_glVertexAttrib3s(index, x, y, z);
  __glintercept_log(" - glVertexAttrib3s(index: %ld, x: %ld, y: %ld, z: %ld)", index, x, y, z);
}

typedef void(*__ctype_glVertexAttrib3sARB)(GLuint, GLshort, GLshort, GLshort);
static __ctype_glVertexAttrib3sARB __glintercept_fnptr_glVertexAttrib3sARB;
void __glintercept_glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z) {
  __glintercept_fnptr_glVertexAttrib3sARB(index, x, y, z);
  __glintercept_log(" - glVertexAttrib3sARB(index: %ld, x: %ld, y: %ld, z: %ld)", index, x, y, z);
}

typedef void(*__ctype_glVertexAttrib3sNV)(GLuint, GLshort, GLshort, GLshort);
static __ctype_glVertexAttrib3sNV __glintercept_fnptr_glVertexAttrib3sNV;
void __glintercept_glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z) {
  __glintercept_fnptr_glVertexAttrib3sNV(index, x, y, z);
  __glintercept_log(" - glVertexAttrib3sNV(index: %ld, x: %ld, y: %ld, z: %ld)", index, x, y, z);
}

typedef void(*__ctype_glVertexAttrib3sv)(GLuint, const GLshort *);
static __ctype_glVertexAttrib3sv __glintercept_fnptr_glVertexAttrib3sv;
void __glintercept_glVertexAttrib3sv(GLuint index, const GLshort * v) {
  __glintercept_fnptr_glVertexAttrib3sv(index, v);
  __glintercept_log(" - glVertexAttrib3sv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib3svARB)(GLuint, const GLshort *);
static __ctype_glVertexAttrib3svARB __glintercept_fnptr_glVertexAttrib3svARB;
void __glintercept_glVertexAttrib3svARB(GLuint index, const GLshort * v) {
  __glintercept_fnptr_glVertexAttrib3svARB(index, v);
  __glintercept_log(" - glVertexAttrib3svARB(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib3svNV)(GLuint, const GLshort *);
static __ctype_glVertexAttrib3svNV __glintercept_fnptr_glVertexAttrib3svNV;
void __glintercept_glVertexAttrib3svNV(GLuint index, const GLshort * v) {
  __glintercept_fnptr_glVertexAttrib3svNV(index, v);
  __glintercept_log(" - glVertexAttrib3svNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4Nbv)(GLuint, const GLbyte *);
static __ctype_glVertexAttrib4Nbv __glintercept_fnptr_glVertexAttrib4Nbv;
void __glintercept_glVertexAttrib4Nbv(GLuint index, const GLbyte * v) {
  __glintercept_fnptr_glVertexAttrib4Nbv(index, v);
  __glintercept_log(" - glVertexAttrib4Nbv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4NbvARB)(GLuint, const GLbyte *);
static __ctype_glVertexAttrib4NbvARB __glintercept_fnptr_glVertexAttrib4NbvARB;
void __glintercept_glVertexAttrib4NbvARB(GLuint index, const GLbyte * v) {
  __glintercept_fnptr_glVertexAttrib4NbvARB(index, v);
  __glintercept_log(" - glVertexAttrib4NbvARB(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4Niv)(GLuint, const GLint *);
static __ctype_glVertexAttrib4Niv __glintercept_fnptr_glVertexAttrib4Niv;
void __glintercept_glVertexAttrib4Niv(GLuint index, const GLint * v) {
  __glintercept_fnptr_glVertexAttrib4Niv(index, v);
  __glintercept_log(" - glVertexAttrib4Niv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4NivARB)(GLuint, const GLint *);
static __ctype_glVertexAttrib4NivARB __glintercept_fnptr_glVertexAttrib4NivARB;
void __glintercept_glVertexAttrib4NivARB(GLuint index, const GLint * v) {
  __glintercept_fnptr_glVertexAttrib4NivARB(index, v);
  __glintercept_log(" - glVertexAttrib4NivARB(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4Nsv)(GLuint, const GLshort *);
static __ctype_glVertexAttrib4Nsv __glintercept_fnptr_glVertexAttrib4Nsv;
void __glintercept_glVertexAttrib4Nsv(GLuint index, const GLshort * v) {
  __glintercept_fnptr_glVertexAttrib4Nsv(index, v);
  __glintercept_log(" - glVertexAttrib4Nsv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4NsvARB)(GLuint, const GLshort *);
static __ctype_glVertexAttrib4NsvARB __glintercept_fnptr_glVertexAttrib4NsvARB;
void __glintercept_glVertexAttrib4NsvARB(GLuint index, const GLshort * v) {
  __glintercept_fnptr_glVertexAttrib4NsvARB(index, v);
  __glintercept_log(" - glVertexAttrib4NsvARB(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4Nub)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
static __ctype_glVertexAttrib4Nub __glintercept_fnptr_glVertexAttrib4Nub;
void __glintercept_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
  __glintercept_fnptr_glVertexAttrib4Nub(index, x, y, z, w);
  __glintercept_log(" - glVertexAttrib4Nub(index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", index, x, y, z, w);
}

typedef void(*__ctype_glVertexAttrib4NubARB)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
static __ctype_glVertexAttrib4NubARB __glintercept_fnptr_glVertexAttrib4NubARB;
void __glintercept_glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
  __glintercept_fnptr_glVertexAttrib4NubARB(index, x, y, z, w);
  __glintercept_log(" - glVertexAttrib4NubARB(index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", index, x, y, z, w);
}

typedef void(*__ctype_glVertexAttrib4Nubv)(GLuint, const GLubyte *);
static __ctype_glVertexAttrib4Nubv __glintercept_fnptr_glVertexAttrib4Nubv;
void __glintercept_glVertexAttrib4Nubv(GLuint index, const GLubyte * v) {
  __glintercept_fnptr_glVertexAttrib4Nubv(index, v);
  __glintercept_log(" - glVertexAttrib4Nubv(index: %ld, v: %s)", index, v);
}

typedef void(*__ctype_glVertexAttrib4NubvARB)(GLuint, const GLubyte *);
static __ctype_glVertexAttrib4NubvARB __glintercept_fnptr_glVertexAttrib4NubvARB;
void __glintercept_glVertexAttrib4NubvARB(GLuint index, const GLubyte * v) {
  __glintercept_fnptr_glVertexAttrib4NubvARB(index, v);
  __glintercept_log(" - glVertexAttrib4NubvARB(index: %ld, v: %s)", index, v);
}

typedef void(*__ctype_glVertexAttrib4Nuiv)(GLuint, const GLuint *);
static __ctype_glVertexAttrib4Nuiv __glintercept_fnptr_glVertexAttrib4Nuiv;
void __glintercept_glVertexAttrib4Nuiv(GLuint index, const GLuint * v) {
  __glintercept_fnptr_glVertexAttrib4Nuiv(index, v);
  __glintercept_log(" - glVertexAttrib4Nuiv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4NuivARB)(GLuint, const GLuint *);
static __ctype_glVertexAttrib4NuivARB __glintercept_fnptr_glVertexAttrib4NuivARB;
void __glintercept_glVertexAttrib4NuivARB(GLuint index, const GLuint * v) {
  __glintercept_fnptr_glVertexAttrib4NuivARB(index, v);
  __glintercept_log(" - glVertexAttrib4NuivARB(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4Nusv)(GLuint, const GLushort *);
static __ctype_glVertexAttrib4Nusv __glintercept_fnptr_glVertexAttrib4Nusv;
void __glintercept_glVertexAttrib4Nusv(GLuint index, const GLushort * v) {
  __glintercept_fnptr_glVertexAttrib4Nusv(index, v);
  __glintercept_log(" - glVertexAttrib4Nusv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4NusvARB)(GLuint, const GLushort *);
static __ctype_glVertexAttrib4NusvARB __glintercept_fnptr_glVertexAttrib4NusvARB;
void __glintercept_glVertexAttrib4NusvARB(GLuint index, const GLushort * v) {
  __glintercept_fnptr_glVertexAttrib4NusvARB(index, v);
  __glintercept_log(" - glVertexAttrib4NusvARB(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4bv)(GLuint, const GLbyte *);
static __ctype_glVertexAttrib4bv __glintercept_fnptr_glVertexAttrib4bv;
void __glintercept_glVertexAttrib4bv(GLuint index, const GLbyte * v) {
  __glintercept_fnptr_glVertexAttrib4bv(index, v);
  __glintercept_log(" - glVertexAttrib4bv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4bvARB)(GLuint, const GLbyte *);
static __ctype_glVertexAttrib4bvARB __glintercept_fnptr_glVertexAttrib4bvARB;
void __glintercept_glVertexAttrib4bvARB(GLuint index, const GLbyte * v) {
  __glintercept_fnptr_glVertexAttrib4bvARB(index, v);
  __glintercept_log(" - glVertexAttrib4bvARB(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4d)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glVertexAttrib4d __glintercept_fnptr_glVertexAttrib4d;
void __glintercept_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  __glintercept_fnptr_glVertexAttrib4d(index, x, y, z, w);
  __glintercept_log(" - glVertexAttrib4d(index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", index, x, y, z, w);
}

typedef void(*__ctype_glVertexAttrib4dARB)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glVertexAttrib4dARB __glintercept_fnptr_glVertexAttrib4dARB;
void __glintercept_glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  __glintercept_fnptr_glVertexAttrib4dARB(index, x, y, z, w);
  __glintercept_log(" - glVertexAttrib4dARB(index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", index, x, y, z, w);
}

typedef void(*__ctype_glVertexAttrib4dNV)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glVertexAttrib4dNV __glintercept_fnptr_glVertexAttrib4dNV;
void __glintercept_glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  __glintercept_fnptr_glVertexAttrib4dNV(index, x, y, z, w);
  __glintercept_log(" - glVertexAttrib4dNV(index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", index, x, y, z, w);
}

typedef void(*__ctype_glVertexAttrib4dv)(GLuint, const GLdouble *);
static __ctype_glVertexAttrib4dv __glintercept_fnptr_glVertexAttrib4dv;
void __glintercept_glVertexAttrib4dv(GLuint index, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttrib4dv(index, v);
  __glintercept_log(" - glVertexAttrib4dv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4dvARB)(GLuint, const GLdouble *);
static __ctype_glVertexAttrib4dvARB __glintercept_fnptr_glVertexAttrib4dvARB;
void __glintercept_glVertexAttrib4dvARB(GLuint index, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttrib4dvARB(index, v);
  __glintercept_log(" - glVertexAttrib4dvARB(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4dvNV)(GLuint, const GLdouble *);
static __ctype_glVertexAttrib4dvNV __glintercept_fnptr_glVertexAttrib4dvNV;
void __glintercept_glVertexAttrib4dvNV(GLuint index, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttrib4dvNV(index, v);
  __glintercept_log(" - glVertexAttrib4dvNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4f)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glVertexAttrib4f __glintercept_fnptr_glVertexAttrib4f;
void __glintercept_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  __glintercept_fnptr_glVertexAttrib4f(index, x, y, z, w);
  __glintercept_log(" - glVertexAttrib4f(index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", index, x, y, z, w);
}

typedef void(*__ctype_glVertexAttrib4fARB)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glVertexAttrib4fARB __glintercept_fnptr_glVertexAttrib4fARB;
void __glintercept_glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  __glintercept_fnptr_glVertexAttrib4fARB(index, x, y, z, w);
  __glintercept_log(" - glVertexAttrib4fARB(index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", index, x, y, z, w);
}

typedef void(*__ctype_glVertexAttrib4fNV)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glVertexAttrib4fNV __glintercept_fnptr_glVertexAttrib4fNV;
void __glintercept_glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  __glintercept_fnptr_glVertexAttrib4fNV(index, x, y, z, w);
  __glintercept_log(" - glVertexAttrib4fNV(index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", index, x, y, z, w);
}

typedef void(*__ctype_glVertexAttrib4fv)(GLuint, const GLfloat *);
static __ctype_glVertexAttrib4fv __glintercept_fnptr_glVertexAttrib4fv;
void __glintercept_glVertexAttrib4fv(GLuint index, const GLfloat * v) {
  __glintercept_fnptr_glVertexAttrib4fv(index, v);
  __glintercept_log(" - glVertexAttrib4fv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4fvARB)(GLuint, const GLfloat *);
static __ctype_glVertexAttrib4fvARB __glintercept_fnptr_glVertexAttrib4fvARB;
void __glintercept_glVertexAttrib4fvARB(GLuint index, const GLfloat * v) {
  __glintercept_fnptr_glVertexAttrib4fvARB(index, v);
  __glintercept_log(" - glVertexAttrib4fvARB(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4fvNV)(GLuint, const GLfloat *);
static __ctype_glVertexAttrib4fvNV __glintercept_fnptr_glVertexAttrib4fvNV;
void __glintercept_glVertexAttrib4fvNV(GLuint index, const GLfloat * v) {
  __glintercept_fnptr_glVertexAttrib4fvNV(index, v);
  __glintercept_log(" - glVertexAttrib4fvNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4hNV)(GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
static __ctype_glVertexAttrib4hNV __glintercept_fnptr_glVertexAttrib4hNV;
void __glintercept_glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) {
  __glintercept_fnptr_glVertexAttrib4hNV(index, x, y, z, w);
  __glintercept_log(" - glVertexAttrib4hNV(index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", index, x, y, z, w);
}

typedef void(*__ctype_glVertexAttrib4hvNV)(GLuint, const GLhalfNV *);
static __ctype_glVertexAttrib4hvNV __glintercept_fnptr_glVertexAttrib4hvNV;
void __glintercept_glVertexAttrib4hvNV(GLuint index, const GLhalfNV * v) {
  __glintercept_fnptr_glVertexAttrib4hvNV(index, v);
  __glintercept_log(" - glVertexAttrib4hvNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4iv)(GLuint, const GLint *);
static __ctype_glVertexAttrib4iv __glintercept_fnptr_glVertexAttrib4iv;
void __glintercept_glVertexAttrib4iv(GLuint index, const GLint * v) {
  __glintercept_fnptr_glVertexAttrib4iv(index, v);
  __glintercept_log(" - glVertexAttrib4iv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4ivARB)(GLuint, const GLint *);
static __ctype_glVertexAttrib4ivARB __glintercept_fnptr_glVertexAttrib4ivARB;
void __glintercept_glVertexAttrib4ivARB(GLuint index, const GLint * v) {
  __glintercept_fnptr_glVertexAttrib4ivARB(index, v);
  __glintercept_log(" - glVertexAttrib4ivARB(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4s)(GLuint, GLshort, GLshort, GLshort, GLshort);
static __ctype_glVertexAttrib4s __glintercept_fnptr_glVertexAttrib4s;
void __glintercept_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
  __glintercept_fnptr_glVertexAttrib4s(index, x, y, z, w);
  __glintercept_log(" - glVertexAttrib4s(index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", index, x, y, z, w);
}

typedef void(*__ctype_glVertexAttrib4sARB)(GLuint, GLshort, GLshort, GLshort, GLshort);
static __ctype_glVertexAttrib4sARB __glintercept_fnptr_glVertexAttrib4sARB;
void __glintercept_glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
  __glintercept_fnptr_glVertexAttrib4sARB(index, x, y, z, w);
  __glintercept_log(" - glVertexAttrib4sARB(index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", index, x, y, z, w);
}

typedef void(*__ctype_glVertexAttrib4sNV)(GLuint, GLshort, GLshort, GLshort, GLshort);
static __ctype_glVertexAttrib4sNV __glintercept_fnptr_glVertexAttrib4sNV;
void __glintercept_glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
  __glintercept_fnptr_glVertexAttrib4sNV(index, x, y, z, w);
  __glintercept_log(" - glVertexAttrib4sNV(index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", index, x, y, z, w);
}

typedef void(*__ctype_glVertexAttrib4sv)(GLuint, const GLshort *);
static __ctype_glVertexAttrib4sv __glintercept_fnptr_glVertexAttrib4sv;
void __glintercept_glVertexAttrib4sv(GLuint index, const GLshort * v) {
  __glintercept_fnptr_glVertexAttrib4sv(index, v);
  __glintercept_log(" - glVertexAttrib4sv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4svARB)(GLuint, const GLshort *);
static __ctype_glVertexAttrib4svARB __glintercept_fnptr_glVertexAttrib4svARB;
void __glintercept_glVertexAttrib4svARB(GLuint index, const GLshort * v) {
  __glintercept_fnptr_glVertexAttrib4svARB(index, v);
  __glintercept_log(" - glVertexAttrib4svARB(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4svNV)(GLuint, const GLshort *);
static __ctype_glVertexAttrib4svNV __glintercept_fnptr_glVertexAttrib4svNV;
void __glintercept_glVertexAttrib4svNV(GLuint index, const GLshort * v) {
  __glintercept_fnptr_glVertexAttrib4svNV(index, v);
  __glintercept_log(" - glVertexAttrib4svNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4ubNV)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
static __ctype_glVertexAttrib4ubNV __glintercept_fnptr_glVertexAttrib4ubNV;
void __glintercept_glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
  __glintercept_fnptr_glVertexAttrib4ubNV(index, x, y, z, w);
  __glintercept_log(" - glVertexAttrib4ubNV(index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", index, x, y, z, w);
}

typedef void(*__ctype_glVertexAttrib4ubv)(GLuint, const GLubyte *);
static __ctype_glVertexAttrib4ubv __glintercept_fnptr_glVertexAttrib4ubv;
void __glintercept_glVertexAttrib4ubv(GLuint index, const GLubyte * v) {
  __glintercept_fnptr_glVertexAttrib4ubv(index, v);
  __glintercept_log(" - glVertexAttrib4ubv(index: %ld, v: %s)", index, v);
}

typedef void(*__ctype_glVertexAttrib4ubvARB)(GLuint, const GLubyte *);
static __ctype_glVertexAttrib4ubvARB __glintercept_fnptr_glVertexAttrib4ubvARB;
void __glintercept_glVertexAttrib4ubvARB(GLuint index, const GLubyte * v) {
  __glintercept_fnptr_glVertexAttrib4ubvARB(index, v);
  __glintercept_log(" - glVertexAttrib4ubvARB(index: %ld, v: %s)", index, v);
}

typedef void(*__ctype_glVertexAttrib4ubvNV)(GLuint, const GLubyte *);
static __ctype_glVertexAttrib4ubvNV __glintercept_fnptr_glVertexAttrib4ubvNV;
void __glintercept_glVertexAttrib4ubvNV(GLuint index, const GLubyte * v) {
  __glintercept_fnptr_glVertexAttrib4ubvNV(index, v);
  __glintercept_log(" - glVertexAttrib4ubvNV(index: %ld, v: %s)", index, v);
}

typedef void(*__ctype_glVertexAttrib4uiv)(GLuint, const GLuint *);
static __ctype_glVertexAttrib4uiv __glintercept_fnptr_glVertexAttrib4uiv;
void __glintercept_glVertexAttrib4uiv(GLuint index, const GLuint * v) {
  __glintercept_fnptr_glVertexAttrib4uiv(index, v);
  __glintercept_log(" - glVertexAttrib4uiv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4uivARB)(GLuint, const GLuint *);
static __ctype_glVertexAttrib4uivARB __glintercept_fnptr_glVertexAttrib4uivARB;
void __glintercept_glVertexAttrib4uivARB(GLuint index, const GLuint * v) {
  __glintercept_fnptr_glVertexAttrib4uivARB(index, v);
  __glintercept_log(" - glVertexAttrib4uivARB(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4usv)(GLuint, const GLushort *);
static __ctype_glVertexAttrib4usv __glintercept_fnptr_glVertexAttrib4usv;
void __glintercept_glVertexAttrib4usv(GLuint index, const GLushort * v) {
  __glintercept_fnptr_glVertexAttrib4usv(index, v);
  __glintercept_log(" - glVertexAttrib4usv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttrib4usvARB)(GLuint, const GLushort *);
static __ctype_glVertexAttrib4usvARB __glintercept_fnptr_glVertexAttrib4usvARB;
void __glintercept_glVertexAttrib4usvARB(GLuint index, const GLushort * v) {
  __glintercept_fnptr_glVertexAttrib4usvARB(index, v);
  __glintercept_log(" - glVertexAttrib4usvARB(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribArrayObjectATI)(GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint);
static __ctype_glVertexAttribArrayObjectATI __glintercept_fnptr_glVertexAttribArrayObjectATI;
void __glintercept_glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset) {
  __glintercept_fnptr_glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset);
  __glintercept_log(" - glVertexAttribArrayObjectATI(index: %ld, size: %ld, type: %ld (%s), normalized: %ld, stride: %ld, buffer: %ld, offset: %ld)", index, size, type, __gl_intercept_formatenum(type), normalized, stride, buffer, offset);
}

typedef void(*__ctype_glVertexAttribBinding)(GLuint, GLuint);
static __ctype_glVertexAttribBinding __glintercept_fnptr_glVertexAttribBinding;
void __glintercept_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex) {
  __glintercept_fnptr_glVertexAttribBinding(attribindex, bindingindex);
  __glintercept_log(" - glVertexAttribBinding(attribindex: %ld, bindingindex: %ld)", attribindex, bindingindex);
}

typedef void(*__ctype_glVertexAttribDivisor)(GLuint, GLuint);
static __ctype_glVertexAttribDivisor __glintercept_fnptr_glVertexAttribDivisor;
void __glintercept_glVertexAttribDivisor(GLuint index, GLuint divisor) {
  __glintercept_fnptr_glVertexAttribDivisor(index, divisor);
  __glintercept_log(" - glVertexAttribDivisor(index: %ld, divisor: %ld)", index, divisor);
}

typedef void(*__ctype_glVertexAttribDivisorANGLE)(GLuint, GLuint);
static __ctype_glVertexAttribDivisorANGLE __glintercept_fnptr_glVertexAttribDivisorANGLE;
void __glintercept_glVertexAttribDivisorANGLE(GLuint index, GLuint divisor) {
  __glintercept_fnptr_glVertexAttribDivisorANGLE(index, divisor);
  __glintercept_log(" - glVertexAttribDivisorANGLE(index: %ld, divisor: %ld)", index, divisor);
}

typedef void(*__ctype_glVertexAttribDivisorARB)(GLuint, GLuint);
static __ctype_glVertexAttribDivisorARB __glintercept_fnptr_glVertexAttribDivisorARB;
void __glintercept_glVertexAttribDivisorARB(GLuint index, GLuint divisor) {
  __glintercept_fnptr_glVertexAttribDivisorARB(index, divisor);
  __glintercept_log(" - glVertexAttribDivisorARB(index: %ld, divisor: %ld)", index, divisor);
}

typedef void(*__ctype_glVertexAttribDivisorEXT)(GLuint, GLuint);
static __ctype_glVertexAttribDivisorEXT __glintercept_fnptr_glVertexAttribDivisorEXT;
void __glintercept_glVertexAttribDivisorEXT(GLuint index, GLuint divisor) {
  __glintercept_fnptr_glVertexAttribDivisorEXT(index, divisor);
  __glintercept_log(" - glVertexAttribDivisorEXT(index: %ld, divisor: %ld)", index, divisor);
}

typedef void(*__ctype_glVertexAttribDivisorNV)(GLuint, GLuint);
static __ctype_glVertexAttribDivisorNV __glintercept_fnptr_glVertexAttribDivisorNV;
void __glintercept_glVertexAttribDivisorNV(GLuint index, GLuint divisor) {
  __glintercept_fnptr_glVertexAttribDivisorNV(index, divisor);
  __glintercept_log(" - glVertexAttribDivisorNV(index: %ld, divisor: %ld)", index, divisor);
}

typedef void(*__ctype_glVertexAttribFormat)(GLuint, GLint, GLenum, GLboolean, GLuint);
static __ctype_glVertexAttribFormat __glintercept_fnptr_glVertexAttribFormat;
void __glintercept_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
  __glintercept_fnptr_glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
  __glintercept_log(" - glVertexAttribFormat(attribindex: %ld, size: %ld, type: %ld (%s), normalized: %ld, relativeoffset: %ld)", attribindex, size, type, __gl_intercept_formatenum(type), normalized, relativeoffset);
}

typedef void(*__ctype_glVertexAttribFormatNV)(GLuint, GLint, GLenum, GLboolean, GLsizei);
static __ctype_glVertexAttribFormatNV __glintercept_fnptr_glVertexAttribFormatNV;
void __glintercept_glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride) {
  __glintercept_fnptr_glVertexAttribFormatNV(index, size, type, normalized, stride);
  __glintercept_log(" - glVertexAttribFormatNV(index: %ld, size: %ld, type: %ld (%s), normalized: %ld, stride: %ld)", index, size, type, __gl_intercept_formatenum(type), normalized, stride);
}

typedef void(*__ctype_glVertexAttribI1i)(GLuint, GLint);
static __ctype_glVertexAttribI1i __glintercept_fnptr_glVertexAttribI1i;
void __glintercept_glVertexAttribI1i(GLuint index, GLint x) {
  __glintercept_fnptr_glVertexAttribI1i(index, x);
  __glintercept_log(" - glVertexAttribI1i(index: %ld, x: %ld)", index, x);
}

typedef void(*__ctype_glVertexAttribI1iEXT)(GLuint, GLint);
static __ctype_glVertexAttribI1iEXT __glintercept_fnptr_glVertexAttribI1iEXT;
void __glintercept_glVertexAttribI1iEXT(GLuint index, GLint x) {
  __glintercept_fnptr_glVertexAttribI1iEXT(index, x);
  __glintercept_log(" - glVertexAttribI1iEXT(index: %ld, x: %ld)", index, x);
}

typedef void(*__ctype_glVertexAttribI1iv)(GLuint, const GLint *);
static __ctype_glVertexAttribI1iv __glintercept_fnptr_glVertexAttribI1iv;
void __glintercept_glVertexAttribI1iv(GLuint index, const GLint * v) {
  __glintercept_fnptr_glVertexAttribI1iv(index, v);
  __glintercept_log(" - glVertexAttribI1iv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribI1ivEXT)(GLuint, const GLint *);
static __ctype_glVertexAttribI1ivEXT __glintercept_fnptr_glVertexAttribI1ivEXT;
void __glintercept_glVertexAttribI1ivEXT(GLuint index, const GLint * v) {
  __glintercept_fnptr_glVertexAttribI1ivEXT(index, v);
  __glintercept_log(" - glVertexAttribI1ivEXT(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribI1ui)(GLuint, GLuint);
static __ctype_glVertexAttribI1ui __glintercept_fnptr_glVertexAttribI1ui;
void __glintercept_glVertexAttribI1ui(GLuint index, GLuint x) {
  __glintercept_fnptr_glVertexAttribI1ui(index, x);
  __glintercept_log(" - glVertexAttribI1ui(index: %ld, x: %ld)", index, x);
}

typedef void(*__ctype_glVertexAttribI1uiEXT)(GLuint, GLuint);
static __ctype_glVertexAttribI1uiEXT __glintercept_fnptr_glVertexAttribI1uiEXT;
void __glintercept_glVertexAttribI1uiEXT(GLuint index, GLuint x) {
  __glintercept_fnptr_glVertexAttribI1uiEXT(index, x);
  __glintercept_log(" - glVertexAttribI1uiEXT(index: %ld, x: %ld)", index, x);
}

typedef void(*__ctype_glVertexAttribI1uiv)(GLuint, const GLuint *);
static __ctype_glVertexAttribI1uiv __glintercept_fnptr_glVertexAttribI1uiv;
void __glintercept_glVertexAttribI1uiv(GLuint index, const GLuint * v) {
  __glintercept_fnptr_glVertexAttribI1uiv(index, v);
  __glintercept_log(" - glVertexAttribI1uiv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribI1uivEXT)(GLuint, const GLuint *);
static __ctype_glVertexAttribI1uivEXT __glintercept_fnptr_glVertexAttribI1uivEXT;
void __glintercept_glVertexAttribI1uivEXT(GLuint index, const GLuint * v) {
  __glintercept_fnptr_glVertexAttribI1uivEXT(index, v);
  __glintercept_log(" - glVertexAttribI1uivEXT(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribI2i)(GLuint, GLint, GLint);
static __ctype_glVertexAttribI2i __glintercept_fnptr_glVertexAttribI2i;
void __glintercept_glVertexAttribI2i(GLuint index, GLint x, GLint y) {
  __glintercept_fnptr_glVertexAttribI2i(index, x, y);
  __glintercept_log(" - glVertexAttribI2i(index: %ld, x: %ld, y: %ld)", index, x, y);
}

typedef void(*__ctype_glVertexAttribI2iEXT)(GLuint, GLint, GLint);
static __ctype_glVertexAttribI2iEXT __glintercept_fnptr_glVertexAttribI2iEXT;
void __glintercept_glVertexAttribI2iEXT(GLuint index, GLint x, GLint y) {
  __glintercept_fnptr_glVertexAttribI2iEXT(index, x, y);
  __glintercept_log(" - glVertexAttribI2iEXT(index: %ld, x: %ld, y: %ld)", index, x, y);
}

typedef void(*__ctype_glVertexAttribI2iv)(GLuint, const GLint *);
static __ctype_glVertexAttribI2iv __glintercept_fnptr_glVertexAttribI2iv;
void __glintercept_glVertexAttribI2iv(GLuint index, const GLint * v) {
  __glintercept_fnptr_glVertexAttribI2iv(index, v);
  __glintercept_log(" - glVertexAttribI2iv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribI2ivEXT)(GLuint, const GLint *);
static __ctype_glVertexAttribI2ivEXT __glintercept_fnptr_glVertexAttribI2ivEXT;
void __glintercept_glVertexAttribI2ivEXT(GLuint index, const GLint * v) {
  __glintercept_fnptr_glVertexAttribI2ivEXT(index, v);
  __glintercept_log(" - glVertexAttribI2ivEXT(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribI2ui)(GLuint, GLuint, GLuint);
static __ctype_glVertexAttribI2ui __glintercept_fnptr_glVertexAttribI2ui;
void __glintercept_glVertexAttribI2ui(GLuint index, GLuint x, GLuint y) {
  __glintercept_fnptr_glVertexAttribI2ui(index, x, y);
  __glintercept_log(" - glVertexAttribI2ui(index: %ld, x: %ld, y: %ld)", index, x, y);
}

typedef void(*__ctype_glVertexAttribI2uiEXT)(GLuint, GLuint, GLuint);
static __ctype_glVertexAttribI2uiEXT __glintercept_fnptr_glVertexAttribI2uiEXT;
void __glintercept_glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y) {
  __glintercept_fnptr_glVertexAttribI2uiEXT(index, x, y);
  __glintercept_log(" - glVertexAttribI2uiEXT(index: %ld, x: %ld, y: %ld)", index, x, y);
}

typedef void(*__ctype_glVertexAttribI2uiv)(GLuint, const GLuint *);
static __ctype_glVertexAttribI2uiv __glintercept_fnptr_glVertexAttribI2uiv;
void __glintercept_glVertexAttribI2uiv(GLuint index, const GLuint * v) {
  __glintercept_fnptr_glVertexAttribI2uiv(index, v);
  __glintercept_log(" - glVertexAttribI2uiv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribI2uivEXT)(GLuint, const GLuint *);
static __ctype_glVertexAttribI2uivEXT __glintercept_fnptr_glVertexAttribI2uivEXT;
void __glintercept_glVertexAttribI2uivEXT(GLuint index, const GLuint * v) {
  __glintercept_fnptr_glVertexAttribI2uivEXT(index, v);
  __glintercept_log(" - glVertexAttribI2uivEXT(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribI3i)(GLuint, GLint, GLint, GLint);
static __ctype_glVertexAttribI3i __glintercept_fnptr_glVertexAttribI3i;
void __glintercept_glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) {
  __glintercept_fnptr_glVertexAttribI3i(index, x, y, z);
  __glintercept_log(" - glVertexAttribI3i(index: %ld, x: %ld, y: %ld, z: %ld)", index, x, y, z);
}

typedef void(*__ctype_glVertexAttribI3iEXT)(GLuint, GLint, GLint, GLint);
static __ctype_glVertexAttribI3iEXT __glintercept_fnptr_glVertexAttribI3iEXT;
void __glintercept_glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z) {
  __glintercept_fnptr_glVertexAttribI3iEXT(index, x, y, z);
  __glintercept_log(" - glVertexAttribI3iEXT(index: %ld, x: %ld, y: %ld, z: %ld)", index, x, y, z);
}

typedef void(*__ctype_glVertexAttribI3iv)(GLuint, const GLint *);
static __ctype_glVertexAttribI3iv __glintercept_fnptr_glVertexAttribI3iv;
void __glintercept_glVertexAttribI3iv(GLuint index, const GLint * v) {
  __glintercept_fnptr_glVertexAttribI3iv(index, v);
  __glintercept_log(" - glVertexAttribI3iv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribI3ivEXT)(GLuint, const GLint *);
static __ctype_glVertexAttribI3ivEXT __glintercept_fnptr_glVertexAttribI3ivEXT;
void __glintercept_glVertexAttribI3ivEXT(GLuint index, const GLint * v) {
  __glintercept_fnptr_glVertexAttribI3ivEXT(index, v);
  __glintercept_log(" - glVertexAttribI3ivEXT(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribI3ui)(GLuint, GLuint, GLuint, GLuint);
static __ctype_glVertexAttribI3ui __glintercept_fnptr_glVertexAttribI3ui;
void __glintercept_glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) {
  __glintercept_fnptr_glVertexAttribI3ui(index, x, y, z);
  __glintercept_log(" - glVertexAttribI3ui(index: %ld, x: %ld, y: %ld, z: %ld)", index, x, y, z);
}

typedef void(*__ctype_glVertexAttribI3uiEXT)(GLuint, GLuint, GLuint, GLuint);
static __ctype_glVertexAttribI3uiEXT __glintercept_fnptr_glVertexAttribI3uiEXT;
void __glintercept_glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z) {
  __glintercept_fnptr_glVertexAttribI3uiEXT(index, x, y, z);
  __glintercept_log(" - glVertexAttribI3uiEXT(index: %ld, x: %ld, y: %ld, z: %ld)", index, x, y, z);
}

typedef void(*__ctype_glVertexAttribI3uiv)(GLuint, const GLuint *);
static __ctype_glVertexAttribI3uiv __glintercept_fnptr_glVertexAttribI3uiv;
void __glintercept_glVertexAttribI3uiv(GLuint index, const GLuint * v) {
  __glintercept_fnptr_glVertexAttribI3uiv(index, v);
  __glintercept_log(" - glVertexAttribI3uiv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribI3uivEXT)(GLuint, const GLuint *);
static __ctype_glVertexAttribI3uivEXT __glintercept_fnptr_glVertexAttribI3uivEXT;
void __glintercept_glVertexAttribI3uivEXT(GLuint index, const GLuint * v) {
  __glintercept_fnptr_glVertexAttribI3uivEXT(index, v);
  __glintercept_log(" - glVertexAttribI3uivEXT(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribI4bv)(GLuint, const GLbyte *);
static __ctype_glVertexAttribI4bv __glintercept_fnptr_glVertexAttribI4bv;
void __glintercept_glVertexAttribI4bv(GLuint index, const GLbyte * v) {
  __glintercept_fnptr_glVertexAttribI4bv(index, v);
  __glintercept_log(" - glVertexAttribI4bv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribI4bvEXT)(GLuint, const GLbyte *);
static __ctype_glVertexAttribI4bvEXT __glintercept_fnptr_glVertexAttribI4bvEXT;
void __glintercept_glVertexAttribI4bvEXT(GLuint index, const GLbyte * v) {
  __glintercept_fnptr_glVertexAttribI4bvEXT(index, v);
  __glintercept_log(" - glVertexAttribI4bvEXT(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribI4i)(GLuint, GLint, GLint, GLint, GLint);
static __ctype_glVertexAttribI4i __glintercept_fnptr_glVertexAttribI4i;
void __glintercept_glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) {
  __glintercept_fnptr_glVertexAttribI4i(index, x, y, z, w);
  __glintercept_log(" - glVertexAttribI4i(index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", index, x, y, z, w);
}

typedef void(*__ctype_glVertexAttribI4iEXT)(GLuint, GLint, GLint, GLint, GLint);
static __ctype_glVertexAttribI4iEXT __glintercept_fnptr_glVertexAttribI4iEXT;
void __glintercept_glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w) {
  __glintercept_fnptr_glVertexAttribI4iEXT(index, x, y, z, w);
  __glintercept_log(" - glVertexAttribI4iEXT(index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", index, x, y, z, w);
}

typedef void(*__ctype_glVertexAttribI4iv)(GLuint, const GLint *);
static __ctype_glVertexAttribI4iv __glintercept_fnptr_glVertexAttribI4iv;
void __glintercept_glVertexAttribI4iv(GLuint index, const GLint * v) {
  __glintercept_fnptr_glVertexAttribI4iv(index, v);
  __glintercept_log(" - glVertexAttribI4iv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribI4ivEXT)(GLuint, const GLint *);
static __ctype_glVertexAttribI4ivEXT __glintercept_fnptr_glVertexAttribI4ivEXT;
void __glintercept_glVertexAttribI4ivEXT(GLuint index, const GLint * v) {
  __glintercept_fnptr_glVertexAttribI4ivEXT(index, v);
  __glintercept_log(" - glVertexAttribI4ivEXT(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribI4sv)(GLuint, const GLshort *);
static __ctype_glVertexAttribI4sv __glintercept_fnptr_glVertexAttribI4sv;
void __glintercept_glVertexAttribI4sv(GLuint index, const GLshort * v) {
  __glintercept_fnptr_glVertexAttribI4sv(index, v);
  __glintercept_log(" - glVertexAttribI4sv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribI4svEXT)(GLuint, const GLshort *);
static __ctype_glVertexAttribI4svEXT __glintercept_fnptr_glVertexAttribI4svEXT;
void __glintercept_glVertexAttribI4svEXT(GLuint index, const GLshort * v) {
  __glintercept_fnptr_glVertexAttribI4svEXT(index, v);
  __glintercept_log(" - glVertexAttribI4svEXT(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribI4ubv)(GLuint, const GLubyte *);
static __ctype_glVertexAttribI4ubv __glintercept_fnptr_glVertexAttribI4ubv;
void __glintercept_glVertexAttribI4ubv(GLuint index, const GLubyte * v) {
  __glintercept_fnptr_glVertexAttribI4ubv(index, v);
  __glintercept_log(" - glVertexAttribI4ubv(index: %ld, v: %s)", index, v);
}

typedef void(*__ctype_glVertexAttribI4ubvEXT)(GLuint, const GLubyte *);
static __ctype_glVertexAttribI4ubvEXT __glintercept_fnptr_glVertexAttribI4ubvEXT;
void __glintercept_glVertexAttribI4ubvEXT(GLuint index, const GLubyte * v) {
  __glintercept_fnptr_glVertexAttribI4ubvEXT(index, v);
  __glintercept_log(" - glVertexAttribI4ubvEXT(index: %ld, v: %s)", index, v);
}

typedef void(*__ctype_glVertexAttribI4ui)(GLuint, GLuint, GLuint, GLuint, GLuint);
static __ctype_glVertexAttribI4ui __glintercept_fnptr_glVertexAttribI4ui;
void __glintercept_glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  __glintercept_fnptr_glVertexAttribI4ui(index, x, y, z, w);
  __glintercept_log(" - glVertexAttribI4ui(index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", index, x, y, z, w);
}

typedef void(*__ctype_glVertexAttribI4uiEXT)(GLuint, GLuint, GLuint, GLuint, GLuint);
static __ctype_glVertexAttribI4uiEXT __glintercept_fnptr_glVertexAttribI4uiEXT;
void __glintercept_glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  __glintercept_fnptr_glVertexAttribI4uiEXT(index, x, y, z, w);
  __glintercept_log(" - glVertexAttribI4uiEXT(index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", index, x, y, z, w);
}

typedef void(*__ctype_glVertexAttribI4uiv)(GLuint, const GLuint *);
static __ctype_glVertexAttribI4uiv __glintercept_fnptr_glVertexAttribI4uiv;
void __glintercept_glVertexAttribI4uiv(GLuint index, const GLuint * v) {
  __glintercept_fnptr_glVertexAttribI4uiv(index, v);
  __glintercept_log(" - glVertexAttribI4uiv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribI4uivEXT)(GLuint, const GLuint *);
static __ctype_glVertexAttribI4uivEXT __glintercept_fnptr_glVertexAttribI4uivEXT;
void __glintercept_glVertexAttribI4uivEXT(GLuint index, const GLuint * v) {
  __glintercept_fnptr_glVertexAttribI4uivEXT(index, v);
  __glintercept_log(" - glVertexAttribI4uivEXT(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribI4usv)(GLuint, const GLushort *);
static __ctype_glVertexAttribI4usv __glintercept_fnptr_glVertexAttribI4usv;
void __glintercept_glVertexAttribI4usv(GLuint index, const GLushort * v) {
  __glintercept_fnptr_glVertexAttribI4usv(index, v);
  __glintercept_log(" - glVertexAttribI4usv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribI4usvEXT)(GLuint, const GLushort *);
static __ctype_glVertexAttribI4usvEXT __glintercept_fnptr_glVertexAttribI4usvEXT;
void __glintercept_glVertexAttribI4usvEXT(GLuint index, const GLushort * v) {
  __glintercept_fnptr_glVertexAttribI4usvEXT(index, v);
  __glintercept_log(" - glVertexAttribI4usvEXT(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribIFormat)(GLuint, GLint, GLenum, GLuint);
static __ctype_glVertexAttribIFormat __glintercept_fnptr_glVertexAttribIFormat;
void __glintercept_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  __glintercept_fnptr_glVertexAttribIFormat(attribindex, size, type, relativeoffset);
  __glintercept_log(" - glVertexAttribIFormat(attribindex: %ld, size: %ld, type: %ld (%s), relativeoffset: %ld)", attribindex, size, type, __gl_intercept_formatenum(type), relativeoffset);
}

typedef void(*__ctype_glVertexAttribIFormatNV)(GLuint, GLint, GLenum, GLsizei);
static __ctype_glVertexAttribIFormatNV __glintercept_fnptr_glVertexAttribIFormatNV;
void __glintercept_glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) {
  __glintercept_fnptr_glVertexAttribIFormatNV(index, size, type, stride);
  __glintercept_log(" - glVertexAttribIFormatNV(index: %ld, size: %ld, type: %ld (%s), stride: %ld)", index, size, type, __gl_intercept_formatenum(type), stride);
}

typedef void(*__ctype_glVertexAttribIPointer)(GLuint, GLint, GLenum, GLsizei, const void *);
static __ctype_glVertexAttribIPointer __glintercept_fnptr_glVertexAttribIPointer;
void __glintercept_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glVertexAttribIPointer(index, size, type, stride, pointer);
  __glintercept_log(" - glVertexAttribIPointer(index: %ld, size: %ld, type: %ld (%s), stride: %ld, pointer: %ld)", index, size, type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glVertexAttribIPointerEXT)(GLuint, GLint, GLenum, GLsizei, const void *);
static __ctype_glVertexAttribIPointerEXT __glintercept_fnptr_glVertexAttribIPointerEXT;
void __glintercept_glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glVertexAttribIPointerEXT(index, size, type, stride, pointer);
  __glintercept_log(" - glVertexAttribIPointerEXT(index: %ld, size: %ld, type: %ld (%s), stride: %ld, pointer: %ld)", index, size, type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glVertexAttribL1d)(GLuint, GLdouble);
static __ctype_glVertexAttribL1d __glintercept_fnptr_glVertexAttribL1d;
void __glintercept_glVertexAttribL1d(GLuint index, GLdouble x) {
  __glintercept_fnptr_glVertexAttribL1d(index, x);
  __glintercept_log(" - glVertexAttribL1d(index: %ld, x: %ld)", index, x);
}

typedef void(*__ctype_glVertexAttribL1dEXT)(GLuint, GLdouble);
static __ctype_glVertexAttribL1dEXT __glintercept_fnptr_glVertexAttribL1dEXT;
void __glintercept_glVertexAttribL1dEXT(GLuint index, GLdouble x) {
  __glintercept_fnptr_glVertexAttribL1dEXT(index, x);
  __glintercept_log(" - glVertexAttribL1dEXT(index: %ld, x: %ld)", index, x);
}

typedef void(*__ctype_glVertexAttribL1dv)(GLuint, const GLdouble *);
static __ctype_glVertexAttribL1dv __glintercept_fnptr_glVertexAttribL1dv;
void __glintercept_glVertexAttribL1dv(GLuint index, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttribL1dv(index, v);
  __glintercept_log(" - glVertexAttribL1dv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribL1dvEXT)(GLuint, const GLdouble *);
static __ctype_glVertexAttribL1dvEXT __glintercept_fnptr_glVertexAttribL1dvEXT;
void __glintercept_glVertexAttribL1dvEXT(GLuint index, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttribL1dvEXT(index, v);
  __glintercept_log(" - glVertexAttribL1dvEXT(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribL1i64NV)(GLuint, GLint64EXT);
static __ctype_glVertexAttribL1i64NV __glintercept_fnptr_glVertexAttribL1i64NV;
void __glintercept_glVertexAttribL1i64NV(GLuint index, GLint64EXT x) {
  __glintercept_fnptr_glVertexAttribL1i64NV(index, x);
  __glintercept_log(" - glVertexAttribL1i64NV(index: %ld, x: %ld)", index, x);
}

typedef void(*__ctype_glVertexAttribL1i64vNV)(GLuint, const GLint64EXT *);
static __ctype_glVertexAttribL1i64vNV __glintercept_fnptr_glVertexAttribL1i64vNV;
void __glintercept_glVertexAttribL1i64vNV(GLuint index, const GLint64EXT * v) {
  __glintercept_fnptr_glVertexAttribL1i64vNV(index, v);
  __glintercept_log(" - glVertexAttribL1i64vNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribL1ui64ARB)(GLuint, GLuint64EXT);
static __ctype_glVertexAttribL1ui64ARB __glintercept_fnptr_glVertexAttribL1ui64ARB;
void __glintercept_glVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x) {
  __glintercept_fnptr_glVertexAttribL1ui64ARB(index, x);
  __glintercept_log(" - glVertexAttribL1ui64ARB(index: %ld, x: %ld)", index, x);
}

typedef void(*__ctype_glVertexAttribL1ui64NV)(GLuint, GLuint64EXT);
static __ctype_glVertexAttribL1ui64NV __glintercept_fnptr_glVertexAttribL1ui64NV;
void __glintercept_glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x) {
  __glintercept_fnptr_glVertexAttribL1ui64NV(index, x);
  __glintercept_log(" - glVertexAttribL1ui64NV(index: %ld, x: %ld)", index, x);
}

typedef void(*__ctype_glVertexAttribL1ui64vARB)(GLuint, const GLuint64EXT *);
static __ctype_glVertexAttribL1ui64vARB __glintercept_fnptr_glVertexAttribL1ui64vARB;
void __glintercept_glVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT * v) {
  __glintercept_fnptr_glVertexAttribL1ui64vARB(index, v);
  __glintercept_log(" - glVertexAttribL1ui64vARB(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribL1ui64vNV)(GLuint, const GLuint64EXT *);
static __ctype_glVertexAttribL1ui64vNV __glintercept_fnptr_glVertexAttribL1ui64vNV;
void __glintercept_glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT * v) {
  __glintercept_fnptr_glVertexAttribL1ui64vNV(index, v);
  __glintercept_log(" - glVertexAttribL1ui64vNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribL2d)(GLuint, GLdouble, GLdouble);
static __ctype_glVertexAttribL2d __glintercept_fnptr_glVertexAttribL2d;
void __glintercept_glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y) {
  __glintercept_fnptr_glVertexAttribL2d(index, x, y);
  __glintercept_log(" - glVertexAttribL2d(index: %ld, x: %ld, y: %ld)", index, x, y);
}

typedef void(*__ctype_glVertexAttribL2dEXT)(GLuint, GLdouble, GLdouble);
static __ctype_glVertexAttribL2dEXT __glintercept_fnptr_glVertexAttribL2dEXT;
void __glintercept_glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y) {
  __glintercept_fnptr_glVertexAttribL2dEXT(index, x, y);
  __glintercept_log(" - glVertexAttribL2dEXT(index: %ld, x: %ld, y: %ld)", index, x, y);
}

typedef void(*__ctype_glVertexAttribL2dv)(GLuint, const GLdouble *);
static __ctype_glVertexAttribL2dv __glintercept_fnptr_glVertexAttribL2dv;
void __glintercept_glVertexAttribL2dv(GLuint index, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttribL2dv(index, v);
  __glintercept_log(" - glVertexAttribL2dv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribL2dvEXT)(GLuint, const GLdouble *);
static __ctype_glVertexAttribL2dvEXT __glintercept_fnptr_glVertexAttribL2dvEXT;
void __glintercept_glVertexAttribL2dvEXT(GLuint index, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttribL2dvEXT(index, v);
  __glintercept_log(" - glVertexAttribL2dvEXT(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribL2i64NV)(GLuint, GLint64EXT, GLint64EXT);
static __ctype_glVertexAttribL2i64NV __glintercept_fnptr_glVertexAttribL2i64NV;
void __glintercept_glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y) {
  __glintercept_fnptr_glVertexAttribL2i64NV(index, x, y);
  __glintercept_log(" - glVertexAttribL2i64NV(index: %ld, x: %ld, y: %ld)", index, x, y);
}

typedef void(*__ctype_glVertexAttribL2i64vNV)(GLuint, const GLint64EXT *);
static __ctype_glVertexAttribL2i64vNV __glintercept_fnptr_glVertexAttribL2i64vNV;
void __glintercept_glVertexAttribL2i64vNV(GLuint index, const GLint64EXT * v) {
  __glintercept_fnptr_glVertexAttribL2i64vNV(index, v);
  __glintercept_log(" - glVertexAttribL2i64vNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribL2ui64NV)(GLuint, GLuint64EXT, GLuint64EXT);
static __ctype_glVertexAttribL2ui64NV __glintercept_fnptr_glVertexAttribL2ui64NV;
void __glintercept_glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y) {
  __glintercept_fnptr_glVertexAttribL2ui64NV(index, x, y);
  __glintercept_log(" - glVertexAttribL2ui64NV(index: %ld, x: %ld, y: %ld)", index, x, y);
}

typedef void(*__ctype_glVertexAttribL2ui64vNV)(GLuint, const GLuint64EXT *);
static __ctype_glVertexAttribL2ui64vNV __glintercept_fnptr_glVertexAttribL2ui64vNV;
void __glintercept_glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT * v) {
  __glintercept_fnptr_glVertexAttribL2ui64vNV(index, v);
  __glintercept_log(" - glVertexAttribL2ui64vNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribL3d)(GLuint, GLdouble, GLdouble, GLdouble);
static __ctype_glVertexAttribL3d __glintercept_fnptr_glVertexAttribL3d;
void __glintercept_glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  __glintercept_fnptr_glVertexAttribL3d(index, x, y, z);
  __glintercept_log(" - glVertexAttribL3d(index: %ld, x: %ld, y: %ld, z: %ld)", index, x, y, z);
}

typedef void(*__ctype_glVertexAttribL3dEXT)(GLuint, GLdouble, GLdouble, GLdouble);
static __ctype_glVertexAttribL3dEXT __glintercept_fnptr_glVertexAttribL3dEXT;
void __glintercept_glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  __glintercept_fnptr_glVertexAttribL3dEXT(index, x, y, z);
  __glintercept_log(" - glVertexAttribL3dEXT(index: %ld, x: %ld, y: %ld, z: %ld)", index, x, y, z);
}

typedef void(*__ctype_glVertexAttribL3dv)(GLuint, const GLdouble *);
static __ctype_glVertexAttribL3dv __glintercept_fnptr_glVertexAttribL3dv;
void __glintercept_glVertexAttribL3dv(GLuint index, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttribL3dv(index, v);
  __glintercept_log(" - glVertexAttribL3dv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribL3dvEXT)(GLuint, const GLdouble *);
static __ctype_glVertexAttribL3dvEXT __glintercept_fnptr_glVertexAttribL3dvEXT;
void __glintercept_glVertexAttribL3dvEXT(GLuint index, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttribL3dvEXT(index, v);
  __glintercept_log(" - glVertexAttribL3dvEXT(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribL3i64NV)(GLuint, GLint64EXT, GLint64EXT, GLint64EXT);
static __ctype_glVertexAttribL3i64NV __glintercept_fnptr_glVertexAttribL3i64NV;
void __glintercept_glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
  __glintercept_fnptr_glVertexAttribL3i64NV(index, x, y, z);
  __glintercept_log(" - glVertexAttribL3i64NV(index: %ld, x: %ld, y: %ld, z: %ld)", index, x, y, z);
}

typedef void(*__ctype_glVertexAttribL3i64vNV)(GLuint, const GLint64EXT *);
static __ctype_glVertexAttribL3i64vNV __glintercept_fnptr_glVertexAttribL3i64vNV;
void __glintercept_glVertexAttribL3i64vNV(GLuint index, const GLint64EXT * v) {
  __glintercept_fnptr_glVertexAttribL3i64vNV(index, v);
  __glintercept_log(" - glVertexAttribL3i64vNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribL3ui64NV)(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
static __ctype_glVertexAttribL3ui64NV __glintercept_fnptr_glVertexAttribL3ui64NV;
void __glintercept_glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
  __glintercept_fnptr_glVertexAttribL3ui64NV(index, x, y, z);
  __glintercept_log(" - glVertexAttribL3ui64NV(index: %ld, x: %ld, y: %ld, z: %ld)", index, x, y, z);
}

typedef void(*__ctype_glVertexAttribL3ui64vNV)(GLuint, const GLuint64EXT *);
static __ctype_glVertexAttribL3ui64vNV __glintercept_fnptr_glVertexAttribL3ui64vNV;
void __glintercept_glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT * v) {
  __glintercept_fnptr_glVertexAttribL3ui64vNV(index, v);
  __glintercept_log(" - glVertexAttribL3ui64vNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribL4d)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glVertexAttribL4d __glintercept_fnptr_glVertexAttribL4d;
void __glintercept_glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  __glintercept_fnptr_glVertexAttribL4d(index, x, y, z, w);
  __glintercept_log(" - glVertexAttribL4d(index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", index, x, y, z, w);
}

typedef void(*__ctype_glVertexAttribL4dEXT)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glVertexAttribL4dEXT __glintercept_fnptr_glVertexAttribL4dEXT;
void __glintercept_glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  __glintercept_fnptr_glVertexAttribL4dEXT(index, x, y, z, w);
  __glintercept_log(" - glVertexAttribL4dEXT(index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", index, x, y, z, w);
}

typedef void(*__ctype_glVertexAttribL4dv)(GLuint, const GLdouble *);
static __ctype_glVertexAttribL4dv __glintercept_fnptr_glVertexAttribL4dv;
void __glintercept_glVertexAttribL4dv(GLuint index, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttribL4dv(index, v);
  __glintercept_log(" - glVertexAttribL4dv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribL4dvEXT)(GLuint, const GLdouble *);
static __ctype_glVertexAttribL4dvEXT __glintercept_fnptr_glVertexAttribL4dvEXT;
void __glintercept_glVertexAttribL4dvEXT(GLuint index, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttribL4dvEXT(index, v);
  __glintercept_log(" - glVertexAttribL4dvEXT(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribL4i64NV)(GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
static __ctype_glVertexAttribL4i64NV __glintercept_fnptr_glVertexAttribL4i64NV;
void __glintercept_glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
  __glintercept_fnptr_glVertexAttribL4i64NV(index, x, y, z, w);
  __glintercept_log(" - glVertexAttribL4i64NV(index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", index, x, y, z, w);
}

typedef void(*__ctype_glVertexAttribL4i64vNV)(GLuint, const GLint64EXT *);
static __ctype_glVertexAttribL4i64vNV __glintercept_fnptr_glVertexAttribL4i64vNV;
void __glintercept_glVertexAttribL4i64vNV(GLuint index, const GLint64EXT * v) {
  __glintercept_fnptr_glVertexAttribL4i64vNV(index, v);
  __glintercept_log(" - glVertexAttribL4i64vNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribL4ui64NV)(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
static __ctype_glVertexAttribL4ui64NV __glintercept_fnptr_glVertexAttribL4ui64NV;
void __glintercept_glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
  __glintercept_fnptr_glVertexAttribL4ui64NV(index, x, y, z, w);
  __glintercept_log(" - glVertexAttribL4ui64NV(index: %ld, x: %ld, y: %ld, z: %ld, w: %ld)", index, x, y, z, w);
}

typedef void(*__ctype_glVertexAttribL4ui64vNV)(GLuint, const GLuint64EXT *);
static __ctype_glVertexAttribL4ui64vNV __glintercept_fnptr_glVertexAttribL4ui64vNV;
void __glintercept_glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT * v) {
  __glintercept_fnptr_glVertexAttribL4ui64vNV(index, v);
  __glintercept_log(" - glVertexAttribL4ui64vNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glVertexAttribLFormat)(GLuint, GLint, GLenum, GLuint);
static __ctype_glVertexAttribLFormat __glintercept_fnptr_glVertexAttribLFormat;
void __glintercept_glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  __glintercept_fnptr_glVertexAttribLFormat(attribindex, size, type, relativeoffset);
  __glintercept_log(" - glVertexAttribLFormat(attribindex: %ld, size: %ld, type: %ld (%s), relativeoffset: %ld)", attribindex, size, type, __gl_intercept_formatenum(type), relativeoffset);
}

typedef void(*__ctype_glVertexAttribLFormatNV)(GLuint, GLint, GLenum, GLsizei);
static __ctype_glVertexAttribLFormatNV __glintercept_fnptr_glVertexAttribLFormatNV;
void __glintercept_glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) {
  __glintercept_fnptr_glVertexAttribLFormatNV(index, size, type, stride);
  __glintercept_log(" - glVertexAttribLFormatNV(index: %ld, size: %ld, type: %ld (%s), stride: %ld)", index, size, type, __gl_intercept_formatenum(type), stride);
}

typedef void(*__ctype_glVertexAttribLPointer)(GLuint, GLint, GLenum, GLsizei, const void *);
static __ctype_glVertexAttribLPointer __glintercept_fnptr_glVertexAttribLPointer;
void __glintercept_glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glVertexAttribLPointer(index, size, type, stride, pointer);
  __glintercept_log(" - glVertexAttribLPointer(index: %ld, size: %ld, type: %ld (%s), stride: %ld, pointer: %ld)", index, size, type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glVertexAttribLPointerEXT)(GLuint, GLint, GLenum, GLsizei, const void *);
static __ctype_glVertexAttribLPointerEXT __glintercept_fnptr_glVertexAttribLPointerEXT;
void __glintercept_glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glVertexAttribLPointerEXT(index, size, type, stride, pointer);
  __glintercept_log(" - glVertexAttribLPointerEXT(index: %ld, size: %ld, type: %ld (%s), stride: %ld, pointer: %ld)", index, size, type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glVertexAttribP1ui)(GLuint, GLenum, GLboolean, GLuint);
static __ctype_glVertexAttribP1ui __glintercept_fnptr_glVertexAttribP1ui;
void __glintercept_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  __glintercept_fnptr_glVertexAttribP1ui(index, type, normalized, value);
  __glintercept_log(" - glVertexAttribP1ui(index: %ld, type: %ld (%s), normalized: %ld, value: %ld)", index, type, __gl_intercept_formatenum(type), normalized, value);
}

typedef void(*__ctype_glVertexAttribP1uiv)(GLuint, GLenum, GLboolean, const GLuint *);
static __ctype_glVertexAttribP1uiv __glintercept_fnptr_glVertexAttribP1uiv;
void __glintercept_glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) {
  __glintercept_fnptr_glVertexAttribP1uiv(index, type, normalized, value);
  __glintercept_log(" - glVertexAttribP1uiv(index: %ld, type: %ld (%s), normalized: %ld, value: %ld)", index, type, __gl_intercept_formatenum(type), normalized, value);
}

typedef void(*__ctype_glVertexAttribP2ui)(GLuint, GLenum, GLboolean, GLuint);
static __ctype_glVertexAttribP2ui __glintercept_fnptr_glVertexAttribP2ui;
void __glintercept_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  __glintercept_fnptr_glVertexAttribP2ui(index, type, normalized, value);
  __glintercept_log(" - glVertexAttribP2ui(index: %ld, type: %ld (%s), normalized: %ld, value: %ld)", index, type, __gl_intercept_formatenum(type), normalized, value);
}

typedef void(*__ctype_glVertexAttribP2uiv)(GLuint, GLenum, GLboolean, const GLuint *);
static __ctype_glVertexAttribP2uiv __glintercept_fnptr_glVertexAttribP2uiv;
void __glintercept_glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) {
  __glintercept_fnptr_glVertexAttribP2uiv(index, type, normalized, value);
  __glintercept_log(" - glVertexAttribP2uiv(index: %ld, type: %ld (%s), normalized: %ld, value: %ld)", index, type, __gl_intercept_formatenum(type), normalized, value);
}

typedef void(*__ctype_glVertexAttribP3ui)(GLuint, GLenum, GLboolean, GLuint);
static __ctype_glVertexAttribP3ui __glintercept_fnptr_glVertexAttribP3ui;
void __glintercept_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  __glintercept_fnptr_glVertexAttribP3ui(index, type, normalized, value);
  __glintercept_log(" - glVertexAttribP3ui(index: %ld, type: %ld (%s), normalized: %ld, value: %ld)", index, type, __gl_intercept_formatenum(type), normalized, value);
}

typedef void(*__ctype_glVertexAttribP3uiv)(GLuint, GLenum, GLboolean, const GLuint *);
static __ctype_glVertexAttribP3uiv __glintercept_fnptr_glVertexAttribP3uiv;
void __glintercept_glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) {
  __glintercept_fnptr_glVertexAttribP3uiv(index, type, normalized, value);
  __glintercept_log(" - glVertexAttribP3uiv(index: %ld, type: %ld (%s), normalized: %ld, value: %ld)", index, type, __gl_intercept_formatenum(type), normalized, value);
}

typedef void(*__ctype_glVertexAttribP4ui)(GLuint, GLenum, GLboolean, GLuint);
static __ctype_glVertexAttribP4ui __glintercept_fnptr_glVertexAttribP4ui;
void __glintercept_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  __glintercept_fnptr_glVertexAttribP4ui(index, type, normalized, value);
  __glintercept_log(" - glVertexAttribP4ui(index: %ld, type: %ld (%s), normalized: %ld, value: %ld)", index, type, __gl_intercept_formatenum(type), normalized, value);
}

typedef void(*__ctype_glVertexAttribP4uiv)(GLuint, GLenum, GLboolean, const GLuint *);
static __ctype_glVertexAttribP4uiv __glintercept_fnptr_glVertexAttribP4uiv;
void __glintercept_glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) {
  __glintercept_fnptr_glVertexAttribP4uiv(index, type, normalized, value);
  __glintercept_log(" - glVertexAttribP4uiv(index: %ld, type: %ld (%s), normalized: %ld, value: %ld)", index, type, __gl_intercept_formatenum(type), normalized, value);
}

typedef void(*__ctype_glVertexAttribParameteriAMD)(GLuint, GLenum, GLint);
static __ctype_glVertexAttribParameteriAMD __glintercept_fnptr_glVertexAttribParameteriAMD;
void __glintercept_glVertexAttribParameteriAMD(GLuint index, GLenum pname, GLint param) {
  __glintercept_fnptr_glVertexAttribParameteriAMD(index, pname, param);
  __glintercept_log(" - glVertexAttribParameteriAMD(index: %ld, pname: %ld (%s), param: %ld)", index, pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glVertexAttribPointer)(GLuint, GLint, GLenum, GLboolean, GLsizei, const void *);
static __ctype_glVertexAttribPointer __glintercept_fnptr_glVertexAttribPointer;
void __glintercept_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glVertexAttribPointer(index, size, type, normalized, stride, pointer);
  __glintercept_log(" - glVertexAttribPointer(index: %ld, size: %ld, type: %ld (%s), normalized: %ld, stride: %ld, pointer: %ld)", index, size, type, __gl_intercept_formatenum(type), normalized, stride, pointer);
}

typedef void(*__ctype_glVertexAttribPointerARB)(GLuint, GLint, GLenum, GLboolean, GLsizei, const void *);
static __ctype_glVertexAttribPointerARB __glintercept_fnptr_glVertexAttribPointerARB;
void __glintercept_glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glVertexAttribPointerARB(index, size, type, normalized, stride, pointer);
  __glintercept_log(" - glVertexAttribPointerARB(index: %ld, size: %ld, type: %ld (%s), normalized: %ld, stride: %ld, pointer: %ld)", index, size, type, __gl_intercept_formatenum(type), normalized, stride, pointer);
}

typedef void(*__ctype_glVertexAttribPointerNV)(GLuint, GLint, GLenum, GLsizei, const void *);
static __ctype_glVertexAttribPointerNV __glintercept_fnptr_glVertexAttribPointerNV;
void __glintercept_glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glVertexAttribPointerNV(index, fsize, type, stride, pointer);
  __glintercept_log(" - glVertexAttribPointerNV(index: %ld, fsize: %ld, type: %ld (%s), stride: %ld, pointer: %ld)", index, fsize, type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glVertexAttribs1dvNV)(GLuint, GLsizei, const GLdouble *);
static __ctype_glVertexAttribs1dvNV __glintercept_fnptr_glVertexAttribs1dvNV;
void __glintercept_glVertexAttribs1dvNV(GLuint index, GLsizei count, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttribs1dvNV(index, count, v);
  __glintercept_log(" - glVertexAttribs1dvNV(index: %ld, count: %ld, v: %ld)", index, count, v);
}

typedef void(*__ctype_glVertexAttribs1fvNV)(GLuint, GLsizei, const GLfloat *);
static __ctype_glVertexAttribs1fvNV __glintercept_fnptr_glVertexAttribs1fvNV;
void __glintercept_glVertexAttribs1fvNV(GLuint index, GLsizei count, const GLfloat * v) {
  __glintercept_fnptr_glVertexAttribs1fvNV(index, count, v);
  __glintercept_log(" - glVertexAttribs1fvNV(index: %ld, count: %ld, v: %ld)", index, count, v);
}

typedef void(*__ctype_glVertexAttribs1hvNV)(GLuint, GLsizei, const GLhalfNV *);
static __ctype_glVertexAttribs1hvNV __glintercept_fnptr_glVertexAttribs1hvNV;
void __glintercept_glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV * v) {
  __glintercept_fnptr_glVertexAttribs1hvNV(index, n, v);
  __glintercept_log(" - glVertexAttribs1hvNV(index: %ld, n: %ld, v: %ld)", index, n, v);
}

typedef void(*__ctype_glVertexAttribs1svNV)(GLuint, GLsizei, const GLshort *);
static __ctype_glVertexAttribs1svNV __glintercept_fnptr_glVertexAttribs1svNV;
void __glintercept_glVertexAttribs1svNV(GLuint index, GLsizei count, const GLshort * v) {
  __glintercept_fnptr_glVertexAttribs1svNV(index, count, v);
  __glintercept_log(" - glVertexAttribs1svNV(index: %ld, count: %ld, v: %ld)", index, count, v);
}

typedef void(*__ctype_glVertexAttribs2dvNV)(GLuint, GLsizei, const GLdouble *);
static __ctype_glVertexAttribs2dvNV __glintercept_fnptr_glVertexAttribs2dvNV;
void __glintercept_glVertexAttribs2dvNV(GLuint index, GLsizei count, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttribs2dvNV(index, count, v);
  __glintercept_log(" - glVertexAttribs2dvNV(index: %ld, count: %ld, v: %ld)", index, count, v);
}

typedef void(*__ctype_glVertexAttribs2fvNV)(GLuint, GLsizei, const GLfloat *);
static __ctype_glVertexAttribs2fvNV __glintercept_fnptr_glVertexAttribs2fvNV;
void __glintercept_glVertexAttribs2fvNV(GLuint index, GLsizei count, const GLfloat * v) {
  __glintercept_fnptr_glVertexAttribs2fvNV(index, count, v);
  __glintercept_log(" - glVertexAttribs2fvNV(index: %ld, count: %ld, v: %ld)", index, count, v);
}

typedef void(*__ctype_glVertexAttribs2hvNV)(GLuint, GLsizei, const GLhalfNV *);
static __ctype_glVertexAttribs2hvNV __glintercept_fnptr_glVertexAttribs2hvNV;
void __glintercept_glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV * v) {
  __glintercept_fnptr_glVertexAttribs2hvNV(index, n, v);
  __glintercept_log(" - glVertexAttribs2hvNV(index: %ld, n: %ld, v: %ld)", index, n, v);
}

typedef void(*__ctype_glVertexAttribs2svNV)(GLuint, GLsizei, const GLshort *);
static __ctype_glVertexAttribs2svNV __glintercept_fnptr_glVertexAttribs2svNV;
void __glintercept_glVertexAttribs2svNV(GLuint index, GLsizei count, const GLshort * v) {
  __glintercept_fnptr_glVertexAttribs2svNV(index, count, v);
  __glintercept_log(" - glVertexAttribs2svNV(index: %ld, count: %ld, v: %ld)", index, count, v);
}

typedef void(*__ctype_glVertexAttribs3dvNV)(GLuint, GLsizei, const GLdouble *);
static __ctype_glVertexAttribs3dvNV __glintercept_fnptr_glVertexAttribs3dvNV;
void __glintercept_glVertexAttribs3dvNV(GLuint index, GLsizei count, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttribs3dvNV(index, count, v);
  __glintercept_log(" - glVertexAttribs3dvNV(index: %ld, count: %ld, v: %ld)", index, count, v);
}

typedef void(*__ctype_glVertexAttribs3fvNV)(GLuint, GLsizei, const GLfloat *);
static __ctype_glVertexAttribs3fvNV __glintercept_fnptr_glVertexAttribs3fvNV;
void __glintercept_glVertexAttribs3fvNV(GLuint index, GLsizei count, const GLfloat * v) {
  __glintercept_fnptr_glVertexAttribs3fvNV(index, count, v);
  __glintercept_log(" - glVertexAttribs3fvNV(index: %ld, count: %ld, v: %ld)", index, count, v);
}

typedef void(*__ctype_glVertexAttribs3hvNV)(GLuint, GLsizei, const GLhalfNV *);
static __ctype_glVertexAttribs3hvNV __glintercept_fnptr_glVertexAttribs3hvNV;
void __glintercept_glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV * v) {
  __glintercept_fnptr_glVertexAttribs3hvNV(index, n, v);
  __glintercept_log(" - glVertexAttribs3hvNV(index: %ld, n: %ld, v: %ld)", index, n, v);
}

typedef void(*__ctype_glVertexAttribs3svNV)(GLuint, GLsizei, const GLshort *);
static __ctype_glVertexAttribs3svNV __glintercept_fnptr_glVertexAttribs3svNV;
void __glintercept_glVertexAttribs3svNV(GLuint index, GLsizei count, const GLshort * v) {
  __glintercept_fnptr_glVertexAttribs3svNV(index, count, v);
  __glintercept_log(" - glVertexAttribs3svNV(index: %ld, count: %ld, v: %ld)", index, count, v);
}

typedef void(*__ctype_glVertexAttribs4dvNV)(GLuint, GLsizei, const GLdouble *);
static __ctype_glVertexAttribs4dvNV __glintercept_fnptr_glVertexAttribs4dvNV;
void __glintercept_glVertexAttribs4dvNV(GLuint index, GLsizei count, const GLdouble * v) {
  __glintercept_fnptr_glVertexAttribs4dvNV(index, count, v);
  __glintercept_log(" - glVertexAttribs4dvNV(index: %ld, count: %ld, v: %ld)", index, count, v);
}

typedef void(*__ctype_glVertexAttribs4fvNV)(GLuint, GLsizei, const GLfloat *);
static __ctype_glVertexAttribs4fvNV __glintercept_fnptr_glVertexAttribs4fvNV;
void __glintercept_glVertexAttribs4fvNV(GLuint index, GLsizei count, const GLfloat * v) {
  __glintercept_fnptr_glVertexAttribs4fvNV(index, count, v);
  __glintercept_log(" - glVertexAttribs4fvNV(index: %ld, count: %ld, v: %ld)", index, count, v);
}

typedef void(*__ctype_glVertexAttribs4hvNV)(GLuint, GLsizei, const GLhalfNV *);
static __ctype_glVertexAttribs4hvNV __glintercept_fnptr_glVertexAttribs4hvNV;
void __glintercept_glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV * v) {
  __glintercept_fnptr_glVertexAttribs4hvNV(index, n, v);
  __glintercept_log(" - glVertexAttribs4hvNV(index: %ld, n: %ld, v: %ld)", index, n, v);
}

typedef void(*__ctype_glVertexAttribs4svNV)(GLuint, GLsizei, const GLshort *);
static __ctype_glVertexAttribs4svNV __glintercept_fnptr_glVertexAttribs4svNV;
void __glintercept_glVertexAttribs4svNV(GLuint index, GLsizei count, const GLshort * v) {
  __glintercept_fnptr_glVertexAttribs4svNV(index, count, v);
  __glintercept_log(" - glVertexAttribs4svNV(index: %ld, count: %ld, v: %ld)", index, count, v);
}

typedef void(*__ctype_glVertexAttribs4ubvNV)(GLuint, GLsizei, const GLubyte *);
static __ctype_glVertexAttribs4ubvNV __glintercept_fnptr_glVertexAttribs4ubvNV;
void __glintercept_glVertexAttribs4ubvNV(GLuint index, GLsizei count, const GLubyte * v) {
  __glintercept_fnptr_glVertexAttribs4ubvNV(index, count, v);
  __glintercept_log(" - glVertexAttribs4ubvNV(index: %ld, count: %ld, v: %s)", index, count, v);
}

typedef void(*__ctype_glVertexBindingDivisor)(GLuint, GLuint);
static __ctype_glVertexBindingDivisor __glintercept_fnptr_glVertexBindingDivisor;
void __glintercept_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor) {
  __glintercept_fnptr_glVertexBindingDivisor(bindingindex, divisor);
  __glintercept_log(" - glVertexBindingDivisor(bindingindex: %ld, divisor: %ld)", bindingindex, divisor);
}

typedef void(*__ctype_glVertexBlendARB)(GLint);
static __ctype_glVertexBlendARB __glintercept_fnptr_glVertexBlendARB;
void __glintercept_glVertexBlendARB(GLint count) {
  __glintercept_fnptr_glVertexBlendARB(count);
  __glintercept_log(" - glVertexBlendARB(count: %ld)", count);
}

typedef void(*__ctype_glVertexBlendEnvfATI)(GLenum, GLfloat);
static __ctype_glVertexBlendEnvfATI __glintercept_fnptr_glVertexBlendEnvfATI;
void __glintercept_glVertexBlendEnvfATI(GLenum pname, GLfloat param) {
  __glintercept_fnptr_glVertexBlendEnvfATI(pname, param);
  __glintercept_log(" - glVertexBlendEnvfATI(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glVertexBlendEnviATI)(GLenum, GLint);
static __ctype_glVertexBlendEnviATI __glintercept_fnptr_glVertexBlendEnviATI;
void __glintercept_glVertexBlendEnviATI(GLenum pname, GLint param) {
  __glintercept_fnptr_glVertexBlendEnviATI(pname, param);
  __glintercept_log(" - glVertexBlendEnviATI(pname: %ld (%s), param: %ld)", pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glVertexFormatNV)(GLint, GLenum, GLsizei);
static __ctype_glVertexFormatNV __glintercept_fnptr_glVertexFormatNV;
void __glintercept_glVertexFormatNV(GLint size, GLenum type, GLsizei stride) {
  __glintercept_fnptr_glVertexFormatNV(size, type, stride);
  __glintercept_log(" - glVertexFormatNV(size: %ld, type: %ld (%s), stride: %ld)", size, type, __gl_intercept_formatenum(type), stride);
}

typedef void(*__ctype_glVertexP2ui)(GLenum, GLuint);
static __ctype_glVertexP2ui __glintercept_fnptr_glVertexP2ui;
void __glintercept_glVertexP2ui(GLenum type, GLuint value) {
  __glintercept_fnptr_glVertexP2ui(type, value);
  __glintercept_log(" - glVertexP2ui(type: %ld (%s), value: %ld)", type, __gl_intercept_formatenum(type), value);
}

typedef void(*__ctype_glVertexP2uiv)(GLenum, const GLuint *);
static __ctype_glVertexP2uiv __glintercept_fnptr_glVertexP2uiv;
void __glintercept_glVertexP2uiv(GLenum type, const GLuint * value) {
  __glintercept_fnptr_glVertexP2uiv(type, value);
  __glintercept_log(" - glVertexP2uiv(type: %ld (%s), value: %ld)", type, __gl_intercept_formatenum(type), value);
}

typedef void(*__ctype_glVertexP3ui)(GLenum, GLuint);
static __ctype_glVertexP3ui __glintercept_fnptr_glVertexP3ui;
void __glintercept_glVertexP3ui(GLenum type, GLuint value) {
  __glintercept_fnptr_glVertexP3ui(type, value);
  __glintercept_log(" - glVertexP3ui(type: %ld (%s), value: %ld)", type, __gl_intercept_formatenum(type), value);
}

typedef void(*__ctype_glVertexP3uiv)(GLenum, const GLuint *);
static __ctype_glVertexP3uiv __glintercept_fnptr_glVertexP3uiv;
void __glintercept_glVertexP3uiv(GLenum type, const GLuint * value) {
  __glintercept_fnptr_glVertexP3uiv(type, value);
  __glintercept_log(" - glVertexP3uiv(type: %ld (%s), value: %ld)", type, __gl_intercept_formatenum(type), value);
}

typedef void(*__ctype_glVertexP4ui)(GLenum, GLuint);
static __ctype_glVertexP4ui __glintercept_fnptr_glVertexP4ui;
void __glintercept_glVertexP4ui(GLenum type, GLuint value) {
  __glintercept_fnptr_glVertexP4ui(type, value);
  __glintercept_log(" - glVertexP4ui(type: %ld (%s), value: %ld)", type, __gl_intercept_formatenum(type), value);
}

typedef void(*__ctype_glVertexP4uiv)(GLenum, const GLuint *);
static __ctype_glVertexP4uiv __glintercept_fnptr_glVertexP4uiv;
void __glintercept_glVertexP4uiv(GLenum type, const GLuint * value) {
  __glintercept_fnptr_glVertexP4uiv(type, value);
  __glintercept_log(" - glVertexP4uiv(type: %ld (%s), value: %ld)", type, __gl_intercept_formatenum(type), value);
}

typedef void(*__ctype_glVertexPointer)(GLint, GLenum, GLsizei, const void *);
static __ctype_glVertexPointer __glintercept_fnptr_glVertexPointer;
void __glintercept_glVertexPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glVertexPointer(size, type, stride, pointer);
  __glintercept_log(" - glVertexPointer(size: %ld, type: %ld (%s), stride: %ld, pointer: %ld)", size, type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glVertexPointerEXT)(GLint, GLenum, GLsizei, GLsizei, const void *);
static __ctype_glVertexPointerEXT __glintercept_fnptr_glVertexPointerEXT;
void __glintercept_glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) {
  __glintercept_fnptr_glVertexPointerEXT(size, type, stride, count, pointer);
  __glintercept_log(" - glVertexPointerEXT(size: %ld, type: %ld (%s), stride: %ld, count: %ld, pointer: %ld)", size, type, __gl_intercept_formatenum(type), stride, count, pointer);
}

typedef void(*__ctype_glVertexPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
static __ctype_glVertexPointerListIBM __glintercept_fnptr_glVertexPointerListIBM;
void __glintercept_glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) {
  __glintercept_fnptr_glVertexPointerListIBM(size, type, stride, pointer, ptrstride);
  __glintercept_log(" - glVertexPointerListIBM(size: %ld, type: %ld (%s), stride: %ld, pointer: %ld, ptrstride: %ld)", size, type, __gl_intercept_formatenum(type), stride, pointer, ptrstride);
}

typedef void(*__ctype_glVertexPointervINTEL)(GLint, GLenum, const void **);
static __ctype_glVertexPointervINTEL __glintercept_fnptr_glVertexPointervINTEL;
void __glintercept_glVertexPointervINTEL(GLint size, GLenum type, const void ** pointer) {
  __glintercept_fnptr_glVertexPointervINTEL(size, type, pointer);
  __glintercept_log(" - glVertexPointervINTEL(size: %ld, type: %ld (%s), pointer: %ld)", size, type, __gl_intercept_formatenum(type), pointer);
}

typedef void(*__ctype_glVertexStream1dATI)(GLenum, GLdouble);
static __ctype_glVertexStream1dATI __glintercept_fnptr_glVertexStream1dATI;
void __glintercept_glVertexStream1dATI(GLenum stream, GLdouble x) {
  __glintercept_fnptr_glVertexStream1dATI(stream, x);
  __glintercept_log(" - glVertexStream1dATI(stream: %ld (%s), x: %ld)", stream, __gl_intercept_formatenum(stream), x);
}

typedef void(*__ctype_glVertexStream1dvATI)(GLenum, const GLdouble *);
static __ctype_glVertexStream1dvATI __glintercept_fnptr_glVertexStream1dvATI;
void __glintercept_glVertexStream1dvATI(GLenum stream, const GLdouble * coords) {
  __glintercept_fnptr_glVertexStream1dvATI(stream, coords);
  __glintercept_log(" - glVertexStream1dvATI(stream: %ld (%s), coords: %ld)", stream, __gl_intercept_formatenum(stream), coords);
}

typedef void(*__ctype_glVertexStream1fATI)(GLenum, GLfloat);
static __ctype_glVertexStream1fATI __glintercept_fnptr_glVertexStream1fATI;
void __glintercept_glVertexStream1fATI(GLenum stream, GLfloat x) {
  __glintercept_fnptr_glVertexStream1fATI(stream, x);
  __glintercept_log(" - glVertexStream1fATI(stream: %ld (%s), x: %ld)", stream, __gl_intercept_formatenum(stream), x);
}

typedef void(*__ctype_glVertexStream1fvATI)(GLenum, const GLfloat *);
static __ctype_glVertexStream1fvATI __glintercept_fnptr_glVertexStream1fvATI;
void __glintercept_glVertexStream1fvATI(GLenum stream, const GLfloat * coords) {
  __glintercept_fnptr_glVertexStream1fvATI(stream, coords);
  __glintercept_log(" - glVertexStream1fvATI(stream: %ld (%s), coords: %ld)", stream, __gl_intercept_formatenum(stream), coords);
}

typedef void(*__ctype_glVertexStream1iATI)(GLenum, GLint);
static __ctype_glVertexStream1iATI __glintercept_fnptr_glVertexStream1iATI;
void __glintercept_glVertexStream1iATI(GLenum stream, GLint x) {
  __glintercept_fnptr_glVertexStream1iATI(stream, x);
  __glintercept_log(" - glVertexStream1iATI(stream: %ld (%s), x: %ld)", stream, __gl_intercept_formatenum(stream), x);
}

typedef void(*__ctype_glVertexStream1ivATI)(GLenum, const GLint *);
static __ctype_glVertexStream1ivATI __glintercept_fnptr_glVertexStream1ivATI;
void __glintercept_glVertexStream1ivATI(GLenum stream, const GLint * coords) {
  __glintercept_fnptr_glVertexStream1ivATI(stream, coords);
  __glintercept_log(" - glVertexStream1ivATI(stream: %ld (%s), coords: %ld)", stream, __gl_intercept_formatenum(stream), coords);
}

typedef void(*__ctype_glVertexStream1sATI)(GLenum, GLshort);
static __ctype_glVertexStream1sATI __glintercept_fnptr_glVertexStream1sATI;
void __glintercept_glVertexStream1sATI(GLenum stream, GLshort x) {
  __glintercept_fnptr_glVertexStream1sATI(stream, x);
  __glintercept_log(" - glVertexStream1sATI(stream: %ld (%s), x: %ld)", stream, __gl_intercept_formatenum(stream), x);
}

typedef void(*__ctype_glVertexStream1svATI)(GLenum, const GLshort *);
static __ctype_glVertexStream1svATI __glintercept_fnptr_glVertexStream1svATI;
void __glintercept_glVertexStream1svATI(GLenum stream, const GLshort * coords) {
  __glintercept_fnptr_glVertexStream1svATI(stream, coords);
  __glintercept_log(" - glVertexStream1svATI(stream: %ld (%s), coords: %ld)", stream, __gl_intercept_formatenum(stream), coords);
}

typedef void(*__ctype_glVertexStream2dATI)(GLenum, GLdouble, GLdouble);
static __ctype_glVertexStream2dATI __glintercept_fnptr_glVertexStream2dATI;
void __glintercept_glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y) {
  __glintercept_fnptr_glVertexStream2dATI(stream, x, y);
  __glintercept_log(" - glVertexStream2dATI(stream: %ld (%s), x: %ld, y: %ld)", stream, __gl_intercept_formatenum(stream), x, y);
}

typedef void(*__ctype_glVertexStream2dvATI)(GLenum, const GLdouble *);
static __ctype_glVertexStream2dvATI __glintercept_fnptr_glVertexStream2dvATI;
void __glintercept_glVertexStream2dvATI(GLenum stream, const GLdouble * coords) {
  __glintercept_fnptr_glVertexStream2dvATI(stream, coords);
  __glintercept_log(" - glVertexStream2dvATI(stream: %ld (%s), coords: %ld)", stream, __gl_intercept_formatenum(stream), coords);
}

typedef void(*__ctype_glVertexStream2fATI)(GLenum, GLfloat, GLfloat);
static __ctype_glVertexStream2fATI __glintercept_fnptr_glVertexStream2fATI;
void __glintercept_glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y) {
  __glintercept_fnptr_glVertexStream2fATI(stream, x, y);
  __glintercept_log(" - glVertexStream2fATI(stream: %ld (%s), x: %ld, y: %ld)", stream, __gl_intercept_formatenum(stream), x, y);
}

typedef void(*__ctype_glVertexStream2fvATI)(GLenum, const GLfloat *);
static __ctype_glVertexStream2fvATI __glintercept_fnptr_glVertexStream2fvATI;
void __glintercept_glVertexStream2fvATI(GLenum stream, const GLfloat * coords) {
  __glintercept_fnptr_glVertexStream2fvATI(stream, coords);
  __glintercept_log(" - glVertexStream2fvATI(stream: %ld (%s), coords: %ld)", stream, __gl_intercept_formatenum(stream), coords);
}

typedef void(*__ctype_glVertexStream2iATI)(GLenum, GLint, GLint);
static __ctype_glVertexStream2iATI __glintercept_fnptr_glVertexStream2iATI;
void __glintercept_glVertexStream2iATI(GLenum stream, GLint x, GLint y) {
  __glintercept_fnptr_glVertexStream2iATI(stream, x, y);
  __glintercept_log(" - glVertexStream2iATI(stream: %ld (%s), x: %ld, y: %ld)", stream, __gl_intercept_formatenum(stream), x, y);
}

typedef void(*__ctype_glVertexStream2ivATI)(GLenum, const GLint *);
static __ctype_glVertexStream2ivATI __glintercept_fnptr_glVertexStream2ivATI;
void __glintercept_glVertexStream2ivATI(GLenum stream, const GLint * coords) {
  __glintercept_fnptr_glVertexStream2ivATI(stream, coords);
  __glintercept_log(" - glVertexStream2ivATI(stream: %ld (%s), coords: %ld)", stream, __gl_intercept_formatenum(stream), coords);
}

typedef void(*__ctype_glVertexStream2sATI)(GLenum, GLshort, GLshort);
static __ctype_glVertexStream2sATI __glintercept_fnptr_glVertexStream2sATI;
void __glintercept_glVertexStream2sATI(GLenum stream, GLshort x, GLshort y) {
  __glintercept_fnptr_glVertexStream2sATI(stream, x, y);
  __glintercept_log(" - glVertexStream2sATI(stream: %ld (%s), x: %ld, y: %ld)", stream, __gl_intercept_formatenum(stream), x, y);
}

typedef void(*__ctype_glVertexStream2svATI)(GLenum, const GLshort *);
static __ctype_glVertexStream2svATI __glintercept_fnptr_glVertexStream2svATI;
void __glintercept_glVertexStream2svATI(GLenum stream, const GLshort * coords) {
  __glintercept_fnptr_glVertexStream2svATI(stream, coords);
  __glintercept_log(" - glVertexStream2svATI(stream: %ld (%s), coords: %ld)", stream, __gl_intercept_formatenum(stream), coords);
}

typedef void(*__ctype_glVertexStream3dATI)(GLenum, GLdouble, GLdouble, GLdouble);
static __ctype_glVertexStream3dATI __glintercept_fnptr_glVertexStream3dATI;
void __glintercept_glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z) {
  __glintercept_fnptr_glVertexStream3dATI(stream, x, y, z);
  __glintercept_log(" - glVertexStream3dATI(stream: %ld (%s), x: %ld, y: %ld, z: %ld)", stream, __gl_intercept_formatenum(stream), x, y, z);
}

typedef void(*__ctype_glVertexStream3dvATI)(GLenum, const GLdouble *);
static __ctype_glVertexStream3dvATI __glintercept_fnptr_glVertexStream3dvATI;
void __glintercept_glVertexStream3dvATI(GLenum stream, const GLdouble * coords) {
  __glintercept_fnptr_glVertexStream3dvATI(stream, coords);
  __glintercept_log(" - glVertexStream3dvATI(stream: %ld (%s), coords: %ld)", stream, __gl_intercept_formatenum(stream), coords);
}

typedef void(*__ctype_glVertexStream3fATI)(GLenum, GLfloat, GLfloat, GLfloat);
static __ctype_glVertexStream3fATI __glintercept_fnptr_glVertexStream3fATI;
void __glintercept_glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glVertexStream3fATI(stream, x, y, z);
  __glintercept_log(" - glVertexStream3fATI(stream: %ld (%s), x: %ld, y: %ld, z: %ld)", stream, __gl_intercept_formatenum(stream), x, y, z);
}

typedef void(*__ctype_glVertexStream3fvATI)(GLenum, const GLfloat *);
static __ctype_glVertexStream3fvATI __glintercept_fnptr_glVertexStream3fvATI;
void __glintercept_glVertexStream3fvATI(GLenum stream, const GLfloat * coords) {
  __glintercept_fnptr_glVertexStream3fvATI(stream, coords);
  __glintercept_log(" - glVertexStream3fvATI(stream: %ld (%s), coords: %ld)", stream, __gl_intercept_formatenum(stream), coords);
}

typedef void(*__ctype_glVertexStream3iATI)(GLenum, GLint, GLint, GLint);
static __ctype_glVertexStream3iATI __glintercept_fnptr_glVertexStream3iATI;
void __glintercept_glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z) {
  __glintercept_fnptr_glVertexStream3iATI(stream, x, y, z);
  __glintercept_log(" - glVertexStream3iATI(stream: %ld (%s), x: %ld, y: %ld, z: %ld)", stream, __gl_intercept_formatenum(stream), x, y, z);
}

typedef void(*__ctype_glVertexStream3ivATI)(GLenum, const GLint *);
static __ctype_glVertexStream3ivATI __glintercept_fnptr_glVertexStream3ivATI;
void __glintercept_glVertexStream3ivATI(GLenum stream, const GLint * coords) {
  __glintercept_fnptr_glVertexStream3ivATI(stream, coords);
  __glintercept_log(" - glVertexStream3ivATI(stream: %ld (%s), coords: %ld)", stream, __gl_intercept_formatenum(stream), coords);
}

typedef void(*__ctype_glVertexStream3sATI)(GLenum, GLshort, GLshort, GLshort);
static __ctype_glVertexStream3sATI __glintercept_fnptr_glVertexStream3sATI;
void __glintercept_glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z) {
  __glintercept_fnptr_glVertexStream3sATI(stream, x, y, z);
  __glintercept_log(" - glVertexStream3sATI(stream: %ld (%s), x: %ld, y: %ld, z: %ld)", stream, __gl_intercept_formatenum(stream), x, y, z);
}

typedef void(*__ctype_glVertexStream3svATI)(GLenum, const GLshort *);
static __ctype_glVertexStream3svATI __glintercept_fnptr_glVertexStream3svATI;
void __glintercept_glVertexStream3svATI(GLenum stream, const GLshort * coords) {
  __glintercept_fnptr_glVertexStream3svATI(stream, coords);
  __glintercept_log(" - glVertexStream3svATI(stream: %ld (%s), coords: %ld)", stream, __gl_intercept_formatenum(stream), coords);
}

typedef void(*__ctype_glVertexStream4dATI)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glVertexStream4dATI __glintercept_fnptr_glVertexStream4dATI;
void __glintercept_glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  __glintercept_fnptr_glVertexStream4dATI(stream, x, y, z, w);
  __glintercept_log(" - glVertexStream4dATI(stream: %ld (%s), x: %ld, y: %ld, z: %ld, w: %ld)", stream, __gl_intercept_formatenum(stream), x, y, z, w);
}

typedef void(*__ctype_glVertexStream4dvATI)(GLenum, const GLdouble *);
static __ctype_glVertexStream4dvATI __glintercept_fnptr_glVertexStream4dvATI;
void __glintercept_glVertexStream4dvATI(GLenum stream, const GLdouble * coords) {
  __glintercept_fnptr_glVertexStream4dvATI(stream, coords);
  __glintercept_log(" - glVertexStream4dvATI(stream: %ld (%s), coords: %ld)", stream, __gl_intercept_formatenum(stream), coords);
}

typedef void(*__ctype_glVertexStream4fATI)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glVertexStream4fATI __glintercept_fnptr_glVertexStream4fATI;
void __glintercept_glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  __glintercept_fnptr_glVertexStream4fATI(stream, x, y, z, w);
  __glintercept_log(" - glVertexStream4fATI(stream: %ld (%s), x: %ld, y: %ld, z: %ld, w: %ld)", stream, __gl_intercept_formatenum(stream), x, y, z, w);
}

typedef void(*__ctype_glVertexStream4fvATI)(GLenum, const GLfloat *);
static __ctype_glVertexStream4fvATI __glintercept_fnptr_glVertexStream4fvATI;
void __glintercept_glVertexStream4fvATI(GLenum stream, const GLfloat * coords) {
  __glintercept_fnptr_glVertexStream4fvATI(stream, coords);
  __glintercept_log(" - glVertexStream4fvATI(stream: %ld (%s), coords: %ld)", stream, __gl_intercept_formatenum(stream), coords);
}

typedef void(*__ctype_glVertexStream4iATI)(GLenum, GLint, GLint, GLint, GLint);
static __ctype_glVertexStream4iATI __glintercept_fnptr_glVertexStream4iATI;
void __glintercept_glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w) {
  __glintercept_fnptr_glVertexStream4iATI(stream, x, y, z, w);
  __glintercept_log(" - glVertexStream4iATI(stream: %ld (%s), x: %ld, y: %ld, z: %ld, w: %ld)", stream, __gl_intercept_formatenum(stream), x, y, z, w);
}

typedef void(*__ctype_glVertexStream4ivATI)(GLenum, const GLint *);
static __ctype_glVertexStream4ivATI __glintercept_fnptr_glVertexStream4ivATI;
void __glintercept_glVertexStream4ivATI(GLenum stream, const GLint * coords) {
  __glintercept_fnptr_glVertexStream4ivATI(stream, coords);
  __glintercept_log(" - glVertexStream4ivATI(stream: %ld (%s), coords: %ld)", stream, __gl_intercept_formatenum(stream), coords);
}

typedef void(*__ctype_glVertexStream4sATI)(GLenum, GLshort, GLshort, GLshort, GLshort);
static __ctype_glVertexStream4sATI __glintercept_fnptr_glVertexStream4sATI;
void __glintercept_glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w) {
  __glintercept_fnptr_glVertexStream4sATI(stream, x, y, z, w);
  __glintercept_log(" - glVertexStream4sATI(stream: %ld (%s), x: %ld, y: %ld, z: %ld, w: %ld)", stream, __gl_intercept_formatenum(stream), x, y, z, w);
}

typedef void(*__ctype_glVertexStream4svATI)(GLenum, const GLshort *);
static __ctype_glVertexStream4svATI __glintercept_fnptr_glVertexStream4svATI;
void __glintercept_glVertexStream4svATI(GLenum stream, const GLshort * coords) {
  __glintercept_fnptr_glVertexStream4svATI(stream, coords);
  __glintercept_log(" - glVertexStream4svATI(stream: %ld (%s), coords: %ld)", stream, __gl_intercept_formatenum(stream), coords);
}

typedef void(*__ctype_glVertexWeightPointerEXT)(GLint, GLenum, GLsizei, const void *);
static __ctype_glVertexWeightPointerEXT __glintercept_fnptr_glVertexWeightPointerEXT;
void __glintercept_glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glVertexWeightPointerEXT(size, type, stride, pointer);
  __glintercept_log(" - glVertexWeightPointerEXT(size: %ld, type: %ld (%s), stride: %ld, pointer: %ld)", size, type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glVertexWeightfEXT)(GLfloat);
static __ctype_glVertexWeightfEXT __glintercept_fnptr_glVertexWeightfEXT;
void __glintercept_glVertexWeightfEXT(GLfloat weight) {
  __glintercept_fnptr_glVertexWeightfEXT(weight);
  __glintercept_log(" - glVertexWeightfEXT(weight: %ld)", weight);
}

typedef void(*__ctype_glVertexWeightfvEXT)(const GLfloat *);
static __ctype_glVertexWeightfvEXT __glintercept_fnptr_glVertexWeightfvEXT;
void __glintercept_glVertexWeightfvEXT(const GLfloat * weight) {
  __glintercept_fnptr_glVertexWeightfvEXT(weight);
  __glintercept_log(" - glVertexWeightfvEXT(weight: %ld)", weight);
}

typedef void(*__ctype_glVertexWeighthNV)(GLhalfNV);
static __ctype_glVertexWeighthNV __glintercept_fnptr_glVertexWeighthNV;
void __glintercept_glVertexWeighthNV(GLhalfNV weight) {
  __glintercept_fnptr_glVertexWeighthNV(weight);
  __glintercept_log(" - glVertexWeighthNV(weight: %ld)", weight);
}

typedef void(*__ctype_glVertexWeighthvNV)(const GLhalfNV *);
static __ctype_glVertexWeighthvNV __glintercept_fnptr_glVertexWeighthvNV;
void __glintercept_glVertexWeighthvNV(const GLhalfNV * weight) {
  __glintercept_fnptr_glVertexWeighthvNV(weight);
  __glintercept_log(" - glVertexWeighthvNV(weight: %ld)", weight);
}

typedef GLenum(*__ctype_glVideoCaptureNV)(GLuint, GLuint *, GLuint64EXT *);
static __ctype_glVideoCaptureNV __glintercept_fnptr_glVideoCaptureNV;
GLenum __glintercept_glVideoCaptureNV(GLuint video_capture_slot, GLuint * sequence_num, GLuint64EXT * capture_time) {
  GLenum __ret = __glintercept_fnptr_glVideoCaptureNV(video_capture_slot, sequence_num, capture_time);
  __glintercept_log(" - glVideoCaptureNV(video_capture_slot: %ld, sequence_num: %ld, capture_time: %ld) -> %ld", video_capture_slot, sequence_num, capture_time, __ret);
  return __ret;
}

typedef void(*__ctype_glVideoCaptureStreamParameterdvNV)(GLuint, GLuint, GLenum, const GLdouble *);
static __ctype_glVideoCaptureStreamParameterdvNV __glintercept_fnptr_glVideoCaptureStreamParameterdvNV;
void __glintercept_glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble * params) {
  __glintercept_fnptr_glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params);
  __glintercept_log(" - glVideoCaptureStreamParameterdvNV(video_capture_slot: %ld, stream: %ld, pname: %ld (%s), params: %ld)", video_capture_slot, stream, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glVideoCaptureStreamParameterfvNV)(GLuint, GLuint, GLenum, const GLfloat *);
static __ctype_glVideoCaptureStreamParameterfvNV __glintercept_fnptr_glVideoCaptureStreamParameterfvNV;
void __glintercept_glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat * params) {
  __glintercept_fnptr_glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params);
  __glintercept_log(" - glVideoCaptureStreamParameterfvNV(video_capture_slot: %ld, stream: %ld, pname: %ld (%s), params: %ld)", video_capture_slot, stream, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glVideoCaptureStreamParameterivNV)(GLuint, GLuint, GLenum, const GLint *);
static __ctype_glVideoCaptureStreamParameterivNV __glintercept_fnptr_glVideoCaptureStreamParameterivNV;
void __glintercept_glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint * params) {
  __glintercept_fnptr_glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params);
  __glintercept_log(" - glVideoCaptureStreamParameterivNV(video_capture_slot: %ld, stream: %ld, pname: %ld (%s), params: %ld)", video_capture_slot, stream, pname, __gl_intercept_formatenum(pname), params);
}

typedef void(*__ctype_glViewport)(GLint, GLint, GLsizei, GLsizei);
static __ctype_glViewport __glintercept_fnptr_glViewport;
void __glintercept_glViewport(GLint x, GLint y, GLsizei width, GLsizei height) {
  __glintercept_fnptr_glViewport(x, y, width, height);
  __glintercept_log(" - glViewport(x: %ld, y: %ld, width: %ld, height: %ld)", x, y, width, height);
}

typedef void(*__ctype_glViewportArrayv)(GLuint, GLsizei, const GLfloat *);
static __ctype_glViewportArrayv __glintercept_fnptr_glViewportArrayv;
void __glintercept_glViewportArrayv(GLuint first, GLsizei count, const GLfloat * v) {
  __glintercept_fnptr_glViewportArrayv(first, count, v);
  __glintercept_log(" - glViewportArrayv(first: %ld, count: %ld, v: %ld)", first, count, v);
}

typedef void(*__ctype_glViewportArrayvNV)(GLuint, GLsizei, const GLfloat *);
static __ctype_glViewportArrayvNV __glintercept_fnptr_glViewportArrayvNV;
void __glintercept_glViewportArrayvNV(GLuint first, GLsizei count, const GLfloat * v) {
  __glintercept_fnptr_glViewportArrayvNV(first, count, v);
  __glintercept_log(" - glViewportArrayvNV(first: %ld, count: %ld, v: %ld)", first, count, v);
}

typedef void(*__ctype_glViewportArrayvOES)(GLuint, GLsizei, const GLfloat *);
static __ctype_glViewportArrayvOES __glintercept_fnptr_glViewportArrayvOES;
void __glintercept_glViewportArrayvOES(GLuint first, GLsizei count, const GLfloat * v) {
  __glintercept_fnptr_glViewportArrayvOES(first, count, v);
  __glintercept_log(" - glViewportArrayvOES(first: %ld, count: %ld, v: %ld)", first, count, v);
}

typedef void(*__ctype_glViewportIndexedf)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glViewportIndexedf __glintercept_fnptr_glViewportIndexedf;
void __glintercept_glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) {
  __glintercept_fnptr_glViewportIndexedf(index, x, y, w, h);
  __glintercept_log(" - glViewportIndexedf(index: %ld, x: %ld, y: %ld, w: %ld, h: %ld)", index, x, y, w, h);
}

typedef void(*__ctype_glViewportIndexedfOES)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glViewportIndexedfOES __glintercept_fnptr_glViewportIndexedfOES;
void __glintercept_glViewportIndexedfOES(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) {
  __glintercept_fnptr_glViewportIndexedfOES(index, x, y, w, h);
  __glintercept_log(" - glViewportIndexedfOES(index: %ld, x: %ld, y: %ld, w: %ld, h: %ld)", index, x, y, w, h);
}

typedef void(*__ctype_glViewportIndexedfNV)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glViewportIndexedfNV __glintercept_fnptr_glViewportIndexedfNV;
void __glintercept_glViewportIndexedfNV(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) {
  __glintercept_fnptr_glViewportIndexedfNV(index, x, y, w, h);
  __glintercept_log(" - glViewportIndexedfNV(index: %ld, x: %ld, y: %ld, w: %ld, h: %ld)", index, x, y, w, h);
}

typedef void(*__ctype_glViewportIndexedfv)(GLuint, const GLfloat *);
static __ctype_glViewportIndexedfv __glintercept_fnptr_glViewportIndexedfv;
void __glintercept_glViewportIndexedfv(GLuint index, const GLfloat * v) {
  __glintercept_fnptr_glViewportIndexedfv(index, v);
  __glintercept_log(" - glViewportIndexedfv(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glViewportIndexedfvOES)(GLuint, const GLfloat *);
static __ctype_glViewportIndexedfvOES __glintercept_fnptr_glViewportIndexedfvOES;
void __glintercept_glViewportIndexedfvOES(GLuint index, const GLfloat * v) {
  __glintercept_fnptr_glViewportIndexedfvOES(index, v);
  __glintercept_log(" - glViewportIndexedfvOES(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glViewportIndexedfvNV)(GLuint, const GLfloat *);
static __ctype_glViewportIndexedfvNV __glintercept_fnptr_glViewportIndexedfvNV;
void __glintercept_glViewportIndexedfvNV(GLuint index, const GLfloat * v) {
  __glintercept_fnptr_glViewportIndexedfvNV(index, v);
  __glintercept_log(" - glViewportIndexedfvNV(index: %ld, v: %ld)", index, v);
}

typedef void(*__ctype_glViewportPositionWScaleNV)(GLuint, GLfloat, GLfloat);
static __ctype_glViewportPositionWScaleNV __glintercept_fnptr_glViewportPositionWScaleNV;
void __glintercept_glViewportPositionWScaleNV(GLuint index, GLfloat xcoeff, GLfloat ycoeff) {
  __glintercept_fnptr_glViewportPositionWScaleNV(index, xcoeff, ycoeff);
  __glintercept_log(" - glViewportPositionWScaleNV(index: %ld, xcoeff: %ld, ycoeff: %ld)", index, xcoeff, ycoeff);
}

typedef void(*__ctype_glViewportSwizzleNV)(GLuint, GLenum, GLenum, GLenum, GLenum);
static __ctype_glViewportSwizzleNV __glintercept_fnptr_glViewportSwizzleNV;
void __glintercept_glViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew) {
  __glintercept_fnptr_glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew);
  __glintercept_log(" - glViewportSwizzleNV(index: %ld, swizzlex: %ld (%s), swizzley: %ld (%s), swizzlez: %ld (%s), swizzlew: %ld (%s))", index, swizzlex, __gl_intercept_formatenum(swizzlex), swizzley, __gl_intercept_formatenum(swizzley), swizzlez, __gl_intercept_formatenum(swizzlez), swizzlew, __gl_intercept_formatenum(swizzlew));
}

typedef void(*__ctype_glWaitSemaphoreEXT)(GLuint, GLuint, const GLuint *, GLuint, const GLuint *, const GLenum *);
static __ctype_glWaitSemaphoreEXT __glintercept_fnptr_glWaitSemaphoreEXT;
void __glintercept_glWaitSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint * buffers, GLuint numTextureBarriers, const GLuint * textures, const GLenum * srcLayouts) {
  __glintercept_fnptr_glWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
  __glintercept_log(" - glWaitSemaphoreEXT(semaphore: %ld, numBufferBarriers: %ld, buffers: %ld, numTextureBarriers: %ld, textures: %ld, srcLayouts: %ld)", semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
}

typedef void(*__ctype_glWaitSemaphoreui64NVX)(GLuint, GLsizei, const GLuint *, const GLuint64 *);
static __ctype_glWaitSemaphoreui64NVX __glintercept_fnptr_glWaitSemaphoreui64NVX;
void __glintercept_glWaitSemaphoreui64NVX(GLuint waitGpu, GLsizei fenceObjectCount, const GLuint * semaphoreArray, const GLuint64 * fenceValueArray) {
  __glintercept_fnptr_glWaitSemaphoreui64NVX(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
  __glintercept_log(" - glWaitSemaphoreui64NVX(waitGpu: %ld, fenceObjectCount: %ld, semaphoreArray: %ld, fenceValueArray: %ld)", waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
}

typedef void(*__ctype_glWaitSync)(GLsync, GLbitfield, GLuint64);
static __ctype_glWaitSync __glintercept_fnptr_glWaitSync;
void __glintercept_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {
  __glintercept_fnptr_glWaitSync(sync, flags, timeout);
  __glintercept_log(" - glWaitSync(sync: %ld, flags: %ld, timeout: %ld)", sync, flags, timeout);
}

typedef void(*__ctype_glWaitSyncAPPLE)(GLsync, GLbitfield, GLuint64);
static __ctype_glWaitSyncAPPLE __glintercept_fnptr_glWaitSyncAPPLE;
void __glintercept_glWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout) {
  __glintercept_fnptr_glWaitSyncAPPLE(sync, flags, timeout);
  __glintercept_log(" - glWaitSyncAPPLE(sync: %ld, flags: %ld, timeout: %ld)", sync, flags, timeout);
}

typedef void(*__ctype_glWeightPathsNV)(GLuint, GLsizei, const GLuint *, const GLfloat *);
static __ctype_glWeightPathsNV __glintercept_fnptr_glWeightPathsNV;
void __glintercept_glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint * paths, const GLfloat * weights) {
  __glintercept_fnptr_glWeightPathsNV(resultPath, numPaths, paths, weights);
  __glintercept_log(" - glWeightPathsNV(resultPath: %ld, numPaths: %ld, paths: %ld, weights: %ld)", resultPath, numPaths, paths, weights);
}

typedef void(*__ctype_glWeightPointerARB)(GLint, GLenum, GLsizei, const void *);
static __ctype_glWeightPointerARB __glintercept_fnptr_glWeightPointerARB;
void __glintercept_glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glWeightPointerARB(size, type, stride, pointer);
  __glintercept_log(" - glWeightPointerARB(size: %ld, type: %ld (%s), stride: %ld, pointer: %ld)", size, type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glWeightPointerOES)(GLint, GLenum, GLsizei, const void *);
static __ctype_glWeightPointerOES __glintercept_fnptr_glWeightPointerOES;
void __glintercept_glWeightPointerOES(GLint size, GLenum type, GLsizei stride, const void * pointer) {
  __glintercept_fnptr_glWeightPointerOES(size, type, stride, pointer);
  __glintercept_log(" - glWeightPointerOES(size: %ld, type: %ld (%s), stride: %ld, pointer: %ld)", size, type, __gl_intercept_formatenum(type), stride, pointer);
}

typedef void(*__ctype_glWeightbvARB)(GLint, const GLbyte *);
static __ctype_glWeightbvARB __glintercept_fnptr_glWeightbvARB;
void __glintercept_glWeightbvARB(GLint size, const GLbyte * weights) {
  __glintercept_fnptr_glWeightbvARB(size, weights);
  __glintercept_log(" - glWeightbvARB(size: %ld, weights: %ld)", size, weights);
}

typedef void(*__ctype_glWeightdvARB)(GLint, const GLdouble *);
static __ctype_glWeightdvARB __glintercept_fnptr_glWeightdvARB;
void __glintercept_glWeightdvARB(GLint size, const GLdouble * weights) {
  __glintercept_fnptr_glWeightdvARB(size, weights);
  __glintercept_log(" - glWeightdvARB(size: %ld, weights: %ld)", size, weights);
}

typedef void(*__ctype_glWeightfvARB)(GLint, const GLfloat *);
static __ctype_glWeightfvARB __glintercept_fnptr_glWeightfvARB;
void __glintercept_glWeightfvARB(GLint size, const GLfloat * weights) {
  __glintercept_fnptr_glWeightfvARB(size, weights);
  __glintercept_log(" - glWeightfvARB(size: %ld, weights: %ld)", size, weights);
}

typedef void(*__ctype_glWeightivARB)(GLint, const GLint *);
static __ctype_glWeightivARB __glintercept_fnptr_glWeightivARB;
void __glintercept_glWeightivARB(GLint size, const GLint * weights) {
  __glintercept_fnptr_glWeightivARB(size, weights);
  __glintercept_log(" - glWeightivARB(size: %ld, weights: %ld)", size, weights);
}

typedef void(*__ctype_glWeightsvARB)(GLint, const GLshort *);
static __ctype_glWeightsvARB __glintercept_fnptr_glWeightsvARB;
void __glintercept_glWeightsvARB(GLint size, const GLshort * weights) {
  __glintercept_fnptr_glWeightsvARB(size, weights);
  __glintercept_log(" - glWeightsvARB(size: %ld, weights: %ld)", size, weights);
}

typedef void(*__ctype_glWeightubvARB)(GLint, const GLubyte *);
static __ctype_glWeightubvARB __glintercept_fnptr_glWeightubvARB;
void __glintercept_glWeightubvARB(GLint size, const GLubyte * weights) {
  __glintercept_fnptr_glWeightubvARB(size, weights);
  __glintercept_log(" - glWeightubvARB(size: %ld, weights: %s)", size, weights);
}

typedef void(*__ctype_glWeightuivARB)(GLint, const GLuint *);
static __ctype_glWeightuivARB __glintercept_fnptr_glWeightuivARB;
void __glintercept_glWeightuivARB(GLint size, const GLuint * weights) {
  __glintercept_fnptr_glWeightuivARB(size, weights);
  __glintercept_log(" - glWeightuivARB(size: %ld, weights: %ld)", size, weights);
}

typedef void(*__ctype_glWeightusvARB)(GLint, const GLushort *);
static __ctype_glWeightusvARB __glintercept_fnptr_glWeightusvARB;
void __glintercept_glWeightusvARB(GLint size, const GLushort * weights) {
  __glintercept_fnptr_glWeightusvARB(size, weights);
  __glintercept_log(" - glWeightusvARB(size: %ld, weights: %ld)", size, weights);
}

typedef void(*__ctype_glWindowPos2d)(GLdouble, GLdouble);
static __ctype_glWindowPos2d __glintercept_fnptr_glWindowPos2d;
void __glintercept_glWindowPos2d(GLdouble x, GLdouble y) {
  __glintercept_fnptr_glWindowPos2d(x, y);
  __glintercept_log(" - glWindowPos2d(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glWindowPos2dARB)(GLdouble, GLdouble);
static __ctype_glWindowPos2dARB __glintercept_fnptr_glWindowPos2dARB;
void __glintercept_glWindowPos2dARB(GLdouble x, GLdouble y) {
  __glintercept_fnptr_glWindowPos2dARB(x, y);
  __glintercept_log(" - glWindowPos2dARB(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glWindowPos2dMESA)(GLdouble, GLdouble);
static __ctype_glWindowPos2dMESA __glintercept_fnptr_glWindowPos2dMESA;
void __glintercept_glWindowPos2dMESA(GLdouble x, GLdouble y) {
  __glintercept_fnptr_glWindowPos2dMESA(x, y);
  __glintercept_log(" - glWindowPos2dMESA(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glWindowPos2dv)(const GLdouble *);
static __ctype_glWindowPos2dv __glintercept_fnptr_glWindowPos2dv;
void __glintercept_glWindowPos2dv(const GLdouble * v) {
  __glintercept_fnptr_glWindowPos2dv(v);
  __glintercept_log(" - glWindowPos2dv(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos2dvARB)(const GLdouble *);
static __ctype_glWindowPos2dvARB __glintercept_fnptr_glWindowPos2dvARB;
void __glintercept_glWindowPos2dvARB(const GLdouble * v) {
  __glintercept_fnptr_glWindowPos2dvARB(v);
  __glintercept_log(" - glWindowPos2dvARB(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos2dvMESA)(const GLdouble *);
static __ctype_glWindowPos2dvMESA __glintercept_fnptr_glWindowPos2dvMESA;
void __glintercept_glWindowPos2dvMESA(const GLdouble * v) {
  __glintercept_fnptr_glWindowPos2dvMESA(v);
  __glintercept_log(" - glWindowPos2dvMESA(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos2f)(GLfloat, GLfloat);
static __ctype_glWindowPos2f __glintercept_fnptr_glWindowPos2f;
void __glintercept_glWindowPos2f(GLfloat x, GLfloat y) {
  __glintercept_fnptr_glWindowPos2f(x, y);
  __glintercept_log(" - glWindowPos2f(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glWindowPos2fARB)(GLfloat, GLfloat);
static __ctype_glWindowPos2fARB __glintercept_fnptr_glWindowPos2fARB;
void __glintercept_glWindowPos2fARB(GLfloat x, GLfloat y) {
  __glintercept_fnptr_glWindowPos2fARB(x, y);
  __glintercept_log(" - glWindowPos2fARB(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glWindowPos2fMESA)(GLfloat, GLfloat);
static __ctype_glWindowPos2fMESA __glintercept_fnptr_glWindowPos2fMESA;
void __glintercept_glWindowPos2fMESA(GLfloat x, GLfloat y) {
  __glintercept_fnptr_glWindowPos2fMESA(x, y);
  __glintercept_log(" - glWindowPos2fMESA(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glWindowPos2fv)(const GLfloat *);
static __ctype_glWindowPos2fv __glintercept_fnptr_glWindowPos2fv;
void __glintercept_glWindowPos2fv(const GLfloat * v) {
  __glintercept_fnptr_glWindowPos2fv(v);
  __glintercept_log(" - glWindowPos2fv(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos2fvARB)(const GLfloat *);
static __ctype_glWindowPos2fvARB __glintercept_fnptr_glWindowPos2fvARB;
void __glintercept_glWindowPos2fvARB(const GLfloat * v) {
  __glintercept_fnptr_glWindowPos2fvARB(v);
  __glintercept_log(" - glWindowPos2fvARB(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos2fvMESA)(const GLfloat *);
static __ctype_glWindowPos2fvMESA __glintercept_fnptr_glWindowPos2fvMESA;
void __glintercept_glWindowPos2fvMESA(const GLfloat * v) {
  __glintercept_fnptr_glWindowPos2fvMESA(v);
  __glintercept_log(" - glWindowPos2fvMESA(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos2i)(GLint, GLint);
static __ctype_glWindowPos2i __glintercept_fnptr_glWindowPos2i;
void __glintercept_glWindowPos2i(GLint x, GLint y) {
  __glintercept_fnptr_glWindowPos2i(x, y);
  __glintercept_log(" - glWindowPos2i(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glWindowPos2iARB)(GLint, GLint);
static __ctype_glWindowPos2iARB __glintercept_fnptr_glWindowPos2iARB;
void __glintercept_glWindowPos2iARB(GLint x, GLint y) {
  __glintercept_fnptr_glWindowPos2iARB(x, y);
  __glintercept_log(" - glWindowPos2iARB(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glWindowPos2iMESA)(GLint, GLint);
static __ctype_glWindowPos2iMESA __glintercept_fnptr_glWindowPos2iMESA;
void __glintercept_glWindowPos2iMESA(GLint x, GLint y) {
  __glintercept_fnptr_glWindowPos2iMESA(x, y);
  __glintercept_log(" - glWindowPos2iMESA(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glWindowPos2iv)(const GLint *);
static __ctype_glWindowPos2iv __glintercept_fnptr_glWindowPos2iv;
void __glintercept_glWindowPos2iv(const GLint * v) {
  __glintercept_fnptr_glWindowPos2iv(v);
  __glintercept_log(" - glWindowPos2iv(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos2ivARB)(const GLint *);
static __ctype_glWindowPos2ivARB __glintercept_fnptr_glWindowPos2ivARB;
void __glintercept_glWindowPos2ivARB(const GLint * v) {
  __glintercept_fnptr_glWindowPos2ivARB(v);
  __glintercept_log(" - glWindowPos2ivARB(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos2ivMESA)(const GLint *);
static __ctype_glWindowPos2ivMESA __glintercept_fnptr_glWindowPos2ivMESA;
void __glintercept_glWindowPos2ivMESA(const GLint * v) {
  __glintercept_fnptr_glWindowPos2ivMESA(v);
  __glintercept_log(" - glWindowPos2ivMESA(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos2s)(GLshort, GLshort);
static __ctype_glWindowPos2s __glintercept_fnptr_glWindowPos2s;
void __glintercept_glWindowPos2s(GLshort x, GLshort y) {
  __glintercept_fnptr_glWindowPos2s(x, y);
  __glintercept_log(" - glWindowPos2s(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glWindowPos2sARB)(GLshort, GLshort);
static __ctype_glWindowPos2sARB __glintercept_fnptr_glWindowPos2sARB;
void __glintercept_glWindowPos2sARB(GLshort x, GLshort y) {
  __glintercept_fnptr_glWindowPos2sARB(x, y);
  __glintercept_log(" - glWindowPos2sARB(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glWindowPos2sMESA)(GLshort, GLshort);
static __ctype_glWindowPos2sMESA __glintercept_fnptr_glWindowPos2sMESA;
void __glintercept_glWindowPos2sMESA(GLshort x, GLshort y) {
  __glintercept_fnptr_glWindowPos2sMESA(x, y);
  __glintercept_log(" - glWindowPos2sMESA(x: %ld, y: %ld)", x, y);
}

typedef void(*__ctype_glWindowPos2sv)(const GLshort *);
static __ctype_glWindowPos2sv __glintercept_fnptr_glWindowPos2sv;
void __glintercept_glWindowPos2sv(const GLshort * v) {
  __glintercept_fnptr_glWindowPos2sv(v);
  __glintercept_log(" - glWindowPos2sv(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos2svARB)(const GLshort *);
static __ctype_glWindowPos2svARB __glintercept_fnptr_glWindowPos2svARB;
void __glintercept_glWindowPos2svARB(const GLshort * v) {
  __glintercept_fnptr_glWindowPos2svARB(v);
  __glintercept_log(" - glWindowPos2svARB(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos2svMESA)(const GLshort *);
static __ctype_glWindowPos2svMESA __glintercept_fnptr_glWindowPos2svMESA;
void __glintercept_glWindowPos2svMESA(const GLshort * v) {
  __glintercept_fnptr_glWindowPos2svMESA(v);
  __glintercept_log(" - glWindowPos2svMESA(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos3d)(GLdouble, GLdouble, GLdouble);
static __ctype_glWindowPos3d __glintercept_fnptr_glWindowPos3d;
void __glintercept_glWindowPos3d(GLdouble x, GLdouble y, GLdouble z) {
  __glintercept_fnptr_glWindowPos3d(x, y, z);
  __glintercept_log(" - glWindowPos3d(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glWindowPos3dARB)(GLdouble, GLdouble, GLdouble);
static __ctype_glWindowPos3dARB __glintercept_fnptr_glWindowPos3dARB;
void __glintercept_glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z) {
  __glintercept_fnptr_glWindowPos3dARB(x, y, z);
  __glintercept_log(" - glWindowPos3dARB(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glWindowPos3dMESA)(GLdouble, GLdouble, GLdouble);
static __ctype_glWindowPos3dMESA __glintercept_fnptr_glWindowPos3dMESA;
void __glintercept_glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z) {
  __glintercept_fnptr_glWindowPos3dMESA(x, y, z);
  __glintercept_log(" - glWindowPos3dMESA(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glWindowPos3dv)(const GLdouble *);
static __ctype_glWindowPos3dv __glintercept_fnptr_glWindowPos3dv;
void __glintercept_glWindowPos3dv(const GLdouble * v) {
  __glintercept_fnptr_glWindowPos3dv(v);
  __glintercept_log(" - glWindowPos3dv(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos3dvARB)(const GLdouble *);
static __ctype_glWindowPos3dvARB __glintercept_fnptr_glWindowPos3dvARB;
void __glintercept_glWindowPos3dvARB(const GLdouble * v) {
  __glintercept_fnptr_glWindowPos3dvARB(v);
  __glintercept_log(" - glWindowPos3dvARB(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos3dvMESA)(const GLdouble *);
static __ctype_glWindowPos3dvMESA __glintercept_fnptr_glWindowPos3dvMESA;
void __glintercept_glWindowPos3dvMESA(const GLdouble * v) {
  __glintercept_fnptr_glWindowPos3dvMESA(v);
  __glintercept_log(" - glWindowPos3dvMESA(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos3f)(GLfloat, GLfloat, GLfloat);
static __ctype_glWindowPos3f __glintercept_fnptr_glWindowPos3f;
void __glintercept_glWindowPos3f(GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glWindowPos3f(x, y, z);
  __glintercept_log(" - glWindowPos3f(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glWindowPos3fARB)(GLfloat, GLfloat, GLfloat);
static __ctype_glWindowPos3fARB __glintercept_fnptr_glWindowPos3fARB;
void __glintercept_glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glWindowPos3fARB(x, y, z);
  __glintercept_log(" - glWindowPos3fARB(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glWindowPos3fMESA)(GLfloat, GLfloat, GLfloat);
static __ctype_glWindowPos3fMESA __glintercept_fnptr_glWindowPos3fMESA;
void __glintercept_glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z) {
  __glintercept_fnptr_glWindowPos3fMESA(x, y, z);
  __glintercept_log(" - glWindowPos3fMESA(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glWindowPos3fv)(const GLfloat *);
static __ctype_glWindowPos3fv __glintercept_fnptr_glWindowPos3fv;
void __glintercept_glWindowPos3fv(const GLfloat * v) {
  __glintercept_fnptr_glWindowPos3fv(v);
  __glintercept_log(" - glWindowPos3fv(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos3fvARB)(const GLfloat *);
static __ctype_glWindowPos3fvARB __glintercept_fnptr_glWindowPos3fvARB;
void __glintercept_glWindowPos3fvARB(const GLfloat * v) {
  __glintercept_fnptr_glWindowPos3fvARB(v);
  __glintercept_log(" - glWindowPos3fvARB(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos3fvMESA)(const GLfloat *);
static __ctype_glWindowPos3fvMESA __glintercept_fnptr_glWindowPos3fvMESA;
void __glintercept_glWindowPos3fvMESA(const GLfloat * v) {
  __glintercept_fnptr_glWindowPos3fvMESA(v);
  __glintercept_log(" - glWindowPos3fvMESA(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos3i)(GLint, GLint, GLint);
static __ctype_glWindowPos3i __glintercept_fnptr_glWindowPos3i;
void __glintercept_glWindowPos3i(GLint x, GLint y, GLint z) {
  __glintercept_fnptr_glWindowPos3i(x, y, z);
  __glintercept_log(" - glWindowPos3i(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glWindowPos3iARB)(GLint, GLint, GLint);
static __ctype_glWindowPos3iARB __glintercept_fnptr_glWindowPos3iARB;
void __glintercept_glWindowPos3iARB(GLint x, GLint y, GLint z) {
  __glintercept_fnptr_glWindowPos3iARB(x, y, z);
  __glintercept_log(" - glWindowPos3iARB(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glWindowPos3iMESA)(GLint, GLint, GLint);
static __ctype_glWindowPos3iMESA __glintercept_fnptr_glWindowPos3iMESA;
void __glintercept_glWindowPos3iMESA(GLint x, GLint y, GLint z) {
  __glintercept_fnptr_glWindowPos3iMESA(x, y, z);
  __glintercept_log(" - glWindowPos3iMESA(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glWindowPos3iv)(const GLint *);
static __ctype_glWindowPos3iv __glintercept_fnptr_glWindowPos3iv;
void __glintercept_glWindowPos3iv(const GLint * v) {
  __glintercept_fnptr_glWindowPos3iv(v);
  __glintercept_log(" - glWindowPos3iv(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos3ivARB)(const GLint *);
static __ctype_glWindowPos3ivARB __glintercept_fnptr_glWindowPos3ivARB;
void __glintercept_glWindowPos3ivARB(const GLint * v) {
  __glintercept_fnptr_glWindowPos3ivARB(v);
  __glintercept_log(" - glWindowPos3ivARB(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos3ivMESA)(const GLint *);
static __ctype_glWindowPos3ivMESA __glintercept_fnptr_glWindowPos3ivMESA;
void __glintercept_glWindowPos3ivMESA(const GLint * v) {
  __glintercept_fnptr_glWindowPos3ivMESA(v);
  __glintercept_log(" - glWindowPos3ivMESA(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos3s)(GLshort, GLshort, GLshort);
static __ctype_glWindowPos3s __glintercept_fnptr_glWindowPos3s;
void __glintercept_glWindowPos3s(GLshort x, GLshort y, GLshort z) {
  __glintercept_fnptr_glWindowPos3s(x, y, z);
  __glintercept_log(" - glWindowPos3s(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glWindowPos3sARB)(GLshort, GLshort, GLshort);
static __ctype_glWindowPos3sARB __glintercept_fnptr_glWindowPos3sARB;
void __glintercept_glWindowPos3sARB(GLshort x, GLshort y, GLshort z) {
  __glintercept_fnptr_glWindowPos3sARB(x, y, z);
  __glintercept_log(" - glWindowPos3sARB(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glWindowPos3sMESA)(GLshort, GLshort, GLshort);
static __ctype_glWindowPos3sMESA __glintercept_fnptr_glWindowPos3sMESA;
void __glintercept_glWindowPos3sMESA(GLshort x, GLshort y, GLshort z) {
  __glintercept_fnptr_glWindowPos3sMESA(x, y, z);
  __glintercept_log(" - glWindowPos3sMESA(x: %ld, y: %ld, z: %ld)", x, y, z);
}

typedef void(*__ctype_glWindowPos3sv)(const GLshort *);
static __ctype_glWindowPos3sv __glintercept_fnptr_glWindowPos3sv;
void __glintercept_glWindowPos3sv(const GLshort * v) {
  __glintercept_fnptr_glWindowPos3sv(v);
  __glintercept_log(" - glWindowPos3sv(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos3svARB)(const GLshort *);
static __ctype_glWindowPos3svARB __glintercept_fnptr_glWindowPos3svARB;
void __glintercept_glWindowPos3svARB(const GLshort * v) {
  __glintercept_fnptr_glWindowPos3svARB(v);
  __glintercept_log(" - glWindowPos3svARB(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos3svMESA)(const GLshort *);
static __ctype_glWindowPos3svMESA __glintercept_fnptr_glWindowPos3svMESA;
void __glintercept_glWindowPos3svMESA(const GLshort * v) {
  __glintercept_fnptr_glWindowPos3svMESA(v);
  __glintercept_log(" - glWindowPos3svMESA(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos4dMESA)(GLdouble, GLdouble, GLdouble, GLdouble);
static __ctype_glWindowPos4dMESA __glintercept_fnptr_glWindowPos4dMESA;
void __glintercept_glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  __glintercept_fnptr_glWindowPos4dMESA(x, y, z, w);
  __glintercept_log(" - glWindowPos4dMESA(x: %ld, y: %ld, z: %ld, w: %ld)", x, y, z, w);
}

typedef void(*__ctype_glWindowPos4dvMESA)(const GLdouble *);
static __ctype_glWindowPos4dvMESA __glintercept_fnptr_glWindowPos4dvMESA;
void __glintercept_glWindowPos4dvMESA(const GLdouble * v) {
  __glintercept_fnptr_glWindowPos4dvMESA(v);
  __glintercept_log(" - glWindowPos4dvMESA(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos4fMESA)(GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glWindowPos4fMESA __glintercept_fnptr_glWindowPos4fMESA;
void __glintercept_glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  __glintercept_fnptr_glWindowPos4fMESA(x, y, z, w);
  __glintercept_log(" - glWindowPos4fMESA(x: %ld, y: %ld, z: %ld, w: %ld)", x, y, z, w);
}

typedef void(*__ctype_glWindowPos4fvMESA)(const GLfloat *);
static __ctype_glWindowPos4fvMESA __glintercept_fnptr_glWindowPos4fvMESA;
void __glintercept_glWindowPos4fvMESA(const GLfloat * v) {
  __glintercept_fnptr_glWindowPos4fvMESA(v);
  __glintercept_log(" - glWindowPos4fvMESA(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos4iMESA)(GLint, GLint, GLint, GLint);
static __ctype_glWindowPos4iMESA __glintercept_fnptr_glWindowPos4iMESA;
void __glintercept_glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w) {
  __glintercept_fnptr_glWindowPos4iMESA(x, y, z, w);
  __glintercept_log(" - glWindowPos4iMESA(x: %ld, y: %ld, z: %ld, w: %ld)", x, y, z, w);
}

typedef void(*__ctype_glWindowPos4ivMESA)(const GLint *);
static __ctype_glWindowPos4ivMESA __glintercept_fnptr_glWindowPos4ivMESA;
void __glintercept_glWindowPos4ivMESA(const GLint * v) {
  __glintercept_fnptr_glWindowPos4ivMESA(v);
  __glintercept_log(" - glWindowPos4ivMESA(v: %ld)", v);
}

typedef void(*__ctype_glWindowPos4sMESA)(GLshort, GLshort, GLshort, GLshort);
static __ctype_glWindowPos4sMESA __glintercept_fnptr_glWindowPos4sMESA;
void __glintercept_glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w) {
  __glintercept_fnptr_glWindowPos4sMESA(x, y, z, w);
  __glintercept_log(" - glWindowPos4sMESA(x: %ld, y: %ld, z: %ld, w: %ld)", x, y, z, w);
}

typedef void(*__ctype_glWindowPos4svMESA)(const GLshort *);
static __ctype_glWindowPos4svMESA __glintercept_fnptr_glWindowPos4svMESA;
void __glintercept_glWindowPos4svMESA(const GLshort * v) {
  __glintercept_fnptr_glWindowPos4svMESA(v);
  __glintercept_log(" - glWindowPos4svMESA(v: %ld)", v);
}

typedef void(*__ctype_glWindowRectanglesEXT)(GLenum, GLsizei, const GLint *);
static __ctype_glWindowRectanglesEXT __glintercept_fnptr_glWindowRectanglesEXT;
void __glintercept_glWindowRectanglesEXT(GLenum mode, GLsizei count, const GLint * box) {
  __glintercept_fnptr_glWindowRectanglesEXT(mode, count, box);
  __glintercept_log(" - glWindowRectanglesEXT(mode: %ld (%s), count: %ld, box: %ld)", mode, __gl_intercept_formatenum(mode), count, box);
}

typedef void(*__ctype_glWriteMaskEXT)(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);
static __ctype_glWriteMaskEXT __glintercept_fnptr_glWriteMaskEXT;
void __glintercept_glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) {
  __glintercept_fnptr_glWriteMaskEXT(res, in, outX, outY, outZ, outW);
  __glintercept_log(" - glWriteMaskEXT(res: %ld, in: %ld, outX: %ld (%s), outY: %ld (%s), outZ: %ld (%s), outW: %ld (%s))", res, in, outX, __gl_intercept_formatenum(outX), outY, __gl_intercept_formatenum(outY), outZ, __gl_intercept_formatenum(outZ), outW, __gl_intercept_formatenum(outW));
}

typedef void(*__ctype_glDrawVkImageNV)(GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
static __ctype_glDrawVkImageNV __glintercept_fnptr_glDrawVkImageNV;
void __glintercept_glDrawVkImageNV(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) {
  __glintercept_fnptr_glDrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
  __glintercept_log(" - glDrawVkImageNV(vkImage: %ld, sampler: %ld, x0: %ld, y0: %ld, x1: %ld, y1: %ld, z: %ld, s0: %ld, t0: %ld, s1: %ld, t1: %ld)", vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
}

typedef GLVULKANPROCNV(*__ctype_glGetVkProcAddrNV)(const GLchar *);
static __ctype_glGetVkProcAddrNV __glintercept_fnptr_glGetVkProcAddrNV;
GLVULKANPROCNV __glintercept_glGetVkProcAddrNV(const GLchar * name) {
  GLVULKANPROCNV __ret = __glintercept_fnptr_glGetVkProcAddrNV(name);
  __glintercept_log(" - glGetVkProcAddrNV(name: %ld) -> %ld", name, __ret);
  return __ret;
}

typedef void(*__ctype_glWaitVkSemaphoreNV)(GLuint64);
static __ctype_glWaitVkSemaphoreNV __glintercept_fnptr_glWaitVkSemaphoreNV;
void __glintercept_glWaitVkSemaphoreNV(GLuint64 vkSemaphore) {
  __glintercept_fnptr_glWaitVkSemaphoreNV(vkSemaphore);
  __glintercept_log(" - glWaitVkSemaphoreNV(vkSemaphore: %ld)", vkSemaphore);
}

typedef void(*__ctype_glSignalVkSemaphoreNV)(GLuint64);
static __ctype_glSignalVkSemaphoreNV __glintercept_fnptr_glSignalVkSemaphoreNV;
void __glintercept_glSignalVkSemaphoreNV(GLuint64 vkSemaphore) {
  __glintercept_fnptr_glSignalVkSemaphoreNV(vkSemaphore);
  __glintercept_log(" - glSignalVkSemaphoreNV(vkSemaphore: %ld)", vkSemaphore);
}

typedef void(*__ctype_glSignalVkFenceNV)(GLuint64);
static __ctype_glSignalVkFenceNV __glintercept_fnptr_glSignalVkFenceNV;
void __glintercept_glSignalVkFenceNV(GLuint64 vkFence) {
  __glintercept_fnptr_glSignalVkFenceNV(vkFence);
  __glintercept_log(" - glSignalVkFenceNV(vkFence: %ld)", vkFence);
}

typedef void(*__ctype_glFramebufferParameteriMESA)(GLenum, GLenum, GLint);
static __ctype_glFramebufferParameteriMESA __glintercept_fnptr_glFramebufferParameteriMESA;
void __glintercept_glFramebufferParameteriMESA(GLenum target, GLenum pname, GLint param) {
  __glintercept_fnptr_glFramebufferParameteriMESA(target, pname, param);
  __glintercept_log(" - glFramebufferParameteriMESA(target: %ld (%s), pname: %ld (%s), param: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), param);
}

typedef void(*__ctype_glGetFramebufferParameterivMESA)(GLenum, GLenum, GLint *);
static __ctype_glGetFramebufferParameterivMESA __glintercept_fnptr_glGetFramebufferParameterivMESA;
void __glintercept_glGetFramebufferParameterivMESA(GLenum target, GLenum pname, GLint * params) {
  __glintercept_fnptr_glGetFramebufferParameterivMESA(target, pname, params);
  __glintercept_log(" - glGetFramebufferParameterivMESA(target: %ld (%s), pname: %ld (%s), params: %ld)", target, __gl_intercept_formatenum(target), pname, __gl_intercept_formatenum(pname), params);
}


void *glintercept_getProcAddress(const char* name) {
  if (strcmp(name, "glAccum") == 0) {
    if (__glintercept_fnptr_glAccum == NULL) {
      __glintercept_fnptr_glAccum = (__ctype_glAccum) eglGetProcAddr("glAccum");
    }
    if (__glintercept_fnptr_glAccum == NULL) return NULL;
    return (void*) __glintercept_glAccum;
  }
  if (strcmp(name, "glAccumxOES") == 0) {
    if (__glintercept_fnptr_glAccumxOES == NULL) {
      __glintercept_fnptr_glAccumxOES = (__ctype_glAccumxOES) eglGetProcAddr("glAccumxOES");
    }
    if (__glintercept_fnptr_glAccumxOES == NULL) return NULL;
    return (void*) __glintercept_glAccumxOES;
  }
  if (strcmp(name, "glActiveProgramEXT") == 0) {
    if (__glintercept_fnptr_glActiveProgramEXT == NULL) {
      __glintercept_fnptr_glActiveProgramEXT = (__ctype_glActiveProgramEXT) eglGetProcAddr("glActiveProgramEXT");
    }
    if (__glintercept_fnptr_glActiveProgramEXT == NULL) return NULL;
    return (void*) __glintercept_glActiveProgramEXT;
  }
  if (strcmp(name, "glActiveShaderProgram") == 0) {
    if (__glintercept_fnptr_glActiveShaderProgram == NULL) {
      __glintercept_fnptr_glActiveShaderProgram = (__ctype_glActiveShaderProgram) eglGetProcAddr("glActiveShaderProgram");
    }
    if (__glintercept_fnptr_glActiveShaderProgram == NULL) return NULL;
    return (void*) __glintercept_glActiveShaderProgram;
  }
  if (strcmp(name, "glActiveShaderProgramEXT") == 0) {
    if (__glintercept_fnptr_glActiveShaderProgramEXT == NULL) {
      __glintercept_fnptr_glActiveShaderProgramEXT = (__ctype_glActiveShaderProgramEXT) eglGetProcAddr("glActiveShaderProgramEXT");
    }
    if (__glintercept_fnptr_glActiveShaderProgramEXT == NULL) return NULL;
    return (void*) __glintercept_glActiveShaderProgramEXT;
  }
  if (strcmp(name, "glActiveStencilFaceEXT") == 0) {
    if (__glintercept_fnptr_glActiveStencilFaceEXT == NULL) {
      __glintercept_fnptr_glActiveStencilFaceEXT = (__ctype_glActiveStencilFaceEXT) eglGetProcAddr("glActiveStencilFaceEXT");
    }
    if (__glintercept_fnptr_glActiveStencilFaceEXT == NULL) return NULL;
    return (void*) __glintercept_glActiveStencilFaceEXT;
  }
  if (strcmp(name, "glActiveTexture") == 0) {
    if (__glintercept_fnptr_glActiveTexture == NULL) {
      __glintercept_fnptr_glActiveTexture = (__ctype_glActiveTexture) eglGetProcAddr("glActiveTexture");
    }
    if (__glintercept_fnptr_glActiveTexture == NULL) return NULL;
    return (void*) __glintercept_glActiveTexture;
  }
  if (strcmp(name, "glActiveTextureARB") == 0) {
    if (__glintercept_fnptr_glActiveTextureARB == NULL) {
      __glintercept_fnptr_glActiveTextureARB = (__ctype_glActiveTextureARB) eglGetProcAddr("glActiveTextureARB");
    }
    if (__glintercept_fnptr_glActiveTextureARB == NULL) return NULL;
    return (void*) __glintercept_glActiveTextureARB;
  }
  if (strcmp(name, "glActiveVaryingNV") == 0) {
    if (__glintercept_fnptr_glActiveVaryingNV == NULL) {
      __glintercept_fnptr_glActiveVaryingNV = (__ctype_glActiveVaryingNV) eglGetProcAddr("glActiveVaryingNV");
    }
    if (__glintercept_fnptr_glActiveVaryingNV == NULL) return NULL;
    return (void*) __glintercept_glActiveVaryingNV;
  }
  if (strcmp(name, "glAlphaFragmentOp1ATI") == 0) {
    if (__glintercept_fnptr_glAlphaFragmentOp1ATI == NULL) {
      __glintercept_fnptr_glAlphaFragmentOp1ATI = (__ctype_glAlphaFragmentOp1ATI) eglGetProcAddr("glAlphaFragmentOp1ATI");
    }
    if (__glintercept_fnptr_glAlphaFragmentOp1ATI == NULL) return NULL;
    return (void*) __glintercept_glAlphaFragmentOp1ATI;
  }
  if (strcmp(name, "glAlphaFragmentOp2ATI") == 0) {
    if (__glintercept_fnptr_glAlphaFragmentOp2ATI == NULL) {
      __glintercept_fnptr_glAlphaFragmentOp2ATI = (__ctype_glAlphaFragmentOp2ATI) eglGetProcAddr("glAlphaFragmentOp2ATI");
    }
    if (__glintercept_fnptr_glAlphaFragmentOp2ATI == NULL) return NULL;
    return (void*) __glintercept_glAlphaFragmentOp2ATI;
  }
  if (strcmp(name, "glAlphaFragmentOp3ATI") == 0) {
    if (__glintercept_fnptr_glAlphaFragmentOp3ATI == NULL) {
      __glintercept_fnptr_glAlphaFragmentOp3ATI = (__ctype_glAlphaFragmentOp3ATI) eglGetProcAddr("glAlphaFragmentOp3ATI");
    }
    if (__glintercept_fnptr_glAlphaFragmentOp3ATI == NULL) return NULL;
    return (void*) __glintercept_glAlphaFragmentOp3ATI;
  }
  if (strcmp(name, "glAlphaFunc") == 0) {
    if (__glintercept_fnptr_glAlphaFunc == NULL) {
      __glintercept_fnptr_glAlphaFunc = (__ctype_glAlphaFunc) eglGetProcAddr("glAlphaFunc");
    }
    if (__glintercept_fnptr_glAlphaFunc == NULL) return NULL;
    return (void*) __glintercept_glAlphaFunc;
  }
  if (strcmp(name, "glAlphaFuncQCOM") == 0) {
    if (__glintercept_fnptr_glAlphaFuncQCOM == NULL) {
      __glintercept_fnptr_glAlphaFuncQCOM = (__ctype_glAlphaFuncQCOM) eglGetProcAddr("glAlphaFuncQCOM");
    }
    if (__glintercept_fnptr_glAlphaFuncQCOM == NULL) return NULL;
    return (void*) __glintercept_glAlphaFuncQCOM;
  }
  if (strcmp(name, "glAlphaFuncx") == 0) {
    if (__glintercept_fnptr_glAlphaFuncx == NULL) {
      __glintercept_fnptr_glAlphaFuncx = (__ctype_glAlphaFuncx) eglGetProcAddr("glAlphaFuncx");
    }
    if (__glintercept_fnptr_glAlphaFuncx == NULL) return NULL;
    return (void*) __glintercept_glAlphaFuncx;
  }
  if (strcmp(name, "glAlphaFuncxOES") == 0) {
    if (__glintercept_fnptr_glAlphaFuncxOES == NULL) {
      __glintercept_fnptr_glAlphaFuncxOES = (__ctype_glAlphaFuncxOES) eglGetProcAddr("glAlphaFuncxOES");
    }
    if (__glintercept_fnptr_glAlphaFuncxOES == NULL) return NULL;
    return (void*) __glintercept_glAlphaFuncxOES;
  }
  if (strcmp(name, "glAlphaToCoverageDitherControlNV") == 0) {
    if (__glintercept_fnptr_glAlphaToCoverageDitherControlNV == NULL) {
      __glintercept_fnptr_glAlphaToCoverageDitherControlNV = (__ctype_glAlphaToCoverageDitherControlNV) eglGetProcAddr("glAlphaToCoverageDitherControlNV");
    }
    if (__glintercept_fnptr_glAlphaToCoverageDitherControlNV == NULL) return NULL;
    return (void*) __glintercept_glAlphaToCoverageDitherControlNV;
  }
  if (strcmp(name, "glApplyFramebufferAttachmentCMAAINTEL") == 0) {
    if (__glintercept_fnptr_glApplyFramebufferAttachmentCMAAINTEL == NULL) {
      __glintercept_fnptr_glApplyFramebufferAttachmentCMAAINTEL = (__ctype_glApplyFramebufferAttachmentCMAAINTEL) eglGetProcAddr("glApplyFramebufferAttachmentCMAAINTEL");
    }
    if (__glintercept_fnptr_glApplyFramebufferAttachmentCMAAINTEL == NULL) return NULL;
    return (void*) __glintercept_glApplyFramebufferAttachmentCMAAINTEL;
  }
  if (strcmp(name, "glApplyTextureEXT") == 0) {
    if (__glintercept_fnptr_glApplyTextureEXT == NULL) {
      __glintercept_fnptr_glApplyTextureEXT = (__ctype_glApplyTextureEXT) eglGetProcAddr("glApplyTextureEXT");
    }
    if (__glintercept_fnptr_glApplyTextureEXT == NULL) return NULL;
    return (void*) __glintercept_glApplyTextureEXT;
  }
  if (strcmp(name, "glAcquireKeyedMutexWin32EXT") == 0) {
    if (__glintercept_fnptr_glAcquireKeyedMutexWin32EXT == NULL) {
      __glintercept_fnptr_glAcquireKeyedMutexWin32EXT = (__ctype_glAcquireKeyedMutexWin32EXT) eglGetProcAddr("glAcquireKeyedMutexWin32EXT");
    }
    if (__glintercept_fnptr_glAcquireKeyedMutexWin32EXT == NULL) return NULL;
    return (void*) __glintercept_glAcquireKeyedMutexWin32EXT;
  }
  if (strcmp(name, "glAreProgramsResidentNV") == 0) {
    if (__glintercept_fnptr_glAreProgramsResidentNV == NULL) {
      __glintercept_fnptr_glAreProgramsResidentNV = (__ctype_glAreProgramsResidentNV) eglGetProcAddr("glAreProgramsResidentNV");
    }
    if (__glintercept_fnptr_glAreProgramsResidentNV == NULL) return NULL;
    return (void*) __glintercept_glAreProgramsResidentNV;
  }
  if (strcmp(name, "glAreTexturesResident") == 0) {
    if (__glintercept_fnptr_glAreTexturesResident == NULL) {
      __glintercept_fnptr_glAreTexturesResident = (__ctype_glAreTexturesResident) eglGetProcAddr("glAreTexturesResident");
    }
    if (__glintercept_fnptr_glAreTexturesResident == NULL) return NULL;
    return (void*) __glintercept_glAreTexturesResident;
  }
  if (strcmp(name, "glAreTexturesResidentEXT") == 0) {
    if (__glintercept_fnptr_glAreTexturesResidentEXT == NULL) {
      __glintercept_fnptr_glAreTexturesResidentEXT = (__ctype_glAreTexturesResidentEXT) eglGetProcAddr("glAreTexturesResidentEXT");
    }
    if (__glintercept_fnptr_glAreTexturesResidentEXT == NULL) return NULL;
    return (void*) __glintercept_glAreTexturesResidentEXT;
  }
  if (strcmp(name, "glArrayElement") == 0) {
    if (__glintercept_fnptr_glArrayElement == NULL) {
      __glintercept_fnptr_glArrayElement = (__ctype_glArrayElement) eglGetProcAddr("glArrayElement");
    }
    if (__glintercept_fnptr_glArrayElement == NULL) return NULL;
    return (void*) __glintercept_glArrayElement;
  }
  if (strcmp(name, "glArrayElementEXT") == 0) {
    if (__glintercept_fnptr_glArrayElementEXT == NULL) {
      __glintercept_fnptr_glArrayElementEXT = (__ctype_glArrayElementEXT) eglGetProcAddr("glArrayElementEXT");
    }
    if (__glintercept_fnptr_glArrayElementEXT == NULL) return NULL;
    return (void*) __glintercept_glArrayElementEXT;
  }
  if (strcmp(name, "glArrayObjectATI") == 0) {
    if (__glintercept_fnptr_glArrayObjectATI == NULL) {
      __glintercept_fnptr_glArrayObjectATI = (__ctype_glArrayObjectATI) eglGetProcAddr("glArrayObjectATI");
    }
    if (__glintercept_fnptr_glArrayObjectATI == NULL) return NULL;
    return (void*) __glintercept_glArrayObjectATI;
  }
  if (strcmp(name, "glAsyncCopyBufferSubDataNVX") == 0) {
    if (__glintercept_fnptr_glAsyncCopyBufferSubDataNVX == NULL) {
      __glintercept_fnptr_glAsyncCopyBufferSubDataNVX = (__ctype_glAsyncCopyBufferSubDataNVX) eglGetProcAddr("glAsyncCopyBufferSubDataNVX");
    }
    if (__glintercept_fnptr_glAsyncCopyBufferSubDataNVX == NULL) return NULL;
    return (void*) __glintercept_glAsyncCopyBufferSubDataNVX;
  }
  if (strcmp(name, "glAsyncCopyImageSubDataNVX") == 0) {
    if (__glintercept_fnptr_glAsyncCopyImageSubDataNVX == NULL) {
      __glintercept_fnptr_glAsyncCopyImageSubDataNVX = (__ctype_glAsyncCopyImageSubDataNVX) eglGetProcAddr("glAsyncCopyImageSubDataNVX");
    }
    if (__glintercept_fnptr_glAsyncCopyImageSubDataNVX == NULL) return NULL;
    return (void*) __glintercept_glAsyncCopyImageSubDataNVX;
  }
  if (strcmp(name, "glAsyncMarkerSGIX") == 0) {
    if (__glintercept_fnptr_glAsyncMarkerSGIX == NULL) {
      __glintercept_fnptr_glAsyncMarkerSGIX = (__ctype_glAsyncMarkerSGIX) eglGetProcAddr("glAsyncMarkerSGIX");
    }
    if (__glintercept_fnptr_glAsyncMarkerSGIX == NULL) return NULL;
    return (void*) __glintercept_glAsyncMarkerSGIX;
  }
  if (strcmp(name, "glAttachObjectARB") == 0) {
    if (__glintercept_fnptr_glAttachObjectARB == NULL) {
      __glintercept_fnptr_glAttachObjectARB = (__ctype_glAttachObjectARB) eglGetProcAddr("glAttachObjectARB");
    }
    if (__glintercept_fnptr_glAttachObjectARB == NULL) return NULL;
    return (void*) __glintercept_glAttachObjectARB;
  }
  if (strcmp(name, "glAttachShader") == 0) {
    if (__glintercept_fnptr_glAttachShader == NULL) {
      __glintercept_fnptr_glAttachShader = (__ctype_glAttachShader) eglGetProcAddr("glAttachShader");
    }
    if (__glintercept_fnptr_glAttachShader == NULL) return NULL;
    return (void*) __glintercept_glAttachShader;
  }
  if (strcmp(name, "glBegin") == 0) {
    if (__glintercept_fnptr_glBegin == NULL) {
      __glintercept_fnptr_glBegin = (__ctype_glBegin) eglGetProcAddr("glBegin");
    }
    if (__glintercept_fnptr_glBegin == NULL) return NULL;
    return (void*) __glintercept_glBegin;
  }
  if (strcmp(name, "glBeginConditionalRender") == 0) {
    if (__glintercept_fnptr_glBeginConditionalRender == NULL) {
      __glintercept_fnptr_glBeginConditionalRender = (__ctype_glBeginConditionalRender) eglGetProcAddr("glBeginConditionalRender");
    }
    if (__glintercept_fnptr_glBeginConditionalRender == NULL) return NULL;
    return (void*) __glintercept_glBeginConditionalRender;
  }
  if (strcmp(name, "glBeginConditionalRenderNV") == 0) {
    if (__glintercept_fnptr_glBeginConditionalRenderNV == NULL) {
      __glintercept_fnptr_glBeginConditionalRenderNV = (__ctype_glBeginConditionalRenderNV) eglGetProcAddr("glBeginConditionalRenderNV");
    }
    if (__glintercept_fnptr_glBeginConditionalRenderNV == NULL) return NULL;
    return (void*) __glintercept_glBeginConditionalRenderNV;
  }
  if (strcmp(name, "glBeginConditionalRenderNVX") == 0) {
    if (__glintercept_fnptr_glBeginConditionalRenderNVX == NULL) {
      __glintercept_fnptr_glBeginConditionalRenderNVX = (__ctype_glBeginConditionalRenderNVX) eglGetProcAddr("glBeginConditionalRenderNVX");
    }
    if (__glintercept_fnptr_glBeginConditionalRenderNVX == NULL) return NULL;
    return (void*) __glintercept_glBeginConditionalRenderNVX;
  }
  if (strcmp(name, "glBeginFragmentShaderATI") == 0) {
    if (__glintercept_fnptr_glBeginFragmentShaderATI == NULL) {
      __glintercept_fnptr_glBeginFragmentShaderATI = (__ctype_glBeginFragmentShaderATI) eglGetProcAddr("glBeginFragmentShaderATI");
    }
    if (__glintercept_fnptr_glBeginFragmentShaderATI == NULL) return NULL;
    return (void*) __glintercept_glBeginFragmentShaderATI;
  }
  if (strcmp(name, "glBeginOcclusionQueryNV") == 0) {
    if (__glintercept_fnptr_glBeginOcclusionQueryNV == NULL) {
      __glintercept_fnptr_glBeginOcclusionQueryNV = (__ctype_glBeginOcclusionQueryNV) eglGetProcAddr("glBeginOcclusionQueryNV");
    }
    if (__glintercept_fnptr_glBeginOcclusionQueryNV == NULL) return NULL;
    return (void*) __glintercept_glBeginOcclusionQueryNV;
  }
  if (strcmp(name, "glBeginPerfMonitorAMD") == 0) {
    if (__glintercept_fnptr_glBeginPerfMonitorAMD == NULL) {
      __glintercept_fnptr_glBeginPerfMonitorAMD = (__ctype_glBeginPerfMonitorAMD) eglGetProcAddr("glBeginPerfMonitorAMD");
    }
    if (__glintercept_fnptr_glBeginPerfMonitorAMD == NULL) return NULL;
    return (void*) __glintercept_glBeginPerfMonitorAMD;
  }
  if (strcmp(name, "glBeginPerfQueryINTEL") == 0) {
    if (__glintercept_fnptr_glBeginPerfQueryINTEL == NULL) {
      __glintercept_fnptr_glBeginPerfQueryINTEL = (__ctype_glBeginPerfQueryINTEL) eglGetProcAddr("glBeginPerfQueryINTEL");
    }
    if (__glintercept_fnptr_glBeginPerfQueryINTEL == NULL) return NULL;
    return (void*) __glintercept_glBeginPerfQueryINTEL;
  }
  if (strcmp(name, "glBeginQuery") == 0) {
    if (__glintercept_fnptr_glBeginQuery == NULL) {
      __glintercept_fnptr_glBeginQuery = (__ctype_glBeginQuery) eglGetProcAddr("glBeginQuery");
    }
    if (__glintercept_fnptr_glBeginQuery == NULL) return NULL;
    return (void*) __glintercept_glBeginQuery;
  }
  if (strcmp(name, "glBeginQueryARB") == 0) {
    if (__glintercept_fnptr_glBeginQueryARB == NULL) {
      __glintercept_fnptr_glBeginQueryARB = (__ctype_glBeginQueryARB) eglGetProcAddr("glBeginQueryARB");
    }
    if (__glintercept_fnptr_glBeginQueryARB == NULL) return NULL;
    return (void*) __glintercept_glBeginQueryARB;
  }
  if (strcmp(name, "glBeginQueryEXT") == 0) {
    if (__glintercept_fnptr_glBeginQueryEXT == NULL) {
      __glintercept_fnptr_glBeginQueryEXT = (__ctype_glBeginQueryEXT) eglGetProcAddr("glBeginQueryEXT");
    }
    if (__glintercept_fnptr_glBeginQueryEXT == NULL) return NULL;
    return (void*) __glintercept_glBeginQueryEXT;
  }
  if (strcmp(name, "glBeginQueryIndexed") == 0) {
    if (__glintercept_fnptr_glBeginQueryIndexed == NULL) {
      __glintercept_fnptr_glBeginQueryIndexed = (__ctype_glBeginQueryIndexed) eglGetProcAddr("glBeginQueryIndexed");
    }
    if (__glintercept_fnptr_glBeginQueryIndexed == NULL) return NULL;
    return (void*) __glintercept_glBeginQueryIndexed;
  }
  if (strcmp(name, "glBeginTransformFeedback") == 0) {
    if (__glintercept_fnptr_glBeginTransformFeedback == NULL) {
      __glintercept_fnptr_glBeginTransformFeedback = (__ctype_glBeginTransformFeedback) eglGetProcAddr("glBeginTransformFeedback");
    }
    if (__glintercept_fnptr_glBeginTransformFeedback == NULL) return NULL;
    return (void*) __glintercept_glBeginTransformFeedback;
  }
  if (strcmp(name, "glBeginTransformFeedbackEXT") == 0) {
    if (__glintercept_fnptr_glBeginTransformFeedbackEXT == NULL) {
      __glintercept_fnptr_glBeginTransformFeedbackEXT = (__ctype_glBeginTransformFeedbackEXT) eglGetProcAddr("glBeginTransformFeedbackEXT");
    }
    if (__glintercept_fnptr_glBeginTransformFeedbackEXT == NULL) return NULL;
    return (void*) __glintercept_glBeginTransformFeedbackEXT;
  }
  if (strcmp(name, "glBeginTransformFeedbackNV") == 0) {
    if (__glintercept_fnptr_glBeginTransformFeedbackNV == NULL) {
      __glintercept_fnptr_glBeginTransformFeedbackNV = (__ctype_glBeginTransformFeedbackNV) eglGetProcAddr("glBeginTransformFeedbackNV");
    }
    if (__glintercept_fnptr_glBeginTransformFeedbackNV == NULL) return NULL;
    return (void*) __glintercept_glBeginTransformFeedbackNV;
  }
  if (strcmp(name, "glBeginVertexShaderEXT") == 0) {
    if (__glintercept_fnptr_glBeginVertexShaderEXT == NULL) {
      __glintercept_fnptr_glBeginVertexShaderEXT = (__ctype_glBeginVertexShaderEXT) eglGetProcAddr("glBeginVertexShaderEXT");
    }
    if (__glintercept_fnptr_glBeginVertexShaderEXT == NULL) return NULL;
    return (void*) __glintercept_glBeginVertexShaderEXT;
  }
  if (strcmp(name, "glBeginVideoCaptureNV") == 0) {
    if (__glintercept_fnptr_glBeginVideoCaptureNV == NULL) {
      __glintercept_fnptr_glBeginVideoCaptureNV = (__ctype_glBeginVideoCaptureNV) eglGetProcAddr("glBeginVideoCaptureNV");
    }
    if (__glintercept_fnptr_glBeginVideoCaptureNV == NULL) return NULL;
    return (void*) __glintercept_glBeginVideoCaptureNV;
  }
  if (strcmp(name, "glBindAttribLocation") == 0) {
    if (__glintercept_fnptr_glBindAttribLocation == NULL) {
      __glintercept_fnptr_glBindAttribLocation = (__ctype_glBindAttribLocation) eglGetProcAddr("glBindAttribLocation");
    }
    if (__glintercept_fnptr_glBindAttribLocation == NULL) return NULL;
    return (void*) __glintercept_glBindAttribLocation;
  }
  if (strcmp(name, "glBindAttribLocationARB") == 0) {
    if (__glintercept_fnptr_glBindAttribLocationARB == NULL) {
      __glintercept_fnptr_glBindAttribLocationARB = (__ctype_glBindAttribLocationARB) eglGetProcAddr("glBindAttribLocationARB");
    }
    if (__glintercept_fnptr_glBindAttribLocationARB == NULL) return NULL;
    return (void*) __glintercept_glBindAttribLocationARB;
  }
  if (strcmp(name, "glBindBuffer") == 0) {
    if (__glintercept_fnptr_glBindBuffer == NULL) {
      __glintercept_fnptr_glBindBuffer = (__ctype_glBindBuffer) eglGetProcAddr("glBindBuffer");
    }
    if (__glintercept_fnptr_glBindBuffer == NULL) return NULL;
    return (void*) __glintercept_glBindBuffer;
  }
  if (strcmp(name, "glBindBufferARB") == 0) {
    if (__glintercept_fnptr_glBindBufferARB == NULL) {
      __glintercept_fnptr_glBindBufferARB = (__ctype_glBindBufferARB) eglGetProcAddr("glBindBufferARB");
    }
    if (__glintercept_fnptr_glBindBufferARB == NULL) return NULL;
    return (void*) __glintercept_glBindBufferARB;
  }
  if (strcmp(name, "glBindBufferBase") == 0) {
    if (__glintercept_fnptr_glBindBufferBase == NULL) {
      __glintercept_fnptr_glBindBufferBase = (__ctype_glBindBufferBase) eglGetProcAddr("glBindBufferBase");
    }
    if (__glintercept_fnptr_glBindBufferBase == NULL) return NULL;
    return (void*) __glintercept_glBindBufferBase;
  }
  if (strcmp(name, "glBindBufferBaseEXT") == 0) {
    if (__glintercept_fnptr_glBindBufferBaseEXT == NULL) {
      __glintercept_fnptr_glBindBufferBaseEXT = (__ctype_glBindBufferBaseEXT) eglGetProcAddr("glBindBufferBaseEXT");
    }
    if (__glintercept_fnptr_glBindBufferBaseEXT == NULL) return NULL;
    return (void*) __glintercept_glBindBufferBaseEXT;
  }
  if (strcmp(name, "glBindBufferBaseNV") == 0) {
    if (__glintercept_fnptr_glBindBufferBaseNV == NULL) {
      __glintercept_fnptr_glBindBufferBaseNV = (__ctype_glBindBufferBaseNV) eglGetProcAddr("glBindBufferBaseNV");
    }
    if (__glintercept_fnptr_glBindBufferBaseNV == NULL) return NULL;
    return (void*) __glintercept_glBindBufferBaseNV;
  }
  if (strcmp(name, "glBindBufferOffsetEXT") == 0) {
    if (__glintercept_fnptr_glBindBufferOffsetEXT == NULL) {
      __glintercept_fnptr_glBindBufferOffsetEXT = (__ctype_glBindBufferOffsetEXT) eglGetProcAddr("glBindBufferOffsetEXT");
    }
    if (__glintercept_fnptr_glBindBufferOffsetEXT == NULL) return NULL;
    return (void*) __glintercept_glBindBufferOffsetEXT;
  }
  if (strcmp(name, "glBindBufferOffsetNV") == 0) {
    if (__glintercept_fnptr_glBindBufferOffsetNV == NULL) {
      __glintercept_fnptr_glBindBufferOffsetNV = (__ctype_glBindBufferOffsetNV) eglGetProcAddr("glBindBufferOffsetNV");
    }
    if (__glintercept_fnptr_glBindBufferOffsetNV == NULL) return NULL;
    return (void*) __glintercept_glBindBufferOffsetNV;
  }
  if (strcmp(name, "glBindBufferRange") == 0) {
    if (__glintercept_fnptr_glBindBufferRange == NULL) {
      __glintercept_fnptr_glBindBufferRange = (__ctype_glBindBufferRange) eglGetProcAddr("glBindBufferRange");
    }
    if (__glintercept_fnptr_glBindBufferRange == NULL) return NULL;
    return (void*) __glintercept_glBindBufferRange;
  }
  if (strcmp(name, "glBindBufferRangeEXT") == 0) {
    if (__glintercept_fnptr_glBindBufferRangeEXT == NULL) {
      __glintercept_fnptr_glBindBufferRangeEXT = (__ctype_glBindBufferRangeEXT) eglGetProcAddr("glBindBufferRangeEXT");
    }
    if (__glintercept_fnptr_glBindBufferRangeEXT == NULL) return NULL;
    return (void*) __glintercept_glBindBufferRangeEXT;
  }
  if (strcmp(name, "glBindBufferRangeNV") == 0) {
    if (__glintercept_fnptr_glBindBufferRangeNV == NULL) {
      __glintercept_fnptr_glBindBufferRangeNV = (__ctype_glBindBufferRangeNV) eglGetProcAddr("glBindBufferRangeNV");
    }
    if (__glintercept_fnptr_glBindBufferRangeNV == NULL) return NULL;
    return (void*) __glintercept_glBindBufferRangeNV;
  }
  if (strcmp(name, "glBindBuffersBase") == 0) {
    if (__glintercept_fnptr_glBindBuffersBase == NULL) {
      __glintercept_fnptr_glBindBuffersBase = (__ctype_glBindBuffersBase) eglGetProcAddr("glBindBuffersBase");
    }
    if (__glintercept_fnptr_glBindBuffersBase == NULL) return NULL;
    return (void*) __glintercept_glBindBuffersBase;
  }
  if (strcmp(name, "glBindBuffersRange") == 0) {
    if (__glintercept_fnptr_glBindBuffersRange == NULL) {
      __glintercept_fnptr_glBindBuffersRange = (__ctype_glBindBuffersRange) eglGetProcAddr("glBindBuffersRange");
    }
    if (__glintercept_fnptr_glBindBuffersRange == NULL) return NULL;
    return (void*) __glintercept_glBindBuffersRange;
  }
  if (strcmp(name, "glBindFragDataLocation") == 0) {
    if (__glintercept_fnptr_glBindFragDataLocation == NULL) {
      __glintercept_fnptr_glBindFragDataLocation = (__ctype_glBindFragDataLocation) eglGetProcAddr("glBindFragDataLocation");
    }
    if (__glintercept_fnptr_glBindFragDataLocation == NULL) return NULL;
    return (void*) __glintercept_glBindFragDataLocation;
  }
  if (strcmp(name, "glBindFragDataLocationEXT") == 0) {
    if (__glintercept_fnptr_glBindFragDataLocationEXT == NULL) {
      __glintercept_fnptr_glBindFragDataLocationEXT = (__ctype_glBindFragDataLocationEXT) eglGetProcAddr("glBindFragDataLocationEXT");
    }
    if (__glintercept_fnptr_glBindFragDataLocationEXT == NULL) return NULL;
    return (void*) __glintercept_glBindFragDataLocationEXT;
  }
  if (strcmp(name, "glBindFragDataLocationIndexed") == 0) {
    if (__glintercept_fnptr_glBindFragDataLocationIndexed == NULL) {
      __glintercept_fnptr_glBindFragDataLocationIndexed = (__ctype_glBindFragDataLocationIndexed) eglGetProcAddr("glBindFragDataLocationIndexed");
    }
    if (__glintercept_fnptr_glBindFragDataLocationIndexed == NULL) return NULL;
    return (void*) __glintercept_glBindFragDataLocationIndexed;
  }
  if (strcmp(name, "glBindFragDataLocationIndexedEXT") == 0) {
    if (__glintercept_fnptr_glBindFragDataLocationIndexedEXT == NULL) {
      __glintercept_fnptr_glBindFragDataLocationIndexedEXT = (__ctype_glBindFragDataLocationIndexedEXT) eglGetProcAddr("glBindFragDataLocationIndexedEXT");
    }
    if (__glintercept_fnptr_glBindFragDataLocationIndexedEXT == NULL) return NULL;
    return (void*) __glintercept_glBindFragDataLocationIndexedEXT;
  }
  if (strcmp(name, "glBindFragmentShaderATI") == 0) {
    if (__glintercept_fnptr_glBindFragmentShaderATI == NULL) {
      __glintercept_fnptr_glBindFragmentShaderATI = (__ctype_glBindFragmentShaderATI) eglGetProcAddr("glBindFragmentShaderATI");
    }
    if (__glintercept_fnptr_glBindFragmentShaderATI == NULL) return NULL;
    return (void*) __glintercept_glBindFragmentShaderATI;
  }
  if (strcmp(name, "glBindFramebuffer") == 0) {
    if (__glintercept_fnptr_glBindFramebuffer == NULL) {
      __glintercept_fnptr_glBindFramebuffer = (__ctype_glBindFramebuffer) eglGetProcAddr("glBindFramebuffer");
    }
    if (__glintercept_fnptr_glBindFramebuffer == NULL) return NULL;
    return (void*) __glintercept_glBindFramebuffer;
  }
  if (strcmp(name, "glBindFramebufferEXT") == 0) {
    if (__glintercept_fnptr_glBindFramebufferEXT == NULL) {
      __glintercept_fnptr_glBindFramebufferEXT = (__ctype_glBindFramebufferEXT) eglGetProcAddr("glBindFramebufferEXT");
    }
    if (__glintercept_fnptr_glBindFramebufferEXT == NULL) return NULL;
    return (void*) __glintercept_glBindFramebufferEXT;
  }
  if (strcmp(name, "glBindFramebufferOES") == 0) {
    if (__glintercept_fnptr_glBindFramebufferOES == NULL) {
      __glintercept_fnptr_glBindFramebufferOES = (__ctype_glBindFramebufferOES) eglGetProcAddr("glBindFramebufferOES");
    }
    if (__glintercept_fnptr_glBindFramebufferOES == NULL) return NULL;
    return (void*) __glintercept_glBindFramebufferOES;
  }
  if (strcmp(name, "glBindImageTexture") == 0) {
    if (__glintercept_fnptr_glBindImageTexture == NULL) {
      __glintercept_fnptr_glBindImageTexture = (__ctype_glBindImageTexture) eglGetProcAddr("glBindImageTexture");
    }
    if (__glintercept_fnptr_glBindImageTexture == NULL) return NULL;
    return (void*) __glintercept_glBindImageTexture;
  }
  if (strcmp(name, "glBindImageTextureEXT") == 0) {
    if (__glintercept_fnptr_glBindImageTextureEXT == NULL) {
      __glintercept_fnptr_glBindImageTextureEXT = (__ctype_glBindImageTextureEXT) eglGetProcAddr("glBindImageTextureEXT");
    }
    if (__glintercept_fnptr_glBindImageTextureEXT == NULL) return NULL;
    return (void*) __glintercept_glBindImageTextureEXT;
  }
  if (strcmp(name, "glBindImageTextures") == 0) {
    if (__glintercept_fnptr_glBindImageTextures == NULL) {
      __glintercept_fnptr_glBindImageTextures = (__ctype_glBindImageTextures) eglGetProcAddr("glBindImageTextures");
    }
    if (__glintercept_fnptr_glBindImageTextures == NULL) return NULL;
    return (void*) __glintercept_glBindImageTextures;
  }
  if (strcmp(name, "glBindLightParameterEXT") == 0) {
    if (__glintercept_fnptr_glBindLightParameterEXT == NULL) {
      __glintercept_fnptr_glBindLightParameterEXT = (__ctype_glBindLightParameterEXT) eglGetProcAddr("glBindLightParameterEXT");
    }
    if (__glintercept_fnptr_glBindLightParameterEXT == NULL) return NULL;
    return (void*) __glintercept_glBindLightParameterEXT;
  }
  if (strcmp(name, "glBindMaterialParameterEXT") == 0) {
    if (__glintercept_fnptr_glBindMaterialParameterEXT == NULL) {
      __glintercept_fnptr_glBindMaterialParameterEXT = (__ctype_glBindMaterialParameterEXT) eglGetProcAddr("glBindMaterialParameterEXT");
    }
    if (__glintercept_fnptr_glBindMaterialParameterEXT == NULL) return NULL;
    return (void*) __glintercept_glBindMaterialParameterEXT;
  }
  if (strcmp(name, "glBindMultiTextureEXT") == 0) {
    if (__glintercept_fnptr_glBindMultiTextureEXT == NULL) {
      __glintercept_fnptr_glBindMultiTextureEXT = (__ctype_glBindMultiTextureEXT) eglGetProcAddr("glBindMultiTextureEXT");
    }
    if (__glintercept_fnptr_glBindMultiTextureEXT == NULL) return NULL;
    return (void*) __glintercept_glBindMultiTextureEXT;
  }
  if (strcmp(name, "glBindParameterEXT") == 0) {
    if (__glintercept_fnptr_glBindParameterEXT == NULL) {
      __glintercept_fnptr_glBindParameterEXT = (__ctype_glBindParameterEXT) eglGetProcAddr("glBindParameterEXT");
    }
    if (__glintercept_fnptr_glBindParameterEXT == NULL) return NULL;
    return (void*) __glintercept_glBindParameterEXT;
  }
  if (strcmp(name, "glBindProgramARB") == 0) {
    if (__glintercept_fnptr_glBindProgramARB == NULL) {
      __glintercept_fnptr_glBindProgramARB = (__ctype_glBindProgramARB) eglGetProcAddr("glBindProgramARB");
    }
    if (__glintercept_fnptr_glBindProgramARB == NULL) return NULL;
    return (void*) __glintercept_glBindProgramARB;
  }
  if (strcmp(name, "glBindProgramNV") == 0) {
    if (__glintercept_fnptr_glBindProgramNV == NULL) {
      __glintercept_fnptr_glBindProgramNV = (__ctype_glBindProgramNV) eglGetProcAddr("glBindProgramNV");
    }
    if (__glintercept_fnptr_glBindProgramNV == NULL) return NULL;
    return (void*) __glintercept_glBindProgramNV;
  }
  if (strcmp(name, "glBindProgramPipeline") == 0) {
    if (__glintercept_fnptr_glBindProgramPipeline == NULL) {
      __glintercept_fnptr_glBindProgramPipeline = (__ctype_glBindProgramPipeline) eglGetProcAddr("glBindProgramPipeline");
    }
    if (__glintercept_fnptr_glBindProgramPipeline == NULL) return NULL;
    return (void*) __glintercept_glBindProgramPipeline;
  }
  if (strcmp(name, "glBindProgramPipelineEXT") == 0) {
    if (__glintercept_fnptr_glBindProgramPipelineEXT == NULL) {
      __glintercept_fnptr_glBindProgramPipelineEXT = (__ctype_glBindProgramPipelineEXT) eglGetProcAddr("glBindProgramPipelineEXT");
    }
    if (__glintercept_fnptr_glBindProgramPipelineEXT == NULL) return NULL;
    return (void*) __glintercept_glBindProgramPipelineEXT;
  }
  if (strcmp(name, "glBindRenderbuffer") == 0) {
    if (__glintercept_fnptr_glBindRenderbuffer == NULL) {
      __glintercept_fnptr_glBindRenderbuffer = (__ctype_glBindRenderbuffer) eglGetProcAddr("glBindRenderbuffer");
    }
    if (__glintercept_fnptr_glBindRenderbuffer == NULL) return NULL;
    return (void*) __glintercept_glBindRenderbuffer;
  }
  if (strcmp(name, "glBindRenderbufferEXT") == 0) {
    if (__glintercept_fnptr_glBindRenderbufferEXT == NULL) {
      __glintercept_fnptr_glBindRenderbufferEXT = (__ctype_glBindRenderbufferEXT) eglGetProcAddr("glBindRenderbufferEXT");
    }
    if (__glintercept_fnptr_glBindRenderbufferEXT == NULL) return NULL;
    return (void*) __glintercept_glBindRenderbufferEXT;
  }
  if (strcmp(name, "glBindRenderbufferOES") == 0) {
    if (__glintercept_fnptr_glBindRenderbufferOES == NULL) {
      __glintercept_fnptr_glBindRenderbufferOES = (__ctype_glBindRenderbufferOES) eglGetProcAddr("glBindRenderbufferOES");
    }
    if (__glintercept_fnptr_glBindRenderbufferOES == NULL) return NULL;
    return (void*) __glintercept_glBindRenderbufferOES;
  }
  if (strcmp(name, "glBindSampler") == 0) {
    if (__glintercept_fnptr_glBindSampler == NULL) {
      __glintercept_fnptr_glBindSampler = (__ctype_glBindSampler) eglGetProcAddr("glBindSampler");
    }
    if (__glintercept_fnptr_glBindSampler == NULL) return NULL;
    return (void*) __glintercept_glBindSampler;
  }
  if (strcmp(name, "glBindSamplers") == 0) {
    if (__glintercept_fnptr_glBindSamplers == NULL) {
      __glintercept_fnptr_glBindSamplers = (__ctype_glBindSamplers) eglGetProcAddr("glBindSamplers");
    }
    if (__glintercept_fnptr_glBindSamplers == NULL) return NULL;
    return (void*) __glintercept_glBindSamplers;
  }
  if (strcmp(name, "glBindShadingRateImageNV") == 0) {
    if (__glintercept_fnptr_glBindShadingRateImageNV == NULL) {
      __glintercept_fnptr_glBindShadingRateImageNV = (__ctype_glBindShadingRateImageNV) eglGetProcAddr("glBindShadingRateImageNV");
    }
    if (__glintercept_fnptr_glBindShadingRateImageNV == NULL) return NULL;
    return (void*) __glintercept_glBindShadingRateImageNV;
  }
  if (strcmp(name, "glBindTexGenParameterEXT") == 0) {
    if (__glintercept_fnptr_glBindTexGenParameterEXT == NULL) {
      __glintercept_fnptr_glBindTexGenParameterEXT = (__ctype_glBindTexGenParameterEXT) eglGetProcAddr("glBindTexGenParameterEXT");
    }
    if (__glintercept_fnptr_glBindTexGenParameterEXT == NULL) return NULL;
    return (void*) __glintercept_glBindTexGenParameterEXT;
  }
  if (strcmp(name, "glBindTexture") == 0) {
    if (__glintercept_fnptr_glBindTexture == NULL) {
      __glintercept_fnptr_glBindTexture = (__ctype_glBindTexture) eglGetProcAddr("glBindTexture");
    }
    if (__glintercept_fnptr_glBindTexture == NULL) return NULL;
    return (void*) __glintercept_glBindTexture;
  }
  if (strcmp(name, "glBindTextureEXT") == 0) {
    if (__glintercept_fnptr_glBindTextureEXT == NULL) {
      __glintercept_fnptr_glBindTextureEXT = (__ctype_glBindTextureEXT) eglGetProcAddr("glBindTextureEXT");
    }
    if (__glintercept_fnptr_glBindTextureEXT == NULL) return NULL;
    return (void*) __glintercept_glBindTextureEXT;
  }
  if (strcmp(name, "glBindTextureUnit") == 0) {
    if (__glintercept_fnptr_glBindTextureUnit == NULL) {
      __glintercept_fnptr_glBindTextureUnit = (__ctype_glBindTextureUnit) eglGetProcAddr("glBindTextureUnit");
    }
    if (__glintercept_fnptr_glBindTextureUnit == NULL) return NULL;
    return (void*) __glintercept_glBindTextureUnit;
  }
  if (strcmp(name, "glBindTextureUnitParameterEXT") == 0) {
    if (__glintercept_fnptr_glBindTextureUnitParameterEXT == NULL) {
      __glintercept_fnptr_glBindTextureUnitParameterEXT = (__ctype_glBindTextureUnitParameterEXT) eglGetProcAddr("glBindTextureUnitParameterEXT");
    }
    if (__glintercept_fnptr_glBindTextureUnitParameterEXT == NULL) return NULL;
    return (void*) __glintercept_glBindTextureUnitParameterEXT;
  }
  if (strcmp(name, "glBindTextures") == 0) {
    if (__glintercept_fnptr_glBindTextures == NULL) {
      __glintercept_fnptr_glBindTextures = (__ctype_glBindTextures) eglGetProcAddr("glBindTextures");
    }
    if (__glintercept_fnptr_glBindTextures == NULL) return NULL;
    return (void*) __glintercept_glBindTextures;
  }
  if (strcmp(name, "glBindTransformFeedback") == 0) {
    if (__glintercept_fnptr_glBindTransformFeedback == NULL) {
      __glintercept_fnptr_glBindTransformFeedback = (__ctype_glBindTransformFeedback) eglGetProcAddr("glBindTransformFeedback");
    }
    if (__glintercept_fnptr_glBindTransformFeedback == NULL) return NULL;
    return (void*) __glintercept_glBindTransformFeedback;
  }
  if (strcmp(name, "glBindTransformFeedbackNV") == 0) {
    if (__glintercept_fnptr_glBindTransformFeedbackNV == NULL) {
      __glintercept_fnptr_glBindTransformFeedbackNV = (__ctype_glBindTransformFeedbackNV) eglGetProcAddr("glBindTransformFeedbackNV");
    }
    if (__glintercept_fnptr_glBindTransformFeedbackNV == NULL) return NULL;
    return (void*) __glintercept_glBindTransformFeedbackNV;
  }
  if (strcmp(name, "glBindVertexArray") == 0) {
    if (__glintercept_fnptr_glBindVertexArray == NULL) {
      __glintercept_fnptr_glBindVertexArray = (__ctype_glBindVertexArray) eglGetProcAddr("glBindVertexArray");
    }
    if (__glintercept_fnptr_glBindVertexArray == NULL) return NULL;
    return (void*) __glintercept_glBindVertexArray;
  }
  if (strcmp(name, "glBindVertexArrayAPPLE") == 0) {
    if (__glintercept_fnptr_glBindVertexArrayAPPLE == NULL) {
      __glintercept_fnptr_glBindVertexArrayAPPLE = (__ctype_glBindVertexArrayAPPLE) eglGetProcAddr("glBindVertexArrayAPPLE");
    }
    if (__glintercept_fnptr_glBindVertexArrayAPPLE == NULL) return NULL;
    return (void*) __glintercept_glBindVertexArrayAPPLE;
  }
  if (strcmp(name, "glBindVertexArrayOES") == 0) {
    if (__glintercept_fnptr_glBindVertexArrayOES == NULL) {
      __glintercept_fnptr_glBindVertexArrayOES = (__ctype_glBindVertexArrayOES) eglGetProcAddr("glBindVertexArrayOES");
    }
    if (__glintercept_fnptr_glBindVertexArrayOES == NULL) return NULL;
    return (void*) __glintercept_glBindVertexArrayOES;
  }
  if (strcmp(name, "glBindVertexBuffer") == 0) {
    if (__glintercept_fnptr_glBindVertexBuffer == NULL) {
      __glintercept_fnptr_glBindVertexBuffer = (__ctype_glBindVertexBuffer) eglGetProcAddr("glBindVertexBuffer");
    }
    if (__glintercept_fnptr_glBindVertexBuffer == NULL) return NULL;
    return (void*) __glintercept_glBindVertexBuffer;
  }
  if (strcmp(name, "glBindVertexBuffers") == 0) {
    if (__glintercept_fnptr_glBindVertexBuffers == NULL) {
      __glintercept_fnptr_glBindVertexBuffers = (__ctype_glBindVertexBuffers) eglGetProcAddr("glBindVertexBuffers");
    }
    if (__glintercept_fnptr_glBindVertexBuffers == NULL) return NULL;
    return (void*) __glintercept_glBindVertexBuffers;
  }
  if (strcmp(name, "glBindVertexShaderEXT") == 0) {
    if (__glintercept_fnptr_glBindVertexShaderEXT == NULL) {
      __glintercept_fnptr_glBindVertexShaderEXT = (__ctype_glBindVertexShaderEXT) eglGetProcAddr("glBindVertexShaderEXT");
    }
    if (__glintercept_fnptr_glBindVertexShaderEXT == NULL) return NULL;
    return (void*) __glintercept_glBindVertexShaderEXT;
  }
  if (strcmp(name, "glBindVideoCaptureStreamBufferNV") == 0) {
    if (__glintercept_fnptr_glBindVideoCaptureStreamBufferNV == NULL) {
      __glintercept_fnptr_glBindVideoCaptureStreamBufferNV = (__ctype_glBindVideoCaptureStreamBufferNV) eglGetProcAddr("glBindVideoCaptureStreamBufferNV");
    }
    if (__glintercept_fnptr_glBindVideoCaptureStreamBufferNV == NULL) return NULL;
    return (void*) __glintercept_glBindVideoCaptureStreamBufferNV;
  }
  if (strcmp(name, "glBindVideoCaptureStreamTextureNV") == 0) {
    if (__glintercept_fnptr_glBindVideoCaptureStreamTextureNV == NULL) {
      __glintercept_fnptr_glBindVideoCaptureStreamTextureNV = (__ctype_glBindVideoCaptureStreamTextureNV) eglGetProcAddr("glBindVideoCaptureStreamTextureNV");
    }
    if (__glintercept_fnptr_glBindVideoCaptureStreamTextureNV == NULL) return NULL;
    return (void*) __glintercept_glBindVideoCaptureStreamTextureNV;
  }
  if (strcmp(name, "glBinormal3bEXT") == 0) {
    if (__glintercept_fnptr_glBinormal3bEXT == NULL) {
      __glintercept_fnptr_glBinormal3bEXT = (__ctype_glBinormal3bEXT) eglGetProcAddr("glBinormal3bEXT");
    }
    if (__glintercept_fnptr_glBinormal3bEXT == NULL) return NULL;
    return (void*) __glintercept_glBinormal3bEXT;
  }
  if (strcmp(name, "glBinormal3bvEXT") == 0) {
    if (__glintercept_fnptr_glBinormal3bvEXT == NULL) {
      __glintercept_fnptr_glBinormal3bvEXT = (__ctype_glBinormal3bvEXT) eglGetProcAddr("glBinormal3bvEXT");
    }
    if (__glintercept_fnptr_glBinormal3bvEXT == NULL) return NULL;
    return (void*) __glintercept_glBinormal3bvEXT;
  }
  if (strcmp(name, "glBinormal3dEXT") == 0) {
    if (__glintercept_fnptr_glBinormal3dEXT == NULL) {
      __glintercept_fnptr_glBinormal3dEXT = (__ctype_glBinormal3dEXT) eglGetProcAddr("glBinormal3dEXT");
    }
    if (__glintercept_fnptr_glBinormal3dEXT == NULL) return NULL;
    return (void*) __glintercept_glBinormal3dEXT;
  }
  if (strcmp(name, "glBinormal3dvEXT") == 0) {
    if (__glintercept_fnptr_glBinormal3dvEXT == NULL) {
      __glintercept_fnptr_glBinormal3dvEXT = (__ctype_glBinormal3dvEXT) eglGetProcAddr("glBinormal3dvEXT");
    }
    if (__glintercept_fnptr_glBinormal3dvEXT == NULL) return NULL;
    return (void*) __glintercept_glBinormal3dvEXT;
  }
  if (strcmp(name, "glBinormal3fEXT") == 0) {
    if (__glintercept_fnptr_glBinormal3fEXT == NULL) {
      __glintercept_fnptr_glBinormal3fEXT = (__ctype_glBinormal3fEXT) eglGetProcAddr("glBinormal3fEXT");
    }
    if (__glintercept_fnptr_glBinormal3fEXT == NULL) return NULL;
    return (void*) __glintercept_glBinormal3fEXT;
  }
  if (strcmp(name, "glBinormal3fvEXT") == 0) {
    if (__glintercept_fnptr_glBinormal3fvEXT == NULL) {
      __glintercept_fnptr_glBinormal3fvEXT = (__ctype_glBinormal3fvEXT) eglGetProcAddr("glBinormal3fvEXT");
    }
    if (__glintercept_fnptr_glBinormal3fvEXT == NULL) return NULL;
    return (void*) __glintercept_glBinormal3fvEXT;
  }
  if (strcmp(name, "glBinormal3iEXT") == 0) {
    if (__glintercept_fnptr_glBinormal3iEXT == NULL) {
      __glintercept_fnptr_glBinormal3iEXT = (__ctype_glBinormal3iEXT) eglGetProcAddr("glBinormal3iEXT");
    }
    if (__glintercept_fnptr_glBinormal3iEXT == NULL) return NULL;
    return (void*) __glintercept_glBinormal3iEXT;
  }
  if (strcmp(name, "glBinormal3ivEXT") == 0) {
    if (__glintercept_fnptr_glBinormal3ivEXT == NULL) {
      __glintercept_fnptr_glBinormal3ivEXT = (__ctype_glBinormal3ivEXT) eglGetProcAddr("glBinormal3ivEXT");
    }
    if (__glintercept_fnptr_glBinormal3ivEXT == NULL) return NULL;
    return (void*) __glintercept_glBinormal3ivEXT;
  }
  if (strcmp(name, "glBinormal3sEXT") == 0) {
    if (__glintercept_fnptr_glBinormal3sEXT == NULL) {
      __glintercept_fnptr_glBinormal3sEXT = (__ctype_glBinormal3sEXT) eglGetProcAddr("glBinormal3sEXT");
    }
    if (__glintercept_fnptr_glBinormal3sEXT == NULL) return NULL;
    return (void*) __glintercept_glBinormal3sEXT;
  }
  if (strcmp(name, "glBinormal3svEXT") == 0) {
    if (__glintercept_fnptr_glBinormal3svEXT == NULL) {
      __glintercept_fnptr_glBinormal3svEXT = (__ctype_glBinormal3svEXT) eglGetProcAddr("glBinormal3svEXT");
    }
    if (__glintercept_fnptr_glBinormal3svEXT == NULL) return NULL;
    return (void*) __glintercept_glBinormal3svEXT;
  }
  if (strcmp(name, "glBinormalPointerEXT") == 0) {
    if (__glintercept_fnptr_glBinormalPointerEXT == NULL) {
      __glintercept_fnptr_glBinormalPointerEXT = (__ctype_glBinormalPointerEXT) eglGetProcAddr("glBinormalPointerEXT");
    }
    if (__glintercept_fnptr_glBinormalPointerEXT == NULL) return NULL;
    return (void*) __glintercept_glBinormalPointerEXT;
  }
  if (strcmp(name, "glBitmap") == 0) {
    if (__glintercept_fnptr_glBitmap == NULL) {
      __glintercept_fnptr_glBitmap = (__ctype_glBitmap) eglGetProcAddr("glBitmap");
    }
    if (__glintercept_fnptr_glBitmap == NULL) return NULL;
    return (void*) __glintercept_glBitmap;
  }
  if (strcmp(name, "glBitmapxOES") == 0) {
    if (__glintercept_fnptr_glBitmapxOES == NULL) {
      __glintercept_fnptr_glBitmapxOES = (__ctype_glBitmapxOES) eglGetProcAddr("glBitmapxOES");
    }
    if (__glintercept_fnptr_glBitmapxOES == NULL) return NULL;
    return (void*) __glintercept_glBitmapxOES;
  }
  if (strcmp(name, "glBlendBarrier") == 0) {
    if (__glintercept_fnptr_glBlendBarrier == NULL) {
      __glintercept_fnptr_glBlendBarrier = (__ctype_glBlendBarrier) eglGetProcAddr("glBlendBarrier");
    }
    if (__glintercept_fnptr_glBlendBarrier == NULL) return NULL;
    return (void*) __glintercept_glBlendBarrier;
  }
  if (strcmp(name, "glBlendBarrierKHR") == 0) {
    if (__glintercept_fnptr_glBlendBarrierKHR == NULL) {
      __glintercept_fnptr_glBlendBarrierKHR = (__ctype_glBlendBarrierKHR) eglGetProcAddr("glBlendBarrierKHR");
    }
    if (__glintercept_fnptr_glBlendBarrierKHR == NULL) return NULL;
    return (void*) __glintercept_glBlendBarrierKHR;
  }
  if (strcmp(name, "glBlendBarrierNV") == 0) {
    if (__glintercept_fnptr_glBlendBarrierNV == NULL) {
      __glintercept_fnptr_glBlendBarrierNV = (__ctype_glBlendBarrierNV) eglGetProcAddr("glBlendBarrierNV");
    }
    if (__glintercept_fnptr_glBlendBarrierNV == NULL) return NULL;
    return (void*) __glintercept_glBlendBarrierNV;
  }
  if (strcmp(name, "glBlendColor") == 0) {
    if (__glintercept_fnptr_glBlendColor == NULL) {
      __glintercept_fnptr_glBlendColor = (__ctype_glBlendColor) eglGetProcAddr("glBlendColor");
    }
    if (__glintercept_fnptr_glBlendColor == NULL) return NULL;
    return (void*) __glintercept_glBlendColor;
  }
  if (strcmp(name, "glBlendColorEXT") == 0) {
    if (__glintercept_fnptr_glBlendColorEXT == NULL) {
      __glintercept_fnptr_glBlendColorEXT = (__ctype_glBlendColorEXT) eglGetProcAddr("glBlendColorEXT");
    }
    if (__glintercept_fnptr_glBlendColorEXT == NULL) return NULL;
    return (void*) __glintercept_glBlendColorEXT;
  }
  if (strcmp(name, "glBlendColorxOES") == 0) {
    if (__glintercept_fnptr_glBlendColorxOES == NULL) {
      __glintercept_fnptr_glBlendColorxOES = (__ctype_glBlendColorxOES) eglGetProcAddr("glBlendColorxOES");
    }
    if (__glintercept_fnptr_glBlendColorxOES == NULL) return NULL;
    return (void*) __glintercept_glBlendColorxOES;
  }
  if (strcmp(name, "glBlendEquation") == 0) {
    if (__glintercept_fnptr_glBlendEquation == NULL) {
      __glintercept_fnptr_glBlendEquation = (__ctype_glBlendEquation) eglGetProcAddr("glBlendEquation");
    }
    if (__glintercept_fnptr_glBlendEquation == NULL) return NULL;
    return (void*) __glintercept_glBlendEquation;
  }
  if (strcmp(name, "glBlendEquationEXT") == 0) {
    if (__glintercept_fnptr_glBlendEquationEXT == NULL) {
      __glintercept_fnptr_glBlendEquationEXT = (__ctype_glBlendEquationEXT) eglGetProcAddr("glBlendEquationEXT");
    }
    if (__glintercept_fnptr_glBlendEquationEXT == NULL) return NULL;
    return (void*) __glintercept_glBlendEquationEXT;
  }
  if (strcmp(name, "glBlendEquationIndexedAMD") == 0) {
    if (__glintercept_fnptr_glBlendEquationIndexedAMD == NULL) {
      __glintercept_fnptr_glBlendEquationIndexedAMD = (__ctype_glBlendEquationIndexedAMD) eglGetProcAddr("glBlendEquationIndexedAMD");
    }
    if (__glintercept_fnptr_glBlendEquationIndexedAMD == NULL) return NULL;
    return (void*) __glintercept_glBlendEquationIndexedAMD;
  }
  if (strcmp(name, "glBlendEquationOES") == 0) {
    if (__glintercept_fnptr_glBlendEquationOES == NULL) {
      __glintercept_fnptr_glBlendEquationOES = (__ctype_glBlendEquationOES) eglGetProcAddr("glBlendEquationOES");
    }
    if (__glintercept_fnptr_glBlendEquationOES == NULL) return NULL;
    return (void*) __glintercept_glBlendEquationOES;
  }
  if (strcmp(name, "glBlendEquationSeparate") == 0) {
    if (__glintercept_fnptr_glBlendEquationSeparate == NULL) {
      __glintercept_fnptr_glBlendEquationSeparate = (__ctype_glBlendEquationSeparate) eglGetProcAddr("glBlendEquationSeparate");
    }
    if (__glintercept_fnptr_glBlendEquationSeparate == NULL) return NULL;
    return (void*) __glintercept_glBlendEquationSeparate;
  }
  if (strcmp(name, "glBlendEquationSeparateEXT") == 0) {
    if (__glintercept_fnptr_glBlendEquationSeparateEXT == NULL) {
      __glintercept_fnptr_glBlendEquationSeparateEXT = (__ctype_glBlendEquationSeparateEXT) eglGetProcAddr("glBlendEquationSeparateEXT");
    }
    if (__glintercept_fnptr_glBlendEquationSeparateEXT == NULL) return NULL;
    return (void*) __glintercept_glBlendEquationSeparateEXT;
  }
  if (strcmp(name, "glBlendEquationSeparateIndexedAMD") == 0) {
    if (__glintercept_fnptr_glBlendEquationSeparateIndexedAMD == NULL) {
      __glintercept_fnptr_glBlendEquationSeparateIndexedAMD = (__ctype_glBlendEquationSeparateIndexedAMD) eglGetProcAddr("glBlendEquationSeparateIndexedAMD");
    }
    if (__glintercept_fnptr_glBlendEquationSeparateIndexedAMD == NULL) return NULL;
    return (void*) __glintercept_glBlendEquationSeparateIndexedAMD;
  }
  if (strcmp(name, "glBlendEquationSeparateOES") == 0) {
    if (__glintercept_fnptr_glBlendEquationSeparateOES == NULL) {
      __glintercept_fnptr_glBlendEquationSeparateOES = (__ctype_glBlendEquationSeparateOES) eglGetProcAddr("glBlendEquationSeparateOES");
    }
    if (__glintercept_fnptr_glBlendEquationSeparateOES == NULL) return NULL;
    return (void*) __glintercept_glBlendEquationSeparateOES;
  }
  if (strcmp(name, "glBlendEquationSeparatei") == 0) {
    if (__glintercept_fnptr_glBlendEquationSeparatei == NULL) {
      __glintercept_fnptr_glBlendEquationSeparatei = (__ctype_glBlendEquationSeparatei) eglGetProcAddr("glBlendEquationSeparatei");
    }
    if (__glintercept_fnptr_glBlendEquationSeparatei == NULL) return NULL;
    return (void*) __glintercept_glBlendEquationSeparatei;
  }
  if (strcmp(name, "glBlendEquationSeparateiARB") == 0) {
    if (__glintercept_fnptr_glBlendEquationSeparateiARB == NULL) {
      __glintercept_fnptr_glBlendEquationSeparateiARB = (__ctype_glBlendEquationSeparateiARB) eglGetProcAddr("glBlendEquationSeparateiARB");
    }
    if (__glintercept_fnptr_glBlendEquationSeparateiARB == NULL) return NULL;
    return (void*) __glintercept_glBlendEquationSeparateiARB;
  }
  if (strcmp(name, "glBlendEquationSeparateiEXT") == 0) {
    if (__glintercept_fnptr_glBlendEquationSeparateiEXT == NULL) {
      __glintercept_fnptr_glBlendEquationSeparateiEXT = (__ctype_glBlendEquationSeparateiEXT) eglGetProcAddr("glBlendEquationSeparateiEXT");
    }
    if (__glintercept_fnptr_glBlendEquationSeparateiEXT == NULL) return NULL;
    return (void*) __glintercept_glBlendEquationSeparateiEXT;
  }
  if (strcmp(name, "glBlendEquationSeparateiOES") == 0) {
    if (__glintercept_fnptr_glBlendEquationSeparateiOES == NULL) {
      __glintercept_fnptr_glBlendEquationSeparateiOES = (__ctype_glBlendEquationSeparateiOES) eglGetProcAddr("glBlendEquationSeparateiOES");
    }
    if (__glintercept_fnptr_glBlendEquationSeparateiOES == NULL) return NULL;
    return (void*) __glintercept_glBlendEquationSeparateiOES;
  }
  if (strcmp(name, "glBlendEquationi") == 0) {
    if (__glintercept_fnptr_glBlendEquationi == NULL) {
      __glintercept_fnptr_glBlendEquationi = (__ctype_glBlendEquationi) eglGetProcAddr("glBlendEquationi");
    }
    if (__glintercept_fnptr_glBlendEquationi == NULL) return NULL;
    return (void*) __glintercept_glBlendEquationi;
  }
  if (strcmp(name, "glBlendEquationiARB") == 0) {
    if (__glintercept_fnptr_glBlendEquationiARB == NULL) {
      __glintercept_fnptr_glBlendEquationiARB = (__ctype_glBlendEquationiARB) eglGetProcAddr("glBlendEquationiARB");
    }
    if (__glintercept_fnptr_glBlendEquationiARB == NULL) return NULL;
    return (void*) __glintercept_glBlendEquationiARB;
  }
  if (strcmp(name, "glBlendEquationiEXT") == 0) {
    if (__glintercept_fnptr_glBlendEquationiEXT == NULL) {
      __glintercept_fnptr_glBlendEquationiEXT = (__ctype_glBlendEquationiEXT) eglGetProcAddr("glBlendEquationiEXT");
    }
    if (__glintercept_fnptr_glBlendEquationiEXT == NULL) return NULL;
    return (void*) __glintercept_glBlendEquationiEXT;
  }
  if (strcmp(name, "glBlendEquationiOES") == 0) {
    if (__glintercept_fnptr_glBlendEquationiOES == NULL) {
      __glintercept_fnptr_glBlendEquationiOES = (__ctype_glBlendEquationiOES) eglGetProcAddr("glBlendEquationiOES");
    }
    if (__glintercept_fnptr_glBlendEquationiOES == NULL) return NULL;
    return (void*) __glintercept_glBlendEquationiOES;
  }
  if (strcmp(name, "glBlendFunc") == 0) {
    if (__glintercept_fnptr_glBlendFunc == NULL) {
      __glintercept_fnptr_glBlendFunc = (__ctype_glBlendFunc) eglGetProcAddr("glBlendFunc");
    }
    if (__glintercept_fnptr_glBlendFunc == NULL) return NULL;
    return (void*) __glintercept_glBlendFunc;
  }
  if (strcmp(name, "glBlendFuncIndexedAMD") == 0) {
    if (__glintercept_fnptr_glBlendFuncIndexedAMD == NULL) {
      __glintercept_fnptr_glBlendFuncIndexedAMD = (__ctype_glBlendFuncIndexedAMD) eglGetProcAddr("glBlendFuncIndexedAMD");
    }
    if (__glintercept_fnptr_glBlendFuncIndexedAMD == NULL) return NULL;
    return (void*) __glintercept_glBlendFuncIndexedAMD;
  }
  if (strcmp(name, "glBlendFuncSeparate") == 0) {
    if (__glintercept_fnptr_glBlendFuncSeparate == NULL) {
      __glintercept_fnptr_glBlendFuncSeparate = (__ctype_glBlendFuncSeparate) eglGetProcAddr("glBlendFuncSeparate");
    }
    if (__glintercept_fnptr_glBlendFuncSeparate == NULL) return NULL;
    return (void*) __glintercept_glBlendFuncSeparate;
  }
  if (strcmp(name, "glBlendFuncSeparateEXT") == 0) {
    if (__glintercept_fnptr_glBlendFuncSeparateEXT == NULL) {
      __glintercept_fnptr_glBlendFuncSeparateEXT = (__ctype_glBlendFuncSeparateEXT) eglGetProcAddr("glBlendFuncSeparateEXT");
    }
    if (__glintercept_fnptr_glBlendFuncSeparateEXT == NULL) return NULL;
    return (void*) __glintercept_glBlendFuncSeparateEXT;
  }
  if (strcmp(name, "glBlendFuncSeparateINGR") == 0) {
    if (__glintercept_fnptr_glBlendFuncSeparateINGR == NULL) {
      __glintercept_fnptr_glBlendFuncSeparateINGR = (__ctype_glBlendFuncSeparateINGR) eglGetProcAddr("glBlendFuncSeparateINGR");
    }
    if (__glintercept_fnptr_glBlendFuncSeparateINGR == NULL) return NULL;
    return (void*) __glintercept_glBlendFuncSeparateINGR;
  }
  if (strcmp(name, "glBlendFuncSeparateIndexedAMD") == 0) {
    if (__glintercept_fnptr_glBlendFuncSeparateIndexedAMD == NULL) {
      __glintercept_fnptr_glBlendFuncSeparateIndexedAMD = (__ctype_glBlendFuncSeparateIndexedAMD) eglGetProcAddr("glBlendFuncSeparateIndexedAMD");
    }
    if (__glintercept_fnptr_glBlendFuncSeparateIndexedAMD == NULL) return NULL;
    return (void*) __glintercept_glBlendFuncSeparateIndexedAMD;
  }
  if (strcmp(name, "glBlendFuncSeparateOES") == 0) {
    if (__glintercept_fnptr_glBlendFuncSeparateOES == NULL) {
      __glintercept_fnptr_glBlendFuncSeparateOES = (__ctype_glBlendFuncSeparateOES) eglGetProcAddr("glBlendFuncSeparateOES");
    }
    if (__glintercept_fnptr_glBlendFuncSeparateOES == NULL) return NULL;
    return (void*) __glintercept_glBlendFuncSeparateOES;
  }
  if (strcmp(name, "glBlendFuncSeparatei") == 0) {
    if (__glintercept_fnptr_glBlendFuncSeparatei == NULL) {
      __glintercept_fnptr_glBlendFuncSeparatei = (__ctype_glBlendFuncSeparatei) eglGetProcAddr("glBlendFuncSeparatei");
    }
    if (__glintercept_fnptr_glBlendFuncSeparatei == NULL) return NULL;
    return (void*) __glintercept_glBlendFuncSeparatei;
  }
  if (strcmp(name, "glBlendFuncSeparateiARB") == 0) {
    if (__glintercept_fnptr_glBlendFuncSeparateiARB == NULL) {
      __glintercept_fnptr_glBlendFuncSeparateiARB = (__ctype_glBlendFuncSeparateiARB) eglGetProcAddr("glBlendFuncSeparateiARB");
    }
    if (__glintercept_fnptr_glBlendFuncSeparateiARB == NULL) return NULL;
    return (void*) __glintercept_glBlendFuncSeparateiARB;
  }
  if (strcmp(name, "glBlendFuncSeparateiEXT") == 0) {
    if (__glintercept_fnptr_glBlendFuncSeparateiEXT == NULL) {
      __glintercept_fnptr_glBlendFuncSeparateiEXT = (__ctype_glBlendFuncSeparateiEXT) eglGetProcAddr("glBlendFuncSeparateiEXT");
    }
    if (__glintercept_fnptr_glBlendFuncSeparateiEXT == NULL) return NULL;
    return (void*) __glintercept_glBlendFuncSeparateiEXT;
  }
  if (strcmp(name, "glBlendFuncSeparateiOES") == 0) {
    if (__glintercept_fnptr_glBlendFuncSeparateiOES == NULL) {
      __glintercept_fnptr_glBlendFuncSeparateiOES = (__ctype_glBlendFuncSeparateiOES) eglGetProcAddr("glBlendFuncSeparateiOES");
    }
    if (__glintercept_fnptr_glBlendFuncSeparateiOES == NULL) return NULL;
    return (void*) __glintercept_glBlendFuncSeparateiOES;
  }
  if (strcmp(name, "glBlendFunci") == 0) {
    if (__glintercept_fnptr_glBlendFunci == NULL) {
      __glintercept_fnptr_glBlendFunci = (__ctype_glBlendFunci) eglGetProcAddr("glBlendFunci");
    }
    if (__glintercept_fnptr_glBlendFunci == NULL) return NULL;
    return (void*) __glintercept_glBlendFunci;
  }
  if (strcmp(name, "glBlendFunciARB") == 0) {
    if (__glintercept_fnptr_glBlendFunciARB == NULL) {
      __glintercept_fnptr_glBlendFunciARB = (__ctype_glBlendFunciARB) eglGetProcAddr("glBlendFunciARB");
    }
    if (__glintercept_fnptr_glBlendFunciARB == NULL) return NULL;
    return (void*) __glintercept_glBlendFunciARB;
  }
  if (strcmp(name, "glBlendFunciEXT") == 0) {
    if (__glintercept_fnptr_glBlendFunciEXT == NULL) {
      __glintercept_fnptr_glBlendFunciEXT = (__ctype_glBlendFunciEXT) eglGetProcAddr("glBlendFunciEXT");
    }
    if (__glintercept_fnptr_glBlendFunciEXT == NULL) return NULL;
    return (void*) __glintercept_glBlendFunciEXT;
  }
  if (strcmp(name, "glBlendFunciOES") == 0) {
    if (__glintercept_fnptr_glBlendFunciOES == NULL) {
      __glintercept_fnptr_glBlendFunciOES = (__ctype_glBlendFunciOES) eglGetProcAddr("glBlendFunciOES");
    }
    if (__glintercept_fnptr_glBlendFunciOES == NULL) return NULL;
    return (void*) __glintercept_glBlendFunciOES;
  }
  if (strcmp(name, "glBlendParameteriNV") == 0) {
    if (__glintercept_fnptr_glBlendParameteriNV == NULL) {
      __glintercept_fnptr_glBlendParameteriNV = (__ctype_glBlendParameteriNV) eglGetProcAddr("glBlendParameteriNV");
    }
    if (__glintercept_fnptr_glBlendParameteriNV == NULL) return NULL;
    return (void*) __glintercept_glBlendParameteriNV;
  }
  if (strcmp(name, "glBlitFramebuffer") == 0) {
    if (__glintercept_fnptr_glBlitFramebuffer == NULL) {
      __glintercept_fnptr_glBlitFramebuffer = (__ctype_glBlitFramebuffer) eglGetProcAddr("glBlitFramebuffer");
    }
    if (__glintercept_fnptr_glBlitFramebuffer == NULL) return NULL;
    return (void*) __glintercept_glBlitFramebuffer;
  }
  if (strcmp(name, "glBlitFramebufferANGLE") == 0) {
    if (__glintercept_fnptr_glBlitFramebufferANGLE == NULL) {
      __glintercept_fnptr_glBlitFramebufferANGLE = (__ctype_glBlitFramebufferANGLE) eglGetProcAddr("glBlitFramebufferANGLE");
    }
    if (__glintercept_fnptr_glBlitFramebufferANGLE == NULL) return NULL;
    return (void*) __glintercept_glBlitFramebufferANGLE;
  }
  if (strcmp(name, "glBlitFramebufferEXT") == 0) {
    if (__glintercept_fnptr_glBlitFramebufferEXT == NULL) {
      __glintercept_fnptr_glBlitFramebufferEXT = (__ctype_glBlitFramebufferEXT) eglGetProcAddr("glBlitFramebufferEXT");
    }
    if (__glintercept_fnptr_glBlitFramebufferEXT == NULL) return NULL;
    return (void*) __glintercept_glBlitFramebufferEXT;
  }
  if (strcmp(name, "glBlitFramebufferNV") == 0) {
    if (__glintercept_fnptr_glBlitFramebufferNV == NULL) {
      __glintercept_fnptr_glBlitFramebufferNV = (__ctype_glBlitFramebufferNV) eglGetProcAddr("glBlitFramebufferNV");
    }
    if (__glintercept_fnptr_glBlitFramebufferNV == NULL) return NULL;
    return (void*) __glintercept_glBlitFramebufferNV;
  }
  if (strcmp(name, "glBlitNamedFramebuffer") == 0) {
    if (__glintercept_fnptr_glBlitNamedFramebuffer == NULL) {
      __glintercept_fnptr_glBlitNamedFramebuffer = (__ctype_glBlitNamedFramebuffer) eglGetProcAddr("glBlitNamedFramebuffer");
    }
    if (__glintercept_fnptr_glBlitNamedFramebuffer == NULL) return NULL;
    return (void*) __glintercept_glBlitNamedFramebuffer;
  }
  if (strcmp(name, "glBufferAddressRangeNV") == 0) {
    if (__glintercept_fnptr_glBufferAddressRangeNV == NULL) {
      __glintercept_fnptr_glBufferAddressRangeNV = (__ctype_glBufferAddressRangeNV) eglGetProcAddr("glBufferAddressRangeNV");
    }
    if (__glintercept_fnptr_glBufferAddressRangeNV == NULL) return NULL;
    return (void*) __glintercept_glBufferAddressRangeNV;
  }
  if (strcmp(name, "glBufferAttachMemoryNV") == 0) {
    if (__glintercept_fnptr_glBufferAttachMemoryNV == NULL) {
      __glintercept_fnptr_glBufferAttachMemoryNV = (__ctype_glBufferAttachMemoryNV) eglGetProcAddr("glBufferAttachMemoryNV");
    }
    if (__glintercept_fnptr_glBufferAttachMemoryNV == NULL) return NULL;
    return (void*) __glintercept_glBufferAttachMemoryNV;
  }
  if (strcmp(name, "glBufferData") == 0) {
    if (__glintercept_fnptr_glBufferData == NULL) {
      __glintercept_fnptr_glBufferData = (__ctype_glBufferData) eglGetProcAddr("glBufferData");
    }
    if (__glintercept_fnptr_glBufferData == NULL) return NULL;
    return (void*) __glintercept_glBufferData;
  }
  if (strcmp(name, "glBufferDataARB") == 0) {
    if (__glintercept_fnptr_glBufferDataARB == NULL) {
      __glintercept_fnptr_glBufferDataARB = (__ctype_glBufferDataARB) eglGetProcAddr("glBufferDataARB");
    }
    if (__glintercept_fnptr_glBufferDataARB == NULL) return NULL;
    return (void*) __glintercept_glBufferDataARB;
  }
  if (strcmp(name, "glBufferPageCommitmentARB") == 0) {
    if (__glintercept_fnptr_glBufferPageCommitmentARB == NULL) {
      __glintercept_fnptr_glBufferPageCommitmentARB = (__ctype_glBufferPageCommitmentARB) eglGetProcAddr("glBufferPageCommitmentARB");
    }
    if (__glintercept_fnptr_glBufferPageCommitmentARB == NULL) return NULL;
    return (void*) __glintercept_glBufferPageCommitmentARB;
  }
  if (strcmp(name, "glBufferPageCommitmentMemNV") == 0) {
    if (__glintercept_fnptr_glBufferPageCommitmentMemNV == NULL) {
      __glintercept_fnptr_glBufferPageCommitmentMemNV = (__ctype_glBufferPageCommitmentMemNV) eglGetProcAddr("glBufferPageCommitmentMemNV");
    }
    if (__glintercept_fnptr_glBufferPageCommitmentMemNV == NULL) return NULL;
    return (void*) __glintercept_glBufferPageCommitmentMemNV;
  }
  if (strcmp(name, "glBufferParameteriAPPLE") == 0) {
    if (__glintercept_fnptr_glBufferParameteriAPPLE == NULL) {
      __glintercept_fnptr_glBufferParameteriAPPLE = (__ctype_glBufferParameteriAPPLE) eglGetProcAddr("glBufferParameteriAPPLE");
    }
    if (__glintercept_fnptr_glBufferParameteriAPPLE == NULL) return NULL;
    return (void*) __glintercept_glBufferParameteriAPPLE;
  }
  if (strcmp(name, "glBufferStorage") == 0) {
    if (__glintercept_fnptr_glBufferStorage == NULL) {
      __glintercept_fnptr_glBufferStorage = (__ctype_glBufferStorage) eglGetProcAddr("glBufferStorage");
    }
    if (__glintercept_fnptr_glBufferStorage == NULL) return NULL;
    return (void*) __glintercept_glBufferStorage;
  }
  if (strcmp(name, "glBufferStorageEXT") == 0) {
    if (__glintercept_fnptr_glBufferStorageEXT == NULL) {
      __glintercept_fnptr_glBufferStorageEXT = (__ctype_glBufferStorageEXT) eglGetProcAddr("glBufferStorageEXT");
    }
    if (__glintercept_fnptr_glBufferStorageEXT == NULL) return NULL;
    return (void*) __glintercept_glBufferStorageEXT;
  }
  if (strcmp(name, "glBufferStorageExternalEXT") == 0) {
    if (__glintercept_fnptr_glBufferStorageExternalEXT == NULL) {
      __glintercept_fnptr_glBufferStorageExternalEXT = (__ctype_glBufferStorageExternalEXT) eglGetProcAddr("glBufferStorageExternalEXT");
    }
    if (__glintercept_fnptr_glBufferStorageExternalEXT == NULL) return NULL;
    return (void*) __glintercept_glBufferStorageExternalEXT;
  }
  if (strcmp(name, "glBufferStorageMemEXT") == 0) {
    if (__glintercept_fnptr_glBufferStorageMemEXT == NULL) {
      __glintercept_fnptr_glBufferStorageMemEXT = (__ctype_glBufferStorageMemEXT) eglGetProcAddr("glBufferStorageMemEXT");
    }
    if (__glintercept_fnptr_glBufferStorageMemEXT == NULL) return NULL;
    return (void*) __glintercept_glBufferStorageMemEXT;
  }
  if (strcmp(name, "glBufferSubData") == 0) {
    if (__glintercept_fnptr_glBufferSubData == NULL) {
      __glintercept_fnptr_glBufferSubData = (__ctype_glBufferSubData) eglGetProcAddr("glBufferSubData");
    }
    if (__glintercept_fnptr_glBufferSubData == NULL) return NULL;
    return (void*) __glintercept_glBufferSubData;
  }
  if (strcmp(name, "glBufferSubDataARB") == 0) {
    if (__glintercept_fnptr_glBufferSubDataARB == NULL) {
      __glintercept_fnptr_glBufferSubDataARB = (__ctype_glBufferSubDataARB) eglGetProcAddr("glBufferSubDataARB");
    }
    if (__glintercept_fnptr_glBufferSubDataARB == NULL) return NULL;
    return (void*) __glintercept_glBufferSubDataARB;
  }
  if (strcmp(name, "glCallCommandListNV") == 0) {
    if (__glintercept_fnptr_glCallCommandListNV == NULL) {
      __glintercept_fnptr_glCallCommandListNV = (__ctype_glCallCommandListNV) eglGetProcAddr("glCallCommandListNV");
    }
    if (__glintercept_fnptr_glCallCommandListNV == NULL) return NULL;
    return (void*) __glintercept_glCallCommandListNV;
  }
  if (strcmp(name, "glCallList") == 0) {
    if (__glintercept_fnptr_glCallList == NULL) {
      __glintercept_fnptr_glCallList = (__ctype_glCallList) eglGetProcAddr("glCallList");
    }
    if (__glintercept_fnptr_glCallList == NULL) return NULL;
    return (void*) __glintercept_glCallList;
  }
  if (strcmp(name, "glCallLists") == 0) {
    if (__glintercept_fnptr_glCallLists == NULL) {
      __glintercept_fnptr_glCallLists = (__ctype_glCallLists) eglGetProcAddr("glCallLists");
    }
    if (__glintercept_fnptr_glCallLists == NULL) return NULL;
    return (void*) __glintercept_glCallLists;
  }
  if (strcmp(name, "glCheckFramebufferStatus") == 0) {
    if (__glintercept_fnptr_glCheckFramebufferStatus == NULL) {
      __glintercept_fnptr_glCheckFramebufferStatus = (__ctype_glCheckFramebufferStatus) eglGetProcAddr("glCheckFramebufferStatus");
    }
    if (__glintercept_fnptr_glCheckFramebufferStatus == NULL) return NULL;
    return (void*) __glintercept_glCheckFramebufferStatus;
  }
  if (strcmp(name, "glCheckFramebufferStatusEXT") == 0) {
    if (__glintercept_fnptr_glCheckFramebufferStatusEXT == NULL) {
      __glintercept_fnptr_glCheckFramebufferStatusEXT = (__ctype_glCheckFramebufferStatusEXT) eglGetProcAddr("glCheckFramebufferStatusEXT");
    }
    if (__glintercept_fnptr_glCheckFramebufferStatusEXT == NULL) return NULL;
    return (void*) __glintercept_glCheckFramebufferStatusEXT;
  }
  if (strcmp(name, "glCheckFramebufferStatusOES") == 0) {
    if (__glintercept_fnptr_glCheckFramebufferStatusOES == NULL) {
      __glintercept_fnptr_glCheckFramebufferStatusOES = (__ctype_glCheckFramebufferStatusOES) eglGetProcAddr("glCheckFramebufferStatusOES");
    }
    if (__glintercept_fnptr_glCheckFramebufferStatusOES == NULL) return NULL;
    return (void*) __glintercept_glCheckFramebufferStatusOES;
  }
  if (strcmp(name, "glCheckNamedFramebufferStatus") == 0) {
    if (__glintercept_fnptr_glCheckNamedFramebufferStatus == NULL) {
      __glintercept_fnptr_glCheckNamedFramebufferStatus = (__ctype_glCheckNamedFramebufferStatus) eglGetProcAddr("glCheckNamedFramebufferStatus");
    }
    if (__glintercept_fnptr_glCheckNamedFramebufferStatus == NULL) return NULL;
    return (void*) __glintercept_glCheckNamedFramebufferStatus;
  }
  if (strcmp(name, "glCheckNamedFramebufferStatusEXT") == 0) {
    if (__glintercept_fnptr_glCheckNamedFramebufferStatusEXT == NULL) {
      __glintercept_fnptr_glCheckNamedFramebufferStatusEXT = (__ctype_glCheckNamedFramebufferStatusEXT) eglGetProcAddr("glCheckNamedFramebufferStatusEXT");
    }
    if (__glintercept_fnptr_glCheckNamedFramebufferStatusEXT == NULL) return NULL;
    return (void*) __glintercept_glCheckNamedFramebufferStatusEXT;
  }
  if (strcmp(name, "glClampColor") == 0) {
    if (__glintercept_fnptr_glClampColor == NULL) {
      __glintercept_fnptr_glClampColor = (__ctype_glClampColor) eglGetProcAddr("glClampColor");
    }
    if (__glintercept_fnptr_glClampColor == NULL) return NULL;
    return (void*) __glintercept_glClampColor;
  }
  if (strcmp(name, "glClampColorARB") == 0) {
    if (__glintercept_fnptr_glClampColorARB == NULL) {
      __glintercept_fnptr_glClampColorARB = (__ctype_glClampColorARB) eglGetProcAddr("glClampColorARB");
    }
    if (__glintercept_fnptr_glClampColorARB == NULL) return NULL;
    return (void*) __glintercept_glClampColorARB;
  }
  if (strcmp(name, "glClear") == 0) {
    if (__glintercept_fnptr_glClear == NULL) {
      __glintercept_fnptr_glClear = (__ctype_glClear) eglGetProcAddr("glClear");
    }
    if (__glintercept_fnptr_glClear == NULL) return NULL;
    return (void*) __glintercept_glClear;
  }
  if (strcmp(name, "glClearAccum") == 0) {
    if (__glintercept_fnptr_glClearAccum == NULL) {
      __glintercept_fnptr_glClearAccum = (__ctype_glClearAccum) eglGetProcAddr("glClearAccum");
    }
    if (__glintercept_fnptr_glClearAccum == NULL) return NULL;
    return (void*) __glintercept_glClearAccum;
  }
  if (strcmp(name, "glClearAccumxOES") == 0) {
    if (__glintercept_fnptr_glClearAccumxOES == NULL) {
      __glintercept_fnptr_glClearAccumxOES = (__ctype_glClearAccumxOES) eglGetProcAddr("glClearAccumxOES");
    }
    if (__glintercept_fnptr_glClearAccumxOES == NULL) return NULL;
    return (void*) __glintercept_glClearAccumxOES;
  }
  if (strcmp(name, "glClearBufferData") == 0) {
    if (__glintercept_fnptr_glClearBufferData == NULL) {
      __glintercept_fnptr_glClearBufferData = (__ctype_glClearBufferData) eglGetProcAddr("glClearBufferData");
    }
    if (__glintercept_fnptr_glClearBufferData == NULL) return NULL;
    return (void*) __glintercept_glClearBufferData;
  }
  if (strcmp(name, "glClearBufferSubData") == 0) {
    if (__glintercept_fnptr_glClearBufferSubData == NULL) {
      __glintercept_fnptr_glClearBufferSubData = (__ctype_glClearBufferSubData) eglGetProcAddr("glClearBufferSubData");
    }
    if (__glintercept_fnptr_glClearBufferSubData == NULL) return NULL;
    return (void*) __glintercept_glClearBufferSubData;
  }
  if (strcmp(name, "glClearBufferfi") == 0) {
    if (__glintercept_fnptr_glClearBufferfi == NULL) {
      __glintercept_fnptr_glClearBufferfi = (__ctype_glClearBufferfi) eglGetProcAddr("glClearBufferfi");
    }
    if (__glintercept_fnptr_glClearBufferfi == NULL) return NULL;
    return (void*) __glintercept_glClearBufferfi;
  }
  if (strcmp(name, "glClearBufferfv") == 0) {
    if (__glintercept_fnptr_glClearBufferfv == NULL) {
      __glintercept_fnptr_glClearBufferfv = (__ctype_glClearBufferfv) eglGetProcAddr("glClearBufferfv");
    }
    if (__glintercept_fnptr_glClearBufferfv == NULL) return NULL;
    return (void*) __glintercept_glClearBufferfv;
  }
  if (strcmp(name, "glClearBufferiv") == 0) {
    if (__glintercept_fnptr_glClearBufferiv == NULL) {
      __glintercept_fnptr_glClearBufferiv = (__ctype_glClearBufferiv) eglGetProcAddr("glClearBufferiv");
    }
    if (__glintercept_fnptr_glClearBufferiv == NULL) return NULL;
    return (void*) __glintercept_glClearBufferiv;
  }
  if (strcmp(name, "glClearBufferuiv") == 0) {
    if (__glintercept_fnptr_glClearBufferuiv == NULL) {
      __glintercept_fnptr_glClearBufferuiv = (__ctype_glClearBufferuiv) eglGetProcAddr("glClearBufferuiv");
    }
    if (__glintercept_fnptr_glClearBufferuiv == NULL) return NULL;
    return (void*) __glintercept_glClearBufferuiv;
  }
  if (strcmp(name, "glClearColor") == 0) {
    if (__glintercept_fnptr_glClearColor == NULL) {
      __glintercept_fnptr_glClearColor = (__ctype_glClearColor) eglGetProcAddr("glClearColor");
    }
    if (__glintercept_fnptr_glClearColor == NULL) return NULL;
    return (void*) __glintercept_glClearColor;
  }
  if (strcmp(name, "glClearColorIiEXT") == 0) {
    if (__glintercept_fnptr_glClearColorIiEXT == NULL) {
      __glintercept_fnptr_glClearColorIiEXT = (__ctype_glClearColorIiEXT) eglGetProcAddr("glClearColorIiEXT");
    }
    if (__glintercept_fnptr_glClearColorIiEXT == NULL) return NULL;
    return (void*) __glintercept_glClearColorIiEXT;
  }
  if (strcmp(name, "glClearColorIuiEXT") == 0) {
    if (__glintercept_fnptr_glClearColorIuiEXT == NULL) {
      __glintercept_fnptr_glClearColorIuiEXT = (__ctype_glClearColorIuiEXT) eglGetProcAddr("glClearColorIuiEXT");
    }
    if (__glintercept_fnptr_glClearColorIuiEXT == NULL) return NULL;
    return (void*) __glintercept_glClearColorIuiEXT;
  }
  if (strcmp(name, "glClearColorx") == 0) {
    if (__glintercept_fnptr_glClearColorx == NULL) {
      __glintercept_fnptr_glClearColorx = (__ctype_glClearColorx) eglGetProcAddr("glClearColorx");
    }
    if (__glintercept_fnptr_glClearColorx == NULL) return NULL;
    return (void*) __glintercept_glClearColorx;
  }
  if (strcmp(name, "glClearColorxOES") == 0) {
    if (__glintercept_fnptr_glClearColorxOES == NULL) {
      __glintercept_fnptr_glClearColorxOES = (__ctype_glClearColorxOES) eglGetProcAddr("glClearColorxOES");
    }
    if (__glintercept_fnptr_glClearColorxOES == NULL) return NULL;
    return (void*) __glintercept_glClearColorxOES;
  }
  if (strcmp(name, "glClearDepth") == 0) {
    if (__glintercept_fnptr_glClearDepth == NULL) {
      __glintercept_fnptr_glClearDepth = (__ctype_glClearDepth) eglGetProcAddr("glClearDepth");
    }
    if (__glintercept_fnptr_glClearDepth == NULL) return NULL;
    return (void*) __glintercept_glClearDepth;
  }
  if (strcmp(name, "glClearDepthdNV") == 0) {
    if (__glintercept_fnptr_glClearDepthdNV == NULL) {
      __glintercept_fnptr_glClearDepthdNV = (__ctype_glClearDepthdNV) eglGetProcAddr("glClearDepthdNV");
    }
    if (__glintercept_fnptr_glClearDepthdNV == NULL) return NULL;
    return (void*) __glintercept_glClearDepthdNV;
  }
  if (strcmp(name, "glClearDepthf") == 0) {
    if (__glintercept_fnptr_glClearDepthf == NULL) {
      __glintercept_fnptr_glClearDepthf = (__ctype_glClearDepthf) eglGetProcAddr("glClearDepthf");
    }
    if (__glintercept_fnptr_glClearDepthf == NULL) return NULL;
    return (void*) __glintercept_glClearDepthf;
  }
  if (strcmp(name, "glClearDepthfOES") == 0) {
    if (__glintercept_fnptr_glClearDepthfOES == NULL) {
      __glintercept_fnptr_glClearDepthfOES = (__ctype_glClearDepthfOES) eglGetProcAddr("glClearDepthfOES");
    }
    if (__glintercept_fnptr_glClearDepthfOES == NULL) return NULL;
    return (void*) __glintercept_glClearDepthfOES;
  }
  if (strcmp(name, "glClearDepthx") == 0) {
    if (__glintercept_fnptr_glClearDepthx == NULL) {
      __glintercept_fnptr_glClearDepthx = (__ctype_glClearDepthx) eglGetProcAddr("glClearDepthx");
    }
    if (__glintercept_fnptr_glClearDepthx == NULL) return NULL;
    return (void*) __glintercept_glClearDepthx;
  }
  if (strcmp(name, "glClearDepthxOES") == 0) {
    if (__glintercept_fnptr_glClearDepthxOES == NULL) {
      __glintercept_fnptr_glClearDepthxOES = (__ctype_glClearDepthxOES) eglGetProcAddr("glClearDepthxOES");
    }
    if (__glintercept_fnptr_glClearDepthxOES == NULL) return NULL;
    return (void*) __glintercept_glClearDepthxOES;
  }
  if (strcmp(name, "glClearIndex") == 0) {
    if (__glintercept_fnptr_glClearIndex == NULL) {
      __glintercept_fnptr_glClearIndex = (__ctype_glClearIndex) eglGetProcAddr("glClearIndex");
    }
    if (__glintercept_fnptr_glClearIndex == NULL) return NULL;
    return (void*) __glintercept_glClearIndex;
  }
  if (strcmp(name, "glClearNamedBufferData") == 0) {
    if (__glintercept_fnptr_glClearNamedBufferData == NULL) {
      __glintercept_fnptr_glClearNamedBufferData = (__ctype_glClearNamedBufferData) eglGetProcAddr("glClearNamedBufferData");
    }
    if (__glintercept_fnptr_glClearNamedBufferData == NULL) return NULL;
    return (void*) __glintercept_glClearNamedBufferData;
  }
  if (strcmp(name, "glClearNamedBufferDataEXT") == 0) {
    if (__glintercept_fnptr_glClearNamedBufferDataEXT == NULL) {
      __glintercept_fnptr_glClearNamedBufferDataEXT = (__ctype_glClearNamedBufferDataEXT) eglGetProcAddr("glClearNamedBufferDataEXT");
    }
    if (__glintercept_fnptr_glClearNamedBufferDataEXT == NULL) return NULL;
    return (void*) __glintercept_glClearNamedBufferDataEXT;
  }
  if (strcmp(name, "glClearNamedBufferSubData") == 0) {
    if (__glintercept_fnptr_glClearNamedBufferSubData == NULL) {
      __glintercept_fnptr_glClearNamedBufferSubData = (__ctype_glClearNamedBufferSubData) eglGetProcAddr("glClearNamedBufferSubData");
    }
    if (__glintercept_fnptr_glClearNamedBufferSubData == NULL) return NULL;
    return (void*) __glintercept_glClearNamedBufferSubData;
  }
  if (strcmp(name, "glClearNamedBufferSubDataEXT") == 0) {
    if (__glintercept_fnptr_glClearNamedBufferSubDataEXT == NULL) {
      __glintercept_fnptr_glClearNamedBufferSubDataEXT = (__ctype_glClearNamedBufferSubDataEXT) eglGetProcAddr("glClearNamedBufferSubDataEXT");
    }
    if (__glintercept_fnptr_glClearNamedBufferSubDataEXT == NULL) return NULL;
    return (void*) __glintercept_glClearNamedBufferSubDataEXT;
  }
  if (strcmp(name, "glClearNamedFramebufferfi") == 0) {
    if (__glintercept_fnptr_glClearNamedFramebufferfi == NULL) {
      __glintercept_fnptr_glClearNamedFramebufferfi = (__ctype_glClearNamedFramebufferfi) eglGetProcAddr("glClearNamedFramebufferfi");
    }
    if (__glintercept_fnptr_glClearNamedFramebufferfi == NULL) return NULL;
    return (void*) __glintercept_glClearNamedFramebufferfi;
  }
  if (strcmp(name, "glClearNamedFramebufferfv") == 0) {
    if (__glintercept_fnptr_glClearNamedFramebufferfv == NULL) {
      __glintercept_fnptr_glClearNamedFramebufferfv = (__ctype_glClearNamedFramebufferfv) eglGetProcAddr("glClearNamedFramebufferfv");
    }
    if (__glintercept_fnptr_glClearNamedFramebufferfv == NULL) return NULL;
    return (void*) __glintercept_glClearNamedFramebufferfv;
  }
  if (strcmp(name, "glClearNamedFramebufferiv") == 0) {
    if (__glintercept_fnptr_glClearNamedFramebufferiv == NULL) {
      __glintercept_fnptr_glClearNamedFramebufferiv = (__ctype_glClearNamedFramebufferiv) eglGetProcAddr("glClearNamedFramebufferiv");
    }
    if (__glintercept_fnptr_glClearNamedFramebufferiv == NULL) return NULL;
    return (void*) __glintercept_glClearNamedFramebufferiv;
  }
  if (strcmp(name, "glClearNamedFramebufferuiv") == 0) {
    if (__glintercept_fnptr_glClearNamedFramebufferuiv == NULL) {
      __glintercept_fnptr_glClearNamedFramebufferuiv = (__ctype_glClearNamedFramebufferuiv) eglGetProcAddr("glClearNamedFramebufferuiv");
    }
    if (__glintercept_fnptr_glClearNamedFramebufferuiv == NULL) return NULL;
    return (void*) __glintercept_glClearNamedFramebufferuiv;
  }
  if (strcmp(name, "glClearPixelLocalStorageuiEXT") == 0) {
    if (__glintercept_fnptr_glClearPixelLocalStorageuiEXT == NULL) {
      __glintercept_fnptr_glClearPixelLocalStorageuiEXT = (__ctype_glClearPixelLocalStorageuiEXT) eglGetProcAddr("glClearPixelLocalStorageuiEXT");
    }
    if (__glintercept_fnptr_glClearPixelLocalStorageuiEXT == NULL) return NULL;
    return (void*) __glintercept_glClearPixelLocalStorageuiEXT;
  }
  if (strcmp(name, "glClearStencil") == 0) {
    if (__glintercept_fnptr_glClearStencil == NULL) {
      __glintercept_fnptr_glClearStencil = (__ctype_glClearStencil) eglGetProcAddr("glClearStencil");
    }
    if (__glintercept_fnptr_glClearStencil == NULL) return NULL;
    return (void*) __glintercept_glClearStencil;
  }
  if (strcmp(name, "glClearTexImage") == 0) {
    if (__glintercept_fnptr_glClearTexImage == NULL) {
      __glintercept_fnptr_glClearTexImage = (__ctype_glClearTexImage) eglGetProcAddr("glClearTexImage");
    }
    if (__glintercept_fnptr_glClearTexImage == NULL) return NULL;
    return (void*) __glintercept_glClearTexImage;
  }
  if (strcmp(name, "glClearTexImageEXT") == 0) {
    if (__glintercept_fnptr_glClearTexImageEXT == NULL) {
      __glintercept_fnptr_glClearTexImageEXT = (__ctype_glClearTexImageEXT) eglGetProcAddr("glClearTexImageEXT");
    }
    if (__glintercept_fnptr_glClearTexImageEXT == NULL) return NULL;
    return (void*) __glintercept_glClearTexImageEXT;
  }
  if (strcmp(name, "glClearTexSubImage") == 0) {
    if (__glintercept_fnptr_glClearTexSubImage == NULL) {
      __glintercept_fnptr_glClearTexSubImage = (__ctype_glClearTexSubImage) eglGetProcAddr("glClearTexSubImage");
    }
    if (__glintercept_fnptr_glClearTexSubImage == NULL) return NULL;
    return (void*) __glintercept_glClearTexSubImage;
  }
  if (strcmp(name, "glClearTexSubImageEXT") == 0) {
    if (__glintercept_fnptr_glClearTexSubImageEXT == NULL) {
      __glintercept_fnptr_glClearTexSubImageEXT = (__ctype_glClearTexSubImageEXT) eglGetProcAddr("glClearTexSubImageEXT");
    }
    if (__glintercept_fnptr_glClearTexSubImageEXT == NULL) return NULL;
    return (void*) __glintercept_glClearTexSubImageEXT;
  }
  if (strcmp(name, "glClientActiveTexture") == 0) {
    if (__glintercept_fnptr_glClientActiveTexture == NULL) {
      __glintercept_fnptr_glClientActiveTexture = (__ctype_glClientActiveTexture) eglGetProcAddr("glClientActiveTexture");
    }
    if (__glintercept_fnptr_glClientActiveTexture == NULL) return NULL;
    return (void*) __glintercept_glClientActiveTexture;
  }
  if (strcmp(name, "glClientActiveTextureARB") == 0) {
    if (__glintercept_fnptr_glClientActiveTextureARB == NULL) {
      __glintercept_fnptr_glClientActiveTextureARB = (__ctype_glClientActiveTextureARB) eglGetProcAddr("glClientActiveTextureARB");
    }
    if (__glintercept_fnptr_glClientActiveTextureARB == NULL) return NULL;
    return (void*) __glintercept_glClientActiveTextureARB;
  }
  if (strcmp(name, "glClientActiveVertexStreamATI") == 0) {
    if (__glintercept_fnptr_glClientActiveVertexStreamATI == NULL) {
      __glintercept_fnptr_glClientActiveVertexStreamATI = (__ctype_glClientActiveVertexStreamATI) eglGetProcAddr("glClientActiveVertexStreamATI");
    }
    if (__glintercept_fnptr_glClientActiveVertexStreamATI == NULL) return NULL;
    return (void*) __glintercept_glClientActiveVertexStreamATI;
  }
  if (strcmp(name, "glClientAttribDefaultEXT") == 0) {
    if (__glintercept_fnptr_glClientAttribDefaultEXT == NULL) {
      __glintercept_fnptr_glClientAttribDefaultEXT = (__ctype_glClientAttribDefaultEXT) eglGetProcAddr("glClientAttribDefaultEXT");
    }
    if (__glintercept_fnptr_glClientAttribDefaultEXT == NULL) return NULL;
    return (void*) __glintercept_glClientAttribDefaultEXT;
  }
  if (strcmp(name, "glClientWaitSemaphoreui64NVX") == 0) {
    if (__glintercept_fnptr_glClientWaitSemaphoreui64NVX == NULL) {
      __glintercept_fnptr_glClientWaitSemaphoreui64NVX = (__ctype_glClientWaitSemaphoreui64NVX) eglGetProcAddr("glClientWaitSemaphoreui64NVX");
    }
    if (__glintercept_fnptr_glClientWaitSemaphoreui64NVX == NULL) return NULL;
    return (void*) __glintercept_glClientWaitSemaphoreui64NVX;
  }
  if (strcmp(name, "glClientWaitSync") == 0) {
    if (__glintercept_fnptr_glClientWaitSync == NULL) {
      __glintercept_fnptr_glClientWaitSync = (__ctype_glClientWaitSync) eglGetProcAddr("glClientWaitSync");
    }
    if (__glintercept_fnptr_glClientWaitSync == NULL) return NULL;
    return (void*) __glintercept_glClientWaitSync;
  }
  if (strcmp(name, "glClientWaitSyncAPPLE") == 0) {
    if (__glintercept_fnptr_glClientWaitSyncAPPLE == NULL) {
      __glintercept_fnptr_glClientWaitSyncAPPLE = (__ctype_glClientWaitSyncAPPLE) eglGetProcAddr("glClientWaitSyncAPPLE");
    }
    if (__glintercept_fnptr_glClientWaitSyncAPPLE == NULL) return NULL;
    return (void*) __glintercept_glClientWaitSyncAPPLE;
  }
  if (strcmp(name, "glClipControl") == 0) {
    if (__glintercept_fnptr_glClipControl == NULL) {
      __glintercept_fnptr_glClipControl = (__ctype_glClipControl) eglGetProcAddr("glClipControl");
    }
    if (__glintercept_fnptr_glClipControl == NULL) return NULL;
    return (void*) __glintercept_glClipControl;
  }
  if (strcmp(name, "glClipControlEXT") == 0) {
    if (__glintercept_fnptr_glClipControlEXT == NULL) {
      __glintercept_fnptr_glClipControlEXT = (__ctype_glClipControlEXT) eglGetProcAddr("glClipControlEXT");
    }
    if (__glintercept_fnptr_glClipControlEXT == NULL) return NULL;
    return (void*) __glintercept_glClipControlEXT;
  }
  if (strcmp(name, "glClipPlane") == 0) {
    if (__glintercept_fnptr_glClipPlane == NULL) {
      __glintercept_fnptr_glClipPlane = (__ctype_glClipPlane) eglGetProcAddr("glClipPlane");
    }
    if (__glintercept_fnptr_glClipPlane == NULL) return NULL;
    return (void*) __glintercept_glClipPlane;
  }
  if (strcmp(name, "glClipPlanef") == 0) {
    if (__glintercept_fnptr_glClipPlanef == NULL) {
      __glintercept_fnptr_glClipPlanef = (__ctype_glClipPlanef) eglGetProcAddr("glClipPlanef");
    }
    if (__glintercept_fnptr_glClipPlanef == NULL) return NULL;
    return (void*) __glintercept_glClipPlanef;
  }
  if (strcmp(name, "glClipPlanefIMG") == 0) {
    if (__glintercept_fnptr_glClipPlanefIMG == NULL) {
      __glintercept_fnptr_glClipPlanefIMG = (__ctype_glClipPlanefIMG) eglGetProcAddr("glClipPlanefIMG");
    }
    if (__glintercept_fnptr_glClipPlanefIMG == NULL) return NULL;
    return (void*) __glintercept_glClipPlanefIMG;
  }
  if (strcmp(name, "glClipPlanefOES") == 0) {
    if (__glintercept_fnptr_glClipPlanefOES == NULL) {
      __glintercept_fnptr_glClipPlanefOES = (__ctype_glClipPlanefOES) eglGetProcAddr("glClipPlanefOES");
    }
    if (__glintercept_fnptr_glClipPlanefOES == NULL) return NULL;
    return (void*) __glintercept_glClipPlanefOES;
  }
  if (strcmp(name, "glClipPlanex") == 0) {
    if (__glintercept_fnptr_glClipPlanex == NULL) {
      __glintercept_fnptr_glClipPlanex = (__ctype_glClipPlanex) eglGetProcAddr("glClipPlanex");
    }
    if (__glintercept_fnptr_glClipPlanex == NULL) return NULL;
    return (void*) __glintercept_glClipPlanex;
  }
  if (strcmp(name, "glClipPlanexIMG") == 0) {
    if (__glintercept_fnptr_glClipPlanexIMG == NULL) {
      __glintercept_fnptr_glClipPlanexIMG = (__ctype_glClipPlanexIMG) eglGetProcAddr("glClipPlanexIMG");
    }
    if (__glintercept_fnptr_glClipPlanexIMG == NULL) return NULL;
    return (void*) __glintercept_glClipPlanexIMG;
  }
  if (strcmp(name, "glClipPlanexOES") == 0) {
    if (__glintercept_fnptr_glClipPlanexOES == NULL) {
      __glintercept_fnptr_glClipPlanexOES = (__ctype_glClipPlanexOES) eglGetProcAddr("glClipPlanexOES");
    }
    if (__glintercept_fnptr_glClipPlanexOES == NULL) return NULL;
    return (void*) __glintercept_glClipPlanexOES;
  }
  if (strcmp(name, "glColor3b") == 0) {
    if (__glintercept_fnptr_glColor3b == NULL) {
      __glintercept_fnptr_glColor3b = (__ctype_glColor3b) eglGetProcAddr("glColor3b");
    }
    if (__glintercept_fnptr_glColor3b == NULL) return NULL;
    return (void*) __glintercept_glColor3b;
  }
  if (strcmp(name, "glColor3bv") == 0) {
    if (__glintercept_fnptr_glColor3bv == NULL) {
      __glintercept_fnptr_glColor3bv = (__ctype_glColor3bv) eglGetProcAddr("glColor3bv");
    }
    if (__glintercept_fnptr_glColor3bv == NULL) return NULL;
    return (void*) __glintercept_glColor3bv;
  }
  if (strcmp(name, "glColor3d") == 0) {
    if (__glintercept_fnptr_glColor3d == NULL) {
      __glintercept_fnptr_glColor3d = (__ctype_glColor3d) eglGetProcAddr("glColor3d");
    }
    if (__glintercept_fnptr_glColor3d == NULL) return NULL;
    return (void*) __glintercept_glColor3d;
  }
  if (strcmp(name, "glColor3dv") == 0) {
    if (__glintercept_fnptr_glColor3dv == NULL) {
      __glintercept_fnptr_glColor3dv = (__ctype_glColor3dv) eglGetProcAddr("glColor3dv");
    }
    if (__glintercept_fnptr_glColor3dv == NULL) return NULL;
    return (void*) __glintercept_glColor3dv;
  }
  if (strcmp(name, "glColor3f") == 0) {
    if (__glintercept_fnptr_glColor3f == NULL) {
      __glintercept_fnptr_glColor3f = (__ctype_glColor3f) eglGetProcAddr("glColor3f");
    }
    if (__glintercept_fnptr_glColor3f == NULL) return NULL;
    return (void*) __glintercept_glColor3f;
  }
  if (strcmp(name, "glColor3fVertex3fSUN") == 0) {
    if (__glintercept_fnptr_glColor3fVertex3fSUN == NULL) {
      __glintercept_fnptr_glColor3fVertex3fSUN = (__ctype_glColor3fVertex3fSUN) eglGetProcAddr("glColor3fVertex3fSUN");
    }
    if (__glintercept_fnptr_glColor3fVertex3fSUN == NULL) return NULL;
    return (void*) __glintercept_glColor3fVertex3fSUN;
  }
  if (strcmp(name, "glColor3fVertex3fvSUN") == 0) {
    if (__glintercept_fnptr_glColor3fVertex3fvSUN == NULL) {
      __glintercept_fnptr_glColor3fVertex3fvSUN = (__ctype_glColor3fVertex3fvSUN) eglGetProcAddr("glColor3fVertex3fvSUN");
    }
    if (__glintercept_fnptr_glColor3fVertex3fvSUN == NULL) return NULL;
    return (void*) __glintercept_glColor3fVertex3fvSUN;
  }
  if (strcmp(name, "glColor3fv") == 0) {
    if (__glintercept_fnptr_glColor3fv == NULL) {
      __glintercept_fnptr_glColor3fv = (__ctype_glColor3fv) eglGetProcAddr("glColor3fv");
    }
    if (__glintercept_fnptr_glColor3fv == NULL) return NULL;
    return (void*) __glintercept_glColor3fv;
  }
  if (strcmp(name, "glColor3hNV") == 0) {
    if (__glintercept_fnptr_glColor3hNV == NULL) {
      __glintercept_fnptr_glColor3hNV = (__ctype_glColor3hNV) eglGetProcAddr("glColor3hNV");
    }
    if (__glintercept_fnptr_glColor3hNV == NULL) return NULL;
    return (void*) __glintercept_glColor3hNV;
  }
  if (strcmp(name, "glColor3hvNV") == 0) {
    if (__glintercept_fnptr_glColor3hvNV == NULL) {
      __glintercept_fnptr_glColor3hvNV = (__ctype_glColor3hvNV) eglGetProcAddr("glColor3hvNV");
    }
    if (__glintercept_fnptr_glColor3hvNV == NULL) return NULL;
    return (void*) __glintercept_glColor3hvNV;
  }
  if (strcmp(name, "glColor3i") == 0) {
    if (__glintercept_fnptr_glColor3i == NULL) {
      __glintercept_fnptr_glColor3i = (__ctype_glColor3i) eglGetProcAddr("glColor3i");
    }
    if (__glintercept_fnptr_glColor3i == NULL) return NULL;
    return (void*) __glintercept_glColor3i;
  }
  if (strcmp(name, "glColor3iv") == 0) {
    if (__glintercept_fnptr_glColor3iv == NULL) {
      __glintercept_fnptr_glColor3iv = (__ctype_glColor3iv) eglGetProcAddr("glColor3iv");
    }
    if (__glintercept_fnptr_glColor3iv == NULL) return NULL;
    return (void*) __glintercept_glColor3iv;
  }
  if (strcmp(name, "glColor3s") == 0) {
    if (__glintercept_fnptr_glColor3s == NULL) {
      __glintercept_fnptr_glColor3s = (__ctype_glColor3s) eglGetProcAddr("glColor3s");
    }
    if (__glintercept_fnptr_glColor3s == NULL) return NULL;
    return (void*) __glintercept_glColor3s;
  }
  if (strcmp(name, "glColor3sv") == 0) {
    if (__glintercept_fnptr_glColor3sv == NULL) {
      __glintercept_fnptr_glColor3sv = (__ctype_glColor3sv) eglGetProcAddr("glColor3sv");
    }
    if (__glintercept_fnptr_glColor3sv == NULL) return NULL;
    return (void*) __glintercept_glColor3sv;
  }
  if (strcmp(name, "glColor3ub") == 0) {
    if (__glintercept_fnptr_glColor3ub == NULL) {
      __glintercept_fnptr_glColor3ub = (__ctype_glColor3ub) eglGetProcAddr("glColor3ub");
    }
    if (__glintercept_fnptr_glColor3ub == NULL) return NULL;
    return (void*) __glintercept_glColor3ub;
  }
  if (strcmp(name, "glColor3ubv") == 0) {
    if (__glintercept_fnptr_glColor3ubv == NULL) {
      __glintercept_fnptr_glColor3ubv = (__ctype_glColor3ubv) eglGetProcAddr("glColor3ubv");
    }
    if (__glintercept_fnptr_glColor3ubv == NULL) return NULL;
    return (void*) __glintercept_glColor3ubv;
  }
  if (strcmp(name, "glColor3ui") == 0) {
    if (__glintercept_fnptr_glColor3ui == NULL) {
      __glintercept_fnptr_glColor3ui = (__ctype_glColor3ui) eglGetProcAddr("glColor3ui");
    }
    if (__glintercept_fnptr_glColor3ui == NULL) return NULL;
    return (void*) __glintercept_glColor3ui;
  }
  if (strcmp(name, "glColor3uiv") == 0) {
    if (__glintercept_fnptr_glColor3uiv == NULL) {
      __glintercept_fnptr_glColor3uiv = (__ctype_glColor3uiv) eglGetProcAddr("glColor3uiv");
    }
    if (__glintercept_fnptr_glColor3uiv == NULL) return NULL;
    return (void*) __glintercept_glColor3uiv;
  }
  if (strcmp(name, "glColor3us") == 0) {
    if (__glintercept_fnptr_glColor3us == NULL) {
      __glintercept_fnptr_glColor3us = (__ctype_glColor3us) eglGetProcAddr("glColor3us");
    }
    if (__glintercept_fnptr_glColor3us == NULL) return NULL;
    return (void*) __glintercept_glColor3us;
  }
  if (strcmp(name, "glColor3usv") == 0) {
    if (__glintercept_fnptr_glColor3usv == NULL) {
      __glintercept_fnptr_glColor3usv = (__ctype_glColor3usv) eglGetProcAddr("glColor3usv");
    }
    if (__glintercept_fnptr_glColor3usv == NULL) return NULL;
    return (void*) __glintercept_glColor3usv;
  }
  if (strcmp(name, "glColor3xOES") == 0) {
    if (__glintercept_fnptr_glColor3xOES == NULL) {
      __glintercept_fnptr_glColor3xOES = (__ctype_glColor3xOES) eglGetProcAddr("glColor3xOES");
    }
    if (__glintercept_fnptr_glColor3xOES == NULL) return NULL;
    return (void*) __glintercept_glColor3xOES;
  }
  if (strcmp(name, "glColor3xvOES") == 0) {
    if (__glintercept_fnptr_glColor3xvOES == NULL) {
      __glintercept_fnptr_glColor3xvOES = (__ctype_glColor3xvOES) eglGetProcAddr("glColor3xvOES");
    }
    if (__glintercept_fnptr_glColor3xvOES == NULL) return NULL;
    return (void*) __glintercept_glColor3xvOES;
  }
  if (strcmp(name, "glColor4b") == 0) {
    if (__glintercept_fnptr_glColor4b == NULL) {
      __glintercept_fnptr_glColor4b = (__ctype_glColor4b) eglGetProcAddr("glColor4b");
    }
    if (__glintercept_fnptr_glColor4b == NULL) return NULL;
    return (void*) __glintercept_glColor4b;
  }
  if (strcmp(name, "glColor4bv") == 0) {
    if (__glintercept_fnptr_glColor4bv == NULL) {
      __glintercept_fnptr_glColor4bv = (__ctype_glColor4bv) eglGetProcAddr("glColor4bv");
    }
    if (__glintercept_fnptr_glColor4bv == NULL) return NULL;
    return (void*) __glintercept_glColor4bv;
  }
  if (strcmp(name, "glColor4d") == 0) {
    if (__glintercept_fnptr_glColor4d == NULL) {
      __glintercept_fnptr_glColor4d = (__ctype_glColor4d) eglGetProcAddr("glColor4d");
    }
    if (__glintercept_fnptr_glColor4d == NULL) return NULL;
    return (void*) __glintercept_glColor4d;
  }
  if (strcmp(name, "glColor4dv") == 0) {
    if (__glintercept_fnptr_glColor4dv == NULL) {
      __glintercept_fnptr_glColor4dv = (__ctype_glColor4dv) eglGetProcAddr("glColor4dv");
    }
    if (__glintercept_fnptr_glColor4dv == NULL) return NULL;
    return (void*) __glintercept_glColor4dv;
  }
  if (strcmp(name, "glColor4f") == 0) {
    if (__glintercept_fnptr_glColor4f == NULL) {
      __glintercept_fnptr_glColor4f = (__ctype_glColor4f) eglGetProcAddr("glColor4f");
    }
    if (__glintercept_fnptr_glColor4f == NULL) return NULL;
    return (void*) __glintercept_glColor4f;
  }
  if (strcmp(name, "glColor4fNormal3fVertex3fSUN") == 0) {
    if (__glintercept_fnptr_glColor4fNormal3fVertex3fSUN == NULL) {
      __glintercept_fnptr_glColor4fNormal3fVertex3fSUN = (__ctype_glColor4fNormal3fVertex3fSUN) eglGetProcAddr("glColor4fNormal3fVertex3fSUN");
    }
    if (__glintercept_fnptr_glColor4fNormal3fVertex3fSUN == NULL) return NULL;
    return (void*) __glintercept_glColor4fNormal3fVertex3fSUN;
  }
  if (strcmp(name, "glColor4fNormal3fVertex3fvSUN") == 0) {
    if (__glintercept_fnptr_glColor4fNormal3fVertex3fvSUN == NULL) {
      __glintercept_fnptr_glColor4fNormal3fVertex3fvSUN = (__ctype_glColor4fNormal3fVertex3fvSUN) eglGetProcAddr("glColor4fNormal3fVertex3fvSUN");
    }
    if (__glintercept_fnptr_glColor4fNormal3fVertex3fvSUN == NULL) return NULL;
    return (void*) __glintercept_glColor4fNormal3fVertex3fvSUN;
  }
  if (strcmp(name, "glColor4fv") == 0) {
    if (__glintercept_fnptr_glColor4fv == NULL) {
      __glintercept_fnptr_glColor4fv = (__ctype_glColor4fv) eglGetProcAddr("glColor4fv");
    }
    if (__glintercept_fnptr_glColor4fv == NULL) return NULL;
    return (void*) __glintercept_glColor4fv;
  }
  if (strcmp(name, "glColor4hNV") == 0) {
    if (__glintercept_fnptr_glColor4hNV == NULL) {
      __glintercept_fnptr_glColor4hNV = (__ctype_glColor4hNV) eglGetProcAddr("glColor4hNV");
    }
    if (__glintercept_fnptr_glColor4hNV == NULL) return NULL;
    return (void*) __glintercept_glColor4hNV;
  }
  if (strcmp(name, "glColor4hvNV") == 0) {
    if (__glintercept_fnptr_glColor4hvNV == NULL) {
      __glintercept_fnptr_glColor4hvNV = (__ctype_glColor4hvNV) eglGetProcAddr("glColor4hvNV");
    }
    if (__glintercept_fnptr_glColor4hvNV == NULL) return NULL;
    return (void*) __glintercept_glColor4hvNV;
  }
  if (strcmp(name, "glColor4i") == 0) {
    if (__glintercept_fnptr_glColor4i == NULL) {
      __glintercept_fnptr_glColor4i = (__ctype_glColor4i) eglGetProcAddr("glColor4i");
    }
    if (__glintercept_fnptr_glColor4i == NULL) return NULL;
    return (void*) __glintercept_glColor4i;
  }
  if (strcmp(name, "glColor4iv") == 0) {
    if (__glintercept_fnptr_glColor4iv == NULL) {
      __glintercept_fnptr_glColor4iv = (__ctype_glColor4iv) eglGetProcAddr("glColor4iv");
    }
    if (__glintercept_fnptr_glColor4iv == NULL) return NULL;
    return (void*) __glintercept_glColor4iv;
  }
  if (strcmp(name, "glColor4s") == 0) {
    if (__glintercept_fnptr_glColor4s == NULL) {
      __glintercept_fnptr_glColor4s = (__ctype_glColor4s) eglGetProcAddr("glColor4s");
    }
    if (__glintercept_fnptr_glColor4s == NULL) return NULL;
    return (void*) __glintercept_glColor4s;
  }
  if (strcmp(name, "glColor4sv") == 0) {
    if (__glintercept_fnptr_glColor4sv == NULL) {
      __glintercept_fnptr_glColor4sv = (__ctype_glColor4sv) eglGetProcAddr("glColor4sv");
    }
    if (__glintercept_fnptr_glColor4sv == NULL) return NULL;
    return (void*) __glintercept_glColor4sv;
  }
  if (strcmp(name, "glColor4ub") == 0) {
    if (__glintercept_fnptr_glColor4ub == NULL) {
      __glintercept_fnptr_glColor4ub = (__ctype_glColor4ub) eglGetProcAddr("glColor4ub");
    }
    if (__glintercept_fnptr_glColor4ub == NULL) return NULL;
    return (void*) __glintercept_glColor4ub;
  }
  if (strcmp(name, "glColor4ubVertex2fSUN") == 0) {
    if (__glintercept_fnptr_glColor4ubVertex2fSUN == NULL) {
      __glintercept_fnptr_glColor4ubVertex2fSUN = (__ctype_glColor4ubVertex2fSUN) eglGetProcAddr("glColor4ubVertex2fSUN");
    }
    if (__glintercept_fnptr_glColor4ubVertex2fSUN == NULL) return NULL;
    return (void*) __glintercept_glColor4ubVertex2fSUN;
  }
  if (strcmp(name, "glColor4ubVertex2fvSUN") == 0) {
    if (__glintercept_fnptr_glColor4ubVertex2fvSUN == NULL) {
      __glintercept_fnptr_glColor4ubVertex2fvSUN = (__ctype_glColor4ubVertex2fvSUN) eglGetProcAddr("glColor4ubVertex2fvSUN");
    }
    if (__glintercept_fnptr_glColor4ubVertex2fvSUN == NULL) return NULL;
    return (void*) __glintercept_glColor4ubVertex2fvSUN;
  }
  if (strcmp(name, "glColor4ubVertex3fSUN") == 0) {
    if (__glintercept_fnptr_glColor4ubVertex3fSUN == NULL) {
      __glintercept_fnptr_glColor4ubVertex3fSUN = (__ctype_glColor4ubVertex3fSUN) eglGetProcAddr("glColor4ubVertex3fSUN");
    }
    if (__glintercept_fnptr_glColor4ubVertex3fSUN == NULL) return NULL;
    return (void*) __glintercept_glColor4ubVertex3fSUN;
  }
  if (strcmp(name, "glColor4ubVertex3fvSUN") == 0) {
    if (__glintercept_fnptr_glColor4ubVertex3fvSUN == NULL) {
      __glintercept_fnptr_glColor4ubVertex3fvSUN = (__ctype_glColor4ubVertex3fvSUN) eglGetProcAddr("glColor4ubVertex3fvSUN");
    }
    if (__glintercept_fnptr_glColor4ubVertex3fvSUN == NULL) return NULL;
    return (void*) __glintercept_glColor4ubVertex3fvSUN;
  }
  if (strcmp(name, "glColor4ubv") == 0) {
    if (__glintercept_fnptr_glColor4ubv == NULL) {
      __glintercept_fnptr_glColor4ubv = (__ctype_glColor4ubv) eglGetProcAddr("glColor4ubv");
    }
    if (__glintercept_fnptr_glColor4ubv == NULL) return NULL;
    return (void*) __glintercept_glColor4ubv;
  }
  if (strcmp(name, "glColor4ui") == 0) {
    if (__glintercept_fnptr_glColor4ui == NULL) {
      __glintercept_fnptr_glColor4ui = (__ctype_glColor4ui) eglGetProcAddr("glColor4ui");
    }
    if (__glintercept_fnptr_glColor4ui == NULL) return NULL;
    return (void*) __glintercept_glColor4ui;
  }
  if (strcmp(name, "glColor4uiv") == 0) {
    if (__glintercept_fnptr_glColor4uiv == NULL) {
      __glintercept_fnptr_glColor4uiv = (__ctype_glColor4uiv) eglGetProcAddr("glColor4uiv");
    }
    if (__glintercept_fnptr_glColor4uiv == NULL) return NULL;
    return (void*) __glintercept_glColor4uiv;
  }
  if (strcmp(name, "glColor4us") == 0) {
    if (__glintercept_fnptr_glColor4us == NULL) {
      __glintercept_fnptr_glColor4us = (__ctype_glColor4us) eglGetProcAddr("glColor4us");
    }
    if (__glintercept_fnptr_glColor4us == NULL) return NULL;
    return (void*) __glintercept_glColor4us;
  }
  if (strcmp(name, "glColor4usv") == 0) {
    if (__glintercept_fnptr_glColor4usv == NULL) {
      __glintercept_fnptr_glColor4usv = (__ctype_glColor4usv) eglGetProcAddr("glColor4usv");
    }
    if (__glintercept_fnptr_glColor4usv == NULL) return NULL;
    return (void*) __glintercept_glColor4usv;
  }
  if (strcmp(name, "glColor4x") == 0) {
    if (__glintercept_fnptr_glColor4x == NULL) {
      __glintercept_fnptr_glColor4x = (__ctype_glColor4x) eglGetProcAddr("glColor4x");
    }
    if (__glintercept_fnptr_glColor4x == NULL) return NULL;
    return (void*) __glintercept_glColor4x;
  }
  if (strcmp(name, "glColor4xOES") == 0) {
    if (__glintercept_fnptr_glColor4xOES == NULL) {
      __glintercept_fnptr_glColor4xOES = (__ctype_glColor4xOES) eglGetProcAddr("glColor4xOES");
    }
    if (__glintercept_fnptr_glColor4xOES == NULL) return NULL;
    return (void*) __glintercept_glColor4xOES;
  }
  if (strcmp(name, "glColor4xvOES") == 0) {
    if (__glintercept_fnptr_glColor4xvOES == NULL) {
      __glintercept_fnptr_glColor4xvOES = (__ctype_glColor4xvOES) eglGetProcAddr("glColor4xvOES");
    }
    if (__glintercept_fnptr_glColor4xvOES == NULL) return NULL;
    return (void*) __glintercept_glColor4xvOES;
  }
  if (strcmp(name, "glColorFormatNV") == 0) {
    if (__glintercept_fnptr_glColorFormatNV == NULL) {
      __glintercept_fnptr_glColorFormatNV = (__ctype_glColorFormatNV) eglGetProcAddr("glColorFormatNV");
    }
    if (__glintercept_fnptr_glColorFormatNV == NULL) return NULL;
    return (void*) __glintercept_glColorFormatNV;
  }
  if (strcmp(name, "glColorFragmentOp1ATI") == 0) {
    if (__glintercept_fnptr_glColorFragmentOp1ATI == NULL) {
      __glintercept_fnptr_glColorFragmentOp1ATI = (__ctype_glColorFragmentOp1ATI) eglGetProcAddr("glColorFragmentOp1ATI");
    }
    if (__glintercept_fnptr_glColorFragmentOp1ATI == NULL) return NULL;
    return (void*) __glintercept_glColorFragmentOp1ATI;
  }
  if (strcmp(name, "glColorFragmentOp2ATI") == 0) {
    if (__glintercept_fnptr_glColorFragmentOp2ATI == NULL) {
      __glintercept_fnptr_glColorFragmentOp2ATI = (__ctype_glColorFragmentOp2ATI) eglGetProcAddr("glColorFragmentOp2ATI");
    }
    if (__glintercept_fnptr_glColorFragmentOp2ATI == NULL) return NULL;
    return (void*) __glintercept_glColorFragmentOp2ATI;
  }
  if (strcmp(name, "glColorFragmentOp3ATI") == 0) {
    if (__glintercept_fnptr_glColorFragmentOp3ATI == NULL) {
      __glintercept_fnptr_glColorFragmentOp3ATI = (__ctype_glColorFragmentOp3ATI) eglGetProcAddr("glColorFragmentOp3ATI");
    }
    if (__glintercept_fnptr_glColorFragmentOp3ATI == NULL) return NULL;
    return (void*) __glintercept_glColorFragmentOp3ATI;
  }
  if (strcmp(name, "glColorMask") == 0) {
    if (__glintercept_fnptr_glColorMask == NULL) {
      __glintercept_fnptr_glColorMask = (__ctype_glColorMask) eglGetProcAddr("glColorMask");
    }
    if (__glintercept_fnptr_glColorMask == NULL) return NULL;
    return (void*) __glintercept_glColorMask;
  }
  if (strcmp(name, "glColorMaskIndexedEXT") == 0) {
    if (__glintercept_fnptr_glColorMaskIndexedEXT == NULL) {
      __glintercept_fnptr_glColorMaskIndexedEXT = (__ctype_glColorMaskIndexedEXT) eglGetProcAddr("glColorMaskIndexedEXT");
    }
    if (__glintercept_fnptr_glColorMaskIndexedEXT == NULL) return NULL;
    return (void*) __glintercept_glColorMaskIndexedEXT;
  }
  if (strcmp(name, "glColorMaski") == 0) {
    if (__glintercept_fnptr_glColorMaski == NULL) {
      __glintercept_fnptr_glColorMaski = (__ctype_glColorMaski) eglGetProcAddr("glColorMaski");
    }
    if (__glintercept_fnptr_glColorMaski == NULL) return NULL;
    return (void*) __glintercept_glColorMaski;
  }
  if (strcmp(name, "glColorMaskiEXT") == 0) {
    if (__glintercept_fnptr_glColorMaskiEXT == NULL) {
      __glintercept_fnptr_glColorMaskiEXT = (__ctype_glColorMaskiEXT) eglGetProcAddr("glColorMaskiEXT");
    }
    if (__glintercept_fnptr_glColorMaskiEXT == NULL) return NULL;
    return (void*) __glintercept_glColorMaskiEXT;
  }
  if (strcmp(name, "glColorMaskiOES") == 0) {
    if (__glintercept_fnptr_glColorMaskiOES == NULL) {
      __glintercept_fnptr_glColorMaskiOES = (__ctype_glColorMaskiOES) eglGetProcAddr("glColorMaskiOES");
    }
    if (__glintercept_fnptr_glColorMaskiOES == NULL) return NULL;
    return (void*) __glintercept_glColorMaskiOES;
  }
  if (strcmp(name, "glColorMaterial") == 0) {
    if (__glintercept_fnptr_glColorMaterial == NULL) {
      __glintercept_fnptr_glColorMaterial = (__ctype_glColorMaterial) eglGetProcAddr("glColorMaterial");
    }
    if (__glintercept_fnptr_glColorMaterial == NULL) return NULL;
    return (void*) __glintercept_glColorMaterial;
  }
  if (strcmp(name, "glColorP3ui") == 0) {
    if (__glintercept_fnptr_glColorP3ui == NULL) {
      __glintercept_fnptr_glColorP3ui = (__ctype_glColorP3ui) eglGetProcAddr("glColorP3ui");
    }
    if (__glintercept_fnptr_glColorP3ui == NULL) return NULL;
    return (void*) __glintercept_glColorP3ui;
  }
  if (strcmp(name, "glColorP3uiv") == 0) {
    if (__glintercept_fnptr_glColorP3uiv == NULL) {
      __glintercept_fnptr_glColorP3uiv = (__ctype_glColorP3uiv) eglGetProcAddr("glColorP3uiv");
    }
    if (__glintercept_fnptr_glColorP3uiv == NULL) return NULL;
    return (void*) __glintercept_glColorP3uiv;
  }
  if (strcmp(name, "glColorP4ui") == 0) {
    if (__glintercept_fnptr_glColorP4ui == NULL) {
      __glintercept_fnptr_glColorP4ui = (__ctype_glColorP4ui) eglGetProcAddr("glColorP4ui");
    }
    if (__glintercept_fnptr_glColorP4ui == NULL) return NULL;
    return (void*) __glintercept_glColorP4ui;
  }
  if (strcmp(name, "glColorP4uiv") == 0) {
    if (__glintercept_fnptr_glColorP4uiv == NULL) {
      __glintercept_fnptr_glColorP4uiv = (__ctype_glColorP4uiv) eglGetProcAddr("glColorP4uiv");
    }
    if (__glintercept_fnptr_glColorP4uiv == NULL) return NULL;
    return (void*) __glintercept_glColorP4uiv;
  }
  if (strcmp(name, "glColorPointer") == 0) {
    if (__glintercept_fnptr_glColorPointer == NULL) {
      __glintercept_fnptr_glColorPointer = (__ctype_glColorPointer) eglGetProcAddr("glColorPointer");
    }
    if (__glintercept_fnptr_glColorPointer == NULL) return NULL;
    return (void*) __glintercept_glColorPointer;
  }
  if (strcmp(name, "glColorPointerEXT") == 0) {
    if (__glintercept_fnptr_glColorPointerEXT == NULL) {
      __glintercept_fnptr_glColorPointerEXT = (__ctype_glColorPointerEXT) eglGetProcAddr("glColorPointerEXT");
    }
    if (__glintercept_fnptr_glColorPointerEXT == NULL) return NULL;
    return (void*) __glintercept_glColorPointerEXT;
  }
  if (strcmp(name, "glColorPointerListIBM") == 0) {
    if (__glintercept_fnptr_glColorPointerListIBM == NULL) {
      __glintercept_fnptr_glColorPointerListIBM = (__ctype_glColorPointerListIBM) eglGetProcAddr("glColorPointerListIBM");
    }
    if (__glintercept_fnptr_glColorPointerListIBM == NULL) return NULL;
    return (void*) __glintercept_glColorPointerListIBM;
  }
  if (strcmp(name, "glColorPointervINTEL") == 0) {
    if (__glintercept_fnptr_glColorPointervINTEL == NULL) {
      __glintercept_fnptr_glColorPointervINTEL = (__ctype_glColorPointervINTEL) eglGetProcAddr("glColorPointervINTEL");
    }
    if (__glintercept_fnptr_glColorPointervINTEL == NULL) return NULL;
    return (void*) __glintercept_glColorPointervINTEL;
  }
  if (strcmp(name, "glColorSubTable") == 0) {
    if (__glintercept_fnptr_glColorSubTable == NULL) {
      __glintercept_fnptr_glColorSubTable = (__ctype_glColorSubTable) eglGetProcAddr("glColorSubTable");
    }
    if (__glintercept_fnptr_glColorSubTable == NULL) return NULL;
    return (void*) __glintercept_glColorSubTable;
  }
  if (strcmp(name, "glColorSubTableEXT") == 0) {
    if (__glintercept_fnptr_glColorSubTableEXT == NULL) {
      __glintercept_fnptr_glColorSubTableEXT = (__ctype_glColorSubTableEXT) eglGetProcAddr("glColorSubTableEXT");
    }
    if (__glintercept_fnptr_glColorSubTableEXT == NULL) return NULL;
    return (void*) __glintercept_glColorSubTableEXT;
  }
  if (strcmp(name, "glColorTable") == 0) {
    if (__glintercept_fnptr_glColorTable == NULL) {
      __glintercept_fnptr_glColorTable = (__ctype_glColorTable) eglGetProcAddr("glColorTable");
    }
    if (__glintercept_fnptr_glColorTable == NULL) return NULL;
    return (void*) __glintercept_glColorTable;
  }
  if (strcmp(name, "glColorTableEXT") == 0) {
    if (__glintercept_fnptr_glColorTableEXT == NULL) {
      __glintercept_fnptr_glColorTableEXT = (__ctype_glColorTableEXT) eglGetProcAddr("glColorTableEXT");
    }
    if (__glintercept_fnptr_glColorTableEXT == NULL) return NULL;
    return (void*) __glintercept_glColorTableEXT;
  }
  if (strcmp(name, "glColorTableParameterfv") == 0) {
    if (__glintercept_fnptr_glColorTableParameterfv == NULL) {
      __glintercept_fnptr_glColorTableParameterfv = (__ctype_glColorTableParameterfv) eglGetProcAddr("glColorTableParameterfv");
    }
    if (__glintercept_fnptr_glColorTableParameterfv == NULL) return NULL;
    return (void*) __glintercept_glColorTableParameterfv;
  }
  if (strcmp(name, "glColorTableParameterfvSGI") == 0) {
    if (__glintercept_fnptr_glColorTableParameterfvSGI == NULL) {
      __glintercept_fnptr_glColorTableParameterfvSGI = (__ctype_glColorTableParameterfvSGI) eglGetProcAddr("glColorTableParameterfvSGI");
    }
    if (__glintercept_fnptr_glColorTableParameterfvSGI == NULL) return NULL;
    return (void*) __glintercept_glColorTableParameterfvSGI;
  }
  if (strcmp(name, "glColorTableParameteriv") == 0) {
    if (__glintercept_fnptr_glColorTableParameteriv == NULL) {
      __glintercept_fnptr_glColorTableParameteriv = (__ctype_glColorTableParameteriv) eglGetProcAddr("glColorTableParameteriv");
    }
    if (__glintercept_fnptr_glColorTableParameteriv == NULL) return NULL;
    return (void*) __glintercept_glColorTableParameteriv;
  }
  if (strcmp(name, "glColorTableParameterivSGI") == 0) {
    if (__glintercept_fnptr_glColorTableParameterivSGI == NULL) {
      __glintercept_fnptr_glColorTableParameterivSGI = (__ctype_glColorTableParameterivSGI) eglGetProcAddr("glColorTableParameterivSGI");
    }
    if (__glintercept_fnptr_glColorTableParameterivSGI == NULL) return NULL;
    return (void*) __glintercept_glColorTableParameterivSGI;
  }
  if (strcmp(name, "glColorTableSGI") == 0) {
    if (__glintercept_fnptr_glColorTableSGI == NULL) {
      __glintercept_fnptr_glColorTableSGI = (__ctype_glColorTableSGI) eglGetProcAddr("glColorTableSGI");
    }
    if (__glintercept_fnptr_glColorTableSGI == NULL) return NULL;
    return (void*) __glintercept_glColorTableSGI;
  }
  if (strcmp(name, "glCombinerInputNV") == 0) {
    if (__glintercept_fnptr_glCombinerInputNV == NULL) {
      __glintercept_fnptr_glCombinerInputNV = (__ctype_glCombinerInputNV) eglGetProcAddr("glCombinerInputNV");
    }
    if (__glintercept_fnptr_glCombinerInputNV == NULL) return NULL;
    return (void*) __glintercept_glCombinerInputNV;
  }
  if (strcmp(name, "glCombinerOutputNV") == 0) {
    if (__glintercept_fnptr_glCombinerOutputNV == NULL) {
      __glintercept_fnptr_glCombinerOutputNV = (__ctype_glCombinerOutputNV) eglGetProcAddr("glCombinerOutputNV");
    }
    if (__glintercept_fnptr_glCombinerOutputNV == NULL) return NULL;
    return (void*) __glintercept_glCombinerOutputNV;
  }
  if (strcmp(name, "glCombinerParameterfNV") == 0) {
    if (__glintercept_fnptr_glCombinerParameterfNV == NULL) {
      __glintercept_fnptr_glCombinerParameterfNV = (__ctype_glCombinerParameterfNV) eglGetProcAddr("glCombinerParameterfNV");
    }
    if (__glintercept_fnptr_glCombinerParameterfNV == NULL) return NULL;
    return (void*) __glintercept_glCombinerParameterfNV;
  }
  if (strcmp(name, "glCombinerParameterfvNV") == 0) {
    if (__glintercept_fnptr_glCombinerParameterfvNV == NULL) {
      __glintercept_fnptr_glCombinerParameterfvNV = (__ctype_glCombinerParameterfvNV) eglGetProcAddr("glCombinerParameterfvNV");
    }
    if (__glintercept_fnptr_glCombinerParameterfvNV == NULL) return NULL;
    return (void*) __glintercept_glCombinerParameterfvNV;
  }
  if (strcmp(name, "glCombinerParameteriNV") == 0) {
    if (__glintercept_fnptr_glCombinerParameteriNV == NULL) {
      __glintercept_fnptr_glCombinerParameteriNV = (__ctype_glCombinerParameteriNV) eglGetProcAddr("glCombinerParameteriNV");
    }
    if (__glintercept_fnptr_glCombinerParameteriNV == NULL) return NULL;
    return (void*) __glintercept_glCombinerParameteriNV;
  }
  if (strcmp(name, "glCombinerParameterivNV") == 0) {
    if (__glintercept_fnptr_glCombinerParameterivNV == NULL) {
      __glintercept_fnptr_glCombinerParameterivNV = (__ctype_glCombinerParameterivNV) eglGetProcAddr("glCombinerParameterivNV");
    }
    if (__glintercept_fnptr_glCombinerParameterivNV == NULL) return NULL;
    return (void*) __glintercept_glCombinerParameterivNV;
  }
  if (strcmp(name, "glCombinerStageParameterfvNV") == 0) {
    if (__glintercept_fnptr_glCombinerStageParameterfvNV == NULL) {
      __glintercept_fnptr_glCombinerStageParameterfvNV = (__ctype_glCombinerStageParameterfvNV) eglGetProcAddr("glCombinerStageParameterfvNV");
    }
    if (__glintercept_fnptr_glCombinerStageParameterfvNV == NULL) return NULL;
    return (void*) __glintercept_glCombinerStageParameterfvNV;
  }
  if (strcmp(name, "glCommandListSegmentsNV") == 0) {
    if (__glintercept_fnptr_glCommandListSegmentsNV == NULL) {
      __glintercept_fnptr_glCommandListSegmentsNV = (__ctype_glCommandListSegmentsNV) eglGetProcAddr("glCommandListSegmentsNV");
    }
    if (__glintercept_fnptr_glCommandListSegmentsNV == NULL) return NULL;
    return (void*) __glintercept_glCommandListSegmentsNV;
  }
  if (strcmp(name, "glCompileCommandListNV") == 0) {
    if (__glintercept_fnptr_glCompileCommandListNV == NULL) {
      __glintercept_fnptr_glCompileCommandListNV = (__ctype_glCompileCommandListNV) eglGetProcAddr("glCompileCommandListNV");
    }
    if (__glintercept_fnptr_glCompileCommandListNV == NULL) return NULL;
    return (void*) __glintercept_glCompileCommandListNV;
  }
  if (strcmp(name, "glCompileShader") == 0) {
    if (__glintercept_fnptr_glCompileShader == NULL) {
      __glintercept_fnptr_glCompileShader = (__ctype_glCompileShader) eglGetProcAddr("glCompileShader");
    }
    if (__glintercept_fnptr_glCompileShader == NULL) return NULL;
    return (void*) __glintercept_glCompileShader;
  }
  if (strcmp(name, "glCompileShaderARB") == 0) {
    if (__glintercept_fnptr_glCompileShaderARB == NULL) {
      __glintercept_fnptr_glCompileShaderARB = (__ctype_glCompileShaderARB) eglGetProcAddr("glCompileShaderARB");
    }
    if (__glintercept_fnptr_glCompileShaderARB == NULL) return NULL;
    return (void*) __glintercept_glCompileShaderARB;
  }
  if (strcmp(name, "glCompileShaderIncludeARB") == 0) {
    if (__glintercept_fnptr_glCompileShaderIncludeARB == NULL) {
      __glintercept_fnptr_glCompileShaderIncludeARB = (__ctype_glCompileShaderIncludeARB) eglGetProcAddr("glCompileShaderIncludeARB");
    }
    if (__glintercept_fnptr_glCompileShaderIncludeARB == NULL) return NULL;
    return (void*) __glintercept_glCompileShaderIncludeARB;
  }
  if (strcmp(name, "glCompressedMultiTexImage1DEXT") == 0) {
    if (__glintercept_fnptr_glCompressedMultiTexImage1DEXT == NULL) {
      __glintercept_fnptr_glCompressedMultiTexImage1DEXT = (__ctype_glCompressedMultiTexImage1DEXT) eglGetProcAddr("glCompressedMultiTexImage1DEXT");
    }
    if (__glintercept_fnptr_glCompressedMultiTexImage1DEXT == NULL) return NULL;
    return (void*) __glintercept_glCompressedMultiTexImage1DEXT;
  }
  if (strcmp(name, "glCompressedMultiTexImage2DEXT") == 0) {
    if (__glintercept_fnptr_glCompressedMultiTexImage2DEXT == NULL) {
      __glintercept_fnptr_glCompressedMultiTexImage2DEXT = (__ctype_glCompressedMultiTexImage2DEXT) eglGetProcAddr("glCompressedMultiTexImage2DEXT");
    }
    if (__glintercept_fnptr_glCompressedMultiTexImage2DEXT == NULL) return NULL;
    return (void*) __glintercept_glCompressedMultiTexImage2DEXT;
  }
  if (strcmp(name, "glCompressedMultiTexImage3DEXT") == 0) {
    if (__glintercept_fnptr_glCompressedMultiTexImage3DEXT == NULL) {
      __glintercept_fnptr_glCompressedMultiTexImage3DEXT = (__ctype_glCompressedMultiTexImage3DEXT) eglGetProcAddr("glCompressedMultiTexImage3DEXT");
    }
    if (__glintercept_fnptr_glCompressedMultiTexImage3DEXT == NULL) return NULL;
    return (void*) __glintercept_glCompressedMultiTexImage3DEXT;
  }
  if (strcmp(name, "glCompressedMultiTexSubImage1DEXT") == 0) {
    if (__glintercept_fnptr_glCompressedMultiTexSubImage1DEXT == NULL) {
      __glintercept_fnptr_glCompressedMultiTexSubImage1DEXT = (__ctype_glCompressedMultiTexSubImage1DEXT) eglGetProcAddr("glCompressedMultiTexSubImage1DEXT");
    }
    if (__glintercept_fnptr_glCompressedMultiTexSubImage1DEXT == NULL) return NULL;
    return (void*) __glintercept_glCompressedMultiTexSubImage1DEXT;
  }
  if (strcmp(name, "glCompressedMultiTexSubImage2DEXT") == 0) {
    if (__glintercept_fnptr_glCompressedMultiTexSubImage2DEXT == NULL) {
      __glintercept_fnptr_glCompressedMultiTexSubImage2DEXT = (__ctype_glCompressedMultiTexSubImage2DEXT) eglGetProcAddr("glCompressedMultiTexSubImage2DEXT");
    }
    if (__glintercept_fnptr_glCompressedMultiTexSubImage2DEXT == NULL) return NULL;
    return (void*) __glintercept_glCompressedMultiTexSubImage2DEXT;
  }
  if (strcmp(name, "glCompressedMultiTexSubImage3DEXT") == 0) {
    if (__glintercept_fnptr_glCompressedMultiTexSubImage3DEXT == NULL) {
      __glintercept_fnptr_glCompressedMultiTexSubImage3DEXT = (__ctype_glCompressedMultiTexSubImage3DEXT) eglGetProcAddr("glCompressedMultiTexSubImage3DEXT");
    }
    if (__glintercept_fnptr_glCompressedMultiTexSubImage3DEXT == NULL) return NULL;
    return (void*) __glintercept_glCompressedMultiTexSubImage3DEXT;
  }
  if (strcmp(name, "glCompressedTexImage1D") == 0) {
    if (__glintercept_fnptr_glCompressedTexImage1D == NULL) {
      __glintercept_fnptr_glCompressedTexImage1D = (__ctype_glCompressedTexImage1D) eglGetProcAddr("glCompressedTexImage1D");
    }
    if (__glintercept_fnptr_glCompressedTexImage1D == NULL) return NULL;
    return (void*) __glintercept_glCompressedTexImage1D;
  }
  if (strcmp(name, "glCompressedTexImage1DARB") == 0) {
    if (__glintercept_fnptr_glCompressedTexImage1DARB == NULL) {
      __glintercept_fnptr_glCompressedTexImage1DARB = (__ctype_glCompressedTexImage1DARB) eglGetProcAddr("glCompressedTexImage1DARB");
    }
    if (__glintercept_fnptr_glCompressedTexImage1DARB == NULL) return NULL;
    return (void*) __glintercept_glCompressedTexImage1DARB;
  }
  if (strcmp(name, "glCompressedTexImage2D") == 0) {
    if (__glintercept_fnptr_glCompressedTexImage2D == NULL) {
      __glintercept_fnptr_glCompressedTexImage2D = (__ctype_glCompressedTexImage2D) eglGetProcAddr("glCompressedTexImage2D");
    }
    if (__glintercept_fnptr_glCompressedTexImage2D == NULL) return NULL;
    return (void*) __glintercept_glCompressedTexImage2D;
  }
  if (strcmp(name, "glCompressedTexImage2DARB") == 0) {
    if (__glintercept_fnptr_glCompressedTexImage2DARB == NULL) {
      __glintercept_fnptr_glCompressedTexImage2DARB = (__ctype_glCompressedTexImage2DARB) eglGetProcAddr("glCompressedTexImage2DARB");
    }
    if (__glintercept_fnptr_glCompressedTexImage2DARB == NULL) return NULL;
    return (void*) __glintercept_glCompressedTexImage2DARB;
  }
  if (strcmp(name, "glCompressedTexImage3D") == 0) {
    if (__glintercept_fnptr_glCompressedTexImage3D == NULL) {
      __glintercept_fnptr_glCompressedTexImage3D = (__ctype_glCompressedTexImage3D) eglGetProcAddr("glCompressedTexImage3D");
    }
    if (__glintercept_fnptr_glCompressedTexImage3D == NULL) return NULL;
    return (void*) __glintercept_glCompressedTexImage3D;
  }
  if (strcmp(name, "glCompressedTexImage3DARB") == 0) {
    if (__glintercept_fnptr_glCompressedTexImage3DARB == NULL) {
      __glintercept_fnptr_glCompressedTexImage3DARB = (__ctype_glCompressedTexImage3DARB) eglGetProcAddr("glCompressedTexImage3DARB");
    }
    if (__glintercept_fnptr_glCompressedTexImage3DARB == NULL) return NULL;
    return (void*) __glintercept_glCompressedTexImage3DARB;
  }
  if (strcmp(name, "glCompressedTexImage3DOES") == 0) {
    if (__glintercept_fnptr_glCompressedTexImage3DOES == NULL) {
      __glintercept_fnptr_glCompressedTexImage3DOES = (__ctype_glCompressedTexImage3DOES) eglGetProcAddr("glCompressedTexImage3DOES");
    }
    if (__glintercept_fnptr_glCompressedTexImage3DOES == NULL) return NULL;
    return (void*) __glintercept_glCompressedTexImage3DOES;
  }
  if (strcmp(name, "glCompressedTexSubImage1D") == 0) {
    if (__glintercept_fnptr_glCompressedTexSubImage1D == NULL) {
      __glintercept_fnptr_glCompressedTexSubImage1D = (__ctype_glCompressedTexSubImage1D) eglGetProcAddr("glCompressedTexSubImage1D");
    }
    if (__glintercept_fnptr_glCompressedTexSubImage1D == NULL) return NULL;
    return (void*) __glintercept_glCompressedTexSubImage1D;
  }
  if (strcmp(name, "glCompressedTexSubImage1DARB") == 0) {
    if (__glintercept_fnptr_glCompressedTexSubImage1DARB == NULL) {
      __glintercept_fnptr_glCompressedTexSubImage1DARB = (__ctype_glCompressedTexSubImage1DARB) eglGetProcAddr("glCompressedTexSubImage1DARB");
    }
    if (__glintercept_fnptr_glCompressedTexSubImage1DARB == NULL) return NULL;
    return (void*) __glintercept_glCompressedTexSubImage1DARB;
  }
  if (strcmp(name, "glCompressedTexSubImage2D") == 0) {
    if (__glintercept_fnptr_glCompressedTexSubImage2D == NULL) {
      __glintercept_fnptr_glCompressedTexSubImage2D = (__ctype_glCompressedTexSubImage2D) eglGetProcAddr("glCompressedTexSubImage2D");
    }
    if (__glintercept_fnptr_glCompressedTexSubImage2D == NULL) return NULL;
    return (void*) __glintercept_glCompressedTexSubImage2D;
  }
  if (strcmp(name, "glCompressedTexSubImage2DARB") == 0) {
    if (__glintercept_fnptr_glCompressedTexSubImage2DARB == NULL) {
      __glintercept_fnptr_glCompressedTexSubImage2DARB = (__ctype_glCompressedTexSubImage2DARB) eglGetProcAddr("glCompressedTexSubImage2DARB");
    }
    if (__glintercept_fnptr_glCompressedTexSubImage2DARB == NULL) return NULL;
    return (void*) __glintercept_glCompressedTexSubImage2DARB;
  }
  if (strcmp(name, "glCompressedTexSubImage3D") == 0) {
    if (__glintercept_fnptr_glCompressedTexSubImage3D == NULL) {
      __glintercept_fnptr_glCompressedTexSubImage3D = (__ctype_glCompressedTexSubImage3D) eglGetProcAddr("glCompressedTexSubImage3D");
    }
    if (__glintercept_fnptr_glCompressedTexSubImage3D == NULL) return NULL;
    return (void*) __glintercept_glCompressedTexSubImage3D;
  }
  if (strcmp(name, "glCompressedTexSubImage3DARB") == 0) {
    if (__glintercept_fnptr_glCompressedTexSubImage3DARB == NULL) {
      __glintercept_fnptr_glCompressedTexSubImage3DARB = (__ctype_glCompressedTexSubImage3DARB) eglGetProcAddr("glCompressedTexSubImage3DARB");
    }
    if (__glintercept_fnptr_glCompressedTexSubImage3DARB == NULL) return NULL;
    return (void*) __glintercept_glCompressedTexSubImage3DARB;
  }
  if (strcmp(name, "glCompressedTexSubImage3DOES") == 0) {
    if (__glintercept_fnptr_glCompressedTexSubImage3DOES == NULL) {
      __glintercept_fnptr_glCompressedTexSubImage3DOES = (__ctype_glCompressedTexSubImage3DOES) eglGetProcAddr("glCompressedTexSubImage3DOES");
    }
    if (__glintercept_fnptr_glCompressedTexSubImage3DOES == NULL) return NULL;
    return (void*) __glintercept_glCompressedTexSubImage3DOES;
  }
  if (strcmp(name, "glCompressedTextureImage1DEXT") == 0) {
    if (__glintercept_fnptr_glCompressedTextureImage1DEXT == NULL) {
      __glintercept_fnptr_glCompressedTextureImage1DEXT = (__ctype_glCompressedTextureImage1DEXT) eglGetProcAddr("glCompressedTextureImage1DEXT");
    }
    if (__glintercept_fnptr_glCompressedTextureImage1DEXT == NULL) return NULL;
    return (void*) __glintercept_glCompressedTextureImage1DEXT;
  }
  if (strcmp(name, "glCompressedTextureImage2DEXT") == 0) {
    if (__glintercept_fnptr_glCompressedTextureImage2DEXT == NULL) {
      __glintercept_fnptr_glCompressedTextureImage2DEXT = (__ctype_glCompressedTextureImage2DEXT) eglGetProcAddr("glCompressedTextureImage2DEXT");
    }
    if (__glintercept_fnptr_glCompressedTextureImage2DEXT == NULL) return NULL;
    return (void*) __glintercept_glCompressedTextureImage2DEXT;
  }
  if (strcmp(name, "glCompressedTextureImage3DEXT") == 0) {
    if (__glintercept_fnptr_glCompressedTextureImage3DEXT == NULL) {
      __glintercept_fnptr_glCompressedTextureImage3DEXT = (__ctype_glCompressedTextureImage3DEXT) eglGetProcAddr("glCompressedTextureImage3DEXT");
    }
    if (__glintercept_fnptr_glCompressedTextureImage3DEXT == NULL) return NULL;
    return (void*) __glintercept_glCompressedTextureImage3DEXT;
  }
  if (strcmp(name, "glCompressedTextureSubImage1D") == 0) {
    if (__glintercept_fnptr_glCompressedTextureSubImage1D == NULL) {
      __glintercept_fnptr_glCompressedTextureSubImage1D = (__ctype_glCompressedTextureSubImage1D) eglGetProcAddr("glCompressedTextureSubImage1D");
    }
    if (__glintercept_fnptr_glCompressedTextureSubImage1D == NULL) return NULL;
    return (void*) __glintercept_glCompressedTextureSubImage1D;
  }
  if (strcmp(name, "glCompressedTextureSubImage1DEXT") == 0) {
    if (__glintercept_fnptr_glCompressedTextureSubImage1DEXT == NULL) {
      __glintercept_fnptr_glCompressedTextureSubImage1DEXT = (__ctype_glCompressedTextureSubImage1DEXT) eglGetProcAddr("glCompressedTextureSubImage1DEXT");
    }
    if (__glintercept_fnptr_glCompressedTextureSubImage1DEXT == NULL) return NULL;
    return (void*) __glintercept_glCompressedTextureSubImage1DEXT;
  }
  if (strcmp(name, "glCompressedTextureSubImage2D") == 0) {
    if (__glintercept_fnptr_glCompressedTextureSubImage2D == NULL) {
      __glintercept_fnptr_glCompressedTextureSubImage2D = (__ctype_glCompressedTextureSubImage2D) eglGetProcAddr("glCompressedTextureSubImage2D");
    }
    if (__glintercept_fnptr_glCompressedTextureSubImage2D == NULL) return NULL;
    return (void*) __glintercept_glCompressedTextureSubImage2D;
  }
  if (strcmp(name, "glCompressedTextureSubImage2DEXT") == 0) {
    if (__glintercept_fnptr_glCompressedTextureSubImage2DEXT == NULL) {
      __glintercept_fnptr_glCompressedTextureSubImage2DEXT = (__ctype_glCompressedTextureSubImage2DEXT) eglGetProcAddr("glCompressedTextureSubImage2DEXT");
    }
    if (__glintercept_fnptr_glCompressedTextureSubImage2DEXT == NULL) return NULL;
    return (void*) __glintercept_glCompressedTextureSubImage2DEXT;
  }
  if (strcmp(name, "glCompressedTextureSubImage3D") == 0) {
    if (__glintercept_fnptr_glCompressedTextureSubImage3D == NULL) {
      __glintercept_fnptr_glCompressedTextureSubImage3D = (__ctype_glCompressedTextureSubImage3D) eglGetProcAddr("glCompressedTextureSubImage3D");
    }
    if (__glintercept_fnptr_glCompressedTextureSubImage3D == NULL) return NULL;
    return (void*) __glintercept_glCompressedTextureSubImage3D;
  }
  if (strcmp(name, "glCompressedTextureSubImage3DEXT") == 0) {
    if (__glintercept_fnptr_glCompressedTextureSubImage3DEXT == NULL) {
      __glintercept_fnptr_glCompressedTextureSubImage3DEXT = (__ctype_glCompressedTextureSubImage3DEXT) eglGetProcAddr("glCompressedTextureSubImage3DEXT");
    }
    if (__glintercept_fnptr_glCompressedTextureSubImage3DEXT == NULL) return NULL;
    return (void*) __glintercept_glCompressedTextureSubImage3DEXT;
  }
  if (strcmp(name, "glConservativeRasterParameterfNV") == 0) {
    if (__glintercept_fnptr_glConservativeRasterParameterfNV == NULL) {
      __glintercept_fnptr_glConservativeRasterParameterfNV = (__ctype_glConservativeRasterParameterfNV) eglGetProcAddr("glConservativeRasterParameterfNV");
    }
    if (__glintercept_fnptr_glConservativeRasterParameterfNV == NULL) return NULL;
    return (void*) __glintercept_glConservativeRasterParameterfNV;
  }
  if (strcmp(name, "glConservativeRasterParameteriNV") == 0) {
    if (__glintercept_fnptr_glConservativeRasterParameteriNV == NULL) {
      __glintercept_fnptr_glConservativeRasterParameteriNV = (__ctype_glConservativeRasterParameteriNV) eglGetProcAddr("glConservativeRasterParameteriNV");
    }
    if (__glintercept_fnptr_glConservativeRasterParameteriNV == NULL) return NULL;
    return (void*) __glintercept_glConservativeRasterParameteriNV;
  }
  if (strcmp(name, "glConvolutionFilter1D") == 0) {
    if (__glintercept_fnptr_glConvolutionFilter1D == NULL) {
      __glintercept_fnptr_glConvolutionFilter1D = (__ctype_glConvolutionFilter1D) eglGetProcAddr("glConvolutionFilter1D");
    }
    if (__glintercept_fnptr_glConvolutionFilter1D == NULL) return NULL;
    return (void*) __glintercept_glConvolutionFilter1D;
  }
  if (strcmp(name, "glConvolutionFilter1DEXT") == 0) {
    if (__glintercept_fnptr_glConvolutionFilter1DEXT == NULL) {
      __glintercept_fnptr_glConvolutionFilter1DEXT = (__ctype_glConvolutionFilter1DEXT) eglGetProcAddr("glConvolutionFilter1DEXT");
    }
    if (__glintercept_fnptr_glConvolutionFilter1DEXT == NULL) return NULL;
    return (void*) __glintercept_glConvolutionFilter1DEXT;
  }
  if (strcmp(name, "glConvolutionFilter2D") == 0) {
    if (__glintercept_fnptr_glConvolutionFilter2D == NULL) {
      __glintercept_fnptr_glConvolutionFilter2D = (__ctype_glConvolutionFilter2D) eglGetProcAddr("glConvolutionFilter2D");
    }
    if (__glintercept_fnptr_glConvolutionFilter2D == NULL) return NULL;
    return (void*) __glintercept_glConvolutionFilter2D;
  }
  if (strcmp(name, "glConvolutionFilter2DEXT") == 0) {
    if (__glintercept_fnptr_glConvolutionFilter2DEXT == NULL) {
      __glintercept_fnptr_glConvolutionFilter2DEXT = (__ctype_glConvolutionFilter2DEXT) eglGetProcAddr("glConvolutionFilter2DEXT");
    }
    if (__glintercept_fnptr_glConvolutionFilter2DEXT == NULL) return NULL;
    return (void*) __glintercept_glConvolutionFilter2DEXT;
  }
  if (strcmp(name, "glConvolutionParameterf") == 0) {
    if (__glintercept_fnptr_glConvolutionParameterf == NULL) {
      __glintercept_fnptr_glConvolutionParameterf = (__ctype_glConvolutionParameterf) eglGetProcAddr("glConvolutionParameterf");
    }
    if (__glintercept_fnptr_glConvolutionParameterf == NULL) return NULL;
    return (void*) __glintercept_glConvolutionParameterf;
  }
  if (strcmp(name, "glConvolutionParameterfEXT") == 0) {
    if (__glintercept_fnptr_glConvolutionParameterfEXT == NULL) {
      __glintercept_fnptr_glConvolutionParameterfEXT = (__ctype_glConvolutionParameterfEXT) eglGetProcAddr("glConvolutionParameterfEXT");
    }
    if (__glintercept_fnptr_glConvolutionParameterfEXT == NULL) return NULL;
    return (void*) __glintercept_glConvolutionParameterfEXT;
  }
  if (strcmp(name, "glConvolutionParameterfv") == 0) {
    if (__glintercept_fnptr_glConvolutionParameterfv == NULL) {
      __glintercept_fnptr_glConvolutionParameterfv = (__ctype_glConvolutionParameterfv) eglGetProcAddr("glConvolutionParameterfv");
    }
    if (__glintercept_fnptr_glConvolutionParameterfv == NULL) return NULL;
    return (void*) __glintercept_glConvolutionParameterfv;
  }
  if (strcmp(name, "glConvolutionParameterfvEXT") == 0) {
    if (__glintercept_fnptr_glConvolutionParameterfvEXT == NULL) {
      __glintercept_fnptr_glConvolutionParameterfvEXT = (__ctype_glConvolutionParameterfvEXT) eglGetProcAddr("glConvolutionParameterfvEXT");
    }
    if (__glintercept_fnptr_glConvolutionParameterfvEXT == NULL) return NULL;
    return (void*) __glintercept_glConvolutionParameterfvEXT;
  }
  if (strcmp(name, "glConvolutionParameteri") == 0) {
    if (__glintercept_fnptr_glConvolutionParameteri == NULL) {
      __glintercept_fnptr_glConvolutionParameteri = (__ctype_glConvolutionParameteri) eglGetProcAddr("glConvolutionParameteri");
    }
    if (__glintercept_fnptr_glConvolutionParameteri == NULL) return NULL;
    return (void*) __glintercept_glConvolutionParameteri;
  }
  if (strcmp(name, "glConvolutionParameteriEXT") == 0) {
    if (__glintercept_fnptr_glConvolutionParameteriEXT == NULL) {
      __glintercept_fnptr_glConvolutionParameteriEXT = (__ctype_glConvolutionParameteriEXT) eglGetProcAddr("glConvolutionParameteriEXT");
    }
    if (__glintercept_fnptr_glConvolutionParameteriEXT == NULL) return NULL;
    return (void*) __glintercept_glConvolutionParameteriEXT;
  }
  if (strcmp(name, "glConvolutionParameteriv") == 0) {
    if (__glintercept_fnptr_glConvolutionParameteriv == NULL) {
      __glintercept_fnptr_glConvolutionParameteriv = (__ctype_glConvolutionParameteriv) eglGetProcAddr("glConvolutionParameteriv");
    }
    if (__glintercept_fnptr_glConvolutionParameteriv == NULL) return NULL;
    return (void*) __glintercept_glConvolutionParameteriv;
  }
  if (strcmp(name, "glConvolutionParameterivEXT") == 0) {
    if (__glintercept_fnptr_glConvolutionParameterivEXT == NULL) {
      __glintercept_fnptr_glConvolutionParameterivEXT = (__ctype_glConvolutionParameterivEXT) eglGetProcAddr("glConvolutionParameterivEXT");
    }
    if (__glintercept_fnptr_glConvolutionParameterivEXT == NULL) return NULL;
    return (void*) __glintercept_glConvolutionParameterivEXT;
  }
  if (strcmp(name, "glConvolutionParameterxOES") == 0) {
    if (__glintercept_fnptr_glConvolutionParameterxOES == NULL) {
      __glintercept_fnptr_glConvolutionParameterxOES = (__ctype_glConvolutionParameterxOES) eglGetProcAddr("glConvolutionParameterxOES");
    }
    if (__glintercept_fnptr_glConvolutionParameterxOES == NULL) return NULL;
    return (void*) __glintercept_glConvolutionParameterxOES;
  }
  if (strcmp(name, "glConvolutionParameterxvOES") == 0) {
    if (__glintercept_fnptr_glConvolutionParameterxvOES == NULL) {
      __glintercept_fnptr_glConvolutionParameterxvOES = (__ctype_glConvolutionParameterxvOES) eglGetProcAddr("glConvolutionParameterxvOES");
    }
    if (__glintercept_fnptr_glConvolutionParameterxvOES == NULL) return NULL;
    return (void*) __glintercept_glConvolutionParameterxvOES;
  }
  if (strcmp(name, "glCopyBufferSubData") == 0) {
    if (__glintercept_fnptr_glCopyBufferSubData == NULL) {
      __glintercept_fnptr_glCopyBufferSubData = (__ctype_glCopyBufferSubData) eglGetProcAddr("glCopyBufferSubData");
    }
    if (__glintercept_fnptr_glCopyBufferSubData == NULL) return NULL;
    return (void*) __glintercept_glCopyBufferSubData;
  }
  if (strcmp(name, "glCopyBufferSubDataNV") == 0) {
    if (__glintercept_fnptr_glCopyBufferSubDataNV == NULL) {
      __glintercept_fnptr_glCopyBufferSubDataNV = (__ctype_glCopyBufferSubDataNV) eglGetProcAddr("glCopyBufferSubDataNV");
    }
    if (__glintercept_fnptr_glCopyBufferSubDataNV == NULL) return NULL;
    return (void*) __glintercept_glCopyBufferSubDataNV;
  }
  if (strcmp(name, "glCopyColorSubTable") == 0) {
    if (__glintercept_fnptr_glCopyColorSubTable == NULL) {
      __glintercept_fnptr_glCopyColorSubTable = (__ctype_glCopyColorSubTable) eglGetProcAddr("glCopyColorSubTable");
    }
    if (__glintercept_fnptr_glCopyColorSubTable == NULL) return NULL;
    return (void*) __glintercept_glCopyColorSubTable;
  }
  if (strcmp(name, "glCopyColorSubTableEXT") == 0) {
    if (__glintercept_fnptr_glCopyColorSubTableEXT == NULL) {
      __glintercept_fnptr_glCopyColorSubTableEXT = (__ctype_glCopyColorSubTableEXT) eglGetProcAddr("glCopyColorSubTableEXT");
    }
    if (__glintercept_fnptr_glCopyColorSubTableEXT == NULL) return NULL;
    return (void*) __glintercept_glCopyColorSubTableEXT;
  }
  if (strcmp(name, "glCopyColorTable") == 0) {
    if (__glintercept_fnptr_glCopyColorTable == NULL) {
      __glintercept_fnptr_glCopyColorTable = (__ctype_glCopyColorTable) eglGetProcAddr("glCopyColorTable");
    }
    if (__glintercept_fnptr_glCopyColorTable == NULL) return NULL;
    return (void*) __glintercept_glCopyColorTable;
  }
  if (strcmp(name, "glCopyColorTableSGI") == 0) {
    if (__glintercept_fnptr_glCopyColorTableSGI == NULL) {
      __glintercept_fnptr_glCopyColorTableSGI = (__ctype_glCopyColorTableSGI) eglGetProcAddr("glCopyColorTableSGI");
    }
    if (__glintercept_fnptr_glCopyColorTableSGI == NULL) return NULL;
    return (void*) __glintercept_glCopyColorTableSGI;
  }
  if (strcmp(name, "glCopyConvolutionFilter1D") == 0) {
    if (__glintercept_fnptr_glCopyConvolutionFilter1D == NULL) {
      __glintercept_fnptr_glCopyConvolutionFilter1D = (__ctype_glCopyConvolutionFilter1D) eglGetProcAddr("glCopyConvolutionFilter1D");
    }
    if (__glintercept_fnptr_glCopyConvolutionFilter1D == NULL) return NULL;
    return (void*) __glintercept_glCopyConvolutionFilter1D;
  }
  if (strcmp(name, "glCopyConvolutionFilter1DEXT") == 0) {
    if (__glintercept_fnptr_glCopyConvolutionFilter1DEXT == NULL) {
      __glintercept_fnptr_glCopyConvolutionFilter1DEXT = (__ctype_glCopyConvolutionFilter1DEXT) eglGetProcAddr("glCopyConvolutionFilter1DEXT");
    }
    if (__glintercept_fnptr_glCopyConvolutionFilter1DEXT == NULL) return NULL;
    return (void*) __glintercept_glCopyConvolutionFilter1DEXT;
  }
  if (strcmp(name, "glCopyConvolutionFilter2D") == 0) {
    if (__glintercept_fnptr_glCopyConvolutionFilter2D == NULL) {
      __glintercept_fnptr_glCopyConvolutionFilter2D = (__ctype_glCopyConvolutionFilter2D) eglGetProcAddr("glCopyConvolutionFilter2D");
    }
    if (__glintercept_fnptr_glCopyConvolutionFilter2D == NULL) return NULL;
    return (void*) __glintercept_glCopyConvolutionFilter2D;
  }
  if (strcmp(name, "glCopyConvolutionFilter2DEXT") == 0) {
    if (__glintercept_fnptr_glCopyConvolutionFilter2DEXT == NULL) {
      __glintercept_fnptr_glCopyConvolutionFilter2DEXT = (__ctype_glCopyConvolutionFilter2DEXT) eglGetProcAddr("glCopyConvolutionFilter2DEXT");
    }
    if (__glintercept_fnptr_glCopyConvolutionFilter2DEXT == NULL) return NULL;
    return (void*) __glintercept_glCopyConvolutionFilter2DEXT;
  }
  if (strcmp(name, "glCopyImageSubData") == 0) {
    if (__glintercept_fnptr_glCopyImageSubData == NULL) {
      __glintercept_fnptr_glCopyImageSubData = (__ctype_glCopyImageSubData) eglGetProcAddr("glCopyImageSubData");
    }
    if (__glintercept_fnptr_glCopyImageSubData == NULL) return NULL;
    return (void*) __glintercept_glCopyImageSubData;
  }
  if (strcmp(name, "glCopyImageSubDataEXT") == 0) {
    if (__glintercept_fnptr_glCopyImageSubDataEXT == NULL) {
      __glintercept_fnptr_glCopyImageSubDataEXT = (__ctype_glCopyImageSubDataEXT) eglGetProcAddr("glCopyImageSubDataEXT");
    }
    if (__glintercept_fnptr_glCopyImageSubDataEXT == NULL) return NULL;
    return (void*) __glintercept_glCopyImageSubDataEXT;
  }
  if (strcmp(name, "glCopyImageSubDataNV") == 0) {
    if (__glintercept_fnptr_glCopyImageSubDataNV == NULL) {
      __glintercept_fnptr_glCopyImageSubDataNV = (__ctype_glCopyImageSubDataNV) eglGetProcAddr("glCopyImageSubDataNV");
    }
    if (__glintercept_fnptr_glCopyImageSubDataNV == NULL) return NULL;
    return (void*) __glintercept_glCopyImageSubDataNV;
  }
  if (strcmp(name, "glCopyImageSubDataOES") == 0) {
    if (__glintercept_fnptr_glCopyImageSubDataOES == NULL) {
      __glintercept_fnptr_glCopyImageSubDataOES = (__ctype_glCopyImageSubDataOES) eglGetProcAddr("glCopyImageSubDataOES");
    }
    if (__glintercept_fnptr_glCopyImageSubDataOES == NULL) return NULL;
    return (void*) __glintercept_glCopyImageSubDataOES;
  }
  if (strcmp(name, "glCopyMultiTexImage1DEXT") == 0) {
    if (__glintercept_fnptr_glCopyMultiTexImage1DEXT == NULL) {
      __glintercept_fnptr_glCopyMultiTexImage1DEXT = (__ctype_glCopyMultiTexImage1DEXT) eglGetProcAddr("glCopyMultiTexImage1DEXT");
    }
    if (__glintercept_fnptr_glCopyMultiTexImage1DEXT == NULL) return NULL;
    return (void*) __glintercept_glCopyMultiTexImage1DEXT;
  }
  if (strcmp(name, "glCopyMultiTexImage2DEXT") == 0) {
    if (__glintercept_fnptr_glCopyMultiTexImage2DEXT == NULL) {
      __glintercept_fnptr_glCopyMultiTexImage2DEXT = (__ctype_glCopyMultiTexImage2DEXT) eglGetProcAddr("glCopyMultiTexImage2DEXT");
    }
    if (__glintercept_fnptr_glCopyMultiTexImage2DEXT == NULL) return NULL;
    return (void*) __glintercept_glCopyMultiTexImage2DEXT;
  }
  if (strcmp(name, "glCopyMultiTexSubImage1DEXT") == 0) {
    if (__glintercept_fnptr_glCopyMultiTexSubImage1DEXT == NULL) {
      __glintercept_fnptr_glCopyMultiTexSubImage1DEXT = (__ctype_glCopyMultiTexSubImage1DEXT) eglGetProcAddr("glCopyMultiTexSubImage1DEXT");
    }
    if (__glintercept_fnptr_glCopyMultiTexSubImage1DEXT == NULL) return NULL;
    return (void*) __glintercept_glCopyMultiTexSubImage1DEXT;
  }
  if (strcmp(name, "glCopyMultiTexSubImage2DEXT") == 0) {
    if (__glintercept_fnptr_glCopyMultiTexSubImage2DEXT == NULL) {
      __glintercept_fnptr_glCopyMultiTexSubImage2DEXT = (__ctype_glCopyMultiTexSubImage2DEXT) eglGetProcAddr("glCopyMultiTexSubImage2DEXT");
    }
    if (__glintercept_fnptr_glCopyMultiTexSubImage2DEXT == NULL) return NULL;
    return (void*) __glintercept_glCopyMultiTexSubImage2DEXT;
  }
  if (strcmp(name, "glCopyMultiTexSubImage3DEXT") == 0) {
    if (__glintercept_fnptr_glCopyMultiTexSubImage3DEXT == NULL) {
      __glintercept_fnptr_glCopyMultiTexSubImage3DEXT = (__ctype_glCopyMultiTexSubImage3DEXT) eglGetProcAddr("glCopyMultiTexSubImage3DEXT");
    }
    if (__glintercept_fnptr_glCopyMultiTexSubImage3DEXT == NULL) return NULL;
    return (void*) __glintercept_glCopyMultiTexSubImage3DEXT;
  }
  if (strcmp(name, "glCopyNamedBufferSubData") == 0) {
    if (__glintercept_fnptr_glCopyNamedBufferSubData == NULL) {
      __glintercept_fnptr_glCopyNamedBufferSubData = (__ctype_glCopyNamedBufferSubData) eglGetProcAddr("glCopyNamedBufferSubData");
    }
    if (__glintercept_fnptr_glCopyNamedBufferSubData == NULL) return NULL;
    return (void*) __glintercept_glCopyNamedBufferSubData;
  }
  if (strcmp(name, "glCopyPathNV") == 0) {
    if (__glintercept_fnptr_glCopyPathNV == NULL) {
      __glintercept_fnptr_glCopyPathNV = (__ctype_glCopyPathNV) eglGetProcAddr("glCopyPathNV");
    }
    if (__glintercept_fnptr_glCopyPathNV == NULL) return NULL;
    return (void*) __glintercept_glCopyPathNV;
  }
  if (strcmp(name, "glCopyPixels") == 0) {
    if (__glintercept_fnptr_glCopyPixels == NULL) {
      __glintercept_fnptr_glCopyPixels = (__ctype_glCopyPixels) eglGetProcAddr("glCopyPixels");
    }
    if (__glintercept_fnptr_glCopyPixels == NULL) return NULL;
    return (void*) __glintercept_glCopyPixels;
  }
  if (strcmp(name, "glCopyTexImage1D") == 0) {
    if (__glintercept_fnptr_glCopyTexImage1D == NULL) {
      __glintercept_fnptr_glCopyTexImage1D = (__ctype_glCopyTexImage1D) eglGetProcAddr("glCopyTexImage1D");
    }
    if (__glintercept_fnptr_glCopyTexImage1D == NULL) return NULL;
    return (void*) __glintercept_glCopyTexImage1D;
  }
  if (strcmp(name, "glCopyTexImage1DEXT") == 0) {
    if (__glintercept_fnptr_glCopyTexImage1DEXT == NULL) {
      __glintercept_fnptr_glCopyTexImage1DEXT = (__ctype_glCopyTexImage1DEXT) eglGetProcAddr("glCopyTexImage1DEXT");
    }
    if (__glintercept_fnptr_glCopyTexImage1DEXT == NULL) return NULL;
    return (void*) __glintercept_glCopyTexImage1DEXT;
  }
  if (strcmp(name, "glCopyTexImage2D") == 0) {
    if (__glintercept_fnptr_glCopyTexImage2D == NULL) {
      __glintercept_fnptr_glCopyTexImage2D = (__ctype_glCopyTexImage2D) eglGetProcAddr("glCopyTexImage2D");
    }
    if (__glintercept_fnptr_glCopyTexImage2D == NULL) return NULL;
    return (void*) __glintercept_glCopyTexImage2D;
  }
  if (strcmp(name, "glCopyTexImage2DEXT") == 0) {
    if (__glintercept_fnptr_glCopyTexImage2DEXT == NULL) {
      __glintercept_fnptr_glCopyTexImage2DEXT = (__ctype_glCopyTexImage2DEXT) eglGetProcAddr("glCopyTexImage2DEXT");
    }
    if (__glintercept_fnptr_glCopyTexImage2DEXT == NULL) return NULL;
    return (void*) __glintercept_glCopyTexImage2DEXT;
  }
  if (strcmp(name, "glCopyTexSubImage1D") == 0) {
    if (__glintercept_fnptr_glCopyTexSubImage1D == NULL) {
      __glintercept_fnptr_glCopyTexSubImage1D = (__ctype_glCopyTexSubImage1D) eglGetProcAddr("glCopyTexSubImage1D");
    }
    if (__glintercept_fnptr_glCopyTexSubImage1D == NULL) return NULL;
    return (void*) __glintercept_glCopyTexSubImage1D;
  }
  if (strcmp(name, "glCopyTexSubImage1DEXT") == 0) {
    if (__glintercept_fnptr_glCopyTexSubImage1DEXT == NULL) {
      __glintercept_fnptr_glCopyTexSubImage1DEXT = (__ctype_glCopyTexSubImage1DEXT) eglGetProcAddr("glCopyTexSubImage1DEXT");
    }
    if (__glintercept_fnptr_glCopyTexSubImage1DEXT == NULL) return NULL;
    return (void*) __glintercept_glCopyTexSubImage1DEXT;
  }
  if (strcmp(name, "glCopyTexSubImage2D") == 0) {
    if (__glintercept_fnptr_glCopyTexSubImage2D == NULL) {
      __glintercept_fnptr_glCopyTexSubImage2D = (__ctype_glCopyTexSubImage2D) eglGetProcAddr("glCopyTexSubImage2D");
    }
    if (__glintercept_fnptr_glCopyTexSubImage2D == NULL) return NULL;
    return (void*) __glintercept_glCopyTexSubImage2D;
  }
  if (strcmp(name, "glCopyTexSubImage2DEXT") == 0) {
    if (__glintercept_fnptr_glCopyTexSubImage2DEXT == NULL) {
      __glintercept_fnptr_glCopyTexSubImage2DEXT = (__ctype_glCopyTexSubImage2DEXT) eglGetProcAddr("glCopyTexSubImage2DEXT");
    }
    if (__glintercept_fnptr_glCopyTexSubImage2DEXT == NULL) return NULL;
    return (void*) __glintercept_glCopyTexSubImage2DEXT;
  }
  if (strcmp(name, "glCopyTexSubImage3D") == 0) {
    if (__glintercept_fnptr_glCopyTexSubImage3D == NULL) {
      __glintercept_fnptr_glCopyTexSubImage3D = (__ctype_glCopyTexSubImage3D) eglGetProcAddr("glCopyTexSubImage3D");
    }
    if (__glintercept_fnptr_glCopyTexSubImage3D == NULL) return NULL;
    return (void*) __glintercept_glCopyTexSubImage3D;
  }
  if (strcmp(name, "glCopyTexSubImage3DEXT") == 0) {
    if (__glintercept_fnptr_glCopyTexSubImage3DEXT == NULL) {
      __glintercept_fnptr_glCopyTexSubImage3DEXT = (__ctype_glCopyTexSubImage3DEXT) eglGetProcAddr("glCopyTexSubImage3DEXT");
    }
    if (__glintercept_fnptr_glCopyTexSubImage3DEXT == NULL) return NULL;
    return (void*) __glintercept_glCopyTexSubImage3DEXT;
  }
  if (strcmp(name, "glCopyTexSubImage3DOES") == 0) {
    if (__glintercept_fnptr_glCopyTexSubImage3DOES == NULL) {
      __glintercept_fnptr_glCopyTexSubImage3DOES = (__ctype_glCopyTexSubImage3DOES) eglGetProcAddr("glCopyTexSubImage3DOES");
    }
    if (__glintercept_fnptr_glCopyTexSubImage3DOES == NULL) return NULL;
    return (void*) __glintercept_glCopyTexSubImage3DOES;
  }
  if (strcmp(name, "glCopyTextureImage1DEXT") == 0) {
    if (__glintercept_fnptr_glCopyTextureImage1DEXT == NULL) {
      __glintercept_fnptr_glCopyTextureImage1DEXT = (__ctype_glCopyTextureImage1DEXT) eglGetProcAddr("glCopyTextureImage1DEXT");
    }
    if (__glintercept_fnptr_glCopyTextureImage1DEXT == NULL) return NULL;
    return (void*) __glintercept_glCopyTextureImage1DEXT;
  }
  if (strcmp(name, "glCopyTextureImage2DEXT") == 0) {
    if (__glintercept_fnptr_glCopyTextureImage2DEXT == NULL) {
      __glintercept_fnptr_glCopyTextureImage2DEXT = (__ctype_glCopyTextureImage2DEXT) eglGetProcAddr("glCopyTextureImage2DEXT");
    }
    if (__glintercept_fnptr_glCopyTextureImage2DEXT == NULL) return NULL;
    return (void*) __glintercept_glCopyTextureImage2DEXT;
  }
  if (strcmp(name, "glCopyTextureLevelsAPPLE") == 0) {
    if (__glintercept_fnptr_glCopyTextureLevelsAPPLE == NULL) {
      __glintercept_fnptr_glCopyTextureLevelsAPPLE = (__ctype_glCopyTextureLevelsAPPLE) eglGetProcAddr("glCopyTextureLevelsAPPLE");
    }
    if (__glintercept_fnptr_glCopyTextureLevelsAPPLE == NULL) return NULL;
    return (void*) __glintercept_glCopyTextureLevelsAPPLE;
  }
  if (strcmp(name, "glCopyTextureSubImage1D") == 0) {
    if (__glintercept_fnptr_glCopyTextureSubImage1D == NULL) {
      __glintercept_fnptr_glCopyTextureSubImage1D = (__ctype_glCopyTextureSubImage1D) eglGetProcAddr("glCopyTextureSubImage1D");
    }
    if (__glintercept_fnptr_glCopyTextureSubImage1D == NULL) return NULL;
    return (void*) __glintercept_glCopyTextureSubImage1D;
  }
  if (strcmp(name, "glCopyTextureSubImage1DEXT") == 0) {
    if (__glintercept_fnptr_glCopyTextureSubImage1DEXT == NULL) {
      __glintercept_fnptr_glCopyTextureSubImage1DEXT = (__ctype_glCopyTextureSubImage1DEXT) eglGetProcAddr("glCopyTextureSubImage1DEXT");
    }
    if (__glintercept_fnptr_glCopyTextureSubImage1DEXT == NULL) return NULL;
    return (void*) __glintercept_glCopyTextureSubImage1DEXT;
  }
  if (strcmp(name, "glCopyTextureSubImage2D") == 0) {
    if (__glintercept_fnptr_glCopyTextureSubImage2D == NULL) {
      __glintercept_fnptr_glCopyTextureSubImage2D = (__ctype_glCopyTextureSubImage2D) eglGetProcAddr("glCopyTextureSubImage2D");
    }
    if (__glintercept_fnptr_glCopyTextureSubImage2D == NULL) return NULL;
    return (void*) __glintercept_glCopyTextureSubImage2D;
  }
  if (strcmp(name, "glCopyTextureSubImage2DEXT") == 0) {
    if (__glintercept_fnptr_glCopyTextureSubImage2DEXT == NULL) {
      __glintercept_fnptr_glCopyTextureSubImage2DEXT = (__ctype_glCopyTextureSubImage2DEXT) eglGetProcAddr("glCopyTextureSubImage2DEXT");
    }
    if (__glintercept_fnptr_glCopyTextureSubImage2DEXT == NULL) return NULL;
    return (void*) __glintercept_glCopyTextureSubImage2DEXT;
  }
  if (strcmp(name, "glCopyTextureSubImage3D") == 0) {
    if (__glintercept_fnptr_glCopyTextureSubImage3D == NULL) {
      __glintercept_fnptr_glCopyTextureSubImage3D = (__ctype_glCopyTextureSubImage3D) eglGetProcAddr("glCopyTextureSubImage3D");
    }
    if (__glintercept_fnptr_glCopyTextureSubImage3D == NULL) return NULL;
    return (void*) __glintercept_glCopyTextureSubImage3D;
  }
  if (strcmp(name, "glCopyTextureSubImage3DEXT") == 0) {
    if (__glintercept_fnptr_glCopyTextureSubImage3DEXT == NULL) {
      __glintercept_fnptr_glCopyTextureSubImage3DEXT = (__ctype_glCopyTextureSubImage3DEXT) eglGetProcAddr("glCopyTextureSubImage3DEXT");
    }
    if (__glintercept_fnptr_glCopyTextureSubImage3DEXT == NULL) return NULL;
    return (void*) __glintercept_glCopyTextureSubImage3DEXT;
  }
  if (strcmp(name, "glCoverFillPathInstancedNV") == 0) {
    if (__glintercept_fnptr_glCoverFillPathInstancedNV == NULL) {
      __glintercept_fnptr_glCoverFillPathInstancedNV = (__ctype_glCoverFillPathInstancedNV) eglGetProcAddr("glCoverFillPathInstancedNV");
    }
    if (__glintercept_fnptr_glCoverFillPathInstancedNV == NULL) return NULL;
    return (void*) __glintercept_glCoverFillPathInstancedNV;
  }
  if (strcmp(name, "glCoverFillPathNV") == 0) {
    if (__glintercept_fnptr_glCoverFillPathNV == NULL) {
      __glintercept_fnptr_glCoverFillPathNV = (__ctype_glCoverFillPathNV) eglGetProcAddr("glCoverFillPathNV");
    }
    if (__glintercept_fnptr_glCoverFillPathNV == NULL) return NULL;
    return (void*) __glintercept_glCoverFillPathNV;
  }
  if (strcmp(name, "glCoverStrokePathInstancedNV") == 0) {
    if (__glintercept_fnptr_glCoverStrokePathInstancedNV == NULL) {
      __glintercept_fnptr_glCoverStrokePathInstancedNV = (__ctype_glCoverStrokePathInstancedNV) eglGetProcAddr("glCoverStrokePathInstancedNV");
    }
    if (__glintercept_fnptr_glCoverStrokePathInstancedNV == NULL) return NULL;
    return (void*) __glintercept_glCoverStrokePathInstancedNV;
  }
  if (strcmp(name, "glCoverStrokePathNV") == 0) {
    if (__glintercept_fnptr_glCoverStrokePathNV == NULL) {
      __glintercept_fnptr_glCoverStrokePathNV = (__ctype_glCoverStrokePathNV) eglGetProcAddr("glCoverStrokePathNV");
    }
    if (__glintercept_fnptr_glCoverStrokePathNV == NULL) return NULL;
    return (void*) __glintercept_glCoverStrokePathNV;
  }
  if (strcmp(name, "glCoverageMaskNV") == 0) {
    if (__glintercept_fnptr_glCoverageMaskNV == NULL) {
      __glintercept_fnptr_glCoverageMaskNV = (__ctype_glCoverageMaskNV) eglGetProcAddr("glCoverageMaskNV");
    }
    if (__glintercept_fnptr_glCoverageMaskNV == NULL) return NULL;
    return (void*) __glintercept_glCoverageMaskNV;
  }
  if (strcmp(name, "glCoverageModulationNV") == 0) {
    if (__glintercept_fnptr_glCoverageModulationNV == NULL) {
      __glintercept_fnptr_glCoverageModulationNV = (__ctype_glCoverageModulationNV) eglGetProcAddr("glCoverageModulationNV");
    }
    if (__glintercept_fnptr_glCoverageModulationNV == NULL) return NULL;
    return (void*) __glintercept_glCoverageModulationNV;
  }
  if (strcmp(name, "glCoverageModulationTableNV") == 0) {
    if (__glintercept_fnptr_glCoverageModulationTableNV == NULL) {
      __glintercept_fnptr_glCoverageModulationTableNV = (__ctype_glCoverageModulationTableNV) eglGetProcAddr("glCoverageModulationTableNV");
    }
    if (__glintercept_fnptr_glCoverageModulationTableNV == NULL) return NULL;
    return (void*) __glintercept_glCoverageModulationTableNV;
  }
  if (strcmp(name, "glCoverageOperationNV") == 0) {
    if (__glintercept_fnptr_glCoverageOperationNV == NULL) {
      __glintercept_fnptr_glCoverageOperationNV = (__ctype_glCoverageOperationNV) eglGetProcAddr("glCoverageOperationNV");
    }
    if (__glintercept_fnptr_glCoverageOperationNV == NULL) return NULL;
    return (void*) __glintercept_glCoverageOperationNV;
  }
  if (strcmp(name, "glCreateBuffers") == 0) {
    if (__glintercept_fnptr_glCreateBuffers == NULL) {
      __glintercept_fnptr_glCreateBuffers = (__ctype_glCreateBuffers) eglGetProcAddr("glCreateBuffers");
    }
    if (__glintercept_fnptr_glCreateBuffers == NULL) return NULL;
    return (void*) __glintercept_glCreateBuffers;
  }
  if (strcmp(name, "glCreateCommandListsNV") == 0) {
    if (__glintercept_fnptr_glCreateCommandListsNV == NULL) {
      __glintercept_fnptr_glCreateCommandListsNV = (__ctype_glCreateCommandListsNV) eglGetProcAddr("glCreateCommandListsNV");
    }
    if (__glintercept_fnptr_glCreateCommandListsNV == NULL) return NULL;
    return (void*) __glintercept_glCreateCommandListsNV;
  }
  if (strcmp(name, "glCreateFramebuffers") == 0) {
    if (__glintercept_fnptr_glCreateFramebuffers == NULL) {
      __glintercept_fnptr_glCreateFramebuffers = (__ctype_glCreateFramebuffers) eglGetProcAddr("glCreateFramebuffers");
    }
    if (__glintercept_fnptr_glCreateFramebuffers == NULL) return NULL;
    return (void*) __glintercept_glCreateFramebuffers;
  }
  if (strcmp(name, "glCreateMemoryObjectsEXT") == 0) {
    if (__glintercept_fnptr_glCreateMemoryObjectsEXT == NULL) {
      __glintercept_fnptr_glCreateMemoryObjectsEXT = (__ctype_glCreateMemoryObjectsEXT) eglGetProcAddr("glCreateMemoryObjectsEXT");
    }
    if (__glintercept_fnptr_glCreateMemoryObjectsEXT == NULL) return NULL;
    return (void*) __glintercept_glCreateMemoryObjectsEXT;
  }
  if (strcmp(name, "glCreatePerfQueryINTEL") == 0) {
    if (__glintercept_fnptr_glCreatePerfQueryINTEL == NULL) {
      __glintercept_fnptr_glCreatePerfQueryINTEL = (__ctype_glCreatePerfQueryINTEL) eglGetProcAddr("glCreatePerfQueryINTEL");
    }
    if (__glintercept_fnptr_glCreatePerfQueryINTEL == NULL) return NULL;
    return (void*) __glintercept_glCreatePerfQueryINTEL;
  }
  if (strcmp(name, "glCreateProgram") == 0) {
    if (__glintercept_fnptr_glCreateProgram == NULL) {
      __glintercept_fnptr_glCreateProgram = (__ctype_glCreateProgram) eglGetProcAddr("glCreateProgram");
    }
    if (__glintercept_fnptr_glCreateProgram == NULL) return NULL;
    return (void*) __glintercept_glCreateProgram;
  }
  if (strcmp(name, "glCreateProgramObjectARB") == 0) {
    if (__glintercept_fnptr_glCreateProgramObjectARB == NULL) {
      __glintercept_fnptr_glCreateProgramObjectARB = (__ctype_glCreateProgramObjectARB) eglGetProcAddr("glCreateProgramObjectARB");
    }
    if (__glintercept_fnptr_glCreateProgramObjectARB == NULL) return NULL;
    return (void*) __glintercept_glCreateProgramObjectARB;
  }
  if (strcmp(name, "glCreateProgramPipelines") == 0) {
    if (__glintercept_fnptr_glCreateProgramPipelines == NULL) {
      __glintercept_fnptr_glCreateProgramPipelines = (__ctype_glCreateProgramPipelines) eglGetProcAddr("glCreateProgramPipelines");
    }
    if (__glintercept_fnptr_glCreateProgramPipelines == NULL) return NULL;
    return (void*) __glintercept_glCreateProgramPipelines;
  }
  if (strcmp(name, "glCreateProgressFenceNVX") == 0) {
    if (__glintercept_fnptr_glCreateProgressFenceNVX == NULL) {
      __glintercept_fnptr_glCreateProgressFenceNVX = (__ctype_glCreateProgressFenceNVX) eglGetProcAddr("glCreateProgressFenceNVX");
    }
    if (__glintercept_fnptr_glCreateProgressFenceNVX == NULL) return NULL;
    return (void*) __glintercept_glCreateProgressFenceNVX;
  }
  if (strcmp(name, "glCreateQueries") == 0) {
    if (__glintercept_fnptr_glCreateQueries == NULL) {
      __glintercept_fnptr_glCreateQueries = (__ctype_glCreateQueries) eglGetProcAddr("glCreateQueries");
    }
    if (__glintercept_fnptr_glCreateQueries == NULL) return NULL;
    return (void*) __glintercept_glCreateQueries;
  }
  if (strcmp(name, "glCreateRenderbuffers") == 0) {
    if (__glintercept_fnptr_glCreateRenderbuffers == NULL) {
      __glintercept_fnptr_glCreateRenderbuffers = (__ctype_glCreateRenderbuffers) eglGetProcAddr("glCreateRenderbuffers");
    }
    if (__glintercept_fnptr_glCreateRenderbuffers == NULL) return NULL;
    return (void*) __glintercept_glCreateRenderbuffers;
  }
  if (strcmp(name, "glCreateSamplers") == 0) {
    if (__glintercept_fnptr_glCreateSamplers == NULL) {
      __glintercept_fnptr_glCreateSamplers = (__ctype_glCreateSamplers) eglGetProcAddr("glCreateSamplers");
    }
    if (__glintercept_fnptr_glCreateSamplers == NULL) return NULL;
    return (void*) __glintercept_glCreateSamplers;
  }
  if (strcmp(name, "glCreateSemaphoresNV") == 0) {
    if (__glintercept_fnptr_glCreateSemaphoresNV == NULL) {
      __glintercept_fnptr_glCreateSemaphoresNV = (__ctype_glCreateSemaphoresNV) eglGetProcAddr("glCreateSemaphoresNV");
    }
    if (__glintercept_fnptr_glCreateSemaphoresNV == NULL) return NULL;
    return (void*) __glintercept_glCreateSemaphoresNV;
  }
  if (strcmp(name, "glCreateShader") == 0) {
    if (__glintercept_fnptr_glCreateShader == NULL) {
      __glintercept_fnptr_glCreateShader = (__ctype_glCreateShader) eglGetProcAddr("glCreateShader");
    }
    if (__glintercept_fnptr_glCreateShader == NULL) return NULL;
    return (void*) __glintercept_glCreateShader;
  }
  if (strcmp(name, "glCreateShaderObjectARB") == 0) {
    if (__glintercept_fnptr_glCreateShaderObjectARB == NULL) {
      __glintercept_fnptr_glCreateShaderObjectARB = (__ctype_glCreateShaderObjectARB) eglGetProcAddr("glCreateShaderObjectARB");
    }
    if (__glintercept_fnptr_glCreateShaderObjectARB == NULL) return NULL;
    return (void*) __glintercept_glCreateShaderObjectARB;
  }
  if (strcmp(name, "glCreateShaderProgramEXT") == 0) {
    if (__glintercept_fnptr_glCreateShaderProgramEXT == NULL) {
      __glintercept_fnptr_glCreateShaderProgramEXT = (__ctype_glCreateShaderProgramEXT) eglGetProcAddr("glCreateShaderProgramEXT");
    }
    if (__glintercept_fnptr_glCreateShaderProgramEXT == NULL) return NULL;
    return (void*) __glintercept_glCreateShaderProgramEXT;
  }
  if (strcmp(name, "glCreateShaderProgramv") == 0) {
    if (__glintercept_fnptr_glCreateShaderProgramv == NULL) {
      __glintercept_fnptr_glCreateShaderProgramv = (__ctype_glCreateShaderProgramv) eglGetProcAddr("glCreateShaderProgramv");
    }
    if (__glintercept_fnptr_glCreateShaderProgramv == NULL) return NULL;
    return (void*) __glintercept_glCreateShaderProgramv;
  }
  if (strcmp(name, "glCreateShaderProgramvEXT") == 0) {
    if (__glintercept_fnptr_glCreateShaderProgramvEXT == NULL) {
      __glintercept_fnptr_glCreateShaderProgramvEXT = (__ctype_glCreateShaderProgramvEXT) eglGetProcAddr("glCreateShaderProgramvEXT");
    }
    if (__glintercept_fnptr_glCreateShaderProgramvEXT == NULL) return NULL;
    return (void*) __glintercept_glCreateShaderProgramvEXT;
  }
  if (strcmp(name, "glCreateStatesNV") == 0) {
    if (__glintercept_fnptr_glCreateStatesNV == NULL) {
      __glintercept_fnptr_glCreateStatesNV = (__ctype_glCreateStatesNV) eglGetProcAddr("glCreateStatesNV");
    }
    if (__glintercept_fnptr_glCreateStatesNV == NULL) return NULL;
    return (void*) __glintercept_glCreateStatesNV;
  }
  if (strcmp(name, "glCreateSyncFromCLeventARB") == 0) {
    if (__glintercept_fnptr_glCreateSyncFromCLeventARB == NULL) {
      __glintercept_fnptr_glCreateSyncFromCLeventARB = (__ctype_glCreateSyncFromCLeventARB) eglGetProcAddr("glCreateSyncFromCLeventARB");
    }
    if (__glintercept_fnptr_glCreateSyncFromCLeventARB == NULL) return NULL;
    return (void*) __glintercept_glCreateSyncFromCLeventARB;
  }
  if (strcmp(name, "glCreateTextures") == 0) {
    if (__glintercept_fnptr_glCreateTextures == NULL) {
      __glintercept_fnptr_glCreateTextures = (__ctype_glCreateTextures) eglGetProcAddr("glCreateTextures");
    }
    if (__glintercept_fnptr_glCreateTextures == NULL) return NULL;
    return (void*) __glintercept_glCreateTextures;
  }
  if (strcmp(name, "glCreateTransformFeedbacks") == 0) {
    if (__glintercept_fnptr_glCreateTransformFeedbacks == NULL) {
      __glintercept_fnptr_glCreateTransformFeedbacks = (__ctype_glCreateTransformFeedbacks) eglGetProcAddr("glCreateTransformFeedbacks");
    }
    if (__glintercept_fnptr_glCreateTransformFeedbacks == NULL) return NULL;
    return (void*) __glintercept_glCreateTransformFeedbacks;
  }
  if (strcmp(name, "glCreateVertexArrays") == 0) {
    if (__glintercept_fnptr_glCreateVertexArrays == NULL) {
      __glintercept_fnptr_glCreateVertexArrays = (__ctype_glCreateVertexArrays) eglGetProcAddr("glCreateVertexArrays");
    }
    if (__glintercept_fnptr_glCreateVertexArrays == NULL) return NULL;
    return (void*) __glintercept_glCreateVertexArrays;
  }
  if (strcmp(name, "glCullFace") == 0) {
    if (__glintercept_fnptr_glCullFace == NULL) {
      __glintercept_fnptr_glCullFace = (__ctype_glCullFace) eglGetProcAddr("glCullFace");
    }
    if (__glintercept_fnptr_glCullFace == NULL) return NULL;
    return (void*) __glintercept_glCullFace;
  }
  if (strcmp(name, "glCullParameterdvEXT") == 0) {
    if (__glintercept_fnptr_glCullParameterdvEXT == NULL) {
      __glintercept_fnptr_glCullParameterdvEXT = (__ctype_glCullParameterdvEXT) eglGetProcAddr("glCullParameterdvEXT");
    }
    if (__glintercept_fnptr_glCullParameterdvEXT == NULL) return NULL;
    return (void*) __glintercept_glCullParameterdvEXT;
  }
  if (strcmp(name, "glCullParameterfvEXT") == 0) {
    if (__glintercept_fnptr_glCullParameterfvEXT == NULL) {
      __glintercept_fnptr_glCullParameterfvEXT = (__ctype_glCullParameterfvEXT) eglGetProcAddr("glCullParameterfvEXT");
    }
    if (__glintercept_fnptr_glCullParameterfvEXT == NULL) return NULL;
    return (void*) __glintercept_glCullParameterfvEXT;
  }
  if (strcmp(name, "glCurrentPaletteMatrixARB") == 0) {
    if (__glintercept_fnptr_glCurrentPaletteMatrixARB == NULL) {
      __glintercept_fnptr_glCurrentPaletteMatrixARB = (__ctype_glCurrentPaletteMatrixARB) eglGetProcAddr("glCurrentPaletteMatrixARB");
    }
    if (__glintercept_fnptr_glCurrentPaletteMatrixARB == NULL) return NULL;
    return (void*) __glintercept_glCurrentPaletteMatrixARB;
  }
  if (strcmp(name, "glCurrentPaletteMatrixOES") == 0) {
    if (__glintercept_fnptr_glCurrentPaletteMatrixOES == NULL) {
      __glintercept_fnptr_glCurrentPaletteMatrixOES = (__ctype_glCurrentPaletteMatrixOES) eglGetProcAddr("glCurrentPaletteMatrixOES");
    }
    if (__glintercept_fnptr_glCurrentPaletteMatrixOES == NULL) return NULL;
    return (void*) __glintercept_glCurrentPaletteMatrixOES;
  }
  if (strcmp(name, "glDebugMessageCallback") == 0) {
    if (__glintercept_fnptr_glDebugMessageCallback == NULL) {
      __glintercept_fnptr_glDebugMessageCallback = (__ctype_glDebugMessageCallback) eglGetProcAddr("glDebugMessageCallback");
    }
    if (__glintercept_fnptr_glDebugMessageCallback == NULL) return NULL;
    return (void*) __glintercept_glDebugMessageCallback;
  }
  if (strcmp(name, "glDebugMessageCallbackAMD") == 0) {
    if (__glintercept_fnptr_glDebugMessageCallbackAMD == NULL) {
      __glintercept_fnptr_glDebugMessageCallbackAMD = (__ctype_glDebugMessageCallbackAMD) eglGetProcAddr("glDebugMessageCallbackAMD");
    }
    if (__glintercept_fnptr_glDebugMessageCallbackAMD == NULL) return NULL;
    return (void*) __glintercept_glDebugMessageCallbackAMD;
  }
  if (strcmp(name, "glDebugMessageCallbackARB") == 0) {
    if (__glintercept_fnptr_glDebugMessageCallbackARB == NULL) {
      __glintercept_fnptr_glDebugMessageCallbackARB = (__ctype_glDebugMessageCallbackARB) eglGetProcAddr("glDebugMessageCallbackARB");
    }
    if (__glintercept_fnptr_glDebugMessageCallbackARB == NULL) return NULL;
    return (void*) __glintercept_glDebugMessageCallbackARB;
  }
  if (strcmp(name, "glDebugMessageCallbackKHR") == 0) {
    if (__glintercept_fnptr_glDebugMessageCallbackKHR == NULL) {
      __glintercept_fnptr_glDebugMessageCallbackKHR = (__ctype_glDebugMessageCallbackKHR) eglGetProcAddr("glDebugMessageCallbackKHR");
    }
    if (__glintercept_fnptr_glDebugMessageCallbackKHR == NULL) return NULL;
    return (void*) __glintercept_glDebugMessageCallbackKHR;
  }
  if (strcmp(name, "glDebugMessageControl") == 0) {
    if (__glintercept_fnptr_glDebugMessageControl == NULL) {
      __glintercept_fnptr_glDebugMessageControl = (__ctype_glDebugMessageControl) eglGetProcAddr("glDebugMessageControl");
    }
    if (__glintercept_fnptr_glDebugMessageControl == NULL) return NULL;
    return (void*) __glintercept_glDebugMessageControl;
  }
  if (strcmp(name, "glDebugMessageControlARB") == 0) {
    if (__glintercept_fnptr_glDebugMessageControlARB == NULL) {
      __glintercept_fnptr_glDebugMessageControlARB = (__ctype_glDebugMessageControlARB) eglGetProcAddr("glDebugMessageControlARB");
    }
    if (__glintercept_fnptr_glDebugMessageControlARB == NULL) return NULL;
    return (void*) __glintercept_glDebugMessageControlARB;
  }
  if (strcmp(name, "glDebugMessageControlKHR") == 0) {
    if (__glintercept_fnptr_glDebugMessageControlKHR == NULL) {
      __glintercept_fnptr_glDebugMessageControlKHR = (__ctype_glDebugMessageControlKHR) eglGetProcAddr("glDebugMessageControlKHR");
    }
    if (__glintercept_fnptr_glDebugMessageControlKHR == NULL) return NULL;
    return (void*) __glintercept_glDebugMessageControlKHR;
  }
  if (strcmp(name, "glDebugMessageEnableAMD") == 0) {
    if (__glintercept_fnptr_glDebugMessageEnableAMD == NULL) {
      __glintercept_fnptr_glDebugMessageEnableAMD = (__ctype_glDebugMessageEnableAMD) eglGetProcAddr("glDebugMessageEnableAMD");
    }
    if (__glintercept_fnptr_glDebugMessageEnableAMD == NULL) return NULL;
    return (void*) __glintercept_glDebugMessageEnableAMD;
  }
  if (strcmp(name, "glDebugMessageInsert") == 0) {
    if (__glintercept_fnptr_glDebugMessageInsert == NULL) {
      __glintercept_fnptr_glDebugMessageInsert = (__ctype_glDebugMessageInsert) eglGetProcAddr("glDebugMessageInsert");
    }
    if (__glintercept_fnptr_glDebugMessageInsert == NULL) return NULL;
    return (void*) __glintercept_glDebugMessageInsert;
  }
  if (strcmp(name, "glDebugMessageInsertAMD") == 0) {
    if (__glintercept_fnptr_glDebugMessageInsertAMD == NULL) {
      __glintercept_fnptr_glDebugMessageInsertAMD = (__ctype_glDebugMessageInsertAMD) eglGetProcAddr("glDebugMessageInsertAMD");
    }
    if (__glintercept_fnptr_glDebugMessageInsertAMD == NULL) return NULL;
    return (void*) __glintercept_glDebugMessageInsertAMD;
  }
  if (strcmp(name, "glDebugMessageInsertARB") == 0) {
    if (__glintercept_fnptr_glDebugMessageInsertARB == NULL) {
      __glintercept_fnptr_glDebugMessageInsertARB = (__ctype_glDebugMessageInsertARB) eglGetProcAddr("glDebugMessageInsertARB");
    }
    if (__glintercept_fnptr_glDebugMessageInsertARB == NULL) return NULL;
    return (void*) __glintercept_glDebugMessageInsertARB;
  }
  if (strcmp(name, "glDebugMessageInsertKHR") == 0) {
    if (__glintercept_fnptr_glDebugMessageInsertKHR == NULL) {
      __glintercept_fnptr_glDebugMessageInsertKHR = (__ctype_glDebugMessageInsertKHR) eglGetProcAddr("glDebugMessageInsertKHR");
    }
    if (__glintercept_fnptr_glDebugMessageInsertKHR == NULL) return NULL;
    return (void*) __glintercept_glDebugMessageInsertKHR;
  }
  if (strcmp(name, "glDeformSGIX") == 0) {
    if (__glintercept_fnptr_glDeformSGIX == NULL) {
      __glintercept_fnptr_glDeformSGIX = (__ctype_glDeformSGIX) eglGetProcAddr("glDeformSGIX");
    }
    if (__glintercept_fnptr_glDeformSGIX == NULL) return NULL;
    return (void*) __glintercept_glDeformSGIX;
  }
  if (strcmp(name, "glDeformationMap3dSGIX") == 0) {
    if (__glintercept_fnptr_glDeformationMap3dSGIX == NULL) {
      __glintercept_fnptr_glDeformationMap3dSGIX = (__ctype_glDeformationMap3dSGIX) eglGetProcAddr("glDeformationMap3dSGIX");
    }
    if (__glintercept_fnptr_glDeformationMap3dSGIX == NULL) return NULL;
    return (void*) __glintercept_glDeformationMap3dSGIX;
  }
  if (strcmp(name, "glDeformationMap3fSGIX") == 0) {
    if (__glintercept_fnptr_glDeformationMap3fSGIX == NULL) {
      __glintercept_fnptr_glDeformationMap3fSGIX = (__ctype_glDeformationMap3fSGIX) eglGetProcAddr("glDeformationMap3fSGIX");
    }
    if (__glintercept_fnptr_glDeformationMap3fSGIX == NULL) return NULL;
    return (void*) __glintercept_glDeformationMap3fSGIX;
  }
  if (strcmp(name, "glDeleteAsyncMarkersSGIX") == 0) {
    if (__glintercept_fnptr_glDeleteAsyncMarkersSGIX == NULL) {
      __glintercept_fnptr_glDeleteAsyncMarkersSGIX = (__ctype_glDeleteAsyncMarkersSGIX) eglGetProcAddr("glDeleteAsyncMarkersSGIX");
    }
    if (__glintercept_fnptr_glDeleteAsyncMarkersSGIX == NULL) return NULL;
    return (void*) __glintercept_glDeleteAsyncMarkersSGIX;
  }
  if (strcmp(name, "glDeleteBuffers") == 0) {
    if (__glintercept_fnptr_glDeleteBuffers == NULL) {
      __glintercept_fnptr_glDeleteBuffers = (__ctype_glDeleteBuffers) eglGetProcAddr("glDeleteBuffers");
    }
    if (__glintercept_fnptr_glDeleteBuffers == NULL) return NULL;
    return (void*) __glintercept_glDeleteBuffers;
  }
  if (strcmp(name, "glDeleteBuffersARB") == 0) {
    if (__glintercept_fnptr_glDeleteBuffersARB == NULL) {
      __glintercept_fnptr_glDeleteBuffersARB = (__ctype_glDeleteBuffersARB) eglGetProcAddr("glDeleteBuffersARB");
    }
    if (__glintercept_fnptr_glDeleteBuffersARB == NULL) return NULL;
    return (void*) __glintercept_glDeleteBuffersARB;
  }
  if (strcmp(name, "glDeleteCommandListsNV") == 0) {
    if (__glintercept_fnptr_glDeleteCommandListsNV == NULL) {
      __glintercept_fnptr_glDeleteCommandListsNV = (__ctype_glDeleteCommandListsNV) eglGetProcAddr("glDeleteCommandListsNV");
    }
    if (__glintercept_fnptr_glDeleteCommandListsNV == NULL) return NULL;
    return (void*) __glintercept_glDeleteCommandListsNV;
  }
  if (strcmp(name, "glDeleteFencesAPPLE") == 0) {
    if (__glintercept_fnptr_glDeleteFencesAPPLE == NULL) {
      __glintercept_fnptr_glDeleteFencesAPPLE = (__ctype_glDeleteFencesAPPLE) eglGetProcAddr("glDeleteFencesAPPLE");
    }
    if (__glintercept_fnptr_glDeleteFencesAPPLE == NULL) return NULL;
    return (void*) __glintercept_glDeleteFencesAPPLE;
  }
  if (strcmp(name, "glDeleteFencesNV") == 0) {
    if (__glintercept_fnptr_glDeleteFencesNV == NULL) {
      __glintercept_fnptr_glDeleteFencesNV = (__ctype_glDeleteFencesNV) eglGetProcAddr("glDeleteFencesNV");
    }
    if (__glintercept_fnptr_glDeleteFencesNV == NULL) return NULL;
    return (void*) __glintercept_glDeleteFencesNV;
  }
  if (strcmp(name, "glDeleteFragmentShaderATI") == 0) {
    if (__glintercept_fnptr_glDeleteFragmentShaderATI == NULL) {
      __glintercept_fnptr_glDeleteFragmentShaderATI = (__ctype_glDeleteFragmentShaderATI) eglGetProcAddr("glDeleteFragmentShaderATI");
    }
    if (__glintercept_fnptr_glDeleteFragmentShaderATI == NULL) return NULL;
    return (void*) __glintercept_glDeleteFragmentShaderATI;
  }
  if (strcmp(name, "glDeleteFramebuffers") == 0) {
    if (__glintercept_fnptr_glDeleteFramebuffers == NULL) {
      __glintercept_fnptr_glDeleteFramebuffers = (__ctype_glDeleteFramebuffers) eglGetProcAddr("glDeleteFramebuffers");
    }
    if (__glintercept_fnptr_glDeleteFramebuffers == NULL) return NULL;
    return (void*) __glintercept_glDeleteFramebuffers;
  }
  if (strcmp(name, "glDeleteFramebuffersEXT") == 0) {
    if (__glintercept_fnptr_glDeleteFramebuffersEXT == NULL) {
      __glintercept_fnptr_glDeleteFramebuffersEXT = (__ctype_glDeleteFramebuffersEXT) eglGetProcAddr("glDeleteFramebuffersEXT");
    }
    if (__glintercept_fnptr_glDeleteFramebuffersEXT == NULL) return NULL;
    return (void*) __glintercept_glDeleteFramebuffersEXT;
  }
  if (strcmp(name, "glDeleteFramebuffersOES") == 0) {
    if (__glintercept_fnptr_glDeleteFramebuffersOES == NULL) {
      __glintercept_fnptr_glDeleteFramebuffersOES = (__ctype_glDeleteFramebuffersOES) eglGetProcAddr("glDeleteFramebuffersOES");
    }
    if (__glintercept_fnptr_glDeleteFramebuffersOES == NULL) return NULL;
    return (void*) __glintercept_glDeleteFramebuffersOES;
  }
  if (strcmp(name, "glDeleteLists") == 0) {
    if (__glintercept_fnptr_glDeleteLists == NULL) {
      __glintercept_fnptr_glDeleteLists = (__ctype_glDeleteLists) eglGetProcAddr("glDeleteLists");
    }
    if (__glintercept_fnptr_glDeleteLists == NULL) return NULL;
    return (void*) __glintercept_glDeleteLists;
  }
  if (strcmp(name, "glDeleteMemoryObjectsEXT") == 0) {
    if (__glintercept_fnptr_glDeleteMemoryObjectsEXT == NULL) {
      __glintercept_fnptr_glDeleteMemoryObjectsEXT = (__ctype_glDeleteMemoryObjectsEXT) eglGetProcAddr("glDeleteMemoryObjectsEXT");
    }
    if (__glintercept_fnptr_glDeleteMemoryObjectsEXT == NULL) return NULL;
    return (void*) __glintercept_glDeleteMemoryObjectsEXT;
  }
  if (strcmp(name, "glDeleteNamedStringARB") == 0) {
    if (__glintercept_fnptr_glDeleteNamedStringARB == NULL) {
      __glintercept_fnptr_glDeleteNamedStringARB = (__ctype_glDeleteNamedStringARB) eglGetProcAddr("glDeleteNamedStringARB");
    }
    if (__glintercept_fnptr_glDeleteNamedStringARB == NULL) return NULL;
    return (void*) __glintercept_glDeleteNamedStringARB;
  }
  if (strcmp(name, "glDeleteNamesAMD") == 0) {
    if (__glintercept_fnptr_glDeleteNamesAMD == NULL) {
      __glintercept_fnptr_glDeleteNamesAMD = (__ctype_glDeleteNamesAMD) eglGetProcAddr("glDeleteNamesAMD");
    }
    if (__glintercept_fnptr_glDeleteNamesAMD == NULL) return NULL;
    return (void*) __glintercept_glDeleteNamesAMD;
  }
  if (strcmp(name, "glDeleteObjectARB") == 0) {
    if (__glintercept_fnptr_glDeleteObjectARB == NULL) {
      __glintercept_fnptr_glDeleteObjectARB = (__ctype_glDeleteObjectARB) eglGetProcAddr("glDeleteObjectARB");
    }
    if (__glintercept_fnptr_glDeleteObjectARB == NULL) return NULL;
    return (void*) __glintercept_glDeleteObjectARB;
  }
  if (strcmp(name, "glDeleteOcclusionQueriesNV") == 0) {
    if (__glintercept_fnptr_glDeleteOcclusionQueriesNV == NULL) {
      __glintercept_fnptr_glDeleteOcclusionQueriesNV = (__ctype_glDeleteOcclusionQueriesNV) eglGetProcAddr("glDeleteOcclusionQueriesNV");
    }
    if (__glintercept_fnptr_glDeleteOcclusionQueriesNV == NULL) return NULL;
    return (void*) __glintercept_glDeleteOcclusionQueriesNV;
  }
  if (strcmp(name, "glDeletePathsNV") == 0) {
    if (__glintercept_fnptr_glDeletePathsNV == NULL) {
      __glintercept_fnptr_glDeletePathsNV = (__ctype_glDeletePathsNV) eglGetProcAddr("glDeletePathsNV");
    }
    if (__glintercept_fnptr_glDeletePathsNV == NULL) return NULL;
    return (void*) __glintercept_glDeletePathsNV;
  }
  if (strcmp(name, "glDeletePerfMonitorsAMD") == 0) {
    if (__glintercept_fnptr_glDeletePerfMonitorsAMD == NULL) {
      __glintercept_fnptr_glDeletePerfMonitorsAMD = (__ctype_glDeletePerfMonitorsAMD) eglGetProcAddr("glDeletePerfMonitorsAMD");
    }
    if (__glintercept_fnptr_glDeletePerfMonitorsAMD == NULL) return NULL;
    return (void*) __glintercept_glDeletePerfMonitorsAMD;
  }
  if (strcmp(name, "glDeletePerfQueryINTEL") == 0) {
    if (__glintercept_fnptr_glDeletePerfQueryINTEL == NULL) {
      __glintercept_fnptr_glDeletePerfQueryINTEL = (__ctype_glDeletePerfQueryINTEL) eglGetProcAddr("glDeletePerfQueryINTEL");
    }
    if (__glintercept_fnptr_glDeletePerfQueryINTEL == NULL) return NULL;
    return (void*) __glintercept_glDeletePerfQueryINTEL;
  }
  if (strcmp(name, "glDeleteProgram") == 0) {
    if (__glintercept_fnptr_glDeleteProgram == NULL) {
      __glintercept_fnptr_glDeleteProgram = (__ctype_glDeleteProgram) eglGetProcAddr("glDeleteProgram");
    }
    if (__glintercept_fnptr_glDeleteProgram == NULL) return NULL;
    return (void*) __glintercept_glDeleteProgram;
  }
  if (strcmp(name, "glDeleteProgramPipelines") == 0) {
    if (__glintercept_fnptr_glDeleteProgramPipelines == NULL) {
      __glintercept_fnptr_glDeleteProgramPipelines = (__ctype_glDeleteProgramPipelines) eglGetProcAddr("glDeleteProgramPipelines");
    }
    if (__glintercept_fnptr_glDeleteProgramPipelines == NULL) return NULL;
    return (void*) __glintercept_glDeleteProgramPipelines;
  }
  if (strcmp(name, "glDeleteProgramPipelinesEXT") == 0) {
    if (__glintercept_fnptr_glDeleteProgramPipelinesEXT == NULL) {
      __glintercept_fnptr_glDeleteProgramPipelinesEXT = (__ctype_glDeleteProgramPipelinesEXT) eglGetProcAddr("glDeleteProgramPipelinesEXT");
    }
    if (__glintercept_fnptr_glDeleteProgramPipelinesEXT == NULL) return NULL;
    return (void*) __glintercept_glDeleteProgramPipelinesEXT;
  }
  if (strcmp(name, "glDeleteProgramsARB") == 0) {
    if (__glintercept_fnptr_glDeleteProgramsARB == NULL) {
      __glintercept_fnptr_glDeleteProgramsARB = (__ctype_glDeleteProgramsARB) eglGetProcAddr("glDeleteProgramsARB");
    }
    if (__glintercept_fnptr_glDeleteProgramsARB == NULL) return NULL;
    return (void*) __glintercept_glDeleteProgramsARB;
  }
  if (strcmp(name, "glDeleteProgramsNV") == 0) {
    if (__glintercept_fnptr_glDeleteProgramsNV == NULL) {
      __glintercept_fnptr_glDeleteProgramsNV = (__ctype_glDeleteProgramsNV) eglGetProcAddr("glDeleteProgramsNV");
    }
    if (__glintercept_fnptr_glDeleteProgramsNV == NULL) return NULL;
    return (void*) __glintercept_glDeleteProgramsNV;
  }
  if (strcmp(name, "glDeleteQueries") == 0) {
    if (__glintercept_fnptr_glDeleteQueries == NULL) {
      __glintercept_fnptr_glDeleteQueries = (__ctype_glDeleteQueries) eglGetProcAddr("glDeleteQueries");
    }
    if (__glintercept_fnptr_glDeleteQueries == NULL) return NULL;
    return (void*) __glintercept_glDeleteQueries;
  }
  if (strcmp(name, "glDeleteQueriesARB") == 0) {
    if (__glintercept_fnptr_glDeleteQueriesARB == NULL) {
      __glintercept_fnptr_glDeleteQueriesARB = (__ctype_glDeleteQueriesARB) eglGetProcAddr("glDeleteQueriesARB");
    }
    if (__glintercept_fnptr_glDeleteQueriesARB == NULL) return NULL;
    return (void*) __glintercept_glDeleteQueriesARB;
  }
  if (strcmp(name, "glDeleteQueriesEXT") == 0) {
    if (__glintercept_fnptr_glDeleteQueriesEXT == NULL) {
      __glintercept_fnptr_glDeleteQueriesEXT = (__ctype_glDeleteQueriesEXT) eglGetProcAddr("glDeleteQueriesEXT");
    }
    if (__glintercept_fnptr_glDeleteQueriesEXT == NULL) return NULL;
    return (void*) __glintercept_glDeleteQueriesEXT;
  }
  if (strcmp(name, "glDeleteQueryResourceTagNV") == 0) {
    if (__glintercept_fnptr_glDeleteQueryResourceTagNV == NULL) {
      __glintercept_fnptr_glDeleteQueryResourceTagNV = (__ctype_glDeleteQueryResourceTagNV) eglGetProcAddr("glDeleteQueryResourceTagNV");
    }
    if (__glintercept_fnptr_glDeleteQueryResourceTagNV == NULL) return NULL;
    return (void*) __glintercept_glDeleteQueryResourceTagNV;
  }
  if (strcmp(name, "glDeleteRenderbuffers") == 0) {
    if (__glintercept_fnptr_glDeleteRenderbuffers == NULL) {
      __glintercept_fnptr_glDeleteRenderbuffers = (__ctype_glDeleteRenderbuffers) eglGetProcAddr("glDeleteRenderbuffers");
    }
    if (__glintercept_fnptr_glDeleteRenderbuffers == NULL) return NULL;
    return (void*) __glintercept_glDeleteRenderbuffers;
  }
  if (strcmp(name, "glDeleteRenderbuffersEXT") == 0) {
    if (__glintercept_fnptr_glDeleteRenderbuffersEXT == NULL) {
      __glintercept_fnptr_glDeleteRenderbuffersEXT = (__ctype_glDeleteRenderbuffersEXT) eglGetProcAddr("glDeleteRenderbuffersEXT");
    }
    if (__glintercept_fnptr_glDeleteRenderbuffersEXT == NULL) return NULL;
    return (void*) __glintercept_glDeleteRenderbuffersEXT;
  }
  if (strcmp(name, "glDeleteRenderbuffersOES") == 0) {
    if (__glintercept_fnptr_glDeleteRenderbuffersOES == NULL) {
      __glintercept_fnptr_glDeleteRenderbuffersOES = (__ctype_glDeleteRenderbuffersOES) eglGetProcAddr("glDeleteRenderbuffersOES");
    }
    if (__glintercept_fnptr_glDeleteRenderbuffersOES == NULL) return NULL;
    return (void*) __glintercept_glDeleteRenderbuffersOES;
  }
  if (strcmp(name, "glDeleteSamplers") == 0) {
    if (__glintercept_fnptr_glDeleteSamplers == NULL) {
      __glintercept_fnptr_glDeleteSamplers = (__ctype_glDeleteSamplers) eglGetProcAddr("glDeleteSamplers");
    }
    if (__glintercept_fnptr_glDeleteSamplers == NULL) return NULL;
    return (void*) __glintercept_glDeleteSamplers;
  }
  if (strcmp(name, "glDeleteSemaphoresEXT") == 0) {
    if (__glintercept_fnptr_glDeleteSemaphoresEXT == NULL) {
      __glintercept_fnptr_glDeleteSemaphoresEXT = (__ctype_glDeleteSemaphoresEXT) eglGetProcAddr("glDeleteSemaphoresEXT");
    }
    if (__glintercept_fnptr_glDeleteSemaphoresEXT == NULL) return NULL;
    return (void*) __glintercept_glDeleteSemaphoresEXT;
  }
  if (strcmp(name, "glDeleteShader") == 0) {
    if (__glintercept_fnptr_glDeleteShader == NULL) {
      __glintercept_fnptr_glDeleteShader = (__ctype_glDeleteShader) eglGetProcAddr("glDeleteShader");
    }
    if (__glintercept_fnptr_glDeleteShader == NULL) return NULL;
    return (void*) __glintercept_glDeleteShader;
  }
  if (strcmp(name, "glDeleteStatesNV") == 0) {
    if (__glintercept_fnptr_glDeleteStatesNV == NULL) {
      __glintercept_fnptr_glDeleteStatesNV = (__ctype_glDeleteStatesNV) eglGetProcAddr("glDeleteStatesNV");
    }
    if (__glintercept_fnptr_glDeleteStatesNV == NULL) return NULL;
    return (void*) __glintercept_glDeleteStatesNV;
  }
  if (strcmp(name, "glDeleteSync") == 0) {
    if (__glintercept_fnptr_glDeleteSync == NULL) {
      __glintercept_fnptr_glDeleteSync = (__ctype_glDeleteSync) eglGetProcAddr("glDeleteSync");
    }
    if (__glintercept_fnptr_glDeleteSync == NULL) return NULL;
    return (void*) __glintercept_glDeleteSync;
  }
  if (strcmp(name, "glDeleteSyncAPPLE") == 0) {
    if (__glintercept_fnptr_glDeleteSyncAPPLE == NULL) {
      __glintercept_fnptr_glDeleteSyncAPPLE = (__ctype_glDeleteSyncAPPLE) eglGetProcAddr("glDeleteSyncAPPLE");
    }
    if (__glintercept_fnptr_glDeleteSyncAPPLE == NULL) return NULL;
    return (void*) __glintercept_glDeleteSyncAPPLE;
  }
  if (strcmp(name, "glDeleteTextures") == 0) {
    if (__glintercept_fnptr_glDeleteTextures == NULL) {
      __glintercept_fnptr_glDeleteTextures = (__ctype_glDeleteTextures) eglGetProcAddr("glDeleteTextures");
    }
    if (__glintercept_fnptr_glDeleteTextures == NULL) return NULL;
    return (void*) __glintercept_glDeleteTextures;
  }
  if (strcmp(name, "glDeleteTexturesEXT") == 0) {
    if (__glintercept_fnptr_glDeleteTexturesEXT == NULL) {
      __glintercept_fnptr_glDeleteTexturesEXT = (__ctype_glDeleteTexturesEXT) eglGetProcAddr("glDeleteTexturesEXT");
    }
    if (__glintercept_fnptr_glDeleteTexturesEXT == NULL) return NULL;
    return (void*) __glintercept_glDeleteTexturesEXT;
  }
  if (strcmp(name, "glDeleteTransformFeedbacks") == 0) {
    if (__glintercept_fnptr_glDeleteTransformFeedbacks == NULL) {
      __glintercept_fnptr_glDeleteTransformFeedbacks = (__ctype_glDeleteTransformFeedbacks) eglGetProcAddr("glDeleteTransformFeedbacks");
    }
    if (__glintercept_fnptr_glDeleteTransformFeedbacks == NULL) return NULL;
    return (void*) __glintercept_glDeleteTransformFeedbacks;
  }
  if (strcmp(name, "glDeleteTransformFeedbacksNV") == 0) {
    if (__glintercept_fnptr_glDeleteTransformFeedbacksNV == NULL) {
      __glintercept_fnptr_glDeleteTransformFeedbacksNV = (__ctype_glDeleteTransformFeedbacksNV) eglGetProcAddr("glDeleteTransformFeedbacksNV");
    }
    if (__glintercept_fnptr_glDeleteTransformFeedbacksNV == NULL) return NULL;
    return (void*) __glintercept_glDeleteTransformFeedbacksNV;
  }
  if (strcmp(name, "glDeleteVertexArrays") == 0) {
    if (__glintercept_fnptr_glDeleteVertexArrays == NULL) {
      __glintercept_fnptr_glDeleteVertexArrays = (__ctype_glDeleteVertexArrays) eglGetProcAddr("glDeleteVertexArrays");
    }
    if (__glintercept_fnptr_glDeleteVertexArrays == NULL) return NULL;
    return (void*) __glintercept_glDeleteVertexArrays;
  }
  if (strcmp(name, "glDeleteVertexArraysAPPLE") == 0) {
    if (__glintercept_fnptr_glDeleteVertexArraysAPPLE == NULL) {
      __glintercept_fnptr_glDeleteVertexArraysAPPLE = (__ctype_glDeleteVertexArraysAPPLE) eglGetProcAddr("glDeleteVertexArraysAPPLE");
    }
    if (__glintercept_fnptr_glDeleteVertexArraysAPPLE == NULL) return NULL;
    return (void*) __glintercept_glDeleteVertexArraysAPPLE;
  }
  if (strcmp(name, "glDeleteVertexArraysOES") == 0) {
    if (__glintercept_fnptr_glDeleteVertexArraysOES == NULL) {
      __glintercept_fnptr_glDeleteVertexArraysOES = (__ctype_glDeleteVertexArraysOES) eglGetProcAddr("glDeleteVertexArraysOES");
    }
    if (__glintercept_fnptr_glDeleteVertexArraysOES == NULL) return NULL;
    return (void*) __glintercept_glDeleteVertexArraysOES;
  }
  if (strcmp(name, "glDeleteVertexShaderEXT") == 0) {
    if (__glintercept_fnptr_glDeleteVertexShaderEXT == NULL) {
      __glintercept_fnptr_glDeleteVertexShaderEXT = (__ctype_glDeleteVertexShaderEXT) eglGetProcAddr("glDeleteVertexShaderEXT");
    }
    if (__glintercept_fnptr_glDeleteVertexShaderEXT == NULL) return NULL;
    return (void*) __glintercept_glDeleteVertexShaderEXT;
  }
  if (strcmp(name, "glDepthBoundsEXT") == 0) {
    if (__glintercept_fnptr_glDepthBoundsEXT == NULL) {
      __glintercept_fnptr_glDepthBoundsEXT = (__ctype_glDepthBoundsEXT) eglGetProcAddr("glDepthBoundsEXT");
    }
    if (__glintercept_fnptr_glDepthBoundsEXT == NULL) return NULL;
    return (void*) __glintercept_glDepthBoundsEXT;
  }
  if (strcmp(name, "glDepthBoundsdNV") == 0) {
    if (__glintercept_fnptr_glDepthBoundsdNV == NULL) {
      __glintercept_fnptr_glDepthBoundsdNV = (__ctype_glDepthBoundsdNV) eglGetProcAddr("glDepthBoundsdNV");
    }
    if (__glintercept_fnptr_glDepthBoundsdNV == NULL) return NULL;
    return (void*) __glintercept_glDepthBoundsdNV;
  }
  if (strcmp(name, "glDepthFunc") == 0) {
    if (__glintercept_fnptr_glDepthFunc == NULL) {
      __glintercept_fnptr_glDepthFunc = (__ctype_glDepthFunc) eglGetProcAddr("glDepthFunc");
    }
    if (__glintercept_fnptr_glDepthFunc == NULL) return NULL;
    return (void*) __glintercept_glDepthFunc;
  }
  if (strcmp(name, "glDepthMask") == 0) {
    if (__glintercept_fnptr_glDepthMask == NULL) {
      __glintercept_fnptr_glDepthMask = (__ctype_glDepthMask) eglGetProcAddr("glDepthMask");
    }
    if (__glintercept_fnptr_glDepthMask == NULL) return NULL;
    return (void*) __glintercept_glDepthMask;
  }
  if (strcmp(name, "glDepthRange") == 0) {
    if (__glintercept_fnptr_glDepthRange == NULL) {
      __glintercept_fnptr_glDepthRange = (__ctype_glDepthRange) eglGetProcAddr("glDepthRange");
    }
    if (__glintercept_fnptr_glDepthRange == NULL) return NULL;
    return (void*) __glintercept_glDepthRange;
  }
  if (strcmp(name, "glDepthRangeArraydvNV") == 0) {
    if (__glintercept_fnptr_glDepthRangeArraydvNV == NULL) {
      __glintercept_fnptr_glDepthRangeArraydvNV = (__ctype_glDepthRangeArraydvNV) eglGetProcAddr("glDepthRangeArraydvNV");
    }
    if (__glintercept_fnptr_glDepthRangeArraydvNV == NULL) return NULL;
    return (void*) __glintercept_glDepthRangeArraydvNV;
  }
  if (strcmp(name, "glDepthRangeArrayfvNV") == 0) {
    if (__glintercept_fnptr_glDepthRangeArrayfvNV == NULL) {
      __glintercept_fnptr_glDepthRangeArrayfvNV = (__ctype_glDepthRangeArrayfvNV) eglGetProcAddr("glDepthRangeArrayfvNV");
    }
    if (__glintercept_fnptr_glDepthRangeArrayfvNV == NULL) return NULL;
    return (void*) __glintercept_glDepthRangeArrayfvNV;
  }
  if (strcmp(name, "glDepthRangeArrayfvOES") == 0) {
    if (__glintercept_fnptr_glDepthRangeArrayfvOES == NULL) {
      __glintercept_fnptr_glDepthRangeArrayfvOES = (__ctype_glDepthRangeArrayfvOES) eglGetProcAddr("glDepthRangeArrayfvOES");
    }
    if (__glintercept_fnptr_glDepthRangeArrayfvOES == NULL) return NULL;
    return (void*) __glintercept_glDepthRangeArrayfvOES;
  }
  if (strcmp(name, "glDepthRangeArrayv") == 0) {
    if (__glintercept_fnptr_glDepthRangeArrayv == NULL) {
      __glintercept_fnptr_glDepthRangeArrayv = (__ctype_glDepthRangeArrayv) eglGetProcAddr("glDepthRangeArrayv");
    }
    if (__glintercept_fnptr_glDepthRangeArrayv == NULL) return NULL;
    return (void*) __glintercept_glDepthRangeArrayv;
  }
  if (strcmp(name, "glDepthRangeIndexed") == 0) {
    if (__glintercept_fnptr_glDepthRangeIndexed == NULL) {
      __glintercept_fnptr_glDepthRangeIndexed = (__ctype_glDepthRangeIndexed) eglGetProcAddr("glDepthRangeIndexed");
    }
    if (__glintercept_fnptr_glDepthRangeIndexed == NULL) return NULL;
    return (void*) __glintercept_glDepthRangeIndexed;
  }
  if (strcmp(name, "glDepthRangeIndexeddNV") == 0) {
    if (__glintercept_fnptr_glDepthRangeIndexeddNV == NULL) {
      __glintercept_fnptr_glDepthRangeIndexeddNV = (__ctype_glDepthRangeIndexeddNV) eglGetProcAddr("glDepthRangeIndexeddNV");
    }
    if (__glintercept_fnptr_glDepthRangeIndexeddNV == NULL) return NULL;
    return (void*) __glintercept_glDepthRangeIndexeddNV;
  }
  if (strcmp(name, "glDepthRangeIndexedfNV") == 0) {
    if (__glintercept_fnptr_glDepthRangeIndexedfNV == NULL) {
      __glintercept_fnptr_glDepthRangeIndexedfNV = (__ctype_glDepthRangeIndexedfNV) eglGetProcAddr("glDepthRangeIndexedfNV");
    }
    if (__glintercept_fnptr_glDepthRangeIndexedfNV == NULL) return NULL;
    return (void*) __glintercept_glDepthRangeIndexedfNV;
  }
  if (strcmp(name, "glDepthRangeIndexedfOES") == 0) {
    if (__glintercept_fnptr_glDepthRangeIndexedfOES == NULL) {
      __glintercept_fnptr_glDepthRangeIndexedfOES = (__ctype_glDepthRangeIndexedfOES) eglGetProcAddr("glDepthRangeIndexedfOES");
    }
    if (__glintercept_fnptr_glDepthRangeIndexedfOES == NULL) return NULL;
    return (void*) __glintercept_glDepthRangeIndexedfOES;
  }
  if (strcmp(name, "glDepthRangedNV") == 0) {
    if (__glintercept_fnptr_glDepthRangedNV == NULL) {
      __glintercept_fnptr_glDepthRangedNV = (__ctype_glDepthRangedNV) eglGetProcAddr("glDepthRangedNV");
    }
    if (__glintercept_fnptr_glDepthRangedNV == NULL) return NULL;
    return (void*) __glintercept_glDepthRangedNV;
  }
  if (strcmp(name, "glDepthRangef") == 0) {
    if (__glintercept_fnptr_glDepthRangef == NULL) {
      __glintercept_fnptr_glDepthRangef = (__ctype_glDepthRangef) eglGetProcAddr("glDepthRangef");
    }
    if (__glintercept_fnptr_glDepthRangef == NULL) return NULL;
    return (void*) __glintercept_glDepthRangef;
  }
  if (strcmp(name, "glDepthRangefOES") == 0) {
    if (__glintercept_fnptr_glDepthRangefOES == NULL) {
      __glintercept_fnptr_glDepthRangefOES = (__ctype_glDepthRangefOES) eglGetProcAddr("glDepthRangefOES");
    }
    if (__glintercept_fnptr_glDepthRangefOES == NULL) return NULL;
    return (void*) __glintercept_glDepthRangefOES;
  }
  if (strcmp(name, "glDepthRangex") == 0) {
    if (__glintercept_fnptr_glDepthRangex == NULL) {
      __glintercept_fnptr_glDepthRangex = (__ctype_glDepthRangex) eglGetProcAddr("glDepthRangex");
    }
    if (__glintercept_fnptr_glDepthRangex == NULL) return NULL;
    return (void*) __glintercept_glDepthRangex;
  }
  if (strcmp(name, "glDepthRangexOES") == 0) {
    if (__glintercept_fnptr_glDepthRangexOES == NULL) {
      __glintercept_fnptr_glDepthRangexOES = (__ctype_glDepthRangexOES) eglGetProcAddr("glDepthRangexOES");
    }
    if (__glintercept_fnptr_glDepthRangexOES == NULL) return NULL;
    return (void*) __glintercept_glDepthRangexOES;
  }
  if (strcmp(name, "glDetachObjectARB") == 0) {
    if (__glintercept_fnptr_glDetachObjectARB == NULL) {
      __glintercept_fnptr_glDetachObjectARB = (__ctype_glDetachObjectARB) eglGetProcAddr("glDetachObjectARB");
    }
    if (__glintercept_fnptr_glDetachObjectARB == NULL) return NULL;
    return (void*) __glintercept_glDetachObjectARB;
  }
  if (strcmp(name, "glDetachShader") == 0) {
    if (__glintercept_fnptr_glDetachShader == NULL) {
      __glintercept_fnptr_glDetachShader = (__ctype_glDetachShader) eglGetProcAddr("glDetachShader");
    }
    if (__glintercept_fnptr_glDetachShader == NULL) return NULL;
    return (void*) __glintercept_glDetachShader;
  }
  if (strcmp(name, "glDetailTexFuncSGIS") == 0) {
    if (__glintercept_fnptr_glDetailTexFuncSGIS == NULL) {
      __glintercept_fnptr_glDetailTexFuncSGIS = (__ctype_glDetailTexFuncSGIS) eglGetProcAddr("glDetailTexFuncSGIS");
    }
    if (__glintercept_fnptr_glDetailTexFuncSGIS == NULL) return NULL;
    return (void*) __glintercept_glDetailTexFuncSGIS;
  }
  if (strcmp(name, "glDisable") == 0) {
    if (__glintercept_fnptr_glDisable == NULL) {
      __glintercept_fnptr_glDisable = (__ctype_glDisable) eglGetProcAddr("glDisable");
    }
    if (__glintercept_fnptr_glDisable == NULL) return NULL;
    return (void*) __glintercept_glDisable;
  }
  if (strcmp(name, "glDisableClientState") == 0) {
    if (__glintercept_fnptr_glDisableClientState == NULL) {
      __glintercept_fnptr_glDisableClientState = (__ctype_glDisableClientState) eglGetProcAddr("glDisableClientState");
    }
    if (__glintercept_fnptr_glDisableClientState == NULL) return NULL;
    return (void*) __glintercept_glDisableClientState;
  }
  if (strcmp(name, "glDisableClientStateIndexedEXT") == 0) {
    if (__glintercept_fnptr_glDisableClientStateIndexedEXT == NULL) {
      __glintercept_fnptr_glDisableClientStateIndexedEXT = (__ctype_glDisableClientStateIndexedEXT) eglGetProcAddr("glDisableClientStateIndexedEXT");
    }
    if (__glintercept_fnptr_glDisableClientStateIndexedEXT == NULL) return NULL;
    return (void*) __glintercept_glDisableClientStateIndexedEXT;
  }
  if (strcmp(name, "glDisableClientStateiEXT") == 0) {
    if (__glintercept_fnptr_glDisableClientStateiEXT == NULL) {
      __glintercept_fnptr_glDisableClientStateiEXT = (__ctype_glDisableClientStateiEXT) eglGetProcAddr("glDisableClientStateiEXT");
    }
    if (__glintercept_fnptr_glDisableClientStateiEXT == NULL) return NULL;
    return (void*) __glintercept_glDisableClientStateiEXT;
  }
  if (strcmp(name, "glDisableDriverControlQCOM") == 0) {
    if (__glintercept_fnptr_glDisableDriverControlQCOM == NULL) {
      __glintercept_fnptr_glDisableDriverControlQCOM = (__ctype_glDisableDriverControlQCOM) eglGetProcAddr("glDisableDriverControlQCOM");
    }
    if (__glintercept_fnptr_glDisableDriverControlQCOM == NULL) return NULL;
    return (void*) __glintercept_glDisableDriverControlQCOM;
  }
  if (strcmp(name, "glDisableIndexedEXT") == 0) {
    if (__glintercept_fnptr_glDisableIndexedEXT == NULL) {
      __glintercept_fnptr_glDisableIndexedEXT = (__ctype_glDisableIndexedEXT) eglGetProcAddr("glDisableIndexedEXT");
    }
    if (__glintercept_fnptr_glDisableIndexedEXT == NULL) return NULL;
    return (void*) __glintercept_glDisableIndexedEXT;
  }
  if (strcmp(name, "glDisableVariantClientStateEXT") == 0) {
    if (__glintercept_fnptr_glDisableVariantClientStateEXT == NULL) {
      __glintercept_fnptr_glDisableVariantClientStateEXT = (__ctype_glDisableVariantClientStateEXT) eglGetProcAddr("glDisableVariantClientStateEXT");
    }
    if (__glintercept_fnptr_glDisableVariantClientStateEXT == NULL) return NULL;
    return (void*) __glintercept_glDisableVariantClientStateEXT;
  }
  if (strcmp(name, "glDisableVertexArrayAttrib") == 0) {
    if (__glintercept_fnptr_glDisableVertexArrayAttrib == NULL) {
      __glintercept_fnptr_glDisableVertexArrayAttrib = (__ctype_glDisableVertexArrayAttrib) eglGetProcAddr("glDisableVertexArrayAttrib");
    }
    if (__glintercept_fnptr_glDisableVertexArrayAttrib == NULL) return NULL;
    return (void*) __glintercept_glDisableVertexArrayAttrib;
  }
  if (strcmp(name, "glDisableVertexArrayAttribEXT") == 0) {
    if (__glintercept_fnptr_glDisableVertexArrayAttribEXT == NULL) {
      __glintercept_fnptr_glDisableVertexArrayAttribEXT = (__ctype_glDisableVertexArrayAttribEXT) eglGetProcAddr("glDisableVertexArrayAttribEXT");
    }
    if (__glintercept_fnptr_glDisableVertexArrayAttribEXT == NULL) return NULL;
    return (void*) __glintercept_glDisableVertexArrayAttribEXT;
  }
  if (strcmp(name, "glDisableVertexArrayEXT") == 0) {
    if (__glintercept_fnptr_glDisableVertexArrayEXT == NULL) {
      __glintercept_fnptr_glDisableVertexArrayEXT = (__ctype_glDisableVertexArrayEXT) eglGetProcAddr("glDisableVertexArrayEXT");
    }
    if (__glintercept_fnptr_glDisableVertexArrayEXT == NULL) return NULL;
    return (void*) __glintercept_glDisableVertexArrayEXT;
  }
  if (strcmp(name, "glDisableVertexAttribAPPLE") == 0) {
    if (__glintercept_fnptr_glDisableVertexAttribAPPLE == NULL) {
      __glintercept_fnptr_glDisableVertexAttribAPPLE = (__ctype_glDisableVertexAttribAPPLE) eglGetProcAddr("glDisableVertexAttribAPPLE");
    }
    if (__glintercept_fnptr_glDisableVertexAttribAPPLE == NULL) return NULL;
    return (void*) __glintercept_glDisableVertexAttribAPPLE;
  }
  if (strcmp(name, "glDisableVertexAttribArray") == 0) {
    if (__glintercept_fnptr_glDisableVertexAttribArray == NULL) {
      __glintercept_fnptr_glDisableVertexAttribArray = (__ctype_glDisableVertexAttribArray) eglGetProcAddr("glDisableVertexAttribArray");
    }
    if (__glintercept_fnptr_glDisableVertexAttribArray == NULL) return NULL;
    return (void*) __glintercept_glDisableVertexAttribArray;
  }
  if (strcmp(name, "glDisableVertexAttribArrayARB") == 0) {
    if (__glintercept_fnptr_glDisableVertexAttribArrayARB == NULL) {
      __glintercept_fnptr_glDisableVertexAttribArrayARB = (__ctype_glDisableVertexAttribArrayARB) eglGetProcAddr("glDisableVertexAttribArrayARB");
    }
    if (__glintercept_fnptr_glDisableVertexAttribArrayARB == NULL) return NULL;
    return (void*) __glintercept_glDisableVertexAttribArrayARB;
  }
  if (strcmp(name, "glDisablei") == 0) {
    if (__glintercept_fnptr_glDisablei == NULL) {
      __glintercept_fnptr_glDisablei = (__ctype_glDisablei) eglGetProcAddr("glDisablei");
    }
    if (__glintercept_fnptr_glDisablei == NULL) return NULL;
    return (void*) __glintercept_glDisablei;
  }
  if (strcmp(name, "glDisableiEXT") == 0) {
    if (__glintercept_fnptr_glDisableiEXT == NULL) {
      __glintercept_fnptr_glDisableiEXT = (__ctype_glDisableiEXT) eglGetProcAddr("glDisableiEXT");
    }
    if (__glintercept_fnptr_glDisableiEXT == NULL) return NULL;
    return (void*) __glintercept_glDisableiEXT;
  }
  if (strcmp(name, "glDisableiNV") == 0) {
    if (__glintercept_fnptr_glDisableiNV == NULL) {
      __glintercept_fnptr_glDisableiNV = (__ctype_glDisableiNV) eglGetProcAddr("glDisableiNV");
    }
    if (__glintercept_fnptr_glDisableiNV == NULL) return NULL;
    return (void*) __glintercept_glDisableiNV;
  }
  if (strcmp(name, "glDisableiOES") == 0) {
    if (__glintercept_fnptr_glDisableiOES == NULL) {
      __glintercept_fnptr_glDisableiOES = (__ctype_glDisableiOES) eglGetProcAddr("glDisableiOES");
    }
    if (__glintercept_fnptr_glDisableiOES == NULL) return NULL;
    return (void*) __glintercept_glDisableiOES;
  }
  if (strcmp(name, "glDiscardFramebufferEXT") == 0) {
    if (__glintercept_fnptr_glDiscardFramebufferEXT == NULL) {
      __glintercept_fnptr_glDiscardFramebufferEXT = (__ctype_glDiscardFramebufferEXT) eglGetProcAddr("glDiscardFramebufferEXT");
    }
    if (__glintercept_fnptr_glDiscardFramebufferEXT == NULL) return NULL;
    return (void*) __glintercept_glDiscardFramebufferEXT;
  }
  if (strcmp(name, "glDispatchCompute") == 0) {
    if (__glintercept_fnptr_glDispatchCompute == NULL) {
      __glintercept_fnptr_glDispatchCompute = (__ctype_glDispatchCompute) eglGetProcAddr("glDispatchCompute");
    }
    if (__glintercept_fnptr_glDispatchCompute == NULL) return NULL;
    return (void*) __glintercept_glDispatchCompute;
  }
  if (strcmp(name, "glDispatchComputeGroupSizeARB") == 0) {
    if (__glintercept_fnptr_glDispatchComputeGroupSizeARB == NULL) {
      __glintercept_fnptr_glDispatchComputeGroupSizeARB = (__ctype_glDispatchComputeGroupSizeARB) eglGetProcAddr("glDispatchComputeGroupSizeARB");
    }
    if (__glintercept_fnptr_glDispatchComputeGroupSizeARB == NULL) return NULL;
    return (void*) __glintercept_glDispatchComputeGroupSizeARB;
  }
  if (strcmp(name, "glDispatchComputeIndirect") == 0) {
    if (__glintercept_fnptr_glDispatchComputeIndirect == NULL) {
      __glintercept_fnptr_glDispatchComputeIndirect = (__ctype_glDispatchComputeIndirect) eglGetProcAddr("glDispatchComputeIndirect");
    }
    if (__glintercept_fnptr_glDispatchComputeIndirect == NULL) return NULL;
    return (void*) __glintercept_glDispatchComputeIndirect;
  }
  if (strcmp(name, "glDrawArrays") == 0) {
    if (__glintercept_fnptr_glDrawArrays == NULL) {
      __glintercept_fnptr_glDrawArrays = (__ctype_glDrawArrays) eglGetProcAddr("glDrawArrays");
    }
    if (__glintercept_fnptr_glDrawArrays == NULL) return NULL;
    return (void*) __glintercept_glDrawArrays;
  }
  if (strcmp(name, "glDrawArraysEXT") == 0) {
    if (__glintercept_fnptr_glDrawArraysEXT == NULL) {
      __glintercept_fnptr_glDrawArraysEXT = (__ctype_glDrawArraysEXT) eglGetProcAddr("glDrawArraysEXT");
    }
    if (__glintercept_fnptr_glDrawArraysEXT == NULL) return NULL;
    return (void*) __glintercept_glDrawArraysEXT;
  }
  if (strcmp(name, "glDrawArraysIndirect") == 0) {
    if (__glintercept_fnptr_glDrawArraysIndirect == NULL) {
      __glintercept_fnptr_glDrawArraysIndirect = (__ctype_glDrawArraysIndirect) eglGetProcAddr("glDrawArraysIndirect");
    }
    if (__glintercept_fnptr_glDrawArraysIndirect == NULL) return NULL;
    return (void*) __glintercept_glDrawArraysIndirect;
  }
  if (strcmp(name, "glDrawArraysInstanced") == 0) {
    if (__glintercept_fnptr_glDrawArraysInstanced == NULL) {
      __glintercept_fnptr_glDrawArraysInstanced = (__ctype_glDrawArraysInstanced) eglGetProcAddr("glDrawArraysInstanced");
    }
    if (__glintercept_fnptr_glDrawArraysInstanced == NULL) return NULL;
    return (void*) __glintercept_glDrawArraysInstanced;
  }
  if (strcmp(name, "glDrawArraysInstancedANGLE") == 0) {
    if (__glintercept_fnptr_glDrawArraysInstancedANGLE == NULL) {
      __glintercept_fnptr_glDrawArraysInstancedANGLE = (__ctype_glDrawArraysInstancedANGLE) eglGetProcAddr("glDrawArraysInstancedANGLE");
    }
    if (__glintercept_fnptr_glDrawArraysInstancedANGLE == NULL) return NULL;
    return (void*) __glintercept_glDrawArraysInstancedANGLE;
  }
  if (strcmp(name, "glDrawArraysInstancedARB") == 0) {
    if (__glintercept_fnptr_glDrawArraysInstancedARB == NULL) {
      __glintercept_fnptr_glDrawArraysInstancedARB = (__ctype_glDrawArraysInstancedARB) eglGetProcAddr("glDrawArraysInstancedARB");
    }
    if (__glintercept_fnptr_glDrawArraysInstancedARB == NULL) return NULL;
    return (void*) __glintercept_glDrawArraysInstancedARB;
  }
  if (strcmp(name, "glDrawArraysInstancedBaseInstance") == 0) {
    if (__glintercept_fnptr_glDrawArraysInstancedBaseInstance == NULL) {
      __glintercept_fnptr_glDrawArraysInstancedBaseInstance = (__ctype_glDrawArraysInstancedBaseInstance) eglGetProcAddr("glDrawArraysInstancedBaseInstance");
    }
    if (__glintercept_fnptr_glDrawArraysInstancedBaseInstance == NULL) return NULL;
    return (void*) __glintercept_glDrawArraysInstancedBaseInstance;
  }
  if (strcmp(name, "glDrawArraysInstancedBaseInstanceEXT") == 0) {
    if (__glintercept_fnptr_glDrawArraysInstancedBaseInstanceEXT == NULL) {
      __glintercept_fnptr_glDrawArraysInstancedBaseInstanceEXT = (__ctype_glDrawArraysInstancedBaseInstanceEXT) eglGetProcAddr("glDrawArraysInstancedBaseInstanceEXT");
    }
    if (__glintercept_fnptr_glDrawArraysInstancedBaseInstanceEXT == NULL) return NULL;
    return (void*) __glintercept_glDrawArraysInstancedBaseInstanceEXT;
  }
  if (strcmp(name, "glDrawArraysInstancedEXT") == 0) {
    if (__glintercept_fnptr_glDrawArraysInstancedEXT == NULL) {
      __glintercept_fnptr_glDrawArraysInstancedEXT = (__ctype_glDrawArraysInstancedEXT) eglGetProcAddr("glDrawArraysInstancedEXT");
    }
    if (__glintercept_fnptr_glDrawArraysInstancedEXT == NULL) return NULL;
    return (void*) __glintercept_glDrawArraysInstancedEXT;
  }
  if (strcmp(name, "glDrawArraysInstancedNV") == 0) {
    if (__glintercept_fnptr_glDrawArraysInstancedNV == NULL) {
      __glintercept_fnptr_glDrawArraysInstancedNV = (__ctype_glDrawArraysInstancedNV) eglGetProcAddr("glDrawArraysInstancedNV");
    }
    if (__glintercept_fnptr_glDrawArraysInstancedNV == NULL) return NULL;
    return (void*) __glintercept_glDrawArraysInstancedNV;
  }
  if (strcmp(name, "glDrawBuffer") == 0) {
    if (__glintercept_fnptr_glDrawBuffer == NULL) {
      __glintercept_fnptr_glDrawBuffer = (__ctype_glDrawBuffer) eglGetProcAddr("glDrawBuffer");
    }
    if (__glintercept_fnptr_glDrawBuffer == NULL) return NULL;
    return (void*) __glintercept_glDrawBuffer;
  }
  if (strcmp(name, "glDrawBuffers") == 0) {
    if (__glintercept_fnptr_glDrawBuffers == NULL) {
      __glintercept_fnptr_glDrawBuffers = (__ctype_glDrawBuffers) eglGetProcAddr("glDrawBuffers");
    }
    if (__glintercept_fnptr_glDrawBuffers == NULL) return NULL;
    return (void*) __glintercept_glDrawBuffers;
  }
  if (strcmp(name, "glDrawBuffersARB") == 0) {
    if (__glintercept_fnptr_glDrawBuffersARB == NULL) {
      __glintercept_fnptr_glDrawBuffersARB = (__ctype_glDrawBuffersARB) eglGetProcAddr("glDrawBuffersARB");
    }
    if (__glintercept_fnptr_glDrawBuffersARB == NULL) return NULL;
    return (void*) __glintercept_glDrawBuffersARB;
  }
  if (strcmp(name, "glDrawBuffersATI") == 0) {
    if (__glintercept_fnptr_glDrawBuffersATI == NULL) {
      __glintercept_fnptr_glDrawBuffersATI = (__ctype_glDrawBuffersATI) eglGetProcAddr("glDrawBuffersATI");
    }
    if (__glintercept_fnptr_glDrawBuffersATI == NULL) return NULL;
    return (void*) __glintercept_glDrawBuffersATI;
  }
  if (strcmp(name, "glDrawBuffersEXT") == 0) {
    if (__glintercept_fnptr_glDrawBuffersEXT == NULL) {
      __glintercept_fnptr_glDrawBuffersEXT = (__ctype_glDrawBuffersEXT) eglGetProcAddr("glDrawBuffersEXT");
    }
    if (__glintercept_fnptr_glDrawBuffersEXT == NULL) return NULL;
    return (void*) __glintercept_glDrawBuffersEXT;
  }
  if (strcmp(name, "glDrawBuffersIndexedEXT") == 0) {
    if (__glintercept_fnptr_glDrawBuffersIndexedEXT == NULL) {
      __glintercept_fnptr_glDrawBuffersIndexedEXT = (__ctype_glDrawBuffersIndexedEXT) eglGetProcAddr("glDrawBuffersIndexedEXT");
    }
    if (__glintercept_fnptr_glDrawBuffersIndexedEXT == NULL) return NULL;
    return (void*) __glintercept_glDrawBuffersIndexedEXT;
  }
  if (strcmp(name, "glDrawBuffersNV") == 0) {
    if (__glintercept_fnptr_glDrawBuffersNV == NULL) {
      __glintercept_fnptr_glDrawBuffersNV = (__ctype_glDrawBuffersNV) eglGetProcAddr("glDrawBuffersNV");
    }
    if (__glintercept_fnptr_glDrawBuffersNV == NULL) return NULL;
    return (void*) __glintercept_glDrawBuffersNV;
  }
  if (strcmp(name, "glDrawCommandsAddressNV") == 0) {
    if (__glintercept_fnptr_glDrawCommandsAddressNV == NULL) {
      __glintercept_fnptr_glDrawCommandsAddressNV = (__ctype_glDrawCommandsAddressNV) eglGetProcAddr("glDrawCommandsAddressNV");
    }
    if (__glintercept_fnptr_glDrawCommandsAddressNV == NULL) return NULL;
    return (void*) __glintercept_glDrawCommandsAddressNV;
  }
  if (strcmp(name, "glDrawCommandsNV") == 0) {
    if (__glintercept_fnptr_glDrawCommandsNV == NULL) {
      __glintercept_fnptr_glDrawCommandsNV = (__ctype_glDrawCommandsNV) eglGetProcAddr("glDrawCommandsNV");
    }
    if (__glintercept_fnptr_glDrawCommandsNV == NULL) return NULL;
    return (void*) __glintercept_glDrawCommandsNV;
  }
  if (strcmp(name, "glDrawCommandsStatesAddressNV") == 0) {
    if (__glintercept_fnptr_glDrawCommandsStatesAddressNV == NULL) {
      __glintercept_fnptr_glDrawCommandsStatesAddressNV = (__ctype_glDrawCommandsStatesAddressNV) eglGetProcAddr("glDrawCommandsStatesAddressNV");
    }
    if (__glintercept_fnptr_glDrawCommandsStatesAddressNV == NULL) return NULL;
    return (void*) __glintercept_glDrawCommandsStatesAddressNV;
  }
  if (strcmp(name, "glDrawCommandsStatesNV") == 0) {
    if (__glintercept_fnptr_glDrawCommandsStatesNV == NULL) {
      __glintercept_fnptr_glDrawCommandsStatesNV = (__ctype_glDrawCommandsStatesNV) eglGetProcAddr("glDrawCommandsStatesNV");
    }
    if (__glintercept_fnptr_glDrawCommandsStatesNV == NULL) return NULL;
    return (void*) __glintercept_glDrawCommandsStatesNV;
  }
  if (strcmp(name, "glDrawElementArrayAPPLE") == 0) {
    if (__glintercept_fnptr_glDrawElementArrayAPPLE == NULL) {
      __glintercept_fnptr_glDrawElementArrayAPPLE = (__ctype_glDrawElementArrayAPPLE) eglGetProcAddr("glDrawElementArrayAPPLE");
    }
    if (__glintercept_fnptr_glDrawElementArrayAPPLE == NULL) return NULL;
    return (void*) __glintercept_glDrawElementArrayAPPLE;
  }
  if (strcmp(name, "glDrawElementArrayATI") == 0) {
    if (__glintercept_fnptr_glDrawElementArrayATI == NULL) {
      __glintercept_fnptr_glDrawElementArrayATI = (__ctype_glDrawElementArrayATI) eglGetProcAddr("glDrawElementArrayATI");
    }
    if (__glintercept_fnptr_glDrawElementArrayATI == NULL) return NULL;
    return (void*) __glintercept_glDrawElementArrayATI;
  }
  if (strcmp(name, "glDrawElements") == 0) {
    if (__glintercept_fnptr_glDrawElements == NULL) {
      __glintercept_fnptr_glDrawElements = (__ctype_glDrawElements) eglGetProcAddr("glDrawElements");
    }
    if (__glintercept_fnptr_glDrawElements == NULL) return NULL;
    return (void*) __glintercept_glDrawElements;
  }
  if (strcmp(name, "glDrawElementsBaseVertex") == 0) {
    if (__glintercept_fnptr_glDrawElementsBaseVertex == NULL) {
      __glintercept_fnptr_glDrawElementsBaseVertex = (__ctype_glDrawElementsBaseVertex) eglGetProcAddr("glDrawElementsBaseVertex");
    }
    if (__glintercept_fnptr_glDrawElementsBaseVertex == NULL) return NULL;
    return (void*) __glintercept_glDrawElementsBaseVertex;
  }
  if (strcmp(name, "glDrawElementsBaseVertexEXT") == 0) {
    if (__glintercept_fnptr_glDrawElementsBaseVertexEXT == NULL) {
      __glintercept_fnptr_glDrawElementsBaseVertexEXT = (__ctype_glDrawElementsBaseVertexEXT) eglGetProcAddr("glDrawElementsBaseVertexEXT");
    }
    if (__glintercept_fnptr_glDrawElementsBaseVertexEXT == NULL) return NULL;
    return (void*) __glintercept_glDrawElementsBaseVertexEXT;
  }
  if (strcmp(name, "glDrawElementsBaseVertexOES") == 0) {
    if (__glintercept_fnptr_glDrawElementsBaseVertexOES == NULL) {
      __glintercept_fnptr_glDrawElementsBaseVertexOES = (__ctype_glDrawElementsBaseVertexOES) eglGetProcAddr("glDrawElementsBaseVertexOES");
    }
    if (__glintercept_fnptr_glDrawElementsBaseVertexOES == NULL) return NULL;
    return (void*) __glintercept_glDrawElementsBaseVertexOES;
  }
  if (strcmp(name, "glDrawElementsIndirect") == 0) {
    if (__glintercept_fnptr_glDrawElementsIndirect == NULL) {
      __glintercept_fnptr_glDrawElementsIndirect = (__ctype_glDrawElementsIndirect) eglGetProcAddr("glDrawElementsIndirect");
    }
    if (__glintercept_fnptr_glDrawElementsIndirect == NULL) return NULL;
    return (void*) __glintercept_glDrawElementsIndirect;
  }
  if (strcmp(name, "glDrawElementsInstanced") == 0) {
    if (__glintercept_fnptr_glDrawElementsInstanced == NULL) {
      __glintercept_fnptr_glDrawElementsInstanced = (__ctype_glDrawElementsInstanced) eglGetProcAddr("glDrawElementsInstanced");
    }
    if (__glintercept_fnptr_glDrawElementsInstanced == NULL) return NULL;
    return (void*) __glintercept_glDrawElementsInstanced;
  }
  if (strcmp(name, "glDrawElementsInstancedANGLE") == 0) {
    if (__glintercept_fnptr_glDrawElementsInstancedANGLE == NULL) {
      __glintercept_fnptr_glDrawElementsInstancedANGLE = (__ctype_glDrawElementsInstancedANGLE) eglGetProcAddr("glDrawElementsInstancedANGLE");
    }
    if (__glintercept_fnptr_glDrawElementsInstancedANGLE == NULL) return NULL;
    return (void*) __glintercept_glDrawElementsInstancedANGLE;
  }
  if (strcmp(name, "glDrawElementsInstancedARB") == 0) {
    if (__glintercept_fnptr_glDrawElementsInstancedARB == NULL) {
      __glintercept_fnptr_glDrawElementsInstancedARB = (__ctype_glDrawElementsInstancedARB) eglGetProcAddr("glDrawElementsInstancedARB");
    }
    if (__glintercept_fnptr_glDrawElementsInstancedARB == NULL) return NULL;
    return (void*) __glintercept_glDrawElementsInstancedARB;
  }
  if (strcmp(name, "glDrawElementsInstancedBaseInstance") == 0) {
    if (__glintercept_fnptr_glDrawElementsInstancedBaseInstance == NULL) {
      __glintercept_fnptr_glDrawElementsInstancedBaseInstance = (__ctype_glDrawElementsInstancedBaseInstance) eglGetProcAddr("glDrawElementsInstancedBaseInstance");
    }
    if (__glintercept_fnptr_glDrawElementsInstancedBaseInstance == NULL) return NULL;
    return (void*) __glintercept_glDrawElementsInstancedBaseInstance;
  }
  if (strcmp(name, "glDrawElementsInstancedBaseInstanceEXT") == 0) {
    if (__glintercept_fnptr_glDrawElementsInstancedBaseInstanceEXT == NULL) {
      __glintercept_fnptr_glDrawElementsInstancedBaseInstanceEXT = (__ctype_glDrawElementsInstancedBaseInstanceEXT) eglGetProcAddr("glDrawElementsInstancedBaseInstanceEXT");
    }
    if (__glintercept_fnptr_glDrawElementsInstancedBaseInstanceEXT == NULL) return NULL;
    return (void*) __glintercept_glDrawElementsInstancedBaseInstanceEXT;
  }
  if (strcmp(name, "glDrawElementsInstancedBaseVertex") == 0) {
    if (__glintercept_fnptr_glDrawElementsInstancedBaseVertex == NULL) {
      __glintercept_fnptr_glDrawElementsInstancedBaseVertex = (__ctype_glDrawElementsInstancedBaseVertex) eglGetProcAddr("glDrawElementsInstancedBaseVertex");
    }
    if (__glintercept_fnptr_glDrawElementsInstancedBaseVertex == NULL) return NULL;
    return (void*) __glintercept_glDrawElementsInstancedBaseVertex;
  }
  if (strcmp(name, "glDrawElementsInstancedBaseVertexBaseInstance") == 0) {
    if (__glintercept_fnptr_glDrawElementsInstancedBaseVertexBaseInstance == NULL) {
      __glintercept_fnptr_glDrawElementsInstancedBaseVertexBaseInstance = (__ctype_glDrawElementsInstancedBaseVertexBaseInstance) eglGetProcAddr("glDrawElementsInstancedBaseVertexBaseInstance");
    }
    if (__glintercept_fnptr_glDrawElementsInstancedBaseVertexBaseInstance == NULL) return NULL;
    return (void*) __glintercept_glDrawElementsInstancedBaseVertexBaseInstance;
  }
  if (strcmp(name, "glDrawElementsInstancedBaseVertexBaseInstanceEXT") == 0) {
    if (__glintercept_fnptr_glDrawElementsInstancedBaseVertexBaseInstanceEXT == NULL) {
      __glintercept_fnptr_glDrawElementsInstancedBaseVertexBaseInstanceEXT = (__ctype_glDrawElementsInstancedBaseVertexBaseInstanceEXT) eglGetProcAddr("glDrawElementsInstancedBaseVertexBaseInstanceEXT");
    }
    if (__glintercept_fnptr_glDrawElementsInstancedBaseVertexBaseInstanceEXT == NULL) return NULL;
    return (void*) __glintercept_glDrawElementsInstancedBaseVertexBaseInstanceEXT;
  }
  if (strcmp(name, "glDrawElementsInstancedBaseVertexEXT") == 0) {
    if (__glintercept_fnptr_glDrawElementsInstancedBaseVertexEXT == NULL) {
      __glintercept_fnptr_glDrawElementsInstancedBaseVertexEXT = (__ctype_glDrawElementsInstancedBaseVertexEXT) eglGetProcAddr("glDrawElementsInstancedBaseVertexEXT");
    }
    if (__glintercept_fnptr_glDrawElementsInstancedBaseVertexEXT == NULL) return NULL;
    return (void*) __glintercept_glDrawElementsInstancedBaseVertexEXT;
  }
  if (strcmp(name, "glDrawElementsInstancedBaseVertexOES") == 0) {
    if (__glintercept_fnptr_glDrawElementsInstancedBaseVertexOES == NULL) {
      __glintercept_fnptr_glDrawElementsInstancedBaseVertexOES = (__ctype_glDrawElementsInstancedBaseVertexOES) eglGetProcAddr("glDrawElementsInstancedBaseVertexOES");
    }
    if (__glintercept_fnptr_glDrawElementsInstancedBaseVertexOES == NULL) return NULL;
    return (void*) __glintercept_glDrawElementsInstancedBaseVertexOES;
  }
  if (strcmp(name, "glDrawElementsInstancedEXT") == 0) {
    if (__glintercept_fnptr_glDrawElementsInstancedEXT == NULL) {
      __glintercept_fnptr_glDrawElementsInstancedEXT = (__ctype_glDrawElementsInstancedEXT) eglGetProcAddr("glDrawElementsInstancedEXT");
    }
    if (__glintercept_fnptr_glDrawElementsInstancedEXT == NULL) return NULL;
    return (void*) __glintercept_glDrawElementsInstancedEXT;
  }
  if (strcmp(name, "glDrawElementsInstancedNV") == 0) {
    if (__glintercept_fnptr_glDrawElementsInstancedNV == NULL) {
      __glintercept_fnptr_glDrawElementsInstancedNV = (__ctype_glDrawElementsInstancedNV) eglGetProcAddr("glDrawElementsInstancedNV");
    }
    if (__glintercept_fnptr_glDrawElementsInstancedNV == NULL) return NULL;
    return (void*) __glintercept_glDrawElementsInstancedNV;
  }
  if (strcmp(name, "glDrawMeshArraysSUN") == 0) {
    if (__glintercept_fnptr_glDrawMeshArraysSUN == NULL) {
      __glintercept_fnptr_glDrawMeshArraysSUN = (__ctype_glDrawMeshArraysSUN) eglGetProcAddr("glDrawMeshArraysSUN");
    }
    if (__glintercept_fnptr_glDrawMeshArraysSUN == NULL) return NULL;
    return (void*) __glintercept_glDrawMeshArraysSUN;
  }
  if (strcmp(name, "glDrawMeshTasksNV") == 0) {
    if (__glintercept_fnptr_glDrawMeshTasksNV == NULL) {
      __glintercept_fnptr_glDrawMeshTasksNV = (__ctype_glDrawMeshTasksNV) eglGetProcAddr("glDrawMeshTasksNV");
    }
    if (__glintercept_fnptr_glDrawMeshTasksNV == NULL) return NULL;
    return (void*) __glintercept_glDrawMeshTasksNV;
  }
  if (strcmp(name, "glDrawMeshTasksIndirectNV") == 0) {
    if (__glintercept_fnptr_glDrawMeshTasksIndirectNV == NULL) {
      __glintercept_fnptr_glDrawMeshTasksIndirectNV = (__ctype_glDrawMeshTasksIndirectNV) eglGetProcAddr("glDrawMeshTasksIndirectNV");
    }
    if (__glintercept_fnptr_glDrawMeshTasksIndirectNV == NULL) return NULL;
    return (void*) __glintercept_glDrawMeshTasksIndirectNV;
  }
  if (strcmp(name, "glDrawPixels") == 0) {
    if (__glintercept_fnptr_glDrawPixels == NULL) {
      __glintercept_fnptr_glDrawPixels = (__ctype_glDrawPixels) eglGetProcAddr("glDrawPixels");
    }
    if (__glintercept_fnptr_glDrawPixels == NULL) return NULL;
    return (void*) __glintercept_glDrawPixels;
  }
  if (strcmp(name, "glDrawRangeElementArrayAPPLE") == 0) {
    if (__glintercept_fnptr_glDrawRangeElementArrayAPPLE == NULL) {
      __glintercept_fnptr_glDrawRangeElementArrayAPPLE = (__ctype_glDrawRangeElementArrayAPPLE) eglGetProcAddr("glDrawRangeElementArrayAPPLE");
    }
    if (__glintercept_fnptr_glDrawRangeElementArrayAPPLE == NULL) return NULL;
    return (void*) __glintercept_glDrawRangeElementArrayAPPLE;
  }
  if (strcmp(name, "glDrawRangeElementArrayATI") == 0) {
    if (__glintercept_fnptr_glDrawRangeElementArrayATI == NULL) {
      __glintercept_fnptr_glDrawRangeElementArrayATI = (__ctype_glDrawRangeElementArrayATI) eglGetProcAddr("glDrawRangeElementArrayATI");
    }
    if (__glintercept_fnptr_glDrawRangeElementArrayATI == NULL) return NULL;
    return (void*) __glintercept_glDrawRangeElementArrayATI;
  }
  if (strcmp(name, "glDrawRangeElements") == 0) {
    if (__glintercept_fnptr_glDrawRangeElements == NULL) {
      __glintercept_fnptr_glDrawRangeElements = (__ctype_glDrawRangeElements) eglGetProcAddr("glDrawRangeElements");
    }
    if (__glintercept_fnptr_glDrawRangeElements == NULL) return NULL;
    return (void*) __glintercept_glDrawRangeElements;
  }
  if (strcmp(name, "glDrawRangeElementsBaseVertex") == 0) {
    if (__glintercept_fnptr_glDrawRangeElementsBaseVertex == NULL) {
      __glintercept_fnptr_glDrawRangeElementsBaseVertex = (__ctype_glDrawRangeElementsBaseVertex) eglGetProcAddr("glDrawRangeElementsBaseVertex");
    }
    if (__glintercept_fnptr_glDrawRangeElementsBaseVertex == NULL) return NULL;
    return (void*) __glintercept_glDrawRangeElementsBaseVertex;
  }
  if (strcmp(name, "glDrawRangeElementsBaseVertexEXT") == 0) {
    if (__glintercept_fnptr_glDrawRangeElementsBaseVertexEXT == NULL) {
      __glintercept_fnptr_glDrawRangeElementsBaseVertexEXT = (__ctype_glDrawRangeElementsBaseVertexEXT) eglGetProcAddr("glDrawRangeElementsBaseVertexEXT");
    }
    if (__glintercept_fnptr_glDrawRangeElementsBaseVertexEXT == NULL) return NULL;
    return (void*) __glintercept_glDrawRangeElementsBaseVertexEXT;
  }
  if (strcmp(name, "glDrawRangeElementsBaseVertexOES") == 0) {
    if (__glintercept_fnptr_glDrawRangeElementsBaseVertexOES == NULL) {
      __glintercept_fnptr_glDrawRangeElementsBaseVertexOES = (__ctype_glDrawRangeElementsBaseVertexOES) eglGetProcAddr("glDrawRangeElementsBaseVertexOES");
    }
    if (__glintercept_fnptr_glDrawRangeElementsBaseVertexOES == NULL) return NULL;
    return (void*) __glintercept_glDrawRangeElementsBaseVertexOES;
  }
  if (strcmp(name, "glDrawRangeElementsEXT") == 0) {
    if (__glintercept_fnptr_glDrawRangeElementsEXT == NULL) {
      __glintercept_fnptr_glDrawRangeElementsEXT = (__ctype_glDrawRangeElementsEXT) eglGetProcAddr("glDrawRangeElementsEXT");
    }
    if (__glintercept_fnptr_glDrawRangeElementsEXT == NULL) return NULL;
    return (void*) __glintercept_glDrawRangeElementsEXT;
  }
  if (strcmp(name, "glDrawTexfOES") == 0) {
    if (__glintercept_fnptr_glDrawTexfOES == NULL) {
      __glintercept_fnptr_glDrawTexfOES = (__ctype_glDrawTexfOES) eglGetProcAddr("glDrawTexfOES");
    }
    if (__glintercept_fnptr_glDrawTexfOES == NULL) return NULL;
    return (void*) __glintercept_glDrawTexfOES;
  }
  if (strcmp(name, "glDrawTexfvOES") == 0) {
    if (__glintercept_fnptr_glDrawTexfvOES == NULL) {
      __glintercept_fnptr_glDrawTexfvOES = (__ctype_glDrawTexfvOES) eglGetProcAddr("glDrawTexfvOES");
    }
    if (__glintercept_fnptr_glDrawTexfvOES == NULL) return NULL;
    return (void*) __glintercept_glDrawTexfvOES;
  }
  if (strcmp(name, "glDrawTexiOES") == 0) {
    if (__glintercept_fnptr_glDrawTexiOES == NULL) {
      __glintercept_fnptr_glDrawTexiOES = (__ctype_glDrawTexiOES) eglGetProcAddr("glDrawTexiOES");
    }
    if (__glintercept_fnptr_glDrawTexiOES == NULL) return NULL;
    return (void*) __glintercept_glDrawTexiOES;
  }
  if (strcmp(name, "glDrawTexivOES") == 0) {
    if (__glintercept_fnptr_glDrawTexivOES == NULL) {
      __glintercept_fnptr_glDrawTexivOES = (__ctype_glDrawTexivOES) eglGetProcAddr("glDrawTexivOES");
    }
    if (__glintercept_fnptr_glDrawTexivOES == NULL) return NULL;
    return (void*) __glintercept_glDrawTexivOES;
  }
  if (strcmp(name, "glDrawTexsOES") == 0) {
    if (__glintercept_fnptr_glDrawTexsOES == NULL) {
      __glintercept_fnptr_glDrawTexsOES = (__ctype_glDrawTexsOES) eglGetProcAddr("glDrawTexsOES");
    }
    if (__glintercept_fnptr_glDrawTexsOES == NULL) return NULL;
    return (void*) __glintercept_glDrawTexsOES;
  }
  if (strcmp(name, "glDrawTexsvOES") == 0) {
    if (__glintercept_fnptr_glDrawTexsvOES == NULL) {
      __glintercept_fnptr_glDrawTexsvOES = (__ctype_glDrawTexsvOES) eglGetProcAddr("glDrawTexsvOES");
    }
    if (__glintercept_fnptr_glDrawTexsvOES == NULL) return NULL;
    return (void*) __glintercept_glDrawTexsvOES;
  }
  if (strcmp(name, "glDrawTextureNV") == 0) {
    if (__glintercept_fnptr_glDrawTextureNV == NULL) {
      __glintercept_fnptr_glDrawTextureNV = (__ctype_glDrawTextureNV) eglGetProcAddr("glDrawTextureNV");
    }
    if (__glintercept_fnptr_glDrawTextureNV == NULL) return NULL;
    return (void*) __glintercept_glDrawTextureNV;
  }
  if (strcmp(name, "glDrawTexxOES") == 0) {
    if (__glintercept_fnptr_glDrawTexxOES == NULL) {
      __glintercept_fnptr_glDrawTexxOES = (__ctype_glDrawTexxOES) eglGetProcAddr("glDrawTexxOES");
    }
    if (__glintercept_fnptr_glDrawTexxOES == NULL) return NULL;
    return (void*) __glintercept_glDrawTexxOES;
  }
  if (strcmp(name, "glDrawTexxvOES") == 0) {
    if (__glintercept_fnptr_glDrawTexxvOES == NULL) {
      __glintercept_fnptr_glDrawTexxvOES = (__ctype_glDrawTexxvOES) eglGetProcAddr("glDrawTexxvOES");
    }
    if (__glintercept_fnptr_glDrawTexxvOES == NULL) return NULL;
    return (void*) __glintercept_glDrawTexxvOES;
  }
  if (strcmp(name, "glDrawTransformFeedback") == 0) {
    if (__glintercept_fnptr_glDrawTransformFeedback == NULL) {
      __glintercept_fnptr_glDrawTransformFeedback = (__ctype_glDrawTransformFeedback) eglGetProcAddr("glDrawTransformFeedback");
    }
    if (__glintercept_fnptr_glDrawTransformFeedback == NULL) return NULL;
    return (void*) __glintercept_glDrawTransformFeedback;
  }
  if (strcmp(name, "glDrawTransformFeedbackEXT") == 0) {
    if (__glintercept_fnptr_glDrawTransformFeedbackEXT == NULL) {
      __glintercept_fnptr_glDrawTransformFeedbackEXT = (__ctype_glDrawTransformFeedbackEXT) eglGetProcAddr("glDrawTransformFeedbackEXT");
    }
    if (__glintercept_fnptr_glDrawTransformFeedbackEXT == NULL) return NULL;
    return (void*) __glintercept_glDrawTransformFeedbackEXT;
  }
  if (strcmp(name, "glDrawTransformFeedbackInstanced") == 0) {
    if (__glintercept_fnptr_glDrawTransformFeedbackInstanced == NULL) {
      __glintercept_fnptr_glDrawTransformFeedbackInstanced = (__ctype_glDrawTransformFeedbackInstanced) eglGetProcAddr("glDrawTransformFeedbackInstanced");
    }
    if (__glintercept_fnptr_glDrawTransformFeedbackInstanced == NULL) return NULL;
    return (void*) __glintercept_glDrawTransformFeedbackInstanced;
  }
  if (strcmp(name, "glDrawTransformFeedbackInstancedEXT") == 0) {
    if (__glintercept_fnptr_glDrawTransformFeedbackInstancedEXT == NULL) {
      __glintercept_fnptr_glDrawTransformFeedbackInstancedEXT = (__ctype_glDrawTransformFeedbackInstancedEXT) eglGetProcAddr("glDrawTransformFeedbackInstancedEXT");
    }
    if (__glintercept_fnptr_glDrawTransformFeedbackInstancedEXT == NULL) return NULL;
    return (void*) __glintercept_glDrawTransformFeedbackInstancedEXT;
  }
  if (strcmp(name, "glDrawTransformFeedbackNV") == 0) {
    if (__glintercept_fnptr_glDrawTransformFeedbackNV == NULL) {
      __glintercept_fnptr_glDrawTransformFeedbackNV = (__ctype_glDrawTransformFeedbackNV) eglGetProcAddr("glDrawTransformFeedbackNV");
    }
    if (__glintercept_fnptr_glDrawTransformFeedbackNV == NULL) return NULL;
    return (void*) __glintercept_glDrawTransformFeedbackNV;
  }
  if (strcmp(name, "glDrawTransformFeedbackStream") == 0) {
    if (__glintercept_fnptr_glDrawTransformFeedbackStream == NULL) {
      __glintercept_fnptr_glDrawTransformFeedbackStream = (__ctype_glDrawTransformFeedbackStream) eglGetProcAddr("glDrawTransformFeedbackStream");
    }
    if (__glintercept_fnptr_glDrawTransformFeedbackStream == NULL) return NULL;
    return (void*) __glintercept_glDrawTransformFeedbackStream;
  }
  if (strcmp(name, "glDrawTransformFeedbackStreamInstanced") == 0) {
    if (__glintercept_fnptr_glDrawTransformFeedbackStreamInstanced == NULL) {
      __glintercept_fnptr_glDrawTransformFeedbackStreamInstanced = (__ctype_glDrawTransformFeedbackStreamInstanced) eglGetProcAddr("glDrawTransformFeedbackStreamInstanced");
    }
    if (__glintercept_fnptr_glDrawTransformFeedbackStreamInstanced == NULL) return NULL;
    return (void*) __glintercept_glDrawTransformFeedbackStreamInstanced;
  }
  if (strcmp(name, "glEGLImageTargetRenderbufferStorageOES") == 0) {
    if (__glintercept_fnptr_glEGLImageTargetRenderbufferStorageOES == NULL) {
      __glintercept_fnptr_glEGLImageTargetRenderbufferStorageOES = (__ctype_glEGLImageTargetRenderbufferStorageOES) eglGetProcAddr("glEGLImageTargetRenderbufferStorageOES");
    }
    if (__glintercept_fnptr_glEGLImageTargetRenderbufferStorageOES == NULL) return NULL;
    return (void*) __glintercept_glEGLImageTargetRenderbufferStorageOES;
  }
  if (strcmp(name, "glEGLImageTargetTexStorageEXT") == 0) {
    if (__glintercept_fnptr_glEGLImageTargetTexStorageEXT == NULL) {
      __glintercept_fnptr_glEGLImageTargetTexStorageEXT = (__ctype_glEGLImageTargetTexStorageEXT) eglGetProcAddr("glEGLImageTargetTexStorageEXT");
    }
    if (__glintercept_fnptr_glEGLImageTargetTexStorageEXT == NULL) return NULL;
    return (void*) __glintercept_glEGLImageTargetTexStorageEXT;
  }
  if (strcmp(name, "glEGLImageTargetTexture2DOES") == 0) {
    if (__glintercept_fnptr_glEGLImageTargetTexture2DOES == NULL) {
      __glintercept_fnptr_glEGLImageTargetTexture2DOES = (__ctype_glEGLImageTargetTexture2DOES) eglGetProcAddr("glEGLImageTargetTexture2DOES");
    }
    if (__glintercept_fnptr_glEGLImageTargetTexture2DOES == NULL) return NULL;
    return (void*) __glintercept_glEGLImageTargetTexture2DOES;
  }
  if (strcmp(name, "glEGLImageTargetTextureStorageEXT") == 0) {
    if (__glintercept_fnptr_glEGLImageTargetTextureStorageEXT == NULL) {
      __glintercept_fnptr_glEGLImageTargetTextureStorageEXT = (__ctype_glEGLImageTargetTextureStorageEXT) eglGetProcAddr("glEGLImageTargetTextureStorageEXT");
    }
    if (__glintercept_fnptr_glEGLImageTargetTextureStorageEXT == NULL) return NULL;
    return (void*) __glintercept_glEGLImageTargetTextureStorageEXT;
  }
  if (strcmp(name, "glEdgeFlag") == 0) {
    if (__glintercept_fnptr_glEdgeFlag == NULL) {
      __glintercept_fnptr_glEdgeFlag = (__ctype_glEdgeFlag) eglGetProcAddr("glEdgeFlag");
    }
    if (__glintercept_fnptr_glEdgeFlag == NULL) return NULL;
    return (void*) __glintercept_glEdgeFlag;
  }
  if (strcmp(name, "glEdgeFlagFormatNV") == 0) {
    if (__glintercept_fnptr_glEdgeFlagFormatNV == NULL) {
      __glintercept_fnptr_glEdgeFlagFormatNV = (__ctype_glEdgeFlagFormatNV) eglGetProcAddr("glEdgeFlagFormatNV");
    }
    if (__glintercept_fnptr_glEdgeFlagFormatNV == NULL) return NULL;
    return (void*) __glintercept_glEdgeFlagFormatNV;
  }
  if (strcmp(name, "glEdgeFlagPointer") == 0) {
    if (__glintercept_fnptr_glEdgeFlagPointer == NULL) {
      __glintercept_fnptr_glEdgeFlagPointer = (__ctype_glEdgeFlagPointer) eglGetProcAddr("glEdgeFlagPointer");
    }
    if (__glintercept_fnptr_glEdgeFlagPointer == NULL) return NULL;
    return (void*) __glintercept_glEdgeFlagPointer;
  }
  if (strcmp(name, "glEdgeFlagPointerEXT") == 0) {
    if (__glintercept_fnptr_glEdgeFlagPointerEXT == NULL) {
      __glintercept_fnptr_glEdgeFlagPointerEXT = (__ctype_glEdgeFlagPointerEXT) eglGetProcAddr("glEdgeFlagPointerEXT");
    }
    if (__glintercept_fnptr_glEdgeFlagPointerEXT == NULL) return NULL;
    return (void*) __glintercept_glEdgeFlagPointerEXT;
  }
  if (strcmp(name, "glEdgeFlagPointerListIBM") == 0) {
    if (__glintercept_fnptr_glEdgeFlagPointerListIBM == NULL) {
      __glintercept_fnptr_glEdgeFlagPointerListIBM = (__ctype_glEdgeFlagPointerListIBM) eglGetProcAddr("glEdgeFlagPointerListIBM");
    }
    if (__glintercept_fnptr_glEdgeFlagPointerListIBM == NULL) return NULL;
    return (void*) __glintercept_glEdgeFlagPointerListIBM;
  }
  if (strcmp(name, "glEdgeFlagv") == 0) {
    if (__glintercept_fnptr_glEdgeFlagv == NULL) {
      __glintercept_fnptr_glEdgeFlagv = (__ctype_glEdgeFlagv) eglGetProcAddr("glEdgeFlagv");
    }
    if (__glintercept_fnptr_glEdgeFlagv == NULL) return NULL;
    return (void*) __glintercept_glEdgeFlagv;
  }
  if (strcmp(name, "glElementPointerAPPLE") == 0) {
    if (__glintercept_fnptr_glElementPointerAPPLE == NULL) {
      __glintercept_fnptr_glElementPointerAPPLE = (__ctype_glElementPointerAPPLE) eglGetProcAddr("glElementPointerAPPLE");
    }
    if (__glintercept_fnptr_glElementPointerAPPLE == NULL) return NULL;
    return (void*) __glintercept_glElementPointerAPPLE;
  }
  if (strcmp(name, "glElementPointerATI") == 0) {
    if (__glintercept_fnptr_glElementPointerATI == NULL) {
      __glintercept_fnptr_glElementPointerATI = (__ctype_glElementPointerATI) eglGetProcAddr("glElementPointerATI");
    }
    if (__glintercept_fnptr_glElementPointerATI == NULL) return NULL;
    return (void*) __glintercept_glElementPointerATI;
  }
  if (strcmp(name, "glEnable") == 0) {
    if (__glintercept_fnptr_glEnable == NULL) {
      __glintercept_fnptr_glEnable = (__ctype_glEnable) eglGetProcAddr("glEnable");
    }
    if (__glintercept_fnptr_glEnable == NULL) return NULL;
    return (void*) __glintercept_glEnable;
  }
  if (strcmp(name, "glEnableClientState") == 0) {
    if (__glintercept_fnptr_glEnableClientState == NULL) {
      __glintercept_fnptr_glEnableClientState = (__ctype_glEnableClientState) eglGetProcAddr("glEnableClientState");
    }
    if (__glintercept_fnptr_glEnableClientState == NULL) return NULL;
    return (void*) __glintercept_glEnableClientState;
  }
  if (strcmp(name, "glEnableClientStateIndexedEXT") == 0) {
    if (__glintercept_fnptr_glEnableClientStateIndexedEXT == NULL) {
      __glintercept_fnptr_glEnableClientStateIndexedEXT = (__ctype_glEnableClientStateIndexedEXT) eglGetProcAddr("glEnableClientStateIndexedEXT");
    }
    if (__glintercept_fnptr_glEnableClientStateIndexedEXT == NULL) return NULL;
    return (void*) __glintercept_glEnableClientStateIndexedEXT;
  }
  if (strcmp(name, "glEnableClientStateiEXT") == 0) {
    if (__glintercept_fnptr_glEnableClientStateiEXT == NULL) {
      __glintercept_fnptr_glEnableClientStateiEXT = (__ctype_glEnableClientStateiEXT) eglGetProcAddr("glEnableClientStateiEXT");
    }
    if (__glintercept_fnptr_glEnableClientStateiEXT == NULL) return NULL;
    return (void*) __glintercept_glEnableClientStateiEXT;
  }
  if (strcmp(name, "glEnableDriverControlQCOM") == 0) {
    if (__glintercept_fnptr_glEnableDriverControlQCOM == NULL) {
      __glintercept_fnptr_glEnableDriverControlQCOM = (__ctype_glEnableDriverControlQCOM) eglGetProcAddr("glEnableDriverControlQCOM");
    }
    if (__glintercept_fnptr_glEnableDriverControlQCOM == NULL) return NULL;
    return (void*) __glintercept_glEnableDriverControlQCOM;
  }
  if (strcmp(name, "glEnableIndexedEXT") == 0) {
    if (__glintercept_fnptr_glEnableIndexedEXT == NULL) {
      __glintercept_fnptr_glEnableIndexedEXT = (__ctype_glEnableIndexedEXT) eglGetProcAddr("glEnableIndexedEXT");
    }
    if (__glintercept_fnptr_glEnableIndexedEXT == NULL) return NULL;
    return (void*) __glintercept_glEnableIndexedEXT;
  }
  if (strcmp(name, "glEnableVariantClientStateEXT") == 0) {
    if (__glintercept_fnptr_glEnableVariantClientStateEXT == NULL) {
      __glintercept_fnptr_glEnableVariantClientStateEXT = (__ctype_glEnableVariantClientStateEXT) eglGetProcAddr("glEnableVariantClientStateEXT");
    }
    if (__glintercept_fnptr_glEnableVariantClientStateEXT == NULL) return NULL;
    return (void*) __glintercept_glEnableVariantClientStateEXT;
  }
  if (strcmp(name, "glEnableVertexArrayAttrib") == 0) {
    if (__glintercept_fnptr_glEnableVertexArrayAttrib == NULL) {
      __glintercept_fnptr_glEnableVertexArrayAttrib = (__ctype_glEnableVertexArrayAttrib) eglGetProcAddr("glEnableVertexArrayAttrib");
    }
    if (__glintercept_fnptr_glEnableVertexArrayAttrib == NULL) return NULL;
    return (void*) __glintercept_glEnableVertexArrayAttrib;
  }
  if (strcmp(name, "glEnableVertexArrayAttribEXT") == 0) {
    if (__glintercept_fnptr_glEnableVertexArrayAttribEXT == NULL) {
      __glintercept_fnptr_glEnableVertexArrayAttribEXT = (__ctype_glEnableVertexArrayAttribEXT) eglGetProcAddr("glEnableVertexArrayAttribEXT");
    }
    if (__glintercept_fnptr_glEnableVertexArrayAttribEXT == NULL) return NULL;
    return (void*) __glintercept_glEnableVertexArrayAttribEXT;
  }
  if (strcmp(name, "glEnableVertexArrayEXT") == 0) {
    if (__glintercept_fnptr_glEnableVertexArrayEXT == NULL) {
      __glintercept_fnptr_glEnableVertexArrayEXT = (__ctype_glEnableVertexArrayEXT) eglGetProcAddr("glEnableVertexArrayEXT");
    }
    if (__glintercept_fnptr_glEnableVertexArrayEXT == NULL) return NULL;
    return (void*) __glintercept_glEnableVertexArrayEXT;
  }
  if (strcmp(name, "glEnableVertexAttribAPPLE") == 0) {
    if (__glintercept_fnptr_glEnableVertexAttribAPPLE == NULL) {
      __glintercept_fnptr_glEnableVertexAttribAPPLE = (__ctype_glEnableVertexAttribAPPLE) eglGetProcAddr("glEnableVertexAttribAPPLE");
    }
    if (__glintercept_fnptr_glEnableVertexAttribAPPLE == NULL) return NULL;
    return (void*) __glintercept_glEnableVertexAttribAPPLE;
  }
  if (strcmp(name, "glEnableVertexAttribArray") == 0) {
    if (__glintercept_fnptr_glEnableVertexAttribArray == NULL) {
      __glintercept_fnptr_glEnableVertexAttribArray = (__ctype_glEnableVertexAttribArray) eglGetProcAddr("glEnableVertexAttribArray");
    }
    if (__glintercept_fnptr_glEnableVertexAttribArray == NULL) return NULL;
    return (void*) __glintercept_glEnableVertexAttribArray;
  }
  if (strcmp(name, "glEnableVertexAttribArrayARB") == 0) {
    if (__glintercept_fnptr_glEnableVertexAttribArrayARB == NULL) {
      __glintercept_fnptr_glEnableVertexAttribArrayARB = (__ctype_glEnableVertexAttribArrayARB) eglGetProcAddr("glEnableVertexAttribArrayARB");
    }
    if (__glintercept_fnptr_glEnableVertexAttribArrayARB == NULL) return NULL;
    return (void*) __glintercept_glEnableVertexAttribArrayARB;
  }
  if (strcmp(name, "glEnablei") == 0) {
    if (__glintercept_fnptr_glEnablei == NULL) {
      __glintercept_fnptr_glEnablei = (__ctype_glEnablei) eglGetProcAddr("glEnablei");
    }
    if (__glintercept_fnptr_glEnablei == NULL) return NULL;
    return (void*) __glintercept_glEnablei;
  }
  if (strcmp(name, "glEnableiEXT") == 0) {
    if (__glintercept_fnptr_glEnableiEXT == NULL) {
      __glintercept_fnptr_glEnableiEXT = (__ctype_glEnableiEXT) eglGetProcAddr("glEnableiEXT");
    }
    if (__glintercept_fnptr_glEnableiEXT == NULL) return NULL;
    return (void*) __glintercept_glEnableiEXT;
  }
  if (strcmp(name, "glEnableiNV") == 0) {
    if (__glintercept_fnptr_glEnableiNV == NULL) {
      __glintercept_fnptr_glEnableiNV = (__ctype_glEnableiNV) eglGetProcAddr("glEnableiNV");
    }
    if (__glintercept_fnptr_glEnableiNV == NULL) return NULL;
    return (void*) __glintercept_glEnableiNV;
  }
  if (strcmp(name, "glEnableiOES") == 0) {
    if (__glintercept_fnptr_glEnableiOES == NULL) {
      __glintercept_fnptr_glEnableiOES = (__ctype_glEnableiOES) eglGetProcAddr("glEnableiOES");
    }
    if (__glintercept_fnptr_glEnableiOES == NULL) return NULL;
    return (void*) __glintercept_glEnableiOES;
  }
  if (strcmp(name, "glEnd") == 0) {
    if (__glintercept_fnptr_glEnd == NULL) {
      __glintercept_fnptr_glEnd = (__ctype_glEnd) eglGetProcAddr("glEnd");
    }
    if (__glintercept_fnptr_glEnd == NULL) return NULL;
    return (void*) __glintercept_glEnd;
  }
  if (strcmp(name, "glEndConditionalRender") == 0) {
    if (__glintercept_fnptr_glEndConditionalRender == NULL) {
      __glintercept_fnptr_glEndConditionalRender = (__ctype_glEndConditionalRender) eglGetProcAddr("glEndConditionalRender");
    }
    if (__glintercept_fnptr_glEndConditionalRender == NULL) return NULL;
    return (void*) __glintercept_glEndConditionalRender;
  }
  if (strcmp(name, "glEndConditionalRenderNV") == 0) {
    if (__glintercept_fnptr_glEndConditionalRenderNV == NULL) {
      __glintercept_fnptr_glEndConditionalRenderNV = (__ctype_glEndConditionalRenderNV) eglGetProcAddr("glEndConditionalRenderNV");
    }
    if (__glintercept_fnptr_glEndConditionalRenderNV == NULL) return NULL;
    return (void*) __glintercept_glEndConditionalRenderNV;
  }
  if (strcmp(name, "glEndConditionalRenderNVX") == 0) {
    if (__glintercept_fnptr_glEndConditionalRenderNVX == NULL) {
      __glintercept_fnptr_glEndConditionalRenderNVX = (__ctype_glEndConditionalRenderNVX) eglGetProcAddr("glEndConditionalRenderNVX");
    }
    if (__glintercept_fnptr_glEndConditionalRenderNVX == NULL) return NULL;
    return (void*) __glintercept_glEndConditionalRenderNVX;
  }
  if (strcmp(name, "glEndFragmentShaderATI") == 0) {
    if (__glintercept_fnptr_glEndFragmentShaderATI == NULL) {
      __glintercept_fnptr_glEndFragmentShaderATI = (__ctype_glEndFragmentShaderATI) eglGetProcAddr("glEndFragmentShaderATI");
    }
    if (__glintercept_fnptr_glEndFragmentShaderATI == NULL) return NULL;
    return (void*) __glintercept_glEndFragmentShaderATI;
  }
  if (strcmp(name, "glEndList") == 0) {
    if (__glintercept_fnptr_glEndList == NULL) {
      __glintercept_fnptr_glEndList = (__ctype_glEndList) eglGetProcAddr("glEndList");
    }
    if (__glintercept_fnptr_glEndList == NULL) return NULL;
    return (void*) __glintercept_glEndList;
  }
  if (strcmp(name, "glEndOcclusionQueryNV") == 0) {
    if (__glintercept_fnptr_glEndOcclusionQueryNV == NULL) {
      __glintercept_fnptr_glEndOcclusionQueryNV = (__ctype_glEndOcclusionQueryNV) eglGetProcAddr("glEndOcclusionQueryNV");
    }
    if (__glintercept_fnptr_glEndOcclusionQueryNV == NULL) return NULL;
    return (void*) __glintercept_glEndOcclusionQueryNV;
  }
  if (strcmp(name, "glEndPerfMonitorAMD") == 0) {
    if (__glintercept_fnptr_glEndPerfMonitorAMD == NULL) {
      __glintercept_fnptr_glEndPerfMonitorAMD = (__ctype_glEndPerfMonitorAMD) eglGetProcAddr("glEndPerfMonitorAMD");
    }
    if (__glintercept_fnptr_glEndPerfMonitorAMD == NULL) return NULL;
    return (void*) __glintercept_glEndPerfMonitorAMD;
  }
  if (strcmp(name, "glEndPerfQueryINTEL") == 0) {
    if (__glintercept_fnptr_glEndPerfQueryINTEL == NULL) {
      __glintercept_fnptr_glEndPerfQueryINTEL = (__ctype_glEndPerfQueryINTEL) eglGetProcAddr("glEndPerfQueryINTEL");
    }
    if (__glintercept_fnptr_glEndPerfQueryINTEL == NULL) return NULL;
    return (void*) __glintercept_glEndPerfQueryINTEL;
  }
  if (strcmp(name, "glEndQuery") == 0) {
    if (__glintercept_fnptr_glEndQuery == NULL) {
      __glintercept_fnptr_glEndQuery = (__ctype_glEndQuery) eglGetProcAddr("glEndQuery");
    }
    if (__glintercept_fnptr_glEndQuery == NULL) return NULL;
    return (void*) __glintercept_glEndQuery;
  }
  if (strcmp(name, "glEndQueryARB") == 0) {
    if (__glintercept_fnptr_glEndQueryARB == NULL) {
      __glintercept_fnptr_glEndQueryARB = (__ctype_glEndQueryARB) eglGetProcAddr("glEndQueryARB");
    }
    if (__glintercept_fnptr_glEndQueryARB == NULL) return NULL;
    return (void*) __glintercept_glEndQueryARB;
  }
  if (strcmp(name, "glEndQueryEXT") == 0) {
    if (__glintercept_fnptr_glEndQueryEXT == NULL) {
      __glintercept_fnptr_glEndQueryEXT = (__ctype_glEndQueryEXT) eglGetProcAddr("glEndQueryEXT");
    }
    if (__glintercept_fnptr_glEndQueryEXT == NULL) return NULL;
    return (void*) __glintercept_glEndQueryEXT;
  }
  if (strcmp(name, "glEndQueryIndexed") == 0) {
    if (__glintercept_fnptr_glEndQueryIndexed == NULL) {
      __glintercept_fnptr_glEndQueryIndexed = (__ctype_glEndQueryIndexed) eglGetProcAddr("glEndQueryIndexed");
    }
    if (__glintercept_fnptr_glEndQueryIndexed == NULL) return NULL;
    return (void*) __glintercept_glEndQueryIndexed;
  }
  if (strcmp(name, "glEndTilingQCOM") == 0) {
    if (__glintercept_fnptr_glEndTilingQCOM == NULL) {
      __glintercept_fnptr_glEndTilingQCOM = (__ctype_glEndTilingQCOM) eglGetProcAddr("glEndTilingQCOM");
    }
    if (__glintercept_fnptr_glEndTilingQCOM == NULL) return NULL;
    return (void*) __glintercept_glEndTilingQCOM;
  }
  if (strcmp(name, "glEndTransformFeedback") == 0) {
    if (__glintercept_fnptr_glEndTransformFeedback == NULL) {
      __glintercept_fnptr_glEndTransformFeedback = (__ctype_glEndTransformFeedback) eglGetProcAddr("glEndTransformFeedback");
    }
    if (__glintercept_fnptr_glEndTransformFeedback == NULL) return NULL;
    return (void*) __glintercept_glEndTransformFeedback;
  }
  if (strcmp(name, "glEndTransformFeedbackEXT") == 0) {
    if (__glintercept_fnptr_glEndTransformFeedbackEXT == NULL) {
      __glintercept_fnptr_glEndTransformFeedbackEXT = (__ctype_glEndTransformFeedbackEXT) eglGetProcAddr("glEndTransformFeedbackEXT");
    }
    if (__glintercept_fnptr_glEndTransformFeedbackEXT == NULL) return NULL;
    return (void*) __glintercept_glEndTransformFeedbackEXT;
  }
  if (strcmp(name, "glEndTransformFeedbackNV") == 0) {
    if (__glintercept_fnptr_glEndTransformFeedbackNV == NULL) {
      __glintercept_fnptr_glEndTransformFeedbackNV = (__ctype_glEndTransformFeedbackNV) eglGetProcAddr("glEndTransformFeedbackNV");
    }
    if (__glintercept_fnptr_glEndTransformFeedbackNV == NULL) return NULL;
    return (void*) __glintercept_glEndTransformFeedbackNV;
  }
  if (strcmp(name, "glEndVertexShaderEXT") == 0) {
    if (__glintercept_fnptr_glEndVertexShaderEXT == NULL) {
      __glintercept_fnptr_glEndVertexShaderEXT = (__ctype_glEndVertexShaderEXT) eglGetProcAddr("glEndVertexShaderEXT");
    }
    if (__glintercept_fnptr_glEndVertexShaderEXT == NULL) return NULL;
    return (void*) __glintercept_glEndVertexShaderEXT;
  }
  if (strcmp(name, "glEndVideoCaptureNV") == 0) {
    if (__glintercept_fnptr_glEndVideoCaptureNV == NULL) {
      __glintercept_fnptr_glEndVideoCaptureNV = (__ctype_glEndVideoCaptureNV) eglGetProcAddr("glEndVideoCaptureNV");
    }
    if (__glintercept_fnptr_glEndVideoCaptureNV == NULL) return NULL;
    return (void*) __glintercept_glEndVideoCaptureNV;
  }
  if (strcmp(name, "glEvalCoord1d") == 0) {
    if (__glintercept_fnptr_glEvalCoord1d == NULL) {
      __glintercept_fnptr_glEvalCoord1d = (__ctype_glEvalCoord1d) eglGetProcAddr("glEvalCoord1d");
    }
    if (__glintercept_fnptr_glEvalCoord1d == NULL) return NULL;
    return (void*) __glintercept_glEvalCoord1d;
  }
  if (strcmp(name, "glEvalCoord1dv") == 0) {
    if (__glintercept_fnptr_glEvalCoord1dv == NULL) {
      __glintercept_fnptr_glEvalCoord1dv = (__ctype_glEvalCoord1dv) eglGetProcAddr("glEvalCoord1dv");
    }
    if (__glintercept_fnptr_glEvalCoord1dv == NULL) return NULL;
    return (void*) __glintercept_glEvalCoord1dv;
  }
  if (strcmp(name, "glEvalCoord1f") == 0) {
    if (__glintercept_fnptr_glEvalCoord1f == NULL) {
      __glintercept_fnptr_glEvalCoord1f = (__ctype_glEvalCoord1f) eglGetProcAddr("glEvalCoord1f");
    }
    if (__glintercept_fnptr_glEvalCoord1f == NULL) return NULL;
    return (void*) __glintercept_glEvalCoord1f;
  }
  if (strcmp(name, "glEvalCoord1fv") == 0) {
    if (__glintercept_fnptr_glEvalCoord1fv == NULL) {
      __glintercept_fnptr_glEvalCoord1fv = (__ctype_glEvalCoord1fv) eglGetProcAddr("glEvalCoord1fv");
    }
    if (__glintercept_fnptr_glEvalCoord1fv == NULL) return NULL;
    return (void*) __glintercept_glEvalCoord1fv;
  }
  if (strcmp(name, "glEvalCoord1xOES") == 0) {
    if (__glintercept_fnptr_glEvalCoord1xOES == NULL) {
      __glintercept_fnptr_glEvalCoord1xOES = (__ctype_glEvalCoord1xOES) eglGetProcAddr("glEvalCoord1xOES");
    }
    if (__glintercept_fnptr_glEvalCoord1xOES == NULL) return NULL;
    return (void*) __glintercept_glEvalCoord1xOES;
  }
  if (strcmp(name, "glEvalCoord1xvOES") == 0) {
    if (__glintercept_fnptr_glEvalCoord1xvOES == NULL) {
      __glintercept_fnptr_glEvalCoord1xvOES = (__ctype_glEvalCoord1xvOES) eglGetProcAddr("glEvalCoord1xvOES");
    }
    if (__glintercept_fnptr_glEvalCoord1xvOES == NULL) return NULL;
    return (void*) __glintercept_glEvalCoord1xvOES;
  }
  if (strcmp(name, "glEvalCoord2d") == 0) {
    if (__glintercept_fnptr_glEvalCoord2d == NULL) {
      __glintercept_fnptr_glEvalCoord2d = (__ctype_glEvalCoord2d) eglGetProcAddr("glEvalCoord2d");
    }
    if (__glintercept_fnptr_glEvalCoord2d == NULL) return NULL;
    return (void*) __glintercept_glEvalCoord2d;
  }
  if (strcmp(name, "glEvalCoord2dv") == 0) {
    if (__glintercept_fnptr_glEvalCoord2dv == NULL) {
      __glintercept_fnptr_glEvalCoord2dv = (__ctype_glEvalCoord2dv) eglGetProcAddr("glEvalCoord2dv");
    }
    if (__glintercept_fnptr_glEvalCoord2dv == NULL) return NULL;
    return (void*) __glintercept_glEvalCoord2dv;
  }
  if (strcmp(name, "glEvalCoord2f") == 0) {
    if (__glintercept_fnptr_glEvalCoord2f == NULL) {
      __glintercept_fnptr_glEvalCoord2f = (__ctype_glEvalCoord2f) eglGetProcAddr("glEvalCoord2f");
    }
    if (__glintercept_fnptr_glEvalCoord2f == NULL) return NULL;
    return (void*) __glintercept_glEvalCoord2f;
  }
  if (strcmp(name, "glEvalCoord2fv") == 0) {
    if (__glintercept_fnptr_glEvalCoord2fv == NULL) {
      __glintercept_fnptr_glEvalCoord2fv = (__ctype_glEvalCoord2fv) eglGetProcAddr("glEvalCoord2fv");
    }
    if (__glintercept_fnptr_glEvalCoord2fv == NULL) return NULL;
    return (void*) __glintercept_glEvalCoord2fv;
  }
  if (strcmp(name, "glEvalCoord2xOES") == 0) {
    if (__glintercept_fnptr_glEvalCoord2xOES == NULL) {
      __glintercept_fnptr_glEvalCoord2xOES = (__ctype_glEvalCoord2xOES) eglGetProcAddr("glEvalCoord2xOES");
    }
    if (__glintercept_fnptr_glEvalCoord2xOES == NULL) return NULL;
    return (void*) __glintercept_glEvalCoord2xOES;
  }
  if (strcmp(name, "glEvalCoord2xvOES") == 0) {
    if (__glintercept_fnptr_glEvalCoord2xvOES == NULL) {
      __glintercept_fnptr_glEvalCoord2xvOES = (__ctype_glEvalCoord2xvOES) eglGetProcAddr("glEvalCoord2xvOES");
    }
    if (__glintercept_fnptr_glEvalCoord2xvOES == NULL) return NULL;
    return (void*) __glintercept_glEvalCoord2xvOES;
  }
  if (strcmp(name, "glEvalMapsNV") == 0) {
    if (__glintercept_fnptr_glEvalMapsNV == NULL) {
      __glintercept_fnptr_glEvalMapsNV = (__ctype_glEvalMapsNV) eglGetProcAddr("glEvalMapsNV");
    }
    if (__glintercept_fnptr_glEvalMapsNV == NULL) return NULL;
    return (void*) __glintercept_glEvalMapsNV;
  }
  if (strcmp(name, "glEvalMesh1") == 0) {
    if (__glintercept_fnptr_glEvalMesh1 == NULL) {
      __glintercept_fnptr_glEvalMesh1 = (__ctype_glEvalMesh1) eglGetProcAddr("glEvalMesh1");
    }
    if (__glintercept_fnptr_glEvalMesh1 == NULL) return NULL;
    return (void*) __glintercept_glEvalMesh1;
  }
  if (strcmp(name, "glEvalMesh2") == 0) {
    if (__glintercept_fnptr_glEvalMesh2 == NULL) {
      __glintercept_fnptr_glEvalMesh2 = (__ctype_glEvalMesh2) eglGetProcAddr("glEvalMesh2");
    }
    if (__glintercept_fnptr_glEvalMesh2 == NULL) return NULL;
    return (void*) __glintercept_glEvalMesh2;
  }
  if (strcmp(name, "glEvalPoint1") == 0) {
    if (__glintercept_fnptr_glEvalPoint1 == NULL) {
      __glintercept_fnptr_glEvalPoint1 = (__ctype_glEvalPoint1) eglGetProcAddr("glEvalPoint1");
    }
    if (__glintercept_fnptr_glEvalPoint1 == NULL) return NULL;
    return (void*) __glintercept_glEvalPoint1;
  }
  if (strcmp(name, "glEvalPoint2") == 0) {
    if (__glintercept_fnptr_glEvalPoint2 == NULL) {
      __glintercept_fnptr_glEvalPoint2 = (__ctype_glEvalPoint2) eglGetProcAddr("glEvalPoint2");
    }
    if (__glintercept_fnptr_glEvalPoint2 == NULL) return NULL;
    return (void*) __glintercept_glEvalPoint2;
  }
  if (strcmp(name, "glEvaluateDepthValuesARB") == 0) {
    if (__glintercept_fnptr_glEvaluateDepthValuesARB == NULL) {
      __glintercept_fnptr_glEvaluateDepthValuesARB = (__ctype_glEvaluateDepthValuesARB) eglGetProcAddr("glEvaluateDepthValuesARB");
    }
    if (__glintercept_fnptr_glEvaluateDepthValuesARB == NULL) return NULL;
    return (void*) __glintercept_glEvaluateDepthValuesARB;
  }
  if (strcmp(name, "glExecuteProgramNV") == 0) {
    if (__glintercept_fnptr_glExecuteProgramNV == NULL) {
      __glintercept_fnptr_glExecuteProgramNV = (__ctype_glExecuteProgramNV) eglGetProcAddr("glExecuteProgramNV");
    }
    if (__glintercept_fnptr_glExecuteProgramNV == NULL) return NULL;
    return (void*) __glintercept_glExecuteProgramNV;
  }
  if (strcmp(name, "glExtGetBufferPointervQCOM") == 0) {
    if (__glintercept_fnptr_glExtGetBufferPointervQCOM == NULL) {
      __glintercept_fnptr_glExtGetBufferPointervQCOM = (__ctype_glExtGetBufferPointervQCOM) eglGetProcAddr("glExtGetBufferPointervQCOM");
    }
    if (__glintercept_fnptr_glExtGetBufferPointervQCOM == NULL) return NULL;
    return (void*) __glintercept_glExtGetBufferPointervQCOM;
  }
  if (strcmp(name, "glExtGetBuffersQCOM") == 0) {
    if (__glintercept_fnptr_glExtGetBuffersQCOM == NULL) {
      __glintercept_fnptr_glExtGetBuffersQCOM = (__ctype_glExtGetBuffersQCOM) eglGetProcAddr("glExtGetBuffersQCOM");
    }
    if (__glintercept_fnptr_glExtGetBuffersQCOM == NULL) return NULL;
    return (void*) __glintercept_glExtGetBuffersQCOM;
  }
  if (strcmp(name, "glExtGetFramebuffersQCOM") == 0) {
    if (__glintercept_fnptr_glExtGetFramebuffersQCOM == NULL) {
      __glintercept_fnptr_glExtGetFramebuffersQCOM = (__ctype_glExtGetFramebuffersQCOM) eglGetProcAddr("glExtGetFramebuffersQCOM");
    }
    if (__glintercept_fnptr_glExtGetFramebuffersQCOM == NULL) return NULL;
    return (void*) __glintercept_glExtGetFramebuffersQCOM;
  }
  if (strcmp(name, "glExtGetProgramBinarySourceQCOM") == 0) {
    if (__glintercept_fnptr_glExtGetProgramBinarySourceQCOM == NULL) {
      __glintercept_fnptr_glExtGetProgramBinarySourceQCOM = (__ctype_glExtGetProgramBinarySourceQCOM) eglGetProcAddr("glExtGetProgramBinarySourceQCOM");
    }
    if (__glintercept_fnptr_glExtGetProgramBinarySourceQCOM == NULL) return NULL;
    return (void*) __glintercept_glExtGetProgramBinarySourceQCOM;
  }
  if (strcmp(name, "glExtGetProgramsQCOM") == 0) {
    if (__glintercept_fnptr_glExtGetProgramsQCOM == NULL) {
      __glintercept_fnptr_glExtGetProgramsQCOM = (__ctype_glExtGetProgramsQCOM) eglGetProcAddr("glExtGetProgramsQCOM");
    }
    if (__glintercept_fnptr_glExtGetProgramsQCOM == NULL) return NULL;
    return (void*) __glintercept_glExtGetProgramsQCOM;
  }
  if (strcmp(name, "glExtGetRenderbuffersQCOM") == 0) {
    if (__glintercept_fnptr_glExtGetRenderbuffersQCOM == NULL) {
      __glintercept_fnptr_glExtGetRenderbuffersQCOM = (__ctype_glExtGetRenderbuffersQCOM) eglGetProcAddr("glExtGetRenderbuffersQCOM");
    }
    if (__glintercept_fnptr_glExtGetRenderbuffersQCOM == NULL) return NULL;
    return (void*) __glintercept_glExtGetRenderbuffersQCOM;
  }
  if (strcmp(name, "glExtGetShadersQCOM") == 0) {
    if (__glintercept_fnptr_glExtGetShadersQCOM == NULL) {
      __glintercept_fnptr_glExtGetShadersQCOM = (__ctype_glExtGetShadersQCOM) eglGetProcAddr("glExtGetShadersQCOM");
    }
    if (__glintercept_fnptr_glExtGetShadersQCOM == NULL) return NULL;
    return (void*) __glintercept_glExtGetShadersQCOM;
  }
  if (strcmp(name, "glExtGetTexLevelParameterivQCOM") == 0) {
    if (__glintercept_fnptr_glExtGetTexLevelParameterivQCOM == NULL) {
      __glintercept_fnptr_glExtGetTexLevelParameterivQCOM = (__ctype_glExtGetTexLevelParameterivQCOM) eglGetProcAddr("glExtGetTexLevelParameterivQCOM");
    }
    if (__glintercept_fnptr_glExtGetTexLevelParameterivQCOM == NULL) return NULL;
    return (void*) __glintercept_glExtGetTexLevelParameterivQCOM;
  }
  if (strcmp(name, "glExtGetTexSubImageQCOM") == 0) {
    if (__glintercept_fnptr_glExtGetTexSubImageQCOM == NULL) {
      __glintercept_fnptr_glExtGetTexSubImageQCOM = (__ctype_glExtGetTexSubImageQCOM) eglGetProcAddr("glExtGetTexSubImageQCOM");
    }
    if (__glintercept_fnptr_glExtGetTexSubImageQCOM == NULL) return NULL;
    return (void*) __glintercept_glExtGetTexSubImageQCOM;
  }
  if (strcmp(name, "glExtGetTexturesQCOM") == 0) {
    if (__glintercept_fnptr_glExtGetTexturesQCOM == NULL) {
      __glintercept_fnptr_glExtGetTexturesQCOM = (__ctype_glExtGetTexturesQCOM) eglGetProcAddr("glExtGetTexturesQCOM");
    }
    if (__glintercept_fnptr_glExtGetTexturesQCOM == NULL) return NULL;
    return (void*) __glintercept_glExtGetTexturesQCOM;
  }
  if (strcmp(name, "glExtIsProgramBinaryQCOM") == 0) {
    if (__glintercept_fnptr_glExtIsProgramBinaryQCOM == NULL) {
      __glintercept_fnptr_glExtIsProgramBinaryQCOM = (__ctype_glExtIsProgramBinaryQCOM) eglGetProcAddr("glExtIsProgramBinaryQCOM");
    }
    if (__glintercept_fnptr_glExtIsProgramBinaryQCOM == NULL) return NULL;
    return (void*) __glintercept_glExtIsProgramBinaryQCOM;
  }
  if (strcmp(name, "glExtTexObjectStateOverrideiQCOM") == 0) {
    if (__glintercept_fnptr_glExtTexObjectStateOverrideiQCOM == NULL) {
      __glintercept_fnptr_glExtTexObjectStateOverrideiQCOM = (__ctype_glExtTexObjectStateOverrideiQCOM) eglGetProcAddr("glExtTexObjectStateOverrideiQCOM");
    }
    if (__glintercept_fnptr_glExtTexObjectStateOverrideiQCOM == NULL) return NULL;
    return (void*) __glintercept_glExtTexObjectStateOverrideiQCOM;
  }
  if (strcmp(name, "glExtractComponentEXT") == 0) {
    if (__glintercept_fnptr_glExtractComponentEXT == NULL) {
      __glintercept_fnptr_glExtractComponentEXT = (__ctype_glExtractComponentEXT) eglGetProcAddr("glExtractComponentEXT");
    }
    if (__glintercept_fnptr_glExtractComponentEXT == NULL) return NULL;
    return (void*) __glintercept_glExtractComponentEXT;
  }
  if (strcmp(name, "glFeedbackBuffer") == 0) {
    if (__glintercept_fnptr_glFeedbackBuffer == NULL) {
      __glintercept_fnptr_glFeedbackBuffer = (__ctype_glFeedbackBuffer) eglGetProcAddr("glFeedbackBuffer");
    }
    if (__glintercept_fnptr_glFeedbackBuffer == NULL) return NULL;
    return (void*) __glintercept_glFeedbackBuffer;
  }
  if (strcmp(name, "glFeedbackBufferxOES") == 0) {
    if (__glintercept_fnptr_glFeedbackBufferxOES == NULL) {
      __glintercept_fnptr_glFeedbackBufferxOES = (__ctype_glFeedbackBufferxOES) eglGetProcAddr("glFeedbackBufferxOES");
    }
    if (__glintercept_fnptr_glFeedbackBufferxOES == NULL) return NULL;
    return (void*) __glintercept_glFeedbackBufferxOES;
  }
  if (strcmp(name, "glFenceSync") == 0) {
    if (__glintercept_fnptr_glFenceSync == NULL) {
      __glintercept_fnptr_glFenceSync = (__ctype_glFenceSync) eglGetProcAddr("glFenceSync");
    }
    if (__glintercept_fnptr_glFenceSync == NULL) return NULL;
    return (void*) __glintercept_glFenceSync;
  }
  if (strcmp(name, "glFenceSyncAPPLE") == 0) {
    if (__glintercept_fnptr_glFenceSyncAPPLE == NULL) {
      __glintercept_fnptr_glFenceSyncAPPLE = (__ctype_glFenceSyncAPPLE) eglGetProcAddr("glFenceSyncAPPLE");
    }
    if (__glintercept_fnptr_glFenceSyncAPPLE == NULL) return NULL;
    return (void*) __glintercept_glFenceSyncAPPLE;
  }
  if (strcmp(name, "glFinalCombinerInputNV") == 0) {
    if (__glintercept_fnptr_glFinalCombinerInputNV == NULL) {
      __glintercept_fnptr_glFinalCombinerInputNV = (__ctype_glFinalCombinerInputNV) eglGetProcAddr("glFinalCombinerInputNV");
    }
    if (__glintercept_fnptr_glFinalCombinerInputNV == NULL) return NULL;
    return (void*) __glintercept_glFinalCombinerInputNV;
  }
  if (strcmp(name, "glFinish") == 0) {
    if (__glintercept_fnptr_glFinish == NULL) {
      __glintercept_fnptr_glFinish = (__ctype_glFinish) eglGetProcAddr("glFinish");
    }
    if (__glintercept_fnptr_glFinish == NULL) return NULL;
    return (void*) __glintercept_glFinish;
  }
  if (strcmp(name, "glFinishAsyncSGIX") == 0) {
    if (__glintercept_fnptr_glFinishAsyncSGIX == NULL) {
      __glintercept_fnptr_glFinishAsyncSGIX = (__ctype_glFinishAsyncSGIX) eglGetProcAddr("glFinishAsyncSGIX");
    }
    if (__glintercept_fnptr_glFinishAsyncSGIX == NULL) return NULL;
    return (void*) __glintercept_glFinishAsyncSGIX;
  }
  if (strcmp(name, "glFinishFenceAPPLE") == 0) {
    if (__glintercept_fnptr_glFinishFenceAPPLE == NULL) {
      __glintercept_fnptr_glFinishFenceAPPLE = (__ctype_glFinishFenceAPPLE) eglGetProcAddr("glFinishFenceAPPLE");
    }
    if (__glintercept_fnptr_glFinishFenceAPPLE == NULL) return NULL;
    return (void*) __glintercept_glFinishFenceAPPLE;
  }
  if (strcmp(name, "glFinishFenceNV") == 0) {
    if (__glintercept_fnptr_glFinishFenceNV == NULL) {
      __glintercept_fnptr_glFinishFenceNV = (__ctype_glFinishFenceNV) eglGetProcAddr("glFinishFenceNV");
    }
    if (__glintercept_fnptr_glFinishFenceNV == NULL) return NULL;
    return (void*) __glintercept_glFinishFenceNV;
  }
  if (strcmp(name, "glFinishObjectAPPLE") == 0) {
    if (__glintercept_fnptr_glFinishObjectAPPLE == NULL) {
      __glintercept_fnptr_glFinishObjectAPPLE = (__ctype_glFinishObjectAPPLE) eglGetProcAddr("glFinishObjectAPPLE");
    }
    if (__glintercept_fnptr_glFinishObjectAPPLE == NULL) return NULL;
    return (void*) __glintercept_glFinishObjectAPPLE;
  }
  if (strcmp(name, "glFinishTextureSUNX") == 0) {
    if (__glintercept_fnptr_glFinishTextureSUNX == NULL) {
      __glintercept_fnptr_glFinishTextureSUNX = (__ctype_glFinishTextureSUNX) eglGetProcAddr("glFinishTextureSUNX");
    }
    if (__glintercept_fnptr_glFinishTextureSUNX == NULL) return NULL;
    return (void*) __glintercept_glFinishTextureSUNX;
  }
  if (strcmp(name, "glFlush") == 0) {
    if (__glintercept_fnptr_glFlush == NULL) {
      __glintercept_fnptr_glFlush = (__ctype_glFlush) eglGetProcAddr("glFlush");
    }
    if (__glintercept_fnptr_glFlush == NULL) return NULL;
    return (void*) __glintercept_glFlush;
  }
  if (strcmp(name, "glFlushMappedBufferRange") == 0) {
    if (__glintercept_fnptr_glFlushMappedBufferRange == NULL) {
      __glintercept_fnptr_glFlushMappedBufferRange = (__ctype_glFlushMappedBufferRange) eglGetProcAddr("glFlushMappedBufferRange");
    }
    if (__glintercept_fnptr_glFlushMappedBufferRange == NULL) return NULL;
    return (void*) __glintercept_glFlushMappedBufferRange;
  }
  if (strcmp(name, "glFlushMappedBufferRangeAPPLE") == 0) {
    if (__glintercept_fnptr_glFlushMappedBufferRangeAPPLE == NULL) {
      __glintercept_fnptr_glFlushMappedBufferRangeAPPLE = (__ctype_glFlushMappedBufferRangeAPPLE) eglGetProcAddr("glFlushMappedBufferRangeAPPLE");
    }
    if (__glintercept_fnptr_glFlushMappedBufferRangeAPPLE == NULL) return NULL;
    return (void*) __glintercept_glFlushMappedBufferRangeAPPLE;
  }
  if (strcmp(name, "glFlushMappedBufferRangeEXT") == 0) {
    if (__glintercept_fnptr_glFlushMappedBufferRangeEXT == NULL) {
      __glintercept_fnptr_glFlushMappedBufferRangeEXT = (__ctype_glFlushMappedBufferRangeEXT) eglGetProcAddr("glFlushMappedBufferRangeEXT");
    }
    if (__glintercept_fnptr_glFlushMappedBufferRangeEXT == NULL) return NULL;
    return (void*) __glintercept_glFlushMappedBufferRangeEXT;
  }
  if (strcmp(name, "glFlushMappedNamedBufferRange") == 0) {
    if (__glintercept_fnptr_glFlushMappedNamedBufferRange == NULL) {
      __glintercept_fnptr_glFlushMappedNamedBufferRange = (__ctype_glFlushMappedNamedBufferRange) eglGetProcAddr("glFlushMappedNamedBufferRange");
    }
    if (__glintercept_fnptr_glFlushMappedNamedBufferRange == NULL) return NULL;
    return (void*) __glintercept_glFlushMappedNamedBufferRange;
  }
  if (strcmp(name, "glFlushMappedNamedBufferRangeEXT") == 0) {
    if (__glintercept_fnptr_glFlushMappedNamedBufferRangeEXT == NULL) {
      __glintercept_fnptr_glFlushMappedNamedBufferRangeEXT = (__ctype_glFlushMappedNamedBufferRangeEXT) eglGetProcAddr("glFlushMappedNamedBufferRangeEXT");
    }
    if (__glintercept_fnptr_glFlushMappedNamedBufferRangeEXT == NULL) return NULL;
    return (void*) __glintercept_glFlushMappedNamedBufferRangeEXT;
  }
  if (strcmp(name, "glFlushPixelDataRangeNV") == 0) {
    if (__glintercept_fnptr_glFlushPixelDataRangeNV == NULL) {
      __glintercept_fnptr_glFlushPixelDataRangeNV = (__ctype_glFlushPixelDataRangeNV) eglGetProcAddr("glFlushPixelDataRangeNV");
    }
    if (__glintercept_fnptr_glFlushPixelDataRangeNV == NULL) return NULL;
    return (void*) __glintercept_glFlushPixelDataRangeNV;
  }
  if (strcmp(name, "glFlushRasterSGIX") == 0) {
    if (__glintercept_fnptr_glFlushRasterSGIX == NULL) {
      __glintercept_fnptr_glFlushRasterSGIX = (__ctype_glFlushRasterSGIX) eglGetProcAddr("glFlushRasterSGIX");
    }
    if (__glintercept_fnptr_glFlushRasterSGIX == NULL) return NULL;
    return (void*) __glintercept_glFlushRasterSGIX;
  }
  if (strcmp(name, "glFlushStaticDataIBM") == 0) {
    if (__glintercept_fnptr_glFlushStaticDataIBM == NULL) {
      __glintercept_fnptr_glFlushStaticDataIBM = (__ctype_glFlushStaticDataIBM) eglGetProcAddr("glFlushStaticDataIBM");
    }
    if (__glintercept_fnptr_glFlushStaticDataIBM == NULL) return NULL;
    return (void*) __glintercept_glFlushStaticDataIBM;
  }
  if (strcmp(name, "glFlushVertexArrayRangeAPPLE") == 0) {
    if (__glintercept_fnptr_glFlushVertexArrayRangeAPPLE == NULL) {
      __glintercept_fnptr_glFlushVertexArrayRangeAPPLE = (__ctype_glFlushVertexArrayRangeAPPLE) eglGetProcAddr("glFlushVertexArrayRangeAPPLE");
    }
    if (__glintercept_fnptr_glFlushVertexArrayRangeAPPLE == NULL) return NULL;
    return (void*) __glintercept_glFlushVertexArrayRangeAPPLE;
  }
  if (strcmp(name, "glFlushVertexArrayRangeNV") == 0) {
    if (__glintercept_fnptr_glFlushVertexArrayRangeNV == NULL) {
      __glintercept_fnptr_glFlushVertexArrayRangeNV = (__ctype_glFlushVertexArrayRangeNV) eglGetProcAddr("glFlushVertexArrayRangeNV");
    }
    if (__glintercept_fnptr_glFlushVertexArrayRangeNV == NULL) return NULL;
    return (void*) __glintercept_glFlushVertexArrayRangeNV;
  }
  if (strcmp(name, "glFogCoordFormatNV") == 0) {
    if (__glintercept_fnptr_glFogCoordFormatNV == NULL) {
      __glintercept_fnptr_glFogCoordFormatNV = (__ctype_glFogCoordFormatNV) eglGetProcAddr("glFogCoordFormatNV");
    }
    if (__glintercept_fnptr_glFogCoordFormatNV == NULL) return NULL;
    return (void*) __glintercept_glFogCoordFormatNV;
  }
  if (strcmp(name, "glFogCoordPointer") == 0) {
    if (__glintercept_fnptr_glFogCoordPointer == NULL) {
      __glintercept_fnptr_glFogCoordPointer = (__ctype_glFogCoordPointer) eglGetProcAddr("glFogCoordPointer");
    }
    if (__glintercept_fnptr_glFogCoordPointer == NULL) return NULL;
    return (void*) __glintercept_glFogCoordPointer;
  }
  if (strcmp(name, "glFogCoordPointerEXT") == 0) {
    if (__glintercept_fnptr_glFogCoordPointerEXT == NULL) {
      __glintercept_fnptr_glFogCoordPointerEXT = (__ctype_glFogCoordPointerEXT) eglGetProcAddr("glFogCoordPointerEXT");
    }
    if (__glintercept_fnptr_glFogCoordPointerEXT == NULL) return NULL;
    return (void*) __glintercept_glFogCoordPointerEXT;
  }
  if (strcmp(name, "glFogCoordPointerListIBM") == 0) {
    if (__glintercept_fnptr_glFogCoordPointerListIBM == NULL) {
      __glintercept_fnptr_glFogCoordPointerListIBM = (__ctype_glFogCoordPointerListIBM) eglGetProcAddr("glFogCoordPointerListIBM");
    }
    if (__glintercept_fnptr_glFogCoordPointerListIBM == NULL) return NULL;
    return (void*) __glintercept_glFogCoordPointerListIBM;
  }
  if (strcmp(name, "glFogCoordd") == 0) {
    if (__glintercept_fnptr_glFogCoordd == NULL) {
      __glintercept_fnptr_glFogCoordd = (__ctype_glFogCoordd) eglGetProcAddr("glFogCoordd");
    }
    if (__glintercept_fnptr_glFogCoordd == NULL) return NULL;
    return (void*) __glintercept_glFogCoordd;
  }
  if (strcmp(name, "glFogCoorddEXT") == 0) {
    if (__glintercept_fnptr_glFogCoorddEXT == NULL) {
      __glintercept_fnptr_glFogCoorddEXT = (__ctype_glFogCoorddEXT) eglGetProcAddr("glFogCoorddEXT");
    }
    if (__glintercept_fnptr_glFogCoorddEXT == NULL) return NULL;
    return (void*) __glintercept_glFogCoorddEXT;
  }
  if (strcmp(name, "glFogCoorddv") == 0) {
    if (__glintercept_fnptr_glFogCoorddv == NULL) {
      __glintercept_fnptr_glFogCoorddv = (__ctype_glFogCoorddv) eglGetProcAddr("glFogCoorddv");
    }
    if (__glintercept_fnptr_glFogCoorddv == NULL) return NULL;
    return (void*) __glintercept_glFogCoorddv;
  }
  if (strcmp(name, "glFogCoorddvEXT") == 0) {
    if (__glintercept_fnptr_glFogCoorddvEXT == NULL) {
      __glintercept_fnptr_glFogCoorddvEXT = (__ctype_glFogCoorddvEXT) eglGetProcAddr("glFogCoorddvEXT");
    }
    if (__glintercept_fnptr_glFogCoorddvEXT == NULL) return NULL;
    return (void*) __glintercept_glFogCoorddvEXT;
  }
  if (strcmp(name, "glFogCoordf") == 0) {
    if (__glintercept_fnptr_glFogCoordf == NULL) {
      __glintercept_fnptr_glFogCoordf = (__ctype_glFogCoordf) eglGetProcAddr("glFogCoordf");
    }
    if (__glintercept_fnptr_glFogCoordf == NULL) return NULL;
    return (void*) __glintercept_glFogCoordf;
  }
  if (strcmp(name, "glFogCoordfEXT") == 0) {
    if (__glintercept_fnptr_glFogCoordfEXT == NULL) {
      __glintercept_fnptr_glFogCoordfEXT = (__ctype_glFogCoordfEXT) eglGetProcAddr("glFogCoordfEXT");
    }
    if (__glintercept_fnptr_glFogCoordfEXT == NULL) return NULL;
    return (void*) __glintercept_glFogCoordfEXT;
  }
  if (strcmp(name, "glFogCoordfv") == 0) {
    if (__glintercept_fnptr_glFogCoordfv == NULL) {
      __glintercept_fnptr_glFogCoordfv = (__ctype_glFogCoordfv) eglGetProcAddr("glFogCoordfv");
    }
    if (__glintercept_fnptr_glFogCoordfv == NULL) return NULL;
    return (void*) __glintercept_glFogCoordfv;
  }
  if (strcmp(name, "glFogCoordfvEXT") == 0) {
    if (__glintercept_fnptr_glFogCoordfvEXT == NULL) {
      __glintercept_fnptr_glFogCoordfvEXT = (__ctype_glFogCoordfvEXT) eglGetProcAddr("glFogCoordfvEXT");
    }
    if (__glintercept_fnptr_glFogCoordfvEXT == NULL) return NULL;
    return (void*) __glintercept_glFogCoordfvEXT;
  }
  if (strcmp(name, "glFogCoordhNV") == 0) {
    if (__glintercept_fnptr_glFogCoordhNV == NULL) {
      __glintercept_fnptr_glFogCoordhNV = (__ctype_glFogCoordhNV) eglGetProcAddr("glFogCoordhNV");
    }
    if (__glintercept_fnptr_glFogCoordhNV == NULL) return NULL;
    return (void*) __glintercept_glFogCoordhNV;
  }
  if (strcmp(name, "glFogCoordhvNV") == 0) {
    if (__glintercept_fnptr_glFogCoordhvNV == NULL) {
      __glintercept_fnptr_glFogCoordhvNV = (__ctype_glFogCoordhvNV) eglGetProcAddr("glFogCoordhvNV");
    }
    if (__glintercept_fnptr_glFogCoordhvNV == NULL) return NULL;
    return (void*) __glintercept_glFogCoordhvNV;
  }
  if (strcmp(name, "glFogFuncSGIS") == 0) {
    if (__glintercept_fnptr_glFogFuncSGIS == NULL) {
      __glintercept_fnptr_glFogFuncSGIS = (__ctype_glFogFuncSGIS) eglGetProcAddr("glFogFuncSGIS");
    }
    if (__glintercept_fnptr_glFogFuncSGIS == NULL) return NULL;
    return (void*) __glintercept_glFogFuncSGIS;
  }
  if (strcmp(name, "glFogf") == 0) {
    if (__glintercept_fnptr_glFogf == NULL) {
      __glintercept_fnptr_glFogf = (__ctype_glFogf) eglGetProcAddr("glFogf");
    }
    if (__glintercept_fnptr_glFogf == NULL) return NULL;
    return (void*) __glintercept_glFogf;
  }
  if (strcmp(name, "glFogfv") == 0) {
    if (__glintercept_fnptr_glFogfv == NULL) {
      __glintercept_fnptr_glFogfv = (__ctype_glFogfv) eglGetProcAddr("glFogfv");
    }
    if (__glintercept_fnptr_glFogfv == NULL) return NULL;
    return (void*) __glintercept_glFogfv;
  }
  if (strcmp(name, "glFogi") == 0) {
    if (__glintercept_fnptr_glFogi == NULL) {
      __glintercept_fnptr_glFogi = (__ctype_glFogi) eglGetProcAddr("glFogi");
    }
    if (__glintercept_fnptr_glFogi == NULL) return NULL;
    return (void*) __glintercept_glFogi;
  }
  if (strcmp(name, "glFogiv") == 0) {
    if (__glintercept_fnptr_glFogiv == NULL) {
      __glintercept_fnptr_glFogiv = (__ctype_glFogiv) eglGetProcAddr("glFogiv");
    }
    if (__glintercept_fnptr_glFogiv == NULL) return NULL;
    return (void*) __glintercept_glFogiv;
  }
  if (strcmp(name, "glFogx") == 0) {
    if (__glintercept_fnptr_glFogx == NULL) {
      __glintercept_fnptr_glFogx = (__ctype_glFogx) eglGetProcAddr("glFogx");
    }
    if (__glintercept_fnptr_glFogx == NULL) return NULL;
    return (void*) __glintercept_glFogx;
  }
  if (strcmp(name, "glFogxOES") == 0) {
    if (__glintercept_fnptr_glFogxOES == NULL) {
      __glintercept_fnptr_glFogxOES = (__ctype_glFogxOES) eglGetProcAddr("glFogxOES");
    }
    if (__glintercept_fnptr_glFogxOES == NULL) return NULL;
    return (void*) __glintercept_glFogxOES;
  }
  if (strcmp(name, "glFogxv") == 0) {
    if (__glintercept_fnptr_glFogxv == NULL) {
      __glintercept_fnptr_glFogxv = (__ctype_glFogxv) eglGetProcAddr("glFogxv");
    }
    if (__glintercept_fnptr_glFogxv == NULL) return NULL;
    return (void*) __glintercept_glFogxv;
  }
  if (strcmp(name, "glFogxvOES") == 0) {
    if (__glintercept_fnptr_glFogxvOES == NULL) {
      __glintercept_fnptr_glFogxvOES = (__ctype_glFogxvOES) eglGetProcAddr("glFogxvOES");
    }
    if (__glintercept_fnptr_glFogxvOES == NULL) return NULL;
    return (void*) __glintercept_glFogxvOES;
  }
  if (strcmp(name, "glFragmentColorMaterialSGIX") == 0) {
    if (__glintercept_fnptr_glFragmentColorMaterialSGIX == NULL) {
      __glintercept_fnptr_glFragmentColorMaterialSGIX = (__ctype_glFragmentColorMaterialSGIX) eglGetProcAddr("glFragmentColorMaterialSGIX");
    }
    if (__glintercept_fnptr_glFragmentColorMaterialSGIX == NULL) return NULL;
    return (void*) __glintercept_glFragmentColorMaterialSGIX;
  }
  if (strcmp(name, "glFragmentCoverageColorNV") == 0) {
    if (__glintercept_fnptr_glFragmentCoverageColorNV == NULL) {
      __glintercept_fnptr_glFragmentCoverageColorNV = (__ctype_glFragmentCoverageColorNV) eglGetProcAddr("glFragmentCoverageColorNV");
    }
    if (__glintercept_fnptr_glFragmentCoverageColorNV == NULL) return NULL;
    return (void*) __glintercept_glFragmentCoverageColorNV;
  }
  if (strcmp(name, "glFragmentLightModelfSGIX") == 0) {
    if (__glintercept_fnptr_glFragmentLightModelfSGIX == NULL) {
      __glintercept_fnptr_glFragmentLightModelfSGIX = (__ctype_glFragmentLightModelfSGIX) eglGetProcAddr("glFragmentLightModelfSGIX");
    }
    if (__glintercept_fnptr_glFragmentLightModelfSGIX == NULL) return NULL;
    return (void*) __glintercept_glFragmentLightModelfSGIX;
  }
  if (strcmp(name, "glFragmentLightModelfvSGIX") == 0) {
    if (__glintercept_fnptr_glFragmentLightModelfvSGIX == NULL) {
      __glintercept_fnptr_glFragmentLightModelfvSGIX = (__ctype_glFragmentLightModelfvSGIX) eglGetProcAddr("glFragmentLightModelfvSGIX");
    }
    if (__glintercept_fnptr_glFragmentLightModelfvSGIX == NULL) return NULL;
    return (void*) __glintercept_glFragmentLightModelfvSGIX;
  }
  if (strcmp(name, "glFragmentLightModeliSGIX") == 0) {
    if (__glintercept_fnptr_glFragmentLightModeliSGIX == NULL) {
      __glintercept_fnptr_glFragmentLightModeliSGIX = (__ctype_glFragmentLightModeliSGIX) eglGetProcAddr("glFragmentLightModeliSGIX");
    }
    if (__glintercept_fnptr_glFragmentLightModeliSGIX == NULL) return NULL;
    return (void*) __glintercept_glFragmentLightModeliSGIX;
  }
  if (strcmp(name, "glFragmentLightModelivSGIX") == 0) {
    if (__glintercept_fnptr_glFragmentLightModelivSGIX == NULL) {
      __glintercept_fnptr_glFragmentLightModelivSGIX = (__ctype_glFragmentLightModelivSGIX) eglGetProcAddr("glFragmentLightModelivSGIX");
    }
    if (__glintercept_fnptr_glFragmentLightModelivSGIX == NULL) return NULL;
    return (void*) __glintercept_glFragmentLightModelivSGIX;
  }
  if (strcmp(name, "glFragmentLightfSGIX") == 0) {
    if (__glintercept_fnptr_glFragmentLightfSGIX == NULL) {
      __glintercept_fnptr_glFragmentLightfSGIX = (__ctype_glFragmentLightfSGIX) eglGetProcAddr("glFragmentLightfSGIX");
    }
    if (__glintercept_fnptr_glFragmentLightfSGIX == NULL) return NULL;
    return (void*) __glintercept_glFragmentLightfSGIX;
  }
  if (strcmp(name, "glFragmentLightfvSGIX") == 0) {
    if (__glintercept_fnptr_glFragmentLightfvSGIX == NULL) {
      __glintercept_fnptr_glFragmentLightfvSGIX = (__ctype_glFragmentLightfvSGIX) eglGetProcAddr("glFragmentLightfvSGIX");
    }
    if (__glintercept_fnptr_glFragmentLightfvSGIX == NULL) return NULL;
    return (void*) __glintercept_glFragmentLightfvSGIX;
  }
  if (strcmp(name, "glFragmentLightiSGIX") == 0) {
    if (__glintercept_fnptr_glFragmentLightiSGIX == NULL) {
      __glintercept_fnptr_glFragmentLightiSGIX = (__ctype_glFragmentLightiSGIX) eglGetProcAddr("glFragmentLightiSGIX");
    }
    if (__glintercept_fnptr_glFragmentLightiSGIX == NULL) return NULL;
    return (void*) __glintercept_glFragmentLightiSGIX;
  }
  if (strcmp(name, "glFragmentLightivSGIX") == 0) {
    if (__glintercept_fnptr_glFragmentLightivSGIX == NULL) {
      __glintercept_fnptr_glFragmentLightivSGIX = (__ctype_glFragmentLightivSGIX) eglGetProcAddr("glFragmentLightivSGIX");
    }
    if (__glintercept_fnptr_glFragmentLightivSGIX == NULL) return NULL;
    return (void*) __glintercept_glFragmentLightivSGIX;
  }
  if (strcmp(name, "glFragmentMaterialfSGIX") == 0) {
    if (__glintercept_fnptr_glFragmentMaterialfSGIX == NULL) {
      __glintercept_fnptr_glFragmentMaterialfSGIX = (__ctype_glFragmentMaterialfSGIX) eglGetProcAddr("glFragmentMaterialfSGIX");
    }
    if (__glintercept_fnptr_glFragmentMaterialfSGIX == NULL) return NULL;
    return (void*) __glintercept_glFragmentMaterialfSGIX;
  }
  if (strcmp(name, "glFragmentMaterialfvSGIX") == 0) {
    if (__glintercept_fnptr_glFragmentMaterialfvSGIX == NULL) {
      __glintercept_fnptr_glFragmentMaterialfvSGIX = (__ctype_glFragmentMaterialfvSGIX) eglGetProcAddr("glFragmentMaterialfvSGIX");
    }
    if (__glintercept_fnptr_glFragmentMaterialfvSGIX == NULL) return NULL;
    return (void*) __glintercept_glFragmentMaterialfvSGIX;
  }
  if (strcmp(name, "glFragmentMaterialiSGIX") == 0) {
    if (__glintercept_fnptr_glFragmentMaterialiSGIX == NULL) {
      __glintercept_fnptr_glFragmentMaterialiSGIX = (__ctype_glFragmentMaterialiSGIX) eglGetProcAddr("glFragmentMaterialiSGIX");
    }
    if (__glintercept_fnptr_glFragmentMaterialiSGIX == NULL) return NULL;
    return (void*) __glintercept_glFragmentMaterialiSGIX;
  }
  if (strcmp(name, "glFragmentMaterialivSGIX") == 0) {
    if (__glintercept_fnptr_glFragmentMaterialivSGIX == NULL) {
      __glintercept_fnptr_glFragmentMaterialivSGIX = (__ctype_glFragmentMaterialivSGIX) eglGetProcAddr("glFragmentMaterialivSGIX");
    }
    if (__glintercept_fnptr_glFragmentMaterialivSGIX == NULL) return NULL;
    return (void*) __glintercept_glFragmentMaterialivSGIX;
  }
  if (strcmp(name, "glFrameTerminatorGREMEDY") == 0) {
    if (__glintercept_fnptr_glFrameTerminatorGREMEDY == NULL) {
      __glintercept_fnptr_glFrameTerminatorGREMEDY = (__ctype_glFrameTerminatorGREMEDY) eglGetProcAddr("glFrameTerminatorGREMEDY");
    }
    if (__glintercept_fnptr_glFrameTerminatorGREMEDY == NULL) return NULL;
    return (void*) __glintercept_glFrameTerminatorGREMEDY;
  }
  if (strcmp(name, "glFrameZoomSGIX") == 0) {
    if (__glintercept_fnptr_glFrameZoomSGIX == NULL) {
      __glintercept_fnptr_glFrameZoomSGIX = (__ctype_glFrameZoomSGIX) eglGetProcAddr("glFrameZoomSGIX");
    }
    if (__glintercept_fnptr_glFrameZoomSGIX == NULL) return NULL;
    return (void*) __glintercept_glFrameZoomSGIX;
  }
  if (strcmp(name, "glFramebufferDrawBufferEXT") == 0) {
    if (__glintercept_fnptr_glFramebufferDrawBufferEXT == NULL) {
      __glintercept_fnptr_glFramebufferDrawBufferEXT = (__ctype_glFramebufferDrawBufferEXT) eglGetProcAddr("glFramebufferDrawBufferEXT");
    }
    if (__glintercept_fnptr_glFramebufferDrawBufferEXT == NULL) return NULL;
    return (void*) __glintercept_glFramebufferDrawBufferEXT;
  }
  if (strcmp(name, "glFramebufferDrawBuffersEXT") == 0) {
    if (__glintercept_fnptr_glFramebufferDrawBuffersEXT == NULL) {
      __glintercept_fnptr_glFramebufferDrawBuffersEXT = (__ctype_glFramebufferDrawBuffersEXT) eglGetProcAddr("glFramebufferDrawBuffersEXT");
    }
    if (__glintercept_fnptr_glFramebufferDrawBuffersEXT == NULL) return NULL;
    return (void*) __glintercept_glFramebufferDrawBuffersEXT;
  }
  if (strcmp(name, "glFramebufferFetchBarrierEXT") == 0) {
    if (__glintercept_fnptr_glFramebufferFetchBarrierEXT == NULL) {
      __glintercept_fnptr_glFramebufferFetchBarrierEXT = (__ctype_glFramebufferFetchBarrierEXT) eglGetProcAddr("glFramebufferFetchBarrierEXT");
    }
    if (__glintercept_fnptr_glFramebufferFetchBarrierEXT == NULL) return NULL;
    return (void*) __glintercept_glFramebufferFetchBarrierEXT;
  }
  if (strcmp(name, "glFramebufferFetchBarrierQCOM") == 0) {
    if (__glintercept_fnptr_glFramebufferFetchBarrierQCOM == NULL) {
      __glintercept_fnptr_glFramebufferFetchBarrierQCOM = (__ctype_glFramebufferFetchBarrierQCOM) eglGetProcAddr("glFramebufferFetchBarrierQCOM");
    }
    if (__glintercept_fnptr_glFramebufferFetchBarrierQCOM == NULL) return NULL;
    return (void*) __glintercept_glFramebufferFetchBarrierQCOM;
  }
  if (strcmp(name, "glFramebufferFoveationConfigQCOM") == 0) {
    if (__glintercept_fnptr_glFramebufferFoveationConfigQCOM == NULL) {
      __glintercept_fnptr_glFramebufferFoveationConfigQCOM = (__ctype_glFramebufferFoveationConfigQCOM) eglGetProcAddr("glFramebufferFoveationConfigQCOM");
    }
    if (__glintercept_fnptr_glFramebufferFoveationConfigQCOM == NULL) return NULL;
    return (void*) __glintercept_glFramebufferFoveationConfigQCOM;
  }
  if (strcmp(name, "glFramebufferFoveationParametersQCOM") == 0) {
    if (__glintercept_fnptr_glFramebufferFoveationParametersQCOM == NULL) {
      __glintercept_fnptr_glFramebufferFoveationParametersQCOM = (__ctype_glFramebufferFoveationParametersQCOM) eglGetProcAddr("glFramebufferFoveationParametersQCOM");
    }
    if (__glintercept_fnptr_glFramebufferFoveationParametersQCOM == NULL) return NULL;
    return (void*) __glintercept_glFramebufferFoveationParametersQCOM;
  }
  if (strcmp(name, "glFramebufferParameteri") == 0) {
    if (__glintercept_fnptr_glFramebufferParameteri == NULL) {
      __glintercept_fnptr_glFramebufferParameteri = (__ctype_glFramebufferParameteri) eglGetProcAddr("glFramebufferParameteri");
    }
    if (__glintercept_fnptr_glFramebufferParameteri == NULL) return NULL;
    return (void*) __glintercept_glFramebufferParameteri;
  }
  if (strcmp(name, "glFramebufferPixelLocalStorageSizeEXT") == 0) {
    if (__glintercept_fnptr_glFramebufferPixelLocalStorageSizeEXT == NULL) {
      __glintercept_fnptr_glFramebufferPixelLocalStorageSizeEXT = (__ctype_glFramebufferPixelLocalStorageSizeEXT) eglGetProcAddr("glFramebufferPixelLocalStorageSizeEXT");
    }
    if (__glintercept_fnptr_glFramebufferPixelLocalStorageSizeEXT == NULL) return NULL;
    return (void*) __glintercept_glFramebufferPixelLocalStorageSizeEXT;
  }
  if (strcmp(name, "glFramebufferReadBufferEXT") == 0) {
    if (__glintercept_fnptr_glFramebufferReadBufferEXT == NULL) {
      __glintercept_fnptr_glFramebufferReadBufferEXT = (__ctype_glFramebufferReadBufferEXT) eglGetProcAddr("glFramebufferReadBufferEXT");
    }
    if (__glintercept_fnptr_glFramebufferReadBufferEXT == NULL) return NULL;
    return (void*) __glintercept_glFramebufferReadBufferEXT;
  }
  if (strcmp(name, "glFramebufferRenderbuffer") == 0) {
    if (__glintercept_fnptr_glFramebufferRenderbuffer == NULL) {
      __glintercept_fnptr_glFramebufferRenderbuffer = (__ctype_glFramebufferRenderbuffer) eglGetProcAddr("glFramebufferRenderbuffer");
    }
    if (__glintercept_fnptr_glFramebufferRenderbuffer == NULL) return NULL;
    return (void*) __glintercept_glFramebufferRenderbuffer;
  }
  if (strcmp(name, "glFramebufferRenderbufferEXT") == 0) {
    if (__glintercept_fnptr_glFramebufferRenderbufferEXT == NULL) {
      __glintercept_fnptr_glFramebufferRenderbufferEXT = (__ctype_glFramebufferRenderbufferEXT) eglGetProcAddr("glFramebufferRenderbufferEXT");
    }
    if (__glintercept_fnptr_glFramebufferRenderbufferEXT == NULL) return NULL;
    return (void*) __glintercept_glFramebufferRenderbufferEXT;
  }
  if (strcmp(name, "glFramebufferRenderbufferOES") == 0) {
    if (__glintercept_fnptr_glFramebufferRenderbufferOES == NULL) {
      __glintercept_fnptr_glFramebufferRenderbufferOES = (__ctype_glFramebufferRenderbufferOES) eglGetProcAddr("glFramebufferRenderbufferOES");
    }
    if (__glintercept_fnptr_glFramebufferRenderbufferOES == NULL) return NULL;
    return (void*) __glintercept_glFramebufferRenderbufferOES;
  }
  if (strcmp(name, "glFramebufferSampleLocationsfvARB") == 0) {
    if (__glintercept_fnptr_glFramebufferSampleLocationsfvARB == NULL) {
      __glintercept_fnptr_glFramebufferSampleLocationsfvARB = (__ctype_glFramebufferSampleLocationsfvARB) eglGetProcAddr("glFramebufferSampleLocationsfvARB");
    }
    if (__glintercept_fnptr_glFramebufferSampleLocationsfvARB == NULL) return NULL;
    return (void*) __glintercept_glFramebufferSampleLocationsfvARB;
  }
  if (strcmp(name, "glFramebufferSampleLocationsfvNV") == 0) {
    if (__glintercept_fnptr_glFramebufferSampleLocationsfvNV == NULL) {
      __glintercept_fnptr_glFramebufferSampleLocationsfvNV = (__ctype_glFramebufferSampleLocationsfvNV) eglGetProcAddr("glFramebufferSampleLocationsfvNV");
    }
    if (__glintercept_fnptr_glFramebufferSampleLocationsfvNV == NULL) return NULL;
    return (void*) __glintercept_glFramebufferSampleLocationsfvNV;
  }
  if (strcmp(name, "glFramebufferSamplePositionsfvAMD") == 0) {
    if (__glintercept_fnptr_glFramebufferSamplePositionsfvAMD == NULL) {
      __glintercept_fnptr_glFramebufferSamplePositionsfvAMD = (__ctype_glFramebufferSamplePositionsfvAMD) eglGetProcAddr("glFramebufferSamplePositionsfvAMD");
    }
    if (__glintercept_fnptr_glFramebufferSamplePositionsfvAMD == NULL) return NULL;
    return (void*) __glintercept_glFramebufferSamplePositionsfvAMD;
  }
  if (strcmp(name, "glFramebufferTexture") == 0) {
    if (__glintercept_fnptr_glFramebufferTexture == NULL) {
      __glintercept_fnptr_glFramebufferTexture = (__ctype_glFramebufferTexture) eglGetProcAddr("glFramebufferTexture");
    }
    if (__glintercept_fnptr_glFramebufferTexture == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTexture;
  }
  if (strcmp(name, "glFramebufferTexture1D") == 0) {
    if (__glintercept_fnptr_glFramebufferTexture1D == NULL) {
      __glintercept_fnptr_glFramebufferTexture1D = (__ctype_glFramebufferTexture1D) eglGetProcAddr("glFramebufferTexture1D");
    }
    if (__glintercept_fnptr_glFramebufferTexture1D == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTexture1D;
  }
  if (strcmp(name, "glFramebufferTexture1DEXT") == 0) {
    if (__glintercept_fnptr_glFramebufferTexture1DEXT == NULL) {
      __glintercept_fnptr_glFramebufferTexture1DEXT = (__ctype_glFramebufferTexture1DEXT) eglGetProcAddr("glFramebufferTexture1DEXT");
    }
    if (__glintercept_fnptr_glFramebufferTexture1DEXT == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTexture1DEXT;
  }
  if (strcmp(name, "glFramebufferTexture2D") == 0) {
    if (__glintercept_fnptr_glFramebufferTexture2D == NULL) {
      __glintercept_fnptr_glFramebufferTexture2D = (__ctype_glFramebufferTexture2D) eglGetProcAddr("glFramebufferTexture2D");
    }
    if (__glintercept_fnptr_glFramebufferTexture2D == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTexture2D;
  }
  if (strcmp(name, "glFramebufferTexture2DEXT") == 0) {
    if (__glintercept_fnptr_glFramebufferTexture2DEXT == NULL) {
      __glintercept_fnptr_glFramebufferTexture2DEXT = (__ctype_glFramebufferTexture2DEXT) eglGetProcAddr("glFramebufferTexture2DEXT");
    }
    if (__glintercept_fnptr_glFramebufferTexture2DEXT == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTexture2DEXT;
  }
  if (strcmp(name, "glFramebufferTexture2DDownsampleIMG") == 0) {
    if (__glintercept_fnptr_glFramebufferTexture2DDownsampleIMG == NULL) {
      __glintercept_fnptr_glFramebufferTexture2DDownsampleIMG = (__ctype_glFramebufferTexture2DDownsampleIMG) eglGetProcAddr("glFramebufferTexture2DDownsampleIMG");
    }
    if (__glintercept_fnptr_glFramebufferTexture2DDownsampleIMG == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTexture2DDownsampleIMG;
  }
  if (strcmp(name, "glFramebufferTexture2DMultisampleEXT") == 0) {
    if (__glintercept_fnptr_glFramebufferTexture2DMultisampleEXT == NULL) {
      __glintercept_fnptr_glFramebufferTexture2DMultisampleEXT = (__ctype_glFramebufferTexture2DMultisampleEXT) eglGetProcAddr("glFramebufferTexture2DMultisampleEXT");
    }
    if (__glintercept_fnptr_glFramebufferTexture2DMultisampleEXT == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTexture2DMultisampleEXT;
  }
  if (strcmp(name, "glFramebufferTexture2DMultisampleIMG") == 0) {
    if (__glintercept_fnptr_glFramebufferTexture2DMultisampleIMG == NULL) {
      __glintercept_fnptr_glFramebufferTexture2DMultisampleIMG = (__ctype_glFramebufferTexture2DMultisampleIMG) eglGetProcAddr("glFramebufferTexture2DMultisampleIMG");
    }
    if (__glintercept_fnptr_glFramebufferTexture2DMultisampleIMG == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTexture2DMultisampleIMG;
  }
  if (strcmp(name, "glFramebufferTexture2DOES") == 0) {
    if (__glintercept_fnptr_glFramebufferTexture2DOES == NULL) {
      __glintercept_fnptr_glFramebufferTexture2DOES = (__ctype_glFramebufferTexture2DOES) eglGetProcAddr("glFramebufferTexture2DOES");
    }
    if (__glintercept_fnptr_glFramebufferTexture2DOES == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTexture2DOES;
  }
  if (strcmp(name, "glFramebufferTexture3D") == 0) {
    if (__glintercept_fnptr_glFramebufferTexture3D == NULL) {
      __glintercept_fnptr_glFramebufferTexture3D = (__ctype_glFramebufferTexture3D) eglGetProcAddr("glFramebufferTexture3D");
    }
    if (__glintercept_fnptr_glFramebufferTexture3D == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTexture3D;
  }
  if (strcmp(name, "glFramebufferTexture3DEXT") == 0) {
    if (__glintercept_fnptr_glFramebufferTexture3DEXT == NULL) {
      __glintercept_fnptr_glFramebufferTexture3DEXT = (__ctype_glFramebufferTexture3DEXT) eglGetProcAddr("glFramebufferTexture3DEXT");
    }
    if (__glintercept_fnptr_glFramebufferTexture3DEXT == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTexture3DEXT;
  }
  if (strcmp(name, "glFramebufferTexture3DOES") == 0) {
    if (__glintercept_fnptr_glFramebufferTexture3DOES == NULL) {
      __glintercept_fnptr_glFramebufferTexture3DOES = (__ctype_glFramebufferTexture3DOES) eglGetProcAddr("glFramebufferTexture3DOES");
    }
    if (__glintercept_fnptr_glFramebufferTexture3DOES == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTexture3DOES;
  }
  if (strcmp(name, "glFramebufferTextureARB") == 0) {
    if (__glintercept_fnptr_glFramebufferTextureARB == NULL) {
      __glintercept_fnptr_glFramebufferTextureARB = (__ctype_glFramebufferTextureARB) eglGetProcAddr("glFramebufferTextureARB");
    }
    if (__glintercept_fnptr_glFramebufferTextureARB == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTextureARB;
  }
  if (strcmp(name, "glFramebufferTextureEXT") == 0) {
    if (__glintercept_fnptr_glFramebufferTextureEXT == NULL) {
      __glintercept_fnptr_glFramebufferTextureEXT = (__ctype_glFramebufferTextureEXT) eglGetProcAddr("glFramebufferTextureEXT");
    }
    if (__glintercept_fnptr_glFramebufferTextureEXT == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTextureEXT;
  }
  if (strcmp(name, "glFramebufferTextureFaceARB") == 0) {
    if (__glintercept_fnptr_glFramebufferTextureFaceARB == NULL) {
      __glintercept_fnptr_glFramebufferTextureFaceARB = (__ctype_glFramebufferTextureFaceARB) eglGetProcAddr("glFramebufferTextureFaceARB");
    }
    if (__glintercept_fnptr_glFramebufferTextureFaceARB == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTextureFaceARB;
  }
  if (strcmp(name, "glFramebufferTextureFaceEXT") == 0) {
    if (__glintercept_fnptr_glFramebufferTextureFaceEXT == NULL) {
      __glintercept_fnptr_glFramebufferTextureFaceEXT = (__ctype_glFramebufferTextureFaceEXT) eglGetProcAddr("glFramebufferTextureFaceEXT");
    }
    if (__glintercept_fnptr_glFramebufferTextureFaceEXT == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTextureFaceEXT;
  }
  if (strcmp(name, "glFramebufferTextureLayer") == 0) {
    if (__glintercept_fnptr_glFramebufferTextureLayer == NULL) {
      __glintercept_fnptr_glFramebufferTextureLayer = (__ctype_glFramebufferTextureLayer) eglGetProcAddr("glFramebufferTextureLayer");
    }
    if (__glintercept_fnptr_glFramebufferTextureLayer == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTextureLayer;
  }
  if (strcmp(name, "glFramebufferTextureLayerARB") == 0) {
    if (__glintercept_fnptr_glFramebufferTextureLayerARB == NULL) {
      __glintercept_fnptr_glFramebufferTextureLayerARB = (__ctype_glFramebufferTextureLayerARB) eglGetProcAddr("glFramebufferTextureLayerARB");
    }
    if (__glintercept_fnptr_glFramebufferTextureLayerARB == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTextureLayerARB;
  }
  if (strcmp(name, "glFramebufferTextureLayerEXT") == 0) {
    if (__glintercept_fnptr_glFramebufferTextureLayerEXT == NULL) {
      __glintercept_fnptr_glFramebufferTextureLayerEXT = (__ctype_glFramebufferTextureLayerEXT) eglGetProcAddr("glFramebufferTextureLayerEXT");
    }
    if (__glintercept_fnptr_glFramebufferTextureLayerEXT == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTextureLayerEXT;
  }
  if (strcmp(name, "glFramebufferTextureLayerDownsampleIMG") == 0) {
    if (__glintercept_fnptr_glFramebufferTextureLayerDownsampleIMG == NULL) {
      __glintercept_fnptr_glFramebufferTextureLayerDownsampleIMG = (__ctype_glFramebufferTextureLayerDownsampleIMG) eglGetProcAddr("glFramebufferTextureLayerDownsampleIMG");
    }
    if (__glintercept_fnptr_glFramebufferTextureLayerDownsampleIMG == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTextureLayerDownsampleIMG;
  }
  if (strcmp(name, "glFramebufferTextureMultisampleMultiviewOVR") == 0) {
    if (__glintercept_fnptr_glFramebufferTextureMultisampleMultiviewOVR == NULL) {
      __glintercept_fnptr_glFramebufferTextureMultisampleMultiviewOVR = (__ctype_glFramebufferTextureMultisampleMultiviewOVR) eglGetProcAddr("glFramebufferTextureMultisampleMultiviewOVR");
    }
    if (__glintercept_fnptr_glFramebufferTextureMultisampleMultiviewOVR == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTextureMultisampleMultiviewOVR;
  }
  if (strcmp(name, "glFramebufferTextureMultiviewOVR") == 0) {
    if (__glintercept_fnptr_glFramebufferTextureMultiviewOVR == NULL) {
      __glintercept_fnptr_glFramebufferTextureMultiviewOVR = (__ctype_glFramebufferTextureMultiviewOVR) eglGetProcAddr("glFramebufferTextureMultiviewOVR");
    }
    if (__glintercept_fnptr_glFramebufferTextureMultiviewOVR == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTextureMultiviewOVR;
  }
  if (strcmp(name, "glFramebufferTextureOES") == 0) {
    if (__glintercept_fnptr_glFramebufferTextureOES == NULL) {
      __glintercept_fnptr_glFramebufferTextureOES = (__ctype_glFramebufferTextureOES) eglGetProcAddr("glFramebufferTextureOES");
    }
    if (__glintercept_fnptr_glFramebufferTextureOES == NULL) return NULL;
    return (void*) __glintercept_glFramebufferTextureOES;
  }
  if (strcmp(name, "glFreeObjectBufferATI") == 0) {
    if (__glintercept_fnptr_glFreeObjectBufferATI == NULL) {
      __glintercept_fnptr_glFreeObjectBufferATI = (__ctype_glFreeObjectBufferATI) eglGetProcAddr("glFreeObjectBufferATI");
    }
    if (__glintercept_fnptr_glFreeObjectBufferATI == NULL) return NULL;
    return (void*) __glintercept_glFreeObjectBufferATI;
  }
  if (strcmp(name, "glFrontFace") == 0) {
    if (__glintercept_fnptr_glFrontFace == NULL) {
      __glintercept_fnptr_glFrontFace = (__ctype_glFrontFace) eglGetProcAddr("glFrontFace");
    }
    if (__glintercept_fnptr_glFrontFace == NULL) return NULL;
    return (void*) __glintercept_glFrontFace;
  }
  if (strcmp(name, "glFrustum") == 0) {
    if (__glintercept_fnptr_glFrustum == NULL) {
      __glintercept_fnptr_glFrustum = (__ctype_glFrustum) eglGetProcAddr("glFrustum");
    }
    if (__glintercept_fnptr_glFrustum == NULL) return NULL;
    return (void*) __glintercept_glFrustum;
  }
  if (strcmp(name, "glFrustumf") == 0) {
    if (__glintercept_fnptr_glFrustumf == NULL) {
      __glintercept_fnptr_glFrustumf = (__ctype_glFrustumf) eglGetProcAddr("glFrustumf");
    }
    if (__glintercept_fnptr_glFrustumf == NULL) return NULL;
    return (void*) __glintercept_glFrustumf;
  }
  if (strcmp(name, "glFrustumfOES") == 0) {
    if (__glintercept_fnptr_glFrustumfOES == NULL) {
      __glintercept_fnptr_glFrustumfOES = (__ctype_glFrustumfOES) eglGetProcAddr("glFrustumfOES");
    }
    if (__glintercept_fnptr_glFrustumfOES == NULL) return NULL;
    return (void*) __glintercept_glFrustumfOES;
  }
  if (strcmp(name, "glFrustumx") == 0) {
    if (__glintercept_fnptr_glFrustumx == NULL) {
      __glintercept_fnptr_glFrustumx = (__ctype_glFrustumx) eglGetProcAddr("glFrustumx");
    }
    if (__glintercept_fnptr_glFrustumx == NULL) return NULL;
    return (void*) __glintercept_glFrustumx;
  }
  if (strcmp(name, "glFrustumxOES") == 0) {
    if (__glintercept_fnptr_glFrustumxOES == NULL) {
      __glintercept_fnptr_glFrustumxOES = (__ctype_glFrustumxOES) eglGetProcAddr("glFrustumxOES");
    }
    if (__glintercept_fnptr_glFrustumxOES == NULL) return NULL;
    return (void*) __glintercept_glFrustumxOES;
  }
  if (strcmp(name, "glGenAsyncMarkersSGIX") == 0) {
    if (__glintercept_fnptr_glGenAsyncMarkersSGIX == NULL) {
      __glintercept_fnptr_glGenAsyncMarkersSGIX = (__ctype_glGenAsyncMarkersSGIX) eglGetProcAddr("glGenAsyncMarkersSGIX");
    }
    if (__glintercept_fnptr_glGenAsyncMarkersSGIX == NULL) return NULL;
    return (void*) __glintercept_glGenAsyncMarkersSGIX;
  }
  if (strcmp(name, "glGenBuffers") == 0) {
    if (__glintercept_fnptr_glGenBuffers == NULL) {
      __glintercept_fnptr_glGenBuffers = (__ctype_glGenBuffers) eglGetProcAddr("glGenBuffers");
    }
    if (__glintercept_fnptr_glGenBuffers == NULL) return NULL;
    return (void*) __glintercept_glGenBuffers;
  }
  if (strcmp(name, "glGenBuffersARB") == 0) {
    if (__glintercept_fnptr_glGenBuffersARB == NULL) {
      __glintercept_fnptr_glGenBuffersARB = (__ctype_glGenBuffersARB) eglGetProcAddr("glGenBuffersARB");
    }
    if (__glintercept_fnptr_glGenBuffersARB == NULL) return NULL;
    return (void*) __glintercept_glGenBuffersARB;
  }
  if (strcmp(name, "glGenFencesAPPLE") == 0) {
    if (__glintercept_fnptr_glGenFencesAPPLE == NULL) {
      __glintercept_fnptr_glGenFencesAPPLE = (__ctype_glGenFencesAPPLE) eglGetProcAddr("glGenFencesAPPLE");
    }
    if (__glintercept_fnptr_glGenFencesAPPLE == NULL) return NULL;
    return (void*) __glintercept_glGenFencesAPPLE;
  }
  if (strcmp(name, "glGenFencesNV") == 0) {
    if (__glintercept_fnptr_glGenFencesNV == NULL) {
      __glintercept_fnptr_glGenFencesNV = (__ctype_glGenFencesNV) eglGetProcAddr("glGenFencesNV");
    }
    if (__glintercept_fnptr_glGenFencesNV == NULL) return NULL;
    return (void*) __glintercept_glGenFencesNV;
  }
  if (strcmp(name, "glGenFragmentShadersATI") == 0) {
    if (__glintercept_fnptr_glGenFragmentShadersATI == NULL) {
      __glintercept_fnptr_glGenFragmentShadersATI = (__ctype_glGenFragmentShadersATI) eglGetProcAddr("glGenFragmentShadersATI");
    }
    if (__glintercept_fnptr_glGenFragmentShadersATI == NULL) return NULL;
    return (void*) __glintercept_glGenFragmentShadersATI;
  }
  if (strcmp(name, "glGenFramebuffers") == 0) {
    if (__glintercept_fnptr_glGenFramebuffers == NULL) {
      __glintercept_fnptr_glGenFramebuffers = (__ctype_glGenFramebuffers) eglGetProcAddr("glGenFramebuffers");
    }
    if (__glintercept_fnptr_glGenFramebuffers == NULL) return NULL;
    return (void*) __glintercept_glGenFramebuffers;
  }
  if (strcmp(name, "glGenFramebuffersEXT") == 0) {
    if (__glintercept_fnptr_glGenFramebuffersEXT == NULL) {
      __glintercept_fnptr_glGenFramebuffersEXT = (__ctype_glGenFramebuffersEXT) eglGetProcAddr("glGenFramebuffersEXT");
    }
    if (__glintercept_fnptr_glGenFramebuffersEXT == NULL) return NULL;
    return (void*) __glintercept_glGenFramebuffersEXT;
  }
  if (strcmp(name, "glGenFramebuffersOES") == 0) {
    if (__glintercept_fnptr_glGenFramebuffersOES == NULL) {
      __glintercept_fnptr_glGenFramebuffersOES = (__ctype_glGenFramebuffersOES) eglGetProcAddr("glGenFramebuffersOES");
    }
    if (__glintercept_fnptr_glGenFramebuffersOES == NULL) return NULL;
    return (void*) __glintercept_glGenFramebuffersOES;
  }
  if (strcmp(name, "glGenLists") == 0) {
    if (__glintercept_fnptr_glGenLists == NULL) {
      __glintercept_fnptr_glGenLists = (__ctype_glGenLists) eglGetProcAddr("glGenLists");
    }
    if (__glintercept_fnptr_glGenLists == NULL) return NULL;
    return (void*) __glintercept_glGenLists;
  }
  if (strcmp(name, "glGenNamesAMD") == 0) {
    if (__glintercept_fnptr_glGenNamesAMD == NULL) {
      __glintercept_fnptr_glGenNamesAMD = (__ctype_glGenNamesAMD) eglGetProcAddr("glGenNamesAMD");
    }
    if (__glintercept_fnptr_glGenNamesAMD == NULL) return NULL;
    return (void*) __glintercept_glGenNamesAMD;
  }
  if (strcmp(name, "glGenOcclusionQueriesNV") == 0) {
    if (__glintercept_fnptr_glGenOcclusionQueriesNV == NULL) {
      __glintercept_fnptr_glGenOcclusionQueriesNV = (__ctype_glGenOcclusionQueriesNV) eglGetProcAddr("glGenOcclusionQueriesNV");
    }
    if (__glintercept_fnptr_glGenOcclusionQueriesNV == NULL) return NULL;
    return (void*) __glintercept_glGenOcclusionQueriesNV;
  }
  if (strcmp(name, "glGenPathsNV") == 0) {
    if (__glintercept_fnptr_glGenPathsNV == NULL) {
      __glintercept_fnptr_glGenPathsNV = (__ctype_glGenPathsNV) eglGetProcAddr("glGenPathsNV");
    }
    if (__glintercept_fnptr_glGenPathsNV == NULL) return NULL;
    return (void*) __glintercept_glGenPathsNV;
  }
  if (strcmp(name, "glGenPerfMonitorsAMD") == 0) {
    if (__glintercept_fnptr_glGenPerfMonitorsAMD == NULL) {
      __glintercept_fnptr_glGenPerfMonitorsAMD = (__ctype_glGenPerfMonitorsAMD) eglGetProcAddr("glGenPerfMonitorsAMD");
    }
    if (__glintercept_fnptr_glGenPerfMonitorsAMD == NULL) return NULL;
    return (void*) __glintercept_glGenPerfMonitorsAMD;
  }
  if (strcmp(name, "glGenProgramPipelines") == 0) {
    if (__glintercept_fnptr_glGenProgramPipelines == NULL) {
      __glintercept_fnptr_glGenProgramPipelines = (__ctype_glGenProgramPipelines) eglGetProcAddr("glGenProgramPipelines");
    }
    if (__glintercept_fnptr_glGenProgramPipelines == NULL) return NULL;
    return (void*) __glintercept_glGenProgramPipelines;
  }
  if (strcmp(name, "glGenProgramPipelinesEXT") == 0) {
    if (__glintercept_fnptr_glGenProgramPipelinesEXT == NULL) {
      __glintercept_fnptr_glGenProgramPipelinesEXT = (__ctype_glGenProgramPipelinesEXT) eglGetProcAddr("glGenProgramPipelinesEXT");
    }
    if (__glintercept_fnptr_glGenProgramPipelinesEXT == NULL) return NULL;
    return (void*) __glintercept_glGenProgramPipelinesEXT;
  }
  if (strcmp(name, "glGenProgramsARB") == 0) {
    if (__glintercept_fnptr_glGenProgramsARB == NULL) {
      __glintercept_fnptr_glGenProgramsARB = (__ctype_glGenProgramsARB) eglGetProcAddr("glGenProgramsARB");
    }
    if (__glintercept_fnptr_glGenProgramsARB == NULL) return NULL;
    return (void*) __glintercept_glGenProgramsARB;
  }
  if (strcmp(name, "glGenProgramsNV") == 0) {
    if (__glintercept_fnptr_glGenProgramsNV == NULL) {
      __glintercept_fnptr_glGenProgramsNV = (__ctype_glGenProgramsNV) eglGetProcAddr("glGenProgramsNV");
    }
    if (__glintercept_fnptr_glGenProgramsNV == NULL) return NULL;
    return (void*) __glintercept_glGenProgramsNV;
  }
  if (strcmp(name, "glGenQueries") == 0) {
    if (__glintercept_fnptr_glGenQueries == NULL) {
      __glintercept_fnptr_glGenQueries = (__ctype_glGenQueries) eglGetProcAddr("glGenQueries");
    }
    if (__glintercept_fnptr_glGenQueries == NULL) return NULL;
    return (void*) __glintercept_glGenQueries;
  }
  if (strcmp(name, "glGenQueriesARB") == 0) {
    if (__glintercept_fnptr_glGenQueriesARB == NULL) {
      __glintercept_fnptr_glGenQueriesARB = (__ctype_glGenQueriesARB) eglGetProcAddr("glGenQueriesARB");
    }
    if (__glintercept_fnptr_glGenQueriesARB == NULL) return NULL;
    return (void*) __glintercept_glGenQueriesARB;
  }
  if (strcmp(name, "glGenQueriesEXT") == 0) {
    if (__glintercept_fnptr_glGenQueriesEXT == NULL) {
      __glintercept_fnptr_glGenQueriesEXT = (__ctype_glGenQueriesEXT) eglGetProcAddr("glGenQueriesEXT");
    }
    if (__glintercept_fnptr_glGenQueriesEXT == NULL) return NULL;
    return (void*) __glintercept_glGenQueriesEXT;
  }
  if (strcmp(name, "glGenQueryResourceTagNV") == 0) {
    if (__glintercept_fnptr_glGenQueryResourceTagNV == NULL) {
      __glintercept_fnptr_glGenQueryResourceTagNV = (__ctype_glGenQueryResourceTagNV) eglGetProcAddr("glGenQueryResourceTagNV");
    }
    if (__glintercept_fnptr_glGenQueryResourceTagNV == NULL) return NULL;
    return (void*) __glintercept_glGenQueryResourceTagNV;
  }
  if (strcmp(name, "glGenRenderbuffers") == 0) {
    if (__glintercept_fnptr_glGenRenderbuffers == NULL) {
      __glintercept_fnptr_glGenRenderbuffers = (__ctype_glGenRenderbuffers) eglGetProcAddr("glGenRenderbuffers");
    }
    if (__glintercept_fnptr_glGenRenderbuffers == NULL) return NULL;
    return (void*) __glintercept_glGenRenderbuffers;
  }
  if (strcmp(name, "glGenRenderbuffersEXT") == 0) {
    if (__glintercept_fnptr_glGenRenderbuffersEXT == NULL) {
      __glintercept_fnptr_glGenRenderbuffersEXT = (__ctype_glGenRenderbuffersEXT) eglGetProcAddr("glGenRenderbuffersEXT");
    }
    if (__glintercept_fnptr_glGenRenderbuffersEXT == NULL) return NULL;
    return (void*) __glintercept_glGenRenderbuffersEXT;
  }
  if (strcmp(name, "glGenRenderbuffersOES") == 0) {
    if (__glintercept_fnptr_glGenRenderbuffersOES == NULL) {
      __glintercept_fnptr_glGenRenderbuffersOES = (__ctype_glGenRenderbuffersOES) eglGetProcAddr("glGenRenderbuffersOES");
    }
    if (__glintercept_fnptr_glGenRenderbuffersOES == NULL) return NULL;
    return (void*) __glintercept_glGenRenderbuffersOES;
  }
  if (strcmp(name, "glGenSamplers") == 0) {
    if (__glintercept_fnptr_glGenSamplers == NULL) {
      __glintercept_fnptr_glGenSamplers = (__ctype_glGenSamplers) eglGetProcAddr("glGenSamplers");
    }
    if (__glintercept_fnptr_glGenSamplers == NULL) return NULL;
    return (void*) __glintercept_glGenSamplers;
  }
  if (strcmp(name, "glGenSemaphoresEXT") == 0) {
    if (__glintercept_fnptr_glGenSemaphoresEXT == NULL) {
      __glintercept_fnptr_glGenSemaphoresEXT = (__ctype_glGenSemaphoresEXT) eglGetProcAddr("glGenSemaphoresEXT");
    }
    if (__glintercept_fnptr_glGenSemaphoresEXT == NULL) return NULL;
    return (void*) __glintercept_glGenSemaphoresEXT;
  }
  if (strcmp(name, "glGenSymbolsEXT") == 0) {
    if (__glintercept_fnptr_glGenSymbolsEXT == NULL) {
      __glintercept_fnptr_glGenSymbolsEXT = (__ctype_glGenSymbolsEXT) eglGetProcAddr("glGenSymbolsEXT");
    }
    if (__glintercept_fnptr_glGenSymbolsEXT == NULL) return NULL;
    return (void*) __glintercept_glGenSymbolsEXT;
  }
  if (strcmp(name, "glGenTextures") == 0) {
    if (__glintercept_fnptr_glGenTextures == NULL) {
      __glintercept_fnptr_glGenTextures = (__ctype_glGenTextures) eglGetProcAddr("glGenTextures");
    }
    if (__glintercept_fnptr_glGenTextures == NULL) return NULL;
    return (void*) __glintercept_glGenTextures;
  }
  if (strcmp(name, "glGenTexturesEXT") == 0) {
    if (__glintercept_fnptr_glGenTexturesEXT == NULL) {
      __glintercept_fnptr_glGenTexturesEXT = (__ctype_glGenTexturesEXT) eglGetProcAddr("glGenTexturesEXT");
    }
    if (__glintercept_fnptr_glGenTexturesEXT == NULL) return NULL;
    return (void*) __glintercept_glGenTexturesEXT;
  }
  if (strcmp(name, "glGenTransformFeedbacks") == 0) {
    if (__glintercept_fnptr_glGenTransformFeedbacks == NULL) {
      __glintercept_fnptr_glGenTransformFeedbacks = (__ctype_glGenTransformFeedbacks) eglGetProcAddr("glGenTransformFeedbacks");
    }
    if (__glintercept_fnptr_glGenTransformFeedbacks == NULL) return NULL;
    return (void*) __glintercept_glGenTransformFeedbacks;
  }
  if (strcmp(name, "glGenTransformFeedbacksNV") == 0) {
    if (__glintercept_fnptr_glGenTransformFeedbacksNV == NULL) {
      __glintercept_fnptr_glGenTransformFeedbacksNV = (__ctype_glGenTransformFeedbacksNV) eglGetProcAddr("glGenTransformFeedbacksNV");
    }
    if (__glintercept_fnptr_glGenTransformFeedbacksNV == NULL) return NULL;
    return (void*) __glintercept_glGenTransformFeedbacksNV;
  }
  if (strcmp(name, "glGenVertexArrays") == 0) {
    if (__glintercept_fnptr_glGenVertexArrays == NULL) {
      __glintercept_fnptr_glGenVertexArrays = (__ctype_glGenVertexArrays) eglGetProcAddr("glGenVertexArrays");
    }
    if (__glintercept_fnptr_glGenVertexArrays == NULL) return NULL;
    return (void*) __glintercept_glGenVertexArrays;
  }
  if (strcmp(name, "glGenVertexArraysAPPLE") == 0) {
    if (__glintercept_fnptr_glGenVertexArraysAPPLE == NULL) {
      __glintercept_fnptr_glGenVertexArraysAPPLE = (__ctype_glGenVertexArraysAPPLE) eglGetProcAddr("glGenVertexArraysAPPLE");
    }
    if (__glintercept_fnptr_glGenVertexArraysAPPLE == NULL) return NULL;
    return (void*) __glintercept_glGenVertexArraysAPPLE;
  }
  if (strcmp(name, "glGenVertexArraysOES") == 0) {
    if (__glintercept_fnptr_glGenVertexArraysOES == NULL) {
      __glintercept_fnptr_glGenVertexArraysOES = (__ctype_glGenVertexArraysOES) eglGetProcAddr("glGenVertexArraysOES");
    }
    if (__glintercept_fnptr_glGenVertexArraysOES == NULL) return NULL;
    return (void*) __glintercept_glGenVertexArraysOES;
  }
  if (strcmp(name, "glGenVertexShadersEXT") == 0) {
    if (__glintercept_fnptr_glGenVertexShadersEXT == NULL) {
      __glintercept_fnptr_glGenVertexShadersEXT = (__ctype_glGenVertexShadersEXT) eglGetProcAddr("glGenVertexShadersEXT");
    }
    if (__glintercept_fnptr_glGenVertexShadersEXT == NULL) return NULL;
    return (void*) __glintercept_glGenVertexShadersEXT;
  }
  if (strcmp(name, "glGenerateMipmap") == 0) {
    if (__glintercept_fnptr_glGenerateMipmap == NULL) {
      __glintercept_fnptr_glGenerateMipmap = (__ctype_glGenerateMipmap) eglGetProcAddr("glGenerateMipmap");
    }
    if (__glintercept_fnptr_glGenerateMipmap == NULL) return NULL;
    return (void*) __glintercept_glGenerateMipmap;
  }
  if (strcmp(name, "glGenerateMipmapEXT") == 0) {
    if (__glintercept_fnptr_glGenerateMipmapEXT == NULL) {
      __glintercept_fnptr_glGenerateMipmapEXT = (__ctype_glGenerateMipmapEXT) eglGetProcAddr("glGenerateMipmapEXT");
    }
    if (__glintercept_fnptr_glGenerateMipmapEXT == NULL) return NULL;
    return (void*) __glintercept_glGenerateMipmapEXT;
  }
  if (strcmp(name, "glGenerateMipmapOES") == 0) {
    if (__glintercept_fnptr_glGenerateMipmapOES == NULL) {
      __glintercept_fnptr_glGenerateMipmapOES = (__ctype_glGenerateMipmapOES) eglGetProcAddr("glGenerateMipmapOES");
    }
    if (__glintercept_fnptr_glGenerateMipmapOES == NULL) return NULL;
    return (void*) __glintercept_glGenerateMipmapOES;
  }
  if (strcmp(name, "glGenerateMultiTexMipmapEXT") == 0) {
    if (__glintercept_fnptr_glGenerateMultiTexMipmapEXT == NULL) {
      __glintercept_fnptr_glGenerateMultiTexMipmapEXT = (__ctype_glGenerateMultiTexMipmapEXT) eglGetProcAddr("glGenerateMultiTexMipmapEXT");
    }
    if (__glintercept_fnptr_glGenerateMultiTexMipmapEXT == NULL) return NULL;
    return (void*) __glintercept_glGenerateMultiTexMipmapEXT;
  }
  if (strcmp(name, "glGenerateTextureMipmap") == 0) {
    if (__glintercept_fnptr_glGenerateTextureMipmap == NULL) {
      __glintercept_fnptr_glGenerateTextureMipmap = (__ctype_glGenerateTextureMipmap) eglGetProcAddr("glGenerateTextureMipmap");
    }
    if (__glintercept_fnptr_glGenerateTextureMipmap == NULL) return NULL;
    return (void*) __glintercept_glGenerateTextureMipmap;
  }
  if (strcmp(name, "glGenerateTextureMipmapEXT") == 0) {
    if (__glintercept_fnptr_glGenerateTextureMipmapEXT == NULL) {
      __glintercept_fnptr_glGenerateTextureMipmapEXT = (__ctype_glGenerateTextureMipmapEXT) eglGetProcAddr("glGenerateTextureMipmapEXT");
    }
    if (__glintercept_fnptr_glGenerateTextureMipmapEXT == NULL) return NULL;
    return (void*) __glintercept_glGenerateTextureMipmapEXT;
  }
  if (strcmp(name, "glGetActiveAtomicCounterBufferiv") == 0) {
    if (__glintercept_fnptr_glGetActiveAtomicCounterBufferiv == NULL) {
      __glintercept_fnptr_glGetActiveAtomicCounterBufferiv = (__ctype_glGetActiveAtomicCounterBufferiv) eglGetProcAddr("glGetActiveAtomicCounterBufferiv");
    }
    if (__glintercept_fnptr_glGetActiveAtomicCounterBufferiv == NULL) return NULL;
    return (void*) __glintercept_glGetActiveAtomicCounterBufferiv;
  }
  if (strcmp(name, "glGetActiveAttrib") == 0) {
    if (__glintercept_fnptr_glGetActiveAttrib == NULL) {
      __glintercept_fnptr_glGetActiveAttrib = (__ctype_glGetActiveAttrib) eglGetProcAddr("glGetActiveAttrib");
    }
    if (__glintercept_fnptr_glGetActiveAttrib == NULL) return NULL;
    return (void*) __glintercept_glGetActiveAttrib;
  }
  if (strcmp(name, "glGetActiveAttribARB") == 0) {
    if (__glintercept_fnptr_glGetActiveAttribARB == NULL) {
      __glintercept_fnptr_glGetActiveAttribARB = (__ctype_glGetActiveAttribARB) eglGetProcAddr("glGetActiveAttribARB");
    }
    if (__glintercept_fnptr_glGetActiveAttribARB == NULL) return NULL;
    return (void*) __glintercept_glGetActiveAttribARB;
  }
  if (strcmp(name, "glGetActiveSubroutineName") == 0) {
    if (__glintercept_fnptr_glGetActiveSubroutineName == NULL) {
      __glintercept_fnptr_glGetActiveSubroutineName = (__ctype_glGetActiveSubroutineName) eglGetProcAddr("glGetActiveSubroutineName");
    }
    if (__glintercept_fnptr_glGetActiveSubroutineName == NULL) return NULL;
    return (void*) __glintercept_glGetActiveSubroutineName;
  }
  if (strcmp(name, "glGetActiveSubroutineUniformName") == 0) {
    if (__glintercept_fnptr_glGetActiveSubroutineUniformName == NULL) {
      __glintercept_fnptr_glGetActiveSubroutineUniformName = (__ctype_glGetActiveSubroutineUniformName) eglGetProcAddr("glGetActiveSubroutineUniformName");
    }
    if (__glintercept_fnptr_glGetActiveSubroutineUniformName == NULL) return NULL;
    return (void*) __glintercept_glGetActiveSubroutineUniformName;
  }
  if (strcmp(name, "glGetActiveSubroutineUniformiv") == 0) {
    if (__glintercept_fnptr_glGetActiveSubroutineUniformiv == NULL) {
      __glintercept_fnptr_glGetActiveSubroutineUniformiv = (__ctype_glGetActiveSubroutineUniformiv) eglGetProcAddr("glGetActiveSubroutineUniformiv");
    }
    if (__glintercept_fnptr_glGetActiveSubroutineUniformiv == NULL) return NULL;
    return (void*) __glintercept_glGetActiveSubroutineUniformiv;
  }
  if (strcmp(name, "glGetActiveUniform") == 0) {
    if (__glintercept_fnptr_glGetActiveUniform == NULL) {
      __glintercept_fnptr_glGetActiveUniform = (__ctype_glGetActiveUniform) eglGetProcAddr("glGetActiveUniform");
    }
    if (__glintercept_fnptr_glGetActiveUniform == NULL) return NULL;
    return (void*) __glintercept_glGetActiveUniform;
  }
  if (strcmp(name, "glGetActiveUniformARB") == 0) {
    if (__glintercept_fnptr_glGetActiveUniformARB == NULL) {
      __glintercept_fnptr_glGetActiveUniformARB = (__ctype_glGetActiveUniformARB) eglGetProcAddr("glGetActiveUniformARB");
    }
    if (__glintercept_fnptr_glGetActiveUniformARB == NULL) return NULL;
    return (void*) __glintercept_glGetActiveUniformARB;
  }
  if (strcmp(name, "glGetActiveUniformBlockName") == 0) {
    if (__glintercept_fnptr_glGetActiveUniformBlockName == NULL) {
      __glintercept_fnptr_glGetActiveUniformBlockName = (__ctype_glGetActiveUniformBlockName) eglGetProcAddr("glGetActiveUniformBlockName");
    }
    if (__glintercept_fnptr_glGetActiveUniformBlockName == NULL) return NULL;
    return (void*) __glintercept_glGetActiveUniformBlockName;
  }
  if (strcmp(name, "glGetActiveUniformBlockiv") == 0) {
    if (__glintercept_fnptr_glGetActiveUniformBlockiv == NULL) {
      __glintercept_fnptr_glGetActiveUniformBlockiv = (__ctype_glGetActiveUniformBlockiv) eglGetProcAddr("glGetActiveUniformBlockiv");
    }
    if (__glintercept_fnptr_glGetActiveUniformBlockiv == NULL) return NULL;
    return (void*) __glintercept_glGetActiveUniformBlockiv;
  }
  if (strcmp(name, "glGetActiveUniformName") == 0) {
    if (__glintercept_fnptr_glGetActiveUniformName == NULL) {
      __glintercept_fnptr_glGetActiveUniformName = (__ctype_glGetActiveUniformName) eglGetProcAddr("glGetActiveUniformName");
    }
    if (__glintercept_fnptr_glGetActiveUniformName == NULL) return NULL;
    return (void*) __glintercept_glGetActiveUniformName;
  }
  if (strcmp(name, "glGetActiveUniformsiv") == 0) {
    if (__glintercept_fnptr_glGetActiveUniformsiv == NULL) {
      __glintercept_fnptr_glGetActiveUniformsiv = (__ctype_glGetActiveUniformsiv) eglGetProcAddr("glGetActiveUniformsiv");
    }
    if (__glintercept_fnptr_glGetActiveUniformsiv == NULL) return NULL;
    return (void*) __glintercept_glGetActiveUniformsiv;
  }
  if (strcmp(name, "glGetActiveVaryingNV") == 0) {
    if (__glintercept_fnptr_glGetActiveVaryingNV == NULL) {
      __glintercept_fnptr_glGetActiveVaryingNV = (__ctype_glGetActiveVaryingNV) eglGetProcAddr("glGetActiveVaryingNV");
    }
    if (__glintercept_fnptr_glGetActiveVaryingNV == NULL) return NULL;
    return (void*) __glintercept_glGetActiveVaryingNV;
  }
  if (strcmp(name, "glGetArrayObjectfvATI") == 0) {
    if (__glintercept_fnptr_glGetArrayObjectfvATI == NULL) {
      __glintercept_fnptr_glGetArrayObjectfvATI = (__ctype_glGetArrayObjectfvATI) eglGetProcAddr("glGetArrayObjectfvATI");
    }
    if (__glintercept_fnptr_glGetArrayObjectfvATI == NULL) return NULL;
    return (void*) __glintercept_glGetArrayObjectfvATI;
  }
  if (strcmp(name, "glGetArrayObjectivATI") == 0) {
    if (__glintercept_fnptr_glGetArrayObjectivATI == NULL) {
      __glintercept_fnptr_glGetArrayObjectivATI = (__ctype_glGetArrayObjectivATI) eglGetProcAddr("glGetArrayObjectivATI");
    }
    if (__glintercept_fnptr_glGetArrayObjectivATI == NULL) return NULL;
    return (void*) __glintercept_glGetArrayObjectivATI;
  }
  if (strcmp(name, "glGetAttachedObjectsARB") == 0) {
    if (__glintercept_fnptr_glGetAttachedObjectsARB == NULL) {
      __glintercept_fnptr_glGetAttachedObjectsARB = (__ctype_glGetAttachedObjectsARB) eglGetProcAddr("glGetAttachedObjectsARB");
    }
    if (__glintercept_fnptr_glGetAttachedObjectsARB == NULL) return NULL;
    return (void*) __glintercept_glGetAttachedObjectsARB;
  }
  if (strcmp(name, "glGetAttachedShaders") == 0) {
    if (__glintercept_fnptr_glGetAttachedShaders == NULL) {
      __glintercept_fnptr_glGetAttachedShaders = (__ctype_glGetAttachedShaders) eglGetProcAddr("glGetAttachedShaders");
    }
    if (__glintercept_fnptr_glGetAttachedShaders == NULL) return NULL;
    return (void*) __glintercept_glGetAttachedShaders;
  }
  if (strcmp(name, "glGetAttribLocation") == 0) {
    if (__glintercept_fnptr_glGetAttribLocation == NULL) {
      __glintercept_fnptr_glGetAttribLocation = (__ctype_glGetAttribLocation) eglGetProcAddr("glGetAttribLocation");
    }
    if (__glintercept_fnptr_glGetAttribLocation == NULL) return NULL;
    return (void*) __glintercept_glGetAttribLocation;
  }
  if (strcmp(name, "glGetAttribLocationARB") == 0) {
    if (__glintercept_fnptr_glGetAttribLocationARB == NULL) {
      __glintercept_fnptr_glGetAttribLocationARB = (__ctype_glGetAttribLocationARB) eglGetProcAddr("glGetAttribLocationARB");
    }
    if (__glintercept_fnptr_glGetAttribLocationARB == NULL) return NULL;
    return (void*) __glintercept_glGetAttribLocationARB;
  }
  if (strcmp(name, "glGetBooleanIndexedvEXT") == 0) {
    if (__glintercept_fnptr_glGetBooleanIndexedvEXT == NULL) {
      __glintercept_fnptr_glGetBooleanIndexedvEXT = (__ctype_glGetBooleanIndexedvEXT) eglGetProcAddr("glGetBooleanIndexedvEXT");
    }
    if (__glintercept_fnptr_glGetBooleanIndexedvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetBooleanIndexedvEXT;
  }
  if (strcmp(name, "glGetBooleani_v") == 0) {
    if (__glintercept_fnptr_glGetBooleani_v == NULL) {
      __glintercept_fnptr_glGetBooleani_v = (__ctype_glGetBooleani_v) eglGetProcAddr("glGetBooleani_v");
    }
    if (__glintercept_fnptr_glGetBooleani_v == NULL) return NULL;
    return (void*) __glintercept_glGetBooleani_v;
  }
  if (strcmp(name, "glGetBooleanv") == 0) {
    if (__glintercept_fnptr_glGetBooleanv == NULL) {
      __glintercept_fnptr_glGetBooleanv = (__ctype_glGetBooleanv) eglGetProcAddr("glGetBooleanv");
    }
    if (__glintercept_fnptr_glGetBooleanv == NULL) return NULL;
    return (void*) __glintercept_glGetBooleanv;
  }
  if (strcmp(name, "glGetBufferParameteri64v") == 0) {
    if (__glintercept_fnptr_glGetBufferParameteri64v == NULL) {
      __glintercept_fnptr_glGetBufferParameteri64v = (__ctype_glGetBufferParameteri64v) eglGetProcAddr("glGetBufferParameteri64v");
    }
    if (__glintercept_fnptr_glGetBufferParameteri64v == NULL) return NULL;
    return (void*) __glintercept_glGetBufferParameteri64v;
  }
  if (strcmp(name, "glGetBufferParameteriv") == 0) {
    if (__glintercept_fnptr_glGetBufferParameteriv == NULL) {
      __glintercept_fnptr_glGetBufferParameteriv = (__ctype_glGetBufferParameteriv) eglGetProcAddr("glGetBufferParameteriv");
    }
    if (__glintercept_fnptr_glGetBufferParameteriv == NULL) return NULL;
    return (void*) __glintercept_glGetBufferParameteriv;
  }
  if (strcmp(name, "glGetBufferParameterivARB") == 0) {
    if (__glintercept_fnptr_glGetBufferParameterivARB == NULL) {
      __glintercept_fnptr_glGetBufferParameterivARB = (__ctype_glGetBufferParameterivARB) eglGetProcAddr("glGetBufferParameterivARB");
    }
    if (__glintercept_fnptr_glGetBufferParameterivARB == NULL) return NULL;
    return (void*) __glintercept_glGetBufferParameterivARB;
  }
  if (strcmp(name, "glGetBufferParameterui64vNV") == 0) {
    if (__glintercept_fnptr_glGetBufferParameterui64vNV == NULL) {
      __glintercept_fnptr_glGetBufferParameterui64vNV = (__ctype_glGetBufferParameterui64vNV) eglGetProcAddr("glGetBufferParameterui64vNV");
    }
    if (__glintercept_fnptr_glGetBufferParameterui64vNV == NULL) return NULL;
    return (void*) __glintercept_glGetBufferParameterui64vNV;
  }
  if (strcmp(name, "glGetBufferPointerv") == 0) {
    if (__glintercept_fnptr_glGetBufferPointerv == NULL) {
      __glintercept_fnptr_glGetBufferPointerv = (__ctype_glGetBufferPointerv) eglGetProcAddr("glGetBufferPointerv");
    }
    if (__glintercept_fnptr_glGetBufferPointerv == NULL) return NULL;
    return (void*) __glintercept_glGetBufferPointerv;
  }
  if (strcmp(name, "glGetBufferPointervARB") == 0) {
    if (__glintercept_fnptr_glGetBufferPointervARB == NULL) {
      __glintercept_fnptr_glGetBufferPointervARB = (__ctype_glGetBufferPointervARB) eglGetProcAddr("glGetBufferPointervARB");
    }
    if (__glintercept_fnptr_glGetBufferPointervARB == NULL) return NULL;
    return (void*) __glintercept_glGetBufferPointervARB;
  }
  if (strcmp(name, "glGetBufferPointervOES") == 0) {
    if (__glintercept_fnptr_glGetBufferPointervOES == NULL) {
      __glintercept_fnptr_glGetBufferPointervOES = (__ctype_glGetBufferPointervOES) eglGetProcAddr("glGetBufferPointervOES");
    }
    if (__glintercept_fnptr_glGetBufferPointervOES == NULL) return NULL;
    return (void*) __glintercept_glGetBufferPointervOES;
  }
  if (strcmp(name, "glGetBufferSubData") == 0) {
    if (__glintercept_fnptr_glGetBufferSubData == NULL) {
      __glintercept_fnptr_glGetBufferSubData = (__ctype_glGetBufferSubData) eglGetProcAddr("glGetBufferSubData");
    }
    if (__glintercept_fnptr_glGetBufferSubData == NULL) return NULL;
    return (void*) __glintercept_glGetBufferSubData;
  }
  if (strcmp(name, "glGetBufferSubDataARB") == 0) {
    if (__glintercept_fnptr_glGetBufferSubDataARB == NULL) {
      __glintercept_fnptr_glGetBufferSubDataARB = (__ctype_glGetBufferSubDataARB) eglGetProcAddr("glGetBufferSubDataARB");
    }
    if (__glintercept_fnptr_glGetBufferSubDataARB == NULL) return NULL;
    return (void*) __glintercept_glGetBufferSubDataARB;
  }
  if (strcmp(name, "glGetClipPlane") == 0) {
    if (__glintercept_fnptr_glGetClipPlane == NULL) {
      __glintercept_fnptr_glGetClipPlane = (__ctype_glGetClipPlane) eglGetProcAddr("glGetClipPlane");
    }
    if (__glintercept_fnptr_glGetClipPlane == NULL) return NULL;
    return (void*) __glintercept_glGetClipPlane;
  }
  if (strcmp(name, "glGetClipPlanef") == 0) {
    if (__glintercept_fnptr_glGetClipPlanef == NULL) {
      __glintercept_fnptr_glGetClipPlanef = (__ctype_glGetClipPlanef) eglGetProcAddr("glGetClipPlanef");
    }
    if (__glintercept_fnptr_glGetClipPlanef == NULL) return NULL;
    return (void*) __glintercept_glGetClipPlanef;
  }
  if (strcmp(name, "glGetClipPlanefOES") == 0) {
    if (__glintercept_fnptr_glGetClipPlanefOES == NULL) {
      __glintercept_fnptr_glGetClipPlanefOES = (__ctype_glGetClipPlanefOES) eglGetProcAddr("glGetClipPlanefOES");
    }
    if (__glintercept_fnptr_glGetClipPlanefOES == NULL) return NULL;
    return (void*) __glintercept_glGetClipPlanefOES;
  }
  if (strcmp(name, "glGetClipPlanex") == 0) {
    if (__glintercept_fnptr_glGetClipPlanex == NULL) {
      __glintercept_fnptr_glGetClipPlanex = (__ctype_glGetClipPlanex) eglGetProcAddr("glGetClipPlanex");
    }
    if (__glintercept_fnptr_glGetClipPlanex == NULL) return NULL;
    return (void*) __glintercept_glGetClipPlanex;
  }
  if (strcmp(name, "glGetClipPlanexOES") == 0) {
    if (__glintercept_fnptr_glGetClipPlanexOES == NULL) {
      __glintercept_fnptr_glGetClipPlanexOES = (__ctype_glGetClipPlanexOES) eglGetProcAddr("glGetClipPlanexOES");
    }
    if (__glintercept_fnptr_glGetClipPlanexOES == NULL) return NULL;
    return (void*) __glintercept_glGetClipPlanexOES;
  }
  if (strcmp(name, "glGetColorTable") == 0) {
    if (__glintercept_fnptr_glGetColorTable == NULL) {
      __glintercept_fnptr_glGetColorTable = (__ctype_glGetColorTable) eglGetProcAddr("glGetColorTable");
    }
    if (__glintercept_fnptr_glGetColorTable == NULL) return NULL;
    return (void*) __glintercept_glGetColorTable;
  }
  if (strcmp(name, "glGetColorTableEXT") == 0) {
    if (__glintercept_fnptr_glGetColorTableEXT == NULL) {
      __glintercept_fnptr_glGetColorTableEXT = (__ctype_glGetColorTableEXT) eglGetProcAddr("glGetColorTableEXT");
    }
    if (__glintercept_fnptr_glGetColorTableEXT == NULL) return NULL;
    return (void*) __glintercept_glGetColorTableEXT;
  }
  if (strcmp(name, "glGetColorTableParameterfv") == 0) {
    if (__glintercept_fnptr_glGetColorTableParameterfv == NULL) {
      __glintercept_fnptr_glGetColorTableParameterfv = (__ctype_glGetColorTableParameterfv) eglGetProcAddr("glGetColorTableParameterfv");
    }
    if (__glintercept_fnptr_glGetColorTableParameterfv == NULL) return NULL;
    return (void*) __glintercept_glGetColorTableParameterfv;
  }
  if (strcmp(name, "glGetColorTableParameterfvEXT") == 0) {
    if (__glintercept_fnptr_glGetColorTableParameterfvEXT == NULL) {
      __glintercept_fnptr_glGetColorTableParameterfvEXT = (__ctype_glGetColorTableParameterfvEXT) eglGetProcAddr("glGetColorTableParameterfvEXT");
    }
    if (__glintercept_fnptr_glGetColorTableParameterfvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetColorTableParameterfvEXT;
  }
  if (strcmp(name, "glGetColorTableParameterfvSGI") == 0) {
    if (__glintercept_fnptr_glGetColorTableParameterfvSGI == NULL) {
      __glintercept_fnptr_glGetColorTableParameterfvSGI = (__ctype_glGetColorTableParameterfvSGI) eglGetProcAddr("glGetColorTableParameterfvSGI");
    }
    if (__glintercept_fnptr_glGetColorTableParameterfvSGI == NULL) return NULL;
    return (void*) __glintercept_glGetColorTableParameterfvSGI;
  }
  if (strcmp(name, "glGetColorTableParameteriv") == 0) {
    if (__glintercept_fnptr_glGetColorTableParameteriv == NULL) {
      __glintercept_fnptr_glGetColorTableParameteriv = (__ctype_glGetColorTableParameteriv) eglGetProcAddr("glGetColorTableParameteriv");
    }
    if (__glintercept_fnptr_glGetColorTableParameteriv == NULL) return NULL;
    return (void*) __glintercept_glGetColorTableParameteriv;
  }
  if (strcmp(name, "glGetColorTableParameterivEXT") == 0) {
    if (__glintercept_fnptr_glGetColorTableParameterivEXT == NULL) {
      __glintercept_fnptr_glGetColorTableParameterivEXT = (__ctype_glGetColorTableParameterivEXT) eglGetProcAddr("glGetColorTableParameterivEXT");
    }
    if (__glintercept_fnptr_glGetColorTableParameterivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetColorTableParameterivEXT;
  }
  if (strcmp(name, "glGetColorTableParameterivSGI") == 0) {
    if (__glintercept_fnptr_glGetColorTableParameterivSGI == NULL) {
      __glintercept_fnptr_glGetColorTableParameterivSGI = (__ctype_glGetColorTableParameterivSGI) eglGetProcAddr("glGetColorTableParameterivSGI");
    }
    if (__glintercept_fnptr_glGetColorTableParameterivSGI == NULL) return NULL;
    return (void*) __glintercept_glGetColorTableParameterivSGI;
  }
  if (strcmp(name, "glGetColorTableSGI") == 0) {
    if (__glintercept_fnptr_glGetColorTableSGI == NULL) {
      __glintercept_fnptr_glGetColorTableSGI = (__ctype_glGetColorTableSGI) eglGetProcAddr("glGetColorTableSGI");
    }
    if (__glintercept_fnptr_glGetColorTableSGI == NULL) return NULL;
    return (void*) __glintercept_glGetColorTableSGI;
  }
  if (strcmp(name, "glGetCombinerInputParameterfvNV") == 0) {
    if (__glintercept_fnptr_glGetCombinerInputParameterfvNV == NULL) {
      __glintercept_fnptr_glGetCombinerInputParameterfvNV = (__ctype_glGetCombinerInputParameterfvNV) eglGetProcAddr("glGetCombinerInputParameterfvNV");
    }
    if (__glintercept_fnptr_glGetCombinerInputParameterfvNV == NULL) return NULL;
    return (void*) __glintercept_glGetCombinerInputParameterfvNV;
  }
  if (strcmp(name, "glGetCombinerInputParameterivNV") == 0) {
    if (__glintercept_fnptr_glGetCombinerInputParameterivNV == NULL) {
      __glintercept_fnptr_glGetCombinerInputParameterivNV = (__ctype_glGetCombinerInputParameterivNV) eglGetProcAddr("glGetCombinerInputParameterivNV");
    }
    if (__glintercept_fnptr_glGetCombinerInputParameterivNV == NULL) return NULL;
    return (void*) __glintercept_glGetCombinerInputParameterivNV;
  }
  if (strcmp(name, "glGetCombinerOutputParameterfvNV") == 0) {
    if (__glintercept_fnptr_glGetCombinerOutputParameterfvNV == NULL) {
      __glintercept_fnptr_glGetCombinerOutputParameterfvNV = (__ctype_glGetCombinerOutputParameterfvNV) eglGetProcAddr("glGetCombinerOutputParameterfvNV");
    }
    if (__glintercept_fnptr_glGetCombinerOutputParameterfvNV == NULL) return NULL;
    return (void*) __glintercept_glGetCombinerOutputParameterfvNV;
  }
  if (strcmp(name, "glGetCombinerOutputParameterivNV") == 0) {
    if (__glintercept_fnptr_glGetCombinerOutputParameterivNV == NULL) {
      __glintercept_fnptr_glGetCombinerOutputParameterivNV = (__ctype_glGetCombinerOutputParameterivNV) eglGetProcAddr("glGetCombinerOutputParameterivNV");
    }
    if (__glintercept_fnptr_glGetCombinerOutputParameterivNV == NULL) return NULL;
    return (void*) __glintercept_glGetCombinerOutputParameterivNV;
  }
  if (strcmp(name, "glGetCombinerStageParameterfvNV") == 0) {
    if (__glintercept_fnptr_glGetCombinerStageParameterfvNV == NULL) {
      __glintercept_fnptr_glGetCombinerStageParameterfvNV = (__ctype_glGetCombinerStageParameterfvNV) eglGetProcAddr("glGetCombinerStageParameterfvNV");
    }
    if (__glintercept_fnptr_glGetCombinerStageParameterfvNV == NULL) return NULL;
    return (void*) __glintercept_glGetCombinerStageParameterfvNV;
  }
  if (strcmp(name, "glGetCommandHeaderNV") == 0) {
    if (__glintercept_fnptr_glGetCommandHeaderNV == NULL) {
      __glintercept_fnptr_glGetCommandHeaderNV = (__ctype_glGetCommandHeaderNV) eglGetProcAddr("glGetCommandHeaderNV");
    }
    if (__glintercept_fnptr_glGetCommandHeaderNV == NULL) return NULL;
    return (void*) __glintercept_glGetCommandHeaderNV;
  }
  if (strcmp(name, "glGetCompressedMultiTexImageEXT") == 0) {
    if (__glintercept_fnptr_glGetCompressedMultiTexImageEXT == NULL) {
      __glintercept_fnptr_glGetCompressedMultiTexImageEXT = (__ctype_glGetCompressedMultiTexImageEXT) eglGetProcAddr("glGetCompressedMultiTexImageEXT");
    }
    if (__glintercept_fnptr_glGetCompressedMultiTexImageEXT == NULL) return NULL;
    return (void*) __glintercept_glGetCompressedMultiTexImageEXT;
  }
  if (strcmp(name, "glGetCompressedTexImage") == 0) {
    if (__glintercept_fnptr_glGetCompressedTexImage == NULL) {
      __glintercept_fnptr_glGetCompressedTexImage = (__ctype_glGetCompressedTexImage) eglGetProcAddr("glGetCompressedTexImage");
    }
    if (__glintercept_fnptr_glGetCompressedTexImage == NULL) return NULL;
    return (void*) __glintercept_glGetCompressedTexImage;
  }
  if (strcmp(name, "glGetCompressedTexImageARB") == 0) {
    if (__glintercept_fnptr_glGetCompressedTexImageARB == NULL) {
      __glintercept_fnptr_glGetCompressedTexImageARB = (__ctype_glGetCompressedTexImageARB) eglGetProcAddr("glGetCompressedTexImageARB");
    }
    if (__glintercept_fnptr_glGetCompressedTexImageARB == NULL) return NULL;
    return (void*) __glintercept_glGetCompressedTexImageARB;
  }
  if (strcmp(name, "glGetCompressedTextureImage") == 0) {
    if (__glintercept_fnptr_glGetCompressedTextureImage == NULL) {
      __glintercept_fnptr_glGetCompressedTextureImage = (__ctype_glGetCompressedTextureImage) eglGetProcAddr("glGetCompressedTextureImage");
    }
    if (__glintercept_fnptr_glGetCompressedTextureImage == NULL) return NULL;
    return (void*) __glintercept_glGetCompressedTextureImage;
  }
  if (strcmp(name, "glGetCompressedTextureImageEXT") == 0) {
    if (__glintercept_fnptr_glGetCompressedTextureImageEXT == NULL) {
      __glintercept_fnptr_glGetCompressedTextureImageEXT = (__ctype_glGetCompressedTextureImageEXT) eglGetProcAddr("glGetCompressedTextureImageEXT");
    }
    if (__glintercept_fnptr_glGetCompressedTextureImageEXT == NULL) return NULL;
    return (void*) __glintercept_glGetCompressedTextureImageEXT;
  }
  if (strcmp(name, "glGetCompressedTextureSubImage") == 0) {
    if (__glintercept_fnptr_glGetCompressedTextureSubImage == NULL) {
      __glintercept_fnptr_glGetCompressedTextureSubImage = (__ctype_glGetCompressedTextureSubImage) eglGetProcAddr("glGetCompressedTextureSubImage");
    }
    if (__glintercept_fnptr_glGetCompressedTextureSubImage == NULL) return NULL;
    return (void*) __glintercept_glGetCompressedTextureSubImage;
  }
  if (strcmp(name, "glGetConvolutionFilter") == 0) {
    if (__glintercept_fnptr_glGetConvolutionFilter == NULL) {
      __glintercept_fnptr_glGetConvolutionFilter = (__ctype_glGetConvolutionFilter) eglGetProcAddr("glGetConvolutionFilter");
    }
    if (__glintercept_fnptr_glGetConvolutionFilter == NULL) return NULL;
    return (void*) __glintercept_glGetConvolutionFilter;
  }
  if (strcmp(name, "glGetConvolutionFilterEXT") == 0) {
    if (__glintercept_fnptr_glGetConvolutionFilterEXT == NULL) {
      __glintercept_fnptr_glGetConvolutionFilterEXT = (__ctype_glGetConvolutionFilterEXT) eglGetProcAddr("glGetConvolutionFilterEXT");
    }
    if (__glintercept_fnptr_glGetConvolutionFilterEXT == NULL) return NULL;
    return (void*) __glintercept_glGetConvolutionFilterEXT;
  }
  if (strcmp(name, "glGetConvolutionParameterfv") == 0) {
    if (__glintercept_fnptr_glGetConvolutionParameterfv == NULL) {
      __glintercept_fnptr_glGetConvolutionParameterfv = (__ctype_glGetConvolutionParameterfv) eglGetProcAddr("glGetConvolutionParameterfv");
    }
    if (__glintercept_fnptr_glGetConvolutionParameterfv == NULL) return NULL;
    return (void*) __glintercept_glGetConvolutionParameterfv;
  }
  if (strcmp(name, "glGetConvolutionParameterfvEXT") == 0) {
    if (__glintercept_fnptr_glGetConvolutionParameterfvEXT == NULL) {
      __glintercept_fnptr_glGetConvolutionParameterfvEXT = (__ctype_glGetConvolutionParameterfvEXT) eglGetProcAddr("glGetConvolutionParameterfvEXT");
    }
    if (__glintercept_fnptr_glGetConvolutionParameterfvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetConvolutionParameterfvEXT;
  }
  if (strcmp(name, "glGetConvolutionParameteriv") == 0) {
    if (__glintercept_fnptr_glGetConvolutionParameteriv == NULL) {
      __glintercept_fnptr_glGetConvolutionParameteriv = (__ctype_glGetConvolutionParameteriv) eglGetProcAddr("glGetConvolutionParameteriv");
    }
    if (__glintercept_fnptr_glGetConvolutionParameteriv == NULL) return NULL;
    return (void*) __glintercept_glGetConvolutionParameteriv;
  }
  if (strcmp(name, "glGetConvolutionParameterivEXT") == 0) {
    if (__glintercept_fnptr_glGetConvolutionParameterivEXT == NULL) {
      __glintercept_fnptr_glGetConvolutionParameterivEXT = (__ctype_glGetConvolutionParameterivEXT) eglGetProcAddr("glGetConvolutionParameterivEXT");
    }
    if (__glintercept_fnptr_glGetConvolutionParameterivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetConvolutionParameterivEXT;
  }
  if (strcmp(name, "glGetConvolutionParameterxvOES") == 0) {
    if (__glintercept_fnptr_glGetConvolutionParameterxvOES == NULL) {
      __glintercept_fnptr_glGetConvolutionParameterxvOES = (__ctype_glGetConvolutionParameterxvOES) eglGetProcAddr("glGetConvolutionParameterxvOES");
    }
    if (__glintercept_fnptr_glGetConvolutionParameterxvOES == NULL) return NULL;
    return (void*) __glintercept_glGetConvolutionParameterxvOES;
  }
  if (strcmp(name, "glGetCoverageModulationTableNV") == 0) {
    if (__glintercept_fnptr_glGetCoverageModulationTableNV == NULL) {
      __glintercept_fnptr_glGetCoverageModulationTableNV = (__ctype_glGetCoverageModulationTableNV) eglGetProcAddr("glGetCoverageModulationTableNV");
    }
    if (__glintercept_fnptr_glGetCoverageModulationTableNV == NULL) return NULL;
    return (void*) __glintercept_glGetCoverageModulationTableNV;
  }
  if (strcmp(name, "glGetDebugMessageLog") == 0) {
    if (__glintercept_fnptr_glGetDebugMessageLog == NULL) {
      __glintercept_fnptr_glGetDebugMessageLog = (__ctype_glGetDebugMessageLog) eglGetProcAddr("glGetDebugMessageLog");
    }
    if (__glintercept_fnptr_glGetDebugMessageLog == NULL) return NULL;
    return (void*) __glintercept_glGetDebugMessageLog;
  }
  if (strcmp(name, "glGetDebugMessageLogAMD") == 0) {
    if (__glintercept_fnptr_glGetDebugMessageLogAMD == NULL) {
      __glintercept_fnptr_glGetDebugMessageLogAMD = (__ctype_glGetDebugMessageLogAMD) eglGetProcAddr("glGetDebugMessageLogAMD");
    }
    if (__glintercept_fnptr_glGetDebugMessageLogAMD == NULL) return NULL;
    return (void*) __glintercept_glGetDebugMessageLogAMD;
  }
  if (strcmp(name, "glGetDebugMessageLogARB") == 0) {
    if (__glintercept_fnptr_glGetDebugMessageLogARB == NULL) {
      __glintercept_fnptr_glGetDebugMessageLogARB = (__ctype_glGetDebugMessageLogARB) eglGetProcAddr("glGetDebugMessageLogARB");
    }
    if (__glintercept_fnptr_glGetDebugMessageLogARB == NULL) return NULL;
    return (void*) __glintercept_glGetDebugMessageLogARB;
  }
  if (strcmp(name, "glGetDebugMessageLogKHR") == 0) {
    if (__glintercept_fnptr_glGetDebugMessageLogKHR == NULL) {
      __glintercept_fnptr_glGetDebugMessageLogKHR = (__ctype_glGetDebugMessageLogKHR) eglGetProcAddr("glGetDebugMessageLogKHR");
    }
    if (__glintercept_fnptr_glGetDebugMessageLogKHR == NULL) return NULL;
    return (void*) __glintercept_glGetDebugMessageLogKHR;
  }
  if (strcmp(name, "glGetDetailTexFuncSGIS") == 0) {
    if (__glintercept_fnptr_glGetDetailTexFuncSGIS == NULL) {
      __glintercept_fnptr_glGetDetailTexFuncSGIS = (__ctype_glGetDetailTexFuncSGIS) eglGetProcAddr("glGetDetailTexFuncSGIS");
    }
    if (__glintercept_fnptr_glGetDetailTexFuncSGIS == NULL) return NULL;
    return (void*) __glintercept_glGetDetailTexFuncSGIS;
  }
  if (strcmp(name, "glGetDoubleIndexedvEXT") == 0) {
    if (__glintercept_fnptr_glGetDoubleIndexedvEXT == NULL) {
      __glintercept_fnptr_glGetDoubleIndexedvEXT = (__ctype_glGetDoubleIndexedvEXT) eglGetProcAddr("glGetDoubleIndexedvEXT");
    }
    if (__glintercept_fnptr_glGetDoubleIndexedvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetDoubleIndexedvEXT;
  }
  if (strcmp(name, "glGetDoublei_v") == 0) {
    if (__glintercept_fnptr_glGetDoublei_v == NULL) {
      __glintercept_fnptr_glGetDoublei_v = (__ctype_glGetDoublei_v) eglGetProcAddr("glGetDoublei_v");
    }
    if (__glintercept_fnptr_glGetDoublei_v == NULL) return NULL;
    return (void*) __glintercept_glGetDoublei_v;
  }
  if (strcmp(name, "glGetDoublei_vEXT") == 0) {
    if (__glintercept_fnptr_glGetDoublei_vEXT == NULL) {
      __glintercept_fnptr_glGetDoublei_vEXT = (__ctype_glGetDoublei_vEXT) eglGetProcAddr("glGetDoublei_vEXT");
    }
    if (__glintercept_fnptr_glGetDoublei_vEXT == NULL) return NULL;
    return (void*) __glintercept_glGetDoublei_vEXT;
  }
  if (strcmp(name, "glGetDoublev") == 0) {
    if (__glintercept_fnptr_glGetDoublev == NULL) {
      __glintercept_fnptr_glGetDoublev = (__ctype_glGetDoublev) eglGetProcAddr("glGetDoublev");
    }
    if (__glintercept_fnptr_glGetDoublev == NULL) return NULL;
    return (void*) __glintercept_glGetDoublev;
  }
  if (strcmp(name, "glGetDriverControlStringQCOM") == 0) {
    if (__glintercept_fnptr_glGetDriverControlStringQCOM == NULL) {
      __glintercept_fnptr_glGetDriverControlStringQCOM = (__ctype_glGetDriverControlStringQCOM) eglGetProcAddr("glGetDriverControlStringQCOM");
    }
    if (__glintercept_fnptr_glGetDriverControlStringQCOM == NULL) return NULL;
    return (void*) __glintercept_glGetDriverControlStringQCOM;
  }
  if (strcmp(name, "glGetDriverControlsQCOM") == 0) {
    if (__glintercept_fnptr_glGetDriverControlsQCOM == NULL) {
      __glintercept_fnptr_glGetDriverControlsQCOM = (__ctype_glGetDriverControlsQCOM) eglGetProcAddr("glGetDriverControlsQCOM");
    }
    if (__glintercept_fnptr_glGetDriverControlsQCOM == NULL) return NULL;
    return (void*) __glintercept_glGetDriverControlsQCOM;
  }
  if (strcmp(name, "glGetError") == 0) {
    if (__glintercept_fnptr_glGetError == NULL) {
      __glintercept_fnptr_glGetError = (__ctype_glGetError) eglGetProcAddr("glGetError");
    }
    if (__glintercept_fnptr_glGetError == NULL) return NULL;
    return (void*) __glintercept_glGetError;
  }
  if (strcmp(name, "glGetFenceivNV") == 0) {
    if (__glintercept_fnptr_glGetFenceivNV == NULL) {
      __glintercept_fnptr_glGetFenceivNV = (__ctype_glGetFenceivNV) eglGetProcAddr("glGetFenceivNV");
    }
    if (__glintercept_fnptr_glGetFenceivNV == NULL) return NULL;
    return (void*) __glintercept_glGetFenceivNV;
  }
  if (strcmp(name, "glGetFinalCombinerInputParameterfvNV") == 0) {
    if (__glintercept_fnptr_glGetFinalCombinerInputParameterfvNV == NULL) {
      __glintercept_fnptr_glGetFinalCombinerInputParameterfvNV = (__ctype_glGetFinalCombinerInputParameterfvNV) eglGetProcAddr("glGetFinalCombinerInputParameterfvNV");
    }
    if (__glintercept_fnptr_glGetFinalCombinerInputParameterfvNV == NULL) return NULL;
    return (void*) __glintercept_glGetFinalCombinerInputParameterfvNV;
  }
  if (strcmp(name, "glGetFinalCombinerInputParameterivNV") == 0) {
    if (__glintercept_fnptr_glGetFinalCombinerInputParameterivNV == NULL) {
      __glintercept_fnptr_glGetFinalCombinerInputParameterivNV = (__ctype_glGetFinalCombinerInputParameterivNV) eglGetProcAddr("glGetFinalCombinerInputParameterivNV");
    }
    if (__glintercept_fnptr_glGetFinalCombinerInputParameterivNV == NULL) return NULL;
    return (void*) __glintercept_glGetFinalCombinerInputParameterivNV;
  }
  if (strcmp(name, "glGetFirstPerfQueryIdINTEL") == 0) {
    if (__glintercept_fnptr_glGetFirstPerfQueryIdINTEL == NULL) {
      __glintercept_fnptr_glGetFirstPerfQueryIdINTEL = (__ctype_glGetFirstPerfQueryIdINTEL) eglGetProcAddr("glGetFirstPerfQueryIdINTEL");
    }
    if (__glintercept_fnptr_glGetFirstPerfQueryIdINTEL == NULL) return NULL;
    return (void*) __glintercept_glGetFirstPerfQueryIdINTEL;
  }
  if (strcmp(name, "glGetFixedv") == 0) {
    if (__glintercept_fnptr_glGetFixedv == NULL) {
      __glintercept_fnptr_glGetFixedv = (__ctype_glGetFixedv) eglGetProcAddr("glGetFixedv");
    }
    if (__glintercept_fnptr_glGetFixedv == NULL) return NULL;
    return (void*) __glintercept_glGetFixedv;
  }
  if (strcmp(name, "glGetFixedvOES") == 0) {
    if (__glintercept_fnptr_glGetFixedvOES == NULL) {
      __glintercept_fnptr_glGetFixedvOES = (__ctype_glGetFixedvOES) eglGetProcAddr("glGetFixedvOES");
    }
    if (__glintercept_fnptr_glGetFixedvOES == NULL) return NULL;
    return (void*) __glintercept_glGetFixedvOES;
  }
  if (strcmp(name, "glGetFloatIndexedvEXT") == 0) {
    if (__glintercept_fnptr_glGetFloatIndexedvEXT == NULL) {
      __glintercept_fnptr_glGetFloatIndexedvEXT = (__ctype_glGetFloatIndexedvEXT) eglGetProcAddr("glGetFloatIndexedvEXT");
    }
    if (__glintercept_fnptr_glGetFloatIndexedvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetFloatIndexedvEXT;
  }
  if (strcmp(name, "glGetFloati_v") == 0) {
    if (__glintercept_fnptr_glGetFloati_v == NULL) {
      __glintercept_fnptr_glGetFloati_v = (__ctype_glGetFloati_v) eglGetProcAddr("glGetFloati_v");
    }
    if (__glintercept_fnptr_glGetFloati_v == NULL) return NULL;
    return (void*) __glintercept_glGetFloati_v;
  }
  if (strcmp(name, "glGetFloati_vEXT") == 0) {
    if (__glintercept_fnptr_glGetFloati_vEXT == NULL) {
      __glintercept_fnptr_glGetFloati_vEXT = (__ctype_glGetFloati_vEXT) eglGetProcAddr("glGetFloati_vEXT");
    }
    if (__glintercept_fnptr_glGetFloati_vEXT == NULL) return NULL;
    return (void*) __glintercept_glGetFloati_vEXT;
  }
  if (strcmp(name, "glGetFloati_vNV") == 0) {
    if (__glintercept_fnptr_glGetFloati_vNV == NULL) {
      __glintercept_fnptr_glGetFloati_vNV = (__ctype_glGetFloati_vNV) eglGetProcAddr("glGetFloati_vNV");
    }
    if (__glintercept_fnptr_glGetFloati_vNV == NULL) return NULL;
    return (void*) __glintercept_glGetFloati_vNV;
  }
  if (strcmp(name, "glGetFloati_vOES") == 0) {
    if (__glintercept_fnptr_glGetFloati_vOES == NULL) {
      __glintercept_fnptr_glGetFloati_vOES = (__ctype_glGetFloati_vOES) eglGetProcAddr("glGetFloati_vOES");
    }
    if (__glintercept_fnptr_glGetFloati_vOES == NULL) return NULL;
    return (void*) __glintercept_glGetFloati_vOES;
  }
  if (strcmp(name, "glGetFloatv") == 0) {
    if (__glintercept_fnptr_glGetFloatv == NULL) {
      __glintercept_fnptr_glGetFloatv = (__ctype_glGetFloatv) eglGetProcAddr("glGetFloatv");
    }
    if (__glintercept_fnptr_glGetFloatv == NULL) return NULL;
    return (void*) __glintercept_glGetFloatv;
  }
  if (strcmp(name, "glGetFogFuncSGIS") == 0) {
    if (__glintercept_fnptr_glGetFogFuncSGIS == NULL) {
      __glintercept_fnptr_glGetFogFuncSGIS = (__ctype_glGetFogFuncSGIS) eglGetProcAddr("glGetFogFuncSGIS");
    }
    if (__glintercept_fnptr_glGetFogFuncSGIS == NULL) return NULL;
    return (void*) __glintercept_glGetFogFuncSGIS;
  }
  if (strcmp(name, "glGetFragDataIndex") == 0) {
    if (__glintercept_fnptr_glGetFragDataIndex == NULL) {
      __glintercept_fnptr_glGetFragDataIndex = (__ctype_glGetFragDataIndex) eglGetProcAddr("glGetFragDataIndex");
    }
    if (__glintercept_fnptr_glGetFragDataIndex == NULL) return NULL;
    return (void*) __glintercept_glGetFragDataIndex;
  }
  if (strcmp(name, "glGetFragDataIndexEXT") == 0) {
    if (__glintercept_fnptr_glGetFragDataIndexEXT == NULL) {
      __glintercept_fnptr_glGetFragDataIndexEXT = (__ctype_glGetFragDataIndexEXT) eglGetProcAddr("glGetFragDataIndexEXT");
    }
    if (__glintercept_fnptr_glGetFragDataIndexEXT == NULL) return NULL;
    return (void*) __glintercept_glGetFragDataIndexEXT;
  }
  if (strcmp(name, "glGetFragDataLocation") == 0) {
    if (__glintercept_fnptr_glGetFragDataLocation == NULL) {
      __glintercept_fnptr_glGetFragDataLocation = (__ctype_glGetFragDataLocation) eglGetProcAddr("glGetFragDataLocation");
    }
    if (__glintercept_fnptr_glGetFragDataLocation == NULL) return NULL;
    return (void*) __glintercept_glGetFragDataLocation;
  }
  if (strcmp(name, "glGetFragDataLocationEXT") == 0) {
    if (__glintercept_fnptr_glGetFragDataLocationEXT == NULL) {
      __glintercept_fnptr_glGetFragDataLocationEXT = (__ctype_glGetFragDataLocationEXT) eglGetProcAddr("glGetFragDataLocationEXT");
    }
    if (__glintercept_fnptr_glGetFragDataLocationEXT == NULL) return NULL;
    return (void*) __glintercept_glGetFragDataLocationEXT;
  }
  if (strcmp(name, "glGetFragmentLightfvSGIX") == 0) {
    if (__glintercept_fnptr_glGetFragmentLightfvSGIX == NULL) {
      __glintercept_fnptr_glGetFragmentLightfvSGIX = (__ctype_glGetFragmentLightfvSGIX) eglGetProcAddr("glGetFragmentLightfvSGIX");
    }
    if (__glintercept_fnptr_glGetFragmentLightfvSGIX == NULL) return NULL;
    return (void*) __glintercept_glGetFragmentLightfvSGIX;
  }
  if (strcmp(name, "glGetFragmentLightivSGIX") == 0) {
    if (__glintercept_fnptr_glGetFragmentLightivSGIX == NULL) {
      __glintercept_fnptr_glGetFragmentLightivSGIX = (__ctype_glGetFragmentLightivSGIX) eglGetProcAddr("glGetFragmentLightivSGIX");
    }
    if (__glintercept_fnptr_glGetFragmentLightivSGIX == NULL) return NULL;
    return (void*) __glintercept_glGetFragmentLightivSGIX;
  }
  if (strcmp(name, "glGetFragmentMaterialfvSGIX") == 0) {
    if (__glintercept_fnptr_glGetFragmentMaterialfvSGIX == NULL) {
      __glintercept_fnptr_glGetFragmentMaterialfvSGIX = (__ctype_glGetFragmentMaterialfvSGIX) eglGetProcAddr("glGetFragmentMaterialfvSGIX");
    }
    if (__glintercept_fnptr_glGetFragmentMaterialfvSGIX == NULL) return NULL;
    return (void*) __glintercept_glGetFragmentMaterialfvSGIX;
  }
  if (strcmp(name, "glGetFragmentMaterialivSGIX") == 0) {
    if (__glintercept_fnptr_glGetFragmentMaterialivSGIX == NULL) {
      __glintercept_fnptr_glGetFragmentMaterialivSGIX = (__ctype_glGetFragmentMaterialivSGIX) eglGetProcAddr("glGetFragmentMaterialivSGIX");
    }
    if (__glintercept_fnptr_glGetFragmentMaterialivSGIX == NULL) return NULL;
    return (void*) __glintercept_glGetFragmentMaterialivSGIX;
  }
  if (strcmp(name, "glGetFramebufferAttachmentParameteriv") == 0) {
    if (__glintercept_fnptr_glGetFramebufferAttachmentParameteriv == NULL) {
      __glintercept_fnptr_glGetFramebufferAttachmentParameteriv = (__ctype_glGetFramebufferAttachmentParameteriv) eglGetProcAddr("glGetFramebufferAttachmentParameteriv");
    }
    if (__glintercept_fnptr_glGetFramebufferAttachmentParameteriv == NULL) return NULL;
    return (void*) __glintercept_glGetFramebufferAttachmentParameteriv;
  }
  if (strcmp(name, "glGetFramebufferAttachmentParameterivEXT") == 0) {
    if (__glintercept_fnptr_glGetFramebufferAttachmentParameterivEXT == NULL) {
      __glintercept_fnptr_glGetFramebufferAttachmentParameterivEXT = (__ctype_glGetFramebufferAttachmentParameterivEXT) eglGetProcAddr("glGetFramebufferAttachmentParameterivEXT");
    }
    if (__glintercept_fnptr_glGetFramebufferAttachmentParameterivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetFramebufferAttachmentParameterivEXT;
  }
  if (strcmp(name, "glGetFramebufferAttachmentParameterivOES") == 0) {
    if (__glintercept_fnptr_glGetFramebufferAttachmentParameterivOES == NULL) {
      __glintercept_fnptr_glGetFramebufferAttachmentParameterivOES = (__ctype_glGetFramebufferAttachmentParameterivOES) eglGetProcAddr("glGetFramebufferAttachmentParameterivOES");
    }
    if (__glintercept_fnptr_glGetFramebufferAttachmentParameterivOES == NULL) return NULL;
    return (void*) __glintercept_glGetFramebufferAttachmentParameterivOES;
  }
  if (strcmp(name, "glGetFramebufferParameterfvAMD") == 0) {
    if (__glintercept_fnptr_glGetFramebufferParameterfvAMD == NULL) {
      __glintercept_fnptr_glGetFramebufferParameterfvAMD = (__ctype_glGetFramebufferParameterfvAMD) eglGetProcAddr("glGetFramebufferParameterfvAMD");
    }
    if (__glintercept_fnptr_glGetFramebufferParameterfvAMD == NULL) return NULL;
    return (void*) __glintercept_glGetFramebufferParameterfvAMD;
  }
  if (strcmp(name, "glGetFramebufferParameteriv") == 0) {
    if (__glintercept_fnptr_glGetFramebufferParameteriv == NULL) {
      __glintercept_fnptr_glGetFramebufferParameteriv = (__ctype_glGetFramebufferParameteriv) eglGetProcAddr("glGetFramebufferParameteriv");
    }
    if (__glintercept_fnptr_glGetFramebufferParameteriv == NULL) return NULL;
    return (void*) __glintercept_glGetFramebufferParameteriv;
  }
  if (strcmp(name, "glGetFramebufferParameterivEXT") == 0) {
    if (__glintercept_fnptr_glGetFramebufferParameterivEXT == NULL) {
      __glintercept_fnptr_glGetFramebufferParameterivEXT = (__ctype_glGetFramebufferParameterivEXT) eglGetProcAddr("glGetFramebufferParameterivEXT");
    }
    if (__glintercept_fnptr_glGetFramebufferParameterivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetFramebufferParameterivEXT;
  }
  if (strcmp(name, "glGetFramebufferPixelLocalStorageSizeEXT") == 0) {
    if (__glintercept_fnptr_glGetFramebufferPixelLocalStorageSizeEXT == NULL) {
      __glintercept_fnptr_glGetFramebufferPixelLocalStorageSizeEXT = (__ctype_glGetFramebufferPixelLocalStorageSizeEXT) eglGetProcAddr("glGetFramebufferPixelLocalStorageSizeEXT");
    }
    if (__glintercept_fnptr_glGetFramebufferPixelLocalStorageSizeEXT == NULL) return NULL;
    return (void*) __glintercept_glGetFramebufferPixelLocalStorageSizeEXT;
  }
  if (strcmp(name, "glGetGraphicsResetStatus") == 0) {
    if (__glintercept_fnptr_glGetGraphicsResetStatus == NULL) {
      __glintercept_fnptr_glGetGraphicsResetStatus = (__ctype_glGetGraphicsResetStatus) eglGetProcAddr("glGetGraphicsResetStatus");
    }
    if (__glintercept_fnptr_glGetGraphicsResetStatus == NULL) return NULL;
    return (void*) __glintercept_glGetGraphicsResetStatus;
  }
  if (strcmp(name, "glGetGraphicsResetStatusARB") == 0) {
    if (__glintercept_fnptr_glGetGraphicsResetStatusARB == NULL) {
      __glintercept_fnptr_glGetGraphicsResetStatusARB = (__ctype_glGetGraphicsResetStatusARB) eglGetProcAddr("glGetGraphicsResetStatusARB");
    }
    if (__glintercept_fnptr_glGetGraphicsResetStatusARB == NULL) return NULL;
    return (void*) __glintercept_glGetGraphicsResetStatusARB;
  }
  if (strcmp(name, "glGetGraphicsResetStatusEXT") == 0) {
    if (__glintercept_fnptr_glGetGraphicsResetStatusEXT == NULL) {
      __glintercept_fnptr_glGetGraphicsResetStatusEXT = (__ctype_glGetGraphicsResetStatusEXT) eglGetProcAddr("glGetGraphicsResetStatusEXT");
    }
    if (__glintercept_fnptr_glGetGraphicsResetStatusEXT == NULL) return NULL;
    return (void*) __glintercept_glGetGraphicsResetStatusEXT;
  }
  if (strcmp(name, "glGetGraphicsResetStatusKHR") == 0) {
    if (__glintercept_fnptr_glGetGraphicsResetStatusKHR == NULL) {
      __glintercept_fnptr_glGetGraphicsResetStatusKHR = (__ctype_glGetGraphicsResetStatusKHR) eglGetProcAddr("glGetGraphicsResetStatusKHR");
    }
    if (__glintercept_fnptr_glGetGraphicsResetStatusKHR == NULL) return NULL;
    return (void*) __glintercept_glGetGraphicsResetStatusKHR;
  }
  if (strcmp(name, "glGetHandleARB") == 0) {
    if (__glintercept_fnptr_glGetHandleARB == NULL) {
      __glintercept_fnptr_glGetHandleARB = (__ctype_glGetHandleARB) eglGetProcAddr("glGetHandleARB");
    }
    if (__glintercept_fnptr_glGetHandleARB == NULL) return NULL;
    return (void*) __glintercept_glGetHandleARB;
  }
  if (strcmp(name, "glGetHistogram") == 0) {
    if (__glintercept_fnptr_glGetHistogram == NULL) {
      __glintercept_fnptr_glGetHistogram = (__ctype_glGetHistogram) eglGetProcAddr("glGetHistogram");
    }
    if (__glintercept_fnptr_glGetHistogram == NULL) return NULL;
    return (void*) __glintercept_glGetHistogram;
  }
  if (strcmp(name, "glGetHistogramEXT") == 0) {
    if (__glintercept_fnptr_glGetHistogramEXT == NULL) {
      __glintercept_fnptr_glGetHistogramEXT = (__ctype_glGetHistogramEXT) eglGetProcAddr("glGetHistogramEXT");
    }
    if (__glintercept_fnptr_glGetHistogramEXT == NULL) return NULL;
    return (void*) __glintercept_glGetHistogramEXT;
  }
  if (strcmp(name, "glGetHistogramParameterfv") == 0) {
    if (__glintercept_fnptr_glGetHistogramParameterfv == NULL) {
      __glintercept_fnptr_glGetHistogramParameterfv = (__ctype_glGetHistogramParameterfv) eglGetProcAddr("glGetHistogramParameterfv");
    }
    if (__glintercept_fnptr_glGetHistogramParameterfv == NULL) return NULL;
    return (void*) __glintercept_glGetHistogramParameterfv;
  }
  if (strcmp(name, "glGetHistogramParameterfvEXT") == 0) {
    if (__glintercept_fnptr_glGetHistogramParameterfvEXT == NULL) {
      __glintercept_fnptr_glGetHistogramParameterfvEXT = (__ctype_glGetHistogramParameterfvEXT) eglGetProcAddr("glGetHistogramParameterfvEXT");
    }
    if (__glintercept_fnptr_glGetHistogramParameterfvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetHistogramParameterfvEXT;
  }
  if (strcmp(name, "glGetHistogramParameteriv") == 0) {
    if (__glintercept_fnptr_glGetHistogramParameteriv == NULL) {
      __glintercept_fnptr_glGetHistogramParameteriv = (__ctype_glGetHistogramParameteriv) eglGetProcAddr("glGetHistogramParameteriv");
    }
    if (__glintercept_fnptr_glGetHistogramParameteriv == NULL) return NULL;
    return (void*) __glintercept_glGetHistogramParameteriv;
  }
  if (strcmp(name, "glGetHistogramParameterivEXT") == 0) {
    if (__glintercept_fnptr_glGetHistogramParameterivEXT == NULL) {
      __glintercept_fnptr_glGetHistogramParameterivEXT = (__ctype_glGetHistogramParameterivEXT) eglGetProcAddr("glGetHistogramParameterivEXT");
    }
    if (__glintercept_fnptr_glGetHistogramParameterivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetHistogramParameterivEXT;
  }
  if (strcmp(name, "glGetHistogramParameterxvOES") == 0) {
    if (__glintercept_fnptr_glGetHistogramParameterxvOES == NULL) {
      __glintercept_fnptr_glGetHistogramParameterxvOES = (__ctype_glGetHistogramParameterxvOES) eglGetProcAddr("glGetHistogramParameterxvOES");
    }
    if (__glintercept_fnptr_glGetHistogramParameterxvOES == NULL) return NULL;
    return (void*) __glintercept_glGetHistogramParameterxvOES;
  }
  if (strcmp(name, "glGetImageHandleARB") == 0) {
    if (__glintercept_fnptr_glGetImageHandleARB == NULL) {
      __glintercept_fnptr_glGetImageHandleARB = (__ctype_glGetImageHandleARB) eglGetProcAddr("glGetImageHandleARB");
    }
    if (__glintercept_fnptr_glGetImageHandleARB == NULL) return NULL;
    return (void*) __glintercept_glGetImageHandleARB;
  }
  if (strcmp(name, "glGetImageHandleNV") == 0) {
    if (__glintercept_fnptr_glGetImageHandleNV == NULL) {
      __glintercept_fnptr_glGetImageHandleNV = (__ctype_glGetImageHandleNV) eglGetProcAddr("glGetImageHandleNV");
    }
    if (__glintercept_fnptr_glGetImageHandleNV == NULL) return NULL;
    return (void*) __glintercept_glGetImageHandleNV;
  }
  if (strcmp(name, "glGetImageTransformParameterfvHP") == 0) {
    if (__glintercept_fnptr_glGetImageTransformParameterfvHP == NULL) {
      __glintercept_fnptr_glGetImageTransformParameterfvHP = (__ctype_glGetImageTransformParameterfvHP) eglGetProcAddr("glGetImageTransformParameterfvHP");
    }
    if (__glintercept_fnptr_glGetImageTransformParameterfvHP == NULL) return NULL;
    return (void*) __glintercept_glGetImageTransformParameterfvHP;
  }
  if (strcmp(name, "glGetImageTransformParameterivHP") == 0) {
    if (__glintercept_fnptr_glGetImageTransformParameterivHP == NULL) {
      __glintercept_fnptr_glGetImageTransformParameterivHP = (__ctype_glGetImageTransformParameterivHP) eglGetProcAddr("glGetImageTransformParameterivHP");
    }
    if (__glintercept_fnptr_glGetImageTransformParameterivHP == NULL) return NULL;
    return (void*) __glintercept_glGetImageTransformParameterivHP;
  }
  if (strcmp(name, "glGetInfoLogARB") == 0) {
    if (__glintercept_fnptr_glGetInfoLogARB == NULL) {
      __glintercept_fnptr_glGetInfoLogARB = (__ctype_glGetInfoLogARB) eglGetProcAddr("glGetInfoLogARB");
    }
    if (__glintercept_fnptr_glGetInfoLogARB == NULL) return NULL;
    return (void*) __glintercept_glGetInfoLogARB;
  }
  if (strcmp(name, "glGetInstrumentsSGIX") == 0) {
    if (__glintercept_fnptr_glGetInstrumentsSGIX == NULL) {
      __glintercept_fnptr_glGetInstrumentsSGIX = (__ctype_glGetInstrumentsSGIX) eglGetProcAddr("glGetInstrumentsSGIX");
    }
    if (__glintercept_fnptr_glGetInstrumentsSGIX == NULL) return NULL;
    return (void*) __glintercept_glGetInstrumentsSGIX;
  }
  if (strcmp(name, "glGetInteger64i_v") == 0) {
    if (__glintercept_fnptr_glGetInteger64i_v == NULL) {
      __glintercept_fnptr_glGetInteger64i_v = (__ctype_glGetInteger64i_v) eglGetProcAddr("glGetInteger64i_v");
    }
    if (__glintercept_fnptr_glGetInteger64i_v == NULL) return NULL;
    return (void*) __glintercept_glGetInteger64i_v;
  }
  if (strcmp(name, "glGetInteger64v") == 0) {
    if (__glintercept_fnptr_glGetInteger64v == NULL) {
      __glintercept_fnptr_glGetInteger64v = (__ctype_glGetInteger64v) eglGetProcAddr("glGetInteger64v");
    }
    if (__glintercept_fnptr_glGetInteger64v == NULL) return NULL;
    return (void*) __glintercept_glGetInteger64v;
  }
  if (strcmp(name, "glGetInteger64vAPPLE") == 0) {
    if (__glintercept_fnptr_glGetInteger64vAPPLE == NULL) {
      __glintercept_fnptr_glGetInteger64vAPPLE = (__ctype_glGetInteger64vAPPLE) eglGetProcAddr("glGetInteger64vAPPLE");
    }
    if (__glintercept_fnptr_glGetInteger64vAPPLE == NULL) return NULL;
    return (void*) __glintercept_glGetInteger64vAPPLE;
  }
  if (strcmp(name, "glGetInteger64vEXT") == 0) {
    if (__glintercept_fnptr_glGetInteger64vEXT == NULL) {
      __glintercept_fnptr_glGetInteger64vEXT = (__ctype_glGetInteger64vEXT) eglGetProcAddr("glGetInteger64vEXT");
    }
    if (__glintercept_fnptr_glGetInteger64vEXT == NULL) return NULL;
    return (void*) __glintercept_glGetInteger64vEXT;
  }
  if (strcmp(name, "glGetIntegerIndexedvEXT") == 0) {
    if (__glintercept_fnptr_glGetIntegerIndexedvEXT == NULL) {
      __glintercept_fnptr_glGetIntegerIndexedvEXT = (__ctype_glGetIntegerIndexedvEXT) eglGetProcAddr("glGetIntegerIndexedvEXT");
    }
    if (__glintercept_fnptr_glGetIntegerIndexedvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetIntegerIndexedvEXT;
  }
  if (strcmp(name, "glGetIntegeri_v") == 0) {
    if (__glintercept_fnptr_glGetIntegeri_v == NULL) {
      __glintercept_fnptr_glGetIntegeri_v = (__ctype_glGetIntegeri_v) eglGetProcAddr("glGetIntegeri_v");
    }
    if (__glintercept_fnptr_glGetIntegeri_v == NULL) return NULL;
    return (void*) __glintercept_glGetIntegeri_v;
  }
  if (strcmp(name, "glGetIntegeri_vEXT") == 0) {
    if (__glintercept_fnptr_glGetIntegeri_vEXT == NULL) {
      __glintercept_fnptr_glGetIntegeri_vEXT = (__ctype_glGetIntegeri_vEXT) eglGetProcAddr("glGetIntegeri_vEXT");
    }
    if (__glintercept_fnptr_glGetIntegeri_vEXT == NULL) return NULL;
    return (void*) __glintercept_glGetIntegeri_vEXT;
  }
  if (strcmp(name, "glGetIntegerui64i_vNV") == 0) {
    if (__glintercept_fnptr_glGetIntegerui64i_vNV == NULL) {
      __glintercept_fnptr_glGetIntegerui64i_vNV = (__ctype_glGetIntegerui64i_vNV) eglGetProcAddr("glGetIntegerui64i_vNV");
    }
    if (__glintercept_fnptr_glGetIntegerui64i_vNV == NULL) return NULL;
    return (void*) __glintercept_glGetIntegerui64i_vNV;
  }
  if (strcmp(name, "glGetIntegerui64vNV") == 0) {
    if (__glintercept_fnptr_glGetIntegerui64vNV == NULL) {
      __glintercept_fnptr_glGetIntegerui64vNV = (__ctype_glGetIntegerui64vNV) eglGetProcAddr("glGetIntegerui64vNV");
    }
    if (__glintercept_fnptr_glGetIntegerui64vNV == NULL) return NULL;
    return (void*) __glintercept_glGetIntegerui64vNV;
  }
  if (strcmp(name, "glGetIntegerv") == 0) {
    if (__glintercept_fnptr_glGetIntegerv == NULL) {
      __glintercept_fnptr_glGetIntegerv = (__ctype_glGetIntegerv) eglGetProcAddr("glGetIntegerv");
    }
    if (__glintercept_fnptr_glGetIntegerv == NULL) return NULL;
    return (void*) __glintercept_glGetIntegerv;
  }
  if (strcmp(name, "glGetInternalformatSampleivNV") == 0) {
    if (__glintercept_fnptr_glGetInternalformatSampleivNV == NULL) {
      __glintercept_fnptr_glGetInternalformatSampleivNV = (__ctype_glGetInternalformatSampleivNV) eglGetProcAddr("glGetInternalformatSampleivNV");
    }
    if (__glintercept_fnptr_glGetInternalformatSampleivNV == NULL) return NULL;
    return (void*) __glintercept_glGetInternalformatSampleivNV;
  }
  if (strcmp(name, "glGetInternalformati64v") == 0) {
    if (__glintercept_fnptr_glGetInternalformati64v == NULL) {
      __glintercept_fnptr_glGetInternalformati64v = (__ctype_glGetInternalformati64v) eglGetProcAddr("glGetInternalformati64v");
    }
    if (__glintercept_fnptr_glGetInternalformati64v == NULL) return NULL;
    return (void*) __glintercept_glGetInternalformati64v;
  }
  if (strcmp(name, "glGetInternalformativ") == 0) {
    if (__glintercept_fnptr_glGetInternalformativ == NULL) {
      __glintercept_fnptr_glGetInternalformativ = (__ctype_glGetInternalformativ) eglGetProcAddr("glGetInternalformativ");
    }
    if (__glintercept_fnptr_glGetInternalformativ == NULL) return NULL;
    return (void*) __glintercept_glGetInternalformativ;
  }
  if (strcmp(name, "glGetInvariantBooleanvEXT") == 0) {
    if (__glintercept_fnptr_glGetInvariantBooleanvEXT == NULL) {
      __glintercept_fnptr_glGetInvariantBooleanvEXT = (__ctype_glGetInvariantBooleanvEXT) eglGetProcAddr("glGetInvariantBooleanvEXT");
    }
    if (__glintercept_fnptr_glGetInvariantBooleanvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetInvariantBooleanvEXT;
  }
  if (strcmp(name, "glGetInvariantFloatvEXT") == 0) {
    if (__glintercept_fnptr_glGetInvariantFloatvEXT == NULL) {
      __glintercept_fnptr_glGetInvariantFloatvEXT = (__ctype_glGetInvariantFloatvEXT) eglGetProcAddr("glGetInvariantFloatvEXT");
    }
    if (__glintercept_fnptr_glGetInvariantFloatvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetInvariantFloatvEXT;
  }
  if (strcmp(name, "glGetInvariantIntegervEXT") == 0) {
    if (__glintercept_fnptr_glGetInvariantIntegervEXT == NULL) {
      __glintercept_fnptr_glGetInvariantIntegervEXT = (__ctype_glGetInvariantIntegervEXT) eglGetProcAddr("glGetInvariantIntegervEXT");
    }
    if (__glintercept_fnptr_glGetInvariantIntegervEXT == NULL) return NULL;
    return (void*) __glintercept_glGetInvariantIntegervEXT;
  }
  if (strcmp(name, "glGetLightfv") == 0) {
    if (__glintercept_fnptr_glGetLightfv == NULL) {
      __glintercept_fnptr_glGetLightfv = (__ctype_glGetLightfv) eglGetProcAddr("glGetLightfv");
    }
    if (__glintercept_fnptr_glGetLightfv == NULL) return NULL;
    return (void*) __glintercept_glGetLightfv;
  }
  if (strcmp(name, "glGetLightiv") == 0) {
    if (__glintercept_fnptr_glGetLightiv == NULL) {
      __glintercept_fnptr_glGetLightiv = (__ctype_glGetLightiv) eglGetProcAddr("glGetLightiv");
    }
    if (__glintercept_fnptr_glGetLightiv == NULL) return NULL;
    return (void*) __glintercept_glGetLightiv;
  }
  if (strcmp(name, "glGetLightxOES") == 0) {
    if (__glintercept_fnptr_glGetLightxOES == NULL) {
      __glintercept_fnptr_glGetLightxOES = (__ctype_glGetLightxOES) eglGetProcAddr("glGetLightxOES");
    }
    if (__glintercept_fnptr_glGetLightxOES == NULL) return NULL;
    return (void*) __glintercept_glGetLightxOES;
  }
  if (strcmp(name, "glGetLightxv") == 0) {
    if (__glintercept_fnptr_glGetLightxv == NULL) {
      __glintercept_fnptr_glGetLightxv = (__ctype_glGetLightxv) eglGetProcAddr("glGetLightxv");
    }
    if (__glintercept_fnptr_glGetLightxv == NULL) return NULL;
    return (void*) __glintercept_glGetLightxv;
  }
  if (strcmp(name, "glGetLightxvOES") == 0) {
    if (__glintercept_fnptr_glGetLightxvOES == NULL) {
      __glintercept_fnptr_glGetLightxvOES = (__ctype_glGetLightxvOES) eglGetProcAddr("glGetLightxvOES");
    }
    if (__glintercept_fnptr_glGetLightxvOES == NULL) return NULL;
    return (void*) __glintercept_glGetLightxvOES;
  }
  if (strcmp(name, "glGetListParameterfvSGIX") == 0) {
    if (__glintercept_fnptr_glGetListParameterfvSGIX == NULL) {
      __glintercept_fnptr_glGetListParameterfvSGIX = (__ctype_glGetListParameterfvSGIX) eglGetProcAddr("glGetListParameterfvSGIX");
    }
    if (__glintercept_fnptr_glGetListParameterfvSGIX == NULL) return NULL;
    return (void*) __glintercept_glGetListParameterfvSGIX;
  }
  if (strcmp(name, "glGetListParameterivSGIX") == 0) {
    if (__glintercept_fnptr_glGetListParameterivSGIX == NULL) {
      __glintercept_fnptr_glGetListParameterivSGIX = (__ctype_glGetListParameterivSGIX) eglGetProcAddr("glGetListParameterivSGIX");
    }
    if (__glintercept_fnptr_glGetListParameterivSGIX == NULL) return NULL;
    return (void*) __glintercept_glGetListParameterivSGIX;
  }
  if (strcmp(name, "glGetLocalConstantBooleanvEXT") == 0) {
    if (__glintercept_fnptr_glGetLocalConstantBooleanvEXT == NULL) {
      __glintercept_fnptr_glGetLocalConstantBooleanvEXT = (__ctype_glGetLocalConstantBooleanvEXT) eglGetProcAddr("glGetLocalConstantBooleanvEXT");
    }
    if (__glintercept_fnptr_glGetLocalConstantBooleanvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetLocalConstantBooleanvEXT;
  }
  if (strcmp(name, "glGetLocalConstantFloatvEXT") == 0) {
    if (__glintercept_fnptr_glGetLocalConstantFloatvEXT == NULL) {
      __glintercept_fnptr_glGetLocalConstantFloatvEXT = (__ctype_glGetLocalConstantFloatvEXT) eglGetProcAddr("glGetLocalConstantFloatvEXT");
    }
    if (__glintercept_fnptr_glGetLocalConstantFloatvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetLocalConstantFloatvEXT;
  }
  if (strcmp(name, "glGetLocalConstantIntegervEXT") == 0) {
    if (__glintercept_fnptr_glGetLocalConstantIntegervEXT == NULL) {
      __glintercept_fnptr_glGetLocalConstantIntegervEXT = (__ctype_glGetLocalConstantIntegervEXT) eglGetProcAddr("glGetLocalConstantIntegervEXT");
    }
    if (__glintercept_fnptr_glGetLocalConstantIntegervEXT == NULL) return NULL;
    return (void*) __glintercept_glGetLocalConstantIntegervEXT;
  }
  if (strcmp(name, "glGetMapAttribParameterfvNV") == 0) {
    if (__glintercept_fnptr_glGetMapAttribParameterfvNV == NULL) {
      __glintercept_fnptr_glGetMapAttribParameterfvNV = (__ctype_glGetMapAttribParameterfvNV) eglGetProcAddr("glGetMapAttribParameterfvNV");
    }
    if (__glintercept_fnptr_glGetMapAttribParameterfvNV == NULL) return NULL;
    return (void*) __glintercept_glGetMapAttribParameterfvNV;
  }
  if (strcmp(name, "glGetMapAttribParameterivNV") == 0) {
    if (__glintercept_fnptr_glGetMapAttribParameterivNV == NULL) {
      __glintercept_fnptr_glGetMapAttribParameterivNV = (__ctype_glGetMapAttribParameterivNV) eglGetProcAddr("glGetMapAttribParameterivNV");
    }
    if (__glintercept_fnptr_glGetMapAttribParameterivNV == NULL) return NULL;
    return (void*) __glintercept_glGetMapAttribParameterivNV;
  }
  if (strcmp(name, "glGetMapControlPointsNV") == 0) {
    if (__glintercept_fnptr_glGetMapControlPointsNV == NULL) {
      __glintercept_fnptr_glGetMapControlPointsNV = (__ctype_glGetMapControlPointsNV) eglGetProcAddr("glGetMapControlPointsNV");
    }
    if (__glintercept_fnptr_glGetMapControlPointsNV == NULL) return NULL;
    return (void*) __glintercept_glGetMapControlPointsNV;
  }
  if (strcmp(name, "glGetMapParameterfvNV") == 0) {
    if (__glintercept_fnptr_glGetMapParameterfvNV == NULL) {
      __glintercept_fnptr_glGetMapParameterfvNV = (__ctype_glGetMapParameterfvNV) eglGetProcAddr("glGetMapParameterfvNV");
    }
    if (__glintercept_fnptr_glGetMapParameterfvNV == NULL) return NULL;
    return (void*) __glintercept_glGetMapParameterfvNV;
  }
  if (strcmp(name, "glGetMapParameterivNV") == 0) {
    if (__glintercept_fnptr_glGetMapParameterivNV == NULL) {
      __glintercept_fnptr_glGetMapParameterivNV = (__ctype_glGetMapParameterivNV) eglGetProcAddr("glGetMapParameterivNV");
    }
    if (__glintercept_fnptr_glGetMapParameterivNV == NULL) return NULL;
    return (void*) __glintercept_glGetMapParameterivNV;
  }
  if (strcmp(name, "glGetMapdv") == 0) {
    if (__glintercept_fnptr_glGetMapdv == NULL) {
      __glintercept_fnptr_glGetMapdv = (__ctype_glGetMapdv) eglGetProcAddr("glGetMapdv");
    }
    if (__glintercept_fnptr_glGetMapdv == NULL) return NULL;
    return (void*) __glintercept_glGetMapdv;
  }
  if (strcmp(name, "glGetMapfv") == 0) {
    if (__glintercept_fnptr_glGetMapfv == NULL) {
      __glintercept_fnptr_glGetMapfv = (__ctype_glGetMapfv) eglGetProcAddr("glGetMapfv");
    }
    if (__glintercept_fnptr_glGetMapfv == NULL) return NULL;
    return (void*) __glintercept_glGetMapfv;
  }
  if (strcmp(name, "glGetMapiv") == 0) {
    if (__glintercept_fnptr_glGetMapiv == NULL) {
      __glintercept_fnptr_glGetMapiv = (__ctype_glGetMapiv) eglGetProcAddr("glGetMapiv");
    }
    if (__glintercept_fnptr_glGetMapiv == NULL) return NULL;
    return (void*) __glintercept_glGetMapiv;
  }
  if (strcmp(name, "glGetMapxvOES") == 0) {
    if (__glintercept_fnptr_glGetMapxvOES == NULL) {
      __glintercept_fnptr_glGetMapxvOES = (__ctype_glGetMapxvOES) eglGetProcAddr("glGetMapxvOES");
    }
    if (__glintercept_fnptr_glGetMapxvOES == NULL) return NULL;
    return (void*) __glintercept_glGetMapxvOES;
  }
  if (strcmp(name, "glGetMaterialfv") == 0) {
    if (__glintercept_fnptr_glGetMaterialfv == NULL) {
      __glintercept_fnptr_glGetMaterialfv = (__ctype_glGetMaterialfv) eglGetProcAddr("glGetMaterialfv");
    }
    if (__glintercept_fnptr_glGetMaterialfv == NULL) return NULL;
    return (void*) __glintercept_glGetMaterialfv;
  }
  if (strcmp(name, "glGetMaterialiv") == 0) {
    if (__glintercept_fnptr_glGetMaterialiv == NULL) {
      __glintercept_fnptr_glGetMaterialiv = (__ctype_glGetMaterialiv) eglGetProcAddr("glGetMaterialiv");
    }
    if (__glintercept_fnptr_glGetMaterialiv == NULL) return NULL;
    return (void*) __glintercept_glGetMaterialiv;
  }
  if (strcmp(name, "glGetMaterialxOES") == 0) {
    if (__glintercept_fnptr_glGetMaterialxOES == NULL) {
      __glintercept_fnptr_glGetMaterialxOES = (__ctype_glGetMaterialxOES) eglGetProcAddr("glGetMaterialxOES");
    }
    if (__glintercept_fnptr_glGetMaterialxOES == NULL) return NULL;
    return (void*) __glintercept_glGetMaterialxOES;
  }
  if (strcmp(name, "glGetMaterialxv") == 0) {
    if (__glintercept_fnptr_glGetMaterialxv == NULL) {
      __glintercept_fnptr_glGetMaterialxv = (__ctype_glGetMaterialxv) eglGetProcAddr("glGetMaterialxv");
    }
    if (__glintercept_fnptr_glGetMaterialxv == NULL) return NULL;
    return (void*) __glintercept_glGetMaterialxv;
  }
  if (strcmp(name, "glGetMaterialxvOES") == 0) {
    if (__glintercept_fnptr_glGetMaterialxvOES == NULL) {
      __glintercept_fnptr_glGetMaterialxvOES = (__ctype_glGetMaterialxvOES) eglGetProcAddr("glGetMaterialxvOES");
    }
    if (__glintercept_fnptr_glGetMaterialxvOES == NULL) return NULL;
    return (void*) __glintercept_glGetMaterialxvOES;
  }
  if (strcmp(name, "glGetMemoryObjectDetachedResourcesuivNV") == 0) {
    if (__glintercept_fnptr_glGetMemoryObjectDetachedResourcesuivNV == NULL) {
      __glintercept_fnptr_glGetMemoryObjectDetachedResourcesuivNV = (__ctype_glGetMemoryObjectDetachedResourcesuivNV) eglGetProcAddr("glGetMemoryObjectDetachedResourcesuivNV");
    }
    if (__glintercept_fnptr_glGetMemoryObjectDetachedResourcesuivNV == NULL) return NULL;
    return (void*) __glintercept_glGetMemoryObjectDetachedResourcesuivNV;
  }
  if (strcmp(name, "glGetMemoryObjectParameterivEXT") == 0) {
    if (__glintercept_fnptr_glGetMemoryObjectParameterivEXT == NULL) {
      __glintercept_fnptr_glGetMemoryObjectParameterivEXT = (__ctype_glGetMemoryObjectParameterivEXT) eglGetProcAddr("glGetMemoryObjectParameterivEXT");
    }
    if (__glintercept_fnptr_glGetMemoryObjectParameterivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetMemoryObjectParameterivEXT;
  }
  if (strcmp(name, "glGetMinmax") == 0) {
    if (__glintercept_fnptr_glGetMinmax == NULL) {
      __glintercept_fnptr_glGetMinmax = (__ctype_glGetMinmax) eglGetProcAddr("glGetMinmax");
    }
    if (__glintercept_fnptr_glGetMinmax == NULL) return NULL;
    return (void*) __glintercept_glGetMinmax;
  }
  if (strcmp(name, "glGetMinmaxEXT") == 0) {
    if (__glintercept_fnptr_glGetMinmaxEXT == NULL) {
      __glintercept_fnptr_glGetMinmaxEXT = (__ctype_glGetMinmaxEXT) eglGetProcAddr("glGetMinmaxEXT");
    }
    if (__glintercept_fnptr_glGetMinmaxEXT == NULL) return NULL;
    return (void*) __glintercept_glGetMinmaxEXT;
  }
  if (strcmp(name, "glGetMinmaxParameterfv") == 0) {
    if (__glintercept_fnptr_glGetMinmaxParameterfv == NULL) {
      __glintercept_fnptr_glGetMinmaxParameterfv = (__ctype_glGetMinmaxParameterfv) eglGetProcAddr("glGetMinmaxParameterfv");
    }
    if (__glintercept_fnptr_glGetMinmaxParameterfv == NULL) return NULL;
    return (void*) __glintercept_glGetMinmaxParameterfv;
  }
  if (strcmp(name, "glGetMinmaxParameterfvEXT") == 0) {
    if (__glintercept_fnptr_glGetMinmaxParameterfvEXT == NULL) {
      __glintercept_fnptr_glGetMinmaxParameterfvEXT = (__ctype_glGetMinmaxParameterfvEXT) eglGetProcAddr("glGetMinmaxParameterfvEXT");
    }
    if (__glintercept_fnptr_glGetMinmaxParameterfvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetMinmaxParameterfvEXT;
  }
  if (strcmp(name, "glGetMinmaxParameteriv") == 0) {
    if (__glintercept_fnptr_glGetMinmaxParameteriv == NULL) {
      __glintercept_fnptr_glGetMinmaxParameteriv = (__ctype_glGetMinmaxParameteriv) eglGetProcAddr("glGetMinmaxParameteriv");
    }
    if (__glintercept_fnptr_glGetMinmaxParameteriv == NULL) return NULL;
    return (void*) __glintercept_glGetMinmaxParameteriv;
  }
  if (strcmp(name, "glGetMinmaxParameterivEXT") == 0) {
    if (__glintercept_fnptr_glGetMinmaxParameterivEXT == NULL) {
      __glintercept_fnptr_glGetMinmaxParameterivEXT = (__ctype_glGetMinmaxParameterivEXT) eglGetProcAddr("glGetMinmaxParameterivEXT");
    }
    if (__glintercept_fnptr_glGetMinmaxParameterivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetMinmaxParameterivEXT;
  }
  if (strcmp(name, "glGetMultiTexEnvfvEXT") == 0) {
    if (__glintercept_fnptr_glGetMultiTexEnvfvEXT == NULL) {
      __glintercept_fnptr_glGetMultiTexEnvfvEXT = (__ctype_glGetMultiTexEnvfvEXT) eglGetProcAddr("glGetMultiTexEnvfvEXT");
    }
    if (__glintercept_fnptr_glGetMultiTexEnvfvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetMultiTexEnvfvEXT;
  }
  if (strcmp(name, "glGetMultiTexEnvivEXT") == 0) {
    if (__glintercept_fnptr_glGetMultiTexEnvivEXT == NULL) {
      __glintercept_fnptr_glGetMultiTexEnvivEXT = (__ctype_glGetMultiTexEnvivEXT) eglGetProcAddr("glGetMultiTexEnvivEXT");
    }
    if (__glintercept_fnptr_glGetMultiTexEnvivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetMultiTexEnvivEXT;
  }
  if (strcmp(name, "glGetMultiTexGendvEXT") == 0) {
    if (__glintercept_fnptr_glGetMultiTexGendvEXT == NULL) {
      __glintercept_fnptr_glGetMultiTexGendvEXT = (__ctype_glGetMultiTexGendvEXT) eglGetProcAddr("glGetMultiTexGendvEXT");
    }
    if (__glintercept_fnptr_glGetMultiTexGendvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetMultiTexGendvEXT;
  }
  if (strcmp(name, "glGetMultiTexGenfvEXT") == 0) {
    if (__glintercept_fnptr_glGetMultiTexGenfvEXT == NULL) {
      __glintercept_fnptr_glGetMultiTexGenfvEXT = (__ctype_glGetMultiTexGenfvEXT) eglGetProcAddr("glGetMultiTexGenfvEXT");
    }
    if (__glintercept_fnptr_glGetMultiTexGenfvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetMultiTexGenfvEXT;
  }
  if (strcmp(name, "glGetMultiTexGenivEXT") == 0) {
    if (__glintercept_fnptr_glGetMultiTexGenivEXT == NULL) {
      __glintercept_fnptr_glGetMultiTexGenivEXT = (__ctype_glGetMultiTexGenivEXT) eglGetProcAddr("glGetMultiTexGenivEXT");
    }
    if (__glintercept_fnptr_glGetMultiTexGenivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetMultiTexGenivEXT;
  }
  if (strcmp(name, "glGetMultiTexImageEXT") == 0) {
    if (__glintercept_fnptr_glGetMultiTexImageEXT == NULL) {
      __glintercept_fnptr_glGetMultiTexImageEXT = (__ctype_glGetMultiTexImageEXT) eglGetProcAddr("glGetMultiTexImageEXT");
    }
    if (__glintercept_fnptr_glGetMultiTexImageEXT == NULL) return NULL;
    return (void*) __glintercept_glGetMultiTexImageEXT;
  }
  if (strcmp(name, "glGetMultiTexLevelParameterfvEXT") == 0) {
    if (__glintercept_fnptr_glGetMultiTexLevelParameterfvEXT == NULL) {
      __glintercept_fnptr_glGetMultiTexLevelParameterfvEXT = (__ctype_glGetMultiTexLevelParameterfvEXT) eglGetProcAddr("glGetMultiTexLevelParameterfvEXT");
    }
    if (__glintercept_fnptr_glGetMultiTexLevelParameterfvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetMultiTexLevelParameterfvEXT;
  }
  if (strcmp(name, "glGetMultiTexLevelParameterivEXT") == 0) {
    if (__glintercept_fnptr_glGetMultiTexLevelParameterivEXT == NULL) {
      __glintercept_fnptr_glGetMultiTexLevelParameterivEXT = (__ctype_glGetMultiTexLevelParameterivEXT) eglGetProcAddr("glGetMultiTexLevelParameterivEXT");
    }
    if (__glintercept_fnptr_glGetMultiTexLevelParameterivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetMultiTexLevelParameterivEXT;
  }
  if (strcmp(name, "glGetMultiTexParameterIivEXT") == 0) {
    if (__glintercept_fnptr_glGetMultiTexParameterIivEXT == NULL) {
      __glintercept_fnptr_glGetMultiTexParameterIivEXT = (__ctype_glGetMultiTexParameterIivEXT) eglGetProcAddr("glGetMultiTexParameterIivEXT");
    }
    if (__glintercept_fnptr_glGetMultiTexParameterIivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetMultiTexParameterIivEXT;
  }
  if (strcmp(name, "glGetMultiTexParameterIuivEXT") == 0) {
    if (__glintercept_fnptr_glGetMultiTexParameterIuivEXT == NULL) {
      __glintercept_fnptr_glGetMultiTexParameterIuivEXT = (__ctype_glGetMultiTexParameterIuivEXT) eglGetProcAddr("glGetMultiTexParameterIuivEXT");
    }
    if (__glintercept_fnptr_glGetMultiTexParameterIuivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetMultiTexParameterIuivEXT;
  }
  if (strcmp(name, "glGetMultiTexParameterfvEXT") == 0) {
    if (__glintercept_fnptr_glGetMultiTexParameterfvEXT == NULL) {
      __glintercept_fnptr_glGetMultiTexParameterfvEXT = (__ctype_glGetMultiTexParameterfvEXT) eglGetProcAddr("glGetMultiTexParameterfvEXT");
    }
    if (__glintercept_fnptr_glGetMultiTexParameterfvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetMultiTexParameterfvEXT;
  }
  if (strcmp(name, "glGetMultiTexParameterivEXT") == 0) {
    if (__glintercept_fnptr_glGetMultiTexParameterivEXT == NULL) {
      __glintercept_fnptr_glGetMultiTexParameterivEXT = (__ctype_glGetMultiTexParameterivEXT) eglGetProcAddr("glGetMultiTexParameterivEXT");
    }
    if (__glintercept_fnptr_glGetMultiTexParameterivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetMultiTexParameterivEXT;
  }
  if (strcmp(name, "glGetMultisamplefv") == 0) {
    if (__glintercept_fnptr_glGetMultisamplefv == NULL) {
      __glintercept_fnptr_glGetMultisamplefv = (__ctype_glGetMultisamplefv) eglGetProcAddr("glGetMultisamplefv");
    }
    if (__glintercept_fnptr_glGetMultisamplefv == NULL) return NULL;
    return (void*) __glintercept_glGetMultisamplefv;
  }
  if (strcmp(name, "glGetMultisamplefvNV") == 0) {
    if (__glintercept_fnptr_glGetMultisamplefvNV == NULL) {
      __glintercept_fnptr_glGetMultisamplefvNV = (__ctype_glGetMultisamplefvNV) eglGetProcAddr("glGetMultisamplefvNV");
    }
    if (__glintercept_fnptr_glGetMultisamplefvNV == NULL) return NULL;
    return (void*) __glintercept_glGetMultisamplefvNV;
  }
  if (strcmp(name, "glGetNamedBufferParameteri64v") == 0) {
    if (__glintercept_fnptr_glGetNamedBufferParameteri64v == NULL) {
      __glintercept_fnptr_glGetNamedBufferParameteri64v = (__ctype_glGetNamedBufferParameteri64v) eglGetProcAddr("glGetNamedBufferParameteri64v");
    }
    if (__glintercept_fnptr_glGetNamedBufferParameteri64v == NULL) return NULL;
    return (void*) __glintercept_glGetNamedBufferParameteri64v;
  }
  if (strcmp(name, "glGetNamedBufferParameteriv") == 0) {
    if (__glintercept_fnptr_glGetNamedBufferParameteriv == NULL) {
      __glintercept_fnptr_glGetNamedBufferParameteriv = (__ctype_glGetNamedBufferParameteriv) eglGetProcAddr("glGetNamedBufferParameteriv");
    }
    if (__glintercept_fnptr_glGetNamedBufferParameteriv == NULL) return NULL;
    return (void*) __glintercept_glGetNamedBufferParameteriv;
  }
  if (strcmp(name, "glGetNamedBufferParameterivEXT") == 0) {
    if (__glintercept_fnptr_glGetNamedBufferParameterivEXT == NULL) {
      __glintercept_fnptr_glGetNamedBufferParameterivEXT = (__ctype_glGetNamedBufferParameterivEXT) eglGetProcAddr("glGetNamedBufferParameterivEXT");
    }
    if (__glintercept_fnptr_glGetNamedBufferParameterivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetNamedBufferParameterivEXT;
  }
  if (strcmp(name, "glGetNamedBufferParameterui64vNV") == 0) {
    if (__glintercept_fnptr_glGetNamedBufferParameterui64vNV == NULL) {
      __glintercept_fnptr_glGetNamedBufferParameterui64vNV = (__ctype_glGetNamedBufferParameterui64vNV) eglGetProcAddr("glGetNamedBufferParameterui64vNV");
    }
    if (__glintercept_fnptr_glGetNamedBufferParameterui64vNV == NULL) return NULL;
    return (void*) __glintercept_glGetNamedBufferParameterui64vNV;
  }
  if (strcmp(name, "glGetNamedBufferPointerv") == 0) {
    if (__glintercept_fnptr_glGetNamedBufferPointerv == NULL) {
      __glintercept_fnptr_glGetNamedBufferPointerv = (__ctype_glGetNamedBufferPointerv) eglGetProcAddr("glGetNamedBufferPointerv");
    }
    if (__glintercept_fnptr_glGetNamedBufferPointerv == NULL) return NULL;
    return (void*) __glintercept_glGetNamedBufferPointerv;
  }
  if (strcmp(name, "glGetNamedBufferPointervEXT") == 0) {
    if (__glintercept_fnptr_glGetNamedBufferPointervEXT == NULL) {
      __glintercept_fnptr_glGetNamedBufferPointervEXT = (__ctype_glGetNamedBufferPointervEXT) eglGetProcAddr("glGetNamedBufferPointervEXT");
    }
    if (__glintercept_fnptr_glGetNamedBufferPointervEXT == NULL) return NULL;
    return (void*) __glintercept_glGetNamedBufferPointervEXT;
  }
  if (strcmp(name, "glGetNamedBufferSubData") == 0) {
    if (__glintercept_fnptr_glGetNamedBufferSubData == NULL) {
      __glintercept_fnptr_glGetNamedBufferSubData = (__ctype_glGetNamedBufferSubData) eglGetProcAddr("glGetNamedBufferSubData");
    }
    if (__glintercept_fnptr_glGetNamedBufferSubData == NULL) return NULL;
    return (void*) __glintercept_glGetNamedBufferSubData;
  }
  if (strcmp(name, "glGetNamedBufferSubDataEXT") == 0) {
    if (__glintercept_fnptr_glGetNamedBufferSubDataEXT == NULL) {
      __glintercept_fnptr_glGetNamedBufferSubDataEXT = (__ctype_glGetNamedBufferSubDataEXT) eglGetProcAddr("glGetNamedBufferSubDataEXT");
    }
    if (__glintercept_fnptr_glGetNamedBufferSubDataEXT == NULL) return NULL;
    return (void*) __glintercept_glGetNamedBufferSubDataEXT;
  }
  if (strcmp(name, "glGetNamedFramebufferParameterfvAMD") == 0) {
    if (__glintercept_fnptr_glGetNamedFramebufferParameterfvAMD == NULL) {
      __glintercept_fnptr_glGetNamedFramebufferParameterfvAMD = (__ctype_glGetNamedFramebufferParameterfvAMD) eglGetProcAddr("glGetNamedFramebufferParameterfvAMD");
    }
    if (__glintercept_fnptr_glGetNamedFramebufferParameterfvAMD == NULL) return NULL;
    return (void*) __glintercept_glGetNamedFramebufferParameterfvAMD;
  }
  if (strcmp(name, "glGetNamedFramebufferAttachmentParameteriv") == 0) {
    if (__glintercept_fnptr_glGetNamedFramebufferAttachmentParameteriv == NULL) {
      __glintercept_fnptr_glGetNamedFramebufferAttachmentParameteriv = (__ctype_glGetNamedFramebufferAttachmentParameteriv) eglGetProcAddr("glGetNamedFramebufferAttachmentParameteriv");
    }
    if (__glintercept_fnptr_glGetNamedFramebufferAttachmentParameteriv == NULL) return NULL;
    return (void*) __glintercept_glGetNamedFramebufferAttachmentParameteriv;
  }
  if (strcmp(name, "glGetNamedFramebufferAttachmentParameterivEXT") == 0) {
    if (__glintercept_fnptr_glGetNamedFramebufferAttachmentParameterivEXT == NULL) {
      __glintercept_fnptr_glGetNamedFramebufferAttachmentParameterivEXT = (__ctype_glGetNamedFramebufferAttachmentParameterivEXT) eglGetProcAddr("glGetNamedFramebufferAttachmentParameterivEXT");
    }
    if (__glintercept_fnptr_glGetNamedFramebufferAttachmentParameterivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetNamedFramebufferAttachmentParameterivEXT;
  }
  if (strcmp(name, "glGetNamedFramebufferParameteriv") == 0) {
    if (__glintercept_fnptr_glGetNamedFramebufferParameteriv == NULL) {
      __glintercept_fnptr_glGetNamedFramebufferParameteriv = (__ctype_glGetNamedFramebufferParameteriv) eglGetProcAddr("glGetNamedFramebufferParameteriv");
    }
    if (__glintercept_fnptr_glGetNamedFramebufferParameteriv == NULL) return NULL;
    return (void*) __glintercept_glGetNamedFramebufferParameteriv;
  }
  if (strcmp(name, "glGetNamedFramebufferParameterivEXT") == 0) {
    if (__glintercept_fnptr_glGetNamedFramebufferParameterivEXT == NULL) {
      __glintercept_fnptr_glGetNamedFramebufferParameterivEXT = (__ctype_glGetNamedFramebufferParameterivEXT) eglGetProcAddr("glGetNamedFramebufferParameterivEXT");
    }
    if (__glintercept_fnptr_glGetNamedFramebufferParameterivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetNamedFramebufferParameterivEXT;
  }
  if (strcmp(name, "glGetNamedProgramLocalParameterIivEXT") == 0) {
    if (__glintercept_fnptr_glGetNamedProgramLocalParameterIivEXT == NULL) {
      __glintercept_fnptr_glGetNamedProgramLocalParameterIivEXT = (__ctype_glGetNamedProgramLocalParameterIivEXT) eglGetProcAddr("glGetNamedProgramLocalParameterIivEXT");
    }
    if (__glintercept_fnptr_glGetNamedProgramLocalParameterIivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetNamedProgramLocalParameterIivEXT;
  }
  if (strcmp(name, "glGetNamedProgramLocalParameterIuivEXT") == 0) {
    if (__glintercept_fnptr_glGetNamedProgramLocalParameterIuivEXT == NULL) {
      __glintercept_fnptr_glGetNamedProgramLocalParameterIuivEXT = (__ctype_glGetNamedProgramLocalParameterIuivEXT) eglGetProcAddr("glGetNamedProgramLocalParameterIuivEXT");
    }
    if (__glintercept_fnptr_glGetNamedProgramLocalParameterIuivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetNamedProgramLocalParameterIuivEXT;
  }
  if (strcmp(name, "glGetNamedProgramLocalParameterdvEXT") == 0) {
    if (__glintercept_fnptr_glGetNamedProgramLocalParameterdvEXT == NULL) {
      __glintercept_fnptr_glGetNamedProgramLocalParameterdvEXT = (__ctype_glGetNamedProgramLocalParameterdvEXT) eglGetProcAddr("glGetNamedProgramLocalParameterdvEXT");
    }
    if (__glintercept_fnptr_glGetNamedProgramLocalParameterdvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetNamedProgramLocalParameterdvEXT;
  }
  if (strcmp(name, "glGetNamedProgramLocalParameterfvEXT") == 0) {
    if (__glintercept_fnptr_glGetNamedProgramLocalParameterfvEXT == NULL) {
      __glintercept_fnptr_glGetNamedProgramLocalParameterfvEXT = (__ctype_glGetNamedProgramLocalParameterfvEXT) eglGetProcAddr("glGetNamedProgramLocalParameterfvEXT");
    }
    if (__glintercept_fnptr_glGetNamedProgramLocalParameterfvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetNamedProgramLocalParameterfvEXT;
  }
  if (strcmp(name, "glGetNamedProgramStringEXT") == 0) {
    if (__glintercept_fnptr_glGetNamedProgramStringEXT == NULL) {
      __glintercept_fnptr_glGetNamedProgramStringEXT = (__ctype_glGetNamedProgramStringEXT) eglGetProcAddr("glGetNamedProgramStringEXT");
    }
    if (__glintercept_fnptr_glGetNamedProgramStringEXT == NULL) return NULL;
    return (void*) __glintercept_glGetNamedProgramStringEXT;
  }
  if (strcmp(name, "glGetNamedProgramivEXT") == 0) {
    if (__glintercept_fnptr_glGetNamedProgramivEXT == NULL) {
      __glintercept_fnptr_glGetNamedProgramivEXT = (__ctype_glGetNamedProgramivEXT) eglGetProcAddr("glGetNamedProgramivEXT");
    }
    if (__glintercept_fnptr_glGetNamedProgramivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetNamedProgramivEXT;
  }
  if (strcmp(name, "glGetNamedRenderbufferParameteriv") == 0) {
    if (__glintercept_fnptr_glGetNamedRenderbufferParameteriv == NULL) {
      __glintercept_fnptr_glGetNamedRenderbufferParameteriv = (__ctype_glGetNamedRenderbufferParameteriv) eglGetProcAddr("glGetNamedRenderbufferParameteriv");
    }
    if (__glintercept_fnptr_glGetNamedRenderbufferParameteriv == NULL) return NULL;
    return (void*) __glintercept_glGetNamedRenderbufferParameteriv;
  }
  if (strcmp(name, "glGetNamedRenderbufferParameterivEXT") == 0) {
    if (__glintercept_fnptr_glGetNamedRenderbufferParameterivEXT == NULL) {
      __glintercept_fnptr_glGetNamedRenderbufferParameterivEXT = (__ctype_glGetNamedRenderbufferParameterivEXT) eglGetProcAddr("glGetNamedRenderbufferParameterivEXT");
    }
    if (__glintercept_fnptr_glGetNamedRenderbufferParameterivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetNamedRenderbufferParameterivEXT;
  }
  if (strcmp(name, "glGetNamedStringARB") == 0) {
    if (__glintercept_fnptr_glGetNamedStringARB == NULL) {
      __glintercept_fnptr_glGetNamedStringARB = (__ctype_glGetNamedStringARB) eglGetProcAddr("glGetNamedStringARB");
    }
    if (__glintercept_fnptr_glGetNamedStringARB == NULL) return NULL;
    return (void*) __glintercept_glGetNamedStringARB;
  }
  if (strcmp(name, "glGetNamedStringivARB") == 0) {
    if (__glintercept_fnptr_glGetNamedStringivARB == NULL) {
      __glintercept_fnptr_glGetNamedStringivARB = (__ctype_glGetNamedStringivARB) eglGetProcAddr("glGetNamedStringivARB");
    }
    if (__glintercept_fnptr_glGetNamedStringivARB == NULL) return NULL;
    return (void*) __glintercept_glGetNamedStringivARB;
  }
  if (strcmp(name, "glGetNextPerfQueryIdINTEL") == 0) {
    if (__glintercept_fnptr_glGetNextPerfQueryIdINTEL == NULL) {
      __glintercept_fnptr_glGetNextPerfQueryIdINTEL = (__ctype_glGetNextPerfQueryIdINTEL) eglGetProcAddr("glGetNextPerfQueryIdINTEL");
    }
    if (__glintercept_fnptr_glGetNextPerfQueryIdINTEL == NULL) return NULL;
    return (void*) __glintercept_glGetNextPerfQueryIdINTEL;
  }
  if (strcmp(name, "glGetObjectBufferfvATI") == 0) {
    if (__glintercept_fnptr_glGetObjectBufferfvATI == NULL) {
      __glintercept_fnptr_glGetObjectBufferfvATI = (__ctype_glGetObjectBufferfvATI) eglGetProcAddr("glGetObjectBufferfvATI");
    }
    if (__glintercept_fnptr_glGetObjectBufferfvATI == NULL) return NULL;
    return (void*) __glintercept_glGetObjectBufferfvATI;
  }
  if (strcmp(name, "glGetObjectBufferivATI") == 0) {
    if (__glintercept_fnptr_glGetObjectBufferivATI == NULL) {
      __glintercept_fnptr_glGetObjectBufferivATI = (__ctype_glGetObjectBufferivATI) eglGetProcAddr("glGetObjectBufferivATI");
    }
    if (__glintercept_fnptr_glGetObjectBufferivATI == NULL) return NULL;
    return (void*) __glintercept_glGetObjectBufferivATI;
  }
  if (strcmp(name, "glGetObjectLabel") == 0) {
    if (__glintercept_fnptr_glGetObjectLabel == NULL) {
      __glintercept_fnptr_glGetObjectLabel = (__ctype_glGetObjectLabel) eglGetProcAddr("glGetObjectLabel");
    }
    if (__glintercept_fnptr_glGetObjectLabel == NULL) return NULL;
    return (void*) __glintercept_glGetObjectLabel;
  }
  if (strcmp(name, "glGetObjectLabelEXT") == 0) {
    if (__glintercept_fnptr_glGetObjectLabelEXT == NULL) {
      __glintercept_fnptr_glGetObjectLabelEXT = (__ctype_glGetObjectLabelEXT) eglGetProcAddr("glGetObjectLabelEXT");
    }
    if (__glintercept_fnptr_glGetObjectLabelEXT == NULL) return NULL;
    return (void*) __glintercept_glGetObjectLabelEXT;
  }
  if (strcmp(name, "glGetObjectLabelKHR") == 0) {
    if (__glintercept_fnptr_glGetObjectLabelKHR == NULL) {
      __glintercept_fnptr_glGetObjectLabelKHR = (__ctype_glGetObjectLabelKHR) eglGetProcAddr("glGetObjectLabelKHR");
    }
    if (__glintercept_fnptr_glGetObjectLabelKHR == NULL) return NULL;
    return (void*) __glintercept_glGetObjectLabelKHR;
  }
  if (strcmp(name, "glGetObjectParameterfvARB") == 0) {
    if (__glintercept_fnptr_glGetObjectParameterfvARB == NULL) {
      __glintercept_fnptr_glGetObjectParameterfvARB = (__ctype_glGetObjectParameterfvARB) eglGetProcAddr("glGetObjectParameterfvARB");
    }
    if (__glintercept_fnptr_glGetObjectParameterfvARB == NULL) return NULL;
    return (void*) __glintercept_glGetObjectParameterfvARB;
  }
  if (strcmp(name, "glGetObjectParameterivAPPLE") == 0) {
    if (__glintercept_fnptr_glGetObjectParameterivAPPLE == NULL) {
      __glintercept_fnptr_glGetObjectParameterivAPPLE = (__ctype_glGetObjectParameterivAPPLE) eglGetProcAddr("glGetObjectParameterivAPPLE");
    }
    if (__glintercept_fnptr_glGetObjectParameterivAPPLE == NULL) return NULL;
    return (void*) __glintercept_glGetObjectParameterivAPPLE;
  }
  if (strcmp(name, "glGetObjectParameterivARB") == 0) {
    if (__glintercept_fnptr_glGetObjectParameterivARB == NULL) {
      __glintercept_fnptr_glGetObjectParameterivARB = (__ctype_glGetObjectParameterivARB) eglGetProcAddr("glGetObjectParameterivARB");
    }
    if (__glintercept_fnptr_glGetObjectParameterivARB == NULL) return NULL;
    return (void*) __glintercept_glGetObjectParameterivARB;
  }
  if (strcmp(name, "glGetObjectPtrLabel") == 0) {
    if (__glintercept_fnptr_glGetObjectPtrLabel == NULL) {
      __glintercept_fnptr_glGetObjectPtrLabel = (__ctype_glGetObjectPtrLabel) eglGetProcAddr("glGetObjectPtrLabel");
    }
    if (__glintercept_fnptr_glGetObjectPtrLabel == NULL) return NULL;
    return (void*) __glintercept_glGetObjectPtrLabel;
  }
  if (strcmp(name, "glGetObjectPtrLabelKHR") == 0) {
    if (__glintercept_fnptr_glGetObjectPtrLabelKHR == NULL) {
      __glintercept_fnptr_glGetObjectPtrLabelKHR = (__ctype_glGetObjectPtrLabelKHR) eglGetProcAddr("glGetObjectPtrLabelKHR");
    }
    if (__glintercept_fnptr_glGetObjectPtrLabelKHR == NULL) return NULL;
    return (void*) __glintercept_glGetObjectPtrLabelKHR;
  }
  if (strcmp(name, "glGetOcclusionQueryivNV") == 0) {
    if (__glintercept_fnptr_glGetOcclusionQueryivNV == NULL) {
      __glintercept_fnptr_glGetOcclusionQueryivNV = (__ctype_glGetOcclusionQueryivNV) eglGetProcAddr("glGetOcclusionQueryivNV");
    }
    if (__glintercept_fnptr_glGetOcclusionQueryivNV == NULL) return NULL;
    return (void*) __glintercept_glGetOcclusionQueryivNV;
  }
  if (strcmp(name, "glGetOcclusionQueryuivNV") == 0) {
    if (__glintercept_fnptr_glGetOcclusionQueryuivNV == NULL) {
      __glintercept_fnptr_glGetOcclusionQueryuivNV = (__ctype_glGetOcclusionQueryuivNV) eglGetProcAddr("glGetOcclusionQueryuivNV");
    }
    if (__glintercept_fnptr_glGetOcclusionQueryuivNV == NULL) return NULL;
    return (void*) __glintercept_glGetOcclusionQueryuivNV;
  }
  if (strcmp(name, "glGetPathColorGenfvNV") == 0) {
    if (__glintercept_fnptr_glGetPathColorGenfvNV == NULL) {
      __glintercept_fnptr_glGetPathColorGenfvNV = (__ctype_glGetPathColorGenfvNV) eglGetProcAddr("glGetPathColorGenfvNV");
    }
    if (__glintercept_fnptr_glGetPathColorGenfvNV == NULL) return NULL;
    return (void*) __glintercept_glGetPathColorGenfvNV;
  }
  if (strcmp(name, "glGetPathColorGenivNV") == 0) {
    if (__glintercept_fnptr_glGetPathColorGenivNV == NULL) {
      __glintercept_fnptr_glGetPathColorGenivNV = (__ctype_glGetPathColorGenivNV) eglGetProcAddr("glGetPathColorGenivNV");
    }
    if (__glintercept_fnptr_glGetPathColorGenivNV == NULL) return NULL;
    return (void*) __glintercept_glGetPathColorGenivNV;
  }
  if (strcmp(name, "glGetPathCommandsNV") == 0) {
    if (__glintercept_fnptr_glGetPathCommandsNV == NULL) {
      __glintercept_fnptr_glGetPathCommandsNV = (__ctype_glGetPathCommandsNV) eglGetProcAddr("glGetPathCommandsNV");
    }
    if (__glintercept_fnptr_glGetPathCommandsNV == NULL) return NULL;
    return (void*) __glintercept_glGetPathCommandsNV;
  }
  if (strcmp(name, "glGetPathCoordsNV") == 0) {
    if (__glintercept_fnptr_glGetPathCoordsNV == NULL) {
      __glintercept_fnptr_glGetPathCoordsNV = (__ctype_glGetPathCoordsNV) eglGetProcAddr("glGetPathCoordsNV");
    }
    if (__glintercept_fnptr_glGetPathCoordsNV == NULL) return NULL;
    return (void*) __glintercept_glGetPathCoordsNV;
  }
  if (strcmp(name, "glGetPathDashArrayNV") == 0) {
    if (__glintercept_fnptr_glGetPathDashArrayNV == NULL) {
      __glintercept_fnptr_glGetPathDashArrayNV = (__ctype_glGetPathDashArrayNV) eglGetProcAddr("glGetPathDashArrayNV");
    }
    if (__glintercept_fnptr_glGetPathDashArrayNV == NULL) return NULL;
    return (void*) __glintercept_glGetPathDashArrayNV;
  }
  if (strcmp(name, "glGetPathLengthNV") == 0) {
    if (__glintercept_fnptr_glGetPathLengthNV == NULL) {
      __glintercept_fnptr_glGetPathLengthNV = (__ctype_glGetPathLengthNV) eglGetProcAddr("glGetPathLengthNV");
    }
    if (__glintercept_fnptr_glGetPathLengthNV == NULL) return NULL;
    return (void*) __glintercept_glGetPathLengthNV;
  }
  if (strcmp(name, "glGetPathMetricRangeNV") == 0) {
    if (__glintercept_fnptr_glGetPathMetricRangeNV == NULL) {
      __glintercept_fnptr_glGetPathMetricRangeNV = (__ctype_glGetPathMetricRangeNV) eglGetProcAddr("glGetPathMetricRangeNV");
    }
    if (__glintercept_fnptr_glGetPathMetricRangeNV == NULL) return NULL;
    return (void*) __glintercept_glGetPathMetricRangeNV;
  }
  if (strcmp(name, "glGetPathMetricsNV") == 0) {
    if (__glintercept_fnptr_glGetPathMetricsNV == NULL) {
      __glintercept_fnptr_glGetPathMetricsNV = (__ctype_glGetPathMetricsNV) eglGetProcAddr("glGetPathMetricsNV");
    }
    if (__glintercept_fnptr_glGetPathMetricsNV == NULL) return NULL;
    return (void*) __glintercept_glGetPathMetricsNV;
  }
  if (strcmp(name, "glGetPathParameterfvNV") == 0) {
    if (__glintercept_fnptr_glGetPathParameterfvNV == NULL) {
      __glintercept_fnptr_glGetPathParameterfvNV = (__ctype_glGetPathParameterfvNV) eglGetProcAddr("glGetPathParameterfvNV");
    }
    if (__glintercept_fnptr_glGetPathParameterfvNV == NULL) return NULL;
    return (void*) __glintercept_glGetPathParameterfvNV;
  }
  if (strcmp(name, "glGetPathParameterivNV") == 0) {
    if (__glintercept_fnptr_glGetPathParameterivNV == NULL) {
      __glintercept_fnptr_glGetPathParameterivNV = (__ctype_glGetPathParameterivNV) eglGetProcAddr("glGetPathParameterivNV");
    }
    if (__glintercept_fnptr_glGetPathParameterivNV == NULL) return NULL;
    return (void*) __glintercept_glGetPathParameterivNV;
  }
  if (strcmp(name, "glGetPathSpacingNV") == 0) {
    if (__glintercept_fnptr_glGetPathSpacingNV == NULL) {
      __glintercept_fnptr_glGetPathSpacingNV = (__ctype_glGetPathSpacingNV) eglGetProcAddr("glGetPathSpacingNV");
    }
    if (__glintercept_fnptr_glGetPathSpacingNV == NULL) return NULL;
    return (void*) __glintercept_glGetPathSpacingNV;
  }
  if (strcmp(name, "glGetPathTexGenfvNV") == 0) {
    if (__glintercept_fnptr_glGetPathTexGenfvNV == NULL) {
      __glintercept_fnptr_glGetPathTexGenfvNV = (__ctype_glGetPathTexGenfvNV) eglGetProcAddr("glGetPathTexGenfvNV");
    }
    if (__glintercept_fnptr_glGetPathTexGenfvNV == NULL) return NULL;
    return (void*) __glintercept_glGetPathTexGenfvNV;
  }
  if (strcmp(name, "glGetPathTexGenivNV") == 0) {
    if (__glintercept_fnptr_glGetPathTexGenivNV == NULL) {
      __glintercept_fnptr_glGetPathTexGenivNV = (__ctype_glGetPathTexGenivNV) eglGetProcAddr("glGetPathTexGenivNV");
    }
    if (__glintercept_fnptr_glGetPathTexGenivNV == NULL) return NULL;
    return (void*) __glintercept_glGetPathTexGenivNV;
  }
  if (strcmp(name, "glGetPerfCounterInfoINTEL") == 0) {
    if (__glintercept_fnptr_glGetPerfCounterInfoINTEL == NULL) {
      __glintercept_fnptr_glGetPerfCounterInfoINTEL = (__ctype_glGetPerfCounterInfoINTEL) eglGetProcAddr("glGetPerfCounterInfoINTEL");
    }
    if (__glintercept_fnptr_glGetPerfCounterInfoINTEL == NULL) return NULL;
    return (void*) __glintercept_glGetPerfCounterInfoINTEL;
  }
  if (strcmp(name, "glGetPerfMonitorCounterDataAMD") == 0) {
    if (__glintercept_fnptr_glGetPerfMonitorCounterDataAMD == NULL) {
      __glintercept_fnptr_glGetPerfMonitorCounterDataAMD = (__ctype_glGetPerfMonitorCounterDataAMD) eglGetProcAddr("glGetPerfMonitorCounterDataAMD");
    }
    if (__glintercept_fnptr_glGetPerfMonitorCounterDataAMD == NULL) return NULL;
    return (void*) __glintercept_glGetPerfMonitorCounterDataAMD;
  }
  if (strcmp(name, "glGetPerfMonitorCounterInfoAMD") == 0) {
    if (__glintercept_fnptr_glGetPerfMonitorCounterInfoAMD == NULL) {
      __glintercept_fnptr_glGetPerfMonitorCounterInfoAMD = (__ctype_glGetPerfMonitorCounterInfoAMD) eglGetProcAddr("glGetPerfMonitorCounterInfoAMD");
    }
    if (__glintercept_fnptr_glGetPerfMonitorCounterInfoAMD == NULL) return NULL;
    return (void*) __glintercept_glGetPerfMonitorCounterInfoAMD;
  }
  if (strcmp(name, "glGetPerfMonitorCounterStringAMD") == 0) {
    if (__glintercept_fnptr_glGetPerfMonitorCounterStringAMD == NULL) {
      __glintercept_fnptr_glGetPerfMonitorCounterStringAMD = (__ctype_glGetPerfMonitorCounterStringAMD) eglGetProcAddr("glGetPerfMonitorCounterStringAMD");
    }
    if (__glintercept_fnptr_glGetPerfMonitorCounterStringAMD == NULL) return NULL;
    return (void*) __glintercept_glGetPerfMonitorCounterStringAMD;
  }
  if (strcmp(name, "glGetPerfMonitorCountersAMD") == 0) {
    if (__glintercept_fnptr_glGetPerfMonitorCountersAMD == NULL) {
      __glintercept_fnptr_glGetPerfMonitorCountersAMD = (__ctype_glGetPerfMonitorCountersAMD) eglGetProcAddr("glGetPerfMonitorCountersAMD");
    }
    if (__glintercept_fnptr_glGetPerfMonitorCountersAMD == NULL) return NULL;
    return (void*) __glintercept_glGetPerfMonitorCountersAMD;
  }
  if (strcmp(name, "glGetPerfMonitorGroupStringAMD") == 0) {
    if (__glintercept_fnptr_glGetPerfMonitorGroupStringAMD == NULL) {
      __glintercept_fnptr_glGetPerfMonitorGroupStringAMD = (__ctype_glGetPerfMonitorGroupStringAMD) eglGetProcAddr("glGetPerfMonitorGroupStringAMD");
    }
    if (__glintercept_fnptr_glGetPerfMonitorGroupStringAMD == NULL) return NULL;
    return (void*) __glintercept_glGetPerfMonitorGroupStringAMD;
  }
  if (strcmp(name, "glGetPerfMonitorGroupsAMD") == 0) {
    if (__glintercept_fnptr_glGetPerfMonitorGroupsAMD == NULL) {
      __glintercept_fnptr_glGetPerfMonitorGroupsAMD = (__ctype_glGetPerfMonitorGroupsAMD) eglGetProcAddr("glGetPerfMonitorGroupsAMD");
    }
    if (__glintercept_fnptr_glGetPerfMonitorGroupsAMD == NULL) return NULL;
    return (void*) __glintercept_glGetPerfMonitorGroupsAMD;
  }
  if (strcmp(name, "glGetPerfQueryDataINTEL") == 0) {
    if (__glintercept_fnptr_glGetPerfQueryDataINTEL == NULL) {
      __glintercept_fnptr_glGetPerfQueryDataINTEL = (__ctype_glGetPerfQueryDataINTEL) eglGetProcAddr("glGetPerfQueryDataINTEL");
    }
    if (__glintercept_fnptr_glGetPerfQueryDataINTEL == NULL) return NULL;
    return (void*) __glintercept_glGetPerfQueryDataINTEL;
  }
  if (strcmp(name, "glGetPerfQueryIdByNameINTEL") == 0) {
    if (__glintercept_fnptr_glGetPerfQueryIdByNameINTEL == NULL) {
      __glintercept_fnptr_glGetPerfQueryIdByNameINTEL = (__ctype_glGetPerfQueryIdByNameINTEL) eglGetProcAddr("glGetPerfQueryIdByNameINTEL");
    }
    if (__glintercept_fnptr_glGetPerfQueryIdByNameINTEL == NULL) return NULL;
    return (void*) __glintercept_glGetPerfQueryIdByNameINTEL;
  }
  if (strcmp(name, "glGetPerfQueryInfoINTEL") == 0) {
    if (__glintercept_fnptr_glGetPerfQueryInfoINTEL == NULL) {
      __glintercept_fnptr_glGetPerfQueryInfoINTEL = (__ctype_glGetPerfQueryInfoINTEL) eglGetProcAddr("glGetPerfQueryInfoINTEL");
    }
    if (__glintercept_fnptr_glGetPerfQueryInfoINTEL == NULL) return NULL;
    return (void*) __glintercept_glGetPerfQueryInfoINTEL;
  }
  if (strcmp(name, "glGetPixelMapfv") == 0) {
    if (__glintercept_fnptr_glGetPixelMapfv == NULL) {
      __glintercept_fnptr_glGetPixelMapfv = (__ctype_glGetPixelMapfv) eglGetProcAddr("glGetPixelMapfv");
    }
    if (__glintercept_fnptr_glGetPixelMapfv == NULL) return NULL;
    return (void*) __glintercept_glGetPixelMapfv;
  }
  if (strcmp(name, "glGetPixelMapuiv") == 0) {
    if (__glintercept_fnptr_glGetPixelMapuiv == NULL) {
      __glintercept_fnptr_glGetPixelMapuiv = (__ctype_glGetPixelMapuiv) eglGetProcAddr("glGetPixelMapuiv");
    }
    if (__glintercept_fnptr_glGetPixelMapuiv == NULL) return NULL;
    return (void*) __glintercept_glGetPixelMapuiv;
  }
  if (strcmp(name, "glGetPixelMapusv") == 0) {
    if (__glintercept_fnptr_glGetPixelMapusv == NULL) {
      __glintercept_fnptr_glGetPixelMapusv = (__ctype_glGetPixelMapusv) eglGetProcAddr("glGetPixelMapusv");
    }
    if (__glintercept_fnptr_glGetPixelMapusv == NULL) return NULL;
    return (void*) __glintercept_glGetPixelMapusv;
  }
  if (strcmp(name, "glGetPixelMapxv") == 0) {
    if (__glintercept_fnptr_glGetPixelMapxv == NULL) {
      __glintercept_fnptr_glGetPixelMapxv = (__ctype_glGetPixelMapxv) eglGetProcAddr("glGetPixelMapxv");
    }
    if (__glintercept_fnptr_glGetPixelMapxv == NULL) return NULL;
    return (void*) __glintercept_glGetPixelMapxv;
  }
  if (strcmp(name, "glGetPixelTexGenParameterfvSGIS") == 0) {
    if (__glintercept_fnptr_glGetPixelTexGenParameterfvSGIS == NULL) {
      __glintercept_fnptr_glGetPixelTexGenParameterfvSGIS = (__ctype_glGetPixelTexGenParameterfvSGIS) eglGetProcAddr("glGetPixelTexGenParameterfvSGIS");
    }
    if (__glintercept_fnptr_glGetPixelTexGenParameterfvSGIS == NULL) return NULL;
    return (void*) __glintercept_glGetPixelTexGenParameterfvSGIS;
  }
  if (strcmp(name, "glGetPixelTexGenParameterivSGIS") == 0) {
    if (__glintercept_fnptr_glGetPixelTexGenParameterivSGIS == NULL) {
      __glintercept_fnptr_glGetPixelTexGenParameterivSGIS = (__ctype_glGetPixelTexGenParameterivSGIS) eglGetProcAddr("glGetPixelTexGenParameterivSGIS");
    }
    if (__glintercept_fnptr_glGetPixelTexGenParameterivSGIS == NULL) return NULL;
    return (void*) __glintercept_glGetPixelTexGenParameterivSGIS;
  }
  if (strcmp(name, "glGetPixelTransformParameterfvEXT") == 0) {
    if (__glintercept_fnptr_glGetPixelTransformParameterfvEXT == NULL) {
      __glintercept_fnptr_glGetPixelTransformParameterfvEXT = (__ctype_glGetPixelTransformParameterfvEXT) eglGetProcAddr("glGetPixelTransformParameterfvEXT");
    }
    if (__glintercept_fnptr_glGetPixelTransformParameterfvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetPixelTransformParameterfvEXT;
  }
  if (strcmp(name, "glGetPixelTransformParameterivEXT") == 0) {
    if (__glintercept_fnptr_glGetPixelTransformParameterivEXT == NULL) {
      __glintercept_fnptr_glGetPixelTransformParameterivEXT = (__ctype_glGetPixelTransformParameterivEXT) eglGetProcAddr("glGetPixelTransformParameterivEXT");
    }
    if (__glintercept_fnptr_glGetPixelTransformParameterivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetPixelTransformParameterivEXT;
  }
  if (strcmp(name, "glGetPointerIndexedvEXT") == 0) {
    if (__glintercept_fnptr_glGetPointerIndexedvEXT == NULL) {
      __glintercept_fnptr_glGetPointerIndexedvEXT = (__ctype_glGetPointerIndexedvEXT) eglGetProcAddr("glGetPointerIndexedvEXT");
    }
    if (__glintercept_fnptr_glGetPointerIndexedvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetPointerIndexedvEXT;
  }
  if (strcmp(name, "glGetPointeri_vEXT") == 0) {
    if (__glintercept_fnptr_glGetPointeri_vEXT == NULL) {
      __glintercept_fnptr_glGetPointeri_vEXT = (__ctype_glGetPointeri_vEXT) eglGetProcAddr("glGetPointeri_vEXT");
    }
    if (__glintercept_fnptr_glGetPointeri_vEXT == NULL) return NULL;
    return (void*) __glintercept_glGetPointeri_vEXT;
  }
  if (strcmp(name, "glGetPointerv") == 0) {
    if (__glintercept_fnptr_glGetPointerv == NULL) {
      __glintercept_fnptr_glGetPointerv = (__ctype_glGetPointerv) eglGetProcAddr("glGetPointerv");
    }
    if (__glintercept_fnptr_glGetPointerv == NULL) return NULL;
    return (void*) __glintercept_glGetPointerv;
  }
  if (strcmp(name, "glGetPointervEXT") == 0) {
    if (__glintercept_fnptr_glGetPointervEXT == NULL) {
      __glintercept_fnptr_glGetPointervEXT = (__ctype_glGetPointervEXT) eglGetProcAddr("glGetPointervEXT");
    }
    if (__glintercept_fnptr_glGetPointervEXT == NULL) return NULL;
    return (void*) __glintercept_glGetPointervEXT;
  }
  if (strcmp(name, "glGetPointervKHR") == 0) {
    if (__glintercept_fnptr_glGetPointervKHR == NULL) {
      __glintercept_fnptr_glGetPointervKHR = (__ctype_glGetPointervKHR) eglGetProcAddr("glGetPointervKHR");
    }
    if (__glintercept_fnptr_glGetPointervKHR == NULL) return NULL;
    return (void*) __glintercept_glGetPointervKHR;
  }
  if (strcmp(name, "glGetPolygonStipple") == 0) {
    if (__glintercept_fnptr_glGetPolygonStipple == NULL) {
      __glintercept_fnptr_glGetPolygonStipple = (__ctype_glGetPolygonStipple) eglGetProcAddr("glGetPolygonStipple");
    }
    if (__glintercept_fnptr_glGetPolygonStipple == NULL) return NULL;
    return (void*) __glintercept_glGetPolygonStipple;
  }
  if (strcmp(name, "glGetProgramBinary") == 0) {
    if (__glintercept_fnptr_glGetProgramBinary == NULL) {
      __glintercept_fnptr_glGetProgramBinary = (__ctype_glGetProgramBinary) eglGetProcAddr("glGetProgramBinary");
    }
    if (__glintercept_fnptr_glGetProgramBinary == NULL) return NULL;
    return (void*) __glintercept_glGetProgramBinary;
  }
  if (strcmp(name, "glGetProgramBinaryOES") == 0) {
    if (__glintercept_fnptr_glGetProgramBinaryOES == NULL) {
      __glintercept_fnptr_glGetProgramBinaryOES = (__ctype_glGetProgramBinaryOES) eglGetProcAddr("glGetProgramBinaryOES");
    }
    if (__glintercept_fnptr_glGetProgramBinaryOES == NULL) return NULL;
    return (void*) __glintercept_glGetProgramBinaryOES;
  }
  if (strcmp(name, "glGetProgramEnvParameterIivNV") == 0) {
    if (__glintercept_fnptr_glGetProgramEnvParameterIivNV == NULL) {
      __glintercept_fnptr_glGetProgramEnvParameterIivNV = (__ctype_glGetProgramEnvParameterIivNV) eglGetProcAddr("glGetProgramEnvParameterIivNV");
    }
    if (__glintercept_fnptr_glGetProgramEnvParameterIivNV == NULL) return NULL;
    return (void*) __glintercept_glGetProgramEnvParameterIivNV;
  }
  if (strcmp(name, "glGetProgramEnvParameterIuivNV") == 0) {
    if (__glintercept_fnptr_glGetProgramEnvParameterIuivNV == NULL) {
      __glintercept_fnptr_glGetProgramEnvParameterIuivNV = (__ctype_glGetProgramEnvParameterIuivNV) eglGetProcAddr("glGetProgramEnvParameterIuivNV");
    }
    if (__glintercept_fnptr_glGetProgramEnvParameterIuivNV == NULL) return NULL;
    return (void*) __glintercept_glGetProgramEnvParameterIuivNV;
  }
  if (strcmp(name, "glGetProgramEnvParameterdvARB") == 0) {
    if (__glintercept_fnptr_glGetProgramEnvParameterdvARB == NULL) {
      __glintercept_fnptr_glGetProgramEnvParameterdvARB = (__ctype_glGetProgramEnvParameterdvARB) eglGetProcAddr("glGetProgramEnvParameterdvARB");
    }
    if (__glintercept_fnptr_glGetProgramEnvParameterdvARB == NULL) return NULL;
    return (void*) __glintercept_glGetProgramEnvParameterdvARB;
  }
  if (strcmp(name, "glGetProgramEnvParameterfvARB") == 0) {
    if (__glintercept_fnptr_glGetProgramEnvParameterfvARB == NULL) {
      __glintercept_fnptr_glGetProgramEnvParameterfvARB = (__ctype_glGetProgramEnvParameterfvARB) eglGetProcAddr("glGetProgramEnvParameterfvARB");
    }
    if (__glintercept_fnptr_glGetProgramEnvParameterfvARB == NULL) return NULL;
    return (void*) __glintercept_glGetProgramEnvParameterfvARB;
  }
  if (strcmp(name, "glGetProgramInfoLog") == 0) {
    if (__glintercept_fnptr_glGetProgramInfoLog == NULL) {
      __glintercept_fnptr_glGetProgramInfoLog = (__ctype_glGetProgramInfoLog) eglGetProcAddr("glGetProgramInfoLog");
    }
    if (__glintercept_fnptr_glGetProgramInfoLog == NULL) return NULL;
    return (void*) __glintercept_glGetProgramInfoLog;
  }
  if (strcmp(name, "glGetProgramInterfaceiv") == 0) {
    if (__glintercept_fnptr_glGetProgramInterfaceiv == NULL) {
      __glintercept_fnptr_glGetProgramInterfaceiv = (__ctype_glGetProgramInterfaceiv) eglGetProcAddr("glGetProgramInterfaceiv");
    }
    if (__glintercept_fnptr_glGetProgramInterfaceiv == NULL) return NULL;
    return (void*) __glintercept_glGetProgramInterfaceiv;
  }
  if (strcmp(name, "glGetProgramLocalParameterIivNV") == 0) {
    if (__glintercept_fnptr_glGetProgramLocalParameterIivNV == NULL) {
      __glintercept_fnptr_glGetProgramLocalParameterIivNV = (__ctype_glGetProgramLocalParameterIivNV) eglGetProcAddr("glGetProgramLocalParameterIivNV");
    }
    if (__glintercept_fnptr_glGetProgramLocalParameterIivNV == NULL) return NULL;
    return (void*) __glintercept_glGetProgramLocalParameterIivNV;
  }
  if (strcmp(name, "glGetProgramLocalParameterIuivNV") == 0) {
    if (__glintercept_fnptr_glGetProgramLocalParameterIuivNV == NULL) {
      __glintercept_fnptr_glGetProgramLocalParameterIuivNV = (__ctype_glGetProgramLocalParameterIuivNV) eglGetProcAddr("glGetProgramLocalParameterIuivNV");
    }
    if (__glintercept_fnptr_glGetProgramLocalParameterIuivNV == NULL) return NULL;
    return (void*) __glintercept_glGetProgramLocalParameterIuivNV;
  }
  if (strcmp(name, "glGetProgramLocalParameterdvARB") == 0) {
    if (__glintercept_fnptr_glGetProgramLocalParameterdvARB == NULL) {
      __glintercept_fnptr_glGetProgramLocalParameterdvARB = (__ctype_glGetProgramLocalParameterdvARB) eglGetProcAddr("glGetProgramLocalParameterdvARB");
    }
    if (__glintercept_fnptr_glGetProgramLocalParameterdvARB == NULL) return NULL;
    return (void*) __glintercept_glGetProgramLocalParameterdvARB;
  }
  if (strcmp(name, "glGetProgramLocalParameterfvARB") == 0) {
    if (__glintercept_fnptr_glGetProgramLocalParameterfvARB == NULL) {
      __glintercept_fnptr_glGetProgramLocalParameterfvARB = (__ctype_glGetProgramLocalParameterfvARB) eglGetProcAddr("glGetProgramLocalParameterfvARB");
    }
    if (__glintercept_fnptr_glGetProgramLocalParameterfvARB == NULL) return NULL;
    return (void*) __glintercept_glGetProgramLocalParameterfvARB;
  }
  if (strcmp(name, "glGetProgramNamedParameterdvNV") == 0) {
    if (__glintercept_fnptr_glGetProgramNamedParameterdvNV == NULL) {
      __glintercept_fnptr_glGetProgramNamedParameterdvNV = (__ctype_glGetProgramNamedParameterdvNV) eglGetProcAddr("glGetProgramNamedParameterdvNV");
    }
    if (__glintercept_fnptr_glGetProgramNamedParameterdvNV == NULL) return NULL;
    return (void*) __glintercept_glGetProgramNamedParameterdvNV;
  }
  if (strcmp(name, "glGetProgramNamedParameterfvNV") == 0) {
    if (__glintercept_fnptr_glGetProgramNamedParameterfvNV == NULL) {
      __glintercept_fnptr_glGetProgramNamedParameterfvNV = (__ctype_glGetProgramNamedParameterfvNV) eglGetProcAddr("glGetProgramNamedParameterfvNV");
    }
    if (__glintercept_fnptr_glGetProgramNamedParameterfvNV == NULL) return NULL;
    return (void*) __glintercept_glGetProgramNamedParameterfvNV;
  }
  if (strcmp(name, "glGetProgramParameterdvNV") == 0) {
    if (__glintercept_fnptr_glGetProgramParameterdvNV == NULL) {
      __glintercept_fnptr_glGetProgramParameterdvNV = (__ctype_glGetProgramParameterdvNV) eglGetProcAddr("glGetProgramParameterdvNV");
    }
    if (__glintercept_fnptr_glGetProgramParameterdvNV == NULL) return NULL;
    return (void*) __glintercept_glGetProgramParameterdvNV;
  }
  if (strcmp(name, "glGetProgramParameterfvNV") == 0) {
    if (__glintercept_fnptr_glGetProgramParameterfvNV == NULL) {
      __glintercept_fnptr_glGetProgramParameterfvNV = (__ctype_glGetProgramParameterfvNV) eglGetProcAddr("glGetProgramParameterfvNV");
    }
    if (__glintercept_fnptr_glGetProgramParameterfvNV == NULL) return NULL;
    return (void*) __glintercept_glGetProgramParameterfvNV;
  }
  if (strcmp(name, "glGetProgramPipelineInfoLog") == 0) {
    if (__glintercept_fnptr_glGetProgramPipelineInfoLog == NULL) {
      __glintercept_fnptr_glGetProgramPipelineInfoLog = (__ctype_glGetProgramPipelineInfoLog) eglGetProcAddr("glGetProgramPipelineInfoLog");
    }
    if (__glintercept_fnptr_glGetProgramPipelineInfoLog == NULL) return NULL;
    return (void*) __glintercept_glGetProgramPipelineInfoLog;
  }
  if (strcmp(name, "glGetProgramPipelineInfoLogEXT") == 0) {
    if (__glintercept_fnptr_glGetProgramPipelineInfoLogEXT == NULL) {
      __glintercept_fnptr_glGetProgramPipelineInfoLogEXT = (__ctype_glGetProgramPipelineInfoLogEXT) eglGetProcAddr("glGetProgramPipelineInfoLogEXT");
    }
    if (__glintercept_fnptr_glGetProgramPipelineInfoLogEXT == NULL) return NULL;
    return (void*) __glintercept_glGetProgramPipelineInfoLogEXT;
  }
  if (strcmp(name, "glGetProgramPipelineiv") == 0) {
    if (__glintercept_fnptr_glGetProgramPipelineiv == NULL) {
      __glintercept_fnptr_glGetProgramPipelineiv = (__ctype_glGetProgramPipelineiv) eglGetProcAddr("glGetProgramPipelineiv");
    }
    if (__glintercept_fnptr_glGetProgramPipelineiv == NULL) return NULL;
    return (void*) __glintercept_glGetProgramPipelineiv;
  }
  if (strcmp(name, "glGetProgramPipelineivEXT") == 0) {
    if (__glintercept_fnptr_glGetProgramPipelineivEXT == NULL) {
      __glintercept_fnptr_glGetProgramPipelineivEXT = (__ctype_glGetProgramPipelineivEXT) eglGetProcAddr("glGetProgramPipelineivEXT");
    }
    if (__glintercept_fnptr_glGetProgramPipelineivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetProgramPipelineivEXT;
  }
  if (strcmp(name, "glGetProgramResourceIndex") == 0) {
    if (__glintercept_fnptr_glGetProgramResourceIndex == NULL) {
      __glintercept_fnptr_glGetProgramResourceIndex = (__ctype_glGetProgramResourceIndex) eglGetProcAddr("glGetProgramResourceIndex");
    }
    if (__glintercept_fnptr_glGetProgramResourceIndex == NULL) return NULL;
    return (void*) __glintercept_glGetProgramResourceIndex;
  }
  if (strcmp(name, "glGetProgramResourceLocation") == 0) {
    if (__glintercept_fnptr_glGetProgramResourceLocation == NULL) {
      __glintercept_fnptr_glGetProgramResourceLocation = (__ctype_glGetProgramResourceLocation) eglGetProcAddr("glGetProgramResourceLocation");
    }
    if (__glintercept_fnptr_glGetProgramResourceLocation == NULL) return NULL;
    return (void*) __glintercept_glGetProgramResourceLocation;
  }
  if (strcmp(name, "glGetProgramResourceLocationIndex") == 0) {
    if (__glintercept_fnptr_glGetProgramResourceLocationIndex == NULL) {
      __glintercept_fnptr_glGetProgramResourceLocationIndex = (__ctype_glGetProgramResourceLocationIndex) eglGetProcAddr("glGetProgramResourceLocationIndex");
    }
    if (__glintercept_fnptr_glGetProgramResourceLocationIndex == NULL) return NULL;
    return (void*) __glintercept_glGetProgramResourceLocationIndex;
  }
  if (strcmp(name, "glGetProgramResourceLocationIndexEXT") == 0) {
    if (__glintercept_fnptr_glGetProgramResourceLocationIndexEXT == NULL) {
      __glintercept_fnptr_glGetProgramResourceLocationIndexEXT = (__ctype_glGetProgramResourceLocationIndexEXT) eglGetProcAddr("glGetProgramResourceLocationIndexEXT");
    }
    if (__glintercept_fnptr_glGetProgramResourceLocationIndexEXT == NULL) return NULL;
    return (void*) __glintercept_glGetProgramResourceLocationIndexEXT;
  }
  if (strcmp(name, "glGetProgramResourceName") == 0) {
    if (__glintercept_fnptr_glGetProgramResourceName == NULL) {
      __glintercept_fnptr_glGetProgramResourceName = (__ctype_glGetProgramResourceName) eglGetProcAddr("glGetProgramResourceName");
    }
    if (__glintercept_fnptr_glGetProgramResourceName == NULL) return NULL;
    return (void*) __glintercept_glGetProgramResourceName;
  }
  if (strcmp(name, "glGetProgramResourcefvNV") == 0) {
    if (__glintercept_fnptr_glGetProgramResourcefvNV == NULL) {
      __glintercept_fnptr_glGetProgramResourcefvNV = (__ctype_glGetProgramResourcefvNV) eglGetProcAddr("glGetProgramResourcefvNV");
    }
    if (__glintercept_fnptr_glGetProgramResourcefvNV == NULL) return NULL;
    return (void*) __glintercept_glGetProgramResourcefvNV;
  }
  if (strcmp(name, "glGetProgramResourceiv") == 0) {
    if (__glintercept_fnptr_glGetProgramResourceiv == NULL) {
      __glintercept_fnptr_glGetProgramResourceiv = (__ctype_glGetProgramResourceiv) eglGetProcAddr("glGetProgramResourceiv");
    }
    if (__glintercept_fnptr_glGetProgramResourceiv == NULL) return NULL;
    return (void*) __glintercept_glGetProgramResourceiv;
  }
  if (strcmp(name, "glGetProgramStageiv") == 0) {
    if (__glintercept_fnptr_glGetProgramStageiv == NULL) {
      __glintercept_fnptr_glGetProgramStageiv = (__ctype_glGetProgramStageiv) eglGetProcAddr("glGetProgramStageiv");
    }
    if (__glintercept_fnptr_glGetProgramStageiv == NULL) return NULL;
    return (void*) __glintercept_glGetProgramStageiv;
  }
  if (strcmp(name, "glGetProgramStringARB") == 0) {
    if (__glintercept_fnptr_glGetProgramStringARB == NULL) {
      __glintercept_fnptr_glGetProgramStringARB = (__ctype_glGetProgramStringARB) eglGetProcAddr("glGetProgramStringARB");
    }
    if (__glintercept_fnptr_glGetProgramStringARB == NULL) return NULL;
    return (void*) __glintercept_glGetProgramStringARB;
  }
  if (strcmp(name, "glGetProgramStringNV") == 0) {
    if (__glintercept_fnptr_glGetProgramStringNV == NULL) {
      __glintercept_fnptr_glGetProgramStringNV = (__ctype_glGetProgramStringNV) eglGetProcAddr("glGetProgramStringNV");
    }
    if (__glintercept_fnptr_glGetProgramStringNV == NULL) return NULL;
    return (void*) __glintercept_glGetProgramStringNV;
  }
  if (strcmp(name, "glGetProgramSubroutineParameteruivNV") == 0) {
    if (__glintercept_fnptr_glGetProgramSubroutineParameteruivNV == NULL) {
      __glintercept_fnptr_glGetProgramSubroutineParameteruivNV = (__ctype_glGetProgramSubroutineParameteruivNV) eglGetProcAddr("glGetProgramSubroutineParameteruivNV");
    }
    if (__glintercept_fnptr_glGetProgramSubroutineParameteruivNV == NULL) return NULL;
    return (void*) __glintercept_glGetProgramSubroutineParameteruivNV;
  }
  if (strcmp(name, "glGetProgramiv") == 0) {
    if (__glintercept_fnptr_glGetProgramiv == NULL) {
      __glintercept_fnptr_glGetProgramiv = (__ctype_glGetProgramiv) eglGetProcAddr("glGetProgramiv");
    }
    if (__glintercept_fnptr_glGetProgramiv == NULL) return NULL;
    return (void*) __glintercept_glGetProgramiv;
  }
  if (strcmp(name, "glGetProgramivARB") == 0) {
    if (__glintercept_fnptr_glGetProgramivARB == NULL) {
      __glintercept_fnptr_glGetProgramivARB = (__ctype_glGetProgramivARB) eglGetProcAddr("glGetProgramivARB");
    }
    if (__glintercept_fnptr_glGetProgramivARB == NULL) return NULL;
    return (void*) __glintercept_glGetProgramivARB;
  }
  if (strcmp(name, "glGetProgramivNV") == 0) {
    if (__glintercept_fnptr_glGetProgramivNV == NULL) {
      __glintercept_fnptr_glGetProgramivNV = (__ctype_glGetProgramivNV) eglGetProcAddr("glGetProgramivNV");
    }
    if (__glintercept_fnptr_glGetProgramivNV == NULL) return NULL;
    return (void*) __glintercept_glGetProgramivNV;
  }
  if (strcmp(name, "glGetQueryBufferObjecti64v") == 0) {
    if (__glintercept_fnptr_glGetQueryBufferObjecti64v == NULL) {
      __glintercept_fnptr_glGetQueryBufferObjecti64v = (__ctype_glGetQueryBufferObjecti64v) eglGetProcAddr("glGetQueryBufferObjecti64v");
    }
    if (__glintercept_fnptr_glGetQueryBufferObjecti64v == NULL) return NULL;
    return (void*) __glintercept_glGetQueryBufferObjecti64v;
  }
  if (strcmp(name, "glGetQueryBufferObjectiv") == 0) {
    if (__glintercept_fnptr_glGetQueryBufferObjectiv == NULL) {
      __glintercept_fnptr_glGetQueryBufferObjectiv = (__ctype_glGetQueryBufferObjectiv) eglGetProcAddr("glGetQueryBufferObjectiv");
    }
    if (__glintercept_fnptr_glGetQueryBufferObjectiv == NULL) return NULL;
    return (void*) __glintercept_glGetQueryBufferObjectiv;
  }
  if (strcmp(name, "glGetQueryBufferObjectui64v") == 0) {
    if (__glintercept_fnptr_glGetQueryBufferObjectui64v == NULL) {
      __glintercept_fnptr_glGetQueryBufferObjectui64v = (__ctype_glGetQueryBufferObjectui64v) eglGetProcAddr("glGetQueryBufferObjectui64v");
    }
    if (__glintercept_fnptr_glGetQueryBufferObjectui64v == NULL) return NULL;
    return (void*) __glintercept_glGetQueryBufferObjectui64v;
  }
  if (strcmp(name, "glGetQueryBufferObjectuiv") == 0) {
    if (__glintercept_fnptr_glGetQueryBufferObjectuiv == NULL) {
      __glintercept_fnptr_glGetQueryBufferObjectuiv = (__ctype_glGetQueryBufferObjectuiv) eglGetProcAddr("glGetQueryBufferObjectuiv");
    }
    if (__glintercept_fnptr_glGetQueryBufferObjectuiv == NULL) return NULL;
    return (void*) __glintercept_glGetQueryBufferObjectuiv;
  }
  if (strcmp(name, "glGetQueryIndexediv") == 0) {
    if (__glintercept_fnptr_glGetQueryIndexediv == NULL) {
      __glintercept_fnptr_glGetQueryIndexediv = (__ctype_glGetQueryIndexediv) eglGetProcAddr("glGetQueryIndexediv");
    }
    if (__glintercept_fnptr_glGetQueryIndexediv == NULL) return NULL;
    return (void*) __glintercept_glGetQueryIndexediv;
  }
  if (strcmp(name, "glGetQueryObjecti64v") == 0) {
    if (__glintercept_fnptr_glGetQueryObjecti64v == NULL) {
      __glintercept_fnptr_glGetQueryObjecti64v = (__ctype_glGetQueryObjecti64v) eglGetProcAddr("glGetQueryObjecti64v");
    }
    if (__glintercept_fnptr_glGetQueryObjecti64v == NULL) return NULL;
    return (void*) __glintercept_glGetQueryObjecti64v;
  }
  if (strcmp(name, "glGetQueryObjecti64vEXT") == 0) {
    if (__glintercept_fnptr_glGetQueryObjecti64vEXT == NULL) {
      __glintercept_fnptr_glGetQueryObjecti64vEXT = (__ctype_glGetQueryObjecti64vEXT) eglGetProcAddr("glGetQueryObjecti64vEXT");
    }
    if (__glintercept_fnptr_glGetQueryObjecti64vEXT == NULL) return NULL;
    return (void*) __glintercept_glGetQueryObjecti64vEXT;
  }
  if (strcmp(name, "glGetQueryObjectiv") == 0) {
    if (__glintercept_fnptr_glGetQueryObjectiv == NULL) {
      __glintercept_fnptr_glGetQueryObjectiv = (__ctype_glGetQueryObjectiv) eglGetProcAddr("glGetQueryObjectiv");
    }
    if (__glintercept_fnptr_glGetQueryObjectiv == NULL) return NULL;
    return (void*) __glintercept_glGetQueryObjectiv;
  }
  if (strcmp(name, "glGetQueryObjectivARB") == 0) {
    if (__glintercept_fnptr_glGetQueryObjectivARB == NULL) {
      __glintercept_fnptr_glGetQueryObjectivARB = (__ctype_glGetQueryObjectivARB) eglGetProcAddr("glGetQueryObjectivARB");
    }
    if (__glintercept_fnptr_glGetQueryObjectivARB == NULL) return NULL;
    return (void*) __glintercept_glGetQueryObjectivARB;
  }
  if (strcmp(name, "glGetQueryObjectivEXT") == 0) {
    if (__glintercept_fnptr_glGetQueryObjectivEXT == NULL) {
      __glintercept_fnptr_glGetQueryObjectivEXT = (__ctype_glGetQueryObjectivEXT) eglGetProcAddr("glGetQueryObjectivEXT");
    }
    if (__glintercept_fnptr_glGetQueryObjectivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetQueryObjectivEXT;
  }
  if (strcmp(name, "glGetQueryObjectui64v") == 0) {
    if (__glintercept_fnptr_glGetQueryObjectui64v == NULL) {
      __glintercept_fnptr_glGetQueryObjectui64v = (__ctype_glGetQueryObjectui64v) eglGetProcAddr("glGetQueryObjectui64v");
    }
    if (__glintercept_fnptr_glGetQueryObjectui64v == NULL) return NULL;
    return (void*) __glintercept_glGetQueryObjectui64v;
  }
  if (strcmp(name, "glGetQueryObjectui64vEXT") == 0) {
    if (__glintercept_fnptr_glGetQueryObjectui64vEXT == NULL) {
      __glintercept_fnptr_glGetQueryObjectui64vEXT = (__ctype_glGetQueryObjectui64vEXT) eglGetProcAddr("glGetQueryObjectui64vEXT");
    }
    if (__glintercept_fnptr_glGetQueryObjectui64vEXT == NULL) return NULL;
    return (void*) __glintercept_glGetQueryObjectui64vEXT;
  }
  if (strcmp(name, "glGetQueryObjectuiv") == 0) {
    if (__glintercept_fnptr_glGetQueryObjectuiv == NULL) {
      __glintercept_fnptr_glGetQueryObjectuiv = (__ctype_glGetQueryObjectuiv) eglGetProcAddr("glGetQueryObjectuiv");
    }
    if (__glintercept_fnptr_glGetQueryObjectuiv == NULL) return NULL;
    return (void*) __glintercept_glGetQueryObjectuiv;
  }
  if (strcmp(name, "glGetQueryObjectuivARB") == 0) {
    if (__glintercept_fnptr_glGetQueryObjectuivARB == NULL) {
      __glintercept_fnptr_glGetQueryObjectuivARB = (__ctype_glGetQueryObjectuivARB) eglGetProcAddr("glGetQueryObjectuivARB");
    }
    if (__glintercept_fnptr_glGetQueryObjectuivARB == NULL) return NULL;
    return (void*) __glintercept_glGetQueryObjectuivARB;
  }
  if (strcmp(name, "glGetQueryObjectuivEXT") == 0) {
    if (__glintercept_fnptr_glGetQueryObjectuivEXT == NULL) {
      __glintercept_fnptr_glGetQueryObjectuivEXT = (__ctype_glGetQueryObjectuivEXT) eglGetProcAddr("glGetQueryObjectuivEXT");
    }
    if (__glintercept_fnptr_glGetQueryObjectuivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetQueryObjectuivEXT;
  }
  if (strcmp(name, "glGetQueryiv") == 0) {
    if (__glintercept_fnptr_glGetQueryiv == NULL) {
      __glintercept_fnptr_glGetQueryiv = (__ctype_glGetQueryiv) eglGetProcAddr("glGetQueryiv");
    }
    if (__glintercept_fnptr_glGetQueryiv == NULL) return NULL;
    return (void*) __glintercept_glGetQueryiv;
  }
  if (strcmp(name, "glGetQueryivARB") == 0) {
    if (__glintercept_fnptr_glGetQueryivARB == NULL) {
      __glintercept_fnptr_glGetQueryivARB = (__ctype_glGetQueryivARB) eglGetProcAddr("glGetQueryivARB");
    }
    if (__glintercept_fnptr_glGetQueryivARB == NULL) return NULL;
    return (void*) __glintercept_glGetQueryivARB;
  }
  if (strcmp(name, "glGetQueryivEXT") == 0) {
    if (__glintercept_fnptr_glGetQueryivEXT == NULL) {
      __glintercept_fnptr_glGetQueryivEXT = (__ctype_glGetQueryivEXT) eglGetProcAddr("glGetQueryivEXT");
    }
    if (__glintercept_fnptr_glGetQueryivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetQueryivEXT;
  }
  if (strcmp(name, "glGetRenderbufferParameteriv") == 0) {
    if (__glintercept_fnptr_glGetRenderbufferParameteriv == NULL) {
      __glintercept_fnptr_glGetRenderbufferParameteriv = (__ctype_glGetRenderbufferParameteriv) eglGetProcAddr("glGetRenderbufferParameteriv");
    }
    if (__glintercept_fnptr_glGetRenderbufferParameteriv == NULL) return NULL;
    return (void*) __glintercept_glGetRenderbufferParameteriv;
  }
  if (strcmp(name, "glGetRenderbufferParameterivEXT") == 0) {
    if (__glintercept_fnptr_glGetRenderbufferParameterivEXT == NULL) {
      __glintercept_fnptr_glGetRenderbufferParameterivEXT = (__ctype_glGetRenderbufferParameterivEXT) eglGetProcAddr("glGetRenderbufferParameterivEXT");
    }
    if (__glintercept_fnptr_glGetRenderbufferParameterivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetRenderbufferParameterivEXT;
  }
  if (strcmp(name, "glGetRenderbufferParameterivOES") == 0) {
    if (__glintercept_fnptr_glGetRenderbufferParameterivOES == NULL) {
      __glintercept_fnptr_glGetRenderbufferParameterivOES = (__ctype_glGetRenderbufferParameterivOES) eglGetProcAddr("glGetRenderbufferParameterivOES");
    }
    if (__glintercept_fnptr_glGetRenderbufferParameterivOES == NULL) return NULL;
    return (void*) __glintercept_glGetRenderbufferParameterivOES;
  }
  if (strcmp(name, "glGetSamplerParameterIiv") == 0) {
    if (__glintercept_fnptr_glGetSamplerParameterIiv == NULL) {
      __glintercept_fnptr_glGetSamplerParameterIiv = (__ctype_glGetSamplerParameterIiv) eglGetProcAddr("glGetSamplerParameterIiv");
    }
    if (__glintercept_fnptr_glGetSamplerParameterIiv == NULL) return NULL;
    return (void*) __glintercept_glGetSamplerParameterIiv;
  }
  if (strcmp(name, "glGetSamplerParameterIivEXT") == 0) {
    if (__glintercept_fnptr_glGetSamplerParameterIivEXT == NULL) {
      __glintercept_fnptr_glGetSamplerParameterIivEXT = (__ctype_glGetSamplerParameterIivEXT) eglGetProcAddr("glGetSamplerParameterIivEXT");
    }
    if (__glintercept_fnptr_glGetSamplerParameterIivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetSamplerParameterIivEXT;
  }
  if (strcmp(name, "glGetSamplerParameterIivOES") == 0) {
    if (__glintercept_fnptr_glGetSamplerParameterIivOES == NULL) {
      __glintercept_fnptr_glGetSamplerParameterIivOES = (__ctype_glGetSamplerParameterIivOES) eglGetProcAddr("glGetSamplerParameterIivOES");
    }
    if (__glintercept_fnptr_glGetSamplerParameterIivOES == NULL) return NULL;
    return (void*) __glintercept_glGetSamplerParameterIivOES;
  }
  if (strcmp(name, "glGetSamplerParameterIuiv") == 0) {
    if (__glintercept_fnptr_glGetSamplerParameterIuiv == NULL) {
      __glintercept_fnptr_glGetSamplerParameterIuiv = (__ctype_glGetSamplerParameterIuiv) eglGetProcAddr("glGetSamplerParameterIuiv");
    }
    if (__glintercept_fnptr_glGetSamplerParameterIuiv == NULL) return NULL;
    return (void*) __glintercept_glGetSamplerParameterIuiv;
  }
  if (strcmp(name, "glGetSamplerParameterIuivEXT") == 0) {
    if (__glintercept_fnptr_glGetSamplerParameterIuivEXT == NULL) {
      __glintercept_fnptr_glGetSamplerParameterIuivEXT = (__ctype_glGetSamplerParameterIuivEXT) eglGetProcAddr("glGetSamplerParameterIuivEXT");
    }
    if (__glintercept_fnptr_glGetSamplerParameterIuivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetSamplerParameterIuivEXT;
  }
  if (strcmp(name, "glGetSamplerParameterIuivOES") == 0) {
    if (__glintercept_fnptr_glGetSamplerParameterIuivOES == NULL) {
      __glintercept_fnptr_glGetSamplerParameterIuivOES = (__ctype_glGetSamplerParameterIuivOES) eglGetProcAddr("glGetSamplerParameterIuivOES");
    }
    if (__glintercept_fnptr_glGetSamplerParameterIuivOES == NULL) return NULL;
    return (void*) __glintercept_glGetSamplerParameterIuivOES;
  }
  if (strcmp(name, "glGetSamplerParameterfv") == 0) {
    if (__glintercept_fnptr_glGetSamplerParameterfv == NULL) {
      __glintercept_fnptr_glGetSamplerParameterfv = (__ctype_glGetSamplerParameterfv) eglGetProcAddr("glGetSamplerParameterfv");
    }
    if (__glintercept_fnptr_glGetSamplerParameterfv == NULL) return NULL;
    return (void*) __glintercept_glGetSamplerParameterfv;
  }
  if (strcmp(name, "glGetSamplerParameteriv") == 0) {
    if (__glintercept_fnptr_glGetSamplerParameteriv == NULL) {
      __glintercept_fnptr_glGetSamplerParameteriv = (__ctype_glGetSamplerParameteriv) eglGetProcAddr("glGetSamplerParameteriv");
    }
    if (__glintercept_fnptr_glGetSamplerParameteriv == NULL) return NULL;
    return (void*) __glintercept_glGetSamplerParameteriv;
  }
  if (strcmp(name, "glGetSemaphoreParameterivNV") == 0) {
    if (__glintercept_fnptr_glGetSemaphoreParameterivNV == NULL) {
      __glintercept_fnptr_glGetSemaphoreParameterivNV = (__ctype_glGetSemaphoreParameterivNV) eglGetProcAddr("glGetSemaphoreParameterivNV");
    }
    if (__glintercept_fnptr_glGetSemaphoreParameterivNV == NULL) return NULL;
    return (void*) __glintercept_glGetSemaphoreParameterivNV;
  }
  if (strcmp(name, "glGetSemaphoreParameterui64vEXT") == 0) {
    if (__glintercept_fnptr_glGetSemaphoreParameterui64vEXT == NULL) {
      __glintercept_fnptr_glGetSemaphoreParameterui64vEXT = (__ctype_glGetSemaphoreParameterui64vEXT) eglGetProcAddr("glGetSemaphoreParameterui64vEXT");
    }
    if (__glintercept_fnptr_glGetSemaphoreParameterui64vEXT == NULL) return NULL;
    return (void*) __glintercept_glGetSemaphoreParameterui64vEXT;
  }
  if (strcmp(name, "glGetSeparableFilter") == 0) {
    if (__glintercept_fnptr_glGetSeparableFilter == NULL) {
      __glintercept_fnptr_glGetSeparableFilter = (__ctype_glGetSeparableFilter) eglGetProcAddr("glGetSeparableFilter");
    }
    if (__glintercept_fnptr_glGetSeparableFilter == NULL) return NULL;
    return (void*) __glintercept_glGetSeparableFilter;
  }
  if (strcmp(name, "glGetSeparableFilterEXT") == 0) {
    if (__glintercept_fnptr_glGetSeparableFilterEXT == NULL) {
      __glintercept_fnptr_glGetSeparableFilterEXT = (__ctype_glGetSeparableFilterEXT) eglGetProcAddr("glGetSeparableFilterEXT");
    }
    if (__glintercept_fnptr_glGetSeparableFilterEXT == NULL) return NULL;
    return (void*) __glintercept_glGetSeparableFilterEXT;
  }
  if (strcmp(name, "glGetShaderInfoLog") == 0) {
    if (__glintercept_fnptr_glGetShaderInfoLog == NULL) {
      __glintercept_fnptr_glGetShaderInfoLog = (__ctype_glGetShaderInfoLog) eglGetProcAddr("glGetShaderInfoLog");
    }
    if (__glintercept_fnptr_glGetShaderInfoLog == NULL) return NULL;
    return (void*) __glintercept_glGetShaderInfoLog;
  }
  if (strcmp(name, "glGetShaderPrecisionFormat") == 0) {
    if (__glintercept_fnptr_glGetShaderPrecisionFormat == NULL) {
      __glintercept_fnptr_glGetShaderPrecisionFormat = (__ctype_glGetShaderPrecisionFormat) eglGetProcAddr("glGetShaderPrecisionFormat");
    }
    if (__glintercept_fnptr_glGetShaderPrecisionFormat == NULL) return NULL;
    return (void*) __glintercept_glGetShaderPrecisionFormat;
  }
  if (strcmp(name, "glGetShaderSource") == 0) {
    if (__glintercept_fnptr_glGetShaderSource == NULL) {
      __glintercept_fnptr_glGetShaderSource = (__ctype_glGetShaderSource) eglGetProcAddr("glGetShaderSource");
    }
    if (__glintercept_fnptr_glGetShaderSource == NULL) return NULL;
    return (void*) __glintercept_glGetShaderSource;
  }
  if (strcmp(name, "glGetShaderSourceARB") == 0) {
    if (__glintercept_fnptr_glGetShaderSourceARB == NULL) {
      __glintercept_fnptr_glGetShaderSourceARB = (__ctype_glGetShaderSourceARB) eglGetProcAddr("glGetShaderSourceARB");
    }
    if (__glintercept_fnptr_glGetShaderSourceARB == NULL) return NULL;
    return (void*) __glintercept_glGetShaderSourceARB;
  }
  if (strcmp(name, "glGetShaderiv") == 0) {
    if (__glintercept_fnptr_glGetShaderiv == NULL) {
      __glintercept_fnptr_glGetShaderiv = (__ctype_glGetShaderiv) eglGetProcAddr("glGetShaderiv");
    }
    if (__glintercept_fnptr_glGetShaderiv == NULL) return NULL;
    return (void*) __glintercept_glGetShaderiv;
  }
  if (strcmp(name, "glGetShadingRateImagePaletteNV") == 0) {
    if (__glintercept_fnptr_glGetShadingRateImagePaletteNV == NULL) {
      __glintercept_fnptr_glGetShadingRateImagePaletteNV = (__ctype_glGetShadingRateImagePaletteNV) eglGetProcAddr("glGetShadingRateImagePaletteNV");
    }
    if (__glintercept_fnptr_glGetShadingRateImagePaletteNV == NULL) return NULL;
    return (void*) __glintercept_glGetShadingRateImagePaletteNV;
  }
  if (strcmp(name, "glGetShadingRateSampleLocationivNV") == 0) {
    if (__glintercept_fnptr_glGetShadingRateSampleLocationivNV == NULL) {
      __glintercept_fnptr_glGetShadingRateSampleLocationivNV = (__ctype_glGetShadingRateSampleLocationivNV) eglGetProcAddr("glGetShadingRateSampleLocationivNV");
    }
    if (__glintercept_fnptr_glGetShadingRateSampleLocationivNV == NULL) return NULL;
    return (void*) __glintercept_glGetShadingRateSampleLocationivNV;
  }
  if (strcmp(name, "glGetSharpenTexFuncSGIS") == 0) {
    if (__glintercept_fnptr_glGetSharpenTexFuncSGIS == NULL) {
      __glintercept_fnptr_glGetSharpenTexFuncSGIS = (__ctype_glGetSharpenTexFuncSGIS) eglGetProcAddr("glGetSharpenTexFuncSGIS");
    }
    if (__glintercept_fnptr_glGetSharpenTexFuncSGIS == NULL) return NULL;
    return (void*) __glintercept_glGetSharpenTexFuncSGIS;
  }
  if (strcmp(name, "glGetStageIndexNV") == 0) {
    if (__glintercept_fnptr_glGetStageIndexNV == NULL) {
      __glintercept_fnptr_glGetStageIndexNV = (__ctype_glGetStageIndexNV) eglGetProcAddr("glGetStageIndexNV");
    }
    if (__glintercept_fnptr_glGetStageIndexNV == NULL) return NULL;
    return (void*) __glintercept_glGetStageIndexNV;
  }
  if (strcmp(name, "glGetString") == 0) {
    if (__glintercept_fnptr_glGetString == NULL) {
      __glintercept_fnptr_glGetString = (__ctype_glGetString) eglGetProcAddr("glGetString");
    }
    if (__glintercept_fnptr_glGetString == NULL) return NULL;
    return (void*) __glintercept_glGetString;
  }
  if (strcmp(name, "glGetStringi") == 0) {
    if (__glintercept_fnptr_glGetStringi == NULL) {
      __glintercept_fnptr_glGetStringi = (__ctype_glGetStringi) eglGetProcAddr("glGetStringi");
    }
    if (__glintercept_fnptr_glGetStringi == NULL) return NULL;
    return (void*) __glintercept_glGetStringi;
  }
  if (strcmp(name, "glGetSubroutineIndex") == 0) {
    if (__glintercept_fnptr_glGetSubroutineIndex == NULL) {
      __glintercept_fnptr_glGetSubroutineIndex = (__ctype_glGetSubroutineIndex) eglGetProcAddr("glGetSubroutineIndex");
    }
    if (__glintercept_fnptr_glGetSubroutineIndex == NULL) return NULL;
    return (void*) __glintercept_glGetSubroutineIndex;
  }
  if (strcmp(name, "glGetSubroutineUniformLocation") == 0) {
    if (__glintercept_fnptr_glGetSubroutineUniformLocation == NULL) {
      __glintercept_fnptr_glGetSubroutineUniformLocation = (__ctype_glGetSubroutineUniformLocation) eglGetProcAddr("glGetSubroutineUniformLocation");
    }
    if (__glintercept_fnptr_glGetSubroutineUniformLocation == NULL) return NULL;
    return (void*) __glintercept_glGetSubroutineUniformLocation;
  }
  if (strcmp(name, "glGetSynciv") == 0) {
    if (__glintercept_fnptr_glGetSynciv == NULL) {
      __glintercept_fnptr_glGetSynciv = (__ctype_glGetSynciv) eglGetProcAddr("glGetSynciv");
    }
    if (__glintercept_fnptr_glGetSynciv == NULL) return NULL;
    return (void*) __glintercept_glGetSynciv;
  }
  if (strcmp(name, "glGetSyncivAPPLE") == 0) {
    if (__glintercept_fnptr_glGetSyncivAPPLE == NULL) {
      __glintercept_fnptr_glGetSyncivAPPLE = (__ctype_glGetSyncivAPPLE) eglGetProcAddr("glGetSyncivAPPLE");
    }
    if (__glintercept_fnptr_glGetSyncivAPPLE == NULL) return NULL;
    return (void*) __glintercept_glGetSyncivAPPLE;
  }
  if (strcmp(name, "glGetTexBumpParameterfvATI") == 0) {
    if (__glintercept_fnptr_glGetTexBumpParameterfvATI == NULL) {
      __glintercept_fnptr_glGetTexBumpParameterfvATI = (__ctype_glGetTexBumpParameterfvATI) eglGetProcAddr("glGetTexBumpParameterfvATI");
    }
    if (__glintercept_fnptr_glGetTexBumpParameterfvATI == NULL) return NULL;
    return (void*) __glintercept_glGetTexBumpParameterfvATI;
  }
  if (strcmp(name, "glGetTexBumpParameterivATI") == 0) {
    if (__glintercept_fnptr_glGetTexBumpParameterivATI == NULL) {
      __glintercept_fnptr_glGetTexBumpParameterivATI = (__ctype_glGetTexBumpParameterivATI) eglGetProcAddr("glGetTexBumpParameterivATI");
    }
    if (__glintercept_fnptr_glGetTexBumpParameterivATI == NULL) return NULL;
    return (void*) __glintercept_glGetTexBumpParameterivATI;
  }
  if (strcmp(name, "glGetTexEnvfv") == 0) {
    if (__glintercept_fnptr_glGetTexEnvfv == NULL) {
      __glintercept_fnptr_glGetTexEnvfv = (__ctype_glGetTexEnvfv) eglGetProcAddr("glGetTexEnvfv");
    }
    if (__glintercept_fnptr_glGetTexEnvfv == NULL) return NULL;
    return (void*) __glintercept_glGetTexEnvfv;
  }
  if (strcmp(name, "glGetTexEnviv") == 0) {
    if (__glintercept_fnptr_glGetTexEnviv == NULL) {
      __glintercept_fnptr_glGetTexEnviv = (__ctype_glGetTexEnviv) eglGetProcAddr("glGetTexEnviv");
    }
    if (__glintercept_fnptr_glGetTexEnviv == NULL) return NULL;
    return (void*) __glintercept_glGetTexEnviv;
  }
  if (strcmp(name, "glGetTexEnvxv") == 0) {
    if (__glintercept_fnptr_glGetTexEnvxv == NULL) {
      __glintercept_fnptr_glGetTexEnvxv = (__ctype_glGetTexEnvxv) eglGetProcAddr("glGetTexEnvxv");
    }
    if (__glintercept_fnptr_glGetTexEnvxv == NULL) return NULL;
    return (void*) __glintercept_glGetTexEnvxv;
  }
  if (strcmp(name, "glGetTexEnvxvOES") == 0) {
    if (__glintercept_fnptr_glGetTexEnvxvOES == NULL) {
      __glintercept_fnptr_glGetTexEnvxvOES = (__ctype_glGetTexEnvxvOES) eglGetProcAddr("glGetTexEnvxvOES");
    }
    if (__glintercept_fnptr_glGetTexEnvxvOES == NULL) return NULL;
    return (void*) __glintercept_glGetTexEnvxvOES;
  }
  if (strcmp(name, "glGetTexFilterFuncSGIS") == 0) {
    if (__glintercept_fnptr_glGetTexFilterFuncSGIS == NULL) {
      __glintercept_fnptr_glGetTexFilterFuncSGIS = (__ctype_glGetTexFilterFuncSGIS) eglGetProcAddr("glGetTexFilterFuncSGIS");
    }
    if (__glintercept_fnptr_glGetTexFilterFuncSGIS == NULL) return NULL;
    return (void*) __glintercept_glGetTexFilterFuncSGIS;
  }
  if (strcmp(name, "glGetTexGendv") == 0) {
    if (__glintercept_fnptr_glGetTexGendv == NULL) {
      __glintercept_fnptr_glGetTexGendv = (__ctype_glGetTexGendv) eglGetProcAddr("glGetTexGendv");
    }
    if (__glintercept_fnptr_glGetTexGendv == NULL) return NULL;
    return (void*) __glintercept_glGetTexGendv;
  }
  if (strcmp(name, "glGetTexGenfv") == 0) {
    if (__glintercept_fnptr_glGetTexGenfv == NULL) {
      __glintercept_fnptr_glGetTexGenfv = (__ctype_glGetTexGenfv) eglGetProcAddr("glGetTexGenfv");
    }
    if (__glintercept_fnptr_glGetTexGenfv == NULL) return NULL;
    return (void*) __glintercept_glGetTexGenfv;
  }
  if (strcmp(name, "glGetTexGenfvOES") == 0) {
    if (__glintercept_fnptr_glGetTexGenfvOES == NULL) {
      __glintercept_fnptr_glGetTexGenfvOES = (__ctype_glGetTexGenfvOES) eglGetProcAddr("glGetTexGenfvOES");
    }
    if (__glintercept_fnptr_glGetTexGenfvOES == NULL) return NULL;
    return (void*) __glintercept_glGetTexGenfvOES;
  }
  if (strcmp(name, "glGetTexGeniv") == 0) {
    if (__glintercept_fnptr_glGetTexGeniv == NULL) {
      __glintercept_fnptr_glGetTexGeniv = (__ctype_glGetTexGeniv) eglGetProcAddr("glGetTexGeniv");
    }
    if (__glintercept_fnptr_glGetTexGeniv == NULL) return NULL;
    return (void*) __glintercept_glGetTexGeniv;
  }
  if (strcmp(name, "glGetTexGenivOES") == 0) {
    if (__glintercept_fnptr_glGetTexGenivOES == NULL) {
      __glintercept_fnptr_glGetTexGenivOES = (__ctype_glGetTexGenivOES) eglGetProcAddr("glGetTexGenivOES");
    }
    if (__glintercept_fnptr_glGetTexGenivOES == NULL) return NULL;
    return (void*) __glintercept_glGetTexGenivOES;
  }
  if (strcmp(name, "glGetTexGenxvOES") == 0) {
    if (__glintercept_fnptr_glGetTexGenxvOES == NULL) {
      __glintercept_fnptr_glGetTexGenxvOES = (__ctype_glGetTexGenxvOES) eglGetProcAddr("glGetTexGenxvOES");
    }
    if (__glintercept_fnptr_glGetTexGenxvOES == NULL) return NULL;
    return (void*) __glintercept_glGetTexGenxvOES;
  }
  if (strcmp(name, "glGetTexImage") == 0) {
    if (__glintercept_fnptr_glGetTexImage == NULL) {
      __glintercept_fnptr_glGetTexImage = (__ctype_glGetTexImage) eglGetProcAddr("glGetTexImage");
    }
    if (__glintercept_fnptr_glGetTexImage == NULL) return NULL;
    return (void*) __glintercept_glGetTexImage;
  }
  if (strcmp(name, "glGetTexLevelParameterfv") == 0) {
    if (__glintercept_fnptr_glGetTexLevelParameterfv == NULL) {
      __glintercept_fnptr_glGetTexLevelParameterfv = (__ctype_glGetTexLevelParameterfv) eglGetProcAddr("glGetTexLevelParameterfv");
    }
    if (__glintercept_fnptr_glGetTexLevelParameterfv == NULL) return NULL;
    return (void*) __glintercept_glGetTexLevelParameterfv;
  }
  if (strcmp(name, "glGetTexLevelParameteriv") == 0) {
    if (__glintercept_fnptr_glGetTexLevelParameteriv == NULL) {
      __glintercept_fnptr_glGetTexLevelParameteriv = (__ctype_glGetTexLevelParameteriv) eglGetProcAddr("glGetTexLevelParameteriv");
    }
    if (__glintercept_fnptr_glGetTexLevelParameteriv == NULL) return NULL;
    return (void*) __glintercept_glGetTexLevelParameteriv;
  }
  if (strcmp(name, "glGetTexLevelParameterxvOES") == 0) {
    if (__glintercept_fnptr_glGetTexLevelParameterxvOES == NULL) {
      __glintercept_fnptr_glGetTexLevelParameterxvOES = (__ctype_glGetTexLevelParameterxvOES) eglGetProcAddr("glGetTexLevelParameterxvOES");
    }
    if (__glintercept_fnptr_glGetTexLevelParameterxvOES == NULL) return NULL;
    return (void*) __glintercept_glGetTexLevelParameterxvOES;
  }
  if (strcmp(name, "glGetTexParameterIiv") == 0) {
    if (__glintercept_fnptr_glGetTexParameterIiv == NULL) {
      __glintercept_fnptr_glGetTexParameterIiv = (__ctype_glGetTexParameterIiv) eglGetProcAddr("glGetTexParameterIiv");
    }
    if (__glintercept_fnptr_glGetTexParameterIiv == NULL) return NULL;
    return (void*) __glintercept_glGetTexParameterIiv;
  }
  if (strcmp(name, "glGetTexParameterIivEXT") == 0) {
    if (__glintercept_fnptr_glGetTexParameterIivEXT == NULL) {
      __glintercept_fnptr_glGetTexParameterIivEXT = (__ctype_glGetTexParameterIivEXT) eglGetProcAddr("glGetTexParameterIivEXT");
    }
    if (__glintercept_fnptr_glGetTexParameterIivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetTexParameterIivEXT;
  }
  if (strcmp(name, "glGetTexParameterIivOES") == 0) {
    if (__glintercept_fnptr_glGetTexParameterIivOES == NULL) {
      __glintercept_fnptr_glGetTexParameterIivOES = (__ctype_glGetTexParameterIivOES) eglGetProcAddr("glGetTexParameterIivOES");
    }
    if (__glintercept_fnptr_glGetTexParameterIivOES == NULL) return NULL;
    return (void*) __glintercept_glGetTexParameterIivOES;
  }
  if (strcmp(name, "glGetTexParameterIuiv") == 0) {
    if (__glintercept_fnptr_glGetTexParameterIuiv == NULL) {
      __glintercept_fnptr_glGetTexParameterIuiv = (__ctype_glGetTexParameterIuiv) eglGetProcAddr("glGetTexParameterIuiv");
    }
    if (__glintercept_fnptr_glGetTexParameterIuiv == NULL) return NULL;
    return (void*) __glintercept_glGetTexParameterIuiv;
  }
  if (strcmp(name, "glGetTexParameterIuivEXT") == 0) {
    if (__glintercept_fnptr_glGetTexParameterIuivEXT == NULL) {
      __glintercept_fnptr_glGetTexParameterIuivEXT = (__ctype_glGetTexParameterIuivEXT) eglGetProcAddr("glGetTexParameterIuivEXT");
    }
    if (__glintercept_fnptr_glGetTexParameterIuivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetTexParameterIuivEXT;
  }
  if (strcmp(name, "glGetTexParameterIuivOES") == 0) {
    if (__glintercept_fnptr_glGetTexParameterIuivOES == NULL) {
      __glintercept_fnptr_glGetTexParameterIuivOES = (__ctype_glGetTexParameterIuivOES) eglGetProcAddr("glGetTexParameterIuivOES");
    }
    if (__glintercept_fnptr_glGetTexParameterIuivOES == NULL) return NULL;
    return (void*) __glintercept_glGetTexParameterIuivOES;
  }
  if (strcmp(name, "glGetTexParameterPointervAPPLE") == 0) {
    if (__glintercept_fnptr_glGetTexParameterPointervAPPLE == NULL) {
      __glintercept_fnptr_glGetTexParameterPointervAPPLE = (__ctype_glGetTexParameterPointervAPPLE) eglGetProcAddr("glGetTexParameterPointervAPPLE");
    }
    if (__glintercept_fnptr_glGetTexParameterPointervAPPLE == NULL) return NULL;
    return (void*) __glintercept_glGetTexParameterPointervAPPLE;
  }
  if (strcmp(name, "glGetTexParameterfv") == 0) {
    if (__glintercept_fnptr_glGetTexParameterfv == NULL) {
      __glintercept_fnptr_glGetTexParameterfv = (__ctype_glGetTexParameterfv) eglGetProcAddr("glGetTexParameterfv");
    }
    if (__glintercept_fnptr_glGetTexParameterfv == NULL) return NULL;
    return (void*) __glintercept_glGetTexParameterfv;
  }
  if (strcmp(name, "glGetTexParameteriv") == 0) {
    if (__glintercept_fnptr_glGetTexParameteriv == NULL) {
      __glintercept_fnptr_glGetTexParameteriv = (__ctype_glGetTexParameteriv) eglGetProcAddr("glGetTexParameteriv");
    }
    if (__glintercept_fnptr_glGetTexParameteriv == NULL) return NULL;
    return (void*) __glintercept_glGetTexParameteriv;
  }
  if (strcmp(name, "glGetTexParameterxv") == 0) {
    if (__glintercept_fnptr_glGetTexParameterxv == NULL) {
      __glintercept_fnptr_glGetTexParameterxv = (__ctype_glGetTexParameterxv) eglGetProcAddr("glGetTexParameterxv");
    }
    if (__glintercept_fnptr_glGetTexParameterxv == NULL) return NULL;
    return (void*) __glintercept_glGetTexParameterxv;
  }
  if (strcmp(name, "glGetTexParameterxvOES") == 0) {
    if (__glintercept_fnptr_glGetTexParameterxvOES == NULL) {
      __glintercept_fnptr_glGetTexParameterxvOES = (__ctype_glGetTexParameterxvOES) eglGetProcAddr("glGetTexParameterxvOES");
    }
    if (__glintercept_fnptr_glGetTexParameterxvOES == NULL) return NULL;
    return (void*) __glintercept_glGetTexParameterxvOES;
  }
  if (strcmp(name, "glGetTextureHandleARB") == 0) {
    if (__glintercept_fnptr_glGetTextureHandleARB == NULL) {
      __glintercept_fnptr_glGetTextureHandleARB = (__ctype_glGetTextureHandleARB) eglGetProcAddr("glGetTextureHandleARB");
    }
    if (__glintercept_fnptr_glGetTextureHandleARB == NULL) return NULL;
    return (void*) __glintercept_glGetTextureHandleARB;
  }
  if (strcmp(name, "glGetTextureHandleIMG") == 0) {
    if (__glintercept_fnptr_glGetTextureHandleIMG == NULL) {
      __glintercept_fnptr_glGetTextureHandleIMG = (__ctype_glGetTextureHandleIMG) eglGetProcAddr("glGetTextureHandleIMG");
    }
    if (__glintercept_fnptr_glGetTextureHandleIMG == NULL) return NULL;
    return (void*) __glintercept_glGetTextureHandleIMG;
  }
  if (strcmp(name, "glGetTextureHandleNV") == 0) {
    if (__glintercept_fnptr_glGetTextureHandleNV == NULL) {
      __glintercept_fnptr_glGetTextureHandleNV = (__ctype_glGetTextureHandleNV) eglGetProcAddr("glGetTextureHandleNV");
    }
    if (__glintercept_fnptr_glGetTextureHandleNV == NULL) return NULL;
    return (void*) __glintercept_glGetTextureHandleNV;
  }
  if (strcmp(name, "glGetTextureImage") == 0) {
    if (__glintercept_fnptr_glGetTextureImage == NULL) {
      __glintercept_fnptr_glGetTextureImage = (__ctype_glGetTextureImage) eglGetProcAddr("glGetTextureImage");
    }
    if (__glintercept_fnptr_glGetTextureImage == NULL) return NULL;
    return (void*) __glintercept_glGetTextureImage;
  }
  if (strcmp(name, "glGetTextureImageEXT") == 0) {
    if (__glintercept_fnptr_glGetTextureImageEXT == NULL) {
      __glintercept_fnptr_glGetTextureImageEXT = (__ctype_glGetTextureImageEXT) eglGetProcAddr("glGetTextureImageEXT");
    }
    if (__glintercept_fnptr_glGetTextureImageEXT == NULL) return NULL;
    return (void*) __glintercept_glGetTextureImageEXT;
  }
  if (strcmp(name, "glGetTextureLevelParameterfv") == 0) {
    if (__glintercept_fnptr_glGetTextureLevelParameterfv == NULL) {
      __glintercept_fnptr_glGetTextureLevelParameterfv = (__ctype_glGetTextureLevelParameterfv) eglGetProcAddr("glGetTextureLevelParameterfv");
    }
    if (__glintercept_fnptr_glGetTextureLevelParameterfv == NULL) return NULL;
    return (void*) __glintercept_glGetTextureLevelParameterfv;
  }
  if (strcmp(name, "glGetTextureLevelParameterfvEXT") == 0) {
    if (__glintercept_fnptr_glGetTextureLevelParameterfvEXT == NULL) {
      __glintercept_fnptr_glGetTextureLevelParameterfvEXT = (__ctype_glGetTextureLevelParameterfvEXT) eglGetProcAddr("glGetTextureLevelParameterfvEXT");
    }
    if (__glintercept_fnptr_glGetTextureLevelParameterfvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetTextureLevelParameterfvEXT;
  }
  if (strcmp(name, "glGetTextureLevelParameteriv") == 0) {
    if (__glintercept_fnptr_glGetTextureLevelParameteriv == NULL) {
      __glintercept_fnptr_glGetTextureLevelParameteriv = (__ctype_glGetTextureLevelParameteriv) eglGetProcAddr("glGetTextureLevelParameteriv");
    }
    if (__glintercept_fnptr_glGetTextureLevelParameteriv == NULL) return NULL;
    return (void*) __glintercept_glGetTextureLevelParameteriv;
  }
  if (strcmp(name, "glGetTextureLevelParameterivEXT") == 0) {
    if (__glintercept_fnptr_glGetTextureLevelParameterivEXT == NULL) {
      __glintercept_fnptr_glGetTextureLevelParameterivEXT = (__ctype_glGetTextureLevelParameterivEXT) eglGetProcAddr("glGetTextureLevelParameterivEXT");
    }
    if (__glintercept_fnptr_glGetTextureLevelParameterivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetTextureLevelParameterivEXT;
  }
  if (strcmp(name, "glGetTextureParameterIiv") == 0) {
    if (__glintercept_fnptr_glGetTextureParameterIiv == NULL) {
      __glintercept_fnptr_glGetTextureParameterIiv = (__ctype_glGetTextureParameterIiv) eglGetProcAddr("glGetTextureParameterIiv");
    }
    if (__glintercept_fnptr_glGetTextureParameterIiv == NULL) return NULL;
    return (void*) __glintercept_glGetTextureParameterIiv;
  }
  if (strcmp(name, "glGetTextureParameterIivEXT") == 0) {
    if (__glintercept_fnptr_glGetTextureParameterIivEXT == NULL) {
      __glintercept_fnptr_glGetTextureParameterIivEXT = (__ctype_glGetTextureParameterIivEXT) eglGetProcAddr("glGetTextureParameterIivEXT");
    }
    if (__glintercept_fnptr_glGetTextureParameterIivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetTextureParameterIivEXT;
  }
  if (strcmp(name, "glGetTextureParameterIuiv") == 0) {
    if (__glintercept_fnptr_glGetTextureParameterIuiv == NULL) {
      __glintercept_fnptr_glGetTextureParameterIuiv = (__ctype_glGetTextureParameterIuiv) eglGetProcAddr("glGetTextureParameterIuiv");
    }
    if (__glintercept_fnptr_glGetTextureParameterIuiv == NULL) return NULL;
    return (void*) __glintercept_glGetTextureParameterIuiv;
  }
  if (strcmp(name, "glGetTextureParameterIuivEXT") == 0) {
    if (__glintercept_fnptr_glGetTextureParameterIuivEXT == NULL) {
      __glintercept_fnptr_glGetTextureParameterIuivEXT = (__ctype_glGetTextureParameterIuivEXT) eglGetProcAddr("glGetTextureParameterIuivEXT");
    }
    if (__glintercept_fnptr_glGetTextureParameterIuivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetTextureParameterIuivEXT;
  }
  if (strcmp(name, "glGetTextureParameterfv") == 0) {
    if (__glintercept_fnptr_glGetTextureParameterfv == NULL) {
      __glintercept_fnptr_glGetTextureParameterfv = (__ctype_glGetTextureParameterfv) eglGetProcAddr("glGetTextureParameterfv");
    }
    if (__glintercept_fnptr_glGetTextureParameterfv == NULL) return NULL;
    return (void*) __glintercept_glGetTextureParameterfv;
  }
  if (strcmp(name, "glGetTextureParameterfvEXT") == 0) {
    if (__glintercept_fnptr_glGetTextureParameterfvEXT == NULL) {
      __glintercept_fnptr_glGetTextureParameterfvEXT = (__ctype_glGetTextureParameterfvEXT) eglGetProcAddr("glGetTextureParameterfvEXT");
    }
    if (__glintercept_fnptr_glGetTextureParameterfvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetTextureParameterfvEXT;
  }
  if (strcmp(name, "glGetTextureParameteriv") == 0) {
    if (__glintercept_fnptr_glGetTextureParameteriv == NULL) {
      __glintercept_fnptr_glGetTextureParameteriv = (__ctype_glGetTextureParameteriv) eglGetProcAddr("glGetTextureParameteriv");
    }
    if (__glintercept_fnptr_glGetTextureParameteriv == NULL) return NULL;
    return (void*) __glintercept_glGetTextureParameteriv;
  }
  if (strcmp(name, "glGetTextureParameterivEXT") == 0) {
    if (__glintercept_fnptr_glGetTextureParameterivEXT == NULL) {
      __glintercept_fnptr_glGetTextureParameterivEXT = (__ctype_glGetTextureParameterivEXT) eglGetProcAddr("glGetTextureParameterivEXT");
    }
    if (__glintercept_fnptr_glGetTextureParameterivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetTextureParameterivEXT;
  }
  if (strcmp(name, "glGetTextureSamplerHandleARB") == 0) {
    if (__glintercept_fnptr_glGetTextureSamplerHandleARB == NULL) {
      __glintercept_fnptr_glGetTextureSamplerHandleARB = (__ctype_glGetTextureSamplerHandleARB) eglGetProcAddr("glGetTextureSamplerHandleARB");
    }
    if (__glintercept_fnptr_glGetTextureSamplerHandleARB == NULL) return NULL;
    return (void*) __glintercept_glGetTextureSamplerHandleARB;
  }
  if (strcmp(name, "glGetTextureSamplerHandleIMG") == 0) {
    if (__glintercept_fnptr_glGetTextureSamplerHandleIMG == NULL) {
      __glintercept_fnptr_glGetTextureSamplerHandleIMG = (__ctype_glGetTextureSamplerHandleIMG) eglGetProcAddr("glGetTextureSamplerHandleIMG");
    }
    if (__glintercept_fnptr_glGetTextureSamplerHandleIMG == NULL) return NULL;
    return (void*) __glintercept_glGetTextureSamplerHandleIMG;
  }
  if (strcmp(name, "glGetTextureSamplerHandleNV") == 0) {
    if (__glintercept_fnptr_glGetTextureSamplerHandleNV == NULL) {
      __glintercept_fnptr_glGetTextureSamplerHandleNV = (__ctype_glGetTextureSamplerHandleNV) eglGetProcAddr("glGetTextureSamplerHandleNV");
    }
    if (__glintercept_fnptr_glGetTextureSamplerHandleNV == NULL) return NULL;
    return (void*) __glintercept_glGetTextureSamplerHandleNV;
  }
  if (strcmp(name, "glGetTextureSubImage") == 0) {
    if (__glintercept_fnptr_glGetTextureSubImage == NULL) {
      __glintercept_fnptr_glGetTextureSubImage = (__ctype_glGetTextureSubImage) eglGetProcAddr("glGetTextureSubImage");
    }
    if (__glintercept_fnptr_glGetTextureSubImage == NULL) return NULL;
    return (void*) __glintercept_glGetTextureSubImage;
  }
  if (strcmp(name, "glGetTrackMatrixivNV") == 0) {
    if (__glintercept_fnptr_glGetTrackMatrixivNV == NULL) {
      __glintercept_fnptr_glGetTrackMatrixivNV = (__ctype_glGetTrackMatrixivNV) eglGetProcAddr("glGetTrackMatrixivNV");
    }
    if (__glintercept_fnptr_glGetTrackMatrixivNV == NULL) return NULL;
    return (void*) __glintercept_glGetTrackMatrixivNV;
  }
  if (strcmp(name, "glGetTransformFeedbackVarying") == 0) {
    if (__glintercept_fnptr_glGetTransformFeedbackVarying == NULL) {
      __glintercept_fnptr_glGetTransformFeedbackVarying = (__ctype_glGetTransformFeedbackVarying) eglGetProcAddr("glGetTransformFeedbackVarying");
    }
    if (__glintercept_fnptr_glGetTransformFeedbackVarying == NULL) return NULL;
    return (void*) __glintercept_glGetTransformFeedbackVarying;
  }
  if (strcmp(name, "glGetTransformFeedbackVaryingEXT") == 0) {
    if (__glintercept_fnptr_glGetTransformFeedbackVaryingEXT == NULL) {
      __glintercept_fnptr_glGetTransformFeedbackVaryingEXT = (__ctype_glGetTransformFeedbackVaryingEXT) eglGetProcAddr("glGetTransformFeedbackVaryingEXT");
    }
    if (__glintercept_fnptr_glGetTransformFeedbackVaryingEXT == NULL) return NULL;
    return (void*) __glintercept_glGetTransformFeedbackVaryingEXT;
  }
  if (strcmp(name, "glGetTransformFeedbackVaryingNV") == 0) {
    if (__glintercept_fnptr_glGetTransformFeedbackVaryingNV == NULL) {
      __glintercept_fnptr_glGetTransformFeedbackVaryingNV = (__ctype_glGetTransformFeedbackVaryingNV) eglGetProcAddr("glGetTransformFeedbackVaryingNV");
    }
    if (__glintercept_fnptr_glGetTransformFeedbackVaryingNV == NULL) return NULL;
    return (void*) __glintercept_glGetTransformFeedbackVaryingNV;
  }
  if (strcmp(name, "glGetTransformFeedbacki64_v") == 0) {
    if (__glintercept_fnptr_glGetTransformFeedbacki64_v == NULL) {
      __glintercept_fnptr_glGetTransformFeedbacki64_v = (__ctype_glGetTransformFeedbacki64_v) eglGetProcAddr("glGetTransformFeedbacki64_v");
    }
    if (__glintercept_fnptr_glGetTransformFeedbacki64_v == NULL) return NULL;
    return (void*) __glintercept_glGetTransformFeedbacki64_v;
  }
  if (strcmp(name, "glGetTransformFeedbacki_v") == 0) {
    if (__glintercept_fnptr_glGetTransformFeedbacki_v == NULL) {
      __glintercept_fnptr_glGetTransformFeedbacki_v = (__ctype_glGetTransformFeedbacki_v) eglGetProcAddr("glGetTransformFeedbacki_v");
    }
    if (__glintercept_fnptr_glGetTransformFeedbacki_v == NULL) return NULL;
    return (void*) __glintercept_glGetTransformFeedbacki_v;
  }
  if (strcmp(name, "glGetTransformFeedbackiv") == 0) {
    if (__glintercept_fnptr_glGetTransformFeedbackiv == NULL) {
      __glintercept_fnptr_glGetTransformFeedbackiv = (__ctype_glGetTransformFeedbackiv) eglGetProcAddr("glGetTransformFeedbackiv");
    }
    if (__glintercept_fnptr_glGetTransformFeedbackiv == NULL) return NULL;
    return (void*) __glintercept_glGetTransformFeedbackiv;
  }
  if (strcmp(name, "glGetTranslatedShaderSourceANGLE") == 0) {
    if (__glintercept_fnptr_glGetTranslatedShaderSourceANGLE == NULL) {
      __glintercept_fnptr_glGetTranslatedShaderSourceANGLE = (__ctype_glGetTranslatedShaderSourceANGLE) eglGetProcAddr("glGetTranslatedShaderSourceANGLE");
    }
    if (__glintercept_fnptr_glGetTranslatedShaderSourceANGLE == NULL) return NULL;
    return (void*) __glintercept_glGetTranslatedShaderSourceANGLE;
  }
  if (strcmp(name, "glGetUniformBlockIndex") == 0) {
    if (__glintercept_fnptr_glGetUniformBlockIndex == NULL) {
      __glintercept_fnptr_glGetUniformBlockIndex = (__ctype_glGetUniformBlockIndex) eglGetProcAddr("glGetUniformBlockIndex");
    }
    if (__glintercept_fnptr_glGetUniformBlockIndex == NULL) return NULL;
    return (void*) __glintercept_glGetUniformBlockIndex;
  }
  if (strcmp(name, "glGetUniformBufferSizeEXT") == 0) {
    if (__glintercept_fnptr_glGetUniformBufferSizeEXT == NULL) {
      __glintercept_fnptr_glGetUniformBufferSizeEXT = (__ctype_glGetUniformBufferSizeEXT) eglGetProcAddr("glGetUniformBufferSizeEXT");
    }
    if (__glintercept_fnptr_glGetUniformBufferSizeEXT == NULL) return NULL;
    return (void*) __glintercept_glGetUniformBufferSizeEXT;
  }
  if (strcmp(name, "glGetUniformIndices") == 0) {
    if (__glintercept_fnptr_glGetUniformIndices == NULL) {
      __glintercept_fnptr_glGetUniformIndices = (__ctype_glGetUniformIndices) eglGetProcAddr("glGetUniformIndices");
    }
    if (__glintercept_fnptr_glGetUniformIndices == NULL) return NULL;
    return (void*) __glintercept_glGetUniformIndices;
  }
  if (strcmp(name, "glGetUniformLocation") == 0) {
    if (__glintercept_fnptr_glGetUniformLocation == NULL) {
      __glintercept_fnptr_glGetUniformLocation = (__ctype_glGetUniformLocation) eglGetProcAddr("glGetUniformLocation");
    }
    if (__glintercept_fnptr_glGetUniformLocation == NULL) return NULL;
    return (void*) __glintercept_glGetUniformLocation;
  }
  if (strcmp(name, "glGetUniformLocationARB") == 0) {
    if (__glintercept_fnptr_glGetUniformLocationARB == NULL) {
      __glintercept_fnptr_glGetUniformLocationARB = (__ctype_glGetUniformLocationARB) eglGetProcAddr("glGetUniformLocationARB");
    }
    if (__glintercept_fnptr_glGetUniformLocationARB == NULL) return NULL;
    return (void*) __glintercept_glGetUniformLocationARB;
  }
  if (strcmp(name, "glGetUniformOffsetEXT") == 0) {
    if (__glintercept_fnptr_glGetUniformOffsetEXT == NULL) {
      __glintercept_fnptr_glGetUniformOffsetEXT = (__ctype_glGetUniformOffsetEXT) eglGetProcAddr("glGetUniformOffsetEXT");
    }
    if (__glintercept_fnptr_glGetUniformOffsetEXT == NULL) return NULL;
    return (void*) __glintercept_glGetUniformOffsetEXT;
  }
  if (strcmp(name, "glGetUniformSubroutineuiv") == 0) {
    if (__glintercept_fnptr_glGetUniformSubroutineuiv == NULL) {
      __glintercept_fnptr_glGetUniformSubroutineuiv = (__ctype_glGetUniformSubroutineuiv) eglGetProcAddr("glGetUniformSubroutineuiv");
    }
    if (__glintercept_fnptr_glGetUniformSubroutineuiv == NULL) return NULL;
    return (void*) __glintercept_glGetUniformSubroutineuiv;
  }
  if (strcmp(name, "glGetUniformdv") == 0) {
    if (__glintercept_fnptr_glGetUniformdv == NULL) {
      __glintercept_fnptr_glGetUniformdv = (__ctype_glGetUniformdv) eglGetProcAddr("glGetUniformdv");
    }
    if (__glintercept_fnptr_glGetUniformdv == NULL) return NULL;
    return (void*) __glintercept_glGetUniformdv;
  }
  if (strcmp(name, "glGetUniformfv") == 0) {
    if (__glintercept_fnptr_glGetUniformfv == NULL) {
      __glintercept_fnptr_glGetUniformfv = (__ctype_glGetUniformfv) eglGetProcAddr("glGetUniformfv");
    }
    if (__glintercept_fnptr_glGetUniformfv == NULL) return NULL;
    return (void*) __glintercept_glGetUniformfv;
  }
  if (strcmp(name, "glGetUniformfvARB") == 0) {
    if (__glintercept_fnptr_glGetUniformfvARB == NULL) {
      __glintercept_fnptr_glGetUniformfvARB = (__ctype_glGetUniformfvARB) eglGetProcAddr("glGetUniformfvARB");
    }
    if (__glintercept_fnptr_glGetUniformfvARB == NULL) return NULL;
    return (void*) __glintercept_glGetUniformfvARB;
  }
  if (strcmp(name, "glGetUniformi64vARB") == 0) {
    if (__glintercept_fnptr_glGetUniformi64vARB == NULL) {
      __glintercept_fnptr_glGetUniformi64vARB = (__ctype_glGetUniformi64vARB) eglGetProcAddr("glGetUniformi64vARB");
    }
    if (__glintercept_fnptr_glGetUniformi64vARB == NULL) return NULL;
    return (void*) __glintercept_glGetUniformi64vARB;
  }
  if (strcmp(name, "glGetUniformi64vNV") == 0) {
    if (__glintercept_fnptr_glGetUniformi64vNV == NULL) {
      __glintercept_fnptr_glGetUniformi64vNV = (__ctype_glGetUniformi64vNV) eglGetProcAddr("glGetUniformi64vNV");
    }
    if (__glintercept_fnptr_glGetUniformi64vNV == NULL) return NULL;
    return (void*) __glintercept_glGetUniformi64vNV;
  }
  if (strcmp(name, "glGetUniformiv") == 0) {
    if (__glintercept_fnptr_glGetUniformiv == NULL) {
      __glintercept_fnptr_glGetUniformiv = (__ctype_glGetUniformiv) eglGetProcAddr("glGetUniformiv");
    }
    if (__glintercept_fnptr_glGetUniformiv == NULL) return NULL;
    return (void*) __glintercept_glGetUniformiv;
  }
  if (strcmp(name, "glGetUniformivARB") == 0) {
    if (__glintercept_fnptr_glGetUniformivARB == NULL) {
      __glintercept_fnptr_glGetUniformivARB = (__ctype_glGetUniformivARB) eglGetProcAddr("glGetUniformivARB");
    }
    if (__glintercept_fnptr_glGetUniformivARB == NULL) return NULL;
    return (void*) __glintercept_glGetUniformivARB;
  }
  if (strcmp(name, "glGetUniformui64vARB") == 0) {
    if (__glintercept_fnptr_glGetUniformui64vARB == NULL) {
      __glintercept_fnptr_glGetUniformui64vARB = (__ctype_glGetUniformui64vARB) eglGetProcAddr("glGetUniformui64vARB");
    }
    if (__glintercept_fnptr_glGetUniformui64vARB == NULL) return NULL;
    return (void*) __glintercept_glGetUniformui64vARB;
  }
  if (strcmp(name, "glGetUniformui64vNV") == 0) {
    if (__glintercept_fnptr_glGetUniformui64vNV == NULL) {
      __glintercept_fnptr_glGetUniformui64vNV = (__ctype_glGetUniformui64vNV) eglGetProcAddr("glGetUniformui64vNV");
    }
    if (__glintercept_fnptr_glGetUniformui64vNV == NULL) return NULL;
    return (void*) __glintercept_glGetUniformui64vNV;
  }
  if (strcmp(name, "glGetUniformuiv") == 0) {
    if (__glintercept_fnptr_glGetUniformuiv == NULL) {
      __glintercept_fnptr_glGetUniformuiv = (__ctype_glGetUniformuiv) eglGetProcAddr("glGetUniformuiv");
    }
    if (__glintercept_fnptr_glGetUniformuiv == NULL) return NULL;
    return (void*) __glintercept_glGetUniformuiv;
  }
  if (strcmp(name, "glGetUniformuivEXT") == 0) {
    if (__glintercept_fnptr_glGetUniformuivEXT == NULL) {
      __glintercept_fnptr_glGetUniformuivEXT = (__ctype_glGetUniformuivEXT) eglGetProcAddr("glGetUniformuivEXT");
    }
    if (__glintercept_fnptr_glGetUniformuivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetUniformuivEXT;
  }
  if (strcmp(name, "glGetUnsignedBytevEXT") == 0) {
    if (__glintercept_fnptr_glGetUnsignedBytevEXT == NULL) {
      __glintercept_fnptr_glGetUnsignedBytevEXT = (__ctype_glGetUnsignedBytevEXT) eglGetProcAddr("glGetUnsignedBytevEXT");
    }
    if (__glintercept_fnptr_glGetUnsignedBytevEXT == NULL) return NULL;
    return (void*) __glintercept_glGetUnsignedBytevEXT;
  }
  if (strcmp(name, "glGetUnsignedBytei_vEXT") == 0) {
    if (__glintercept_fnptr_glGetUnsignedBytei_vEXT == NULL) {
      __glintercept_fnptr_glGetUnsignedBytei_vEXT = (__ctype_glGetUnsignedBytei_vEXT) eglGetProcAddr("glGetUnsignedBytei_vEXT");
    }
    if (__glintercept_fnptr_glGetUnsignedBytei_vEXT == NULL) return NULL;
    return (void*) __glintercept_glGetUnsignedBytei_vEXT;
  }
  if (strcmp(name, "glGetVariantArrayObjectfvATI") == 0) {
    if (__glintercept_fnptr_glGetVariantArrayObjectfvATI == NULL) {
      __glintercept_fnptr_glGetVariantArrayObjectfvATI = (__ctype_glGetVariantArrayObjectfvATI) eglGetProcAddr("glGetVariantArrayObjectfvATI");
    }
    if (__glintercept_fnptr_glGetVariantArrayObjectfvATI == NULL) return NULL;
    return (void*) __glintercept_glGetVariantArrayObjectfvATI;
  }
  if (strcmp(name, "glGetVariantArrayObjectivATI") == 0) {
    if (__glintercept_fnptr_glGetVariantArrayObjectivATI == NULL) {
      __glintercept_fnptr_glGetVariantArrayObjectivATI = (__ctype_glGetVariantArrayObjectivATI) eglGetProcAddr("glGetVariantArrayObjectivATI");
    }
    if (__glintercept_fnptr_glGetVariantArrayObjectivATI == NULL) return NULL;
    return (void*) __glintercept_glGetVariantArrayObjectivATI;
  }
  if (strcmp(name, "glGetVariantBooleanvEXT") == 0) {
    if (__glintercept_fnptr_glGetVariantBooleanvEXT == NULL) {
      __glintercept_fnptr_glGetVariantBooleanvEXT = (__ctype_glGetVariantBooleanvEXT) eglGetProcAddr("glGetVariantBooleanvEXT");
    }
    if (__glintercept_fnptr_glGetVariantBooleanvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetVariantBooleanvEXT;
  }
  if (strcmp(name, "glGetVariantFloatvEXT") == 0) {
    if (__glintercept_fnptr_glGetVariantFloatvEXT == NULL) {
      __glintercept_fnptr_glGetVariantFloatvEXT = (__ctype_glGetVariantFloatvEXT) eglGetProcAddr("glGetVariantFloatvEXT");
    }
    if (__glintercept_fnptr_glGetVariantFloatvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetVariantFloatvEXT;
  }
  if (strcmp(name, "glGetVariantIntegervEXT") == 0) {
    if (__glintercept_fnptr_glGetVariantIntegervEXT == NULL) {
      __glintercept_fnptr_glGetVariantIntegervEXT = (__ctype_glGetVariantIntegervEXT) eglGetProcAddr("glGetVariantIntegervEXT");
    }
    if (__glintercept_fnptr_glGetVariantIntegervEXT == NULL) return NULL;
    return (void*) __glintercept_glGetVariantIntegervEXT;
  }
  if (strcmp(name, "glGetVariantPointervEXT") == 0) {
    if (__glintercept_fnptr_glGetVariantPointervEXT == NULL) {
      __glintercept_fnptr_glGetVariantPointervEXT = (__ctype_glGetVariantPointervEXT) eglGetProcAddr("glGetVariantPointervEXT");
    }
    if (__glintercept_fnptr_glGetVariantPointervEXT == NULL) return NULL;
    return (void*) __glintercept_glGetVariantPointervEXT;
  }
  if (strcmp(name, "glGetVaryingLocationNV") == 0) {
    if (__glintercept_fnptr_glGetVaryingLocationNV == NULL) {
      __glintercept_fnptr_glGetVaryingLocationNV = (__ctype_glGetVaryingLocationNV) eglGetProcAddr("glGetVaryingLocationNV");
    }
    if (__glintercept_fnptr_glGetVaryingLocationNV == NULL) return NULL;
    return (void*) __glintercept_glGetVaryingLocationNV;
  }
  if (strcmp(name, "glGetVertexArrayIndexed64iv") == 0) {
    if (__glintercept_fnptr_glGetVertexArrayIndexed64iv == NULL) {
      __glintercept_fnptr_glGetVertexArrayIndexed64iv = (__ctype_glGetVertexArrayIndexed64iv) eglGetProcAddr("glGetVertexArrayIndexed64iv");
    }
    if (__glintercept_fnptr_glGetVertexArrayIndexed64iv == NULL) return NULL;
    return (void*) __glintercept_glGetVertexArrayIndexed64iv;
  }
  if (strcmp(name, "glGetVertexArrayIndexediv") == 0) {
    if (__glintercept_fnptr_glGetVertexArrayIndexediv == NULL) {
      __glintercept_fnptr_glGetVertexArrayIndexediv = (__ctype_glGetVertexArrayIndexediv) eglGetProcAddr("glGetVertexArrayIndexediv");
    }
    if (__glintercept_fnptr_glGetVertexArrayIndexediv == NULL) return NULL;
    return (void*) __glintercept_glGetVertexArrayIndexediv;
  }
  if (strcmp(name, "glGetVertexArrayIntegeri_vEXT") == 0) {
    if (__glintercept_fnptr_glGetVertexArrayIntegeri_vEXT == NULL) {
      __glintercept_fnptr_glGetVertexArrayIntegeri_vEXT = (__ctype_glGetVertexArrayIntegeri_vEXT) eglGetProcAddr("glGetVertexArrayIntegeri_vEXT");
    }
    if (__glintercept_fnptr_glGetVertexArrayIntegeri_vEXT == NULL) return NULL;
    return (void*) __glintercept_glGetVertexArrayIntegeri_vEXT;
  }
  if (strcmp(name, "glGetVertexArrayIntegervEXT") == 0) {
    if (__glintercept_fnptr_glGetVertexArrayIntegervEXT == NULL) {
      __glintercept_fnptr_glGetVertexArrayIntegervEXT = (__ctype_glGetVertexArrayIntegervEXT) eglGetProcAddr("glGetVertexArrayIntegervEXT");
    }
    if (__glintercept_fnptr_glGetVertexArrayIntegervEXT == NULL) return NULL;
    return (void*) __glintercept_glGetVertexArrayIntegervEXT;
  }
  if (strcmp(name, "glGetVertexArrayPointeri_vEXT") == 0) {
    if (__glintercept_fnptr_glGetVertexArrayPointeri_vEXT == NULL) {
      __glintercept_fnptr_glGetVertexArrayPointeri_vEXT = (__ctype_glGetVertexArrayPointeri_vEXT) eglGetProcAddr("glGetVertexArrayPointeri_vEXT");
    }
    if (__glintercept_fnptr_glGetVertexArrayPointeri_vEXT == NULL) return NULL;
    return (void*) __glintercept_glGetVertexArrayPointeri_vEXT;
  }
  if (strcmp(name, "glGetVertexArrayPointervEXT") == 0) {
    if (__glintercept_fnptr_glGetVertexArrayPointervEXT == NULL) {
      __glintercept_fnptr_glGetVertexArrayPointervEXT = (__ctype_glGetVertexArrayPointervEXT) eglGetProcAddr("glGetVertexArrayPointervEXT");
    }
    if (__glintercept_fnptr_glGetVertexArrayPointervEXT == NULL) return NULL;
    return (void*) __glintercept_glGetVertexArrayPointervEXT;
  }
  if (strcmp(name, "glGetVertexArrayiv") == 0) {
    if (__glintercept_fnptr_glGetVertexArrayiv == NULL) {
      __glintercept_fnptr_glGetVertexArrayiv = (__ctype_glGetVertexArrayiv) eglGetProcAddr("glGetVertexArrayiv");
    }
    if (__glintercept_fnptr_glGetVertexArrayiv == NULL) return NULL;
    return (void*) __glintercept_glGetVertexArrayiv;
  }
  if (strcmp(name, "glGetVertexAttribArrayObjectfvATI") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribArrayObjectfvATI == NULL) {
      __glintercept_fnptr_glGetVertexAttribArrayObjectfvATI = (__ctype_glGetVertexAttribArrayObjectfvATI) eglGetProcAddr("glGetVertexAttribArrayObjectfvATI");
    }
    if (__glintercept_fnptr_glGetVertexAttribArrayObjectfvATI == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribArrayObjectfvATI;
  }
  if (strcmp(name, "glGetVertexAttribArrayObjectivATI") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribArrayObjectivATI == NULL) {
      __glintercept_fnptr_glGetVertexAttribArrayObjectivATI = (__ctype_glGetVertexAttribArrayObjectivATI) eglGetProcAddr("glGetVertexAttribArrayObjectivATI");
    }
    if (__glintercept_fnptr_glGetVertexAttribArrayObjectivATI == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribArrayObjectivATI;
  }
  if (strcmp(name, "glGetVertexAttribIiv") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribIiv == NULL) {
      __glintercept_fnptr_glGetVertexAttribIiv = (__ctype_glGetVertexAttribIiv) eglGetProcAddr("glGetVertexAttribIiv");
    }
    if (__glintercept_fnptr_glGetVertexAttribIiv == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribIiv;
  }
  if (strcmp(name, "glGetVertexAttribIivEXT") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribIivEXT == NULL) {
      __glintercept_fnptr_glGetVertexAttribIivEXT = (__ctype_glGetVertexAttribIivEXT) eglGetProcAddr("glGetVertexAttribIivEXT");
    }
    if (__glintercept_fnptr_glGetVertexAttribIivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribIivEXT;
  }
  if (strcmp(name, "glGetVertexAttribIuiv") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribIuiv == NULL) {
      __glintercept_fnptr_glGetVertexAttribIuiv = (__ctype_glGetVertexAttribIuiv) eglGetProcAddr("glGetVertexAttribIuiv");
    }
    if (__glintercept_fnptr_glGetVertexAttribIuiv == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribIuiv;
  }
  if (strcmp(name, "glGetVertexAttribIuivEXT") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribIuivEXT == NULL) {
      __glintercept_fnptr_glGetVertexAttribIuivEXT = (__ctype_glGetVertexAttribIuivEXT) eglGetProcAddr("glGetVertexAttribIuivEXT");
    }
    if (__glintercept_fnptr_glGetVertexAttribIuivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribIuivEXT;
  }
  if (strcmp(name, "glGetVertexAttribLdv") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribLdv == NULL) {
      __glintercept_fnptr_glGetVertexAttribLdv = (__ctype_glGetVertexAttribLdv) eglGetProcAddr("glGetVertexAttribLdv");
    }
    if (__glintercept_fnptr_glGetVertexAttribLdv == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribLdv;
  }
  if (strcmp(name, "glGetVertexAttribLdvEXT") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribLdvEXT == NULL) {
      __glintercept_fnptr_glGetVertexAttribLdvEXT = (__ctype_glGetVertexAttribLdvEXT) eglGetProcAddr("glGetVertexAttribLdvEXT");
    }
    if (__glintercept_fnptr_glGetVertexAttribLdvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribLdvEXT;
  }
  if (strcmp(name, "glGetVertexAttribLi64vNV") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribLi64vNV == NULL) {
      __glintercept_fnptr_glGetVertexAttribLi64vNV = (__ctype_glGetVertexAttribLi64vNV) eglGetProcAddr("glGetVertexAttribLi64vNV");
    }
    if (__glintercept_fnptr_glGetVertexAttribLi64vNV == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribLi64vNV;
  }
  if (strcmp(name, "glGetVertexAttribLui64vARB") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribLui64vARB == NULL) {
      __glintercept_fnptr_glGetVertexAttribLui64vARB = (__ctype_glGetVertexAttribLui64vARB) eglGetProcAddr("glGetVertexAttribLui64vARB");
    }
    if (__glintercept_fnptr_glGetVertexAttribLui64vARB == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribLui64vARB;
  }
  if (strcmp(name, "glGetVertexAttribLui64vNV") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribLui64vNV == NULL) {
      __glintercept_fnptr_glGetVertexAttribLui64vNV = (__ctype_glGetVertexAttribLui64vNV) eglGetProcAddr("glGetVertexAttribLui64vNV");
    }
    if (__glintercept_fnptr_glGetVertexAttribLui64vNV == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribLui64vNV;
  }
  if (strcmp(name, "glGetVertexAttribPointerv") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribPointerv == NULL) {
      __glintercept_fnptr_glGetVertexAttribPointerv = (__ctype_glGetVertexAttribPointerv) eglGetProcAddr("glGetVertexAttribPointerv");
    }
    if (__glintercept_fnptr_glGetVertexAttribPointerv == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribPointerv;
  }
  if (strcmp(name, "glGetVertexAttribPointervARB") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribPointervARB == NULL) {
      __glintercept_fnptr_glGetVertexAttribPointervARB = (__ctype_glGetVertexAttribPointervARB) eglGetProcAddr("glGetVertexAttribPointervARB");
    }
    if (__glintercept_fnptr_glGetVertexAttribPointervARB == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribPointervARB;
  }
  if (strcmp(name, "glGetVertexAttribPointervNV") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribPointervNV == NULL) {
      __glintercept_fnptr_glGetVertexAttribPointervNV = (__ctype_glGetVertexAttribPointervNV) eglGetProcAddr("glGetVertexAttribPointervNV");
    }
    if (__glintercept_fnptr_glGetVertexAttribPointervNV == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribPointervNV;
  }
  if (strcmp(name, "glGetVertexAttribdv") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribdv == NULL) {
      __glintercept_fnptr_glGetVertexAttribdv = (__ctype_glGetVertexAttribdv) eglGetProcAddr("glGetVertexAttribdv");
    }
    if (__glintercept_fnptr_glGetVertexAttribdv == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribdv;
  }
  if (strcmp(name, "glGetVertexAttribdvARB") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribdvARB == NULL) {
      __glintercept_fnptr_glGetVertexAttribdvARB = (__ctype_glGetVertexAttribdvARB) eglGetProcAddr("glGetVertexAttribdvARB");
    }
    if (__glintercept_fnptr_glGetVertexAttribdvARB == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribdvARB;
  }
  if (strcmp(name, "glGetVertexAttribdvNV") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribdvNV == NULL) {
      __glintercept_fnptr_glGetVertexAttribdvNV = (__ctype_glGetVertexAttribdvNV) eglGetProcAddr("glGetVertexAttribdvNV");
    }
    if (__glintercept_fnptr_glGetVertexAttribdvNV == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribdvNV;
  }
  if (strcmp(name, "glGetVertexAttribfv") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribfv == NULL) {
      __glintercept_fnptr_glGetVertexAttribfv = (__ctype_glGetVertexAttribfv) eglGetProcAddr("glGetVertexAttribfv");
    }
    if (__glintercept_fnptr_glGetVertexAttribfv == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribfv;
  }
  if (strcmp(name, "glGetVertexAttribfvARB") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribfvARB == NULL) {
      __glintercept_fnptr_glGetVertexAttribfvARB = (__ctype_glGetVertexAttribfvARB) eglGetProcAddr("glGetVertexAttribfvARB");
    }
    if (__glintercept_fnptr_glGetVertexAttribfvARB == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribfvARB;
  }
  if (strcmp(name, "glGetVertexAttribfvNV") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribfvNV == NULL) {
      __glintercept_fnptr_glGetVertexAttribfvNV = (__ctype_glGetVertexAttribfvNV) eglGetProcAddr("glGetVertexAttribfvNV");
    }
    if (__glintercept_fnptr_glGetVertexAttribfvNV == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribfvNV;
  }
  if (strcmp(name, "glGetVertexAttribiv") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribiv == NULL) {
      __glintercept_fnptr_glGetVertexAttribiv = (__ctype_glGetVertexAttribiv) eglGetProcAddr("glGetVertexAttribiv");
    }
    if (__glintercept_fnptr_glGetVertexAttribiv == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribiv;
  }
  if (strcmp(name, "glGetVertexAttribivARB") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribivARB == NULL) {
      __glintercept_fnptr_glGetVertexAttribivARB = (__ctype_glGetVertexAttribivARB) eglGetProcAddr("glGetVertexAttribivARB");
    }
    if (__glintercept_fnptr_glGetVertexAttribivARB == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribivARB;
  }
  if (strcmp(name, "glGetVertexAttribivNV") == 0) {
    if (__glintercept_fnptr_glGetVertexAttribivNV == NULL) {
      __glintercept_fnptr_glGetVertexAttribivNV = (__ctype_glGetVertexAttribivNV) eglGetProcAddr("glGetVertexAttribivNV");
    }
    if (__glintercept_fnptr_glGetVertexAttribivNV == NULL) return NULL;
    return (void*) __glintercept_glGetVertexAttribivNV;
  }
  if (strcmp(name, "glGetVideoCaptureStreamdvNV") == 0) {
    if (__glintercept_fnptr_glGetVideoCaptureStreamdvNV == NULL) {
      __glintercept_fnptr_glGetVideoCaptureStreamdvNV = (__ctype_glGetVideoCaptureStreamdvNV) eglGetProcAddr("glGetVideoCaptureStreamdvNV");
    }
    if (__glintercept_fnptr_glGetVideoCaptureStreamdvNV == NULL) return NULL;
    return (void*) __glintercept_glGetVideoCaptureStreamdvNV;
  }
  if (strcmp(name, "glGetVideoCaptureStreamfvNV") == 0) {
    if (__glintercept_fnptr_glGetVideoCaptureStreamfvNV == NULL) {
      __glintercept_fnptr_glGetVideoCaptureStreamfvNV = (__ctype_glGetVideoCaptureStreamfvNV) eglGetProcAddr("glGetVideoCaptureStreamfvNV");
    }
    if (__glintercept_fnptr_glGetVideoCaptureStreamfvNV == NULL) return NULL;
    return (void*) __glintercept_glGetVideoCaptureStreamfvNV;
  }
  if (strcmp(name, "glGetVideoCaptureStreamivNV") == 0) {
    if (__glintercept_fnptr_glGetVideoCaptureStreamivNV == NULL) {
      __glintercept_fnptr_glGetVideoCaptureStreamivNV = (__ctype_glGetVideoCaptureStreamivNV) eglGetProcAddr("glGetVideoCaptureStreamivNV");
    }
    if (__glintercept_fnptr_glGetVideoCaptureStreamivNV == NULL) return NULL;
    return (void*) __glintercept_glGetVideoCaptureStreamivNV;
  }
  if (strcmp(name, "glGetVideoCaptureivNV") == 0) {
    if (__glintercept_fnptr_glGetVideoCaptureivNV == NULL) {
      __glintercept_fnptr_glGetVideoCaptureivNV = (__ctype_glGetVideoCaptureivNV) eglGetProcAddr("glGetVideoCaptureivNV");
    }
    if (__glintercept_fnptr_glGetVideoCaptureivNV == NULL) return NULL;
    return (void*) __glintercept_glGetVideoCaptureivNV;
  }
  if (strcmp(name, "glGetVideoi64vNV") == 0) {
    if (__glintercept_fnptr_glGetVideoi64vNV == NULL) {
      __glintercept_fnptr_glGetVideoi64vNV = (__ctype_glGetVideoi64vNV) eglGetProcAddr("glGetVideoi64vNV");
    }
    if (__glintercept_fnptr_glGetVideoi64vNV == NULL) return NULL;
    return (void*) __glintercept_glGetVideoi64vNV;
  }
  if (strcmp(name, "glGetVideoivNV") == 0) {
    if (__glintercept_fnptr_glGetVideoivNV == NULL) {
      __glintercept_fnptr_glGetVideoivNV = (__ctype_glGetVideoivNV) eglGetProcAddr("glGetVideoivNV");
    }
    if (__glintercept_fnptr_glGetVideoivNV == NULL) return NULL;
    return (void*) __glintercept_glGetVideoivNV;
  }
  if (strcmp(name, "glGetVideoui64vNV") == 0) {
    if (__glintercept_fnptr_glGetVideoui64vNV == NULL) {
      __glintercept_fnptr_glGetVideoui64vNV = (__ctype_glGetVideoui64vNV) eglGetProcAddr("glGetVideoui64vNV");
    }
    if (__glintercept_fnptr_glGetVideoui64vNV == NULL) return NULL;
    return (void*) __glintercept_glGetVideoui64vNV;
  }
  if (strcmp(name, "glGetVideouivNV") == 0) {
    if (__glintercept_fnptr_glGetVideouivNV == NULL) {
      __glintercept_fnptr_glGetVideouivNV = (__ctype_glGetVideouivNV) eglGetProcAddr("glGetVideouivNV");
    }
    if (__glintercept_fnptr_glGetVideouivNV == NULL) return NULL;
    return (void*) __glintercept_glGetVideouivNV;
  }
  if (strcmp(name, "glGetnColorTable") == 0) {
    if (__glintercept_fnptr_glGetnColorTable == NULL) {
      __glintercept_fnptr_glGetnColorTable = (__ctype_glGetnColorTable) eglGetProcAddr("glGetnColorTable");
    }
    if (__glintercept_fnptr_glGetnColorTable == NULL) return NULL;
    return (void*) __glintercept_glGetnColorTable;
  }
  if (strcmp(name, "glGetnColorTableARB") == 0) {
    if (__glintercept_fnptr_glGetnColorTableARB == NULL) {
      __glintercept_fnptr_glGetnColorTableARB = (__ctype_glGetnColorTableARB) eglGetProcAddr("glGetnColorTableARB");
    }
    if (__glintercept_fnptr_glGetnColorTableARB == NULL) return NULL;
    return (void*) __glintercept_glGetnColorTableARB;
  }
  if (strcmp(name, "glGetnCompressedTexImage") == 0) {
    if (__glintercept_fnptr_glGetnCompressedTexImage == NULL) {
      __glintercept_fnptr_glGetnCompressedTexImage = (__ctype_glGetnCompressedTexImage) eglGetProcAddr("glGetnCompressedTexImage");
    }
    if (__glintercept_fnptr_glGetnCompressedTexImage == NULL) return NULL;
    return (void*) __glintercept_glGetnCompressedTexImage;
  }
  if (strcmp(name, "glGetnCompressedTexImageARB") == 0) {
    if (__glintercept_fnptr_glGetnCompressedTexImageARB == NULL) {
      __glintercept_fnptr_glGetnCompressedTexImageARB = (__ctype_glGetnCompressedTexImageARB) eglGetProcAddr("glGetnCompressedTexImageARB");
    }
    if (__glintercept_fnptr_glGetnCompressedTexImageARB == NULL) return NULL;
    return (void*) __glintercept_glGetnCompressedTexImageARB;
  }
  if (strcmp(name, "glGetnConvolutionFilter") == 0) {
    if (__glintercept_fnptr_glGetnConvolutionFilter == NULL) {
      __glintercept_fnptr_glGetnConvolutionFilter = (__ctype_glGetnConvolutionFilter) eglGetProcAddr("glGetnConvolutionFilter");
    }
    if (__glintercept_fnptr_glGetnConvolutionFilter == NULL) return NULL;
    return (void*) __glintercept_glGetnConvolutionFilter;
  }
  if (strcmp(name, "glGetnConvolutionFilterARB") == 0) {
    if (__glintercept_fnptr_glGetnConvolutionFilterARB == NULL) {
      __glintercept_fnptr_glGetnConvolutionFilterARB = (__ctype_glGetnConvolutionFilterARB) eglGetProcAddr("glGetnConvolutionFilterARB");
    }
    if (__glintercept_fnptr_glGetnConvolutionFilterARB == NULL) return NULL;
    return (void*) __glintercept_glGetnConvolutionFilterARB;
  }
  if (strcmp(name, "glGetnHistogram") == 0) {
    if (__glintercept_fnptr_glGetnHistogram == NULL) {
      __glintercept_fnptr_glGetnHistogram = (__ctype_glGetnHistogram) eglGetProcAddr("glGetnHistogram");
    }
    if (__glintercept_fnptr_glGetnHistogram == NULL) return NULL;
    return (void*) __glintercept_glGetnHistogram;
  }
  if (strcmp(name, "glGetnHistogramARB") == 0) {
    if (__glintercept_fnptr_glGetnHistogramARB == NULL) {
      __glintercept_fnptr_glGetnHistogramARB = (__ctype_glGetnHistogramARB) eglGetProcAddr("glGetnHistogramARB");
    }
    if (__glintercept_fnptr_glGetnHistogramARB == NULL) return NULL;
    return (void*) __glintercept_glGetnHistogramARB;
  }
  if (strcmp(name, "glGetnMapdv") == 0) {
    if (__glintercept_fnptr_glGetnMapdv == NULL) {
      __glintercept_fnptr_glGetnMapdv = (__ctype_glGetnMapdv) eglGetProcAddr("glGetnMapdv");
    }
    if (__glintercept_fnptr_glGetnMapdv == NULL) return NULL;
    return (void*) __glintercept_glGetnMapdv;
  }
  if (strcmp(name, "glGetnMapdvARB") == 0) {
    if (__glintercept_fnptr_glGetnMapdvARB == NULL) {
      __glintercept_fnptr_glGetnMapdvARB = (__ctype_glGetnMapdvARB) eglGetProcAddr("glGetnMapdvARB");
    }
    if (__glintercept_fnptr_glGetnMapdvARB == NULL) return NULL;
    return (void*) __glintercept_glGetnMapdvARB;
  }
  if (strcmp(name, "glGetnMapfv") == 0) {
    if (__glintercept_fnptr_glGetnMapfv == NULL) {
      __glintercept_fnptr_glGetnMapfv = (__ctype_glGetnMapfv) eglGetProcAddr("glGetnMapfv");
    }
    if (__glintercept_fnptr_glGetnMapfv == NULL) return NULL;
    return (void*) __glintercept_glGetnMapfv;
  }
  if (strcmp(name, "glGetnMapfvARB") == 0) {
    if (__glintercept_fnptr_glGetnMapfvARB == NULL) {
      __glintercept_fnptr_glGetnMapfvARB = (__ctype_glGetnMapfvARB) eglGetProcAddr("glGetnMapfvARB");
    }
    if (__glintercept_fnptr_glGetnMapfvARB == NULL) return NULL;
    return (void*) __glintercept_glGetnMapfvARB;
  }
  if (strcmp(name, "glGetnMapiv") == 0) {
    if (__glintercept_fnptr_glGetnMapiv == NULL) {
      __glintercept_fnptr_glGetnMapiv = (__ctype_glGetnMapiv) eglGetProcAddr("glGetnMapiv");
    }
    if (__glintercept_fnptr_glGetnMapiv == NULL) return NULL;
    return (void*) __glintercept_glGetnMapiv;
  }
  if (strcmp(name, "glGetnMapivARB") == 0) {
    if (__glintercept_fnptr_glGetnMapivARB == NULL) {
      __glintercept_fnptr_glGetnMapivARB = (__ctype_glGetnMapivARB) eglGetProcAddr("glGetnMapivARB");
    }
    if (__glintercept_fnptr_glGetnMapivARB == NULL) return NULL;
    return (void*) __glintercept_glGetnMapivARB;
  }
  if (strcmp(name, "glGetnMinmax") == 0) {
    if (__glintercept_fnptr_glGetnMinmax == NULL) {
      __glintercept_fnptr_glGetnMinmax = (__ctype_glGetnMinmax) eglGetProcAddr("glGetnMinmax");
    }
    if (__glintercept_fnptr_glGetnMinmax == NULL) return NULL;
    return (void*) __glintercept_glGetnMinmax;
  }
  if (strcmp(name, "glGetnMinmaxARB") == 0) {
    if (__glintercept_fnptr_glGetnMinmaxARB == NULL) {
      __glintercept_fnptr_glGetnMinmaxARB = (__ctype_glGetnMinmaxARB) eglGetProcAddr("glGetnMinmaxARB");
    }
    if (__glintercept_fnptr_glGetnMinmaxARB == NULL) return NULL;
    return (void*) __glintercept_glGetnMinmaxARB;
  }
  if (strcmp(name, "glGetnPixelMapfv") == 0) {
    if (__glintercept_fnptr_glGetnPixelMapfv == NULL) {
      __glintercept_fnptr_glGetnPixelMapfv = (__ctype_glGetnPixelMapfv) eglGetProcAddr("glGetnPixelMapfv");
    }
    if (__glintercept_fnptr_glGetnPixelMapfv == NULL) return NULL;
    return (void*) __glintercept_glGetnPixelMapfv;
  }
  if (strcmp(name, "glGetnPixelMapfvARB") == 0) {
    if (__glintercept_fnptr_glGetnPixelMapfvARB == NULL) {
      __glintercept_fnptr_glGetnPixelMapfvARB = (__ctype_glGetnPixelMapfvARB) eglGetProcAddr("glGetnPixelMapfvARB");
    }
    if (__glintercept_fnptr_glGetnPixelMapfvARB == NULL) return NULL;
    return (void*) __glintercept_glGetnPixelMapfvARB;
  }
  if (strcmp(name, "glGetnPixelMapuiv") == 0) {
    if (__glintercept_fnptr_glGetnPixelMapuiv == NULL) {
      __glintercept_fnptr_glGetnPixelMapuiv = (__ctype_glGetnPixelMapuiv) eglGetProcAddr("glGetnPixelMapuiv");
    }
    if (__glintercept_fnptr_glGetnPixelMapuiv == NULL) return NULL;
    return (void*) __glintercept_glGetnPixelMapuiv;
  }
  if (strcmp(name, "glGetnPixelMapuivARB") == 0) {
    if (__glintercept_fnptr_glGetnPixelMapuivARB == NULL) {
      __glintercept_fnptr_glGetnPixelMapuivARB = (__ctype_glGetnPixelMapuivARB) eglGetProcAddr("glGetnPixelMapuivARB");
    }
    if (__glintercept_fnptr_glGetnPixelMapuivARB == NULL) return NULL;
    return (void*) __glintercept_glGetnPixelMapuivARB;
  }
  if (strcmp(name, "glGetnPixelMapusv") == 0) {
    if (__glintercept_fnptr_glGetnPixelMapusv == NULL) {
      __glintercept_fnptr_glGetnPixelMapusv = (__ctype_glGetnPixelMapusv) eglGetProcAddr("glGetnPixelMapusv");
    }
    if (__glintercept_fnptr_glGetnPixelMapusv == NULL) return NULL;
    return (void*) __glintercept_glGetnPixelMapusv;
  }
  if (strcmp(name, "glGetnPixelMapusvARB") == 0) {
    if (__glintercept_fnptr_glGetnPixelMapusvARB == NULL) {
      __glintercept_fnptr_glGetnPixelMapusvARB = (__ctype_glGetnPixelMapusvARB) eglGetProcAddr("glGetnPixelMapusvARB");
    }
    if (__glintercept_fnptr_glGetnPixelMapusvARB == NULL) return NULL;
    return (void*) __glintercept_glGetnPixelMapusvARB;
  }
  if (strcmp(name, "glGetnPolygonStipple") == 0) {
    if (__glintercept_fnptr_glGetnPolygonStipple == NULL) {
      __glintercept_fnptr_glGetnPolygonStipple = (__ctype_glGetnPolygonStipple) eglGetProcAddr("glGetnPolygonStipple");
    }
    if (__glintercept_fnptr_glGetnPolygonStipple == NULL) return NULL;
    return (void*) __glintercept_glGetnPolygonStipple;
  }
  if (strcmp(name, "glGetnPolygonStippleARB") == 0) {
    if (__glintercept_fnptr_glGetnPolygonStippleARB == NULL) {
      __glintercept_fnptr_glGetnPolygonStippleARB = (__ctype_glGetnPolygonStippleARB) eglGetProcAddr("glGetnPolygonStippleARB");
    }
    if (__glintercept_fnptr_glGetnPolygonStippleARB == NULL) return NULL;
    return (void*) __glintercept_glGetnPolygonStippleARB;
  }
  if (strcmp(name, "glGetnSeparableFilter") == 0) {
    if (__glintercept_fnptr_glGetnSeparableFilter == NULL) {
      __glintercept_fnptr_glGetnSeparableFilter = (__ctype_glGetnSeparableFilter) eglGetProcAddr("glGetnSeparableFilter");
    }
    if (__glintercept_fnptr_glGetnSeparableFilter == NULL) return NULL;
    return (void*) __glintercept_glGetnSeparableFilter;
  }
  if (strcmp(name, "glGetnSeparableFilterARB") == 0) {
    if (__glintercept_fnptr_glGetnSeparableFilterARB == NULL) {
      __glintercept_fnptr_glGetnSeparableFilterARB = (__ctype_glGetnSeparableFilterARB) eglGetProcAddr("glGetnSeparableFilterARB");
    }
    if (__glintercept_fnptr_glGetnSeparableFilterARB == NULL) return NULL;
    return (void*) __glintercept_glGetnSeparableFilterARB;
  }
  if (strcmp(name, "glGetnTexImage") == 0) {
    if (__glintercept_fnptr_glGetnTexImage == NULL) {
      __glintercept_fnptr_glGetnTexImage = (__ctype_glGetnTexImage) eglGetProcAddr("glGetnTexImage");
    }
    if (__glintercept_fnptr_glGetnTexImage == NULL) return NULL;
    return (void*) __glintercept_glGetnTexImage;
  }
  if (strcmp(name, "glGetnTexImageARB") == 0) {
    if (__glintercept_fnptr_glGetnTexImageARB == NULL) {
      __glintercept_fnptr_glGetnTexImageARB = (__ctype_glGetnTexImageARB) eglGetProcAddr("glGetnTexImageARB");
    }
    if (__glintercept_fnptr_glGetnTexImageARB == NULL) return NULL;
    return (void*) __glintercept_glGetnTexImageARB;
  }
  if (strcmp(name, "glGetnUniformdv") == 0) {
    if (__glintercept_fnptr_glGetnUniformdv == NULL) {
      __glintercept_fnptr_glGetnUniformdv = (__ctype_glGetnUniformdv) eglGetProcAddr("glGetnUniformdv");
    }
    if (__glintercept_fnptr_glGetnUniformdv == NULL) return NULL;
    return (void*) __glintercept_glGetnUniformdv;
  }
  if (strcmp(name, "glGetnUniformdvARB") == 0) {
    if (__glintercept_fnptr_glGetnUniformdvARB == NULL) {
      __glintercept_fnptr_glGetnUniformdvARB = (__ctype_glGetnUniformdvARB) eglGetProcAddr("glGetnUniformdvARB");
    }
    if (__glintercept_fnptr_glGetnUniformdvARB == NULL) return NULL;
    return (void*) __glintercept_glGetnUniformdvARB;
  }
  if (strcmp(name, "glGetnUniformfv") == 0) {
    if (__glintercept_fnptr_glGetnUniformfv == NULL) {
      __glintercept_fnptr_glGetnUniformfv = (__ctype_glGetnUniformfv) eglGetProcAddr("glGetnUniformfv");
    }
    if (__glintercept_fnptr_glGetnUniformfv == NULL) return NULL;
    return (void*) __glintercept_glGetnUniformfv;
  }
  if (strcmp(name, "glGetnUniformfvARB") == 0) {
    if (__glintercept_fnptr_glGetnUniformfvARB == NULL) {
      __glintercept_fnptr_glGetnUniformfvARB = (__ctype_glGetnUniformfvARB) eglGetProcAddr("glGetnUniformfvARB");
    }
    if (__glintercept_fnptr_glGetnUniformfvARB == NULL) return NULL;
    return (void*) __glintercept_glGetnUniformfvARB;
  }
  if (strcmp(name, "glGetnUniformfvEXT") == 0) {
    if (__glintercept_fnptr_glGetnUniformfvEXT == NULL) {
      __glintercept_fnptr_glGetnUniformfvEXT = (__ctype_glGetnUniformfvEXT) eglGetProcAddr("glGetnUniformfvEXT");
    }
    if (__glintercept_fnptr_glGetnUniformfvEXT == NULL) return NULL;
    return (void*) __glintercept_glGetnUniformfvEXT;
  }
  if (strcmp(name, "glGetnUniformfvKHR") == 0) {
    if (__glintercept_fnptr_glGetnUniformfvKHR == NULL) {
      __glintercept_fnptr_glGetnUniformfvKHR = (__ctype_glGetnUniformfvKHR) eglGetProcAddr("glGetnUniformfvKHR");
    }
    if (__glintercept_fnptr_glGetnUniformfvKHR == NULL) return NULL;
    return (void*) __glintercept_glGetnUniformfvKHR;
  }
  if (strcmp(name, "glGetnUniformi64vARB") == 0) {
    if (__glintercept_fnptr_glGetnUniformi64vARB == NULL) {
      __glintercept_fnptr_glGetnUniformi64vARB = (__ctype_glGetnUniformi64vARB) eglGetProcAddr("glGetnUniformi64vARB");
    }
    if (__glintercept_fnptr_glGetnUniformi64vARB == NULL) return NULL;
    return (void*) __glintercept_glGetnUniformi64vARB;
  }
  if (strcmp(name, "glGetnUniformiv") == 0) {
    if (__glintercept_fnptr_glGetnUniformiv == NULL) {
      __glintercept_fnptr_glGetnUniformiv = (__ctype_glGetnUniformiv) eglGetProcAddr("glGetnUniformiv");
    }
    if (__glintercept_fnptr_glGetnUniformiv == NULL) return NULL;
    return (void*) __glintercept_glGetnUniformiv;
  }
  if (strcmp(name, "glGetnUniformivARB") == 0) {
    if (__glintercept_fnptr_glGetnUniformivARB == NULL) {
      __glintercept_fnptr_glGetnUniformivARB = (__ctype_glGetnUniformivARB) eglGetProcAddr("glGetnUniformivARB");
    }
    if (__glintercept_fnptr_glGetnUniformivARB == NULL) return NULL;
    return (void*) __glintercept_glGetnUniformivARB;
  }
  if (strcmp(name, "glGetnUniformivEXT") == 0) {
    if (__glintercept_fnptr_glGetnUniformivEXT == NULL) {
      __glintercept_fnptr_glGetnUniformivEXT = (__ctype_glGetnUniformivEXT) eglGetProcAddr("glGetnUniformivEXT");
    }
    if (__glintercept_fnptr_glGetnUniformivEXT == NULL) return NULL;
    return (void*) __glintercept_glGetnUniformivEXT;
  }
  if (strcmp(name, "glGetnUniformivKHR") == 0) {
    if (__glintercept_fnptr_glGetnUniformivKHR == NULL) {
      __glintercept_fnptr_glGetnUniformivKHR = (__ctype_glGetnUniformivKHR) eglGetProcAddr("glGetnUniformivKHR");
    }
    if (__glintercept_fnptr_glGetnUniformivKHR == NULL) return NULL;
    return (void*) __glintercept_glGetnUniformivKHR;
  }
  if (strcmp(name, "glGetnUniformui64vARB") == 0) {
    if (__glintercept_fnptr_glGetnUniformui64vARB == NULL) {
      __glintercept_fnptr_glGetnUniformui64vARB = (__ctype_glGetnUniformui64vARB) eglGetProcAddr("glGetnUniformui64vARB");
    }
    if (__glintercept_fnptr_glGetnUniformui64vARB == NULL) return NULL;
    return (void*) __glintercept_glGetnUniformui64vARB;
  }
  if (strcmp(name, "glGetnUniformuiv") == 0) {
    if (__glintercept_fnptr_glGetnUniformuiv == NULL) {
      __glintercept_fnptr_glGetnUniformuiv = (__ctype_glGetnUniformuiv) eglGetProcAddr("glGetnUniformuiv");
    }
    if (__glintercept_fnptr_glGetnUniformuiv == NULL) return NULL;
    return (void*) __glintercept_glGetnUniformuiv;
  }
  if (strcmp(name, "glGetnUniformuivARB") == 0) {
    if (__glintercept_fnptr_glGetnUniformuivARB == NULL) {
      __glintercept_fnptr_glGetnUniformuivARB = (__ctype_glGetnUniformuivARB) eglGetProcAddr("glGetnUniformuivARB");
    }
    if (__glintercept_fnptr_glGetnUniformuivARB == NULL) return NULL;
    return (void*) __glintercept_glGetnUniformuivARB;
  }
  if (strcmp(name, "glGetnUniformuivKHR") == 0) {
    if (__glintercept_fnptr_glGetnUniformuivKHR == NULL) {
      __glintercept_fnptr_glGetnUniformuivKHR = (__ctype_glGetnUniformuivKHR) eglGetProcAddr("glGetnUniformuivKHR");
    }
    if (__glintercept_fnptr_glGetnUniformuivKHR == NULL) return NULL;
    return (void*) __glintercept_glGetnUniformuivKHR;
  }
  if (strcmp(name, "glGlobalAlphaFactorbSUN") == 0) {
    if (__glintercept_fnptr_glGlobalAlphaFactorbSUN == NULL) {
      __glintercept_fnptr_glGlobalAlphaFactorbSUN = (__ctype_glGlobalAlphaFactorbSUN) eglGetProcAddr("glGlobalAlphaFactorbSUN");
    }
    if (__glintercept_fnptr_glGlobalAlphaFactorbSUN == NULL) return NULL;
    return (void*) __glintercept_glGlobalAlphaFactorbSUN;
  }
  if (strcmp(name, "glGlobalAlphaFactordSUN") == 0) {
    if (__glintercept_fnptr_glGlobalAlphaFactordSUN == NULL) {
      __glintercept_fnptr_glGlobalAlphaFactordSUN = (__ctype_glGlobalAlphaFactordSUN) eglGetProcAddr("glGlobalAlphaFactordSUN");
    }
    if (__glintercept_fnptr_glGlobalAlphaFactordSUN == NULL) return NULL;
    return (void*) __glintercept_glGlobalAlphaFactordSUN;
  }
  if (strcmp(name, "glGlobalAlphaFactorfSUN") == 0) {
    if (__glintercept_fnptr_glGlobalAlphaFactorfSUN == NULL) {
      __glintercept_fnptr_glGlobalAlphaFactorfSUN = (__ctype_glGlobalAlphaFactorfSUN) eglGetProcAddr("glGlobalAlphaFactorfSUN");
    }
    if (__glintercept_fnptr_glGlobalAlphaFactorfSUN == NULL) return NULL;
    return (void*) __glintercept_glGlobalAlphaFactorfSUN;
  }
  if (strcmp(name, "glGlobalAlphaFactoriSUN") == 0) {
    if (__glintercept_fnptr_glGlobalAlphaFactoriSUN == NULL) {
      __glintercept_fnptr_glGlobalAlphaFactoriSUN = (__ctype_glGlobalAlphaFactoriSUN) eglGetProcAddr("glGlobalAlphaFactoriSUN");
    }
    if (__glintercept_fnptr_glGlobalAlphaFactoriSUN == NULL) return NULL;
    return (void*) __glintercept_glGlobalAlphaFactoriSUN;
  }
  if (strcmp(name, "glGlobalAlphaFactorsSUN") == 0) {
    if (__glintercept_fnptr_glGlobalAlphaFactorsSUN == NULL) {
      __glintercept_fnptr_glGlobalAlphaFactorsSUN = (__ctype_glGlobalAlphaFactorsSUN) eglGetProcAddr("glGlobalAlphaFactorsSUN");
    }
    if (__glintercept_fnptr_glGlobalAlphaFactorsSUN == NULL) return NULL;
    return (void*) __glintercept_glGlobalAlphaFactorsSUN;
  }
  if (strcmp(name, "glGlobalAlphaFactorubSUN") == 0) {
    if (__glintercept_fnptr_glGlobalAlphaFactorubSUN == NULL) {
      __glintercept_fnptr_glGlobalAlphaFactorubSUN = (__ctype_glGlobalAlphaFactorubSUN) eglGetProcAddr("glGlobalAlphaFactorubSUN");
    }
    if (__glintercept_fnptr_glGlobalAlphaFactorubSUN == NULL) return NULL;
    return (void*) __glintercept_glGlobalAlphaFactorubSUN;
  }
  if (strcmp(name, "glGlobalAlphaFactoruiSUN") == 0) {
    if (__glintercept_fnptr_glGlobalAlphaFactoruiSUN == NULL) {
      __glintercept_fnptr_glGlobalAlphaFactoruiSUN = (__ctype_glGlobalAlphaFactoruiSUN) eglGetProcAddr("glGlobalAlphaFactoruiSUN");
    }
    if (__glintercept_fnptr_glGlobalAlphaFactoruiSUN == NULL) return NULL;
    return (void*) __glintercept_glGlobalAlphaFactoruiSUN;
  }
  if (strcmp(name, "glGlobalAlphaFactorusSUN") == 0) {
    if (__glintercept_fnptr_glGlobalAlphaFactorusSUN == NULL) {
      __glintercept_fnptr_glGlobalAlphaFactorusSUN = (__ctype_glGlobalAlphaFactorusSUN) eglGetProcAddr("glGlobalAlphaFactorusSUN");
    }
    if (__glintercept_fnptr_glGlobalAlphaFactorusSUN == NULL) return NULL;
    return (void*) __glintercept_glGlobalAlphaFactorusSUN;
  }
  if (strcmp(name, "glHint") == 0) {
    if (__glintercept_fnptr_glHint == NULL) {
      __glintercept_fnptr_glHint = (__ctype_glHint) eglGetProcAddr("glHint");
    }
    if (__glintercept_fnptr_glHint == NULL) return NULL;
    return (void*) __glintercept_glHint;
  }
  if (strcmp(name, "glHintPGI") == 0) {
    if (__glintercept_fnptr_glHintPGI == NULL) {
      __glintercept_fnptr_glHintPGI = (__ctype_glHintPGI) eglGetProcAddr("glHintPGI");
    }
    if (__glintercept_fnptr_glHintPGI == NULL) return NULL;
    return (void*) __glintercept_glHintPGI;
  }
  if (strcmp(name, "glHistogram") == 0) {
    if (__glintercept_fnptr_glHistogram == NULL) {
      __glintercept_fnptr_glHistogram = (__ctype_glHistogram) eglGetProcAddr("glHistogram");
    }
    if (__glintercept_fnptr_glHistogram == NULL) return NULL;
    return (void*) __glintercept_glHistogram;
  }
  if (strcmp(name, "glHistogramEXT") == 0) {
    if (__glintercept_fnptr_glHistogramEXT == NULL) {
      __glintercept_fnptr_glHistogramEXT = (__ctype_glHistogramEXT) eglGetProcAddr("glHistogramEXT");
    }
    if (__glintercept_fnptr_glHistogramEXT == NULL) return NULL;
    return (void*) __glintercept_glHistogramEXT;
  }
  if (strcmp(name, "glIglooInterfaceSGIX") == 0) {
    if (__glintercept_fnptr_glIglooInterfaceSGIX == NULL) {
      __glintercept_fnptr_glIglooInterfaceSGIX = (__ctype_glIglooInterfaceSGIX) eglGetProcAddr("glIglooInterfaceSGIX");
    }
    if (__glintercept_fnptr_glIglooInterfaceSGIX == NULL) return NULL;
    return (void*) __glintercept_glIglooInterfaceSGIX;
  }
  if (strcmp(name, "glImageTransformParameterfHP") == 0) {
    if (__glintercept_fnptr_glImageTransformParameterfHP == NULL) {
      __glintercept_fnptr_glImageTransformParameterfHP = (__ctype_glImageTransformParameterfHP) eglGetProcAddr("glImageTransformParameterfHP");
    }
    if (__glintercept_fnptr_glImageTransformParameterfHP == NULL) return NULL;
    return (void*) __glintercept_glImageTransformParameterfHP;
  }
  if (strcmp(name, "glImageTransformParameterfvHP") == 0) {
    if (__glintercept_fnptr_glImageTransformParameterfvHP == NULL) {
      __glintercept_fnptr_glImageTransformParameterfvHP = (__ctype_glImageTransformParameterfvHP) eglGetProcAddr("glImageTransformParameterfvHP");
    }
    if (__glintercept_fnptr_glImageTransformParameterfvHP == NULL) return NULL;
    return (void*) __glintercept_glImageTransformParameterfvHP;
  }
  if (strcmp(name, "glImageTransformParameteriHP") == 0) {
    if (__glintercept_fnptr_glImageTransformParameteriHP == NULL) {
      __glintercept_fnptr_glImageTransformParameteriHP = (__ctype_glImageTransformParameteriHP) eglGetProcAddr("glImageTransformParameteriHP");
    }
    if (__glintercept_fnptr_glImageTransformParameteriHP == NULL) return NULL;
    return (void*) __glintercept_glImageTransformParameteriHP;
  }
  if (strcmp(name, "glImageTransformParameterivHP") == 0) {
    if (__glintercept_fnptr_glImageTransformParameterivHP == NULL) {
      __glintercept_fnptr_glImageTransformParameterivHP = (__ctype_glImageTransformParameterivHP) eglGetProcAddr("glImageTransformParameterivHP");
    }
    if (__glintercept_fnptr_glImageTransformParameterivHP == NULL) return NULL;
    return (void*) __glintercept_glImageTransformParameterivHP;
  }
  if (strcmp(name, "glImportMemoryFdEXT") == 0) {
    if (__glintercept_fnptr_glImportMemoryFdEXT == NULL) {
      __glintercept_fnptr_glImportMemoryFdEXT = (__ctype_glImportMemoryFdEXT) eglGetProcAddr("glImportMemoryFdEXT");
    }
    if (__glintercept_fnptr_glImportMemoryFdEXT == NULL) return NULL;
    return (void*) __glintercept_glImportMemoryFdEXT;
  }
  if (strcmp(name, "glImportMemoryWin32HandleEXT") == 0) {
    if (__glintercept_fnptr_glImportMemoryWin32HandleEXT == NULL) {
      __glintercept_fnptr_glImportMemoryWin32HandleEXT = (__ctype_glImportMemoryWin32HandleEXT) eglGetProcAddr("glImportMemoryWin32HandleEXT");
    }
    if (__glintercept_fnptr_glImportMemoryWin32HandleEXT == NULL) return NULL;
    return (void*) __glintercept_glImportMemoryWin32HandleEXT;
  }
  if (strcmp(name, "glImportMemoryWin32NameEXT") == 0) {
    if (__glintercept_fnptr_glImportMemoryWin32NameEXT == NULL) {
      __glintercept_fnptr_glImportMemoryWin32NameEXT = (__ctype_glImportMemoryWin32NameEXT) eglGetProcAddr("glImportMemoryWin32NameEXT");
    }
    if (__glintercept_fnptr_glImportMemoryWin32NameEXT == NULL) return NULL;
    return (void*) __glintercept_glImportMemoryWin32NameEXT;
  }
  if (strcmp(name, "glImportSemaphoreFdEXT") == 0) {
    if (__glintercept_fnptr_glImportSemaphoreFdEXT == NULL) {
      __glintercept_fnptr_glImportSemaphoreFdEXT = (__ctype_glImportSemaphoreFdEXT) eglGetProcAddr("glImportSemaphoreFdEXT");
    }
    if (__glintercept_fnptr_glImportSemaphoreFdEXT == NULL) return NULL;
    return (void*) __glintercept_glImportSemaphoreFdEXT;
  }
  if (strcmp(name, "glImportSemaphoreWin32HandleEXT") == 0) {
    if (__glintercept_fnptr_glImportSemaphoreWin32HandleEXT == NULL) {
      __glintercept_fnptr_glImportSemaphoreWin32HandleEXT = (__ctype_glImportSemaphoreWin32HandleEXT) eglGetProcAddr("glImportSemaphoreWin32HandleEXT");
    }
    if (__glintercept_fnptr_glImportSemaphoreWin32HandleEXT == NULL) return NULL;
    return (void*) __glintercept_glImportSemaphoreWin32HandleEXT;
  }
  if (strcmp(name, "glImportSemaphoreWin32NameEXT") == 0) {
    if (__glintercept_fnptr_glImportSemaphoreWin32NameEXT == NULL) {
      __glintercept_fnptr_glImportSemaphoreWin32NameEXT = (__ctype_glImportSemaphoreWin32NameEXT) eglGetProcAddr("glImportSemaphoreWin32NameEXT");
    }
    if (__glintercept_fnptr_glImportSemaphoreWin32NameEXT == NULL) return NULL;
    return (void*) __glintercept_glImportSemaphoreWin32NameEXT;
  }
  if (strcmp(name, "glImportSyncEXT") == 0) {
    if (__glintercept_fnptr_glImportSyncEXT == NULL) {
      __glintercept_fnptr_glImportSyncEXT = (__ctype_glImportSyncEXT) eglGetProcAddr("glImportSyncEXT");
    }
    if (__glintercept_fnptr_glImportSyncEXT == NULL) return NULL;
    return (void*) __glintercept_glImportSyncEXT;
  }
  if (strcmp(name, "glIndexFormatNV") == 0) {
    if (__glintercept_fnptr_glIndexFormatNV == NULL) {
      __glintercept_fnptr_glIndexFormatNV = (__ctype_glIndexFormatNV) eglGetProcAddr("glIndexFormatNV");
    }
    if (__glintercept_fnptr_glIndexFormatNV == NULL) return NULL;
    return (void*) __glintercept_glIndexFormatNV;
  }
  if (strcmp(name, "glIndexFuncEXT") == 0) {
    if (__glintercept_fnptr_glIndexFuncEXT == NULL) {
      __glintercept_fnptr_glIndexFuncEXT = (__ctype_glIndexFuncEXT) eglGetProcAddr("glIndexFuncEXT");
    }
    if (__glintercept_fnptr_glIndexFuncEXT == NULL) return NULL;
    return (void*) __glintercept_glIndexFuncEXT;
  }
  if (strcmp(name, "glIndexMask") == 0) {
    if (__glintercept_fnptr_glIndexMask == NULL) {
      __glintercept_fnptr_glIndexMask = (__ctype_glIndexMask) eglGetProcAddr("glIndexMask");
    }
    if (__glintercept_fnptr_glIndexMask == NULL) return NULL;
    return (void*) __glintercept_glIndexMask;
  }
  if (strcmp(name, "glIndexMaterialEXT") == 0) {
    if (__glintercept_fnptr_glIndexMaterialEXT == NULL) {
      __glintercept_fnptr_glIndexMaterialEXT = (__ctype_glIndexMaterialEXT) eglGetProcAddr("glIndexMaterialEXT");
    }
    if (__glintercept_fnptr_glIndexMaterialEXT == NULL) return NULL;
    return (void*) __glintercept_glIndexMaterialEXT;
  }
  if (strcmp(name, "glIndexPointer") == 0) {
    if (__glintercept_fnptr_glIndexPointer == NULL) {
      __glintercept_fnptr_glIndexPointer = (__ctype_glIndexPointer) eglGetProcAddr("glIndexPointer");
    }
    if (__glintercept_fnptr_glIndexPointer == NULL) return NULL;
    return (void*) __glintercept_glIndexPointer;
  }
  if (strcmp(name, "glIndexPointerEXT") == 0) {
    if (__glintercept_fnptr_glIndexPointerEXT == NULL) {
      __glintercept_fnptr_glIndexPointerEXT = (__ctype_glIndexPointerEXT) eglGetProcAddr("glIndexPointerEXT");
    }
    if (__glintercept_fnptr_glIndexPointerEXT == NULL) return NULL;
    return (void*) __glintercept_glIndexPointerEXT;
  }
  if (strcmp(name, "glIndexPointerListIBM") == 0) {
    if (__glintercept_fnptr_glIndexPointerListIBM == NULL) {
      __glintercept_fnptr_glIndexPointerListIBM = (__ctype_glIndexPointerListIBM) eglGetProcAddr("glIndexPointerListIBM");
    }
    if (__glintercept_fnptr_glIndexPointerListIBM == NULL) return NULL;
    return (void*) __glintercept_glIndexPointerListIBM;
  }
  if (strcmp(name, "glIndexd") == 0) {
    if (__glintercept_fnptr_glIndexd == NULL) {
      __glintercept_fnptr_glIndexd = (__ctype_glIndexd) eglGetProcAddr("glIndexd");
    }
    if (__glintercept_fnptr_glIndexd == NULL) return NULL;
    return (void*) __glintercept_glIndexd;
  }
  if (strcmp(name, "glIndexdv") == 0) {
    if (__glintercept_fnptr_glIndexdv == NULL) {
      __glintercept_fnptr_glIndexdv = (__ctype_glIndexdv) eglGetProcAddr("glIndexdv");
    }
    if (__glintercept_fnptr_glIndexdv == NULL) return NULL;
    return (void*) __glintercept_glIndexdv;
  }
  if (strcmp(name, "glIndexf") == 0) {
    if (__glintercept_fnptr_glIndexf == NULL) {
      __glintercept_fnptr_glIndexf = (__ctype_glIndexf) eglGetProcAddr("glIndexf");
    }
    if (__glintercept_fnptr_glIndexf == NULL) return NULL;
    return (void*) __glintercept_glIndexf;
  }
  if (strcmp(name, "glIndexfv") == 0) {
    if (__glintercept_fnptr_glIndexfv == NULL) {
      __glintercept_fnptr_glIndexfv = (__ctype_glIndexfv) eglGetProcAddr("glIndexfv");
    }
    if (__glintercept_fnptr_glIndexfv == NULL) return NULL;
    return (void*) __glintercept_glIndexfv;
  }
  if (strcmp(name, "glIndexi") == 0) {
    if (__glintercept_fnptr_glIndexi == NULL) {
      __glintercept_fnptr_glIndexi = (__ctype_glIndexi) eglGetProcAddr("glIndexi");
    }
    if (__glintercept_fnptr_glIndexi == NULL) return NULL;
    return (void*) __glintercept_glIndexi;
  }
  if (strcmp(name, "glIndexiv") == 0) {
    if (__glintercept_fnptr_glIndexiv == NULL) {
      __glintercept_fnptr_glIndexiv = (__ctype_glIndexiv) eglGetProcAddr("glIndexiv");
    }
    if (__glintercept_fnptr_glIndexiv == NULL) return NULL;
    return (void*) __glintercept_glIndexiv;
  }
  if (strcmp(name, "glIndexs") == 0) {
    if (__glintercept_fnptr_glIndexs == NULL) {
      __glintercept_fnptr_glIndexs = (__ctype_glIndexs) eglGetProcAddr("glIndexs");
    }
    if (__glintercept_fnptr_glIndexs == NULL) return NULL;
    return (void*) __glintercept_glIndexs;
  }
  if (strcmp(name, "glIndexsv") == 0) {
    if (__glintercept_fnptr_glIndexsv == NULL) {
      __glintercept_fnptr_glIndexsv = (__ctype_glIndexsv) eglGetProcAddr("glIndexsv");
    }
    if (__glintercept_fnptr_glIndexsv == NULL) return NULL;
    return (void*) __glintercept_glIndexsv;
  }
  if (strcmp(name, "glIndexub") == 0) {
    if (__glintercept_fnptr_glIndexub == NULL) {
      __glintercept_fnptr_glIndexub = (__ctype_glIndexub) eglGetProcAddr("glIndexub");
    }
    if (__glintercept_fnptr_glIndexub == NULL) return NULL;
    return (void*) __glintercept_glIndexub;
  }
  if (strcmp(name, "glIndexubv") == 0) {
    if (__glintercept_fnptr_glIndexubv == NULL) {
      __glintercept_fnptr_glIndexubv = (__ctype_glIndexubv) eglGetProcAddr("glIndexubv");
    }
    if (__glintercept_fnptr_glIndexubv == NULL) return NULL;
    return (void*) __glintercept_glIndexubv;
  }
  if (strcmp(name, "glIndexxOES") == 0) {
    if (__glintercept_fnptr_glIndexxOES == NULL) {
      __glintercept_fnptr_glIndexxOES = (__ctype_glIndexxOES) eglGetProcAddr("glIndexxOES");
    }
    if (__glintercept_fnptr_glIndexxOES == NULL) return NULL;
    return (void*) __glintercept_glIndexxOES;
  }
  if (strcmp(name, "glIndexxvOES") == 0) {
    if (__glintercept_fnptr_glIndexxvOES == NULL) {
      __glintercept_fnptr_glIndexxvOES = (__ctype_glIndexxvOES) eglGetProcAddr("glIndexxvOES");
    }
    if (__glintercept_fnptr_glIndexxvOES == NULL) return NULL;
    return (void*) __glintercept_glIndexxvOES;
  }
  if (strcmp(name, "glInitNames") == 0) {
    if (__glintercept_fnptr_glInitNames == NULL) {
      __glintercept_fnptr_glInitNames = (__ctype_glInitNames) eglGetProcAddr("glInitNames");
    }
    if (__glintercept_fnptr_glInitNames == NULL) return NULL;
    return (void*) __glintercept_glInitNames;
  }
  if (strcmp(name, "glInsertComponentEXT") == 0) {
    if (__glintercept_fnptr_glInsertComponentEXT == NULL) {
      __glintercept_fnptr_glInsertComponentEXT = (__ctype_glInsertComponentEXT) eglGetProcAddr("glInsertComponentEXT");
    }
    if (__glintercept_fnptr_glInsertComponentEXT == NULL) return NULL;
    return (void*) __glintercept_glInsertComponentEXT;
  }
  if (strcmp(name, "glInsertEventMarkerEXT") == 0) {
    if (__glintercept_fnptr_glInsertEventMarkerEXT == NULL) {
      __glintercept_fnptr_glInsertEventMarkerEXT = (__ctype_glInsertEventMarkerEXT) eglGetProcAddr("glInsertEventMarkerEXT");
    }
    if (__glintercept_fnptr_glInsertEventMarkerEXT == NULL) return NULL;
    return (void*) __glintercept_glInsertEventMarkerEXT;
  }
  if (strcmp(name, "glInstrumentsBufferSGIX") == 0) {
    if (__glintercept_fnptr_glInstrumentsBufferSGIX == NULL) {
      __glintercept_fnptr_glInstrumentsBufferSGIX = (__ctype_glInstrumentsBufferSGIX) eglGetProcAddr("glInstrumentsBufferSGIX");
    }
    if (__glintercept_fnptr_glInstrumentsBufferSGIX == NULL) return NULL;
    return (void*) __glintercept_glInstrumentsBufferSGIX;
  }
  if (strcmp(name, "glInterleavedArrays") == 0) {
    if (__glintercept_fnptr_glInterleavedArrays == NULL) {
      __glintercept_fnptr_glInterleavedArrays = (__ctype_glInterleavedArrays) eglGetProcAddr("glInterleavedArrays");
    }
    if (__glintercept_fnptr_glInterleavedArrays == NULL) return NULL;
    return (void*) __glintercept_glInterleavedArrays;
  }
  if (strcmp(name, "glInterpolatePathsNV") == 0) {
    if (__glintercept_fnptr_glInterpolatePathsNV == NULL) {
      __glintercept_fnptr_glInterpolatePathsNV = (__ctype_glInterpolatePathsNV) eglGetProcAddr("glInterpolatePathsNV");
    }
    if (__glintercept_fnptr_glInterpolatePathsNV == NULL) return NULL;
    return (void*) __glintercept_glInterpolatePathsNV;
  }
  if (strcmp(name, "glInvalidateBufferData") == 0) {
    if (__glintercept_fnptr_glInvalidateBufferData == NULL) {
      __glintercept_fnptr_glInvalidateBufferData = (__ctype_glInvalidateBufferData) eglGetProcAddr("glInvalidateBufferData");
    }
    if (__glintercept_fnptr_glInvalidateBufferData == NULL) return NULL;
    return (void*) __glintercept_glInvalidateBufferData;
  }
  if (strcmp(name, "glInvalidateBufferSubData") == 0) {
    if (__glintercept_fnptr_glInvalidateBufferSubData == NULL) {
      __glintercept_fnptr_glInvalidateBufferSubData = (__ctype_glInvalidateBufferSubData) eglGetProcAddr("glInvalidateBufferSubData");
    }
    if (__glintercept_fnptr_glInvalidateBufferSubData == NULL) return NULL;
    return (void*) __glintercept_glInvalidateBufferSubData;
  }
  if (strcmp(name, "glInvalidateFramebuffer") == 0) {
    if (__glintercept_fnptr_glInvalidateFramebuffer == NULL) {
      __glintercept_fnptr_glInvalidateFramebuffer = (__ctype_glInvalidateFramebuffer) eglGetProcAddr("glInvalidateFramebuffer");
    }
    if (__glintercept_fnptr_glInvalidateFramebuffer == NULL) return NULL;
    return (void*) __glintercept_glInvalidateFramebuffer;
  }
  if (strcmp(name, "glInvalidateNamedFramebufferData") == 0) {
    if (__glintercept_fnptr_glInvalidateNamedFramebufferData == NULL) {
      __glintercept_fnptr_glInvalidateNamedFramebufferData = (__ctype_glInvalidateNamedFramebufferData) eglGetProcAddr("glInvalidateNamedFramebufferData");
    }
    if (__glintercept_fnptr_glInvalidateNamedFramebufferData == NULL) return NULL;
    return (void*) __glintercept_glInvalidateNamedFramebufferData;
  }
  if (strcmp(name, "glInvalidateNamedFramebufferSubData") == 0) {
    if (__glintercept_fnptr_glInvalidateNamedFramebufferSubData == NULL) {
      __glintercept_fnptr_glInvalidateNamedFramebufferSubData = (__ctype_glInvalidateNamedFramebufferSubData) eglGetProcAddr("glInvalidateNamedFramebufferSubData");
    }
    if (__glintercept_fnptr_glInvalidateNamedFramebufferSubData == NULL) return NULL;
    return (void*) __glintercept_glInvalidateNamedFramebufferSubData;
  }
  if (strcmp(name, "glInvalidateSubFramebuffer") == 0) {
    if (__glintercept_fnptr_glInvalidateSubFramebuffer == NULL) {
      __glintercept_fnptr_glInvalidateSubFramebuffer = (__ctype_glInvalidateSubFramebuffer) eglGetProcAddr("glInvalidateSubFramebuffer");
    }
    if (__glintercept_fnptr_glInvalidateSubFramebuffer == NULL) return NULL;
    return (void*) __glintercept_glInvalidateSubFramebuffer;
  }
  if (strcmp(name, "glInvalidateTexImage") == 0) {
    if (__glintercept_fnptr_glInvalidateTexImage == NULL) {
      __glintercept_fnptr_glInvalidateTexImage = (__ctype_glInvalidateTexImage) eglGetProcAddr("glInvalidateTexImage");
    }
    if (__glintercept_fnptr_glInvalidateTexImage == NULL) return NULL;
    return (void*) __glintercept_glInvalidateTexImage;
  }
  if (strcmp(name, "glInvalidateTexSubImage") == 0) {
    if (__glintercept_fnptr_glInvalidateTexSubImage == NULL) {
      __glintercept_fnptr_glInvalidateTexSubImage = (__ctype_glInvalidateTexSubImage) eglGetProcAddr("glInvalidateTexSubImage");
    }
    if (__glintercept_fnptr_glInvalidateTexSubImage == NULL) return NULL;
    return (void*) __glintercept_glInvalidateTexSubImage;
  }
  if (strcmp(name, "glIsAsyncMarkerSGIX") == 0) {
    if (__glintercept_fnptr_glIsAsyncMarkerSGIX == NULL) {
      __glintercept_fnptr_glIsAsyncMarkerSGIX = (__ctype_glIsAsyncMarkerSGIX) eglGetProcAddr("glIsAsyncMarkerSGIX");
    }
    if (__glintercept_fnptr_glIsAsyncMarkerSGIX == NULL) return NULL;
    return (void*) __glintercept_glIsAsyncMarkerSGIX;
  }
  if (strcmp(name, "glIsBuffer") == 0) {
    if (__glintercept_fnptr_glIsBuffer == NULL) {
      __glintercept_fnptr_glIsBuffer = (__ctype_glIsBuffer) eglGetProcAddr("glIsBuffer");
    }
    if (__glintercept_fnptr_glIsBuffer == NULL) return NULL;
    return (void*) __glintercept_glIsBuffer;
  }
  if (strcmp(name, "glIsBufferARB") == 0) {
    if (__glintercept_fnptr_glIsBufferARB == NULL) {
      __glintercept_fnptr_glIsBufferARB = (__ctype_glIsBufferARB) eglGetProcAddr("glIsBufferARB");
    }
    if (__glintercept_fnptr_glIsBufferARB == NULL) return NULL;
    return (void*) __glintercept_glIsBufferARB;
  }
  if (strcmp(name, "glIsBufferResidentNV") == 0) {
    if (__glintercept_fnptr_glIsBufferResidentNV == NULL) {
      __glintercept_fnptr_glIsBufferResidentNV = (__ctype_glIsBufferResidentNV) eglGetProcAddr("glIsBufferResidentNV");
    }
    if (__glintercept_fnptr_glIsBufferResidentNV == NULL) return NULL;
    return (void*) __glintercept_glIsBufferResidentNV;
  }
  if (strcmp(name, "glIsCommandListNV") == 0) {
    if (__glintercept_fnptr_glIsCommandListNV == NULL) {
      __glintercept_fnptr_glIsCommandListNV = (__ctype_glIsCommandListNV) eglGetProcAddr("glIsCommandListNV");
    }
    if (__glintercept_fnptr_glIsCommandListNV == NULL) return NULL;
    return (void*) __glintercept_glIsCommandListNV;
  }
  if (strcmp(name, "glIsEnabled") == 0) {
    if (__glintercept_fnptr_glIsEnabled == NULL) {
      __glintercept_fnptr_glIsEnabled = (__ctype_glIsEnabled) eglGetProcAddr("glIsEnabled");
    }
    if (__glintercept_fnptr_glIsEnabled == NULL) return NULL;
    return (void*) __glintercept_glIsEnabled;
  }
  if (strcmp(name, "glIsEnabledIndexedEXT") == 0) {
    if (__glintercept_fnptr_glIsEnabledIndexedEXT == NULL) {
      __glintercept_fnptr_glIsEnabledIndexedEXT = (__ctype_glIsEnabledIndexedEXT) eglGetProcAddr("glIsEnabledIndexedEXT");
    }
    if (__glintercept_fnptr_glIsEnabledIndexedEXT == NULL) return NULL;
    return (void*) __glintercept_glIsEnabledIndexedEXT;
  }
  if (strcmp(name, "glIsEnabledi") == 0) {
    if (__glintercept_fnptr_glIsEnabledi == NULL) {
      __glintercept_fnptr_glIsEnabledi = (__ctype_glIsEnabledi) eglGetProcAddr("glIsEnabledi");
    }
    if (__glintercept_fnptr_glIsEnabledi == NULL) return NULL;
    return (void*) __glintercept_glIsEnabledi;
  }
  if (strcmp(name, "glIsEnablediEXT") == 0) {
    if (__glintercept_fnptr_glIsEnablediEXT == NULL) {
      __glintercept_fnptr_glIsEnablediEXT = (__ctype_glIsEnablediEXT) eglGetProcAddr("glIsEnablediEXT");
    }
    if (__glintercept_fnptr_glIsEnablediEXT == NULL) return NULL;
    return (void*) __glintercept_glIsEnablediEXT;
  }
  if (strcmp(name, "glIsEnablediNV") == 0) {
    if (__glintercept_fnptr_glIsEnablediNV == NULL) {
      __glintercept_fnptr_glIsEnablediNV = (__ctype_glIsEnablediNV) eglGetProcAddr("glIsEnablediNV");
    }
    if (__glintercept_fnptr_glIsEnablediNV == NULL) return NULL;
    return (void*) __glintercept_glIsEnablediNV;
  }
  if (strcmp(name, "glIsEnablediOES") == 0) {
    if (__glintercept_fnptr_glIsEnablediOES == NULL) {
      __glintercept_fnptr_glIsEnablediOES = (__ctype_glIsEnablediOES) eglGetProcAddr("glIsEnablediOES");
    }
    if (__glintercept_fnptr_glIsEnablediOES == NULL) return NULL;
    return (void*) __glintercept_glIsEnablediOES;
  }
  if (strcmp(name, "glIsFenceAPPLE") == 0) {
    if (__glintercept_fnptr_glIsFenceAPPLE == NULL) {
      __glintercept_fnptr_glIsFenceAPPLE = (__ctype_glIsFenceAPPLE) eglGetProcAddr("glIsFenceAPPLE");
    }
    if (__glintercept_fnptr_glIsFenceAPPLE == NULL) return NULL;
    return (void*) __glintercept_glIsFenceAPPLE;
  }
  if (strcmp(name, "glIsFenceNV") == 0) {
    if (__glintercept_fnptr_glIsFenceNV == NULL) {
      __glintercept_fnptr_glIsFenceNV = (__ctype_glIsFenceNV) eglGetProcAddr("glIsFenceNV");
    }
    if (__glintercept_fnptr_glIsFenceNV == NULL) return NULL;
    return (void*) __glintercept_glIsFenceNV;
  }
  if (strcmp(name, "glIsFramebuffer") == 0) {
    if (__glintercept_fnptr_glIsFramebuffer == NULL) {
      __glintercept_fnptr_glIsFramebuffer = (__ctype_glIsFramebuffer) eglGetProcAddr("glIsFramebuffer");
    }
    if (__glintercept_fnptr_glIsFramebuffer == NULL) return NULL;
    return (void*) __glintercept_glIsFramebuffer;
  }
  if (strcmp(name, "glIsFramebufferEXT") == 0) {
    if (__glintercept_fnptr_glIsFramebufferEXT == NULL) {
      __glintercept_fnptr_glIsFramebufferEXT = (__ctype_glIsFramebufferEXT) eglGetProcAddr("glIsFramebufferEXT");
    }
    if (__glintercept_fnptr_glIsFramebufferEXT == NULL) return NULL;
    return (void*) __glintercept_glIsFramebufferEXT;
  }
  if (strcmp(name, "glIsFramebufferOES") == 0) {
    if (__glintercept_fnptr_glIsFramebufferOES == NULL) {
      __glintercept_fnptr_glIsFramebufferOES = (__ctype_glIsFramebufferOES) eglGetProcAddr("glIsFramebufferOES");
    }
    if (__glintercept_fnptr_glIsFramebufferOES == NULL) return NULL;
    return (void*) __glintercept_glIsFramebufferOES;
  }
  if (strcmp(name, "glIsImageHandleResidentARB") == 0) {
    if (__glintercept_fnptr_glIsImageHandleResidentARB == NULL) {
      __glintercept_fnptr_glIsImageHandleResidentARB = (__ctype_glIsImageHandleResidentARB) eglGetProcAddr("glIsImageHandleResidentARB");
    }
    if (__glintercept_fnptr_glIsImageHandleResidentARB == NULL) return NULL;
    return (void*) __glintercept_glIsImageHandleResidentARB;
  }
  if (strcmp(name, "glIsImageHandleResidentNV") == 0) {
    if (__glintercept_fnptr_glIsImageHandleResidentNV == NULL) {
      __glintercept_fnptr_glIsImageHandleResidentNV = (__ctype_glIsImageHandleResidentNV) eglGetProcAddr("glIsImageHandleResidentNV");
    }
    if (__glintercept_fnptr_glIsImageHandleResidentNV == NULL) return NULL;
    return (void*) __glintercept_glIsImageHandleResidentNV;
  }
  if (strcmp(name, "glIsList") == 0) {
    if (__glintercept_fnptr_glIsList == NULL) {
      __glintercept_fnptr_glIsList = (__ctype_glIsList) eglGetProcAddr("glIsList");
    }
    if (__glintercept_fnptr_glIsList == NULL) return NULL;
    return (void*) __glintercept_glIsList;
  }
  if (strcmp(name, "glIsMemoryObjectEXT") == 0) {
    if (__glintercept_fnptr_glIsMemoryObjectEXT == NULL) {
      __glintercept_fnptr_glIsMemoryObjectEXT = (__ctype_glIsMemoryObjectEXT) eglGetProcAddr("glIsMemoryObjectEXT");
    }
    if (__glintercept_fnptr_glIsMemoryObjectEXT == NULL) return NULL;
    return (void*) __glintercept_glIsMemoryObjectEXT;
  }
  if (strcmp(name, "glIsNameAMD") == 0) {
    if (__glintercept_fnptr_glIsNameAMD == NULL) {
      __glintercept_fnptr_glIsNameAMD = (__ctype_glIsNameAMD) eglGetProcAddr("glIsNameAMD");
    }
    if (__glintercept_fnptr_glIsNameAMD == NULL) return NULL;
    return (void*) __glintercept_glIsNameAMD;
  }
  if (strcmp(name, "glIsNamedBufferResidentNV") == 0) {
    if (__glintercept_fnptr_glIsNamedBufferResidentNV == NULL) {
      __glintercept_fnptr_glIsNamedBufferResidentNV = (__ctype_glIsNamedBufferResidentNV) eglGetProcAddr("glIsNamedBufferResidentNV");
    }
    if (__glintercept_fnptr_glIsNamedBufferResidentNV == NULL) return NULL;
    return (void*) __glintercept_glIsNamedBufferResidentNV;
  }
  if (strcmp(name, "glIsNamedStringARB") == 0) {
    if (__glintercept_fnptr_glIsNamedStringARB == NULL) {
      __glintercept_fnptr_glIsNamedStringARB = (__ctype_glIsNamedStringARB) eglGetProcAddr("glIsNamedStringARB");
    }
    if (__glintercept_fnptr_glIsNamedStringARB == NULL) return NULL;
    return (void*) __glintercept_glIsNamedStringARB;
  }
  if (strcmp(name, "glIsObjectBufferATI") == 0) {
    if (__glintercept_fnptr_glIsObjectBufferATI == NULL) {
      __glintercept_fnptr_glIsObjectBufferATI = (__ctype_glIsObjectBufferATI) eglGetProcAddr("glIsObjectBufferATI");
    }
    if (__glintercept_fnptr_glIsObjectBufferATI == NULL) return NULL;
    return (void*) __glintercept_glIsObjectBufferATI;
  }
  if (strcmp(name, "glIsOcclusionQueryNV") == 0) {
    if (__glintercept_fnptr_glIsOcclusionQueryNV == NULL) {
      __glintercept_fnptr_glIsOcclusionQueryNV = (__ctype_glIsOcclusionQueryNV) eglGetProcAddr("glIsOcclusionQueryNV");
    }
    if (__glintercept_fnptr_glIsOcclusionQueryNV == NULL) return NULL;
    return (void*) __glintercept_glIsOcclusionQueryNV;
  }
  if (strcmp(name, "glIsPathNV") == 0) {
    if (__glintercept_fnptr_glIsPathNV == NULL) {
      __glintercept_fnptr_glIsPathNV = (__ctype_glIsPathNV) eglGetProcAddr("glIsPathNV");
    }
    if (__glintercept_fnptr_glIsPathNV == NULL) return NULL;
    return (void*) __glintercept_glIsPathNV;
  }
  if (strcmp(name, "glIsPointInFillPathNV") == 0) {
    if (__glintercept_fnptr_glIsPointInFillPathNV == NULL) {
      __glintercept_fnptr_glIsPointInFillPathNV = (__ctype_glIsPointInFillPathNV) eglGetProcAddr("glIsPointInFillPathNV");
    }
    if (__glintercept_fnptr_glIsPointInFillPathNV == NULL) return NULL;
    return (void*) __glintercept_glIsPointInFillPathNV;
  }
  if (strcmp(name, "glIsPointInStrokePathNV") == 0) {
    if (__glintercept_fnptr_glIsPointInStrokePathNV == NULL) {
      __glintercept_fnptr_glIsPointInStrokePathNV = (__ctype_glIsPointInStrokePathNV) eglGetProcAddr("glIsPointInStrokePathNV");
    }
    if (__glintercept_fnptr_glIsPointInStrokePathNV == NULL) return NULL;
    return (void*) __glintercept_glIsPointInStrokePathNV;
  }
  if (strcmp(name, "glIsProgram") == 0) {
    if (__glintercept_fnptr_glIsProgram == NULL) {
      __glintercept_fnptr_glIsProgram = (__ctype_glIsProgram) eglGetProcAddr("glIsProgram");
    }
    if (__glintercept_fnptr_glIsProgram == NULL) return NULL;
    return (void*) __glintercept_glIsProgram;
  }
  if (strcmp(name, "glIsProgramARB") == 0) {
    if (__glintercept_fnptr_glIsProgramARB == NULL) {
      __glintercept_fnptr_glIsProgramARB = (__ctype_glIsProgramARB) eglGetProcAddr("glIsProgramARB");
    }
    if (__glintercept_fnptr_glIsProgramARB == NULL) return NULL;
    return (void*) __glintercept_glIsProgramARB;
  }
  if (strcmp(name, "glIsProgramNV") == 0) {
    if (__glintercept_fnptr_glIsProgramNV == NULL) {
      __glintercept_fnptr_glIsProgramNV = (__ctype_glIsProgramNV) eglGetProcAddr("glIsProgramNV");
    }
    if (__glintercept_fnptr_glIsProgramNV == NULL) return NULL;
    return (void*) __glintercept_glIsProgramNV;
  }
  if (strcmp(name, "glIsProgramPipeline") == 0) {
    if (__glintercept_fnptr_glIsProgramPipeline == NULL) {
      __glintercept_fnptr_glIsProgramPipeline = (__ctype_glIsProgramPipeline) eglGetProcAddr("glIsProgramPipeline");
    }
    if (__glintercept_fnptr_glIsProgramPipeline == NULL) return NULL;
    return (void*) __glintercept_glIsProgramPipeline;
  }
  if (strcmp(name, "glIsProgramPipelineEXT") == 0) {
    if (__glintercept_fnptr_glIsProgramPipelineEXT == NULL) {
      __glintercept_fnptr_glIsProgramPipelineEXT = (__ctype_glIsProgramPipelineEXT) eglGetProcAddr("glIsProgramPipelineEXT");
    }
    if (__glintercept_fnptr_glIsProgramPipelineEXT == NULL) return NULL;
    return (void*) __glintercept_glIsProgramPipelineEXT;
  }
  if (strcmp(name, "glIsQuery") == 0) {
    if (__glintercept_fnptr_glIsQuery == NULL) {
      __glintercept_fnptr_glIsQuery = (__ctype_glIsQuery) eglGetProcAddr("glIsQuery");
    }
    if (__glintercept_fnptr_glIsQuery == NULL) return NULL;
    return (void*) __glintercept_glIsQuery;
  }
  if (strcmp(name, "glIsQueryARB") == 0) {
    if (__glintercept_fnptr_glIsQueryARB == NULL) {
      __glintercept_fnptr_glIsQueryARB = (__ctype_glIsQueryARB) eglGetProcAddr("glIsQueryARB");
    }
    if (__glintercept_fnptr_glIsQueryARB == NULL) return NULL;
    return (void*) __glintercept_glIsQueryARB;
  }
  if (strcmp(name, "glIsQueryEXT") == 0) {
    if (__glintercept_fnptr_glIsQueryEXT == NULL) {
      __glintercept_fnptr_glIsQueryEXT = (__ctype_glIsQueryEXT) eglGetProcAddr("glIsQueryEXT");
    }
    if (__glintercept_fnptr_glIsQueryEXT == NULL) return NULL;
    return (void*) __glintercept_glIsQueryEXT;
  }
  if (strcmp(name, "glIsRenderbuffer") == 0) {
    if (__glintercept_fnptr_glIsRenderbuffer == NULL) {
      __glintercept_fnptr_glIsRenderbuffer = (__ctype_glIsRenderbuffer) eglGetProcAddr("glIsRenderbuffer");
    }
    if (__glintercept_fnptr_glIsRenderbuffer == NULL) return NULL;
    return (void*) __glintercept_glIsRenderbuffer;
  }
  if (strcmp(name, "glIsRenderbufferEXT") == 0) {
    if (__glintercept_fnptr_glIsRenderbufferEXT == NULL) {
      __glintercept_fnptr_glIsRenderbufferEXT = (__ctype_glIsRenderbufferEXT) eglGetProcAddr("glIsRenderbufferEXT");
    }
    if (__glintercept_fnptr_glIsRenderbufferEXT == NULL) return NULL;
    return (void*) __glintercept_glIsRenderbufferEXT;
  }
  if (strcmp(name, "glIsRenderbufferOES") == 0) {
    if (__glintercept_fnptr_glIsRenderbufferOES == NULL) {
      __glintercept_fnptr_glIsRenderbufferOES = (__ctype_glIsRenderbufferOES) eglGetProcAddr("glIsRenderbufferOES");
    }
    if (__glintercept_fnptr_glIsRenderbufferOES == NULL) return NULL;
    return (void*) __glintercept_glIsRenderbufferOES;
  }
  if (strcmp(name, "glIsSemaphoreEXT") == 0) {
    if (__glintercept_fnptr_glIsSemaphoreEXT == NULL) {
      __glintercept_fnptr_glIsSemaphoreEXT = (__ctype_glIsSemaphoreEXT) eglGetProcAddr("glIsSemaphoreEXT");
    }
    if (__glintercept_fnptr_glIsSemaphoreEXT == NULL) return NULL;
    return (void*) __glintercept_glIsSemaphoreEXT;
  }
  if (strcmp(name, "glIsSampler") == 0) {
    if (__glintercept_fnptr_glIsSampler == NULL) {
      __glintercept_fnptr_glIsSampler = (__ctype_glIsSampler) eglGetProcAddr("glIsSampler");
    }
    if (__glintercept_fnptr_glIsSampler == NULL) return NULL;
    return (void*) __glintercept_glIsSampler;
  }
  if (strcmp(name, "glIsShader") == 0) {
    if (__glintercept_fnptr_glIsShader == NULL) {
      __glintercept_fnptr_glIsShader = (__ctype_glIsShader) eglGetProcAddr("glIsShader");
    }
    if (__glintercept_fnptr_glIsShader == NULL) return NULL;
    return (void*) __glintercept_glIsShader;
  }
  if (strcmp(name, "glIsStateNV") == 0) {
    if (__glintercept_fnptr_glIsStateNV == NULL) {
      __glintercept_fnptr_glIsStateNV = (__ctype_glIsStateNV) eglGetProcAddr("glIsStateNV");
    }
    if (__glintercept_fnptr_glIsStateNV == NULL) return NULL;
    return (void*) __glintercept_glIsStateNV;
  }
  if (strcmp(name, "glIsSync") == 0) {
    if (__glintercept_fnptr_glIsSync == NULL) {
      __glintercept_fnptr_glIsSync = (__ctype_glIsSync) eglGetProcAddr("glIsSync");
    }
    if (__glintercept_fnptr_glIsSync == NULL) return NULL;
    return (void*) __glintercept_glIsSync;
  }
  if (strcmp(name, "glIsSyncAPPLE") == 0) {
    if (__glintercept_fnptr_glIsSyncAPPLE == NULL) {
      __glintercept_fnptr_glIsSyncAPPLE = (__ctype_glIsSyncAPPLE) eglGetProcAddr("glIsSyncAPPLE");
    }
    if (__glintercept_fnptr_glIsSyncAPPLE == NULL) return NULL;
    return (void*) __glintercept_glIsSyncAPPLE;
  }
  if (strcmp(name, "glIsTexture") == 0) {
    if (__glintercept_fnptr_glIsTexture == NULL) {
      __glintercept_fnptr_glIsTexture = (__ctype_glIsTexture) eglGetProcAddr("glIsTexture");
    }
    if (__glintercept_fnptr_glIsTexture == NULL) return NULL;
    return (void*) __glintercept_glIsTexture;
  }
  if (strcmp(name, "glIsTextureEXT") == 0) {
    if (__glintercept_fnptr_glIsTextureEXT == NULL) {
      __glintercept_fnptr_glIsTextureEXT = (__ctype_glIsTextureEXT) eglGetProcAddr("glIsTextureEXT");
    }
    if (__glintercept_fnptr_glIsTextureEXT == NULL) return NULL;
    return (void*) __glintercept_glIsTextureEXT;
  }
  if (strcmp(name, "glIsTextureHandleResidentARB") == 0) {
    if (__glintercept_fnptr_glIsTextureHandleResidentARB == NULL) {
      __glintercept_fnptr_glIsTextureHandleResidentARB = (__ctype_glIsTextureHandleResidentARB) eglGetProcAddr("glIsTextureHandleResidentARB");
    }
    if (__glintercept_fnptr_glIsTextureHandleResidentARB == NULL) return NULL;
    return (void*) __glintercept_glIsTextureHandleResidentARB;
  }
  if (strcmp(name, "glIsTextureHandleResidentNV") == 0) {
    if (__glintercept_fnptr_glIsTextureHandleResidentNV == NULL) {
      __glintercept_fnptr_glIsTextureHandleResidentNV = (__ctype_glIsTextureHandleResidentNV) eglGetProcAddr("glIsTextureHandleResidentNV");
    }
    if (__glintercept_fnptr_glIsTextureHandleResidentNV == NULL) return NULL;
    return (void*) __glintercept_glIsTextureHandleResidentNV;
  }
  if (strcmp(name, "glIsTransformFeedback") == 0) {
    if (__glintercept_fnptr_glIsTransformFeedback == NULL) {
      __glintercept_fnptr_glIsTransformFeedback = (__ctype_glIsTransformFeedback) eglGetProcAddr("glIsTransformFeedback");
    }
    if (__glintercept_fnptr_glIsTransformFeedback == NULL) return NULL;
    return (void*) __glintercept_glIsTransformFeedback;
  }
  if (strcmp(name, "glIsTransformFeedbackNV") == 0) {
    if (__glintercept_fnptr_glIsTransformFeedbackNV == NULL) {
      __glintercept_fnptr_glIsTransformFeedbackNV = (__ctype_glIsTransformFeedbackNV) eglGetProcAddr("glIsTransformFeedbackNV");
    }
    if (__glintercept_fnptr_glIsTransformFeedbackNV == NULL) return NULL;
    return (void*) __glintercept_glIsTransformFeedbackNV;
  }
  if (strcmp(name, "glIsVariantEnabledEXT") == 0) {
    if (__glintercept_fnptr_glIsVariantEnabledEXT == NULL) {
      __glintercept_fnptr_glIsVariantEnabledEXT = (__ctype_glIsVariantEnabledEXT) eglGetProcAddr("glIsVariantEnabledEXT");
    }
    if (__glintercept_fnptr_glIsVariantEnabledEXT == NULL) return NULL;
    return (void*) __glintercept_glIsVariantEnabledEXT;
  }
  if (strcmp(name, "glIsVertexArray") == 0) {
    if (__glintercept_fnptr_glIsVertexArray == NULL) {
      __glintercept_fnptr_glIsVertexArray = (__ctype_glIsVertexArray) eglGetProcAddr("glIsVertexArray");
    }
    if (__glintercept_fnptr_glIsVertexArray == NULL) return NULL;
    return (void*) __glintercept_glIsVertexArray;
  }
  if (strcmp(name, "glIsVertexArrayAPPLE") == 0) {
    if (__glintercept_fnptr_glIsVertexArrayAPPLE == NULL) {
      __glintercept_fnptr_glIsVertexArrayAPPLE = (__ctype_glIsVertexArrayAPPLE) eglGetProcAddr("glIsVertexArrayAPPLE");
    }
    if (__glintercept_fnptr_glIsVertexArrayAPPLE == NULL) return NULL;
    return (void*) __glintercept_glIsVertexArrayAPPLE;
  }
  if (strcmp(name, "glIsVertexArrayOES") == 0) {
    if (__glintercept_fnptr_glIsVertexArrayOES == NULL) {
      __glintercept_fnptr_glIsVertexArrayOES = (__ctype_glIsVertexArrayOES) eglGetProcAddr("glIsVertexArrayOES");
    }
    if (__glintercept_fnptr_glIsVertexArrayOES == NULL) return NULL;
    return (void*) __glintercept_glIsVertexArrayOES;
  }
  if (strcmp(name, "glIsVertexAttribEnabledAPPLE") == 0) {
    if (__glintercept_fnptr_glIsVertexAttribEnabledAPPLE == NULL) {
      __glintercept_fnptr_glIsVertexAttribEnabledAPPLE = (__ctype_glIsVertexAttribEnabledAPPLE) eglGetProcAddr("glIsVertexAttribEnabledAPPLE");
    }
    if (__glintercept_fnptr_glIsVertexAttribEnabledAPPLE == NULL) return NULL;
    return (void*) __glintercept_glIsVertexAttribEnabledAPPLE;
  }
  if (strcmp(name, "glLGPUCopyImageSubDataNVX") == 0) {
    if (__glintercept_fnptr_glLGPUCopyImageSubDataNVX == NULL) {
      __glintercept_fnptr_glLGPUCopyImageSubDataNVX = (__ctype_glLGPUCopyImageSubDataNVX) eglGetProcAddr("glLGPUCopyImageSubDataNVX");
    }
    if (__glintercept_fnptr_glLGPUCopyImageSubDataNVX == NULL) return NULL;
    return (void*) __glintercept_glLGPUCopyImageSubDataNVX;
  }
  if (strcmp(name, "glLGPUInterlockNVX") == 0) {
    if (__glintercept_fnptr_glLGPUInterlockNVX == NULL) {
      __glintercept_fnptr_glLGPUInterlockNVX = (__ctype_glLGPUInterlockNVX) eglGetProcAddr("glLGPUInterlockNVX");
    }
    if (__glintercept_fnptr_glLGPUInterlockNVX == NULL) return NULL;
    return (void*) __glintercept_glLGPUInterlockNVX;
  }
  if (strcmp(name, "glLGPUNamedBufferSubDataNVX") == 0) {
    if (__glintercept_fnptr_glLGPUNamedBufferSubDataNVX == NULL) {
      __glintercept_fnptr_glLGPUNamedBufferSubDataNVX = (__ctype_glLGPUNamedBufferSubDataNVX) eglGetProcAddr("glLGPUNamedBufferSubDataNVX");
    }
    if (__glintercept_fnptr_glLGPUNamedBufferSubDataNVX == NULL) return NULL;
    return (void*) __glintercept_glLGPUNamedBufferSubDataNVX;
  }
  if (strcmp(name, "glLabelObjectEXT") == 0) {
    if (__glintercept_fnptr_glLabelObjectEXT == NULL) {
      __glintercept_fnptr_glLabelObjectEXT = (__ctype_glLabelObjectEXT) eglGetProcAddr("glLabelObjectEXT");
    }
    if (__glintercept_fnptr_glLabelObjectEXT == NULL) return NULL;
    return (void*) __glintercept_glLabelObjectEXT;
  }
  if (strcmp(name, "glLightEnviSGIX") == 0) {
    if (__glintercept_fnptr_glLightEnviSGIX == NULL) {
      __glintercept_fnptr_glLightEnviSGIX = (__ctype_glLightEnviSGIX) eglGetProcAddr("glLightEnviSGIX");
    }
    if (__glintercept_fnptr_glLightEnviSGIX == NULL) return NULL;
    return (void*) __glintercept_glLightEnviSGIX;
  }
  if (strcmp(name, "glLightModelf") == 0) {
    if (__glintercept_fnptr_glLightModelf == NULL) {
      __glintercept_fnptr_glLightModelf = (__ctype_glLightModelf) eglGetProcAddr("glLightModelf");
    }
    if (__glintercept_fnptr_glLightModelf == NULL) return NULL;
    return (void*) __glintercept_glLightModelf;
  }
  if (strcmp(name, "glLightModelfv") == 0) {
    if (__glintercept_fnptr_glLightModelfv == NULL) {
      __glintercept_fnptr_glLightModelfv = (__ctype_glLightModelfv) eglGetProcAddr("glLightModelfv");
    }
    if (__glintercept_fnptr_glLightModelfv == NULL) return NULL;
    return (void*) __glintercept_glLightModelfv;
  }
  if (strcmp(name, "glLightModeli") == 0) {
    if (__glintercept_fnptr_glLightModeli == NULL) {
      __glintercept_fnptr_glLightModeli = (__ctype_glLightModeli) eglGetProcAddr("glLightModeli");
    }
    if (__glintercept_fnptr_glLightModeli == NULL) return NULL;
    return (void*) __glintercept_glLightModeli;
  }
  if (strcmp(name, "glLightModeliv") == 0) {
    if (__glintercept_fnptr_glLightModeliv == NULL) {
      __glintercept_fnptr_glLightModeliv = (__ctype_glLightModeliv) eglGetProcAddr("glLightModeliv");
    }
    if (__glintercept_fnptr_glLightModeliv == NULL) return NULL;
    return (void*) __glintercept_glLightModeliv;
  }
  if (strcmp(name, "glLightModelx") == 0) {
    if (__glintercept_fnptr_glLightModelx == NULL) {
      __glintercept_fnptr_glLightModelx = (__ctype_glLightModelx) eglGetProcAddr("glLightModelx");
    }
    if (__glintercept_fnptr_glLightModelx == NULL) return NULL;
    return (void*) __glintercept_glLightModelx;
  }
  if (strcmp(name, "glLightModelxOES") == 0) {
    if (__glintercept_fnptr_glLightModelxOES == NULL) {
      __glintercept_fnptr_glLightModelxOES = (__ctype_glLightModelxOES) eglGetProcAddr("glLightModelxOES");
    }
    if (__glintercept_fnptr_glLightModelxOES == NULL) return NULL;
    return (void*) __glintercept_glLightModelxOES;
  }
  if (strcmp(name, "glLightModelxv") == 0) {
    if (__glintercept_fnptr_glLightModelxv == NULL) {
      __glintercept_fnptr_glLightModelxv = (__ctype_glLightModelxv) eglGetProcAddr("glLightModelxv");
    }
    if (__glintercept_fnptr_glLightModelxv == NULL) return NULL;
    return (void*) __glintercept_glLightModelxv;
  }
  if (strcmp(name, "glLightModelxvOES") == 0) {
    if (__glintercept_fnptr_glLightModelxvOES == NULL) {
      __glintercept_fnptr_glLightModelxvOES = (__ctype_glLightModelxvOES) eglGetProcAddr("glLightModelxvOES");
    }
    if (__glintercept_fnptr_glLightModelxvOES == NULL) return NULL;
    return (void*) __glintercept_glLightModelxvOES;
  }
  if (strcmp(name, "glLightf") == 0) {
    if (__glintercept_fnptr_glLightf == NULL) {
      __glintercept_fnptr_glLightf = (__ctype_glLightf) eglGetProcAddr("glLightf");
    }
    if (__glintercept_fnptr_glLightf == NULL) return NULL;
    return (void*) __glintercept_glLightf;
  }
  if (strcmp(name, "glLightfv") == 0) {
    if (__glintercept_fnptr_glLightfv == NULL) {
      __glintercept_fnptr_glLightfv = (__ctype_glLightfv) eglGetProcAddr("glLightfv");
    }
    if (__glintercept_fnptr_glLightfv == NULL) return NULL;
    return (void*) __glintercept_glLightfv;
  }
  if (strcmp(name, "glLighti") == 0) {
    if (__glintercept_fnptr_glLighti == NULL) {
      __glintercept_fnptr_glLighti = (__ctype_glLighti) eglGetProcAddr("glLighti");
    }
    if (__glintercept_fnptr_glLighti == NULL) return NULL;
    return (void*) __glintercept_glLighti;
  }
  if (strcmp(name, "glLightiv") == 0) {
    if (__glintercept_fnptr_glLightiv == NULL) {
      __glintercept_fnptr_glLightiv = (__ctype_glLightiv) eglGetProcAddr("glLightiv");
    }
    if (__glintercept_fnptr_glLightiv == NULL) return NULL;
    return (void*) __glintercept_glLightiv;
  }
  if (strcmp(name, "glLightx") == 0) {
    if (__glintercept_fnptr_glLightx == NULL) {
      __glintercept_fnptr_glLightx = (__ctype_glLightx) eglGetProcAddr("glLightx");
    }
    if (__glintercept_fnptr_glLightx == NULL) return NULL;
    return (void*) __glintercept_glLightx;
  }
  if (strcmp(name, "glLightxOES") == 0) {
    if (__glintercept_fnptr_glLightxOES == NULL) {
      __glintercept_fnptr_glLightxOES = (__ctype_glLightxOES) eglGetProcAddr("glLightxOES");
    }
    if (__glintercept_fnptr_glLightxOES == NULL) return NULL;
    return (void*) __glintercept_glLightxOES;
  }
  if (strcmp(name, "glLightxv") == 0) {
    if (__glintercept_fnptr_glLightxv == NULL) {
      __glintercept_fnptr_glLightxv = (__ctype_glLightxv) eglGetProcAddr("glLightxv");
    }
    if (__glintercept_fnptr_glLightxv == NULL) return NULL;
    return (void*) __glintercept_glLightxv;
  }
  if (strcmp(name, "glLightxvOES") == 0) {
    if (__glintercept_fnptr_glLightxvOES == NULL) {
      __glintercept_fnptr_glLightxvOES = (__ctype_glLightxvOES) eglGetProcAddr("glLightxvOES");
    }
    if (__glintercept_fnptr_glLightxvOES == NULL) return NULL;
    return (void*) __glintercept_glLightxvOES;
  }
  if (strcmp(name, "glLineStipple") == 0) {
    if (__glintercept_fnptr_glLineStipple == NULL) {
      __glintercept_fnptr_glLineStipple = (__ctype_glLineStipple) eglGetProcAddr("glLineStipple");
    }
    if (__glintercept_fnptr_glLineStipple == NULL) return NULL;
    return (void*) __glintercept_glLineStipple;
  }
  if (strcmp(name, "glLineWidth") == 0) {
    if (__glintercept_fnptr_glLineWidth == NULL) {
      __glintercept_fnptr_glLineWidth = (__ctype_glLineWidth) eglGetProcAddr("glLineWidth");
    }
    if (__glintercept_fnptr_glLineWidth == NULL) return NULL;
    return (void*) __glintercept_glLineWidth;
  }
  if (strcmp(name, "glLineWidthx") == 0) {
    if (__glintercept_fnptr_glLineWidthx == NULL) {
      __glintercept_fnptr_glLineWidthx = (__ctype_glLineWidthx) eglGetProcAddr("glLineWidthx");
    }
    if (__glintercept_fnptr_glLineWidthx == NULL) return NULL;
    return (void*) __glintercept_glLineWidthx;
  }
  if (strcmp(name, "glLineWidthxOES") == 0) {
    if (__glintercept_fnptr_glLineWidthxOES == NULL) {
      __glintercept_fnptr_glLineWidthxOES = (__ctype_glLineWidthxOES) eglGetProcAddr("glLineWidthxOES");
    }
    if (__glintercept_fnptr_glLineWidthxOES == NULL) return NULL;
    return (void*) __glintercept_glLineWidthxOES;
  }
  if (strcmp(name, "glLinkProgram") == 0) {
    if (__glintercept_fnptr_glLinkProgram == NULL) {
      __glintercept_fnptr_glLinkProgram = (__ctype_glLinkProgram) eglGetProcAddr("glLinkProgram");
    }
    if (__glintercept_fnptr_glLinkProgram == NULL) return NULL;
    return (void*) __glintercept_glLinkProgram;
  }
  if (strcmp(name, "glLinkProgramARB") == 0) {
    if (__glintercept_fnptr_glLinkProgramARB == NULL) {
      __glintercept_fnptr_glLinkProgramARB = (__ctype_glLinkProgramARB) eglGetProcAddr("glLinkProgramARB");
    }
    if (__glintercept_fnptr_glLinkProgramARB == NULL) return NULL;
    return (void*) __glintercept_glLinkProgramARB;
  }
  if (strcmp(name, "glListBase") == 0) {
    if (__glintercept_fnptr_glListBase == NULL) {
      __glintercept_fnptr_glListBase = (__ctype_glListBase) eglGetProcAddr("glListBase");
    }
    if (__glintercept_fnptr_glListBase == NULL) return NULL;
    return (void*) __glintercept_glListBase;
  }
  if (strcmp(name, "glListDrawCommandsStatesClientNV") == 0) {
    if (__glintercept_fnptr_glListDrawCommandsStatesClientNV == NULL) {
      __glintercept_fnptr_glListDrawCommandsStatesClientNV = (__ctype_glListDrawCommandsStatesClientNV) eglGetProcAddr("glListDrawCommandsStatesClientNV");
    }
    if (__glintercept_fnptr_glListDrawCommandsStatesClientNV == NULL) return NULL;
    return (void*) __glintercept_glListDrawCommandsStatesClientNV;
  }
  if (strcmp(name, "glListParameterfSGIX") == 0) {
    if (__glintercept_fnptr_glListParameterfSGIX == NULL) {
      __glintercept_fnptr_glListParameterfSGIX = (__ctype_glListParameterfSGIX) eglGetProcAddr("glListParameterfSGIX");
    }
    if (__glintercept_fnptr_glListParameterfSGIX == NULL) return NULL;
    return (void*) __glintercept_glListParameterfSGIX;
  }
  if (strcmp(name, "glListParameterfvSGIX") == 0) {
    if (__glintercept_fnptr_glListParameterfvSGIX == NULL) {
      __glintercept_fnptr_glListParameterfvSGIX = (__ctype_glListParameterfvSGIX) eglGetProcAddr("glListParameterfvSGIX");
    }
    if (__glintercept_fnptr_glListParameterfvSGIX == NULL) return NULL;
    return (void*) __glintercept_glListParameterfvSGIX;
  }
  if (strcmp(name, "glListParameteriSGIX") == 0) {
    if (__glintercept_fnptr_glListParameteriSGIX == NULL) {
      __glintercept_fnptr_glListParameteriSGIX = (__ctype_glListParameteriSGIX) eglGetProcAddr("glListParameteriSGIX");
    }
    if (__glintercept_fnptr_glListParameteriSGIX == NULL) return NULL;
    return (void*) __glintercept_glListParameteriSGIX;
  }
  if (strcmp(name, "glListParameterivSGIX") == 0) {
    if (__glintercept_fnptr_glListParameterivSGIX == NULL) {
      __glintercept_fnptr_glListParameterivSGIX = (__ctype_glListParameterivSGIX) eglGetProcAddr("glListParameterivSGIX");
    }
    if (__glintercept_fnptr_glListParameterivSGIX == NULL) return NULL;
    return (void*) __glintercept_glListParameterivSGIX;
  }
  if (strcmp(name, "glLoadIdentity") == 0) {
    if (__glintercept_fnptr_glLoadIdentity == NULL) {
      __glintercept_fnptr_glLoadIdentity = (__ctype_glLoadIdentity) eglGetProcAddr("glLoadIdentity");
    }
    if (__glintercept_fnptr_glLoadIdentity == NULL) return NULL;
    return (void*) __glintercept_glLoadIdentity;
  }
  if (strcmp(name, "glLoadIdentityDeformationMapSGIX") == 0) {
    if (__glintercept_fnptr_glLoadIdentityDeformationMapSGIX == NULL) {
      __glintercept_fnptr_glLoadIdentityDeformationMapSGIX = (__ctype_glLoadIdentityDeformationMapSGIX) eglGetProcAddr("glLoadIdentityDeformationMapSGIX");
    }
    if (__glintercept_fnptr_glLoadIdentityDeformationMapSGIX == NULL) return NULL;
    return (void*) __glintercept_glLoadIdentityDeformationMapSGIX;
  }
  if (strcmp(name, "glLoadMatrixd") == 0) {
    if (__glintercept_fnptr_glLoadMatrixd == NULL) {
      __glintercept_fnptr_glLoadMatrixd = (__ctype_glLoadMatrixd) eglGetProcAddr("glLoadMatrixd");
    }
    if (__glintercept_fnptr_glLoadMatrixd == NULL) return NULL;
    return (void*) __glintercept_glLoadMatrixd;
  }
  if (strcmp(name, "glLoadMatrixf") == 0) {
    if (__glintercept_fnptr_glLoadMatrixf == NULL) {
      __glintercept_fnptr_glLoadMatrixf = (__ctype_glLoadMatrixf) eglGetProcAddr("glLoadMatrixf");
    }
    if (__glintercept_fnptr_glLoadMatrixf == NULL) return NULL;
    return (void*) __glintercept_glLoadMatrixf;
  }
  if (strcmp(name, "glLoadMatrixx") == 0) {
    if (__glintercept_fnptr_glLoadMatrixx == NULL) {
      __glintercept_fnptr_glLoadMatrixx = (__ctype_glLoadMatrixx) eglGetProcAddr("glLoadMatrixx");
    }
    if (__glintercept_fnptr_glLoadMatrixx == NULL) return NULL;
    return (void*) __glintercept_glLoadMatrixx;
  }
  if (strcmp(name, "glLoadMatrixxOES") == 0) {
    if (__glintercept_fnptr_glLoadMatrixxOES == NULL) {
      __glintercept_fnptr_glLoadMatrixxOES = (__ctype_glLoadMatrixxOES) eglGetProcAddr("glLoadMatrixxOES");
    }
    if (__glintercept_fnptr_glLoadMatrixxOES == NULL) return NULL;
    return (void*) __glintercept_glLoadMatrixxOES;
  }
  if (strcmp(name, "glLoadName") == 0) {
    if (__glintercept_fnptr_glLoadName == NULL) {
      __glintercept_fnptr_glLoadName = (__ctype_glLoadName) eglGetProcAddr("glLoadName");
    }
    if (__glintercept_fnptr_glLoadName == NULL) return NULL;
    return (void*) __glintercept_glLoadName;
  }
  if (strcmp(name, "glLoadPaletteFromModelViewMatrixOES") == 0) {
    if (__glintercept_fnptr_glLoadPaletteFromModelViewMatrixOES == NULL) {
      __glintercept_fnptr_glLoadPaletteFromModelViewMatrixOES = (__ctype_glLoadPaletteFromModelViewMatrixOES) eglGetProcAddr("glLoadPaletteFromModelViewMatrixOES");
    }
    if (__glintercept_fnptr_glLoadPaletteFromModelViewMatrixOES == NULL) return NULL;
    return (void*) __glintercept_glLoadPaletteFromModelViewMatrixOES;
  }
  if (strcmp(name, "glLoadProgramNV") == 0) {
    if (__glintercept_fnptr_glLoadProgramNV == NULL) {
      __glintercept_fnptr_glLoadProgramNV = (__ctype_glLoadProgramNV) eglGetProcAddr("glLoadProgramNV");
    }
    if (__glintercept_fnptr_glLoadProgramNV == NULL) return NULL;
    return (void*) __glintercept_glLoadProgramNV;
  }
  if (strcmp(name, "glLoadTransposeMatrixd") == 0) {
    if (__glintercept_fnptr_glLoadTransposeMatrixd == NULL) {
      __glintercept_fnptr_glLoadTransposeMatrixd = (__ctype_glLoadTransposeMatrixd) eglGetProcAddr("glLoadTransposeMatrixd");
    }
    if (__glintercept_fnptr_glLoadTransposeMatrixd == NULL) return NULL;
    return (void*) __glintercept_glLoadTransposeMatrixd;
  }
  if (strcmp(name, "glLoadTransposeMatrixdARB") == 0) {
    if (__glintercept_fnptr_glLoadTransposeMatrixdARB == NULL) {
      __glintercept_fnptr_glLoadTransposeMatrixdARB = (__ctype_glLoadTransposeMatrixdARB) eglGetProcAddr("glLoadTransposeMatrixdARB");
    }
    if (__glintercept_fnptr_glLoadTransposeMatrixdARB == NULL) return NULL;
    return (void*) __glintercept_glLoadTransposeMatrixdARB;
  }
  if (strcmp(name, "glLoadTransposeMatrixf") == 0) {
    if (__glintercept_fnptr_glLoadTransposeMatrixf == NULL) {
      __glintercept_fnptr_glLoadTransposeMatrixf = (__ctype_glLoadTransposeMatrixf) eglGetProcAddr("glLoadTransposeMatrixf");
    }
    if (__glintercept_fnptr_glLoadTransposeMatrixf == NULL) return NULL;
    return (void*) __glintercept_glLoadTransposeMatrixf;
  }
  if (strcmp(name, "glLoadTransposeMatrixfARB") == 0) {
    if (__glintercept_fnptr_glLoadTransposeMatrixfARB == NULL) {
      __glintercept_fnptr_glLoadTransposeMatrixfARB = (__ctype_glLoadTransposeMatrixfARB) eglGetProcAddr("glLoadTransposeMatrixfARB");
    }
    if (__glintercept_fnptr_glLoadTransposeMatrixfARB == NULL) return NULL;
    return (void*) __glintercept_glLoadTransposeMatrixfARB;
  }
  if (strcmp(name, "glLoadTransposeMatrixxOES") == 0) {
    if (__glintercept_fnptr_glLoadTransposeMatrixxOES == NULL) {
      __glintercept_fnptr_glLoadTransposeMatrixxOES = (__ctype_glLoadTransposeMatrixxOES) eglGetProcAddr("glLoadTransposeMatrixxOES");
    }
    if (__glintercept_fnptr_glLoadTransposeMatrixxOES == NULL) return NULL;
    return (void*) __glintercept_glLoadTransposeMatrixxOES;
  }
  if (strcmp(name, "glLockArraysEXT") == 0) {
    if (__glintercept_fnptr_glLockArraysEXT == NULL) {
      __glintercept_fnptr_glLockArraysEXT = (__ctype_glLockArraysEXT) eglGetProcAddr("glLockArraysEXT");
    }
    if (__glintercept_fnptr_glLockArraysEXT == NULL) return NULL;
    return (void*) __glintercept_glLockArraysEXT;
  }
  if (strcmp(name, "glLogicOp") == 0) {
    if (__glintercept_fnptr_glLogicOp == NULL) {
      __glintercept_fnptr_glLogicOp = (__ctype_glLogicOp) eglGetProcAddr("glLogicOp");
    }
    if (__glintercept_fnptr_glLogicOp == NULL) return NULL;
    return (void*) __glintercept_glLogicOp;
  }
  if (strcmp(name, "glMakeBufferNonResidentNV") == 0) {
    if (__glintercept_fnptr_glMakeBufferNonResidentNV == NULL) {
      __glintercept_fnptr_glMakeBufferNonResidentNV = (__ctype_glMakeBufferNonResidentNV) eglGetProcAddr("glMakeBufferNonResidentNV");
    }
    if (__glintercept_fnptr_glMakeBufferNonResidentNV == NULL) return NULL;
    return (void*) __glintercept_glMakeBufferNonResidentNV;
  }
  if (strcmp(name, "glMakeBufferResidentNV") == 0) {
    if (__glintercept_fnptr_glMakeBufferResidentNV == NULL) {
      __glintercept_fnptr_glMakeBufferResidentNV = (__ctype_glMakeBufferResidentNV) eglGetProcAddr("glMakeBufferResidentNV");
    }
    if (__glintercept_fnptr_glMakeBufferResidentNV == NULL) return NULL;
    return (void*) __glintercept_glMakeBufferResidentNV;
  }
  if (strcmp(name, "glMakeImageHandleNonResidentARB") == 0) {
    if (__glintercept_fnptr_glMakeImageHandleNonResidentARB == NULL) {
      __glintercept_fnptr_glMakeImageHandleNonResidentARB = (__ctype_glMakeImageHandleNonResidentARB) eglGetProcAddr("glMakeImageHandleNonResidentARB");
    }
    if (__glintercept_fnptr_glMakeImageHandleNonResidentARB == NULL) return NULL;
    return (void*) __glintercept_glMakeImageHandleNonResidentARB;
  }
  if (strcmp(name, "glMakeImageHandleNonResidentNV") == 0) {
    if (__glintercept_fnptr_glMakeImageHandleNonResidentNV == NULL) {
      __glintercept_fnptr_glMakeImageHandleNonResidentNV = (__ctype_glMakeImageHandleNonResidentNV) eglGetProcAddr("glMakeImageHandleNonResidentNV");
    }
    if (__glintercept_fnptr_glMakeImageHandleNonResidentNV == NULL) return NULL;
    return (void*) __glintercept_glMakeImageHandleNonResidentNV;
  }
  if (strcmp(name, "glMakeImageHandleResidentARB") == 0) {
    if (__glintercept_fnptr_glMakeImageHandleResidentARB == NULL) {
      __glintercept_fnptr_glMakeImageHandleResidentARB = (__ctype_glMakeImageHandleResidentARB) eglGetProcAddr("glMakeImageHandleResidentARB");
    }
    if (__glintercept_fnptr_glMakeImageHandleResidentARB == NULL) return NULL;
    return (void*) __glintercept_glMakeImageHandleResidentARB;
  }
  if (strcmp(name, "glMakeImageHandleResidentNV") == 0) {
    if (__glintercept_fnptr_glMakeImageHandleResidentNV == NULL) {
      __glintercept_fnptr_glMakeImageHandleResidentNV = (__ctype_glMakeImageHandleResidentNV) eglGetProcAddr("glMakeImageHandleResidentNV");
    }
    if (__glintercept_fnptr_glMakeImageHandleResidentNV == NULL) return NULL;
    return (void*) __glintercept_glMakeImageHandleResidentNV;
  }
  if (strcmp(name, "glMakeNamedBufferNonResidentNV") == 0) {
    if (__glintercept_fnptr_glMakeNamedBufferNonResidentNV == NULL) {
      __glintercept_fnptr_glMakeNamedBufferNonResidentNV = (__ctype_glMakeNamedBufferNonResidentNV) eglGetProcAddr("glMakeNamedBufferNonResidentNV");
    }
    if (__glintercept_fnptr_glMakeNamedBufferNonResidentNV == NULL) return NULL;
    return (void*) __glintercept_glMakeNamedBufferNonResidentNV;
  }
  if (strcmp(name, "glMakeNamedBufferResidentNV") == 0) {
    if (__glintercept_fnptr_glMakeNamedBufferResidentNV == NULL) {
      __glintercept_fnptr_glMakeNamedBufferResidentNV = (__ctype_glMakeNamedBufferResidentNV) eglGetProcAddr("glMakeNamedBufferResidentNV");
    }
    if (__glintercept_fnptr_glMakeNamedBufferResidentNV == NULL) return NULL;
    return (void*) __glintercept_glMakeNamedBufferResidentNV;
  }
  if (strcmp(name, "glMakeTextureHandleNonResidentARB") == 0) {
    if (__glintercept_fnptr_glMakeTextureHandleNonResidentARB == NULL) {
      __glintercept_fnptr_glMakeTextureHandleNonResidentARB = (__ctype_glMakeTextureHandleNonResidentARB) eglGetProcAddr("glMakeTextureHandleNonResidentARB");
    }
    if (__glintercept_fnptr_glMakeTextureHandleNonResidentARB == NULL) return NULL;
    return (void*) __glintercept_glMakeTextureHandleNonResidentARB;
  }
  if (strcmp(name, "glMakeTextureHandleNonResidentNV") == 0) {
    if (__glintercept_fnptr_glMakeTextureHandleNonResidentNV == NULL) {
      __glintercept_fnptr_glMakeTextureHandleNonResidentNV = (__ctype_glMakeTextureHandleNonResidentNV) eglGetProcAddr("glMakeTextureHandleNonResidentNV");
    }
    if (__glintercept_fnptr_glMakeTextureHandleNonResidentNV == NULL) return NULL;
    return (void*) __glintercept_glMakeTextureHandleNonResidentNV;
  }
  if (strcmp(name, "glMakeTextureHandleResidentARB") == 0) {
    if (__glintercept_fnptr_glMakeTextureHandleResidentARB == NULL) {
      __glintercept_fnptr_glMakeTextureHandleResidentARB = (__ctype_glMakeTextureHandleResidentARB) eglGetProcAddr("glMakeTextureHandleResidentARB");
    }
    if (__glintercept_fnptr_glMakeTextureHandleResidentARB == NULL) return NULL;
    return (void*) __glintercept_glMakeTextureHandleResidentARB;
  }
  if (strcmp(name, "glMakeTextureHandleResidentNV") == 0) {
    if (__glintercept_fnptr_glMakeTextureHandleResidentNV == NULL) {
      __glintercept_fnptr_glMakeTextureHandleResidentNV = (__ctype_glMakeTextureHandleResidentNV) eglGetProcAddr("glMakeTextureHandleResidentNV");
    }
    if (__glintercept_fnptr_glMakeTextureHandleResidentNV == NULL) return NULL;
    return (void*) __glintercept_glMakeTextureHandleResidentNV;
  }
  if (strcmp(name, "glMap1d") == 0) {
    if (__glintercept_fnptr_glMap1d == NULL) {
      __glintercept_fnptr_glMap1d = (__ctype_glMap1d) eglGetProcAddr("glMap1d");
    }
    if (__glintercept_fnptr_glMap1d == NULL) return NULL;
    return (void*) __glintercept_glMap1d;
  }
  if (strcmp(name, "glMap1f") == 0) {
    if (__glintercept_fnptr_glMap1f == NULL) {
      __glintercept_fnptr_glMap1f = (__ctype_glMap1f) eglGetProcAddr("glMap1f");
    }
    if (__glintercept_fnptr_glMap1f == NULL) return NULL;
    return (void*) __glintercept_glMap1f;
  }
  if (strcmp(name, "glMap1xOES") == 0) {
    if (__glintercept_fnptr_glMap1xOES == NULL) {
      __glintercept_fnptr_glMap1xOES = (__ctype_glMap1xOES) eglGetProcAddr("glMap1xOES");
    }
    if (__glintercept_fnptr_glMap1xOES == NULL) return NULL;
    return (void*) __glintercept_glMap1xOES;
  }
  if (strcmp(name, "glMap2d") == 0) {
    if (__glintercept_fnptr_glMap2d == NULL) {
      __glintercept_fnptr_glMap2d = (__ctype_glMap2d) eglGetProcAddr("glMap2d");
    }
    if (__glintercept_fnptr_glMap2d == NULL) return NULL;
    return (void*) __glintercept_glMap2d;
  }
  if (strcmp(name, "glMap2f") == 0) {
    if (__glintercept_fnptr_glMap2f == NULL) {
      __glintercept_fnptr_glMap2f = (__ctype_glMap2f) eglGetProcAddr("glMap2f");
    }
    if (__glintercept_fnptr_glMap2f == NULL) return NULL;
    return (void*) __glintercept_glMap2f;
  }
  if (strcmp(name, "glMap2xOES") == 0) {
    if (__glintercept_fnptr_glMap2xOES == NULL) {
      __glintercept_fnptr_glMap2xOES = (__ctype_glMap2xOES) eglGetProcAddr("glMap2xOES");
    }
    if (__glintercept_fnptr_glMap2xOES == NULL) return NULL;
    return (void*) __glintercept_glMap2xOES;
  }
  if (strcmp(name, "glMapBuffer") == 0) {
    if (__glintercept_fnptr_glMapBuffer == NULL) {
      __glintercept_fnptr_glMapBuffer = (__ctype_glMapBuffer) eglGetProcAddr("glMapBuffer");
    }
    if (__glintercept_fnptr_glMapBuffer == NULL) return NULL;
    return (void*) __glintercept_glMapBuffer;
  }
  if (strcmp(name, "glMapBufferARB") == 0) {
    if (__glintercept_fnptr_glMapBufferARB == NULL) {
      __glintercept_fnptr_glMapBufferARB = (__ctype_glMapBufferARB) eglGetProcAddr("glMapBufferARB");
    }
    if (__glintercept_fnptr_glMapBufferARB == NULL) return NULL;
    return (void*) __glintercept_glMapBufferARB;
  }
  if (strcmp(name, "glMapBufferOES") == 0) {
    if (__glintercept_fnptr_glMapBufferOES == NULL) {
      __glintercept_fnptr_glMapBufferOES = (__ctype_glMapBufferOES) eglGetProcAddr("glMapBufferOES");
    }
    if (__glintercept_fnptr_glMapBufferOES == NULL) return NULL;
    return (void*) __glintercept_glMapBufferOES;
  }
  if (strcmp(name, "glMapBufferRange") == 0) {
    if (__glintercept_fnptr_glMapBufferRange == NULL) {
      __glintercept_fnptr_glMapBufferRange = (__ctype_glMapBufferRange) eglGetProcAddr("glMapBufferRange");
    }
    if (__glintercept_fnptr_glMapBufferRange == NULL) return NULL;
    return (void*) __glintercept_glMapBufferRange;
  }
  if (strcmp(name, "glMapBufferRangeEXT") == 0) {
    if (__glintercept_fnptr_glMapBufferRangeEXT == NULL) {
      __glintercept_fnptr_glMapBufferRangeEXT = (__ctype_glMapBufferRangeEXT) eglGetProcAddr("glMapBufferRangeEXT");
    }
    if (__glintercept_fnptr_glMapBufferRangeEXT == NULL) return NULL;
    return (void*) __glintercept_glMapBufferRangeEXT;
  }
  if (strcmp(name, "glMapControlPointsNV") == 0) {
    if (__glintercept_fnptr_glMapControlPointsNV == NULL) {
      __glintercept_fnptr_glMapControlPointsNV = (__ctype_glMapControlPointsNV) eglGetProcAddr("glMapControlPointsNV");
    }
    if (__glintercept_fnptr_glMapControlPointsNV == NULL) return NULL;
    return (void*) __glintercept_glMapControlPointsNV;
  }
  if (strcmp(name, "glMapGrid1d") == 0) {
    if (__glintercept_fnptr_glMapGrid1d == NULL) {
      __glintercept_fnptr_glMapGrid1d = (__ctype_glMapGrid1d) eglGetProcAddr("glMapGrid1d");
    }
    if (__glintercept_fnptr_glMapGrid1d == NULL) return NULL;
    return (void*) __glintercept_glMapGrid1d;
  }
  if (strcmp(name, "glMapGrid1f") == 0) {
    if (__glintercept_fnptr_glMapGrid1f == NULL) {
      __glintercept_fnptr_glMapGrid1f = (__ctype_glMapGrid1f) eglGetProcAddr("glMapGrid1f");
    }
    if (__glintercept_fnptr_glMapGrid1f == NULL) return NULL;
    return (void*) __glintercept_glMapGrid1f;
  }
  if (strcmp(name, "glMapGrid1xOES") == 0) {
    if (__glintercept_fnptr_glMapGrid1xOES == NULL) {
      __glintercept_fnptr_glMapGrid1xOES = (__ctype_glMapGrid1xOES) eglGetProcAddr("glMapGrid1xOES");
    }
    if (__glintercept_fnptr_glMapGrid1xOES == NULL) return NULL;
    return (void*) __glintercept_glMapGrid1xOES;
  }
  if (strcmp(name, "glMapGrid2d") == 0) {
    if (__glintercept_fnptr_glMapGrid2d == NULL) {
      __glintercept_fnptr_glMapGrid2d = (__ctype_glMapGrid2d) eglGetProcAddr("glMapGrid2d");
    }
    if (__glintercept_fnptr_glMapGrid2d == NULL) return NULL;
    return (void*) __glintercept_glMapGrid2d;
  }
  if (strcmp(name, "glMapGrid2f") == 0) {
    if (__glintercept_fnptr_glMapGrid2f == NULL) {
      __glintercept_fnptr_glMapGrid2f = (__ctype_glMapGrid2f) eglGetProcAddr("glMapGrid2f");
    }
    if (__glintercept_fnptr_glMapGrid2f == NULL) return NULL;
    return (void*) __glintercept_glMapGrid2f;
  }
  if (strcmp(name, "glMapGrid2xOES") == 0) {
    if (__glintercept_fnptr_glMapGrid2xOES == NULL) {
      __glintercept_fnptr_glMapGrid2xOES = (__ctype_glMapGrid2xOES) eglGetProcAddr("glMapGrid2xOES");
    }
    if (__glintercept_fnptr_glMapGrid2xOES == NULL) return NULL;
    return (void*) __glintercept_glMapGrid2xOES;
  }
  if (strcmp(name, "glMapNamedBuffer") == 0) {
    if (__glintercept_fnptr_glMapNamedBuffer == NULL) {
      __glintercept_fnptr_glMapNamedBuffer = (__ctype_glMapNamedBuffer) eglGetProcAddr("glMapNamedBuffer");
    }
    if (__glintercept_fnptr_glMapNamedBuffer == NULL) return NULL;
    return (void*) __glintercept_glMapNamedBuffer;
  }
  if (strcmp(name, "glMapNamedBufferEXT") == 0) {
    if (__glintercept_fnptr_glMapNamedBufferEXT == NULL) {
      __glintercept_fnptr_glMapNamedBufferEXT = (__ctype_glMapNamedBufferEXT) eglGetProcAddr("glMapNamedBufferEXT");
    }
    if (__glintercept_fnptr_glMapNamedBufferEXT == NULL) return NULL;
    return (void*) __glintercept_glMapNamedBufferEXT;
  }
  if (strcmp(name, "glMapNamedBufferRange") == 0) {
    if (__glintercept_fnptr_glMapNamedBufferRange == NULL) {
      __glintercept_fnptr_glMapNamedBufferRange = (__ctype_glMapNamedBufferRange) eglGetProcAddr("glMapNamedBufferRange");
    }
    if (__glintercept_fnptr_glMapNamedBufferRange == NULL) return NULL;
    return (void*) __glintercept_glMapNamedBufferRange;
  }
  if (strcmp(name, "glMapNamedBufferRangeEXT") == 0) {
    if (__glintercept_fnptr_glMapNamedBufferRangeEXT == NULL) {
      __glintercept_fnptr_glMapNamedBufferRangeEXT = (__ctype_glMapNamedBufferRangeEXT) eglGetProcAddr("glMapNamedBufferRangeEXT");
    }
    if (__glintercept_fnptr_glMapNamedBufferRangeEXT == NULL) return NULL;
    return (void*) __glintercept_glMapNamedBufferRangeEXT;
  }
  if (strcmp(name, "glMapObjectBufferATI") == 0) {
    if (__glintercept_fnptr_glMapObjectBufferATI == NULL) {
      __glintercept_fnptr_glMapObjectBufferATI = (__ctype_glMapObjectBufferATI) eglGetProcAddr("glMapObjectBufferATI");
    }
    if (__glintercept_fnptr_glMapObjectBufferATI == NULL) return NULL;
    return (void*) __glintercept_glMapObjectBufferATI;
  }
  if (strcmp(name, "glMapParameterfvNV") == 0) {
    if (__glintercept_fnptr_glMapParameterfvNV == NULL) {
      __glintercept_fnptr_glMapParameterfvNV = (__ctype_glMapParameterfvNV) eglGetProcAddr("glMapParameterfvNV");
    }
    if (__glintercept_fnptr_glMapParameterfvNV == NULL) return NULL;
    return (void*) __glintercept_glMapParameterfvNV;
  }
  if (strcmp(name, "glMapParameterivNV") == 0) {
    if (__glintercept_fnptr_glMapParameterivNV == NULL) {
      __glintercept_fnptr_glMapParameterivNV = (__ctype_glMapParameterivNV) eglGetProcAddr("glMapParameterivNV");
    }
    if (__glintercept_fnptr_glMapParameterivNV == NULL) return NULL;
    return (void*) __glintercept_glMapParameterivNV;
  }
  if (strcmp(name, "glMapTexture2DINTEL") == 0) {
    if (__glintercept_fnptr_glMapTexture2DINTEL == NULL) {
      __glintercept_fnptr_glMapTexture2DINTEL = (__ctype_glMapTexture2DINTEL) eglGetProcAddr("glMapTexture2DINTEL");
    }
    if (__glintercept_fnptr_glMapTexture2DINTEL == NULL) return NULL;
    return (void*) __glintercept_glMapTexture2DINTEL;
  }
  if (strcmp(name, "glMapVertexAttrib1dAPPLE") == 0) {
    if (__glintercept_fnptr_glMapVertexAttrib1dAPPLE == NULL) {
      __glintercept_fnptr_glMapVertexAttrib1dAPPLE = (__ctype_glMapVertexAttrib1dAPPLE) eglGetProcAddr("glMapVertexAttrib1dAPPLE");
    }
    if (__glintercept_fnptr_glMapVertexAttrib1dAPPLE == NULL) return NULL;
    return (void*) __glintercept_glMapVertexAttrib1dAPPLE;
  }
  if (strcmp(name, "glMapVertexAttrib1fAPPLE") == 0) {
    if (__glintercept_fnptr_glMapVertexAttrib1fAPPLE == NULL) {
      __glintercept_fnptr_glMapVertexAttrib1fAPPLE = (__ctype_glMapVertexAttrib1fAPPLE) eglGetProcAddr("glMapVertexAttrib1fAPPLE");
    }
    if (__glintercept_fnptr_glMapVertexAttrib1fAPPLE == NULL) return NULL;
    return (void*) __glintercept_glMapVertexAttrib1fAPPLE;
  }
  if (strcmp(name, "glMapVertexAttrib2dAPPLE") == 0) {
    if (__glintercept_fnptr_glMapVertexAttrib2dAPPLE == NULL) {
      __glintercept_fnptr_glMapVertexAttrib2dAPPLE = (__ctype_glMapVertexAttrib2dAPPLE) eglGetProcAddr("glMapVertexAttrib2dAPPLE");
    }
    if (__glintercept_fnptr_glMapVertexAttrib2dAPPLE == NULL) return NULL;
    return (void*) __glintercept_glMapVertexAttrib2dAPPLE;
  }
  if (strcmp(name, "glMapVertexAttrib2fAPPLE") == 0) {
    if (__glintercept_fnptr_glMapVertexAttrib2fAPPLE == NULL) {
      __glintercept_fnptr_glMapVertexAttrib2fAPPLE = (__ctype_glMapVertexAttrib2fAPPLE) eglGetProcAddr("glMapVertexAttrib2fAPPLE");
    }
    if (__glintercept_fnptr_glMapVertexAttrib2fAPPLE == NULL) return NULL;
    return (void*) __glintercept_glMapVertexAttrib2fAPPLE;
  }
  if (strcmp(name, "glMaterialf") == 0) {
    if (__glintercept_fnptr_glMaterialf == NULL) {
      __glintercept_fnptr_glMaterialf = (__ctype_glMaterialf) eglGetProcAddr("glMaterialf");
    }
    if (__glintercept_fnptr_glMaterialf == NULL) return NULL;
    return (void*) __glintercept_glMaterialf;
  }
  if (strcmp(name, "glMaterialfv") == 0) {
    if (__glintercept_fnptr_glMaterialfv == NULL) {
      __glintercept_fnptr_glMaterialfv = (__ctype_glMaterialfv) eglGetProcAddr("glMaterialfv");
    }
    if (__glintercept_fnptr_glMaterialfv == NULL) return NULL;
    return (void*) __glintercept_glMaterialfv;
  }
  if (strcmp(name, "glMateriali") == 0) {
    if (__glintercept_fnptr_glMateriali == NULL) {
      __glintercept_fnptr_glMateriali = (__ctype_glMateriali) eglGetProcAddr("glMateriali");
    }
    if (__glintercept_fnptr_glMateriali == NULL) return NULL;
    return (void*) __glintercept_glMateriali;
  }
  if (strcmp(name, "glMaterialiv") == 0) {
    if (__glintercept_fnptr_glMaterialiv == NULL) {
      __glintercept_fnptr_glMaterialiv = (__ctype_glMaterialiv) eglGetProcAddr("glMaterialiv");
    }
    if (__glintercept_fnptr_glMaterialiv == NULL) return NULL;
    return (void*) __glintercept_glMaterialiv;
  }
  if (strcmp(name, "glMaterialx") == 0) {
    if (__glintercept_fnptr_glMaterialx == NULL) {
      __glintercept_fnptr_glMaterialx = (__ctype_glMaterialx) eglGetProcAddr("glMaterialx");
    }
    if (__glintercept_fnptr_glMaterialx == NULL) return NULL;
    return (void*) __glintercept_glMaterialx;
  }
  if (strcmp(name, "glMaterialxOES") == 0) {
    if (__glintercept_fnptr_glMaterialxOES == NULL) {
      __glintercept_fnptr_glMaterialxOES = (__ctype_glMaterialxOES) eglGetProcAddr("glMaterialxOES");
    }
    if (__glintercept_fnptr_glMaterialxOES == NULL) return NULL;
    return (void*) __glintercept_glMaterialxOES;
  }
  if (strcmp(name, "glMaterialxv") == 0) {
    if (__glintercept_fnptr_glMaterialxv == NULL) {
      __glintercept_fnptr_glMaterialxv = (__ctype_glMaterialxv) eglGetProcAddr("glMaterialxv");
    }
    if (__glintercept_fnptr_glMaterialxv == NULL) return NULL;
    return (void*) __glintercept_glMaterialxv;
  }
  if (strcmp(name, "glMaterialxvOES") == 0) {
    if (__glintercept_fnptr_glMaterialxvOES == NULL) {
      __glintercept_fnptr_glMaterialxvOES = (__ctype_glMaterialxvOES) eglGetProcAddr("glMaterialxvOES");
    }
    if (__glintercept_fnptr_glMaterialxvOES == NULL) return NULL;
    return (void*) __glintercept_glMaterialxvOES;
  }
  if (strcmp(name, "glMatrixFrustumEXT") == 0) {
    if (__glintercept_fnptr_glMatrixFrustumEXT == NULL) {
      __glintercept_fnptr_glMatrixFrustumEXT = (__ctype_glMatrixFrustumEXT) eglGetProcAddr("glMatrixFrustumEXT");
    }
    if (__glintercept_fnptr_glMatrixFrustumEXT == NULL) return NULL;
    return (void*) __glintercept_glMatrixFrustumEXT;
  }
  if (strcmp(name, "glMatrixIndexPointerARB") == 0) {
    if (__glintercept_fnptr_glMatrixIndexPointerARB == NULL) {
      __glintercept_fnptr_glMatrixIndexPointerARB = (__ctype_glMatrixIndexPointerARB) eglGetProcAddr("glMatrixIndexPointerARB");
    }
    if (__glintercept_fnptr_glMatrixIndexPointerARB == NULL) return NULL;
    return (void*) __glintercept_glMatrixIndexPointerARB;
  }
  if (strcmp(name, "glMatrixIndexPointerOES") == 0) {
    if (__glintercept_fnptr_glMatrixIndexPointerOES == NULL) {
      __glintercept_fnptr_glMatrixIndexPointerOES = (__ctype_glMatrixIndexPointerOES) eglGetProcAddr("glMatrixIndexPointerOES");
    }
    if (__glintercept_fnptr_glMatrixIndexPointerOES == NULL) return NULL;
    return (void*) __glintercept_glMatrixIndexPointerOES;
  }
  if (strcmp(name, "glMatrixIndexubvARB") == 0) {
    if (__glintercept_fnptr_glMatrixIndexubvARB == NULL) {
      __glintercept_fnptr_glMatrixIndexubvARB = (__ctype_glMatrixIndexubvARB) eglGetProcAddr("glMatrixIndexubvARB");
    }
    if (__glintercept_fnptr_glMatrixIndexubvARB == NULL) return NULL;
    return (void*) __glintercept_glMatrixIndexubvARB;
  }
  if (strcmp(name, "glMatrixIndexuivARB") == 0) {
    if (__glintercept_fnptr_glMatrixIndexuivARB == NULL) {
      __glintercept_fnptr_glMatrixIndexuivARB = (__ctype_glMatrixIndexuivARB) eglGetProcAddr("glMatrixIndexuivARB");
    }
    if (__glintercept_fnptr_glMatrixIndexuivARB == NULL) return NULL;
    return (void*) __glintercept_glMatrixIndexuivARB;
  }
  if (strcmp(name, "glMatrixIndexusvARB") == 0) {
    if (__glintercept_fnptr_glMatrixIndexusvARB == NULL) {
      __glintercept_fnptr_glMatrixIndexusvARB = (__ctype_glMatrixIndexusvARB) eglGetProcAddr("glMatrixIndexusvARB");
    }
    if (__glintercept_fnptr_glMatrixIndexusvARB == NULL) return NULL;
    return (void*) __glintercept_glMatrixIndexusvARB;
  }
  if (strcmp(name, "glMatrixLoad3x2fNV") == 0) {
    if (__glintercept_fnptr_glMatrixLoad3x2fNV == NULL) {
      __glintercept_fnptr_glMatrixLoad3x2fNV = (__ctype_glMatrixLoad3x2fNV) eglGetProcAddr("glMatrixLoad3x2fNV");
    }
    if (__glintercept_fnptr_glMatrixLoad3x2fNV == NULL) return NULL;
    return (void*) __glintercept_glMatrixLoad3x2fNV;
  }
  if (strcmp(name, "glMatrixLoad3x3fNV") == 0) {
    if (__glintercept_fnptr_glMatrixLoad3x3fNV == NULL) {
      __glintercept_fnptr_glMatrixLoad3x3fNV = (__ctype_glMatrixLoad3x3fNV) eglGetProcAddr("glMatrixLoad3x3fNV");
    }
    if (__glintercept_fnptr_glMatrixLoad3x3fNV == NULL) return NULL;
    return (void*) __glintercept_glMatrixLoad3x3fNV;
  }
  if (strcmp(name, "glMatrixLoadIdentityEXT") == 0) {
    if (__glintercept_fnptr_glMatrixLoadIdentityEXT == NULL) {
      __glintercept_fnptr_glMatrixLoadIdentityEXT = (__ctype_glMatrixLoadIdentityEXT) eglGetProcAddr("glMatrixLoadIdentityEXT");
    }
    if (__glintercept_fnptr_glMatrixLoadIdentityEXT == NULL) return NULL;
    return (void*) __glintercept_glMatrixLoadIdentityEXT;
  }
  if (strcmp(name, "glMatrixLoadTranspose3x3fNV") == 0) {
    if (__glintercept_fnptr_glMatrixLoadTranspose3x3fNV == NULL) {
      __glintercept_fnptr_glMatrixLoadTranspose3x3fNV = (__ctype_glMatrixLoadTranspose3x3fNV) eglGetProcAddr("glMatrixLoadTranspose3x3fNV");
    }
    if (__glintercept_fnptr_glMatrixLoadTranspose3x3fNV == NULL) return NULL;
    return (void*) __glintercept_glMatrixLoadTranspose3x3fNV;
  }
  if (strcmp(name, "glMatrixLoadTransposedEXT") == 0) {
    if (__glintercept_fnptr_glMatrixLoadTransposedEXT == NULL) {
      __glintercept_fnptr_glMatrixLoadTransposedEXT = (__ctype_glMatrixLoadTransposedEXT) eglGetProcAddr("glMatrixLoadTransposedEXT");
    }
    if (__glintercept_fnptr_glMatrixLoadTransposedEXT == NULL) return NULL;
    return (void*) __glintercept_glMatrixLoadTransposedEXT;
  }
  if (strcmp(name, "glMatrixLoadTransposefEXT") == 0) {
    if (__glintercept_fnptr_glMatrixLoadTransposefEXT == NULL) {
      __glintercept_fnptr_glMatrixLoadTransposefEXT = (__ctype_glMatrixLoadTransposefEXT) eglGetProcAddr("glMatrixLoadTransposefEXT");
    }
    if (__glintercept_fnptr_glMatrixLoadTransposefEXT == NULL) return NULL;
    return (void*) __glintercept_glMatrixLoadTransposefEXT;
  }
  if (strcmp(name, "glMatrixLoaddEXT") == 0) {
    if (__glintercept_fnptr_glMatrixLoaddEXT == NULL) {
      __glintercept_fnptr_glMatrixLoaddEXT = (__ctype_glMatrixLoaddEXT) eglGetProcAddr("glMatrixLoaddEXT");
    }
    if (__glintercept_fnptr_glMatrixLoaddEXT == NULL) return NULL;
    return (void*) __glintercept_glMatrixLoaddEXT;
  }
  if (strcmp(name, "glMatrixLoadfEXT") == 0) {
    if (__glintercept_fnptr_glMatrixLoadfEXT == NULL) {
      __glintercept_fnptr_glMatrixLoadfEXT = (__ctype_glMatrixLoadfEXT) eglGetProcAddr("glMatrixLoadfEXT");
    }
    if (__glintercept_fnptr_glMatrixLoadfEXT == NULL) return NULL;
    return (void*) __glintercept_glMatrixLoadfEXT;
  }
  if (strcmp(name, "glMatrixMode") == 0) {
    if (__glintercept_fnptr_glMatrixMode == NULL) {
      __glintercept_fnptr_glMatrixMode = (__ctype_glMatrixMode) eglGetProcAddr("glMatrixMode");
    }
    if (__glintercept_fnptr_glMatrixMode == NULL) return NULL;
    return (void*) __glintercept_glMatrixMode;
  }
  if (strcmp(name, "glMatrixMult3x2fNV") == 0) {
    if (__glintercept_fnptr_glMatrixMult3x2fNV == NULL) {
      __glintercept_fnptr_glMatrixMult3x2fNV = (__ctype_glMatrixMult3x2fNV) eglGetProcAddr("glMatrixMult3x2fNV");
    }
    if (__glintercept_fnptr_glMatrixMult3x2fNV == NULL) return NULL;
    return (void*) __glintercept_glMatrixMult3x2fNV;
  }
  if (strcmp(name, "glMatrixMult3x3fNV") == 0) {
    if (__glintercept_fnptr_glMatrixMult3x3fNV == NULL) {
      __glintercept_fnptr_glMatrixMult3x3fNV = (__ctype_glMatrixMult3x3fNV) eglGetProcAddr("glMatrixMult3x3fNV");
    }
    if (__glintercept_fnptr_glMatrixMult3x3fNV == NULL) return NULL;
    return (void*) __glintercept_glMatrixMult3x3fNV;
  }
  if (strcmp(name, "glMatrixMultTranspose3x3fNV") == 0) {
    if (__glintercept_fnptr_glMatrixMultTranspose3x3fNV == NULL) {
      __glintercept_fnptr_glMatrixMultTranspose3x3fNV = (__ctype_glMatrixMultTranspose3x3fNV) eglGetProcAddr("glMatrixMultTranspose3x3fNV");
    }
    if (__glintercept_fnptr_glMatrixMultTranspose3x3fNV == NULL) return NULL;
    return (void*) __glintercept_glMatrixMultTranspose3x3fNV;
  }
  if (strcmp(name, "glMatrixMultTransposedEXT") == 0) {
    if (__glintercept_fnptr_glMatrixMultTransposedEXT == NULL) {
      __glintercept_fnptr_glMatrixMultTransposedEXT = (__ctype_glMatrixMultTransposedEXT) eglGetProcAddr("glMatrixMultTransposedEXT");
    }
    if (__glintercept_fnptr_glMatrixMultTransposedEXT == NULL) return NULL;
    return (void*) __glintercept_glMatrixMultTransposedEXT;
  }
  if (strcmp(name, "glMatrixMultTransposefEXT") == 0) {
    if (__glintercept_fnptr_glMatrixMultTransposefEXT == NULL) {
      __glintercept_fnptr_glMatrixMultTransposefEXT = (__ctype_glMatrixMultTransposefEXT) eglGetProcAddr("glMatrixMultTransposefEXT");
    }
    if (__glintercept_fnptr_glMatrixMultTransposefEXT == NULL) return NULL;
    return (void*) __glintercept_glMatrixMultTransposefEXT;
  }
  if (strcmp(name, "glMatrixMultdEXT") == 0) {
    if (__glintercept_fnptr_glMatrixMultdEXT == NULL) {
      __glintercept_fnptr_glMatrixMultdEXT = (__ctype_glMatrixMultdEXT) eglGetProcAddr("glMatrixMultdEXT");
    }
    if (__glintercept_fnptr_glMatrixMultdEXT == NULL) return NULL;
    return (void*) __glintercept_glMatrixMultdEXT;
  }
  if (strcmp(name, "glMatrixMultfEXT") == 0) {
    if (__glintercept_fnptr_glMatrixMultfEXT == NULL) {
      __glintercept_fnptr_glMatrixMultfEXT = (__ctype_glMatrixMultfEXT) eglGetProcAddr("glMatrixMultfEXT");
    }
    if (__glintercept_fnptr_glMatrixMultfEXT == NULL) return NULL;
    return (void*) __glintercept_glMatrixMultfEXT;
  }
  if (strcmp(name, "glMatrixOrthoEXT") == 0) {
    if (__glintercept_fnptr_glMatrixOrthoEXT == NULL) {
      __glintercept_fnptr_glMatrixOrthoEXT = (__ctype_glMatrixOrthoEXT) eglGetProcAddr("glMatrixOrthoEXT");
    }
    if (__glintercept_fnptr_glMatrixOrthoEXT == NULL) return NULL;
    return (void*) __glintercept_glMatrixOrthoEXT;
  }
  if (strcmp(name, "glMatrixPopEXT") == 0) {
    if (__glintercept_fnptr_glMatrixPopEXT == NULL) {
      __glintercept_fnptr_glMatrixPopEXT = (__ctype_glMatrixPopEXT) eglGetProcAddr("glMatrixPopEXT");
    }
    if (__glintercept_fnptr_glMatrixPopEXT == NULL) return NULL;
    return (void*) __glintercept_glMatrixPopEXT;
  }
  if (strcmp(name, "glMatrixPushEXT") == 0) {
    if (__glintercept_fnptr_glMatrixPushEXT == NULL) {
      __glintercept_fnptr_glMatrixPushEXT = (__ctype_glMatrixPushEXT) eglGetProcAddr("glMatrixPushEXT");
    }
    if (__glintercept_fnptr_glMatrixPushEXT == NULL) return NULL;
    return (void*) __glintercept_glMatrixPushEXT;
  }
  if (strcmp(name, "glMatrixRotatedEXT") == 0) {
    if (__glintercept_fnptr_glMatrixRotatedEXT == NULL) {
      __glintercept_fnptr_glMatrixRotatedEXT = (__ctype_glMatrixRotatedEXT) eglGetProcAddr("glMatrixRotatedEXT");
    }
    if (__glintercept_fnptr_glMatrixRotatedEXT == NULL) return NULL;
    return (void*) __glintercept_glMatrixRotatedEXT;
  }
  if (strcmp(name, "glMatrixRotatefEXT") == 0) {
    if (__glintercept_fnptr_glMatrixRotatefEXT == NULL) {
      __glintercept_fnptr_glMatrixRotatefEXT = (__ctype_glMatrixRotatefEXT) eglGetProcAddr("glMatrixRotatefEXT");
    }
    if (__glintercept_fnptr_glMatrixRotatefEXT == NULL) return NULL;
    return (void*) __glintercept_glMatrixRotatefEXT;
  }
  if (strcmp(name, "glMatrixScaledEXT") == 0) {
    if (__glintercept_fnptr_glMatrixScaledEXT == NULL) {
      __glintercept_fnptr_glMatrixScaledEXT = (__ctype_glMatrixScaledEXT) eglGetProcAddr("glMatrixScaledEXT");
    }
    if (__glintercept_fnptr_glMatrixScaledEXT == NULL) return NULL;
    return (void*) __glintercept_glMatrixScaledEXT;
  }
  if (strcmp(name, "glMatrixScalefEXT") == 0) {
    if (__glintercept_fnptr_glMatrixScalefEXT == NULL) {
      __glintercept_fnptr_glMatrixScalefEXT = (__ctype_glMatrixScalefEXT) eglGetProcAddr("glMatrixScalefEXT");
    }
    if (__glintercept_fnptr_glMatrixScalefEXT == NULL) return NULL;
    return (void*) __glintercept_glMatrixScalefEXT;
  }
  if (strcmp(name, "glMatrixTranslatedEXT") == 0) {
    if (__glintercept_fnptr_glMatrixTranslatedEXT == NULL) {
      __glintercept_fnptr_glMatrixTranslatedEXT = (__ctype_glMatrixTranslatedEXT) eglGetProcAddr("glMatrixTranslatedEXT");
    }
    if (__glintercept_fnptr_glMatrixTranslatedEXT == NULL) return NULL;
    return (void*) __glintercept_glMatrixTranslatedEXT;
  }
  if (strcmp(name, "glMatrixTranslatefEXT") == 0) {
    if (__glintercept_fnptr_glMatrixTranslatefEXT == NULL) {
      __glintercept_fnptr_glMatrixTranslatefEXT = (__ctype_glMatrixTranslatefEXT) eglGetProcAddr("glMatrixTranslatefEXT");
    }
    if (__glintercept_fnptr_glMatrixTranslatefEXT == NULL) return NULL;
    return (void*) __glintercept_glMatrixTranslatefEXT;
  }
  if (strcmp(name, "glMaxShaderCompilerThreadsKHR") == 0) {
    if (__glintercept_fnptr_glMaxShaderCompilerThreadsKHR == NULL) {
      __glintercept_fnptr_glMaxShaderCompilerThreadsKHR = (__ctype_glMaxShaderCompilerThreadsKHR) eglGetProcAddr("glMaxShaderCompilerThreadsKHR");
    }
    if (__glintercept_fnptr_glMaxShaderCompilerThreadsKHR == NULL) return NULL;
    return (void*) __glintercept_glMaxShaderCompilerThreadsKHR;
  }
  if (strcmp(name, "glMaxShaderCompilerThreadsARB") == 0) {
    if (__glintercept_fnptr_glMaxShaderCompilerThreadsARB == NULL) {
      __glintercept_fnptr_glMaxShaderCompilerThreadsARB = (__ctype_glMaxShaderCompilerThreadsARB) eglGetProcAddr("glMaxShaderCompilerThreadsARB");
    }
    if (__glintercept_fnptr_glMaxShaderCompilerThreadsARB == NULL) return NULL;
    return (void*) __glintercept_glMaxShaderCompilerThreadsARB;
  }
  if (strcmp(name, "glMemoryBarrier") == 0) {
    if (__glintercept_fnptr_glMemoryBarrier == NULL) {
      __glintercept_fnptr_glMemoryBarrier = (__ctype_glMemoryBarrier) eglGetProcAddr("glMemoryBarrier");
    }
    if (__glintercept_fnptr_glMemoryBarrier == NULL) return NULL;
    return (void*) __glintercept_glMemoryBarrier;
  }
  if (strcmp(name, "glMemoryBarrierByRegion") == 0) {
    if (__glintercept_fnptr_glMemoryBarrierByRegion == NULL) {
      __glintercept_fnptr_glMemoryBarrierByRegion = (__ctype_glMemoryBarrierByRegion) eglGetProcAddr("glMemoryBarrierByRegion");
    }
    if (__glintercept_fnptr_glMemoryBarrierByRegion == NULL) return NULL;
    return (void*) __glintercept_glMemoryBarrierByRegion;
  }
  if (strcmp(name, "glMemoryBarrierEXT") == 0) {
    if (__glintercept_fnptr_glMemoryBarrierEXT == NULL) {
      __glintercept_fnptr_glMemoryBarrierEXT = (__ctype_glMemoryBarrierEXT) eglGetProcAddr("glMemoryBarrierEXT");
    }
    if (__glintercept_fnptr_glMemoryBarrierEXT == NULL) return NULL;
    return (void*) __glintercept_glMemoryBarrierEXT;
  }
  if (strcmp(name, "glMemoryObjectParameterivEXT") == 0) {
    if (__glintercept_fnptr_glMemoryObjectParameterivEXT == NULL) {
      __glintercept_fnptr_glMemoryObjectParameterivEXT = (__ctype_glMemoryObjectParameterivEXT) eglGetProcAddr("glMemoryObjectParameterivEXT");
    }
    if (__glintercept_fnptr_glMemoryObjectParameterivEXT == NULL) return NULL;
    return (void*) __glintercept_glMemoryObjectParameterivEXT;
  }
  if (strcmp(name, "glMinSampleShading") == 0) {
    if (__glintercept_fnptr_glMinSampleShading == NULL) {
      __glintercept_fnptr_glMinSampleShading = (__ctype_glMinSampleShading) eglGetProcAddr("glMinSampleShading");
    }
    if (__glintercept_fnptr_glMinSampleShading == NULL) return NULL;
    return (void*) __glintercept_glMinSampleShading;
  }
  if (strcmp(name, "glMinSampleShadingARB") == 0) {
    if (__glintercept_fnptr_glMinSampleShadingARB == NULL) {
      __glintercept_fnptr_glMinSampleShadingARB = (__ctype_glMinSampleShadingARB) eglGetProcAddr("glMinSampleShadingARB");
    }
    if (__glintercept_fnptr_glMinSampleShadingARB == NULL) return NULL;
    return (void*) __glintercept_glMinSampleShadingARB;
  }
  if (strcmp(name, "glMinSampleShadingOES") == 0) {
    if (__glintercept_fnptr_glMinSampleShadingOES == NULL) {
      __glintercept_fnptr_glMinSampleShadingOES = (__ctype_glMinSampleShadingOES) eglGetProcAddr("glMinSampleShadingOES");
    }
    if (__glintercept_fnptr_glMinSampleShadingOES == NULL) return NULL;
    return (void*) __glintercept_glMinSampleShadingOES;
  }
  if (strcmp(name, "glMinmax") == 0) {
    if (__glintercept_fnptr_glMinmax == NULL) {
      __glintercept_fnptr_glMinmax = (__ctype_glMinmax) eglGetProcAddr("glMinmax");
    }
    if (__glintercept_fnptr_glMinmax == NULL) return NULL;
    return (void*) __glintercept_glMinmax;
  }
  if (strcmp(name, "glMinmaxEXT") == 0) {
    if (__glintercept_fnptr_glMinmaxEXT == NULL) {
      __glintercept_fnptr_glMinmaxEXT = (__ctype_glMinmaxEXT) eglGetProcAddr("glMinmaxEXT");
    }
    if (__glintercept_fnptr_glMinmaxEXT == NULL) return NULL;
    return (void*) __glintercept_glMinmaxEXT;
  }
  if (strcmp(name, "glMultMatrixd") == 0) {
    if (__glintercept_fnptr_glMultMatrixd == NULL) {
      __glintercept_fnptr_glMultMatrixd = (__ctype_glMultMatrixd) eglGetProcAddr("glMultMatrixd");
    }
    if (__glintercept_fnptr_glMultMatrixd == NULL) return NULL;
    return (void*) __glintercept_glMultMatrixd;
  }
  if (strcmp(name, "glMultMatrixf") == 0) {
    if (__glintercept_fnptr_glMultMatrixf == NULL) {
      __glintercept_fnptr_glMultMatrixf = (__ctype_glMultMatrixf) eglGetProcAddr("glMultMatrixf");
    }
    if (__glintercept_fnptr_glMultMatrixf == NULL) return NULL;
    return (void*) __glintercept_glMultMatrixf;
  }
  if (strcmp(name, "glMultMatrixx") == 0) {
    if (__glintercept_fnptr_glMultMatrixx == NULL) {
      __glintercept_fnptr_glMultMatrixx = (__ctype_glMultMatrixx) eglGetProcAddr("glMultMatrixx");
    }
    if (__glintercept_fnptr_glMultMatrixx == NULL) return NULL;
    return (void*) __glintercept_glMultMatrixx;
  }
  if (strcmp(name, "glMultMatrixxOES") == 0) {
    if (__glintercept_fnptr_glMultMatrixxOES == NULL) {
      __glintercept_fnptr_glMultMatrixxOES = (__ctype_glMultMatrixxOES) eglGetProcAddr("glMultMatrixxOES");
    }
    if (__glintercept_fnptr_glMultMatrixxOES == NULL) return NULL;
    return (void*) __glintercept_glMultMatrixxOES;
  }
  if (strcmp(name, "glMultTransposeMatrixd") == 0) {
    if (__glintercept_fnptr_glMultTransposeMatrixd == NULL) {
      __glintercept_fnptr_glMultTransposeMatrixd = (__ctype_glMultTransposeMatrixd) eglGetProcAddr("glMultTransposeMatrixd");
    }
    if (__glintercept_fnptr_glMultTransposeMatrixd == NULL) return NULL;
    return (void*) __glintercept_glMultTransposeMatrixd;
  }
  if (strcmp(name, "glMultTransposeMatrixdARB") == 0) {
    if (__glintercept_fnptr_glMultTransposeMatrixdARB == NULL) {
      __glintercept_fnptr_glMultTransposeMatrixdARB = (__ctype_glMultTransposeMatrixdARB) eglGetProcAddr("glMultTransposeMatrixdARB");
    }
    if (__glintercept_fnptr_glMultTransposeMatrixdARB == NULL) return NULL;
    return (void*) __glintercept_glMultTransposeMatrixdARB;
  }
  if (strcmp(name, "glMultTransposeMatrixf") == 0) {
    if (__glintercept_fnptr_glMultTransposeMatrixf == NULL) {
      __glintercept_fnptr_glMultTransposeMatrixf = (__ctype_glMultTransposeMatrixf) eglGetProcAddr("glMultTransposeMatrixf");
    }
    if (__glintercept_fnptr_glMultTransposeMatrixf == NULL) return NULL;
    return (void*) __glintercept_glMultTransposeMatrixf;
  }
  if (strcmp(name, "glMultTransposeMatrixfARB") == 0) {
    if (__glintercept_fnptr_glMultTransposeMatrixfARB == NULL) {
      __glintercept_fnptr_glMultTransposeMatrixfARB = (__ctype_glMultTransposeMatrixfARB) eglGetProcAddr("glMultTransposeMatrixfARB");
    }
    if (__glintercept_fnptr_glMultTransposeMatrixfARB == NULL) return NULL;
    return (void*) __glintercept_glMultTransposeMatrixfARB;
  }
  if (strcmp(name, "glMultTransposeMatrixxOES") == 0) {
    if (__glintercept_fnptr_glMultTransposeMatrixxOES == NULL) {
      __glintercept_fnptr_glMultTransposeMatrixxOES = (__ctype_glMultTransposeMatrixxOES) eglGetProcAddr("glMultTransposeMatrixxOES");
    }
    if (__glintercept_fnptr_glMultTransposeMatrixxOES == NULL) return NULL;
    return (void*) __glintercept_glMultTransposeMatrixxOES;
  }
  if (strcmp(name, "glMultiDrawArrays") == 0) {
    if (__glintercept_fnptr_glMultiDrawArrays == NULL) {
      __glintercept_fnptr_glMultiDrawArrays = (__ctype_glMultiDrawArrays) eglGetProcAddr("glMultiDrawArrays");
    }
    if (__glintercept_fnptr_glMultiDrawArrays == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawArrays;
  }
  if (strcmp(name, "glMultiDrawArraysEXT") == 0) {
    if (__glintercept_fnptr_glMultiDrawArraysEXT == NULL) {
      __glintercept_fnptr_glMultiDrawArraysEXT = (__ctype_glMultiDrawArraysEXT) eglGetProcAddr("glMultiDrawArraysEXT");
    }
    if (__glintercept_fnptr_glMultiDrawArraysEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawArraysEXT;
  }
  if (strcmp(name, "glMultiDrawArraysIndirect") == 0) {
    if (__glintercept_fnptr_glMultiDrawArraysIndirect == NULL) {
      __glintercept_fnptr_glMultiDrawArraysIndirect = (__ctype_glMultiDrawArraysIndirect) eglGetProcAddr("glMultiDrawArraysIndirect");
    }
    if (__glintercept_fnptr_glMultiDrawArraysIndirect == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawArraysIndirect;
  }
  if (strcmp(name, "glMultiDrawArraysIndirectAMD") == 0) {
    if (__glintercept_fnptr_glMultiDrawArraysIndirectAMD == NULL) {
      __glintercept_fnptr_glMultiDrawArraysIndirectAMD = (__ctype_glMultiDrawArraysIndirectAMD) eglGetProcAddr("glMultiDrawArraysIndirectAMD");
    }
    if (__glintercept_fnptr_glMultiDrawArraysIndirectAMD == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawArraysIndirectAMD;
  }
  if (strcmp(name, "glMultiDrawArraysIndirectBindlessCountNV") == 0) {
    if (__glintercept_fnptr_glMultiDrawArraysIndirectBindlessCountNV == NULL) {
      __glintercept_fnptr_glMultiDrawArraysIndirectBindlessCountNV = (__ctype_glMultiDrawArraysIndirectBindlessCountNV) eglGetProcAddr("glMultiDrawArraysIndirectBindlessCountNV");
    }
    if (__glintercept_fnptr_glMultiDrawArraysIndirectBindlessCountNV == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawArraysIndirectBindlessCountNV;
  }
  if (strcmp(name, "glMultiDrawArraysIndirectBindlessNV") == 0) {
    if (__glintercept_fnptr_glMultiDrawArraysIndirectBindlessNV == NULL) {
      __glintercept_fnptr_glMultiDrawArraysIndirectBindlessNV = (__ctype_glMultiDrawArraysIndirectBindlessNV) eglGetProcAddr("glMultiDrawArraysIndirectBindlessNV");
    }
    if (__glintercept_fnptr_glMultiDrawArraysIndirectBindlessNV == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawArraysIndirectBindlessNV;
  }
  if (strcmp(name, "glMultiDrawArraysIndirectCount") == 0) {
    if (__glintercept_fnptr_glMultiDrawArraysIndirectCount == NULL) {
      __glintercept_fnptr_glMultiDrawArraysIndirectCount = (__ctype_glMultiDrawArraysIndirectCount) eglGetProcAddr("glMultiDrawArraysIndirectCount");
    }
    if (__glintercept_fnptr_glMultiDrawArraysIndirectCount == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawArraysIndirectCount;
  }
  if (strcmp(name, "glMultiDrawArraysIndirectCountARB") == 0) {
    if (__glintercept_fnptr_glMultiDrawArraysIndirectCountARB == NULL) {
      __glintercept_fnptr_glMultiDrawArraysIndirectCountARB = (__ctype_glMultiDrawArraysIndirectCountARB) eglGetProcAddr("glMultiDrawArraysIndirectCountARB");
    }
    if (__glintercept_fnptr_glMultiDrawArraysIndirectCountARB == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawArraysIndirectCountARB;
  }
  if (strcmp(name, "glMultiDrawArraysIndirectEXT") == 0) {
    if (__glintercept_fnptr_glMultiDrawArraysIndirectEXT == NULL) {
      __glintercept_fnptr_glMultiDrawArraysIndirectEXT = (__ctype_glMultiDrawArraysIndirectEXT) eglGetProcAddr("glMultiDrawArraysIndirectEXT");
    }
    if (__glintercept_fnptr_glMultiDrawArraysIndirectEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawArraysIndirectEXT;
  }
  if (strcmp(name, "glMultiDrawElementArrayAPPLE") == 0) {
    if (__glintercept_fnptr_glMultiDrawElementArrayAPPLE == NULL) {
      __glintercept_fnptr_glMultiDrawElementArrayAPPLE = (__ctype_glMultiDrawElementArrayAPPLE) eglGetProcAddr("glMultiDrawElementArrayAPPLE");
    }
    if (__glintercept_fnptr_glMultiDrawElementArrayAPPLE == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawElementArrayAPPLE;
  }
  if (strcmp(name, "glMultiDrawElements") == 0) {
    if (__glintercept_fnptr_glMultiDrawElements == NULL) {
      __glintercept_fnptr_glMultiDrawElements = (__ctype_glMultiDrawElements) eglGetProcAddr("glMultiDrawElements");
    }
    if (__glintercept_fnptr_glMultiDrawElements == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawElements;
  }
  if (strcmp(name, "glMultiDrawElementsBaseVertex") == 0) {
    if (__glintercept_fnptr_glMultiDrawElementsBaseVertex == NULL) {
      __glintercept_fnptr_glMultiDrawElementsBaseVertex = (__ctype_glMultiDrawElementsBaseVertex) eglGetProcAddr("glMultiDrawElementsBaseVertex");
    }
    if (__glintercept_fnptr_glMultiDrawElementsBaseVertex == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawElementsBaseVertex;
  }
  if (strcmp(name, "glMultiDrawElementsBaseVertexEXT") == 0) {
    if (__glintercept_fnptr_glMultiDrawElementsBaseVertexEXT == NULL) {
      __glintercept_fnptr_glMultiDrawElementsBaseVertexEXT = (__ctype_glMultiDrawElementsBaseVertexEXT) eglGetProcAddr("glMultiDrawElementsBaseVertexEXT");
    }
    if (__glintercept_fnptr_glMultiDrawElementsBaseVertexEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawElementsBaseVertexEXT;
  }
  if (strcmp(name, "glMultiDrawElementsEXT") == 0) {
    if (__glintercept_fnptr_glMultiDrawElementsEXT == NULL) {
      __glintercept_fnptr_glMultiDrawElementsEXT = (__ctype_glMultiDrawElementsEXT) eglGetProcAddr("glMultiDrawElementsEXT");
    }
    if (__glintercept_fnptr_glMultiDrawElementsEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawElementsEXT;
  }
  if (strcmp(name, "glMultiDrawElementsIndirect") == 0) {
    if (__glintercept_fnptr_glMultiDrawElementsIndirect == NULL) {
      __glintercept_fnptr_glMultiDrawElementsIndirect = (__ctype_glMultiDrawElementsIndirect) eglGetProcAddr("glMultiDrawElementsIndirect");
    }
    if (__glintercept_fnptr_glMultiDrawElementsIndirect == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawElementsIndirect;
  }
  if (strcmp(name, "glMultiDrawElementsIndirectAMD") == 0) {
    if (__glintercept_fnptr_glMultiDrawElementsIndirectAMD == NULL) {
      __glintercept_fnptr_glMultiDrawElementsIndirectAMD = (__ctype_glMultiDrawElementsIndirectAMD) eglGetProcAddr("glMultiDrawElementsIndirectAMD");
    }
    if (__glintercept_fnptr_glMultiDrawElementsIndirectAMD == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawElementsIndirectAMD;
  }
  if (strcmp(name, "glMultiDrawElementsIndirectBindlessCountNV") == 0) {
    if (__glintercept_fnptr_glMultiDrawElementsIndirectBindlessCountNV == NULL) {
      __glintercept_fnptr_glMultiDrawElementsIndirectBindlessCountNV = (__ctype_glMultiDrawElementsIndirectBindlessCountNV) eglGetProcAddr("glMultiDrawElementsIndirectBindlessCountNV");
    }
    if (__glintercept_fnptr_glMultiDrawElementsIndirectBindlessCountNV == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawElementsIndirectBindlessCountNV;
  }
  if (strcmp(name, "glMultiDrawElementsIndirectBindlessNV") == 0) {
    if (__glintercept_fnptr_glMultiDrawElementsIndirectBindlessNV == NULL) {
      __glintercept_fnptr_glMultiDrawElementsIndirectBindlessNV = (__ctype_glMultiDrawElementsIndirectBindlessNV) eglGetProcAddr("glMultiDrawElementsIndirectBindlessNV");
    }
    if (__glintercept_fnptr_glMultiDrawElementsIndirectBindlessNV == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawElementsIndirectBindlessNV;
  }
  if (strcmp(name, "glMultiDrawElementsIndirectCount") == 0) {
    if (__glintercept_fnptr_glMultiDrawElementsIndirectCount == NULL) {
      __glintercept_fnptr_glMultiDrawElementsIndirectCount = (__ctype_glMultiDrawElementsIndirectCount) eglGetProcAddr("glMultiDrawElementsIndirectCount");
    }
    if (__glintercept_fnptr_glMultiDrawElementsIndirectCount == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawElementsIndirectCount;
  }
  if (strcmp(name, "glMultiDrawElementsIndirectCountARB") == 0) {
    if (__glintercept_fnptr_glMultiDrawElementsIndirectCountARB == NULL) {
      __glintercept_fnptr_glMultiDrawElementsIndirectCountARB = (__ctype_glMultiDrawElementsIndirectCountARB) eglGetProcAddr("glMultiDrawElementsIndirectCountARB");
    }
    if (__glintercept_fnptr_glMultiDrawElementsIndirectCountARB == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawElementsIndirectCountARB;
  }
  if (strcmp(name, "glMultiDrawElementsIndirectEXT") == 0) {
    if (__glintercept_fnptr_glMultiDrawElementsIndirectEXT == NULL) {
      __glintercept_fnptr_glMultiDrawElementsIndirectEXT = (__ctype_glMultiDrawElementsIndirectEXT) eglGetProcAddr("glMultiDrawElementsIndirectEXT");
    }
    if (__glintercept_fnptr_glMultiDrawElementsIndirectEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawElementsIndirectEXT;
  }
  if (strcmp(name, "glMultiDrawMeshTasksIndirectNV") == 0) {
    if (__glintercept_fnptr_glMultiDrawMeshTasksIndirectNV == NULL) {
      __glintercept_fnptr_glMultiDrawMeshTasksIndirectNV = (__ctype_glMultiDrawMeshTasksIndirectNV) eglGetProcAddr("glMultiDrawMeshTasksIndirectNV");
    }
    if (__glintercept_fnptr_glMultiDrawMeshTasksIndirectNV == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawMeshTasksIndirectNV;
  }
  if (strcmp(name, "glMultiDrawMeshTasksIndirectCountNV") == 0) {
    if (__glintercept_fnptr_glMultiDrawMeshTasksIndirectCountNV == NULL) {
      __glintercept_fnptr_glMultiDrawMeshTasksIndirectCountNV = (__ctype_glMultiDrawMeshTasksIndirectCountNV) eglGetProcAddr("glMultiDrawMeshTasksIndirectCountNV");
    }
    if (__glintercept_fnptr_glMultiDrawMeshTasksIndirectCountNV == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawMeshTasksIndirectCountNV;
  }
  if (strcmp(name, "glMultiDrawRangeElementArrayAPPLE") == 0) {
    if (__glintercept_fnptr_glMultiDrawRangeElementArrayAPPLE == NULL) {
      __glintercept_fnptr_glMultiDrawRangeElementArrayAPPLE = (__ctype_glMultiDrawRangeElementArrayAPPLE) eglGetProcAddr("glMultiDrawRangeElementArrayAPPLE");
    }
    if (__glintercept_fnptr_glMultiDrawRangeElementArrayAPPLE == NULL) return NULL;
    return (void*) __glintercept_glMultiDrawRangeElementArrayAPPLE;
  }
  if (strcmp(name, "glMultiModeDrawArraysIBM") == 0) {
    if (__glintercept_fnptr_glMultiModeDrawArraysIBM == NULL) {
      __glintercept_fnptr_glMultiModeDrawArraysIBM = (__ctype_glMultiModeDrawArraysIBM) eglGetProcAddr("glMultiModeDrawArraysIBM");
    }
    if (__glintercept_fnptr_glMultiModeDrawArraysIBM == NULL) return NULL;
    return (void*) __glintercept_glMultiModeDrawArraysIBM;
  }
  if (strcmp(name, "glMultiModeDrawElementsIBM") == 0) {
    if (__glintercept_fnptr_glMultiModeDrawElementsIBM == NULL) {
      __glintercept_fnptr_glMultiModeDrawElementsIBM = (__ctype_glMultiModeDrawElementsIBM) eglGetProcAddr("glMultiModeDrawElementsIBM");
    }
    if (__glintercept_fnptr_glMultiModeDrawElementsIBM == NULL) return NULL;
    return (void*) __glintercept_glMultiModeDrawElementsIBM;
  }
  if (strcmp(name, "glMultiTexBufferEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexBufferEXT == NULL) {
      __glintercept_fnptr_glMultiTexBufferEXT = (__ctype_glMultiTexBufferEXT) eglGetProcAddr("glMultiTexBufferEXT");
    }
    if (__glintercept_fnptr_glMultiTexBufferEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexBufferEXT;
  }
  if (strcmp(name, "glMultiTexCoord1bOES") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord1bOES == NULL) {
      __glintercept_fnptr_glMultiTexCoord1bOES = (__ctype_glMultiTexCoord1bOES) eglGetProcAddr("glMultiTexCoord1bOES");
    }
    if (__glintercept_fnptr_glMultiTexCoord1bOES == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord1bOES;
  }
  if (strcmp(name, "glMultiTexCoord1bvOES") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord1bvOES == NULL) {
      __glintercept_fnptr_glMultiTexCoord1bvOES = (__ctype_glMultiTexCoord1bvOES) eglGetProcAddr("glMultiTexCoord1bvOES");
    }
    if (__glintercept_fnptr_glMultiTexCoord1bvOES == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord1bvOES;
  }
  if (strcmp(name, "glMultiTexCoord1d") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord1d == NULL) {
      __glintercept_fnptr_glMultiTexCoord1d = (__ctype_glMultiTexCoord1d) eglGetProcAddr("glMultiTexCoord1d");
    }
    if (__glintercept_fnptr_glMultiTexCoord1d == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord1d;
  }
  if (strcmp(name, "glMultiTexCoord1dARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord1dARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord1dARB = (__ctype_glMultiTexCoord1dARB) eglGetProcAddr("glMultiTexCoord1dARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord1dARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord1dARB;
  }
  if (strcmp(name, "glMultiTexCoord1dv") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord1dv == NULL) {
      __glintercept_fnptr_glMultiTexCoord1dv = (__ctype_glMultiTexCoord1dv) eglGetProcAddr("glMultiTexCoord1dv");
    }
    if (__glintercept_fnptr_glMultiTexCoord1dv == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord1dv;
  }
  if (strcmp(name, "glMultiTexCoord1dvARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord1dvARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord1dvARB = (__ctype_glMultiTexCoord1dvARB) eglGetProcAddr("glMultiTexCoord1dvARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord1dvARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord1dvARB;
  }
  if (strcmp(name, "glMultiTexCoord1f") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord1f == NULL) {
      __glintercept_fnptr_glMultiTexCoord1f = (__ctype_glMultiTexCoord1f) eglGetProcAddr("glMultiTexCoord1f");
    }
    if (__glintercept_fnptr_glMultiTexCoord1f == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord1f;
  }
  if (strcmp(name, "glMultiTexCoord1fARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord1fARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord1fARB = (__ctype_glMultiTexCoord1fARB) eglGetProcAddr("glMultiTexCoord1fARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord1fARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord1fARB;
  }
  if (strcmp(name, "glMultiTexCoord1fv") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord1fv == NULL) {
      __glintercept_fnptr_glMultiTexCoord1fv = (__ctype_glMultiTexCoord1fv) eglGetProcAddr("glMultiTexCoord1fv");
    }
    if (__glintercept_fnptr_glMultiTexCoord1fv == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord1fv;
  }
  if (strcmp(name, "glMultiTexCoord1fvARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord1fvARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord1fvARB = (__ctype_glMultiTexCoord1fvARB) eglGetProcAddr("glMultiTexCoord1fvARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord1fvARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord1fvARB;
  }
  if (strcmp(name, "glMultiTexCoord1hNV") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord1hNV == NULL) {
      __glintercept_fnptr_glMultiTexCoord1hNV = (__ctype_glMultiTexCoord1hNV) eglGetProcAddr("glMultiTexCoord1hNV");
    }
    if (__glintercept_fnptr_glMultiTexCoord1hNV == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord1hNV;
  }
  if (strcmp(name, "glMultiTexCoord1hvNV") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord1hvNV == NULL) {
      __glintercept_fnptr_glMultiTexCoord1hvNV = (__ctype_glMultiTexCoord1hvNV) eglGetProcAddr("glMultiTexCoord1hvNV");
    }
    if (__glintercept_fnptr_glMultiTexCoord1hvNV == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord1hvNV;
  }
  if (strcmp(name, "glMultiTexCoord1i") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord1i == NULL) {
      __glintercept_fnptr_glMultiTexCoord1i = (__ctype_glMultiTexCoord1i) eglGetProcAddr("glMultiTexCoord1i");
    }
    if (__glintercept_fnptr_glMultiTexCoord1i == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord1i;
  }
  if (strcmp(name, "glMultiTexCoord1iARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord1iARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord1iARB = (__ctype_glMultiTexCoord1iARB) eglGetProcAddr("glMultiTexCoord1iARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord1iARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord1iARB;
  }
  if (strcmp(name, "glMultiTexCoord1iv") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord1iv == NULL) {
      __glintercept_fnptr_glMultiTexCoord1iv = (__ctype_glMultiTexCoord1iv) eglGetProcAddr("glMultiTexCoord1iv");
    }
    if (__glintercept_fnptr_glMultiTexCoord1iv == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord1iv;
  }
  if (strcmp(name, "glMultiTexCoord1ivARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord1ivARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord1ivARB = (__ctype_glMultiTexCoord1ivARB) eglGetProcAddr("glMultiTexCoord1ivARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord1ivARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord1ivARB;
  }
  if (strcmp(name, "glMultiTexCoord1s") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord1s == NULL) {
      __glintercept_fnptr_glMultiTexCoord1s = (__ctype_glMultiTexCoord1s) eglGetProcAddr("glMultiTexCoord1s");
    }
    if (__glintercept_fnptr_glMultiTexCoord1s == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord1s;
  }
  if (strcmp(name, "glMultiTexCoord1sARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord1sARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord1sARB = (__ctype_glMultiTexCoord1sARB) eglGetProcAddr("glMultiTexCoord1sARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord1sARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord1sARB;
  }
  if (strcmp(name, "glMultiTexCoord1sv") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord1sv == NULL) {
      __glintercept_fnptr_glMultiTexCoord1sv = (__ctype_glMultiTexCoord1sv) eglGetProcAddr("glMultiTexCoord1sv");
    }
    if (__glintercept_fnptr_glMultiTexCoord1sv == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord1sv;
  }
  if (strcmp(name, "glMultiTexCoord1svARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord1svARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord1svARB = (__ctype_glMultiTexCoord1svARB) eglGetProcAddr("glMultiTexCoord1svARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord1svARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord1svARB;
  }
  if (strcmp(name, "glMultiTexCoord1xOES") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord1xOES == NULL) {
      __glintercept_fnptr_glMultiTexCoord1xOES = (__ctype_glMultiTexCoord1xOES) eglGetProcAddr("glMultiTexCoord1xOES");
    }
    if (__glintercept_fnptr_glMultiTexCoord1xOES == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord1xOES;
  }
  if (strcmp(name, "glMultiTexCoord1xvOES") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord1xvOES == NULL) {
      __glintercept_fnptr_glMultiTexCoord1xvOES = (__ctype_glMultiTexCoord1xvOES) eglGetProcAddr("glMultiTexCoord1xvOES");
    }
    if (__glintercept_fnptr_glMultiTexCoord1xvOES == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord1xvOES;
  }
  if (strcmp(name, "glMultiTexCoord2bOES") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord2bOES == NULL) {
      __glintercept_fnptr_glMultiTexCoord2bOES = (__ctype_glMultiTexCoord2bOES) eglGetProcAddr("glMultiTexCoord2bOES");
    }
    if (__glintercept_fnptr_glMultiTexCoord2bOES == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord2bOES;
  }
  if (strcmp(name, "glMultiTexCoord2bvOES") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord2bvOES == NULL) {
      __glintercept_fnptr_glMultiTexCoord2bvOES = (__ctype_glMultiTexCoord2bvOES) eglGetProcAddr("glMultiTexCoord2bvOES");
    }
    if (__glintercept_fnptr_glMultiTexCoord2bvOES == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord2bvOES;
  }
  if (strcmp(name, "glMultiTexCoord2d") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord2d == NULL) {
      __glintercept_fnptr_glMultiTexCoord2d = (__ctype_glMultiTexCoord2d) eglGetProcAddr("glMultiTexCoord2d");
    }
    if (__glintercept_fnptr_glMultiTexCoord2d == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord2d;
  }
  if (strcmp(name, "glMultiTexCoord2dARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord2dARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord2dARB = (__ctype_glMultiTexCoord2dARB) eglGetProcAddr("glMultiTexCoord2dARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord2dARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord2dARB;
  }
  if (strcmp(name, "glMultiTexCoord2dv") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord2dv == NULL) {
      __glintercept_fnptr_glMultiTexCoord2dv = (__ctype_glMultiTexCoord2dv) eglGetProcAddr("glMultiTexCoord2dv");
    }
    if (__glintercept_fnptr_glMultiTexCoord2dv == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord2dv;
  }
  if (strcmp(name, "glMultiTexCoord2dvARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord2dvARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord2dvARB = (__ctype_glMultiTexCoord2dvARB) eglGetProcAddr("glMultiTexCoord2dvARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord2dvARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord2dvARB;
  }
  if (strcmp(name, "glMultiTexCoord2f") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord2f == NULL) {
      __glintercept_fnptr_glMultiTexCoord2f = (__ctype_glMultiTexCoord2f) eglGetProcAddr("glMultiTexCoord2f");
    }
    if (__glintercept_fnptr_glMultiTexCoord2f == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord2f;
  }
  if (strcmp(name, "glMultiTexCoord2fARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord2fARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord2fARB = (__ctype_glMultiTexCoord2fARB) eglGetProcAddr("glMultiTexCoord2fARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord2fARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord2fARB;
  }
  if (strcmp(name, "glMultiTexCoord2fv") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord2fv == NULL) {
      __glintercept_fnptr_glMultiTexCoord2fv = (__ctype_glMultiTexCoord2fv) eglGetProcAddr("glMultiTexCoord2fv");
    }
    if (__glintercept_fnptr_glMultiTexCoord2fv == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord2fv;
  }
  if (strcmp(name, "glMultiTexCoord2fvARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord2fvARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord2fvARB = (__ctype_glMultiTexCoord2fvARB) eglGetProcAddr("glMultiTexCoord2fvARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord2fvARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord2fvARB;
  }
  if (strcmp(name, "glMultiTexCoord2hNV") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord2hNV == NULL) {
      __glintercept_fnptr_glMultiTexCoord2hNV = (__ctype_glMultiTexCoord2hNV) eglGetProcAddr("glMultiTexCoord2hNV");
    }
    if (__glintercept_fnptr_glMultiTexCoord2hNV == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord2hNV;
  }
  if (strcmp(name, "glMultiTexCoord2hvNV") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord2hvNV == NULL) {
      __glintercept_fnptr_glMultiTexCoord2hvNV = (__ctype_glMultiTexCoord2hvNV) eglGetProcAddr("glMultiTexCoord2hvNV");
    }
    if (__glintercept_fnptr_glMultiTexCoord2hvNV == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord2hvNV;
  }
  if (strcmp(name, "glMultiTexCoord2i") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord2i == NULL) {
      __glintercept_fnptr_glMultiTexCoord2i = (__ctype_glMultiTexCoord2i) eglGetProcAddr("glMultiTexCoord2i");
    }
    if (__glintercept_fnptr_glMultiTexCoord2i == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord2i;
  }
  if (strcmp(name, "glMultiTexCoord2iARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord2iARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord2iARB = (__ctype_glMultiTexCoord2iARB) eglGetProcAddr("glMultiTexCoord2iARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord2iARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord2iARB;
  }
  if (strcmp(name, "glMultiTexCoord2iv") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord2iv == NULL) {
      __glintercept_fnptr_glMultiTexCoord2iv = (__ctype_glMultiTexCoord2iv) eglGetProcAddr("glMultiTexCoord2iv");
    }
    if (__glintercept_fnptr_glMultiTexCoord2iv == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord2iv;
  }
  if (strcmp(name, "glMultiTexCoord2ivARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord2ivARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord2ivARB = (__ctype_glMultiTexCoord2ivARB) eglGetProcAddr("glMultiTexCoord2ivARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord2ivARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord2ivARB;
  }
  if (strcmp(name, "glMultiTexCoord2s") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord2s == NULL) {
      __glintercept_fnptr_glMultiTexCoord2s = (__ctype_glMultiTexCoord2s) eglGetProcAddr("glMultiTexCoord2s");
    }
    if (__glintercept_fnptr_glMultiTexCoord2s == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord2s;
  }
  if (strcmp(name, "glMultiTexCoord2sARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord2sARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord2sARB = (__ctype_glMultiTexCoord2sARB) eglGetProcAddr("glMultiTexCoord2sARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord2sARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord2sARB;
  }
  if (strcmp(name, "glMultiTexCoord2sv") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord2sv == NULL) {
      __glintercept_fnptr_glMultiTexCoord2sv = (__ctype_glMultiTexCoord2sv) eglGetProcAddr("glMultiTexCoord2sv");
    }
    if (__glintercept_fnptr_glMultiTexCoord2sv == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord2sv;
  }
  if (strcmp(name, "glMultiTexCoord2svARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord2svARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord2svARB = (__ctype_glMultiTexCoord2svARB) eglGetProcAddr("glMultiTexCoord2svARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord2svARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord2svARB;
  }
  if (strcmp(name, "glMultiTexCoord2xOES") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord2xOES == NULL) {
      __glintercept_fnptr_glMultiTexCoord2xOES = (__ctype_glMultiTexCoord2xOES) eglGetProcAddr("glMultiTexCoord2xOES");
    }
    if (__glintercept_fnptr_glMultiTexCoord2xOES == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord2xOES;
  }
  if (strcmp(name, "glMultiTexCoord2xvOES") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord2xvOES == NULL) {
      __glintercept_fnptr_glMultiTexCoord2xvOES = (__ctype_glMultiTexCoord2xvOES) eglGetProcAddr("glMultiTexCoord2xvOES");
    }
    if (__glintercept_fnptr_glMultiTexCoord2xvOES == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord2xvOES;
  }
  if (strcmp(name, "glMultiTexCoord3bOES") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord3bOES == NULL) {
      __glintercept_fnptr_glMultiTexCoord3bOES = (__ctype_glMultiTexCoord3bOES) eglGetProcAddr("glMultiTexCoord3bOES");
    }
    if (__glintercept_fnptr_glMultiTexCoord3bOES == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord3bOES;
  }
  if (strcmp(name, "glMultiTexCoord3bvOES") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord3bvOES == NULL) {
      __glintercept_fnptr_glMultiTexCoord3bvOES = (__ctype_glMultiTexCoord3bvOES) eglGetProcAddr("glMultiTexCoord3bvOES");
    }
    if (__glintercept_fnptr_glMultiTexCoord3bvOES == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord3bvOES;
  }
  if (strcmp(name, "glMultiTexCoord3d") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord3d == NULL) {
      __glintercept_fnptr_glMultiTexCoord3d = (__ctype_glMultiTexCoord3d) eglGetProcAddr("glMultiTexCoord3d");
    }
    if (__glintercept_fnptr_glMultiTexCoord3d == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord3d;
  }
  if (strcmp(name, "glMultiTexCoord3dARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord3dARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord3dARB = (__ctype_glMultiTexCoord3dARB) eglGetProcAddr("glMultiTexCoord3dARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord3dARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord3dARB;
  }
  if (strcmp(name, "glMultiTexCoord3dv") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord3dv == NULL) {
      __glintercept_fnptr_glMultiTexCoord3dv = (__ctype_glMultiTexCoord3dv) eglGetProcAddr("glMultiTexCoord3dv");
    }
    if (__glintercept_fnptr_glMultiTexCoord3dv == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord3dv;
  }
  if (strcmp(name, "glMultiTexCoord3dvARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord3dvARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord3dvARB = (__ctype_glMultiTexCoord3dvARB) eglGetProcAddr("glMultiTexCoord3dvARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord3dvARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord3dvARB;
  }
  if (strcmp(name, "glMultiTexCoord3f") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord3f == NULL) {
      __glintercept_fnptr_glMultiTexCoord3f = (__ctype_glMultiTexCoord3f) eglGetProcAddr("glMultiTexCoord3f");
    }
    if (__glintercept_fnptr_glMultiTexCoord3f == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord3f;
  }
  if (strcmp(name, "glMultiTexCoord3fARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord3fARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord3fARB = (__ctype_glMultiTexCoord3fARB) eglGetProcAddr("glMultiTexCoord3fARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord3fARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord3fARB;
  }
  if (strcmp(name, "glMultiTexCoord3fv") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord3fv == NULL) {
      __glintercept_fnptr_glMultiTexCoord3fv = (__ctype_glMultiTexCoord3fv) eglGetProcAddr("glMultiTexCoord3fv");
    }
    if (__glintercept_fnptr_glMultiTexCoord3fv == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord3fv;
  }
  if (strcmp(name, "glMultiTexCoord3fvARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord3fvARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord3fvARB = (__ctype_glMultiTexCoord3fvARB) eglGetProcAddr("glMultiTexCoord3fvARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord3fvARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord3fvARB;
  }
  if (strcmp(name, "glMultiTexCoord3hNV") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord3hNV == NULL) {
      __glintercept_fnptr_glMultiTexCoord3hNV = (__ctype_glMultiTexCoord3hNV) eglGetProcAddr("glMultiTexCoord3hNV");
    }
    if (__glintercept_fnptr_glMultiTexCoord3hNV == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord3hNV;
  }
  if (strcmp(name, "glMultiTexCoord3hvNV") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord3hvNV == NULL) {
      __glintercept_fnptr_glMultiTexCoord3hvNV = (__ctype_glMultiTexCoord3hvNV) eglGetProcAddr("glMultiTexCoord3hvNV");
    }
    if (__glintercept_fnptr_glMultiTexCoord3hvNV == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord3hvNV;
  }
  if (strcmp(name, "glMultiTexCoord3i") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord3i == NULL) {
      __glintercept_fnptr_glMultiTexCoord3i = (__ctype_glMultiTexCoord3i) eglGetProcAddr("glMultiTexCoord3i");
    }
    if (__glintercept_fnptr_glMultiTexCoord3i == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord3i;
  }
  if (strcmp(name, "glMultiTexCoord3iARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord3iARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord3iARB = (__ctype_glMultiTexCoord3iARB) eglGetProcAddr("glMultiTexCoord3iARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord3iARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord3iARB;
  }
  if (strcmp(name, "glMultiTexCoord3iv") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord3iv == NULL) {
      __glintercept_fnptr_glMultiTexCoord3iv = (__ctype_glMultiTexCoord3iv) eglGetProcAddr("glMultiTexCoord3iv");
    }
    if (__glintercept_fnptr_glMultiTexCoord3iv == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord3iv;
  }
  if (strcmp(name, "glMultiTexCoord3ivARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord3ivARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord3ivARB = (__ctype_glMultiTexCoord3ivARB) eglGetProcAddr("glMultiTexCoord3ivARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord3ivARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord3ivARB;
  }
  if (strcmp(name, "glMultiTexCoord3s") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord3s == NULL) {
      __glintercept_fnptr_glMultiTexCoord3s = (__ctype_glMultiTexCoord3s) eglGetProcAddr("glMultiTexCoord3s");
    }
    if (__glintercept_fnptr_glMultiTexCoord3s == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord3s;
  }
  if (strcmp(name, "glMultiTexCoord3sARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord3sARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord3sARB = (__ctype_glMultiTexCoord3sARB) eglGetProcAddr("glMultiTexCoord3sARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord3sARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord3sARB;
  }
  if (strcmp(name, "glMultiTexCoord3sv") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord3sv == NULL) {
      __glintercept_fnptr_glMultiTexCoord3sv = (__ctype_glMultiTexCoord3sv) eglGetProcAddr("glMultiTexCoord3sv");
    }
    if (__glintercept_fnptr_glMultiTexCoord3sv == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord3sv;
  }
  if (strcmp(name, "glMultiTexCoord3svARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord3svARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord3svARB = (__ctype_glMultiTexCoord3svARB) eglGetProcAddr("glMultiTexCoord3svARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord3svARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord3svARB;
  }
  if (strcmp(name, "glMultiTexCoord3xOES") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord3xOES == NULL) {
      __glintercept_fnptr_glMultiTexCoord3xOES = (__ctype_glMultiTexCoord3xOES) eglGetProcAddr("glMultiTexCoord3xOES");
    }
    if (__glintercept_fnptr_glMultiTexCoord3xOES == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord3xOES;
  }
  if (strcmp(name, "glMultiTexCoord3xvOES") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord3xvOES == NULL) {
      __glintercept_fnptr_glMultiTexCoord3xvOES = (__ctype_glMultiTexCoord3xvOES) eglGetProcAddr("glMultiTexCoord3xvOES");
    }
    if (__glintercept_fnptr_glMultiTexCoord3xvOES == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord3xvOES;
  }
  if (strcmp(name, "glMultiTexCoord4bOES") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4bOES == NULL) {
      __glintercept_fnptr_glMultiTexCoord4bOES = (__ctype_glMultiTexCoord4bOES) eglGetProcAddr("glMultiTexCoord4bOES");
    }
    if (__glintercept_fnptr_glMultiTexCoord4bOES == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4bOES;
  }
  if (strcmp(name, "glMultiTexCoord4bvOES") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4bvOES == NULL) {
      __glintercept_fnptr_glMultiTexCoord4bvOES = (__ctype_glMultiTexCoord4bvOES) eglGetProcAddr("glMultiTexCoord4bvOES");
    }
    if (__glintercept_fnptr_glMultiTexCoord4bvOES == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4bvOES;
  }
  if (strcmp(name, "glMultiTexCoord4d") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4d == NULL) {
      __glintercept_fnptr_glMultiTexCoord4d = (__ctype_glMultiTexCoord4d) eglGetProcAddr("glMultiTexCoord4d");
    }
    if (__glintercept_fnptr_glMultiTexCoord4d == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4d;
  }
  if (strcmp(name, "glMultiTexCoord4dARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4dARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord4dARB = (__ctype_glMultiTexCoord4dARB) eglGetProcAddr("glMultiTexCoord4dARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord4dARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4dARB;
  }
  if (strcmp(name, "glMultiTexCoord4dv") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4dv == NULL) {
      __glintercept_fnptr_glMultiTexCoord4dv = (__ctype_glMultiTexCoord4dv) eglGetProcAddr("glMultiTexCoord4dv");
    }
    if (__glintercept_fnptr_glMultiTexCoord4dv == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4dv;
  }
  if (strcmp(name, "glMultiTexCoord4dvARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4dvARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord4dvARB = (__ctype_glMultiTexCoord4dvARB) eglGetProcAddr("glMultiTexCoord4dvARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord4dvARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4dvARB;
  }
  if (strcmp(name, "glMultiTexCoord4f") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4f == NULL) {
      __glintercept_fnptr_glMultiTexCoord4f = (__ctype_glMultiTexCoord4f) eglGetProcAddr("glMultiTexCoord4f");
    }
    if (__glintercept_fnptr_glMultiTexCoord4f == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4f;
  }
  if (strcmp(name, "glMultiTexCoord4fARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4fARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord4fARB = (__ctype_glMultiTexCoord4fARB) eglGetProcAddr("glMultiTexCoord4fARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord4fARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4fARB;
  }
  if (strcmp(name, "glMultiTexCoord4fv") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4fv == NULL) {
      __glintercept_fnptr_glMultiTexCoord4fv = (__ctype_glMultiTexCoord4fv) eglGetProcAddr("glMultiTexCoord4fv");
    }
    if (__glintercept_fnptr_glMultiTexCoord4fv == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4fv;
  }
  if (strcmp(name, "glMultiTexCoord4fvARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4fvARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord4fvARB = (__ctype_glMultiTexCoord4fvARB) eglGetProcAddr("glMultiTexCoord4fvARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord4fvARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4fvARB;
  }
  if (strcmp(name, "glMultiTexCoord4hNV") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4hNV == NULL) {
      __glintercept_fnptr_glMultiTexCoord4hNV = (__ctype_glMultiTexCoord4hNV) eglGetProcAddr("glMultiTexCoord4hNV");
    }
    if (__glintercept_fnptr_glMultiTexCoord4hNV == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4hNV;
  }
  if (strcmp(name, "glMultiTexCoord4hvNV") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4hvNV == NULL) {
      __glintercept_fnptr_glMultiTexCoord4hvNV = (__ctype_glMultiTexCoord4hvNV) eglGetProcAddr("glMultiTexCoord4hvNV");
    }
    if (__glintercept_fnptr_glMultiTexCoord4hvNV == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4hvNV;
  }
  if (strcmp(name, "glMultiTexCoord4i") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4i == NULL) {
      __glintercept_fnptr_glMultiTexCoord4i = (__ctype_glMultiTexCoord4i) eglGetProcAddr("glMultiTexCoord4i");
    }
    if (__glintercept_fnptr_glMultiTexCoord4i == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4i;
  }
  if (strcmp(name, "glMultiTexCoord4iARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4iARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord4iARB = (__ctype_glMultiTexCoord4iARB) eglGetProcAddr("glMultiTexCoord4iARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord4iARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4iARB;
  }
  if (strcmp(name, "glMultiTexCoord4iv") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4iv == NULL) {
      __glintercept_fnptr_glMultiTexCoord4iv = (__ctype_glMultiTexCoord4iv) eglGetProcAddr("glMultiTexCoord4iv");
    }
    if (__glintercept_fnptr_glMultiTexCoord4iv == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4iv;
  }
  if (strcmp(name, "glMultiTexCoord4ivARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4ivARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord4ivARB = (__ctype_glMultiTexCoord4ivARB) eglGetProcAddr("glMultiTexCoord4ivARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord4ivARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4ivARB;
  }
  if (strcmp(name, "glMultiTexCoord4s") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4s == NULL) {
      __glintercept_fnptr_glMultiTexCoord4s = (__ctype_glMultiTexCoord4s) eglGetProcAddr("glMultiTexCoord4s");
    }
    if (__glintercept_fnptr_glMultiTexCoord4s == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4s;
  }
  if (strcmp(name, "glMultiTexCoord4sARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4sARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord4sARB = (__ctype_glMultiTexCoord4sARB) eglGetProcAddr("glMultiTexCoord4sARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord4sARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4sARB;
  }
  if (strcmp(name, "glMultiTexCoord4sv") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4sv == NULL) {
      __glintercept_fnptr_glMultiTexCoord4sv = (__ctype_glMultiTexCoord4sv) eglGetProcAddr("glMultiTexCoord4sv");
    }
    if (__glintercept_fnptr_glMultiTexCoord4sv == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4sv;
  }
  if (strcmp(name, "glMultiTexCoord4svARB") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4svARB == NULL) {
      __glintercept_fnptr_glMultiTexCoord4svARB = (__ctype_glMultiTexCoord4svARB) eglGetProcAddr("glMultiTexCoord4svARB");
    }
    if (__glintercept_fnptr_glMultiTexCoord4svARB == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4svARB;
  }
  if (strcmp(name, "glMultiTexCoord4x") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4x == NULL) {
      __glintercept_fnptr_glMultiTexCoord4x = (__ctype_glMultiTexCoord4x) eglGetProcAddr("glMultiTexCoord4x");
    }
    if (__glintercept_fnptr_glMultiTexCoord4x == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4x;
  }
  if (strcmp(name, "glMultiTexCoord4xOES") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4xOES == NULL) {
      __glintercept_fnptr_glMultiTexCoord4xOES = (__ctype_glMultiTexCoord4xOES) eglGetProcAddr("glMultiTexCoord4xOES");
    }
    if (__glintercept_fnptr_glMultiTexCoord4xOES == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4xOES;
  }
  if (strcmp(name, "glMultiTexCoord4xvOES") == 0) {
    if (__glintercept_fnptr_glMultiTexCoord4xvOES == NULL) {
      __glintercept_fnptr_glMultiTexCoord4xvOES = (__ctype_glMultiTexCoord4xvOES) eglGetProcAddr("glMultiTexCoord4xvOES");
    }
    if (__glintercept_fnptr_glMultiTexCoord4xvOES == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoord4xvOES;
  }
  if (strcmp(name, "glMultiTexCoordP1ui") == 0) {
    if (__glintercept_fnptr_glMultiTexCoordP1ui == NULL) {
      __glintercept_fnptr_glMultiTexCoordP1ui = (__ctype_glMultiTexCoordP1ui) eglGetProcAddr("glMultiTexCoordP1ui");
    }
    if (__glintercept_fnptr_glMultiTexCoordP1ui == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoordP1ui;
  }
  if (strcmp(name, "glMultiTexCoordP1uiv") == 0) {
    if (__glintercept_fnptr_glMultiTexCoordP1uiv == NULL) {
      __glintercept_fnptr_glMultiTexCoordP1uiv = (__ctype_glMultiTexCoordP1uiv) eglGetProcAddr("glMultiTexCoordP1uiv");
    }
    if (__glintercept_fnptr_glMultiTexCoordP1uiv == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoordP1uiv;
  }
  if (strcmp(name, "glMultiTexCoordP2ui") == 0) {
    if (__glintercept_fnptr_glMultiTexCoordP2ui == NULL) {
      __glintercept_fnptr_glMultiTexCoordP2ui = (__ctype_glMultiTexCoordP2ui) eglGetProcAddr("glMultiTexCoordP2ui");
    }
    if (__glintercept_fnptr_glMultiTexCoordP2ui == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoordP2ui;
  }
  if (strcmp(name, "glMultiTexCoordP2uiv") == 0) {
    if (__glintercept_fnptr_glMultiTexCoordP2uiv == NULL) {
      __glintercept_fnptr_glMultiTexCoordP2uiv = (__ctype_glMultiTexCoordP2uiv) eglGetProcAddr("glMultiTexCoordP2uiv");
    }
    if (__glintercept_fnptr_glMultiTexCoordP2uiv == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoordP2uiv;
  }
  if (strcmp(name, "glMultiTexCoordP3ui") == 0) {
    if (__glintercept_fnptr_glMultiTexCoordP3ui == NULL) {
      __glintercept_fnptr_glMultiTexCoordP3ui = (__ctype_glMultiTexCoordP3ui) eglGetProcAddr("glMultiTexCoordP3ui");
    }
    if (__glintercept_fnptr_glMultiTexCoordP3ui == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoordP3ui;
  }
  if (strcmp(name, "glMultiTexCoordP3uiv") == 0) {
    if (__glintercept_fnptr_glMultiTexCoordP3uiv == NULL) {
      __glintercept_fnptr_glMultiTexCoordP3uiv = (__ctype_glMultiTexCoordP3uiv) eglGetProcAddr("glMultiTexCoordP3uiv");
    }
    if (__glintercept_fnptr_glMultiTexCoordP3uiv == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoordP3uiv;
  }
  if (strcmp(name, "glMultiTexCoordP4ui") == 0) {
    if (__glintercept_fnptr_glMultiTexCoordP4ui == NULL) {
      __glintercept_fnptr_glMultiTexCoordP4ui = (__ctype_glMultiTexCoordP4ui) eglGetProcAddr("glMultiTexCoordP4ui");
    }
    if (__glintercept_fnptr_glMultiTexCoordP4ui == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoordP4ui;
  }
  if (strcmp(name, "glMultiTexCoordP4uiv") == 0) {
    if (__glintercept_fnptr_glMultiTexCoordP4uiv == NULL) {
      __glintercept_fnptr_glMultiTexCoordP4uiv = (__ctype_glMultiTexCoordP4uiv) eglGetProcAddr("glMultiTexCoordP4uiv");
    }
    if (__glintercept_fnptr_glMultiTexCoordP4uiv == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoordP4uiv;
  }
  if (strcmp(name, "glMultiTexCoordPointerEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexCoordPointerEXT == NULL) {
      __glintercept_fnptr_glMultiTexCoordPointerEXT = (__ctype_glMultiTexCoordPointerEXT) eglGetProcAddr("glMultiTexCoordPointerEXT");
    }
    if (__glintercept_fnptr_glMultiTexCoordPointerEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexCoordPointerEXT;
  }
  if (strcmp(name, "glMultiTexEnvfEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexEnvfEXT == NULL) {
      __glintercept_fnptr_glMultiTexEnvfEXT = (__ctype_glMultiTexEnvfEXT) eglGetProcAddr("glMultiTexEnvfEXT");
    }
    if (__glintercept_fnptr_glMultiTexEnvfEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexEnvfEXT;
  }
  if (strcmp(name, "glMultiTexEnvfvEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexEnvfvEXT == NULL) {
      __glintercept_fnptr_glMultiTexEnvfvEXT = (__ctype_glMultiTexEnvfvEXT) eglGetProcAddr("glMultiTexEnvfvEXT");
    }
    if (__glintercept_fnptr_glMultiTexEnvfvEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexEnvfvEXT;
  }
  if (strcmp(name, "glMultiTexEnviEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexEnviEXT == NULL) {
      __glintercept_fnptr_glMultiTexEnviEXT = (__ctype_glMultiTexEnviEXT) eglGetProcAddr("glMultiTexEnviEXT");
    }
    if (__glintercept_fnptr_glMultiTexEnviEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexEnviEXT;
  }
  if (strcmp(name, "glMultiTexEnvivEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexEnvivEXT == NULL) {
      __glintercept_fnptr_glMultiTexEnvivEXT = (__ctype_glMultiTexEnvivEXT) eglGetProcAddr("glMultiTexEnvivEXT");
    }
    if (__glintercept_fnptr_glMultiTexEnvivEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexEnvivEXT;
  }
  if (strcmp(name, "glMultiTexGendEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexGendEXT == NULL) {
      __glintercept_fnptr_glMultiTexGendEXT = (__ctype_glMultiTexGendEXT) eglGetProcAddr("glMultiTexGendEXT");
    }
    if (__glintercept_fnptr_glMultiTexGendEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexGendEXT;
  }
  if (strcmp(name, "glMultiTexGendvEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexGendvEXT == NULL) {
      __glintercept_fnptr_glMultiTexGendvEXT = (__ctype_glMultiTexGendvEXT) eglGetProcAddr("glMultiTexGendvEXT");
    }
    if (__glintercept_fnptr_glMultiTexGendvEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexGendvEXT;
  }
  if (strcmp(name, "glMultiTexGenfEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexGenfEXT == NULL) {
      __glintercept_fnptr_glMultiTexGenfEXT = (__ctype_glMultiTexGenfEXT) eglGetProcAddr("glMultiTexGenfEXT");
    }
    if (__glintercept_fnptr_glMultiTexGenfEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexGenfEXT;
  }
  if (strcmp(name, "glMultiTexGenfvEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexGenfvEXT == NULL) {
      __glintercept_fnptr_glMultiTexGenfvEXT = (__ctype_glMultiTexGenfvEXT) eglGetProcAddr("glMultiTexGenfvEXT");
    }
    if (__glintercept_fnptr_glMultiTexGenfvEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexGenfvEXT;
  }
  if (strcmp(name, "glMultiTexGeniEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexGeniEXT == NULL) {
      __glintercept_fnptr_glMultiTexGeniEXT = (__ctype_glMultiTexGeniEXT) eglGetProcAddr("glMultiTexGeniEXT");
    }
    if (__glintercept_fnptr_glMultiTexGeniEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexGeniEXT;
  }
  if (strcmp(name, "glMultiTexGenivEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexGenivEXT == NULL) {
      __glintercept_fnptr_glMultiTexGenivEXT = (__ctype_glMultiTexGenivEXT) eglGetProcAddr("glMultiTexGenivEXT");
    }
    if (__glintercept_fnptr_glMultiTexGenivEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexGenivEXT;
  }
  if (strcmp(name, "glMultiTexImage1DEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexImage1DEXT == NULL) {
      __glintercept_fnptr_glMultiTexImage1DEXT = (__ctype_glMultiTexImage1DEXT) eglGetProcAddr("glMultiTexImage1DEXT");
    }
    if (__glintercept_fnptr_glMultiTexImage1DEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexImage1DEXT;
  }
  if (strcmp(name, "glMultiTexImage2DEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexImage2DEXT == NULL) {
      __glintercept_fnptr_glMultiTexImage2DEXT = (__ctype_glMultiTexImage2DEXT) eglGetProcAddr("glMultiTexImage2DEXT");
    }
    if (__glintercept_fnptr_glMultiTexImage2DEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexImage2DEXT;
  }
  if (strcmp(name, "glMultiTexImage3DEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexImage3DEXT == NULL) {
      __glintercept_fnptr_glMultiTexImage3DEXT = (__ctype_glMultiTexImage3DEXT) eglGetProcAddr("glMultiTexImage3DEXT");
    }
    if (__glintercept_fnptr_glMultiTexImage3DEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexImage3DEXT;
  }
  if (strcmp(name, "glMultiTexParameterIivEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexParameterIivEXT == NULL) {
      __glintercept_fnptr_glMultiTexParameterIivEXT = (__ctype_glMultiTexParameterIivEXT) eglGetProcAddr("glMultiTexParameterIivEXT");
    }
    if (__glintercept_fnptr_glMultiTexParameterIivEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexParameterIivEXT;
  }
  if (strcmp(name, "glMultiTexParameterIuivEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexParameterIuivEXT == NULL) {
      __glintercept_fnptr_glMultiTexParameterIuivEXT = (__ctype_glMultiTexParameterIuivEXT) eglGetProcAddr("glMultiTexParameterIuivEXT");
    }
    if (__glintercept_fnptr_glMultiTexParameterIuivEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexParameterIuivEXT;
  }
  if (strcmp(name, "glMultiTexParameterfEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexParameterfEXT == NULL) {
      __glintercept_fnptr_glMultiTexParameterfEXT = (__ctype_glMultiTexParameterfEXT) eglGetProcAddr("glMultiTexParameterfEXT");
    }
    if (__glintercept_fnptr_glMultiTexParameterfEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexParameterfEXT;
  }
  if (strcmp(name, "glMultiTexParameterfvEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexParameterfvEXT == NULL) {
      __glintercept_fnptr_glMultiTexParameterfvEXT = (__ctype_glMultiTexParameterfvEXT) eglGetProcAddr("glMultiTexParameterfvEXT");
    }
    if (__glintercept_fnptr_glMultiTexParameterfvEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexParameterfvEXT;
  }
  if (strcmp(name, "glMultiTexParameteriEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexParameteriEXT == NULL) {
      __glintercept_fnptr_glMultiTexParameteriEXT = (__ctype_glMultiTexParameteriEXT) eglGetProcAddr("glMultiTexParameteriEXT");
    }
    if (__glintercept_fnptr_glMultiTexParameteriEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexParameteriEXT;
  }
  if (strcmp(name, "glMultiTexParameterivEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexParameterivEXT == NULL) {
      __glintercept_fnptr_glMultiTexParameterivEXT = (__ctype_glMultiTexParameterivEXT) eglGetProcAddr("glMultiTexParameterivEXT");
    }
    if (__glintercept_fnptr_glMultiTexParameterivEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexParameterivEXT;
  }
  if (strcmp(name, "glMultiTexRenderbufferEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexRenderbufferEXT == NULL) {
      __glintercept_fnptr_glMultiTexRenderbufferEXT = (__ctype_glMultiTexRenderbufferEXT) eglGetProcAddr("glMultiTexRenderbufferEXT");
    }
    if (__glintercept_fnptr_glMultiTexRenderbufferEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexRenderbufferEXT;
  }
  if (strcmp(name, "glMultiTexSubImage1DEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexSubImage1DEXT == NULL) {
      __glintercept_fnptr_glMultiTexSubImage1DEXT = (__ctype_glMultiTexSubImage1DEXT) eglGetProcAddr("glMultiTexSubImage1DEXT");
    }
    if (__glintercept_fnptr_glMultiTexSubImage1DEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexSubImage1DEXT;
  }
  if (strcmp(name, "glMultiTexSubImage2DEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexSubImage2DEXT == NULL) {
      __glintercept_fnptr_glMultiTexSubImage2DEXT = (__ctype_glMultiTexSubImage2DEXT) eglGetProcAddr("glMultiTexSubImage2DEXT");
    }
    if (__glintercept_fnptr_glMultiTexSubImage2DEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexSubImage2DEXT;
  }
  if (strcmp(name, "glMultiTexSubImage3DEXT") == 0) {
    if (__glintercept_fnptr_glMultiTexSubImage3DEXT == NULL) {
      __glintercept_fnptr_glMultiTexSubImage3DEXT = (__ctype_glMultiTexSubImage3DEXT) eglGetProcAddr("glMultiTexSubImage3DEXT");
    }
    if (__glintercept_fnptr_glMultiTexSubImage3DEXT == NULL) return NULL;
    return (void*) __glintercept_glMultiTexSubImage3DEXT;
  }
  if (strcmp(name, "glMulticastBarrierNV") == 0) {
    if (__glintercept_fnptr_glMulticastBarrierNV == NULL) {
      __glintercept_fnptr_glMulticastBarrierNV = (__ctype_glMulticastBarrierNV) eglGetProcAddr("glMulticastBarrierNV");
    }
    if (__glintercept_fnptr_glMulticastBarrierNV == NULL) return NULL;
    return (void*) __glintercept_glMulticastBarrierNV;
  }
  if (strcmp(name, "glMulticastBlitFramebufferNV") == 0) {
    if (__glintercept_fnptr_glMulticastBlitFramebufferNV == NULL) {
      __glintercept_fnptr_glMulticastBlitFramebufferNV = (__ctype_glMulticastBlitFramebufferNV) eglGetProcAddr("glMulticastBlitFramebufferNV");
    }
    if (__glintercept_fnptr_glMulticastBlitFramebufferNV == NULL) return NULL;
    return (void*) __glintercept_glMulticastBlitFramebufferNV;
  }
  if (strcmp(name, "glMulticastBufferSubDataNV") == 0) {
    if (__glintercept_fnptr_glMulticastBufferSubDataNV == NULL) {
      __glintercept_fnptr_glMulticastBufferSubDataNV = (__ctype_glMulticastBufferSubDataNV) eglGetProcAddr("glMulticastBufferSubDataNV");
    }
    if (__glintercept_fnptr_glMulticastBufferSubDataNV == NULL) return NULL;
    return (void*) __glintercept_glMulticastBufferSubDataNV;
  }
  if (strcmp(name, "glMulticastCopyBufferSubDataNV") == 0) {
    if (__glintercept_fnptr_glMulticastCopyBufferSubDataNV == NULL) {
      __glintercept_fnptr_glMulticastCopyBufferSubDataNV = (__ctype_glMulticastCopyBufferSubDataNV) eglGetProcAddr("glMulticastCopyBufferSubDataNV");
    }
    if (__glintercept_fnptr_glMulticastCopyBufferSubDataNV == NULL) return NULL;
    return (void*) __glintercept_glMulticastCopyBufferSubDataNV;
  }
  if (strcmp(name, "glMulticastCopyImageSubDataNV") == 0) {
    if (__glintercept_fnptr_glMulticastCopyImageSubDataNV == NULL) {
      __glintercept_fnptr_glMulticastCopyImageSubDataNV = (__ctype_glMulticastCopyImageSubDataNV) eglGetProcAddr("glMulticastCopyImageSubDataNV");
    }
    if (__glintercept_fnptr_glMulticastCopyImageSubDataNV == NULL) return NULL;
    return (void*) __glintercept_glMulticastCopyImageSubDataNV;
  }
  if (strcmp(name, "glMulticastFramebufferSampleLocationsfvNV") == 0) {
    if (__glintercept_fnptr_glMulticastFramebufferSampleLocationsfvNV == NULL) {
      __glintercept_fnptr_glMulticastFramebufferSampleLocationsfvNV = (__ctype_glMulticastFramebufferSampleLocationsfvNV) eglGetProcAddr("glMulticastFramebufferSampleLocationsfvNV");
    }
    if (__glintercept_fnptr_glMulticastFramebufferSampleLocationsfvNV == NULL) return NULL;
    return (void*) __glintercept_glMulticastFramebufferSampleLocationsfvNV;
  }
  if (strcmp(name, "glMulticastGetQueryObjecti64vNV") == 0) {
    if (__glintercept_fnptr_glMulticastGetQueryObjecti64vNV == NULL) {
      __glintercept_fnptr_glMulticastGetQueryObjecti64vNV = (__ctype_glMulticastGetQueryObjecti64vNV) eglGetProcAddr("glMulticastGetQueryObjecti64vNV");
    }
    if (__glintercept_fnptr_glMulticastGetQueryObjecti64vNV == NULL) return NULL;
    return (void*) __glintercept_glMulticastGetQueryObjecti64vNV;
  }
  if (strcmp(name, "glMulticastGetQueryObjectivNV") == 0) {
    if (__glintercept_fnptr_glMulticastGetQueryObjectivNV == NULL) {
      __glintercept_fnptr_glMulticastGetQueryObjectivNV = (__ctype_glMulticastGetQueryObjectivNV) eglGetProcAddr("glMulticastGetQueryObjectivNV");
    }
    if (__glintercept_fnptr_glMulticastGetQueryObjectivNV == NULL) return NULL;
    return (void*) __glintercept_glMulticastGetQueryObjectivNV;
  }
  if (strcmp(name, "glMulticastGetQueryObjectui64vNV") == 0) {
    if (__glintercept_fnptr_glMulticastGetQueryObjectui64vNV == NULL) {
      __glintercept_fnptr_glMulticastGetQueryObjectui64vNV = (__ctype_glMulticastGetQueryObjectui64vNV) eglGetProcAddr("glMulticastGetQueryObjectui64vNV");
    }
    if (__glintercept_fnptr_glMulticastGetQueryObjectui64vNV == NULL) return NULL;
    return (void*) __glintercept_glMulticastGetQueryObjectui64vNV;
  }
  if (strcmp(name, "glMulticastGetQueryObjectuivNV") == 0) {
    if (__glintercept_fnptr_glMulticastGetQueryObjectuivNV == NULL) {
      __glintercept_fnptr_glMulticastGetQueryObjectuivNV = (__ctype_glMulticastGetQueryObjectuivNV) eglGetProcAddr("glMulticastGetQueryObjectuivNV");
    }
    if (__glintercept_fnptr_glMulticastGetQueryObjectuivNV == NULL) return NULL;
    return (void*) __glintercept_glMulticastGetQueryObjectuivNV;
  }
  if (strcmp(name, "glMulticastScissorArrayvNVX") == 0) {
    if (__glintercept_fnptr_glMulticastScissorArrayvNVX == NULL) {
      __glintercept_fnptr_glMulticastScissorArrayvNVX = (__ctype_glMulticastScissorArrayvNVX) eglGetProcAddr("glMulticastScissorArrayvNVX");
    }
    if (__glintercept_fnptr_glMulticastScissorArrayvNVX == NULL) return NULL;
    return (void*) __glintercept_glMulticastScissorArrayvNVX;
  }
  if (strcmp(name, "glMulticastViewportArrayvNVX") == 0) {
    if (__glintercept_fnptr_glMulticastViewportArrayvNVX == NULL) {
      __glintercept_fnptr_glMulticastViewportArrayvNVX = (__ctype_glMulticastViewportArrayvNVX) eglGetProcAddr("glMulticastViewportArrayvNVX");
    }
    if (__glintercept_fnptr_glMulticastViewportArrayvNVX == NULL) return NULL;
    return (void*) __glintercept_glMulticastViewportArrayvNVX;
  }
  if (strcmp(name, "glMulticastViewportPositionWScaleNVX") == 0) {
    if (__glintercept_fnptr_glMulticastViewportPositionWScaleNVX == NULL) {
      __glintercept_fnptr_glMulticastViewportPositionWScaleNVX = (__ctype_glMulticastViewportPositionWScaleNVX) eglGetProcAddr("glMulticastViewportPositionWScaleNVX");
    }
    if (__glintercept_fnptr_glMulticastViewportPositionWScaleNVX == NULL) return NULL;
    return (void*) __glintercept_glMulticastViewportPositionWScaleNVX;
  }
  if (strcmp(name, "glMulticastWaitSyncNV") == 0) {
    if (__glintercept_fnptr_glMulticastWaitSyncNV == NULL) {
      __glintercept_fnptr_glMulticastWaitSyncNV = (__ctype_glMulticastWaitSyncNV) eglGetProcAddr("glMulticastWaitSyncNV");
    }
    if (__glintercept_fnptr_glMulticastWaitSyncNV == NULL) return NULL;
    return (void*) __glintercept_glMulticastWaitSyncNV;
  }
  if (strcmp(name, "glNamedBufferAttachMemoryNV") == 0) {
    if (__glintercept_fnptr_glNamedBufferAttachMemoryNV == NULL) {
      __glintercept_fnptr_glNamedBufferAttachMemoryNV = (__ctype_glNamedBufferAttachMemoryNV) eglGetProcAddr("glNamedBufferAttachMemoryNV");
    }
    if (__glintercept_fnptr_glNamedBufferAttachMemoryNV == NULL) return NULL;
    return (void*) __glintercept_glNamedBufferAttachMemoryNV;
  }
  if (strcmp(name, "glNamedBufferData") == 0) {
    if (__glintercept_fnptr_glNamedBufferData == NULL) {
      __glintercept_fnptr_glNamedBufferData = (__ctype_glNamedBufferData) eglGetProcAddr("glNamedBufferData");
    }
    if (__glintercept_fnptr_glNamedBufferData == NULL) return NULL;
    return (void*) __glintercept_glNamedBufferData;
  }
  if (strcmp(name, "glNamedBufferDataEXT") == 0) {
    if (__glintercept_fnptr_glNamedBufferDataEXT == NULL) {
      __glintercept_fnptr_glNamedBufferDataEXT = (__ctype_glNamedBufferDataEXT) eglGetProcAddr("glNamedBufferDataEXT");
    }
    if (__glintercept_fnptr_glNamedBufferDataEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedBufferDataEXT;
  }
  if (strcmp(name, "glNamedBufferPageCommitmentARB") == 0) {
    if (__glintercept_fnptr_glNamedBufferPageCommitmentARB == NULL) {
      __glintercept_fnptr_glNamedBufferPageCommitmentARB = (__ctype_glNamedBufferPageCommitmentARB) eglGetProcAddr("glNamedBufferPageCommitmentARB");
    }
    if (__glintercept_fnptr_glNamedBufferPageCommitmentARB == NULL) return NULL;
    return (void*) __glintercept_glNamedBufferPageCommitmentARB;
  }
  if (strcmp(name, "glNamedBufferPageCommitmentEXT") == 0) {
    if (__glintercept_fnptr_glNamedBufferPageCommitmentEXT == NULL) {
      __glintercept_fnptr_glNamedBufferPageCommitmentEXT = (__ctype_glNamedBufferPageCommitmentEXT) eglGetProcAddr("glNamedBufferPageCommitmentEXT");
    }
    if (__glintercept_fnptr_glNamedBufferPageCommitmentEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedBufferPageCommitmentEXT;
  }
  if (strcmp(name, "glNamedBufferPageCommitmentMemNV") == 0) {
    if (__glintercept_fnptr_glNamedBufferPageCommitmentMemNV == NULL) {
      __glintercept_fnptr_glNamedBufferPageCommitmentMemNV = (__ctype_glNamedBufferPageCommitmentMemNV) eglGetProcAddr("glNamedBufferPageCommitmentMemNV");
    }
    if (__glintercept_fnptr_glNamedBufferPageCommitmentMemNV == NULL) return NULL;
    return (void*) __glintercept_glNamedBufferPageCommitmentMemNV;
  }
  if (strcmp(name, "glNamedBufferStorage") == 0) {
    if (__glintercept_fnptr_glNamedBufferStorage == NULL) {
      __glintercept_fnptr_glNamedBufferStorage = (__ctype_glNamedBufferStorage) eglGetProcAddr("glNamedBufferStorage");
    }
    if (__glintercept_fnptr_glNamedBufferStorage == NULL) return NULL;
    return (void*) __glintercept_glNamedBufferStorage;
  }
  if (strcmp(name, "glNamedBufferStorageExternalEXT") == 0) {
    if (__glintercept_fnptr_glNamedBufferStorageExternalEXT == NULL) {
      __glintercept_fnptr_glNamedBufferStorageExternalEXT = (__ctype_glNamedBufferStorageExternalEXT) eglGetProcAddr("glNamedBufferStorageExternalEXT");
    }
    if (__glintercept_fnptr_glNamedBufferStorageExternalEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedBufferStorageExternalEXT;
  }
  if (strcmp(name, "glNamedBufferStorageEXT") == 0) {
    if (__glintercept_fnptr_glNamedBufferStorageEXT == NULL) {
      __glintercept_fnptr_glNamedBufferStorageEXT = (__ctype_glNamedBufferStorageEXT) eglGetProcAddr("glNamedBufferStorageEXT");
    }
    if (__glintercept_fnptr_glNamedBufferStorageEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedBufferStorageEXT;
  }
  if (strcmp(name, "glNamedBufferStorageMemEXT") == 0) {
    if (__glintercept_fnptr_glNamedBufferStorageMemEXT == NULL) {
      __glintercept_fnptr_glNamedBufferStorageMemEXT = (__ctype_glNamedBufferStorageMemEXT) eglGetProcAddr("glNamedBufferStorageMemEXT");
    }
    if (__glintercept_fnptr_glNamedBufferStorageMemEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedBufferStorageMemEXT;
  }
  if (strcmp(name, "glNamedBufferSubData") == 0) {
    if (__glintercept_fnptr_glNamedBufferSubData == NULL) {
      __glintercept_fnptr_glNamedBufferSubData = (__ctype_glNamedBufferSubData) eglGetProcAddr("glNamedBufferSubData");
    }
    if (__glintercept_fnptr_glNamedBufferSubData == NULL) return NULL;
    return (void*) __glintercept_glNamedBufferSubData;
  }
  if (strcmp(name, "glNamedBufferSubDataEXT") == 0) {
    if (__glintercept_fnptr_glNamedBufferSubDataEXT == NULL) {
      __glintercept_fnptr_glNamedBufferSubDataEXT = (__ctype_glNamedBufferSubDataEXT) eglGetProcAddr("glNamedBufferSubDataEXT");
    }
    if (__glintercept_fnptr_glNamedBufferSubDataEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedBufferSubDataEXT;
  }
  if (strcmp(name, "glNamedCopyBufferSubDataEXT") == 0) {
    if (__glintercept_fnptr_glNamedCopyBufferSubDataEXT == NULL) {
      __glintercept_fnptr_glNamedCopyBufferSubDataEXT = (__ctype_glNamedCopyBufferSubDataEXT) eglGetProcAddr("glNamedCopyBufferSubDataEXT");
    }
    if (__glintercept_fnptr_glNamedCopyBufferSubDataEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedCopyBufferSubDataEXT;
  }
  if (strcmp(name, "glNamedFramebufferDrawBuffer") == 0) {
    if (__glintercept_fnptr_glNamedFramebufferDrawBuffer == NULL) {
      __glintercept_fnptr_glNamedFramebufferDrawBuffer = (__ctype_glNamedFramebufferDrawBuffer) eglGetProcAddr("glNamedFramebufferDrawBuffer");
    }
    if (__glintercept_fnptr_glNamedFramebufferDrawBuffer == NULL) return NULL;
    return (void*) __glintercept_glNamedFramebufferDrawBuffer;
  }
  if (strcmp(name, "glNamedFramebufferDrawBuffers") == 0) {
    if (__glintercept_fnptr_glNamedFramebufferDrawBuffers == NULL) {
      __glintercept_fnptr_glNamedFramebufferDrawBuffers = (__ctype_glNamedFramebufferDrawBuffers) eglGetProcAddr("glNamedFramebufferDrawBuffers");
    }
    if (__glintercept_fnptr_glNamedFramebufferDrawBuffers == NULL) return NULL;
    return (void*) __glintercept_glNamedFramebufferDrawBuffers;
  }
  if (strcmp(name, "glNamedFramebufferParameteri") == 0) {
    if (__glintercept_fnptr_glNamedFramebufferParameteri == NULL) {
      __glintercept_fnptr_glNamedFramebufferParameteri = (__ctype_glNamedFramebufferParameteri) eglGetProcAddr("glNamedFramebufferParameteri");
    }
    if (__glintercept_fnptr_glNamedFramebufferParameteri == NULL) return NULL;
    return (void*) __glintercept_glNamedFramebufferParameteri;
  }
  if (strcmp(name, "glNamedFramebufferParameteriEXT") == 0) {
    if (__glintercept_fnptr_glNamedFramebufferParameteriEXT == NULL) {
      __glintercept_fnptr_glNamedFramebufferParameteriEXT = (__ctype_glNamedFramebufferParameteriEXT) eglGetProcAddr("glNamedFramebufferParameteriEXT");
    }
    if (__glintercept_fnptr_glNamedFramebufferParameteriEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedFramebufferParameteriEXT;
  }
  if (strcmp(name, "glNamedFramebufferReadBuffer") == 0) {
    if (__glintercept_fnptr_glNamedFramebufferReadBuffer == NULL) {
      __glintercept_fnptr_glNamedFramebufferReadBuffer = (__ctype_glNamedFramebufferReadBuffer) eglGetProcAddr("glNamedFramebufferReadBuffer");
    }
    if (__glintercept_fnptr_glNamedFramebufferReadBuffer == NULL) return NULL;
    return (void*) __glintercept_glNamedFramebufferReadBuffer;
  }
  if (strcmp(name, "glNamedFramebufferRenderbuffer") == 0) {
    if (__glintercept_fnptr_glNamedFramebufferRenderbuffer == NULL) {
      __glintercept_fnptr_glNamedFramebufferRenderbuffer = (__ctype_glNamedFramebufferRenderbuffer) eglGetProcAddr("glNamedFramebufferRenderbuffer");
    }
    if (__glintercept_fnptr_glNamedFramebufferRenderbuffer == NULL) return NULL;
    return (void*) __glintercept_glNamedFramebufferRenderbuffer;
  }
  if (strcmp(name, "glNamedFramebufferRenderbufferEXT") == 0) {
    if (__glintercept_fnptr_glNamedFramebufferRenderbufferEXT == NULL) {
      __glintercept_fnptr_glNamedFramebufferRenderbufferEXT = (__ctype_glNamedFramebufferRenderbufferEXT) eglGetProcAddr("glNamedFramebufferRenderbufferEXT");
    }
    if (__glintercept_fnptr_glNamedFramebufferRenderbufferEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedFramebufferRenderbufferEXT;
  }
  if (strcmp(name, "glNamedFramebufferSampleLocationsfvARB") == 0) {
    if (__glintercept_fnptr_glNamedFramebufferSampleLocationsfvARB == NULL) {
      __glintercept_fnptr_glNamedFramebufferSampleLocationsfvARB = (__ctype_glNamedFramebufferSampleLocationsfvARB) eglGetProcAddr("glNamedFramebufferSampleLocationsfvARB");
    }
    if (__glintercept_fnptr_glNamedFramebufferSampleLocationsfvARB == NULL) return NULL;
    return (void*) __glintercept_glNamedFramebufferSampleLocationsfvARB;
  }
  if (strcmp(name, "glNamedFramebufferSampleLocationsfvNV") == 0) {
    if (__glintercept_fnptr_glNamedFramebufferSampleLocationsfvNV == NULL) {
      __glintercept_fnptr_glNamedFramebufferSampleLocationsfvNV = (__ctype_glNamedFramebufferSampleLocationsfvNV) eglGetProcAddr("glNamedFramebufferSampleLocationsfvNV");
    }
    if (__glintercept_fnptr_glNamedFramebufferSampleLocationsfvNV == NULL) return NULL;
    return (void*) __glintercept_glNamedFramebufferSampleLocationsfvNV;
  }
  if (strcmp(name, "glNamedFramebufferTexture") == 0) {
    if (__glintercept_fnptr_glNamedFramebufferTexture == NULL) {
      __glintercept_fnptr_glNamedFramebufferTexture = (__ctype_glNamedFramebufferTexture) eglGetProcAddr("glNamedFramebufferTexture");
    }
    if (__glintercept_fnptr_glNamedFramebufferTexture == NULL) return NULL;
    return (void*) __glintercept_glNamedFramebufferTexture;
  }
  if (strcmp(name, "glNamedFramebufferSamplePositionsfvAMD") == 0) {
    if (__glintercept_fnptr_glNamedFramebufferSamplePositionsfvAMD == NULL) {
      __glintercept_fnptr_glNamedFramebufferSamplePositionsfvAMD = (__ctype_glNamedFramebufferSamplePositionsfvAMD) eglGetProcAddr("glNamedFramebufferSamplePositionsfvAMD");
    }
    if (__glintercept_fnptr_glNamedFramebufferSamplePositionsfvAMD == NULL) return NULL;
    return (void*) __glintercept_glNamedFramebufferSamplePositionsfvAMD;
  }
  if (strcmp(name, "glNamedFramebufferTexture1DEXT") == 0) {
    if (__glintercept_fnptr_glNamedFramebufferTexture1DEXT == NULL) {
      __glintercept_fnptr_glNamedFramebufferTexture1DEXT = (__ctype_glNamedFramebufferTexture1DEXT) eglGetProcAddr("glNamedFramebufferTexture1DEXT");
    }
    if (__glintercept_fnptr_glNamedFramebufferTexture1DEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedFramebufferTexture1DEXT;
  }
  if (strcmp(name, "glNamedFramebufferTexture2DEXT") == 0) {
    if (__glintercept_fnptr_glNamedFramebufferTexture2DEXT == NULL) {
      __glintercept_fnptr_glNamedFramebufferTexture2DEXT = (__ctype_glNamedFramebufferTexture2DEXT) eglGetProcAddr("glNamedFramebufferTexture2DEXT");
    }
    if (__glintercept_fnptr_glNamedFramebufferTexture2DEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedFramebufferTexture2DEXT;
  }
  if (strcmp(name, "glNamedFramebufferTexture3DEXT") == 0) {
    if (__glintercept_fnptr_glNamedFramebufferTexture3DEXT == NULL) {
      __glintercept_fnptr_glNamedFramebufferTexture3DEXT = (__ctype_glNamedFramebufferTexture3DEXT) eglGetProcAddr("glNamedFramebufferTexture3DEXT");
    }
    if (__glintercept_fnptr_glNamedFramebufferTexture3DEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedFramebufferTexture3DEXT;
  }
  if (strcmp(name, "glNamedFramebufferTextureEXT") == 0) {
    if (__glintercept_fnptr_glNamedFramebufferTextureEXT == NULL) {
      __glintercept_fnptr_glNamedFramebufferTextureEXT = (__ctype_glNamedFramebufferTextureEXT) eglGetProcAddr("glNamedFramebufferTextureEXT");
    }
    if (__glintercept_fnptr_glNamedFramebufferTextureEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedFramebufferTextureEXT;
  }
  if (strcmp(name, "glNamedFramebufferTextureFaceEXT") == 0) {
    if (__glintercept_fnptr_glNamedFramebufferTextureFaceEXT == NULL) {
      __glintercept_fnptr_glNamedFramebufferTextureFaceEXT = (__ctype_glNamedFramebufferTextureFaceEXT) eglGetProcAddr("glNamedFramebufferTextureFaceEXT");
    }
    if (__glintercept_fnptr_glNamedFramebufferTextureFaceEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedFramebufferTextureFaceEXT;
  }
  if (strcmp(name, "glNamedFramebufferTextureLayer") == 0) {
    if (__glintercept_fnptr_glNamedFramebufferTextureLayer == NULL) {
      __glintercept_fnptr_glNamedFramebufferTextureLayer = (__ctype_glNamedFramebufferTextureLayer) eglGetProcAddr("glNamedFramebufferTextureLayer");
    }
    if (__glintercept_fnptr_glNamedFramebufferTextureLayer == NULL) return NULL;
    return (void*) __glintercept_glNamedFramebufferTextureLayer;
  }
  if (strcmp(name, "glNamedFramebufferTextureLayerEXT") == 0) {
    if (__glintercept_fnptr_glNamedFramebufferTextureLayerEXT == NULL) {
      __glintercept_fnptr_glNamedFramebufferTextureLayerEXT = (__ctype_glNamedFramebufferTextureLayerEXT) eglGetProcAddr("glNamedFramebufferTextureLayerEXT");
    }
    if (__glintercept_fnptr_glNamedFramebufferTextureLayerEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedFramebufferTextureLayerEXT;
  }
  if (strcmp(name, "glNamedProgramLocalParameter4dEXT") == 0) {
    if (__glintercept_fnptr_glNamedProgramLocalParameter4dEXT == NULL) {
      __glintercept_fnptr_glNamedProgramLocalParameter4dEXT = (__ctype_glNamedProgramLocalParameter4dEXT) eglGetProcAddr("glNamedProgramLocalParameter4dEXT");
    }
    if (__glintercept_fnptr_glNamedProgramLocalParameter4dEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedProgramLocalParameter4dEXT;
  }
  if (strcmp(name, "glNamedProgramLocalParameter4dvEXT") == 0) {
    if (__glintercept_fnptr_glNamedProgramLocalParameter4dvEXT == NULL) {
      __glintercept_fnptr_glNamedProgramLocalParameter4dvEXT = (__ctype_glNamedProgramLocalParameter4dvEXT) eglGetProcAddr("glNamedProgramLocalParameter4dvEXT");
    }
    if (__glintercept_fnptr_glNamedProgramLocalParameter4dvEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedProgramLocalParameter4dvEXT;
  }
  if (strcmp(name, "glNamedProgramLocalParameter4fEXT") == 0) {
    if (__glintercept_fnptr_glNamedProgramLocalParameter4fEXT == NULL) {
      __glintercept_fnptr_glNamedProgramLocalParameter4fEXT = (__ctype_glNamedProgramLocalParameter4fEXT) eglGetProcAddr("glNamedProgramLocalParameter4fEXT");
    }
    if (__glintercept_fnptr_glNamedProgramLocalParameter4fEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedProgramLocalParameter4fEXT;
  }
  if (strcmp(name, "glNamedProgramLocalParameter4fvEXT") == 0) {
    if (__glintercept_fnptr_glNamedProgramLocalParameter4fvEXT == NULL) {
      __glintercept_fnptr_glNamedProgramLocalParameter4fvEXT = (__ctype_glNamedProgramLocalParameter4fvEXT) eglGetProcAddr("glNamedProgramLocalParameter4fvEXT");
    }
    if (__glintercept_fnptr_glNamedProgramLocalParameter4fvEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedProgramLocalParameter4fvEXT;
  }
  if (strcmp(name, "glNamedProgramLocalParameterI4iEXT") == 0) {
    if (__glintercept_fnptr_glNamedProgramLocalParameterI4iEXT == NULL) {
      __glintercept_fnptr_glNamedProgramLocalParameterI4iEXT = (__ctype_glNamedProgramLocalParameterI4iEXT) eglGetProcAddr("glNamedProgramLocalParameterI4iEXT");
    }
    if (__glintercept_fnptr_glNamedProgramLocalParameterI4iEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedProgramLocalParameterI4iEXT;
  }
  if (strcmp(name, "glNamedProgramLocalParameterI4ivEXT") == 0) {
    if (__glintercept_fnptr_glNamedProgramLocalParameterI4ivEXT == NULL) {
      __glintercept_fnptr_glNamedProgramLocalParameterI4ivEXT = (__ctype_glNamedProgramLocalParameterI4ivEXT) eglGetProcAddr("glNamedProgramLocalParameterI4ivEXT");
    }
    if (__glintercept_fnptr_glNamedProgramLocalParameterI4ivEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedProgramLocalParameterI4ivEXT;
  }
  if (strcmp(name, "glNamedProgramLocalParameterI4uiEXT") == 0) {
    if (__glintercept_fnptr_glNamedProgramLocalParameterI4uiEXT == NULL) {
      __glintercept_fnptr_glNamedProgramLocalParameterI4uiEXT = (__ctype_glNamedProgramLocalParameterI4uiEXT) eglGetProcAddr("glNamedProgramLocalParameterI4uiEXT");
    }
    if (__glintercept_fnptr_glNamedProgramLocalParameterI4uiEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedProgramLocalParameterI4uiEXT;
  }
  if (strcmp(name, "glNamedProgramLocalParameterI4uivEXT") == 0) {
    if (__glintercept_fnptr_glNamedProgramLocalParameterI4uivEXT == NULL) {
      __glintercept_fnptr_glNamedProgramLocalParameterI4uivEXT = (__ctype_glNamedProgramLocalParameterI4uivEXT) eglGetProcAddr("glNamedProgramLocalParameterI4uivEXT");
    }
    if (__glintercept_fnptr_glNamedProgramLocalParameterI4uivEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedProgramLocalParameterI4uivEXT;
  }
  if (strcmp(name, "glNamedProgramLocalParameters4fvEXT") == 0) {
    if (__glintercept_fnptr_glNamedProgramLocalParameters4fvEXT == NULL) {
      __glintercept_fnptr_glNamedProgramLocalParameters4fvEXT = (__ctype_glNamedProgramLocalParameters4fvEXT) eglGetProcAddr("glNamedProgramLocalParameters4fvEXT");
    }
    if (__glintercept_fnptr_glNamedProgramLocalParameters4fvEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedProgramLocalParameters4fvEXT;
  }
  if (strcmp(name, "glNamedProgramLocalParametersI4ivEXT") == 0) {
    if (__glintercept_fnptr_glNamedProgramLocalParametersI4ivEXT == NULL) {
      __glintercept_fnptr_glNamedProgramLocalParametersI4ivEXT = (__ctype_glNamedProgramLocalParametersI4ivEXT) eglGetProcAddr("glNamedProgramLocalParametersI4ivEXT");
    }
    if (__glintercept_fnptr_glNamedProgramLocalParametersI4ivEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedProgramLocalParametersI4ivEXT;
  }
  if (strcmp(name, "glNamedProgramLocalParametersI4uivEXT") == 0) {
    if (__glintercept_fnptr_glNamedProgramLocalParametersI4uivEXT == NULL) {
      __glintercept_fnptr_glNamedProgramLocalParametersI4uivEXT = (__ctype_glNamedProgramLocalParametersI4uivEXT) eglGetProcAddr("glNamedProgramLocalParametersI4uivEXT");
    }
    if (__glintercept_fnptr_glNamedProgramLocalParametersI4uivEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedProgramLocalParametersI4uivEXT;
  }
  if (strcmp(name, "glNamedProgramStringEXT") == 0) {
    if (__glintercept_fnptr_glNamedProgramStringEXT == NULL) {
      __glintercept_fnptr_glNamedProgramStringEXT = (__ctype_glNamedProgramStringEXT) eglGetProcAddr("glNamedProgramStringEXT");
    }
    if (__glintercept_fnptr_glNamedProgramStringEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedProgramStringEXT;
  }
  if (strcmp(name, "glNamedRenderbufferStorage") == 0) {
    if (__glintercept_fnptr_glNamedRenderbufferStorage == NULL) {
      __glintercept_fnptr_glNamedRenderbufferStorage = (__ctype_glNamedRenderbufferStorage) eglGetProcAddr("glNamedRenderbufferStorage");
    }
    if (__glintercept_fnptr_glNamedRenderbufferStorage == NULL) return NULL;
    return (void*) __glintercept_glNamedRenderbufferStorage;
  }
  if (strcmp(name, "glNamedRenderbufferStorageEXT") == 0) {
    if (__glintercept_fnptr_glNamedRenderbufferStorageEXT == NULL) {
      __glintercept_fnptr_glNamedRenderbufferStorageEXT = (__ctype_glNamedRenderbufferStorageEXT) eglGetProcAddr("glNamedRenderbufferStorageEXT");
    }
    if (__glintercept_fnptr_glNamedRenderbufferStorageEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedRenderbufferStorageEXT;
  }
  if (strcmp(name, "glNamedRenderbufferStorageMultisample") == 0) {
    if (__glintercept_fnptr_glNamedRenderbufferStorageMultisample == NULL) {
      __glintercept_fnptr_glNamedRenderbufferStorageMultisample = (__ctype_glNamedRenderbufferStorageMultisample) eglGetProcAddr("glNamedRenderbufferStorageMultisample");
    }
    if (__glintercept_fnptr_glNamedRenderbufferStorageMultisample == NULL) return NULL;
    return (void*) __glintercept_glNamedRenderbufferStorageMultisample;
  }
  if (strcmp(name, "glNamedRenderbufferStorageMultisampleAdvancedAMD") == 0) {
    if (__glintercept_fnptr_glNamedRenderbufferStorageMultisampleAdvancedAMD == NULL) {
      __glintercept_fnptr_glNamedRenderbufferStorageMultisampleAdvancedAMD = (__ctype_glNamedRenderbufferStorageMultisampleAdvancedAMD) eglGetProcAddr("glNamedRenderbufferStorageMultisampleAdvancedAMD");
    }
    if (__glintercept_fnptr_glNamedRenderbufferStorageMultisampleAdvancedAMD == NULL) return NULL;
    return (void*) __glintercept_glNamedRenderbufferStorageMultisampleAdvancedAMD;
  }
  if (strcmp(name, "glNamedRenderbufferStorageMultisampleCoverageEXT") == 0) {
    if (__glintercept_fnptr_glNamedRenderbufferStorageMultisampleCoverageEXT == NULL) {
      __glintercept_fnptr_glNamedRenderbufferStorageMultisampleCoverageEXT = (__ctype_glNamedRenderbufferStorageMultisampleCoverageEXT) eglGetProcAddr("glNamedRenderbufferStorageMultisampleCoverageEXT");
    }
    if (__glintercept_fnptr_glNamedRenderbufferStorageMultisampleCoverageEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedRenderbufferStorageMultisampleCoverageEXT;
  }
  if (strcmp(name, "glNamedRenderbufferStorageMultisampleEXT") == 0) {
    if (__glintercept_fnptr_glNamedRenderbufferStorageMultisampleEXT == NULL) {
      __glintercept_fnptr_glNamedRenderbufferStorageMultisampleEXT = (__ctype_glNamedRenderbufferStorageMultisampleEXT) eglGetProcAddr("glNamedRenderbufferStorageMultisampleEXT");
    }
    if (__glintercept_fnptr_glNamedRenderbufferStorageMultisampleEXT == NULL) return NULL;
    return (void*) __glintercept_glNamedRenderbufferStorageMultisampleEXT;
  }
  if (strcmp(name, "glNamedStringARB") == 0) {
    if (__glintercept_fnptr_glNamedStringARB == NULL) {
      __glintercept_fnptr_glNamedStringARB = (__ctype_glNamedStringARB) eglGetProcAddr("glNamedStringARB");
    }
    if (__glintercept_fnptr_glNamedStringARB == NULL) return NULL;
    return (void*) __glintercept_glNamedStringARB;
  }
  if (strcmp(name, "glNewList") == 0) {
    if (__glintercept_fnptr_glNewList == NULL) {
      __glintercept_fnptr_glNewList = (__ctype_glNewList) eglGetProcAddr("glNewList");
    }
    if (__glintercept_fnptr_glNewList == NULL) return NULL;
    return (void*) __glintercept_glNewList;
  }
  if (strcmp(name, "glNewObjectBufferATI") == 0) {
    if (__glintercept_fnptr_glNewObjectBufferATI == NULL) {
      __glintercept_fnptr_glNewObjectBufferATI = (__ctype_glNewObjectBufferATI) eglGetProcAddr("glNewObjectBufferATI");
    }
    if (__glintercept_fnptr_glNewObjectBufferATI == NULL) return NULL;
    return (void*) __glintercept_glNewObjectBufferATI;
  }
  if (strcmp(name, "glNormal3b") == 0) {
    if (__glintercept_fnptr_glNormal3b == NULL) {
      __glintercept_fnptr_glNormal3b = (__ctype_glNormal3b) eglGetProcAddr("glNormal3b");
    }
    if (__glintercept_fnptr_glNormal3b == NULL) return NULL;
    return (void*) __glintercept_glNormal3b;
  }
  if (strcmp(name, "glNormal3bv") == 0) {
    if (__glintercept_fnptr_glNormal3bv == NULL) {
      __glintercept_fnptr_glNormal3bv = (__ctype_glNormal3bv) eglGetProcAddr("glNormal3bv");
    }
    if (__glintercept_fnptr_glNormal3bv == NULL) return NULL;
    return (void*) __glintercept_glNormal3bv;
  }
  if (strcmp(name, "glNormal3d") == 0) {
    if (__glintercept_fnptr_glNormal3d == NULL) {
      __glintercept_fnptr_glNormal3d = (__ctype_glNormal3d) eglGetProcAddr("glNormal3d");
    }
    if (__glintercept_fnptr_glNormal3d == NULL) return NULL;
    return (void*) __glintercept_glNormal3d;
  }
  if (strcmp(name, "glNormal3dv") == 0) {
    if (__glintercept_fnptr_glNormal3dv == NULL) {
      __glintercept_fnptr_glNormal3dv = (__ctype_glNormal3dv) eglGetProcAddr("glNormal3dv");
    }
    if (__glintercept_fnptr_glNormal3dv == NULL) return NULL;
    return (void*) __glintercept_glNormal3dv;
  }
  if (strcmp(name, "glNormal3f") == 0) {
    if (__glintercept_fnptr_glNormal3f == NULL) {
      __glintercept_fnptr_glNormal3f = (__ctype_glNormal3f) eglGetProcAddr("glNormal3f");
    }
    if (__glintercept_fnptr_glNormal3f == NULL) return NULL;
    return (void*) __glintercept_glNormal3f;
  }
  if (strcmp(name, "glNormal3fVertex3fSUN") == 0) {
    if (__glintercept_fnptr_glNormal3fVertex3fSUN == NULL) {
      __glintercept_fnptr_glNormal3fVertex3fSUN = (__ctype_glNormal3fVertex3fSUN) eglGetProcAddr("glNormal3fVertex3fSUN");
    }
    if (__glintercept_fnptr_glNormal3fVertex3fSUN == NULL) return NULL;
    return (void*) __glintercept_glNormal3fVertex3fSUN;
  }
  if (strcmp(name, "glNormal3fVertex3fvSUN") == 0) {
    if (__glintercept_fnptr_glNormal3fVertex3fvSUN == NULL) {
      __glintercept_fnptr_glNormal3fVertex3fvSUN = (__ctype_glNormal3fVertex3fvSUN) eglGetProcAddr("glNormal3fVertex3fvSUN");
    }
    if (__glintercept_fnptr_glNormal3fVertex3fvSUN == NULL) return NULL;
    return (void*) __glintercept_glNormal3fVertex3fvSUN;
  }
  if (strcmp(name, "glNormal3fv") == 0) {
    if (__glintercept_fnptr_glNormal3fv == NULL) {
      __glintercept_fnptr_glNormal3fv = (__ctype_glNormal3fv) eglGetProcAddr("glNormal3fv");
    }
    if (__glintercept_fnptr_glNormal3fv == NULL) return NULL;
    return (void*) __glintercept_glNormal3fv;
  }
  if (strcmp(name, "glNormal3hNV") == 0) {
    if (__glintercept_fnptr_glNormal3hNV == NULL) {
      __glintercept_fnptr_glNormal3hNV = (__ctype_glNormal3hNV) eglGetProcAddr("glNormal3hNV");
    }
    if (__glintercept_fnptr_glNormal3hNV == NULL) return NULL;
    return (void*) __glintercept_glNormal3hNV;
  }
  if (strcmp(name, "glNormal3hvNV") == 0) {
    if (__glintercept_fnptr_glNormal3hvNV == NULL) {
      __glintercept_fnptr_glNormal3hvNV = (__ctype_glNormal3hvNV) eglGetProcAddr("glNormal3hvNV");
    }
    if (__glintercept_fnptr_glNormal3hvNV == NULL) return NULL;
    return (void*) __glintercept_glNormal3hvNV;
  }
  if (strcmp(name, "glNormal3i") == 0) {
    if (__glintercept_fnptr_glNormal3i == NULL) {
      __glintercept_fnptr_glNormal3i = (__ctype_glNormal3i) eglGetProcAddr("glNormal3i");
    }
    if (__glintercept_fnptr_glNormal3i == NULL) return NULL;
    return (void*) __glintercept_glNormal3i;
  }
  if (strcmp(name, "glNormal3iv") == 0) {
    if (__glintercept_fnptr_glNormal3iv == NULL) {
      __glintercept_fnptr_glNormal3iv = (__ctype_glNormal3iv) eglGetProcAddr("glNormal3iv");
    }
    if (__glintercept_fnptr_glNormal3iv == NULL) return NULL;
    return (void*) __glintercept_glNormal3iv;
  }
  if (strcmp(name, "glNormal3s") == 0) {
    if (__glintercept_fnptr_glNormal3s == NULL) {
      __glintercept_fnptr_glNormal3s = (__ctype_glNormal3s) eglGetProcAddr("glNormal3s");
    }
    if (__glintercept_fnptr_glNormal3s == NULL) return NULL;
    return (void*) __glintercept_glNormal3s;
  }
  if (strcmp(name, "glNormal3sv") == 0) {
    if (__glintercept_fnptr_glNormal3sv == NULL) {
      __glintercept_fnptr_glNormal3sv = (__ctype_glNormal3sv) eglGetProcAddr("glNormal3sv");
    }
    if (__glintercept_fnptr_glNormal3sv == NULL) return NULL;
    return (void*) __glintercept_glNormal3sv;
  }
  if (strcmp(name, "glNormal3x") == 0) {
    if (__glintercept_fnptr_glNormal3x == NULL) {
      __glintercept_fnptr_glNormal3x = (__ctype_glNormal3x) eglGetProcAddr("glNormal3x");
    }
    if (__glintercept_fnptr_glNormal3x == NULL) return NULL;
    return (void*) __glintercept_glNormal3x;
  }
  if (strcmp(name, "glNormal3xOES") == 0) {
    if (__glintercept_fnptr_glNormal3xOES == NULL) {
      __glintercept_fnptr_glNormal3xOES = (__ctype_glNormal3xOES) eglGetProcAddr("glNormal3xOES");
    }
    if (__glintercept_fnptr_glNormal3xOES == NULL) return NULL;
    return (void*) __glintercept_glNormal3xOES;
  }
  if (strcmp(name, "glNormal3xvOES") == 0) {
    if (__glintercept_fnptr_glNormal3xvOES == NULL) {
      __glintercept_fnptr_glNormal3xvOES = (__ctype_glNormal3xvOES) eglGetProcAddr("glNormal3xvOES");
    }
    if (__glintercept_fnptr_glNormal3xvOES == NULL) return NULL;
    return (void*) __glintercept_glNormal3xvOES;
  }
  if (strcmp(name, "glNormalFormatNV") == 0) {
    if (__glintercept_fnptr_glNormalFormatNV == NULL) {
      __glintercept_fnptr_glNormalFormatNV = (__ctype_glNormalFormatNV) eglGetProcAddr("glNormalFormatNV");
    }
    if (__glintercept_fnptr_glNormalFormatNV == NULL) return NULL;
    return (void*) __glintercept_glNormalFormatNV;
  }
  if (strcmp(name, "glNormalP3ui") == 0) {
    if (__glintercept_fnptr_glNormalP3ui == NULL) {
      __glintercept_fnptr_glNormalP3ui = (__ctype_glNormalP3ui) eglGetProcAddr("glNormalP3ui");
    }
    if (__glintercept_fnptr_glNormalP3ui == NULL) return NULL;
    return (void*) __glintercept_glNormalP3ui;
  }
  if (strcmp(name, "glNormalP3uiv") == 0) {
    if (__glintercept_fnptr_glNormalP3uiv == NULL) {
      __glintercept_fnptr_glNormalP3uiv = (__ctype_glNormalP3uiv) eglGetProcAddr("glNormalP3uiv");
    }
    if (__glintercept_fnptr_glNormalP3uiv == NULL) return NULL;
    return (void*) __glintercept_glNormalP3uiv;
  }
  if (strcmp(name, "glNormalPointer") == 0) {
    if (__glintercept_fnptr_glNormalPointer == NULL) {
      __glintercept_fnptr_glNormalPointer = (__ctype_glNormalPointer) eglGetProcAddr("glNormalPointer");
    }
    if (__glintercept_fnptr_glNormalPointer == NULL) return NULL;
    return (void*) __glintercept_glNormalPointer;
  }
  if (strcmp(name, "glNormalPointerEXT") == 0) {
    if (__glintercept_fnptr_glNormalPointerEXT == NULL) {
      __glintercept_fnptr_glNormalPointerEXT = (__ctype_glNormalPointerEXT) eglGetProcAddr("glNormalPointerEXT");
    }
    if (__glintercept_fnptr_glNormalPointerEXT == NULL) return NULL;
    return (void*) __glintercept_glNormalPointerEXT;
  }
  if (strcmp(name, "glNormalPointerListIBM") == 0) {
    if (__glintercept_fnptr_glNormalPointerListIBM == NULL) {
      __glintercept_fnptr_glNormalPointerListIBM = (__ctype_glNormalPointerListIBM) eglGetProcAddr("glNormalPointerListIBM");
    }
    if (__glintercept_fnptr_glNormalPointerListIBM == NULL) return NULL;
    return (void*) __glintercept_glNormalPointerListIBM;
  }
  if (strcmp(name, "glNormalPointervINTEL") == 0) {
    if (__glintercept_fnptr_glNormalPointervINTEL == NULL) {
      __glintercept_fnptr_glNormalPointervINTEL = (__ctype_glNormalPointervINTEL) eglGetProcAddr("glNormalPointervINTEL");
    }
    if (__glintercept_fnptr_glNormalPointervINTEL == NULL) return NULL;
    return (void*) __glintercept_glNormalPointervINTEL;
  }
  if (strcmp(name, "glNormalStream3bATI") == 0) {
    if (__glintercept_fnptr_glNormalStream3bATI == NULL) {
      __glintercept_fnptr_glNormalStream3bATI = (__ctype_glNormalStream3bATI) eglGetProcAddr("glNormalStream3bATI");
    }
    if (__glintercept_fnptr_glNormalStream3bATI == NULL) return NULL;
    return (void*) __glintercept_glNormalStream3bATI;
  }
  if (strcmp(name, "glNormalStream3bvATI") == 0) {
    if (__glintercept_fnptr_glNormalStream3bvATI == NULL) {
      __glintercept_fnptr_glNormalStream3bvATI = (__ctype_glNormalStream3bvATI) eglGetProcAddr("glNormalStream3bvATI");
    }
    if (__glintercept_fnptr_glNormalStream3bvATI == NULL) return NULL;
    return (void*) __glintercept_glNormalStream3bvATI;
  }
  if (strcmp(name, "glNormalStream3dATI") == 0) {
    if (__glintercept_fnptr_glNormalStream3dATI == NULL) {
      __glintercept_fnptr_glNormalStream3dATI = (__ctype_glNormalStream3dATI) eglGetProcAddr("glNormalStream3dATI");
    }
    if (__glintercept_fnptr_glNormalStream3dATI == NULL) return NULL;
    return (void*) __glintercept_glNormalStream3dATI;
  }
  if (strcmp(name, "glNormalStream3dvATI") == 0) {
    if (__glintercept_fnptr_glNormalStream3dvATI == NULL) {
      __glintercept_fnptr_glNormalStream3dvATI = (__ctype_glNormalStream3dvATI) eglGetProcAddr("glNormalStream3dvATI");
    }
    if (__glintercept_fnptr_glNormalStream3dvATI == NULL) return NULL;
    return (void*) __glintercept_glNormalStream3dvATI;
  }
  if (strcmp(name, "glNormalStream3fATI") == 0) {
    if (__glintercept_fnptr_glNormalStream3fATI == NULL) {
      __glintercept_fnptr_glNormalStream3fATI = (__ctype_glNormalStream3fATI) eglGetProcAddr("glNormalStream3fATI");
    }
    if (__glintercept_fnptr_glNormalStream3fATI == NULL) return NULL;
    return (void*) __glintercept_glNormalStream3fATI;
  }
  if (strcmp(name, "glNormalStream3fvATI") == 0) {
    if (__glintercept_fnptr_glNormalStream3fvATI == NULL) {
      __glintercept_fnptr_glNormalStream3fvATI = (__ctype_glNormalStream3fvATI) eglGetProcAddr("glNormalStream3fvATI");
    }
    if (__glintercept_fnptr_glNormalStream3fvATI == NULL) return NULL;
    return (void*) __glintercept_glNormalStream3fvATI;
  }
  if (strcmp(name, "glNormalStream3iATI") == 0) {
    if (__glintercept_fnptr_glNormalStream3iATI == NULL) {
      __glintercept_fnptr_glNormalStream3iATI = (__ctype_glNormalStream3iATI) eglGetProcAddr("glNormalStream3iATI");
    }
    if (__glintercept_fnptr_glNormalStream3iATI == NULL) return NULL;
    return (void*) __glintercept_glNormalStream3iATI;
  }
  if (strcmp(name, "glNormalStream3ivATI") == 0) {
    if (__glintercept_fnptr_glNormalStream3ivATI == NULL) {
      __glintercept_fnptr_glNormalStream3ivATI = (__ctype_glNormalStream3ivATI) eglGetProcAddr("glNormalStream3ivATI");
    }
    if (__glintercept_fnptr_glNormalStream3ivATI == NULL) return NULL;
    return (void*) __glintercept_glNormalStream3ivATI;
  }
  if (strcmp(name, "glNormalStream3sATI") == 0) {
    if (__glintercept_fnptr_glNormalStream3sATI == NULL) {
      __glintercept_fnptr_glNormalStream3sATI = (__ctype_glNormalStream3sATI) eglGetProcAddr("glNormalStream3sATI");
    }
    if (__glintercept_fnptr_glNormalStream3sATI == NULL) return NULL;
    return (void*) __glintercept_glNormalStream3sATI;
  }
  if (strcmp(name, "glNormalStream3svATI") == 0) {
    if (__glintercept_fnptr_glNormalStream3svATI == NULL) {
      __glintercept_fnptr_glNormalStream3svATI = (__ctype_glNormalStream3svATI) eglGetProcAddr("glNormalStream3svATI");
    }
    if (__glintercept_fnptr_glNormalStream3svATI == NULL) return NULL;
    return (void*) __glintercept_glNormalStream3svATI;
  }
  if (strcmp(name, "glObjectLabel") == 0) {
    if (__glintercept_fnptr_glObjectLabel == NULL) {
      __glintercept_fnptr_glObjectLabel = (__ctype_glObjectLabel) eglGetProcAddr("glObjectLabel");
    }
    if (__glintercept_fnptr_glObjectLabel == NULL) return NULL;
    return (void*) __glintercept_glObjectLabel;
  }
  if (strcmp(name, "glObjectLabelKHR") == 0) {
    if (__glintercept_fnptr_glObjectLabelKHR == NULL) {
      __glintercept_fnptr_glObjectLabelKHR = (__ctype_glObjectLabelKHR) eglGetProcAddr("glObjectLabelKHR");
    }
    if (__glintercept_fnptr_glObjectLabelKHR == NULL) return NULL;
    return (void*) __glintercept_glObjectLabelKHR;
  }
  if (strcmp(name, "glObjectPtrLabel") == 0) {
    if (__glintercept_fnptr_glObjectPtrLabel == NULL) {
      __glintercept_fnptr_glObjectPtrLabel = (__ctype_glObjectPtrLabel) eglGetProcAddr("glObjectPtrLabel");
    }
    if (__glintercept_fnptr_glObjectPtrLabel == NULL) return NULL;
    return (void*) __glintercept_glObjectPtrLabel;
  }
  if (strcmp(name, "glObjectPtrLabelKHR") == 0) {
    if (__glintercept_fnptr_glObjectPtrLabelKHR == NULL) {
      __glintercept_fnptr_glObjectPtrLabelKHR = (__ctype_glObjectPtrLabelKHR) eglGetProcAddr("glObjectPtrLabelKHR");
    }
    if (__glintercept_fnptr_glObjectPtrLabelKHR == NULL) return NULL;
    return (void*) __glintercept_glObjectPtrLabelKHR;
  }
  if (strcmp(name, "glObjectPurgeableAPPLE") == 0) {
    if (__glintercept_fnptr_glObjectPurgeableAPPLE == NULL) {
      __glintercept_fnptr_glObjectPurgeableAPPLE = (__ctype_glObjectPurgeableAPPLE) eglGetProcAddr("glObjectPurgeableAPPLE");
    }
    if (__glintercept_fnptr_glObjectPurgeableAPPLE == NULL) return NULL;
    return (void*) __glintercept_glObjectPurgeableAPPLE;
  }
  if (strcmp(name, "glObjectUnpurgeableAPPLE") == 0) {
    if (__glintercept_fnptr_glObjectUnpurgeableAPPLE == NULL) {
      __glintercept_fnptr_glObjectUnpurgeableAPPLE = (__ctype_glObjectUnpurgeableAPPLE) eglGetProcAddr("glObjectUnpurgeableAPPLE");
    }
    if (__glintercept_fnptr_glObjectUnpurgeableAPPLE == NULL) return NULL;
    return (void*) __glintercept_glObjectUnpurgeableAPPLE;
  }
  if (strcmp(name, "glOrtho") == 0) {
    if (__glintercept_fnptr_glOrtho == NULL) {
      __glintercept_fnptr_glOrtho = (__ctype_glOrtho) eglGetProcAddr("glOrtho");
    }
    if (__glintercept_fnptr_glOrtho == NULL) return NULL;
    return (void*) __glintercept_glOrtho;
  }
  if (strcmp(name, "glOrthof") == 0) {
    if (__glintercept_fnptr_glOrthof == NULL) {
      __glintercept_fnptr_glOrthof = (__ctype_glOrthof) eglGetProcAddr("glOrthof");
    }
    if (__glintercept_fnptr_glOrthof == NULL) return NULL;
    return (void*) __glintercept_glOrthof;
  }
  if (strcmp(name, "glOrthofOES") == 0) {
    if (__glintercept_fnptr_glOrthofOES == NULL) {
      __glintercept_fnptr_glOrthofOES = (__ctype_glOrthofOES) eglGetProcAddr("glOrthofOES");
    }
    if (__glintercept_fnptr_glOrthofOES == NULL) return NULL;
    return (void*) __glintercept_glOrthofOES;
  }
  if (strcmp(name, "glOrthox") == 0) {
    if (__glintercept_fnptr_glOrthox == NULL) {
      __glintercept_fnptr_glOrthox = (__ctype_glOrthox) eglGetProcAddr("glOrthox");
    }
    if (__glintercept_fnptr_glOrthox == NULL) return NULL;
    return (void*) __glintercept_glOrthox;
  }
  if (strcmp(name, "glOrthoxOES") == 0) {
    if (__glintercept_fnptr_glOrthoxOES == NULL) {
      __glintercept_fnptr_glOrthoxOES = (__ctype_glOrthoxOES) eglGetProcAddr("glOrthoxOES");
    }
    if (__glintercept_fnptr_glOrthoxOES == NULL) return NULL;
    return (void*) __glintercept_glOrthoxOES;
  }
  if (strcmp(name, "glPNTrianglesfATI") == 0) {
    if (__glintercept_fnptr_glPNTrianglesfATI == NULL) {
      __glintercept_fnptr_glPNTrianglesfATI = (__ctype_glPNTrianglesfATI) eglGetProcAddr("glPNTrianglesfATI");
    }
    if (__glintercept_fnptr_glPNTrianglesfATI == NULL) return NULL;
    return (void*) __glintercept_glPNTrianglesfATI;
  }
  if (strcmp(name, "glPNTrianglesiATI") == 0) {
    if (__glintercept_fnptr_glPNTrianglesiATI == NULL) {
      __glintercept_fnptr_glPNTrianglesiATI = (__ctype_glPNTrianglesiATI) eglGetProcAddr("glPNTrianglesiATI");
    }
    if (__glintercept_fnptr_glPNTrianglesiATI == NULL) return NULL;
    return (void*) __glintercept_glPNTrianglesiATI;
  }
  if (strcmp(name, "glPassTexCoordATI") == 0) {
    if (__glintercept_fnptr_glPassTexCoordATI == NULL) {
      __glintercept_fnptr_glPassTexCoordATI = (__ctype_glPassTexCoordATI) eglGetProcAddr("glPassTexCoordATI");
    }
    if (__glintercept_fnptr_glPassTexCoordATI == NULL) return NULL;
    return (void*) __glintercept_glPassTexCoordATI;
  }
  if (strcmp(name, "glPassThrough") == 0) {
    if (__glintercept_fnptr_glPassThrough == NULL) {
      __glintercept_fnptr_glPassThrough = (__ctype_glPassThrough) eglGetProcAddr("glPassThrough");
    }
    if (__glintercept_fnptr_glPassThrough == NULL) return NULL;
    return (void*) __glintercept_glPassThrough;
  }
  if (strcmp(name, "glPassThroughxOES") == 0) {
    if (__glintercept_fnptr_glPassThroughxOES == NULL) {
      __glintercept_fnptr_glPassThroughxOES = (__ctype_glPassThroughxOES) eglGetProcAddr("glPassThroughxOES");
    }
    if (__glintercept_fnptr_glPassThroughxOES == NULL) return NULL;
    return (void*) __glintercept_glPassThroughxOES;
  }
  if (strcmp(name, "glPatchParameterfv") == 0) {
    if (__glintercept_fnptr_glPatchParameterfv == NULL) {
      __glintercept_fnptr_glPatchParameterfv = (__ctype_glPatchParameterfv) eglGetProcAddr("glPatchParameterfv");
    }
    if (__glintercept_fnptr_glPatchParameterfv == NULL) return NULL;
    return (void*) __glintercept_glPatchParameterfv;
  }
  if (strcmp(name, "glPatchParameteri") == 0) {
    if (__glintercept_fnptr_glPatchParameteri == NULL) {
      __glintercept_fnptr_glPatchParameteri = (__ctype_glPatchParameteri) eglGetProcAddr("glPatchParameteri");
    }
    if (__glintercept_fnptr_glPatchParameteri == NULL) return NULL;
    return (void*) __glintercept_glPatchParameteri;
  }
  if (strcmp(name, "glPatchParameteriEXT") == 0) {
    if (__glintercept_fnptr_glPatchParameteriEXT == NULL) {
      __glintercept_fnptr_glPatchParameteriEXT = (__ctype_glPatchParameteriEXT) eglGetProcAddr("glPatchParameteriEXT");
    }
    if (__glintercept_fnptr_glPatchParameteriEXT == NULL) return NULL;
    return (void*) __glintercept_glPatchParameteriEXT;
  }
  if (strcmp(name, "glPatchParameteriOES") == 0) {
    if (__glintercept_fnptr_glPatchParameteriOES == NULL) {
      __glintercept_fnptr_glPatchParameteriOES = (__ctype_glPatchParameteriOES) eglGetProcAddr("glPatchParameteriOES");
    }
    if (__glintercept_fnptr_glPatchParameteriOES == NULL) return NULL;
    return (void*) __glintercept_glPatchParameteriOES;
  }
  if (strcmp(name, "glPathColorGenNV") == 0) {
    if (__glintercept_fnptr_glPathColorGenNV == NULL) {
      __glintercept_fnptr_glPathColorGenNV = (__ctype_glPathColorGenNV) eglGetProcAddr("glPathColorGenNV");
    }
    if (__glintercept_fnptr_glPathColorGenNV == NULL) return NULL;
    return (void*) __glintercept_glPathColorGenNV;
  }
  if (strcmp(name, "glPathCommandsNV") == 0) {
    if (__glintercept_fnptr_glPathCommandsNV == NULL) {
      __glintercept_fnptr_glPathCommandsNV = (__ctype_glPathCommandsNV) eglGetProcAddr("glPathCommandsNV");
    }
    if (__glintercept_fnptr_glPathCommandsNV == NULL) return NULL;
    return (void*) __glintercept_glPathCommandsNV;
  }
  if (strcmp(name, "glPathCoordsNV") == 0) {
    if (__glintercept_fnptr_glPathCoordsNV == NULL) {
      __glintercept_fnptr_glPathCoordsNV = (__ctype_glPathCoordsNV) eglGetProcAddr("glPathCoordsNV");
    }
    if (__glintercept_fnptr_glPathCoordsNV == NULL) return NULL;
    return (void*) __glintercept_glPathCoordsNV;
  }
  if (strcmp(name, "glPathCoverDepthFuncNV") == 0) {
    if (__glintercept_fnptr_glPathCoverDepthFuncNV == NULL) {
      __glintercept_fnptr_glPathCoverDepthFuncNV = (__ctype_glPathCoverDepthFuncNV) eglGetProcAddr("glPathCoverDepthFuncNV");
    }
    if (__glintercept_fnptr_glPathCoverDepthFuncNV == NULL) return NULL;
    return (void*) __glintercept_glPathCoverDepthFuncNV;
  }
  if (strcmp(name, "glPathDashArrayNV") == 0) {
    if (__glintercept_fnptr_glPathDashArrayNV == NULL) {
      __glintercept_fnptr_glPathDashArrayNV = (__ctype_glPathDashArrayNV) eglGetProcAddr("glPathDashArrayNV");
    }
    if (__glintercept_fnptr_glPathDashArrayNV == NULL) return NULL;
    return (void*) __glintercept_glPathDashArrayNV;
  }
  if (strcmp(name, "glPathFogGenNV") == 0) {
    if (__glintercept_fnptr_glPathFogGenNV == NULL) {
      __glintercept_fnptr_glPathFogGenNV = (__ctype_glPathFogGenNV) eglGetProcAddr("glPathFogGenNV");
    }
    if (__glintercept_fnptr_glPathFogGenNV == NULL) return NULL;
    return (void*) __glintercept_glPathFogGenNV;
  }
  if (strcmp(name, "glPathGlyphIndexArrayNV") == 0) {
    if (__glintercept_fnptr_glPathGlyphIndexArrayNV == NULL) {
      __glintercept_fnptr_glPathGlyphIndexArrayNV = (__ctype_glPathGlyphIndexArrayNV) eglGetProcAddr("glPathGlyphIndexArrayNV");
    }
    if (__glintercept_fnptr_glPathGlyphIndexArrayNV == NULL) return NULL;
    return (void*) __glintercept_glPathGlyphIndexArrayNV;
  }
  if (strcmp(name, "glPathGlyphIndexRangeNV") == 0) {
    if (__glintercept_fnptr_glPathGlyphIndexRangeNV == NULL) {
      __glintercept_fnptr_glPathGlyphIndexRangeNV = (__ctype_glPathGlyphIndexRangeNV) eglGetProcAddr("glPathGlyphIndexRangeNV");
    }
    if (__glintercept_fnptr_glPathGlyphIndexRangeNV == NULL) return NULL;
    return (void*) __glintercept_glPathGlyphIndexRangeNV;
  }
  if (strcmp(name, "glPathGlyphRangeNV") == 0) {
    if (__glintercept_fnptr_glPathGlyphRangeNV == NULL) {
      __glintercept_fnptr_glPathGlyphRangeNV = (__ctype_glPathGlyphRangeNV) eglGetProcAddr("glPathGlyphRangeNV");
    }
    if (__glintercept_fnptr_glPathGlyphRangeNV == NULL) return NULL;
    return (void*) __glintercept_glPathGlyphRangeNV;
  }
  if (strcmp(name, "glPathGlyphsNV") == 0) {
    if (__glintercept_fnptr_glPathGlyphsNV == NULL) {
      __glintercept_fnptr_glPathGlyphsNV = (__ctype_glPathGlyphsNV) eglGetProcAddr("glPathGlyphsNV");
    }
    if (__glintercept_fnptr_glPathGlyphsNV == NULL) return NULL;
    return (void*) __glintercept_glPathGlyphsNV;
  }
  if (strcmp(name, "glPathMemoryGlyphIndexArrayNV") == 0) {
    if (__glintercept_fnptr_glPathMemoryGlyphIndexArrayNV == NULL) {
      __glintercept_fnptr_glPathMemoryGlyphIndexArrayNV = (__ctype_glPathMemoryGlyphIndexArrayNV) eglGetProcAddr("glPathMemoryGlyphIndexArrayNV");
    }
    if (__glintercept_fnptr_glPathMemoryGlyphIndexArrayNV == NULL) return NULL;
    return (void*) __glintercept_glPathMemoryGlyphIndexArrayNV;
  }
  if (strcmp(name, "glPathParameterfNV") == 0) {
    if (__glintercept_fnptr_glPathParameterfNV == NULL) {
      __glintercept_fnptr_glPathParameterfNV = (__ctype_glPathParameterfNV) eglGetProcAddr("glPathParameterfNV");
    }
    if (__glintercept_fnptr_glPathParameterfNV == NULL) return NULL;
    return (void*) __glintercept_glPathParameterfNV;
  }
  if (strcmp(name, "glPathParameterfvNV") == 0) {
    if (__glintercept_fnptr_glPathParameterfvNV == NULL) {
      __glintercept_fnptr_glPathParameterfvNV = (__ctype_glPathParameterfvNV) eglGetProcAddr("glPathParameterfvNV");
    }
    if (__glintercept_fnptr_glPathParameterfvNV == NULL) return NULL;
    return (void*) __glintercept_glPathParameterfvNV;
  }
  if (strcmp(name, "glPathParameteriNV") == 0) {
    if (__glintercept_fnptr_glPathParameteriNV == NULL) {
      __glintercept_fnptr_glPathParameteriNV = (__ctype_glPathParameteriNV) eglGetProcAddr("glPathParameteriNV");
    }
    if (__glintercept_fnptr_glPathParameteriNV == NULL) return NULL;
    return (void*) __glintercept_glPathParameteriNV;
  }
  if (strcmp(name, "glPathParameterivNV") == 0) {
    if (__glintercept_fnptr_glPathParameterivNV == NULL) {
      __glintercept_fnptr_glPathParameterivNV = (__ctype_glPathParameterivNV) eglGetProcAddr("glPathParameterivNV");
    }
    if (__glintercept_fnptr_glPathParameterivNV == NULL) return NULL;
    return (void*) __glintercept_glPathParameterivNV;
  }
  if (strcmp(name, "glPathStencilDepthOffsetNV") == 0) {
    if (__glintercept_fnptr_glPathStencilDepthOffsetNV == NULL) {
      __glintercept_fnptr_glPathStencilDepthOffsetNV = (__ctype_glPathStencilDepthOffsetNV) eglGetProcAddr("glPathStencilDepthOffsetNV");
    }
    if (__glintercept_fnptr_glPathStencilDepthOffsetNV == NULL) return NULL;
    return (void*) __glintercept_glPathStencilDepthOffsetNV;
  }
  if (strcmp(name, "glPathStencilFuncNV") == 0) {
    if (__glintercept_fnptr_glPathStencilFuncNV == NULL) {
      __glintercept_fnptr_glPathStencilFuncNV = (__ctype_glPathStencilFuncNV) eglGetProcAddr("glPathStencilFuncNV");
    }
    if (__glintercept_fnptr_glPathStencilFuncNV == NULL) return NULL;
    return (void*) __glintercept_glPathStencilFuncNV;
  }
  if (strcmp(name, "glPathStringNV") == 0) {
    if (__glintercept_fnptr_glPathStringNV == NULL) {
      __glintercept_fnptr_glPathStringNV = (__ctype_glPathStringNV) eglGetProcAddr("glPathStringNV");
    }
    if (__glintercept_fnptr_glPathStringNV == NULL) return NULL;
    return (void*) __glintercept_glPathStringNV;
  }
  if (strcmp(name, "glPathSubCommandsNV") == 0) {
    if (__glintercept_fnptr_glPathSubCommandsNV == NULL) {
      __glintercept_fnptr_glPathSubCommandsNV = (__ctype_glPathSubCommandsNV) eglGetProcAddr("glPathSubCommandsNV");
    }
    if (__glintercept_fnptr_glPathSubCommandsNV == NULL) return NULL;
    return (void*) __glintercept_glPathSubCommandsNV;
  }
  if (strcmp(name, "glPathSubCoordsNV") == 0) {
    if (__glintercept_fnptr_glPathSubCoordsNV == NULL) {
      __glintercept_fnptr_glPathSubCoordsNV = (__ctype_glPathSubCoordsNV) eglGetProcAddr("glPathSubCoordsNV");
    }
    if (__glintercept_fnptr_glPathSubCoordsNV == NULL) return NULL;
    return (void*) __glintercept_glPathSubCoordsNV;
  }
  if (strcmp(name, "glPathTexGenNV") == 0) {
    if (__glintercept_fnptr_glPathTexGenNV == NULL) {
      __glintercept_fnptr_glPathTexGenNV = (__ctype_glPathTexGenNV) eglGetProcAddr("glPathTexGenNV");
    }
    if (__glintercept_fnptr_glPathTexGenNV == NULL) return NULL;
    return (void*) __glintercept_glPathTexGenNV;
  }
  if (strcmp(name, "glPauseTransformFeedback") == 0) {
    if (__glintercept_fnptr_glPauseTransformFeedback == NULL) {
      __glintercept_fnptr_glPauseTransformFeedback = (__ctype_glPauseTransformFeedback) eglGetProcAddr("glPauseTransformFeedback");
    }
    if (__glintercept_fnptr_glPauseTransformFeedback == NULL) return NULL;
    return (void*) __glintercept_glPauseTransformFeedback;
  }
  if (strcmp(name, "glPauseTransformFeedbackNV") == 0) {
    if (__glintercept_fnptr_glPauseTransformFeedbackNV == NULL) {
      __glintercept_fnptr_glPauseTransformFeedbackNV = (__ctype_glPauseTransformFeedbackNV) eglGetProcAddr("glPauseTransformFeedbackNV");
    }
    if (__glintercept_fnptr_glPauseTransformFeedbackNV == NULL) return NULL;
    return (void*) __glintercept_glPauseTransformFeedbackNV;
  }
  if (strcmp(name, "glPixelDataRangeNV") == 0) {
    if (__glintercept_fnptr_glPixelDataRangeNV == NULL) {
      __glintercept_fnptr_glPixelDataRangeNV = (__ctype_glPixelDataRangeNV) eglGetProcAddr("glPixelDataRangeNV");
    }
    if (__glintercept_fnptr_glPixelDataRangeNV == NULL) return NULL;
    return (void*) __glintercept_glPixelDataRangeNV;
  }
  if (strcmp(name, "glPixelMapfv") == 0) {
    if (__glintercept_fnptr_glPixelMapfv == NULL) {
      __glintercept_fnptr_glPixelMapfv = (__ctype_glPixelMapfv) eglGetProcAddr("glPixelMapfv");
    }
    if (__glintercept_fnptr_glPixelMapfv == NULL) return NULL;
    return (void*) __glintercept_glPixelMapfv;
  }
  if (strcmp(name, "glPixelMapuiv") == 0) {
    if (__glintercept_fnptr_glPixelMapuiv == NULL) {
      __glintercept_fnptr_glPixelMapuiv = (__ctype_glPixelMapuiv) eglGetProcAddr("glPixelMapuiv");
    }
    if (__glintercept_fnptr_glPixelMapuiv == NULL) return NULL;
    return (void*) __glintercept_glPixelMapuiv;
  }
  if (strcmp(name, "glPixelMapusv") == 0) {
    if (__glintercept_fnptr_glPixelMapusv == NULL) {
      __glintercept_fnptr_glPixelMapusv = (__ctype_glPixelMapusv) eglGetProcAddr("glPixelMapusv");
    }
    if (__glintercept_fnptr_glPixelMapusv == NULL) return NULL;
    return (void*) __glintercept_glPixelMapusv;
  }
  if (strcmp(name, "glPixelMapx") == 0) {
    if (__glintercept_fnptr_glPixelMapx == NULL) {
      __glintercept_fnptr_glPixelMapx = (__ctype_glPixelMapx) eglGetProcAddr("glPixelMapx");
    }
    if (__glintercept_fnptr_glPixelMapx == NULL) return NULL;
    return (void*) __glintercept_glPixelMapx;
  }
  if (strcmp(name, "glPixelStoref") == 0) {
    if (__glintercept_fnptr_glPixelStoref == NULL) {
      __glintercept_fnptr_glPixelStoref = (__ctype_glPixelStoref) eglGetProcAddr("glPixelStoref");
    }
    if (__glintercept_fnptr_glPixelStoref == NULL) return NULL;
    return (void*) __glintercept_glPixelStoref;
  }
  if (strcmp(name, "glPixelStorei") == 0) {
    if (__glintercept_fnptr_glPixelStorei == NULL) {
      __glintercept_fnptr_glPixelStorei = (__ctype_glPixelStorei) eglGetProcAddr("glPixelStorei");
    }
    if (__glintercept_fnptr_glPixelStorei == NULL) return NULL;
    return (void*) __glintercept_glPixelStorei;
  }
  if (strcmp(name, "glPixelStorex") == 0) {
    if (__glintercept_fnptr_glPixelStorex == NULL) {
      __glintercept_fnptr_glPixelStorex = (__ctype_glPixelStorex) eglGetProcAddr("glPixelStorex");
    }
    if (__glintercept_fnptr_glPixelStorex == NULL) return NULL;
    return (void*) __glintercept_glPixelStorex;
  }
  if (strcmp(name, "glPixelTexGenParameterfSGIS") == 0) {
    if (__glintercept_fnptr_glPixelTexGenParameterfSGIS == NULL) {
      __glintercept_fnptr_glPixelTexGenParameterfSGIS = (__ctype_glPixelTexGenParameterfSGIS) eglGetProcAddr("glPixelTexGenParameterfSGIS");
    }
    if (__glintercept_fnptr_glPixelTexGenParameterfSGIS == NULL) return NULL;
    return (void*) __glintercept_glPixelTexGenParameterfSGIS;
  }
  if (strcmp(name, "glPixelTexGenParameterfvSGIS") == 0) {
    if (__glintercept_fnptr_glPixelTexGenParameterfvSGIS == NULL) {
      __glintercept_fnptr_glPixelTexGenParameterfvSGIS = (__ctype_glPixelTexGenParameterfvSGIS) eglGetProcAddr("glPixelTexGenParameterfvSGIS");
    }
    if (__glintercept_fnptr_glPixelTexGenParameterfvSGIS == NULL) return NULL;
    return (void*) __glintercept_glPixelTexGenParameterfvSGIS;
  }
  if (strcmp(name, "glPixelTexGenParameteriSGIS") == 0) {
    if (__glintercept_fnptr_glPixelTexGenParameteriSGIS == NULL) {
      __glintercept_fnptr_glPixelTexGenParameteriSGIS = (__ctype_glPixelTexGenParameteriSGIS) eglGetProcAddr("glPixelTexGenParameteriSGIS");
    }
    if (__glintercept_fnptr_glPixelTexGenParameteriSGIS == NULL) return NULL;
    return (void*) __glintercept_glPixelTexGenParameteriSGIS;
  }
  if (strcmp(name, "glPixelTexGenParameterivSGIS") == 0) {
    if (__glintercept_fnptr_glPixelTexGenParameterivSGIS == NULL) {
      __glintercept_fnptr_glPixelTexGenParameterivSGIS = (__ctype_glPixelTexGenParameterivSGIS) eglGetProcAddr("glPixelTexGenParameterivSGIS");
    }
    if (__glintercept_fnptr_glPixelTexGenParameterivSGIS == NULL) return NULL;
    return (void*) __glintercept_glPixelTexGenParameterivSGIS;
  }
  if (strcmp(name, "glPixelTexGenSGIX") == 0) {
    if (__glintercept_fnptr_glPixelTexGenSGIX == NULL) {
      __glintercept_fnptr_glPixelTexGenSGIX = (__ctype_glPixelTexGenSGIX) eglGetProcAddr("glPixelTexGenSGIX");
    }
    if (__glintercept_fnptr_glPixelTexGenSGIX == NULL) return NULL;
    return (void*) __glintercept_glPixelTexGenSGIX;
  }
  if (strcmp(name, "glPixelTransferf") == 0) {
    if (__glintercept_fnptr_glPixelTransferf == NULL) {
      __glintercept_fnptr_glPixelTransferf = (__ctype_glPixelTransferf) eglGetProcAddr("glPixelTransferf");
    }
    if (__glintercept_fnptr_glPixelTransferf == NULL) return NULL;
    return (void*) __glintercept_glPixelTransferf;
  }
  if (strcmp(name, "glPixelTransferi") == 0) {
    if (__glintercept_fnptr_glPixelTransferi == NULL) {
      __glintercept_fnptr_glPixelTransferi = (__ctype_glPixelTransferi) eglGetProcAddr("glPixelTransferi");
    }
    if (__glintercept_fnptr_glPixelTransferi == NULL) return NULL;
    return (void*) __glintercept_glPixelTransferi;
  }
  if (strcmp(name, "glPixelTransferxOES") == 0) {
    if (__glintercept_fnptr_glPixelTransferxOES == NULL) {
      __glintercept_fnptr_glPixelTransferxOES = (__ctype_glPixelTransferxOES) eglGetProcAddr("glPixelTransferxOES");
    }
    if (__glintercept_fnptr_glPixelTransferxOES == NULL) return NULL;
    return (void*) __glintercept_glPixelTransferxOES;
  }
  if (strcmp(name, "glPixelTransformParameterfEXT") == 0) {
    if (__glintercept_fnptr_glPixelTransformParameterfEXT == NULL) {
      __glintercept_fnptr_glPixelTransformParameterfEXT = (__ctype_glPixelTransformParameterfEXT) eglGetProcAddr("glPixelTransformParameterfEXT");
    }
    if (__glintercept_fnptr_glPixelTransformParameterfEXT == NULL) return NULL;
    return (void*) __glintercept_glPixelTransformParameterfEXT;
  }
  if (strcmp(name, "glPixelTransformParameterfvEXT") == 0) {
    if (__glintercept_fnptr_glPixelTransformParameterfvEXT == NULL) {
      __glintercept_fnptr_glPixelTransformParameterfvEXT = (__ctype_glPixelTransformParameterfvEXT) eglGetProcAddr("glPixelTransformParameterfvEXT");
    }
    if (__glintercept_fnptr_glPixelTransformParameterfvEXT == NULL) return NULL;
    return (void*) __glintercept_glPixelTransformParameterfvEXT;
  }
  if (strcmp(name, "glPixelTransformParameteriEXT") == 0) {
    if (__glintercept_fnptr_glPixelTransformParameteriEXT == NULL) {
      __glintercept_fnptr_glPixelTransformParameteriEXT = (__ctype_glPixelTransformParameteriEXT) eglGetProcAddr("glPixelTransformParameteriEXT");
    }
    if (__glintercept_fnptr_glPixelTransformParameteriEXT == NULL) return NULL;
    return (void*) __glintercept_glPixelTransformParameteriEXT;
  }
  if (strcmp(name, "glPixelTransformParameterivEXT") == 0) {
    if (__glintercept_fnptr_glPixelTransformParameterivEXT == NULL) {
      __glintercept_fnptr_glPixelTransformParameterivEXT = (__ctype_glPixelTransformParameterivEXT) eglGetProcAddr("glPixelTransformParameterivEXT");
    }
    if (__glintercept_fnptr_glPixelTransformParameterivEXT == NULL) return NULL;
    return (void*) __glintercept_glPixelTransformParameterivEXT;
  }
  if (strcmp(name, "glPixelZoom") == 0) {
    if (__glintercept_fnptr_glPixelZoom == NULL) {
      __glintercept_fnptr_glPixelZoom = (__ctype_glPixelZoom) eglGetProcAddr("glPixelZoom");
    }
    if (__glintercept_fnptr_glPixelZoom == NULL) return NULL;
    return (void*) __glintercept_glPixelZoom;
  }
  if (strcmp(name, "glPixelZoomxOES") == 0) {
    if (__glintercept_fnptr_glPixelZoomxOES == NULL) {
      __glintercept_fnptr_glPixelZoomxOES = (__ctype_glPixelZoomxOES) eglGetProcAddr("glPixelZoomxOES");
    }
    if (__glintercept_fnptr_glPixelZoomxOES == NULL) return NULL;
    return (void*) __glintercept_glPixelZoomxOES;
  }
  if (strcmp(name, "glPointAlongPathNV") == 0) {
    if (__glintercept_fnptr_glPointAlongPathNV == NULL) {
      __glintercept_fnptr_glPointAlongPathNV = (__ctype_glPointAlongPathNV) eglGetProcAddr("glPointAlongPathNV");
    }
    if (__glintercept_fnptr_glPointAlongPathNV == NULL) return NULL;
    return (void*) __glintercept_glPointAlongPathNV;
  }
  if (strcmp(name, "glPointParameterf") == 0) {
    if (__glintercept_fnptr_glPointParameterf == NULL) {
      __glintercept_fnptr_glPointParameterf = (__ctype_glPointParameterf) eglGetProcAddr("glPointParameterf");
    }
    if (__glintercept_fnptr_glPointParameterf == NULL) return NULL;
    return (void*) __glintercept_glPointParameterf;
  }
  if (strcmp(name, "glPointParameterfARB") == 0) {
    if (__glintercept_fnptr_glPointParameterfARB == NULL) {
      __glintercept_fnptr_glPointParameterfARB = (__ctype_glPointParameterfARB) eglGetProcAddr("glPointParameterfARB");
    }
    if (__glintercept_fnptr_glPointParameterfARB == NULL) return NULL;
    return (void*) __glintercept_glPointParameterfARB;
  }
  if (strcmp(name, "glPointParameterfEXT") == 0) {
    if (__glintercept_fnptr_glPointParameterfEXT == NULL) {
      __glintercept_fnptr_glPointParameterfEXT = (__ctype_glPointParameterfEXT) eglGetProcAddr("glPointParameterfEXT");
    }
    if (__glintercept_fnptr_glPointParameterfEXT == NULL) return NULL;
    return (void*) __glintercept_glPointParameterfEXT;
  }
  if (strcmp(name, "glPointParameterfSGIS") == 0) {
    if (__glintercept_fnptr_glPointParameterfSGIS == NULL) {
      __glintercept_fnptr_glPointParameterfSGIS = (__ctype_glPointParameterfSGIS) eglGetProcAddr("glPointParameterfSGIS");
    }
    if (__glintercept_fnptr_glPointParameterfSGIS == NULL) return NULL;
    return (void*) __glintercept_glPointParameterfSGIS;
  }
  if (strcmp(name, "glPointParameterfv") == 0) {
    if (__glintercept_fnptr_glPointParameterfv == NULL) {
      __glintercept_fnptr_glPointParameterfv = (__ctype_glPointParameterfv) eglGetProcAddr("glPointParameterfv");
    }
    if (__glintercept_fnptr_glPointParameterfv == NULL) return NULL;
    return (void*) __glintercept_glPointParameterfv;
  }
  if (strcmp(name, "glPointParameterfvARB") == 0) {
    if (__glintercept_fnptr_glPointParameterfvARB == NULL) {
      __glintercept_fnptr_glPointParameterfvARB = (__ctype_glPointParameterfvARB) eglGetProcAddr("glPointParameterfvARB");
    }
    if (__glintercept_fnptr_glPointParameterfvARB == NULL) return NULL;
    return (void*) __glintercept_glPointParameterfvARB;
  }
  if (strcmp(name, "glPointParameterfvEXT") == 0) {
    if (__glintercept_fnptr_glPointParameterfvEXT == NULL) {
      __glintercept_fnptr_glPointParameterfvEXT = (__ctype_glPointParameterfvEXT) eglGetProcAddr("glPointParameterfvEXT");
    }
    if (__glintercept_fnptr_glPointParameterfvEXT == NULL) return NULL;
    return (void*) __glintercept_glPointParameterfvEXT;
  }
  if (strcmp(name, "glPointParameterfvSGIS") == 0) {
    if (__glintercept_fnptr_glPointParameterfvSGIS == NULL) {
      __glintercept_fnptr_glPointParameterfvSGIS = (__ctype_glPointParameterfvSGIS) eglGetProcAddr("glPointParameterfvSGIS");
    }
    if (__glintercept_fnptr_glPointParameterfvSGIS == NULL) return NULL;
    return (void*) __glintercept_glPointParameterfvSGIS;
  }
  if (strcmp(name, "glPointParameteri") == 0) {
    if (__glintercept_fnptr_glPointParameteri == NULL) {
      __glintercept_fnptr_glPointParameteri = (__ctype_glPointParameteri) eglGetProcAddr("glPointParameteri");
    }
    if (__glintercept_fnptr_glPointParameteri == NULL) return NULL;
    return (void*) __glintercept_glPointParameteri;
  }
  if (strcmp(name, "glPointParameteriNV") == 0) {
    if (__glintercept_fnptr_glPointParameteriNV == NULL) {
      __glintercept_fnptr_glPointParameteriNV = (__ctype_glPointParameteriNV) eglGetProcAddr("glPointParameteriNV");
    }
    if (__glintercept_fnptr_glPointParameteriNV == NULL) return NULL;
    return (void*) __glintercept_glPointParameteriNV;
  }
  if (strcmp(name, "glPointParameteriv") == 0) {
    if (__glintercept_fnptr_glPointParameteriv == NULL) {
      __glintercept_fnptr_glPointParameteriv = (__ctype_glPointParameteriv) eglGetProcAddr("glPointParameteriv");
    }
    if (__glintercept_fnptr_glPointParameteriv == NULL) return NULL;
    return (void*) __glintercept_glPointParameteriv;
  }
  if (strcmp(name, "glPointParameterivNV") == 0) {
    if (__glintercept_fnptr_glPointParameterivNV == NULL) {
      __glintercept_fnptr_glPointParameterivNV = (__ctype_glPointParameterivNV) eglGetProcAddr("glPointParameterivNV");
    }
    if (__glintercept_fnptr_glPointParameterivNV == NULL) return NULL;
    return (void*) __glintercept_glPointParameterivNV;
  }
  if (strcmp(name, "glPointParameterx") == 0) {
    if (__glintercept_fnptr_glPointParameterx == NULL) {
      __glintercept_fnptr_glPointParameterx = (__ctype_glPointParameterx) eglGetProcAddr("glPointParameterx");
    }
    if (__glintercept_fnptr_glPointParameterx == NULL) return NULL;
    return (void*) __glintercept_glPointParameterx;
  }
  if (strcmp(name, "glPointParameterxOES") == 0) {
    if (__glintercept_fnptr_glPointParameterxOES == NULL) {
      __glintercept_fnptr_glPointParameterxOES = (__ctype_glPointParameterxOES) eglGetProcAddr("glPointParameterxOES");
    }
    if (__glintercept_fnptr_glPointParameterxOES == NULL) return NULL;
    return (void*) __glintercept_glPointParameterxOES;
  }
  if (strcmp(name, "glPointParameterxv") == 0) {
    if (__glintercept_fnptr_glPointParameterxv == NULL) {
      __glintercept_fnptr_glPointParameterxv = (__ctype_glPointParameterxv) eglGetProcAddr("glPointParameterxv");
    }
    if (__glintercept_fnptr_glPointParameterxv == NULL) return NULL;
    return (void*) __glintercept_glPointParameterxv;
  }
  if (strcmp(name, "glPointParameterxvOES") == 0) {
    if (__glintercept_fnptr_glPointParameterxvOES == NULL) {
      __glintercept_fnptr_glPointParameterxvOES = (__ctype_glPointParameterxvOES) eglGetProcAddr("glPointParameterxvOES");
    }
    if (__glintercept_fnptr_glPointParameterxvOES == NULL) return NULL;
    return (void*) __glintercept_glPointParameterxvOES;
  }
  if (strcmp(name, "glPointSize") == 0) {
    if (__glintercept_fnptr_glPointSize == NULL) {
      __glintercept_fnptr_glPointSize = (__ctype_glPointSize) eglGetProcAddr("glPointSize");
    }
    if (__glintercept_fnptr_glPointSize == NULL) return NULL;
    return (void*) __glintercept_glPointSize;
  }
  if (strcmp(name, "glPointSizePointerOES") == 0) {
    if (__glintercept_fnptr_glPointSizePointerOES == NULL) {
      __glintercept_fnptr_glPointSizePointerOES = (__ctype_glPointSizePointerOES) eglGetProcAddr("glPointSizePointerOES");
    }
    if (__glintercept_fnptr_glPointSizePointerOES == NULL) return NULL;
    return (void*) __glintercept_glPointSizePointerOES;
  }
  if (strcmp(name, "glPointSizex") == 0) {
    if (__glintercept_fnptr_glPointSizex == NULL) {
      __glintercept_fnptr_glPointSizex = (__ctype_glPointSizex) eglGetProcAddr("glPointSizex");
    }
    if (__glintercept_fnptr_glPointSizex == NULL) return NULL;
    return (void*) __glintercept_glPointSizex;
  }
  if (strcmp(name, "glPointSizexOES") == 0) {
    if (__glintercept_fnptr_glPointSizexOES == NULL) {
      __glintercept_fnptr_glPointSizexOES = (__ctype_glPointSizexOES) eglGetProcAddr("glPointSizexOES");
    }
    if (__glintercept_fnptr_glPointSizexOES == NULL) return NULL;
    return (void*) __glintercept_glPointSizexOES;
  }
  if (strcmp(name, "glPollAsyncSGIX") == 0) {
    if (__glintercept_fnptr_glPollAsyncSGIX == NULL) {
      __glintercept_fnptr_glPollAsyncSGIX = (__ctype_glPollAsyncSGIX) eglGetProcAddr("glPollAsyncSGIX");
    }
    if (__glintercept_fnptr_glPollAsyncSGIX == NULL) return NULL;
    return (void*) __glintercept_glPollAsyncSGIX;
  }
  if (strcmp(name, "glPollInstrumentsSGIX") == 0) {
    if (__glintercept_fnptr_glPollInstrumentsSGIX == NULL) {
      __glintercept_fnptr_glPollInstrumentsSGIX = (__ctype_glPollInstrumentsSGIX) eglGetProcAddr("glPollInstrumentsSGIX");
    }
    if (__glintercept_fnptr_glPollInstrumentsSGIX == NULL) return NULL;
    return (void*) __glintercept_glPollInstrumentsSGIX;
  }
  if (strcmp(name, "glPolygonMode") == 0) {
    if (__glintercept_fnptr_glPolygonMode == NULL) {
      __glintercept_fnptr_glPolygonMode = (__ctype_glPolygonMode) eglGetProcAddr("glPolygonMode");
    }
    if (__glintercept_fnptr_glPolygonMode == NULL) return NULL;
    return (void*) __glintercept_glPolygonMode;
  }
  if (strcmp(name, "glPolygonModeNV") == 0) {
    if (__glintercept_fnptr_glPolygonModeNV == NULL) {
      __glintercept_fnptr_glPolygonModeNV = (__ctype_glPolygonModeNV) eglGetProcAddr("glPolygonModeNV");
    }
    if (__glintercept_fnptr_glPolygonModeNV == NULL) return NULL;
    return (void*) __glintercept_glPolygonModeNV;
  }
  if (strcmp(name, "glPolygonOffset") == 0) {
    if (__glintercept_fnptr_glPolygonOffset == NULL) {
      __glintercept_fnptr_glPolygonOffset = (__ctype_glPolygonOffset) eglGetProcAddr("glPolygonOffset");
    }
    if (__glintercept_fnptr_glPolygonOffset == NULL) return NULL;
    return (void*) __glintercept_glPolygonOffset;
  }
  if (strcmp(name, "glPolygonOffsetClamp") == 0) {
    if (__glintercept_fnptr_glPolygonOffsetClamp == NULL) {
      __glintercept_fnptr_glPolygonOffsetClamp = (__ctype_glPolygonOffsetClamp) eglGetProcAddr("glPolygonOffsetClamp");
    }
    if (__glintercept_fnptr_glPolygonOffsetClamp == NULL) return NULL;
    return (void*) __glintercept_glPolygonOffsetClamp;
  }
  if (strcmp(name, "glPolygonOffsetClampEXT") == 0) {
    if (__glintercept_fnptr_glPolygonOffsetClampEXT == NULL) {
      __glintercept_fnptr_glPolygonOffsetClampEXT = (__ctype_glPolygonOffsetClampEXT) eglGetProcAddr("glPolygonOffsetClampEXT");
    }
    if (__glintercept_fnptr_glPolygonOffsetClampEXT == NULL) return NULL;
    return (void*) __glintercept_glPolygonOffsetClampEXT;
  }
  if (strcmp(name, "glPolygonOffsetEXT") == 0) {
    if (__glintercept_fnptr_glPolygonOffsetEXT == NULL) {
      __glintercept_fnptr_glPolygonOffsetEXT = (__ctype_glPolygonOffsetEXT) eglGetProcAddr("glPolygonOffsetEXT");
    }
    if (__glintercept_fnptr_glPolygonOffsetEXT == NULL) return NULL;
    return (void*) __glintercept_glPolygonOffsetEXT;
  }
  if (strcmp(name, "glPolygonOffsetx") == 0) {
    if (__glintercept_fnptr_glPolygonOffsetx == NULL) {
      __glintercept_fnptr_glPolygonOffsetx = (__ctype_glPolygonOffsetx) eglGetProcAddr("glPolygonOffsetx");
    }
    if (__glintercept_fnptr_glPolygonOffsetx == NULL) return NULL;
    return (void*) __glintercept_glPolygonOffsetx;
  }
  if (strcmp(name, "glPolygonOffsetxOES") == 0) {
    if (__glintercept_fnptr_glPolygonOffsetxOES == NULL) {
      __glintercept_fnptr_glPolygonOffsetxOES = (__ctype_glPolygonOffsetxOES) eglGetProcAddr("glPolygonOffsetxOES");
    }
    if (__glintercept_fnptr_glPolygonOffsetxOES == NULL) return NULL;
    return (void*) __glintercept_glPolygonOffsetxOES;
  }
  if (strcmp(name, "glPolygonStipple") == 0) {
    if (__glintercept_fnptr_glPolygonStipple == NULL) {
      __glintercept_fnptr_glPolygonStipple = (__ctype_glPolygonStipple) eglGetProcAddr("glPolygonStipple");
    }
    if (__glintercept_fnptr_glPolygonStipple == NULL) return NULL;
    return (void*) __glintercept_glPolygonStipple;
  }
  if (strcmp(name, "glPopAttrib") == 0) {
    if (__glintercept_fnptr_glPopAttrib == NULL) {
      __glintercept_fnptr_glPopAttrib = (__ctype_glPopAttrib) eglGetProcAddr("glPopAttrib");
    }
    if (__glintercept_fnptr_glPopAttrib == NULL) return NULL;
    return (void*) __glintercept_glPopAttrib;
  }
  if (strcmp(name, "glPopClientAttrib") == 0) {
    if (__glintercept_fnptr_glPopClientAttrib == NULL) {
      __glintercept_fnptr_glPopClientAttrib = (__ctype_glPopClientAttrib) eglGetProcAddr("glPopClientAttrib");
    }
    if (__glintercept_fnptr_glPopClientAttrib == NULL) return NULL;
    return (void*) __glintercept_glPopClientAttrib;
  }
  if (strcmp(name, "glPopDebugGroup") == 0) {
    if (__glintercept_fnptr_glPopDebugGroup == NULL) {
      __glintercept_fnptr_glPopDebugGroup = (__ctype_glPopDebugGroup) eglGetProcAddr("glPopDebugGroup");
    }
    if (__glintercept_fnptr_glPopDebugGroup == NULL) return NULL;
    return (void*) __glintercept_glPopDebugGroup;
  }
  if (strcmp(name, "glPopDebugGroupKHR") == 0) {
    if (__glintercept_fnptr_glPopDebugGroupKHR == NULL) {
      __glintercept_fnptr_glPopDebugGroupKHR = (__ctype_glPopDebugGroupKHR) eglGetProcAddr("glPopDebugGroupKHR");
    }
    if (__glintercept_fnptr_glPopDebugGroupKHR == NULL) return NULL;
    return (void*) __glintercept_glPopDebugGroupKHR;
  }
  if (strcmp(name, "glPopGroupMarkerEXT") == 0) {
    if (__glintercept_fnptr_glPopGroupMarkerEXT == NULL) {
      __glintercept_fnptr_glPopGroupMarkerEXT = (__ctype_glPopGroupMarkerEXT) eglGetProcAddr("glPopGroupMarkerEXT");
    }
    if (__glintercept_fnptr_glPopGroupMarkerEXT == NULL) return NULL;
    return (void*) __glintercept_glPopGroupMarkerEXT;
  }
  if (strcmp(name, "glPopMatrix") == 0) {
    if (__glintercept_fnptr_glPopMatrix == NULL) {
      __glintercept_fnptr_glPopMatrix = (__ctype_glPopMatrix) eglGetProcAddr("glPopMatrix");
    }
    if (__glintercept_fnptr_glPopMatrix == NULL) return NULL;
    return (void*) __glintercept_glPopMatrix;
  }
  if (strcmp(name, "glPopName") == 0) {
    if (__glintercept_fnptr_glPopName == NULL) {
      __glintercept_fnptr_glPopName = (__ctype_glPopName) eglGetProcAddr("glPopName");
    }
    if (__glintercept_fnptr_glPopName == NULL) return NULL;
    return (void*) __glintercept_glPopName;
  }
  if (strcmp(name, "glPresentFrameDualFillNV") == 0) {
    if (__glintercept_fnptr_glPresentFrameDualFillNV == NULL) {
      __glintercept_fnptr_glPresentFrameDualFillNV = (__ctype_glPresentFrameDualFillNV) eglGetProcAddr("glPresentFrameDualFillNV");
    }
    if (__glintercept_fnptr_glPresentFrameDualFillNV == NULL) return NULL;
    return (void*) __glintercept_glPresentFrameDualFillNV;
  }
  if (strcmp(name, "glPresentFrameKeyedNV") == 0) {
    if (__glintercept_fnptr_glPresentFrameKeyedNV == NULL) {
      __glintercept_fnptr_glPresentFrameKeyedNV = (__ctype_glPresentFrameKeyedNV) eglGetProcAddr("glPresentFrameKeyedNV");
    }
    if (__glintercept_fnptr_glPresentFrameKeyedNV == NULL) return NULL;
    return (void*) __glintercept_glPresentFrameKeyedNV;
  }
  if (strcmp(name, "glPrimitiveBoundingBox") == 0) {
    if (__glintercept_fnptr_glPrimitiveBoundingBox == NULL) {
      __glintercept_fnptr_glPrimitiveBoundingBox = (__ctype_glPrimitiveBoundingBox) eglGetProcAddr("glPrimitiveBoundingBox");
    }
    if (__glintercept_fnptr_glPrimitiveBoundingBox == NULL) return NULL;
    return (void*) __glintercept_glPrimitiveBoundingBox;
  }
  if (strcmp(name, "glPrimitiveBoundingBoxARB") == 0) {
    if (__glintercept_fnptr_glPrimitiveBoundingBoxARB == NULL) {
      __glintercept_fnptr_glPrimitiveBoundingBoxARB = (__ctype_glPrimitiveBoundingBoxARB) eglGetProcAddr("glPrimitiveBoundingBoxARB");
    }
    if (__glintercept_fnptr_glPrimitiveBoundingBoxARB == NULL) return NULL;
    return (void*) __glintercept_glPrimitiveBoundingBoxARB;
  }
  if (strcmp(name, "glPrimitiveBoundingBoxEXT") == 0) {
    if (__glintercept_fnptr_glPrimitiveBoundingBoxEXT == NULL) {
      __glintercept_fnptr_glPrimitiveBoundingBoxEXT = (__ctype_glPrimitiveBoundingBoxEXT) eglGetProcAddr("glPrimitiveBoundingBoxEXT");
    }
    if (__glintercept_fnptr_glPrimitiveBoundingBoxEXT == NULL) return NULL;
    return (void*) __glintercept_glPrimitiveBoundingBoxEXT;
  }
  if (strcmp(name, "glPrimitiveBoundingBoxOES") == 0) {
    if (__glintercept_fnptr_glPrimitiveBoundingBoxOES == NULL) {
      __glintercept_fnptr_glPrimitiveBoundingBoxOES = (__ctype_glPrimitiveBoundingBoxOES) eglGetProcAddr("glPrimitiveBoundingBoxOES");
    }
    if (__glintercept_fnptr_glPrimitiveBoundingBoxOES == NULL) return NULL;
    return (void*) __glintercept_glPrimitiveBoundingBoxOES;
  }
  if (strcmp(name, "glPrimitiveRestartIndex") == 0) {
    if (__glintercept_fnptr_glPrimitiveRestartIndex == NULL) {
      __glintercept_fnptr_glPrimitiveRestartIndex = (__ctype_glPrimitiveRestartIndex) eglGetProcAddr("glPrimitiveRestartIndex");
    }
    if (__glintercept_fnptr_glPrimitiveRestartIndex == NULL) return NULL;
    return (void*) __glintercept_glPrimitiveRestartIndex;
  }
  if (strcmp(name, "glPrimitiveRestartIndexNV") == 0) {
    if (__glintercept_fnptr_glPrimitiveRestartIndexNV == NULL) {
      __glintercept_fnptr_glPrimitiveRestartIndexNV = (__ctype_glPrimitiveRestartIndexNV) eglGetProcAddr("glPrimitiveRestartIndexNV");
    }
    if (__glintercept_fnptr_glPrimitiveRestartIndexNV == NULL) return NULL;
    return (void*) __glintercept_glPrimitiveRestartIndexNV;
  }
  if (strcmp(name, "glPrimitiveRestartNV") == 0) {
    if (__glintercept_fnptr_glPrimitiveRestartNV == NULL) {
      __glintercept_fnptr_glPrimitiveRestartNV = (__ctype_glPrimitiveRestartNV) eglGetProcAddr("glPrimitiveRestartNV");
    }
    if (__glintercept_fnptr_glPrimitiveRestartNV == NULL) return NULL;
    return (void*) __glintercept_glPrimitiveRestartNV;
  }
  if (strcmp(name, "glPrioritizeTextures") == 0) {
    if (__glintercept_fnptr_glPrioritizeTextures == NULL) {
      __glintercept_fnptr_glPrioritizeTextures = (__ctype_glPrioritizeTextures) eglGetProcAddr("glPrioritizeTextures");
    }
    if (__glintercept_fnptr_glPrioritizeTextures == NULL) return NULL;
    return (void*) __glintercept_glPrioritizeTextures;
  }
  if (strcmp(name, "glPrioritizeTexturesEXT") == 0) {
    if (__glintercept_fnptr_glPrioritizeTexturesEXT == NULL) {
      __glintercept_fnptr_glPrioritizeTexturesEXT = (__ctype_glPrioritizeTexturesEXT) eglGetProcAddr("glPrioritizeTexturesEXT");
    }
    if (__glintercept_fnptr_glPrioritizeTexturesEXT == NULL) return NULL;
    return (void*) __glintercept_glPrioritizeTexturesEXT;
  }
  if (strcmp(name, "glPrioritizeTexturesxOES") == 0) {
    if (__glintercept_fnptr_glPrioritizeTexturesxOES == NULL) {
      __glintercept_fnptr_glPrioritizeTexturesxOES = (__ctype_glPrioritizeTexturesxOES) eglGetProcAddr("glPrioritizeTexturesxOES");
    }
    if (__glintercept_fnptr_glPrioritizeTexturesxOES == NULL) return NULL;
    return (void*) __glintercept_glPrioritizeTexturesxOES;
  }
  if (strcmp(name, "glProgramBinary") == 0) {
    if (__glintercept_fnptr_glProgramBinary == NULL) {
      __glintercept_fnptr_glProgramBinary = (__ctype_glProgramBinary) eglGetProcAddr("glProgramBinary");
    }
    if (__glintercept_fnptr_glProgramBinary == NULL) return NULL;
    return (void*) __glintercept_glProgramBinary;
  }
  if (strcmp(name, "glProgramBinaryOES") == 0) {
    if (__glintercept_fnptr_glProgramBinaryOES == NULL) {
      __glintercept_fnptr_glProgramBinaryOES = (__ctype_glProgramBinaryOES) eglGetProcAddr("glProgramBinaryOES");
    }
    if (__glintercept_fnptr_glProgramBinaryOES == NULL) return NULL;
    return (void*) __glintercept_glProgramBinaryOES;
  }
  if (strcmp(name, "glProgramBufferParametersIivNV") == 0) {
    if (__glintercept_fnptr_glProgramBufferParametersIivNV == NULL) {
      __glintercept_fnptr_glProgramBufferParametersIivNV = (__ctype_glProgramBufferParametersIivNV) eglGetProcAddr("glProgramBufferParametersIivNV");
    }
    if (__glintercept_fnptr_glProgramBufferParametersIivNV == NULL) return NULL;
    return (void*) __glintercept_glProgramBufferParametersIivNV;
  }
  if (strcmp(name, "glProgramBufferParametersIuivNV") == 0) {
    if (__glintercept_fnptr_glProgramBufferParametersIuivNV == NULL) {
      __glintercept_fnptr_glProgramBufferParametersIuivNV = (__ctype_glProgramBufferParametersIuivNV) eglGetProcAddr("glProgramBufferParametersIuivNV");
    }
    if (__glintercept_fnptr_glProgramBufferParametersIuivNV == NULL) return NULL;
    return (void*) __glintercept_glProgramBufferParametersIuivNV;
  }
  if (strcmp(name, "glProgramBufferParametersfvNV") == 0) {
    if (__glintercept_fnptr_glProgramBufferParametersfvNV == NULL) {
      __glintercept_fnptr_glProgramBufferParametersfvNV = (__ctype_glProgramBufferParametersfvNV) eglGetProcAddr("glProgramBufferParametersfvNV");
    }
    if (__glintercept_fnptr_glProgramBufferParametersfvNV == NULL) return NULL;
    return (void*) __glintercept_glProgramBufferParametersfvNV;
  }
  if (strcmp(name, "glProgramEnvParameter4dARB") == 0) {
    if (__glintercept_fnptr_glProgramEnvParameter4dARB == NULL) {
      __glintercept_fnptr_glProgramEnvParameter4dARB = (__ctype_glProgramEnvParameter4dARB) eglGetProcAddr("glProgramEnvParameter4dARB");
    }
    if (__glintercept_fnptr_glProgramEnvParameter4dARB == NULL) return NULL;
    return (void*) __glintercept_glProgramEnvParameter4dARB;
  }
  if (strcmp(name, "glProgramEnvParameter4dvARB") == 0) {
    if (__glintercept_fnptr_glProgramEnvParameter4dvARB == NULL) {
      __glintercept_fnptr_glProgramEnvParameter4dvARB = (__ctype_glProgramEnvParameter4dvARB) eglGetProcAddr("glProgramEnvParameter4dvARB");
    }
    if (__glintercept_fnptr_glProgramEnvParameter4dvARB == NULL) return NULL;
    return (void*) __glintercept_glProgramEnvParameter4dvARB;
  }
  if (strcmp(name, "glProgramEnvParameter4fARB") == 0) {
    if (__glintercept_fnptr_glProgramEnvParameter4fARB == NULL) {
      __glintercept_fnptr_glProgramEnvParameter4fARB = (__ctype_glProgramEnvParameter4fARB) eglGetProcAddr("glProgramEnvParameter4fARB");
    }
    if (__glintercept_fnptr_glProgramEnvParameter4fARB == NULL) return NULL;
    return (void*) __glintercept_glProgramEnvParameter4fARB;
  }
  if (strcmp(name, "glProgramEnvParameter4fvARB") == 0) {
    if (__glintercept_fnptr_glProgramEnvParameter4fvARB == NULL) {
      __glintercept_fnptr_glProgramEnvParameter4fvARB = (__ctype_glProgramEnvParameter4fvARB) eglGetProcAddr("glProgramEnvParameter4fvARB");
    }
    if (__glintercept_fnptr_glProgramEnvParameter4fvARB == NULL) return NULL;
    return (void*) __glintercept_glProgramEnvParameter4fvARB;
  }
  if (strcmp(name, "glProgramEnvParameterI4iNV") == 0) {
    if (__glintercept_fnptr_glProgramEnvParameterI4iNV == NULL) {
      __glintercept_fnptr_glProgramEnvParameterI4iNV = (__ctype_glProgramEnvParameterI4iNV) eglGetProcAddr("glProgramEnvParameterI4iNV");
    }
    if (__glintercept_fnptr_glProgramEnvParameterI4iNV == NULL) return NULL;
    return (void*) __glintercept_glProgramEnvParameterI4iNV;
  }
  if (strcmp(name, "glProgramEnvParameterI4ivNV") == 0) {
    if (__glintercept_fnptr_glProgramEnvParameterI4ivNV == NULL) {
      __glintercept_fnptr_glProgramEnvParameterI4ivNV = (__ctype_glProgramEnvParameterI4ivNV) eglGetProcAddr("glProgramEnvParameterI4ivNV");
    }
    if (__glintercept_fnptr_glProgramEnvParameterI4ivNV == NULL) return NULL;
    return (void*) __glintercept_glProgramEnvParameterI4ivNV;
  }
  if (strcmp(name, "glProgramEnvParameterI4uiNV") == 0) {
    if (__glintercept_fnptr_glProgramEnvParameterI4uiNV == NULL) {
      __glintercept_fnptr_glProgramEnvParameterI4uiNV = (__ctype_glProgramEnvParameterI4uiNV) eglGetProcAddr("glProgramEnvParameterI4uiNV");
    }
    if (__glintercept_fnptr_glProgramEnvParameterI4uiNV == NULL) return NULL;
    return (void*) __glintercept_glProgramEnvParameterI4uiNV;
  }
  if (strcmp(name, "glProgramEnvParameterI4uivNV") == 0) {
    if (__glintercept_fnptr_glProgramEnvParameterI4uivNV == NULL) {
      __glintercept_fnptr_glProgramEnvParameterI4uivNV = (__ctype_glProgramEnvParameterI4uivNV) eglGetProcAddr("glProgramEnvParameterI4uivNV");
    }
    if (__glintercept_fnptr_glProgramEnvParameterI4uivNV == NULL) return NULL;
    return (void*) __glintercept_glProgramEnvParameterI4uivNV;
  }
  if (strcmp(name, "glProgramEnvParameters4fvEXT") == 0) {
    if (__glintercept_fnptr_glProgramEnvParameters4fvEXT == NULL) {
      __glintercept_fnptr_glProgramEnvParameters4fvEXT = (__ctype_glProgramEnvParameters4fvEXT) eglGetProcAddr("glProgramEnvParameters4fvEXT");
    }
    if (__glintercept_fnptr_glProgramEnvParameters4fvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramEnvParameters4fvEXT;
  }
  if (strcmp(name, "glProgramEnvParametersI4ivNV") == 0) {
    if (__glintercept_fnptr_glProgramEnvParametersI4ivNV == NULL) {
      __glintercept_fnptr_glProgramEnvParametersI4ivNV = (__ctype_glProgramEnvParametersI4ivNV) eglGetProcAddr("glProgramEnvParametersI4ivNV");
    }
    if (__glintercept_fnptr_glProgramEnvParametersI4ivNV == NULL) return NULL;
    return (void*) __glintercept_glProgramEnvParametersI4ivNV;
  }
  if (strcmp(name, "glProgramEnvParametersI4uivNV") == 0) {
    if (__glintercept_fnptr_glProgramEnvParametersI4uivNV == NULL) {
      __glintercept_fnptr_glProgramEnvParametersI4uivNV = (__ctype_glProgramEnvParametersI4uivNV) eglGetProcAddr("glProgramEnvParametersI4uivNV");
    }
    if (__glintercept_fnptr_glProgramEnvParametersI4uivNV == NULL) return NULL;
    return (void*) __glintercept_glProgramEnvParametersI4uivNV;
  }
  if (strcmp(name, "glProgramLocalParameter4dARB") == 0) {
    if (__glintercept_fnptr_glProgramLocalParameter4dARB == NULL) {
      __glintercept_fnptr_glProgramLocalParameter4dARB = (__ctype_glProgramLocalParameter4dARB) eglGetProcAddr("glProgramLocalParameter4dARB");
    }
    if (__glintercept_fnptr_glProgramLocalParameter4dARB == NULL) return NULL;
    return (void*) __glintercept_glProgramLocalParameter4dARB;
  }
  if (strcmp(name, "glProgramLocalParameter4dvARB") == 0) {
    if (__glintercept_fnptr_glProgramLocalParameter4dvARB == NULL) {
      __glintercept_fnptr_glProgramLocalParameter4dvARB = (__ctype_glProgramLocalParameter4dvARB) eglGetProcAddr("glProgramLocalParameter4dvARB");
    }
    if (__glintercept_fnptr_glProgramLocalParameter4dvARB == NULL) return NULL;
    return (void*) __glintercept_glProgramLocalParameter4dvARB;
  }
  if (strcmp(name, "glProgramLocalParameter4fARB") == 0) {
    if (__glintercept_fnptr_glProgramLocalParameter4fARB == NULL) {
      __glintercept_fnptr_glProgramLocalParameter4fARB = (__ctype_glProgramLocalParameter4fARB) eglGetProcAddr("glProgramLocalParameter4fARB");
    }
    if (__glintercept_fnptr_glProgramLocalParameter4fARB == NULL) return NULL;
    return (void*) __glintercept_glProgramLocalParameter4fARB;
  }
  if (strcmp(name, "glProgramLocalParameter4fvARB") == 0) {
    if (__glintercept_fnptr_glProgramLocalParameter4fvARB == NULL) {
      __glintercept_fnptr_glProgramLocalParameter4fvARB = (__ctype_glProgramLocalParameter4fvARB) eglGetProcAddr("glProgramLocalParameter4fvARB");
    }
    if (__glintercept_fnptr_glProgramLocalParameter4fvARB == NULL) return NULL;
    return (void*) __glintercept_glProgramLocalParameter4fvARB;
  }
  if (strcmp(name, "glProgramLocalParameterI4iNV") == 0) {
    if (__glintercept_fnptr_glProgramLocalParameterI4iNV == NULL) {
      __glintercept_fnptr_glProgramLocalParameterI4iNV = (__ctype_glProgramLocalParameterI4iNV) eglGetProcAddr("glProgramLocalParameterI4iNV");
    }
    if (__glintercept_fnptr_glProgramLocalParameterI4iNV == NULL) return NULL;
    return (void*) __glintercept_glProgramLocalParameterI4iNV;
  }
  if (strcmp(name, "glProgramLocalParameterI4ivNV") == 0) {
    if (__glintercept_fnptr_glProgramLocalParameterI4ivNV == NULL) {
      __glintercept_fnptr_glProgramLocalParameterI4ivNV = (__ctype_glProgramLocalParameterI4ivNV) eglGetProcAddr("glProgramLocalParameterI4ivNV");
    }
    if (__glintercept_fnptr_glProgramLocalParameterI4ivNV == NULL) return NULL;
    return (void*) __glintercept_glProgramLocalParameterI4ivNV;
  }
  if (strcmp(name, "glProgramLocalParameterI4uiNV") == 0) {
    if (__glintercept_fnptr_glProgramLocalParameterI4uiNV == NULL) {
      __glintercept_fnptr_glProgramLocalParameterI4uiNV = (__ctype_glProgramLocalParameterI4uiNV) eglGetProcAddr("glProgramLocalParameterI4uiNV");
    }
    if (__glintercept_fnptr_glProgramLocalParameterI4uiNV == NULL) return NULL;
    return (void*) __glintercept_glProgramLocalParameterI4uiNV;
  }
  if (strcmp(name, "glProgramLocalParameterI4uivNV") == 0) {
    if (__glintercept_fnptr_glProgramLocalParameterI4uivNV == NULL) {
      __glintercept_fnptr_glProgramLocalParameterI4uivNV = (__ctype_glProgramLocalParameterI4uivNV) eglGetProcAddr("glProgramLocalParameterI4uivNV");
    }
    if (__glintercept_fnptr_glProgramLocalParameterI4uivNV == NULL) return NULL;
    return (void*) __glintercept_glProgramLocalParameterI4uivNV;
  }
  if (strcmp(name, "glProgramLocalParameters4fvEXT") == 0) {
    if (__glintercept_fnptr_glProgramLocalParameters4fvEXT == NULL) {
      __glintercept_fnptr_glProgramLocalParameters4fvEXT = (__ctype_glProgramLocalParameters4fvEXT) eglGetProcAddr("glProgramLocalParameters4fvEXT");
    }
    if (__glintercept_fnptr_glProgramLocalParameters4fvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramLocalParameters4fvEXT;
  }
  if (strcmp(name, "glProgramLocalParametersI4ivNV") == 0) {
    if (__glintercept_fnptr_glProgramLocalParametersI4ivNV == NULL) {
      __glintercept_fnptr_glProgramLocalParametersI4ivNV = (__ctype_glProgramLocalParametersI4ivNV) eglGetProcAddr("glProgramLocalParametersI4ivNV");
    }
    if (__glintercept_fnptr_glProgramLocalParametersI4ivNV == NULL) return NULL;
    return (void*) __glintercept_glProgramLocalParametersI4ivNV;
  }
  if (strcmp(name, "glProgramLocalParametersI4uivNV") == 0) {
    if (__glintercept_fnptr_glProgramLocalParametersI4uivNV == NULL) {
      __glintercept_fnptr_glProgramLocalParametersI4uivNV = (__ctype_glProgramLocalParametersI4uivNV) eglGetProcAddr("glProgramLocalParametersI4uivNV");
    }
    if (__glintercept_fnptr_glProgramLocalParametersI4uivNV == NULL) return NULL;
    return (void*) __glintercept_glProgramLocalParametersI4uivNV;
  }
  if (strcmp(name, "glProgramNamedParameter4dNV") == 0) {
    if (__glintercept_fnptr_glProgramNamedParameter4dNV == NULL) {
      __glintercept_fnptr_glProgramNamedParameter4dNV = (__ctype_glProgramNamedParameter4dNV) eglGetProcAddr("glProgramNamedParameter4dNV");
    }
    if (__glintercept_fnptr_glProgramNamedParameter4dNV == NULL) return NULL;
    return (void*) __glintercept_glProgramNamedParameter4dNV;
  }
  if (strcmp(name, "glProgramNamedParameter4dvNV") == 0) {
    if (__glintercept_fnptr_glProgramNamedParameter4dvNV == NULL) {
      __glintercept_fnptr_glProgramNamedParameter4dvNV = (__ctype_glProgramNamedParameter4dvNV) eglGetProcAddr("glProgramNamedParameter4dvNV");
    }
    if (__glintercept_fnptr_glProgramNamedParameter4dvNV == NULL) return NULL;
    return (void*) __glintercept_glProgramNamedParameter4dvNV;
  }
  if (strcmp(name, "glProgramNamedParameter4fNV") == 0) {
    if (__glintercept_fnptr_glProgramNamedParameter4fNV == NULL) {
      __glintercept_fnptr_glProgramNamedParameter4fNV = (__ctype_glProgramNamedParameter4fNV) eglGetProcAddr("glProgramNamedParameter4fNV");
    }
    if (__glintercept_fnptr_glProgramNamedParameter4fNV == NULL) return NULL;
    return (void*) __glintercept_glProgramNamedParameter4fNV;
  }
  if (strcmp(name, "glProgramNamedParameter4fvNV") == 0) {
    if (__glintercept_fnptr_glProgramNamedParameter4fvNV == NULL) {
      __glintercept_fnptr_glProgramNamedParameter4fvNV = (__ctype_glProgramNamedParameter4fvNV) eglGetProcAddr("glProgramNamedParameter4fvNV");
    }
    if (__glintercept_fnptr_glProgramNamedParameter4fvNV == NULL) return NULL;
    return (void*) __glintercept_glProgramNamedParameter4fvNV;
  }
  if (strcmp(name, "glProgramParameter4dNV") == 0) {
    if (__glintercept_fnptr_glProgramParameter4dNV == NULL) {
      __glintercept_fnptr_glProgramParameter4dNV = (__ctype_glProgramParameter4dNV) eglGetProcAddr("glProgramParameter4dNV");
    }
    if (__glintercept_fnptr_glProgramParameter4dNV == NULL) return NULL;
    return (void*) __glintercept_glProgramParameter4dNV;
  }
  if (strcmp(name, "glProgramParameter4dvNV") == 0) {
    if (__glintercept_fnptr_glProgramParameter4dvNV == NULL) {
      __glintercept_fnptr_glProgramParameter4dvNV = (__ctype_glProgramParameter4dvNV) eglGetProcAddr("glProgramParameter4dvNV");
    }
    if (__glintercept_fnptr_glProgramParameter4dvNV == NULL) return NULL;
    return (void*) __glintercept_glProgramParameter4dvNV;
  }
  if (strcmp(name, "glProgramParameter4fNV") == 0) {
    if (__glintercept_fnptr_glProgramParameter4fNV == NULL) {
      __glintercept_fnptr_glProgramParameter4fNV = (__ctype_glProgramParameter4fNV) eglGetProcAddr("glProgramParameter4fNV");
    }
    if (__glintercept_fnptr_glProgramParameter4fNV == NULL) return NULL;
    return (void*) __glintercept_glProgramParameter4fNV;
  }
  if (strcmp(name, "glProgramParameter4fvNV") == 0) {
    if (__glintercept_fnptr_glProgramParameter4fvNV == NULL) {
      __glintercept_fnptr_glProgramParameter4fvNV = (__ctype_glProgramParameter4fvNV) eglGetProcAddr("glProgramParameter4fvNV");
    }
    if (__glintercept_fnptr_glProgramParameter4fvNV == NULL) return NULL;
    return (void*) __glintercept_glProgramParameter4fvNV;
  }
  if (strcmp(name, "glProgramParameteri") == 0) {
    if (__glintercept_fnptr_glProgramParameteri == NULL) {
      __glintercept_fnptr_glProgramParameteri = (__ctype_glProgramParameteri) eglGetProcAddr("glProgramParameteri");
    }
    if (__glintercept_fnptr_glProgramParameteri == NULL) return NULL;
    return (void*) __glintercept_glProgramParameteri;
  }
  if (strcmp(name, "glProgramParameteriARB") == 0) {
    if (__glintercept_fnptr_glProgramParameteriARB == NULL) {
      __glintercept_fnptr_glProgramParameteriARB = (__ctype_glProgramParameteriARB) eglGetProcAddr("glProgramParameteriARB");
    }
    if (__glintercept_fnptr_glProgramParameteriARB == NULL) return NULL;
    return (void*) __glintercept_glProgramParameteriARB;
  }
  if (strcmp(name, "glProgramParameteriEXT") == 0) {
    if (__glintercept_fnptr_glProgramParameteriEXT == NULL) {
      __glintercept_fnptr_glProgramParameteriEXT = (__ctype_glProgramParameteriEXT) eglGetProcAddr("glProgramParameteriEXT");
    }
    if (__glintercept_fnptr_glProgramParameteriEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramParameteriEXT;
  }
  if (strcmp(name, "glProgramParameters4dvNV") == 0) {
    if (__glintercept_fnptr_glProgramParameters4dvNV == NULL) {
      __glintercept_fnptr_glProgramParameters4dvNV = (__ctype_glProgramParameters4dvNV) eglGetProcAddr("glProgramParameters4dvNV");
    }
    if (__glintercept_fnptr_glProgramParameters4dvNV == NULL) return NULL;
    return (void*) __glintercept_glProgramParameters4dvNV;
  }
  if (strcmp(name, "glProgramParameters4fvNV") == 0) {
    if (__glintercept_fnptr_glProgramParameters4fvNV == NULL) {
      __glintercept_fnptr_glProgramParameters4fvNV = (__ctype_glProgramParameters4fvNV) eglGetProcAddr("glProgramParameters4fvNV");
    }
    if (__glintercept_fnptr_glProgramParameters4fvNV == NULL) return NULL;
    return (void*) __glintercept_glProgramParameters4fvNV;
  }
  if (strcmp(name, "glProgramPathFragmentInputGenNV") == 0) {
    if (__glintercept_fnptr_glProgramPathFragmentInputGenNV == NULL) {
      __glintercept_fnptr_glProgramPathFragmentInputGenNV = (__ctype_glProgramPathFragmentInputGenNV) eglGetProcAddr("glProgramPathFragmentInputGenNV");
    }
    if (__glintercept_fnptr_glProgramPathFragmentInputGenNV == NULL) return NULL;
    return (void*) __glintercept_glProgramPathFragmentInputGenNV;
  }
  if (strcmp(name, "glProgramStringARB") == 0) {
    if (__glintercept_fnptr_glProgramStringARB == NULL) {
      __glintercept_fnptr_glProgramStringARB = (__ctype_glProgramStringARB) eglGetProcAddr("glProgramStringARB");
    }
    if (__glintercept_fnptr_glProgramStringARB == NULL) return NULL;
    return (void*) __glintercept_glProgramStringARB;
  }
  if (strcmp(name, "glProgramSubroutineParametersuivNV") == 0) {
    if (__glintercept_fnptr_glProgramSubroutineParametersuivNV == NULL) {
      __glintercept_fnptr_glProgramSubroutineParametersuivNV = (__ctype_glProgramSubroutineParametersuivNV) eglGetProcAddr("glProgramSubroutineParametersuivNV");
    }
    if (__glintercept_fnptr_glProgramSubroutineParametersuivNV == NULL) return NULL;
    return (void*) __glintercept_glProgramSubroutineParametersuivNV;
  }
  if (strcmp(name, "glProgramUniform1d") == 0) {
    if (__glintercept_fnptr_glProgramUniform1d == NULL) {
      __glintercept_fnptr_glProgramUniform1d = (__ctype_glProgramUniform1d) eglGetProcAddr("glProgramUniform1d");
    }
    if (__glintercept_fnptr_glProgramUniform1d == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1d;
  }
  if (strcmp(name, "glProgramUniform1dEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform1dEXT == NULL) {
      __glintercept_fnptr_glProgramUniform1dEXT = (__ctype_glProgramUniform1dEXT) eglGetProcAddr("glProgramUniform1dEXT");
    }
    if (__glintercept_fnptr_glProgramUniform1dEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1dEXT;
  }
  if (strcmp(name, "glProgramUniform1dv") == 0) {
    if (__glintercept_fnptr_glProgramUniform1dv == NULL) {
      __glintercept_fnptr_glProgramUniform1dv = (__ctype_glProgramUniform1dv) eglGetProcAddr("glProgramUniform1dv");
    }
    if (__glintercept_fnptr_glProgramUniform1dv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1dv;
  }
  if (strcmp(name, "glProgramUniform1dvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform1dvEXT == NULL) {
      __glintercept_fnptr_glProgramUniform1dvEXT = (__ctype_glProgramUniform1dvEXT) eglGetProcAddr("glProgramUniform1dvEXT");
    }
    if (__glintercept_fnptr_glProgramUniform1dvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1dvEXT;
  }
  if (strcmp(name, "glProgramUniform1f") == 0) {
    if (__glintercept_fnptr_glProgramUniform1f == NULL) {
      __glintercept_fnptr_glProgramUniform1f = (__ctype_glProgramUniform1f) eglGetProcAddr("glProgramUniform1f");
    }
    if (__glintercept_fnptr_glProgramUniform1f == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1f;
  }
  if (strcmp(name, "glProgramUniform1fEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform1fEXT == NULL) {
      __glintercept_fnptr_glProgramUniform1fEXT = (__ctype_glProgramUniform1fEXT) eglGetProcAddr("glProgramUniform1fEXT");
    }
    if (__glintercept_fnptr_glProgramUniform1fEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1fEXT;
  }
  if (strcmp(name, "glProgramUniform1fv") == 0) {
    if (__glintercept_fnptr_glProgramUniform1fv == NULL) {
      __glintercept_fnptr_glProgramUniform1fv = (__ctype_glProgramUniform1fv) eglGetProcAddr("glProgramUniform1fv");
    }
    if (__glintercept_fnptr_glProgramUniform1fv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1fv;
  }
  if (strcmp(name, "glProgramUniform1fvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform1fvEXT == NULL) {
      __glintercept_fnptr_glProgramUniform1fvEXT = (__ctype_glProgramUniform1fvEXT) eglGetProcAddr("glProgramUniform1fvEXT");
    }
    if (__glintercept_fnptr_glProgramUniform1fvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1fvEXT;
  }
  if (strcmp(name, "glProgramUniform1i") == 0) {
    if (__glintercept_fnptr_glProgramUniform1i == NULL) {
      __glintercept_fnptr_glProgramUniform1i = (__ctype_glProgramUniform1i) eglGetProcAddr("glProgramUniform1i");
    }
    if (__glintercept_fnptr_glProgramUniform1i == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1i;
  }
  if (strcmp(name, "glProgramUniform1i64ARB") == 0) {
    if (__glintercept_fnptr_glProgramUniform1i64ARB == NULL) {
      __glintercept_fnptr_glProgramUniform1i64ARB = (__ctype_glProgramUniform1i64ARB) eglGetProcAddr("glProgramUniform1i64ARB");
    }
    if (__glintercept_fnptr_glProgramUniform1i64ARB == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1i64ARB;
  }
  if (strcmp(name, "glProgramUniform1i64NV") == 0) {
    if (__glintercept_fnptr_glProgramUniform1i64NV == NULL) {
      __glintercept_fnptr_glProgramUniform1i64NV = (__ctype_glProgramUniform1i64NV) eglGetProcAddr("glProgramUniform1i64NV");
    }
    if (__glintercept_fnptr_glProgramUniform1i64NV == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1i64NV;
  }
  if (strcmp(name, "glProgramUniform1i64vARB") == 0) {
    if (__glintercept_fnptr_glProgramUniform1i64vARB == NULL) {
      __glintercept_fnptr_glProgramUniform1i64vARB = (__ctype_glProgramUniform1i64vARB) eglGetProcAddr("glProgramUniform1i64vARB");
    }
    if (__glintercept_fnptr_glProgramUniform1i64vARB == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1i64vARB;
  }
  if (strcmp(name, "glProgramUniform1i64vNV") == 0) {
    if (__glintercept_fnptr_glProgramUniform1i64vNV == NULL) {
      __glintercept_fnptr_glProgramUniform1i64vNV = (__ctype_glProgramUniform1i64vNV) eglGetProcAddr("glProgramUniform1i64vNV");
    }
    if (__glintercept_fnptr_glProgramUniform1i64vNV == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1i64vNV;
  }
  if (strcmp(name, "glProgramUniform1iEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform1iEXT == NULL) {
      __glintercept_fnptr_glProgramUniform1iEXT = (__ctype_glProgramUniform1iEXT) eglGetProcAddr("glProgramUniform1iEXT");
    }
    if (__glintercept_fnptr_glProgramUniform1iEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1iEXT;
  }
  if (strcmp(name, "glProgramUniform1iv") == 0) {
    if (__glintercept_fnptr_glProgramUniform1iv == NULL) {
      __glintercept_fnptr_glProgramUniform1iv = (__ctype_glProgramUniform1iv) eglGetProcAddr("glProgramUniform1iv");
    }
    if (__glintercept_fnptr_glProgramUniform1iv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1iv;
  }
  if (strcmp(name, "glProgramUniform1ivEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform1ivEXT == NULL) {
      __glintercept_fnptr_glProgramUniform1ivEXT = (__ctype_glProgramUniform1ivEXT) eglGetProcAddr("glProgramUniform1ivEXT");
    }
    if (__glintercept_fnptr_glProgramUniform1ivEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1ivEXT;
  }
  if (strcmp(name, "glProgramUniform1ui") == 0) {
    if (__glintercept_fnptr_glProgramUniform1ui == NULL) {
      __glintercept_fnptr_glProgramUniform1ui = (__ctype_glProgramUniform1ui) eglGetProcAddr("glProgramUniform1ui");
    }
    if (__glintercept_fnptr_glProgramUniform1ui == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1ui;
  }
  if (strcmp(name, "glProgramUniform1ui64ARB") == 0) {
    if (__glintercept_fnptr_glProgramUniform1ui64ARB == NULL) {
      __glintercept_fnptr_glProgramUniform1ui64ARB = (__ctype_glProgramUniform1ui64ARB) eglGetProcAddr("glProgramUniform1ui64ARB");
    }
    if (__glintercept_fnptr_glProgramUniform1ui64ARB == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1ui64ARB;
  }
  if (strcmp(name, "glProgramUniform1ui64NV") == 0) {
    if (__glintercept_fnptr_glProgramUniform1ui64NV == NULL) {
      __glintercept_fnptr_glProgramUniform1ui64NV = (__ctype_glProgramUniform1ui64NV) eglGetProcAddr("glProgramUniform1ui64NV");
    }
    if (__glintercept_fnptr_glProgramUniform1ui64NV == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1ui64NV;
  }
  if (strcmp(name, "glProgramUniform1ui64vARB") == 0) {
    if (__glintercept_fnptr_glProgramUniform1ui64vARB == NULL) {
      __glintercept_fnptr_glProgramUniform1ui64vARB = (__ctype_glProgramUniform1ui64vARB) eglGetProcAddr("glProgramUniform1ui64vARB");
    }
    if (__glintercept_fnptr_glProgramUniform1ui64vARB == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1ui64vARB;
  }
  if (strcmp(name, "glProgramUniform1ui64vNV") == 0) {
    if (__glintercept_fnptr_glProgramUniform1ui64vNV == NULL) {
      __glintercept_fnptr_glProgramUniform1ui64vNV = (__ctype_glProgramUniform1ui64vNV) eglGetProcAddr("glProgramUniform1ui64vNV");
    }
    if (__glintercept_fnptr_glProgramUniform1ui64vNV == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1ui64vNV;
  }
  if (strcmp(name, "glProgramUniform1uiEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform1uiEXT == NULL) {
      __glintercept_fnptr_glProgramUniform1uiEXT = (__ctype_glProgramUniform1uiEXT) eglGetProcAddr("glProgramUniform1uiEXT");
    }
    if (__glintercept_fnptr_glProgramUniform1uiEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1uiEXT;
  }
  if (strcmp(name, "glProgramUniform1uiv") == 0) {
    if (__glintercept_fnptr_glProgramUniform1uiv == NULL) {
      __glintercept_fnptr_glProgramUniform1uiv = (__ctype_glProgramUniform1uiv) eglGetProcAddr("glProgramUniform1uiv");
    }
    if (__glintercept_fnptr_glProgramUniform1uiv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1uiv;
  }
  if (strcmp(name, "glProgramUniform1uivEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform1uivEXT == NULL) {
      __glintercept_fnptr_glProgramUniform1uivEXT = (__ctype_glProgramUniform1uivEXT) eglGetProcAddr("glProgramUniform1uivEXT");
    }
    if (__glintercept_fnptr_glProgramUniform1uivEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform1uivEXT;
  }
  if (strcmp(name, "glProgramUniform2d") == 0) {
    if (__glintercept_fnptr_glProgramUniform2d == NULL) {
      __glintercept_fnptr_glProgramUniform2d = (__ctype_glProgramUniform2d) eglGetProcAddr("glProgramUniform2d");
    }
    if (__glintercept_fnptr_glProgramUniform2d == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2d;
  }
  if (strcmp(name, "glProgramUniform2dEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform2dEXT == NULL) {
      __glintercept_fnptr_glProgramUniform2dEXT = (__ctype_glProgramUniform2dEXT) eglGetProcAddr("glProgramUniform2dEXT");
    }
    if (__glintercept_fnptr_glProgramUniform2dEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2dEXT;
  }
  if (strcmp(name, "glProgramUniform2dv") == 0) {
    if (__glintercept_fnptr_glProgramUniform2dv == NULL) {
      __glintercept_fnptr_glProgramUniform2dv = (__ctype_glProgramUniform2dv) eglGetProcAddr("glProgramUniform2dv");
    }
    if (__glintercept_fnptr_glProgramUniform2dv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2dv;
  }
  if (strcmp(name, "glProgramUniform2dvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform2dvEXT == NULL) {
      __glintercept_fnptr_glProgramUniform2dvEXT = (__ctype_glProgramUniform2dvEXT) eglGetProcAddr("glProgramUniform2dvEXT");
    }
    if (__glintercept_fnptr_glProgramUniform2dvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2dvEXT;
  }
  if (strcmp(name, "glProgramUniform2f") == 0) {
    if (__glintercept_fnptr_glProgramUniform2f == NULL) {
      __glintercept_fnptr_glProgramUniform2f = (__ctype_glProgramUniform2f) eglGetProcAddr("glProgramUniform2f");
    }
    if (__glintercept_fnptr_glProgramUniform2f == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2f;
  }
  if (strcmp(name, "glProgramUniform2fEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform2fEXT == NULL) {
      __glintercept_fnptr_glProgramUniform2fEXT = (__ctype_glProgramUniform2fEXT) eglGetProcAddr("glProgramUniform2fEXT");
    }
    if (__glintercept_fnptr_glProgramUniform2fEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2fEXT;
  }
  if (strcmp(name, "glProgramUniform2fv") == 0) {
    if (__glintercept_fnptr_glProgramUniform2fv == NULL) {
      __glintercept_fnptr_glProgramUniform2fv = (__ctype_glProgramUniform2fv) eglGetProcAddr("glProgramUniform2fv");
    }
    if (__glintercept_fnptr_glProgramUniform2fv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2fv;
  }
  if (strcmp(name, "glProgramUniform2fvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform2fvEXT == NULL) {
      __glintercept_fnptr_glProgramUniform2fvEXT = (__ctype_glProgramUniform2fvEXT) eglGetProcAddr("glProgramUniform2fvEXT");
    }
    if (__glintercept_fnptr_glProgramUniform2fvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2fvEXT;
  }
  if (strcmp(name, "glProgramUniform2i") == 0) {
    if (__glintercept_fnptr_glProgramUniform2i == NULL) {
      __glintercept_fnptr_glProgramUniform2i = (__ctype_glProgramUniform2i) eglGetProcAddr("glProgramUniform2i");
    }
    if (__glintercept_fnptr_glProgramUniform2i == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2i;
  }
  if (strcmp(name, "glProgramUniform2i64ARB") == 0) {
    if (__glintercept_fnptr_glProgramUniform2i64ARB == NULL) {
      __glintercept_fnptr_glProgramUniform2i64ARB = (__ctype_glProgramUniform2i64ARB) eglGetProcAddr("glProgramUniform2i64ARB");
    }
    if (__glintercept_fnptr_glProgramUniform2i64ARB == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2i64ARB;
  }
  if (strcmp(name, "glProgramUniform2i64NV") == 0) {
    if (__glintercept_fnptr_glProgramUniform2i64NV == NULL) {
      __glintercept_fnptr_glProgramUniform2i64NV = (__ctype_glProgramUniform2i64NV) eglGetProcAddr("glProgramUniform2i64NV");
    }
    if (__glintercept_fnptr_glProgramUniform2i64NV == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2i64NV;
  }
  if (strcmp(name, "glProgramUniform2i64vARB") == 0) {
    if (__glintercept_fnptr_glProgramUniform2i64vARB == NULL) {
      __glintercept_fnptr_glProgramUniform2i64vARB = (__ctype_glProgramUniform2i64vARB) eglGetProcAddr("glProgramUniform2i64vARB");
    }
    if (__glintercept_fnptr_glProgramUniform2i64vARB == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2i64vARB;
  }
  if (strcmp(name, "glProgramUniform2i64vNV") == 0) {
    if (__glintercept_fnptr_glProgramUniform2i64vNV == NULL) {
      __glintercept_fnptr_glProgramUniform2i64vNV = (__ctype_glProgramUniform2i64vNV) eglGetProcAddr("glProgramUniform2i64vNV");
    }
    if (__glintercept_fnptr_glProgramUniform2i64vNV == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2i64vNV;
  }
  if (strcmp(name, "glProgramUniform2iEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform2iEXT == NULL) {
      __glintercept_fnptr_glProgramUniform2iEXT = (__ctype_glProgramUniform2iEXT) eglGetProcAddr("glProgramUniform2iEXT");
    }
    if (__glintercept_fnptr_glProgramUniform2iEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2iEXT;
  }
  if (strcmp(name, "glProgramUniform2iv") == 0) {
    if (__glintercept_fnptr_glProgramUniform2iv == NULL) {
      __glintercept_fnptr_glProgramUniform2iv = (__ctype_glProgramUniform2iv) eglGetProcAddr("glProgramUniform2iv");
    }
    if (__glintercept_fnptr_glProgramUniform2iv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2iv;
  }
  if (strcmp(name, "glProgramUniform2ivEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform2ivEXT == NULL) {
      __glintercept_fnptr_glProgramUniform2ivEXT = (__ctype_glProgramUniform2ivEXT) eglGetProcAddr("glProgramUniform2ivEXT");
    }
    if (__glintercept_fnptr_glProgramUniform2ivEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2ivEXT;
  }
  if (strcmp(name, "glProgramUniform2ui") == 0) {
    if (__glintercept_fnptr_glProgramUniform2ui == NULL) {
      __glintercept_fnptr_glProgramUniform2ui = (__ctype_glProgramUniform2ui) eglGetProcAddr("glProgramUniform2ui");
    }
    if (__glintercept_fnptr_glProgramUniform2ui == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2ui;
  }
  if (strcmp(name, "glProgramUniform2ui64ARB") == 0) {
    if (__glintercept_fnptr_glProgramUniform2ui64ARB == NULL) {
      __glintercept_fnptr_glProgramUniform2ui64ARB = (__ctype_glProgramUniform2ui64ARB) eglGetProcAddr("glProgramUniform2ui64ARB");
    }
    if (__glintercept_fnptr_glProgramUniform2ui64ARB == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2ui64ARB;
  }
  if (strcmp(name, "glProgramUniform2ui64NV") == 0) {
    if (__glintercept_fnptr_glProgramUniform2ui64NV == NULL) {
      __glintercept_fnptr_glProgramUniform2ui64NV = (__ctype_glProgramUniform2ui64NV) eglGetProcAddr("glProgramUniform2ui64NV");
    }
    if (__glintercept_fnptr_glProgramUniform2ui64NV == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2ui64NV;
  }
  if (strcmp(name, "glProgramUniform2ui64vARB") == 0) {
    if (__glintercept_fnptr_glProgramUniform2ui64vARB == NULL) {
      __glintercept_fnptr_glProgramUniform2ui64vARB = (__ctype_glProgramUniform2ui64vARB) eglGetProcAddr("glProgramUniform2ui64vARB");
    }
    if (__glintercept_fnptr_glProgramUniform2ui64vARB == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2ui64vARB;
  }
  if (strcmp(name, "glProgramUniform2ui64vNV") == 0) {
    if (__glintercept_fnptr_glProgramUniform2ui64vNV == NULL) {
      __glintercept_fnptr_glProgramUniform2ui64vNV = (__ctype_glProgramUniform2ui64vNV) eglGetProcAddr("glProgramUniform2ui64vNV");
    }
    if (__glintercept_fnptr_glProgramUniform2ui64vNV == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2ui64vNV;
  }
  if (strcmp(name, "glProgramUniform2uiEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform2uiEXT == NULL) {
      __glintercept_fnptr_glProgramUniform2uiEXT = (__ctype_glProgramUniform2uiEXT) eglGetProcAddr("glProgramUniform2uiEXT");
    }
    if (__glintercept_fnptr_glProgramUniform2uiEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2uiEXT;
  }
  if (strcmp(name, "glProgramUniform2uiv") == 0) {
    if (__glintercept_fnptr_glProgramUniform2uiv == NULL) {
      __glintercept_fnptr_glProgramUniform2uiv = (__ctype_glProgramUniform2uiv) eglGetProcAddr("glProgramUniform2uiv");
    }
    if (__glintercept_fnptr_glProgramUniform2uiv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2uiv;
  }
  if (strcmp(name, "glProgramUniform2uivEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform2uivEXT == NULL) {
      __glintercept_fnptr_glProgramUniform2uivEXT = (__ctype_glProgramUniform2uivEXT) eglGetProcAddr("glProgramUniform2uivEXT");
    }
    if (__glintercept_fnptr_glProgramUniform2uivEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform2uivEXT;
  }
  if (strcmp(name, "glProgramUniform3d") == 0) {
    if (__glintercept_fnptr_glProgramUniform3d == NULL) {
      __glintercept_fnptr_glProgramUniform3d = (__ctype_glProgramUniform3d) eglGetProcAddr("glProgramUniform3d");
    }
    if (__glintercept_fnptr_glProgramUniform3d == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3d;
  }
  if (strcmp(name, "glProgramUniform3dEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform3dEXT == NULL) {
      __glintercept_fnptr_glProgramUniform3dEXT = (__ctype_glProgramUniform3dEXT) eglGetProcAddr("glProgramUniform3dEXT");
    }
    if (__glintercept_fnptr_glProgramUniform3dEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3dEXT;
  }
  if (strcmp(name, "glProgramUniform3dv") == 0) {
    if (__glintercept_fnptr_glProgramUniform3dv == NULL) {
      __glintercept_fnptr_glProgramUniform3dv = (__ctype_glProgramUniform3dv) eglGetProcAddr("glProgramUniform3dv");
    }
    if (__glintercept_fnptr_glProgramUniform3dv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3dv;
  }
  if (strcmp(name, "glProgramUniform3dvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform3dvEXT == NULL) {
      __glintercept_fnptr_glProgramUniform3dvEXT = (__ctype_glProgramUniform3dvEXT) eglGetProcAddr("glProgramUniform3dvEXT");
    }
    if (__glintercept_fnptr_glProgramUniform3dvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3dvEXT;
  }
  if (strcmp(name, "glProgramUniform3f") == 0) {
    if (__glintercept_fnptr_glProgramUniform3f == NULL) {
      __glintercept_fnptr_glProgramUniform3f = (__ctype_glProgramUniform3f) eglGetProcAddr("glProgramUniform3f");
    }
    if (__glintercept_fnptr_glProgramUniform3f == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3f;
  }
  if (strcmp(name, "glProgramUniform3fEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform3fEXT == NULL) {
      __glintercept_fnptr_glProgramUniform3fEXT = (__ctype_glProgramUniform3fEXT) eglGetProcAddr("glProgramUniform3fEXT");
    }
    if (__glintercept_fnptr_glProgramUniform3fEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3fEXT;
  }
  if (strcmp(name, "glProgramUniform3fv") == 0) {
    if (__glintercept_fnptr_glProgramUniform3fv == NULL) {
      __glintercept_fnptr_glProgramUniform3fv = (__ctype_glProgramUniform3fv) eglGetProcAddr("glProgramUniform3fv");
    }
    if (__glintercept_fnptr_glProgramUniform3fv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3fv;
  }
  if (strcmp(name, "glProgramUniform3fvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform3fvEXT == NULL) {
      __glintercept_fnptr_glProgramUniform3fvEXT = (__ctype_glProgramUniform3fvEXT) eglGetProcAddr("glProgramUniform3fvEXT");
    }
    if (__glintercept_fnptr_glProgramUniform3fvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3fvEXT;
  }
  if (strcmp(name, "glProgramUniform3i") == 0) {
    if (__glintercept_fnptr_glProgramUniform3i == NULL) {
      __glintercept_fnptr_glProgramUniform3i = (__ctype_glProgramUniform3i) eglGetProcAddr("glProgramUniform3i");
    }
    if (__glintercept_fnptr_glProgramUniform3i == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3i;
  }
  if (strcmp(name, "glProgramUniform3i64ARB") == 0) {
    if (__glintercept_fnptr_glProgramUniform3i64ARB == NULL) {
      __glintercept_fnptr_glProgramUniform3i64ARB = (__ctype_glProgramUniform3i64ARB) eglGetProcAddr("glProgramUniform3i64ARB");
    }
    if (__glintercept_fnptr_glProgramUniform3i64ARB == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3i64ARB;
  }
  if (strcmp(name, "glProgramUniform3i64NV") == 0) {
    if (__glintercept_fnptr_glProgramUniform3i64NV == NULL) {
      __glintercept_fnptr_glProgramUniform3i64NV = (__ctype_glProgramUniform3i64NV) eglGetProcAddr("glProgramUniform3i64NV");
    }
    if (__glintercept_fnptr_glProgramUniform3i64NV == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3i64NV;
  }
  if (strcmp(name, "glProgramUniform3i64vARB") == 0) {
    if (__glintercept_fnptr_glProgramUniform3i64vARB == NULL) {
      __glintercept_fnptr_glProgramUniform3i64vARB = (__ctype_glProgramUniform3i64vARB) eglGetProcAddr("glProgramUniform3i64vARB");
    }
    if (__glintercept_fnptr_glProgramUniform3i64vARB == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3i64vARB;
  }
  if (strcmp(name, "glProgramUniform3i64vNV") == 0) {
    if (__glintercept_fnptr_glProgramUniform3i64vNV == NULL) {
      __glintercept_fnptr_glProgramUniform3i64vNV = (__ctype_glProgramUniform3i64vNV) eglGetProcAddr("glProgramUniform3i64vNV");
    }
    if (__glintercept_fnptr_glProgramUniform3i64vNV == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3i64vNV;
  }
  if (strcmp(name, "glProgramUniform3iEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform3iEXT == NULL) {
      __glintercept_fnptr_glProgramUniform3iEXT = (__ctype_glProgramUniform3iEXT) eglGetProcAddr("glProgramUniform3iEXT");
    }
    if (__glintercept_fnptr_glProgramUniform3iEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3iEXT;
  }
  if (strcmp(name, "glProgramUniform3iv") == 0) {
    if (__glintercept_fnptr_glProgramUniform3iv == NULL) {
      __glintercept_fnptr_glProgramUniform3iv = (__ctype_glProgramUniform3iv) eglGetProcAddr("glProgramUniform3iv");
    }
    if (__glintercept_fnptr_glProgramUniform3iv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3iv;
  }
  if (strcmp(name, "glProgramUniform3ivEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform3ivEXT == NULL) {
      __glintercept_fnptr_glProgramUniform3ivEXT = (__ctype_glProgramUniform3ivEXT) eglGetProcAddr("glProgramUniform3ivEXT");
    }
    if (__glintercept_fnptr_glProgramUniform3ivEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3ivEXT;
  }
  if (strcmp(name, "glProgramUniform3ui") == 0) {
    if (__glintercept_fnptr_glProgramUniform3ui == NULL) {
      __glintercept_fnptr_glProgramUniform3ui = (__ctype_glProgramUniform3ui) eglGetProcAddr("glProgramUniform3ui");
    }
    if (__glintercept_fnptr_glProgramUniform3ui == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3ui;
  }
  if (strcmp(name, "glProgramUniform3ui64ARB") == 0) {
    if (__glintercept_fnptr_glProgramUniform3ui64ARB == NULL) {
      __glintercept_fnptr_glProgramUniform3ui64ARB = (__ctype_glProgramUniform3ui64ARB) eglGetProcAddr("glProgramUniform3ui64ARB");
    }
    if (__glintercept_fnptr_glProgramUniform3ui64ARB == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3ui64ARB;
  }
  if (strcmp(name, "glProgramUniform3ui64NV") == 0) {
    if (__glintercept_fnptr_glProgramUniform3ui64NV == NULL) {
      __glintercept_fnptr_glProgramUniform3ui64NV = (__ctype_glProgramUniform3ui64NV) eglGetProcAddr("glProgramUniform3ui64NV");
    }
    if (__glintercept_fnptr_glProgramUniform3ui64NV == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3ui64NV;
  }
  if (strcmp(name, "glProgramUniform3ui64vARB") == 0) {
    if (__glintercept_fnptr_glProgramUniform3ui64vARB == NULL) {
      __glintercept_fnptr_glProgramUniform3ui64vARB = (__ctype_glProgramUniform3ui64vARB) eglGetProcAddr("glProgramUniform3ui64vARB");
    }
    if (__glintercept_fnptr_glProgramUniform3ui64vARB == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3ui64vARB;
  }
  if (strcmp(name, "glProgramUniform3ui64vNV") == 0) {
    if (__glintercept_fnptr_glProgramUniform3ui64vNV == NULL) {
      __glintercept_fnptr_glProgramUniform3ui64vNV = (__ctype_glProgramUniform3ui64vNV) eglGetProcAddr("glProgramUniform3ui64vNV");
    }
    if (__glintercept_fnptr_glProgramUniform3ui64vNV == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3ui64vNV;
  }
  if (strcmp(name, "glProgramUniform3uiEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform3uiEXT == NULL) {
      __glintercept_fnptr_glProgramUniform3uiEXT = (__ctype_glProgramUniform3uiEXT) eglGetProcAddr("glProgramUniform3uiEXT");
    }
    if (__glintercept_fnptr_glProgramUniform3uiEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3uiEXT;
  }
  if (strcmp(name, "glProgramUniform3uiv") == 0) {
    if (__glintercept_fnptr_glProgramUniform3uiv == NULL) {
      __glintercept_fnptr_glProgramUniform3uiv = (__ctype_glProgramUniform3uiv) eglGetProcAddr("glProgramUniform3uiv");
    }
    if (__glintercept_fnptr_glProgramUniform3uiv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3uiv;
  }
  if (strcmp(name, "glProgramUniform3uivEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform3uivEXT == NULL) {
      __glintercept_fnptr_glProgramUniform3uivEXT = (__ctype_glProgramUniform3uivEXT) eglGetProcAddr("glProgramUniform3uivEXT");
    }
    if (__glintercept_fnptr_glProgramUniform3uivEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform3uivEXT;
  }
  if (strcmp(name, "glProgramUniform4d") == 0) {
    if (__glintercept_fnptr_glProgramUniform4d == NULL) {
      __glintercept_fnptr_glProgramUniform4d = (__ctype_glProgramUniform4d) eglGetProcAddr("glProgramUniform4d");
    }
    if (__glintercept_fnptr_glProgramUniform4d == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4d;
  }
  if (strcmp(name, "glProgramUniform4dEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform4dEXT == NULL) {
      __glintercept_fnptr_glProgramUniform4dEXT = (__ctype_glProgramUniform4dEXT) eglGetProcAddr("glProgramUniform4dEXT");
    }
    if (__glintercept_fnptr_glProgramUniform4dEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4dEXT;
  }
  if (strcmp(name, "glProgramUniform4dv") == 0) {
    if (__glintercept_fnptr_glProgramUniform4dv == NULL) {
      __glintercept_fnptr_glProgramUniform4dv = (__ctype_glProgramUniform4dv) eglGetProcAddr("glProgramUniform4dv");
    }
    if (__glintercept_fnptr_glProgramUniform4dv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4dv;
  }
  if (strcmp(name, "glProgramUniform4dvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform4dvEXT == NULL) {
      __glintercept_fnptr_glProgramUniform4dvEXT = (__ctype_glProgramUniform4dvEXT) eglGetProcAddr("glProgramUniform4dvEXT");
    }
    if (__glintercept_fnptr_glProgramUniform4dvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4dvEXT;
  }
  if (strcmp(name, "glProgramUniform4f") == 0) {
    if (__glintercept_fnptr_glProgramUniform4f == NULL) {
      __glintercept_fnptr_glProgramUniform4f = (__ctype_glProgramUniform4f) eglGetProcAddr("glProgramUniform4f");
    }
    if (__glintercept_fnptr_glProgramUniform4f == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4f;
  }
  if (strcmp(name, "glProgramUniform4fEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform4fEXT == NULL) {
      __glintercept_fnptr_glProgramUniform4fEXT = (__ctype_glProgramUniform4fEXT) eglGetProcAddr("glProgramUniform4fEXT");
    }
    if (__glintercept_fnptr_glProgramUniform4fEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4fEXT;
  }
  if (strcmp(name, "glProgramUniform4fv") == 0) {
    if (__glintercept_fnptr_glProgramUniform4fv == NULL) {
      __glintercept_fnptr_glProgramUniform4fv = (__ctype_glProgramUniform4fv) eglGetProcAddr("glProgramUniform4fv");
    }
    if (__glintercept_fnptr_glProgramUniform4fv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4fv;
  }
  if (strcmp(name, "glProgramUniform4fvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform4fvEXT == NULL) {
      __glintercept_fnptr_glProgramUniform4fvEXT = (__ctype_glProgramUniform4fvEXT) eglGetProcAddr("glProgramUniform4fvEXT");
    }
    if (__glintercept_fnptr_glProgramUniform4fvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4fvEXT;
  }
  if (strcmp(name, "glProgramUniform4i") == 0) {
    if (__glintercept_fnptr_glProgramUniform4i == NULL) {
      __glintercept_fnptr_glProgramUniform4i = (__ctype_glProgramUniform4i) eglGetProcAddr("glProgramUniform4i");
    }
    if (__glintercept_fnptr_glProgramUniform4i == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4i;
  }
  if (strcmp(name, "glProgramUniform4i64ARB") == 0) {
    if (__glintercept_fnptr_glProgramUniform4i64ARB == NULL) {
      __glintercept_fnptr_glProgramUniform4i64ARB = (__ctype_glProgramUniform4i64ARB) eglGetProcAddr("glProgramUniform4i64ARB");
    }
    if (__glintercept_fnptr_glProgramUniform4i64ARB == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4i64ARB;
  }
  if (strcmp(name, "glProgramUniform4i64NV") == 0) {
    if (__glintercept_fnptr_glProgramUniform4i64NV == NULL) {
      __glintercept_fnptr_glProgramUniform4i64NV = (__ctype_glProgramUniform4i64NV) eglGetProcAddr("glProgramUniform4i64NV");
    }
    if (__glintercept_fnptr_glProgramUniform4i64NV == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4i64NV;
  }
  if (strcmp(name, "glProgramUniform4i64vARB") == 0) {
    if (__glintercept_fnptr_glProgramUniform4i64vARB == NULL) {
      __glintercept_fnptr_glProgramUniform4i64vARB = (__ctype_glProgramUniform4i64vARB) eglGetProcAddr("glProgramUniform4i64vARB");
    }
    if (__glintercept_fnptr_glProgramUniform4i64vARB == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4i64vARB;
  }
  if (strcmp(name, "glProgramUniform4i64vNV") == 0) {
    if (__glintercept_fnptr_glProgramUniform4i64vNV == NULL) {
      __glintercept_fnptr_glProgramUniform4i64vNV = (__ctype_glProgramUniform4i64vNV) eglGetProcAddr("glProgramUniform4i64vNV");
    }
    if (__glintercept_fnptr_glProgramUniform4i64vNV == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4i64vNV;
  }
  if (strcmp(name, "glProgramUniform4iEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform4iEXT == NULL) {
      __glintercept_fnptr_glProgramUniform4iEXT = (__ctype_glProgramUniform4iEXT) eglGetProcAddr("glProgramUniform4iEXT");
    }
    if (__glintercept_fnptr_glProgramUniform4iEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4iEXT;
  }
  if (strcmp(name, "glProgramUniform4iv") == 0) {
    if (__glintercept_fnptr_glProgramUniform4iv == NULL) {
      __glintercept_fnptr_glProgramUniform4iv = (__ctype_glProgramUniform4iv) eglGetProcAddr("glProgramUniform4iv");
    }
    if (__glintercept_fnptr_glProgramUniform4iv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4iv;
  }
  if (strcmp(name, "glProgramUniform4ivEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform4ivEXT == NULL) {
      __glintercept_fnptr_glProgramUniform4ivEXT = (__ctype_glProgramUniform4ivEXT) eglGetProcAddr("glProgramUniform4ivEXT");
    }
    if (__glintercept_fnptr_glProgramUniform4ivEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4ivEXT;
  }
  if (strcmp(name, "glProgramUniform4ui") == 0) {
    if (__glintercept_fnptr_glProgramUniform4ui == NULL) {
      __glintercept_fnptr_glProgramUniform4ui = (__ctype_glProgramUniform4ui) eglGetProcAddr("glProgramUniform4ui");
    }
    if (__glintercept_fnptr_glProgramUniform4ui == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4ui;
  }
  if (strcmp(name, "glProgramUniform4ui64ARB") == 0) {
    if (__glintercept_fnptr_glProgramUniform4ui64ARB == NULL) {
      __glintercept_fnptr_glProgramUniform4ui64ARB = (__ctype_glProgramUniform4ui64ARB) eglGetProcAddr("glProgramUniform4ui64ARB");
    }
    if (__glintercept_fnptr_glProgramUniform4ui64ARB == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4ui64ARB;
  }
  if (strcmp(name, "glProgramUniform4ui64NV") == 0) {
    if (__glintercept_fnptr_glProgramUniform4ui64NV == NULL) {
      __glintercept_fnptr_glProgramUniform4ui64NV = (__ctype_glProgramUniform4ui64NV) eglGetProcAddr("glProgramUniform4ui64NV");
    }
    if (__glintercept_fnptr_glProgramUniform4ui64NV == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4ui64NV;
  }
  if (strcmp(name, "glProgramUniform4ui64vARB") == 0) {
    if (__glintercept_fnptr_glProgramUniform4ui64vARB == NULL) {
      __glintercept_fnptr_glProgramUniform4ui64vARB = (__ctype_glProgramUniform4ui64vARB) eglGetProcAddr("glProgramUniform4ui64vARB");
    }
    if (__glintercept_fnptr_glProgramUniform4ui64vARB == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4ui64vARB;
  }
  if (strcmp(name, "glProgramUniform4ui64vNV") == 0) {
    if (__glintercept_fnptr_glProgramUniform4ui64vNV == NULL) {
      __glintercept_fnptr_glProgramUniform4ui64vNV = (__ctype_glProgramUniform4ui64vNV) eglGetProcAddr("glProgramUniform4ui64vNV");
    }
    if (__glintercept_fnptr_glProgramUniform4ui64vNV == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4ui64vNV;
  }
  if (strcmp(name, "glProgramUniform4uiEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform4uiEXT == NULL) {
      __glintercept_fnptr_glProgramUniform4uiEXT = (__ctype_glProgramUniform4uiEXT) eglGetProcAddr("glProgramUniform4uiEXT");
    }
    if (__glintercept_fnptr_glProgramUniform4uiEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4uiEXT;
  }
  if (strcmp(name, "glProgramUniform4uiv") == 0) {
    if (__glintercept_fnptr_glProgramUniform4uiv == NULL) {
      __glintercept_fnptr_glProgramUniform4uiv = (__ctype_glProgramUniform4uiv) eglGetProcAddr("glProgramUniform4uiv");
    }
    if (__glintercept_fnptr_glProgramUniform4uiv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4uiv;
  }
  if (strcmp(name, "glProgramUniform4uivEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniform4uivEXT == NULL) {
      __glintercept_fnptr_glProgramUniform4uivEXT = (__ctype_glProgramUniform4uivEXT) eglGetProcAddr("glProgramUniform4uivEXT");
    }
    if (__glintercept_fnptr_glProgramUniform4uivEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniform4uivEXT;
  }
  if (strcmp(name, "glProgramUniformHandleui64ARB") == 0) {
    if (__glintercept_fnptr_glProgramUniformHandleui64ARB == NULL) {
      __glintercept_fnptr_glProgramUniformHandleui64ARB = (__ctype_glProgramUniformHandleui64ARB) eglGetProcAddr("glProgramUniformHandleui64ARB");
    }
    if (__glintercept_fnptr_glProgramUniformHandleui64ARB == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformHandleui64ARB;
  }
  if (strcmp(name, "glProgramUniformHandleui64IMG") == 0) {
    if (__glintercept_fnptr_glProgramUniformHandleui64IMG == NULL) {
      __glintercept_fnptr_glProgramUniformHandleui64IMG = (__ctype_glProgramUniformHandleui64IMG) eglGetProcAddr("glProgramUniformHandleui64IMG");
    }
    if (__glintercept_fnptr_glProgramUniformHandleui64IMG == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformHandleui64IMG;
  }
  if (strcmp(name, "glProgramUniformHandleui64NV") == 0) {
    if (__glintercept_fnptr_glProgramUniformHandleui64NV == NULL) {
      __glintercept_fnptr_glProgramUniformHandleui64NV = (__ctype_glProgramUniformHandleui64NV) eglGetProcAddr("glProgramUniformHandleui64NV");
    }
    if (__glintercept_fnptr_glProgramUniformHandleui64NV == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformHandleui64NV;
  }
  if (strcmp(name, "glProgramUniformHandleui64vARB") == 0) {
    if (__glintercept_fnptr_glProgramUniformHandleui64vARB == NULL) {
      __glintercept_fnptr_glProgramUniformHandleui64vARB = (__ctype_glProgramUniformHandleui64vARB) eglGetProcAddr("glProgramUniformHandleui64vARB");
    }
    if (__glintercept_fnptr_glProgramUniformHandleui64vARB == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformHandleui64vARB;
  }
  if (strcmp(name, "glProgramUniformHandleui64vIMG") == 0) {
    if (__glintercept_fnptr_glProgramUniformHandleui64vIMG == NULL) {
      __glintercept_fnptr_glProgramUniformHandleui64vIMG = (__ctype_glProgramUniformHandleui64vIMG) eglGetProcAddr("glProgramUniformHandleui64vIMG");
    }
    if (__glintercept_fnptr_glProgramUniformHandleui64vIMG == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformHandleui64vIMG;
  }
  if (strcmp(name, "glProgramUniformHandleui64vNV") == 0) {
    if (__glintercept_fnptr_glProgramUniformHandleui64vNV == NULL) {
      __glintercept_fnptr_glProgramUniformHandleui64vNV = (__ctype_glProgramUniformHandleui64vNV) eglGetProcAddr("glProgramUniformHandleui64vNV");
    }
    if (__glintercept_fnptr_glProgramUniformHandleui64vNV == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformHandleui64vNV;
  }
  if (strcmp(name, "glProgramUniformMatrix2dv") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix2dv == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix2dv = (__ctype_glProgramUniformMatrix2dv) eglGetProcAddr("glProgramUniformMatrix2dv");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix2dv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix2dv;
  }
  if (strcmp(name, "glProgramUniformMatrix2dvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix2dvEXT == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix2dvEXT = (__ctype_glProgramUniformMatrix2dvEXT) eglGetProcAddr("glProgramUniformMatrix2dvEXT");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix2dvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix2dvEXT;
  }
  if (strcmp(name, "glProgramUniformMatrix2fv") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix2fv == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix2fv = (__ctype_glProgramUniformMatrix2fv) eglGetProcAddr("glProgramUniformMatrix2fv");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix2fv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix2fv;
  }
  if (strcmp(name, "glProgramUniformMatrix2fvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix2fvEXT == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix2fvEXT = (__ctype_glProgramUniformMatrix2fvEXT) eglGetProcAddr("glProgramUniformMatrix2fvEXT");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix2fvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix2fvEXT;
  }
  if (strcmp(name, "glProgramUniformMatrix2x3dv") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix2x3dv == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix2x3dv = (__ctype_glProgramUniformMatrix2x3dv) eglGetProcAddr("glProgramUniformMatrix2x3dv");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix2x3dv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix2x3dv;
  }
  if (strcmp(name, "glProgramUniformMatrix2x3dvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix2x3dvEXT == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix2x3dvEXT = (__ctype_glProgramUniformMatrix2x3dvEXT) eglGetProcAddr("glProgramUniformMatrix2x3dvEXT");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix2x3dvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix2x3dvEXT;
  }
  if (strcmp(name, "glProgramUniformMatrix2x3fv") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix2x3fv == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix2x3fv = (__ctype_glProgramUniformMatrix2x3fv) eglGetProcAddr("glProgramUniformMatrix2x3fv");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix2x3fv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix2x3fv;
  }
  if (strcmp(name, "glProgramUniformMatrix2x3fvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix2x3fvEXT == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix2x3fvEXT = (__ctype_glProgramUniformMatrix2x3fvEXT) eglGetProcAddr("glProgramUniformMatrix2x3fvEXT");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix2x3fvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix2x3fvEXT;
  }
  if (strcmp(name, "glProgramUniformMatrix2x4dv") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix2x4dv == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix2x4dv = (__ctype_glProgramUniformMatrix2x4dv) eglGetProcAddr("glProgramUniformMatrix2x4dv");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix2x4dv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix2x4dv;
  }
  if (strcmp(name, "glProgramUniformMatrix2x4dvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix2x4dvEXT == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix2x4dvEXT = (__ctype_glProgramUniformMatrix2x4dvEXT) eglGetProcAddr("glProgramUniformMatrix2x4dvEXT");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix2x4dvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix2x4dvEXT;
  }
  if (strcmp(name, "glProgramUniformMatrix2x4fv") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix2x4fv == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix2x4fv = (__ctype_glProgramUniformMatrix2x4fv) eglGetProcAddr("glProgramUniformMatrix2x4fv");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix2x4fv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix2x4fv;
  }
  if (strcmp(name, "glProgramUniformMatrix2x4fvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix2x4fvEXT == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix2x4fvEXT = (__ctype_glProgramUniformMatrix2x4fvEXT) eglGetProcAddr("glProgramUniformMatrix2x4fvEXT");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix2x4fvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix2x4fvEXT;
  }
  if (strcmp(name, "glProgramUniformMatrix3dv") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix3dv == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix3dv = (__ctype_glProgramUniformMatrix3dv) eglGetProcAddr("glProgramUniformMatrix3dv");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix3dv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix3dv;
  }
  if (strcmp(name, "glProgramUniformMatrix3dvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix3dvEXT == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix3dvEXT = (__ctype_glProgramUniformMatrix3dvEXT) eglGetProcAddr("glProgramUniformMatrix3dvEXT");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix3dvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix3dvEXT;
  }
  if (strcmp(name, "glProgramUniformMatrix3fv") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix3fv == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix3fv = (__ctype_glProgramUniformMatrix3fv) eglGetProcAddr("glProgramUniformMatrix3fv");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix3fv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix3fv;
  }
  if (strcmp(name, "glProgramUniformMatrix3fvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix3fvEXT == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix3fvEXT = (__ctype_glProgramUniformMatrix3fvEXT) eglGetProcAddr("glProgramUniformMatrix3fvEXT");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix3fvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix3fvEXT;
  }
  if (strcmp(name, "glProgramUniformMatrix3x2dv") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix3x2dv == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix3x2dv = (__ctype_glProgramUniformMatrix3x2dv) eglGetProcAddr("glProgramUniformMatrix3x2dv");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix3x2dv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix3x2dv;
  }
  if (strcmp(name, "glProgramUniformMatrix3x2dvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix3x2dvEXT == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix3x2dvEXT = (__ctype_glProgramUniformMatrix3x2dvEXT) eglGetProcAddr("glProgramUniformMatrix3x2dvEXT");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix3x2dvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix3x2dvEXT;
  }
  if (strcmp(name, "glProgramUniformMatrix3x2fv") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix3x2fv == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix3x2fv = (__ctype_glProgramUniformMatrix3x2fv) eglGetProcAddr("glProgramUniformMatrix3x2fv");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix3x2fv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix3x2fv;
  }
  if (strcmp(name, "glProgramUniformMatrix3x2fvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix3x2fvEXT == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix3x2fvEXT = (__ctype_glProgramUniformMatrix3x2fvEXT) eglGetProcAddr("glProgramUniformMatrix3x2fvEXT");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix3x2fvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix3x2fvEXT;
  }
  if (strcmp(name, "glProgramUniformMatrix3x4dv") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix3x4dv == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix3x4dv = (__ctype_glProgramUniformMatrix3x4dv) eglGetProcAddr("glProgramUniformMatrix3x4dv");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix3x4dv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix3x4dv;
  }
  if (strcmp(name, "glProgramUniformMatrix3x4dvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix3x4dvEXT == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix3x4dvEXT = (__ctype_glProgramUniformMatrix3x4dvEXT) eglGetProcAddr("glProgramUniformMatrix3x4dvEXT");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix3x4dvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix3x4dvEXT;
  }
  if (strcmp(name, "glProgramUniformMatrix3x4fv") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix3x4fv == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix3x4fv = (__ctype_glProgramUniformMatrix3x4fv) eglGetProcAddr("glProgramUniformMatrix3x4fv");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix3x4fv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix3x4fv;
  }
  if (strcmp(name, "glProgramUniformMatrix3x4fvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix3x4fvEXT == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix3x4fvEXT = (__ctype_glProgramUniformMatrix3x4fvEXT) eglGetProcAddr("glProgramUniformMatrix3x4fvEXT");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix3x4fvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix3x4fvEXT;
  }
  if (strcmp(name, "glProgramUniformMatrix4dv") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix4dv == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix4dv = (__ctype_glProgramUniformMatrix4dv) eglGetProcAddr("glProgramUniformMatrix4dv");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix4dv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix4dv;
  }
  if (strcmp(name, "glProgramUniformMatrix4dvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix4dvEXT == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix4dvEXT = (__ctype_glProgramUniformMatrix4dvEXT) eglGetProcAddr("glProgramUniformMatrix4dvEXT");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix4dvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix4dvEXT;
  }
  if (strcmp(name, "glProgramUniformMatrix4fv") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix4fv == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix4fv = (__ctype_glProgramUniformMatrix4fv) eglGetProcAddr("glProgramUniformMatrix4fv");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix4fv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix4fv;
  }
  if (strcmp(name, "glProgramUniformMatrix4fvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix4fvEXT == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix4fvEXT = (__ctype_glProgramUniformMatrix4fvEXT) eglGetProcAddr("glProgramUniformMatrix4fvEXT");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix4fvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix4fvEXT;
  }
  if (strcmp(name, "glProgramUniformMatrix4x2dv") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix4x2dv == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix4x2dv = (__ctype_glProgramUniformMatrix4x2dv) eglGetProcAddr("glProgramUniformMatrix4x2dv");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix4x2dv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix4x2dv;
  }
  if (strcmp(name, "glProgramUniformMatrix4x2dvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix4x2dvEXT == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix4x2dvEXT = (__ctype_glProgramUniformMatrix4x2dvEXT) eglGetProcAddr("glProgramUniformMatrix4x2dvEXT");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix4x2dvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix4x2dvEXT;
  }
  if (strcmp(name, "glProgramUniformMatrix4x2fv") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix4x2fv == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix4x2fv = (__ctype_glProgramUniformMatrix4x2fv) eglGetProcAddr("glProgramUniformMatrix4x2fv");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix4x2fv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix4x2fv;
  }
  if (strcmp(name, "glProgramUniformMatrix4x2fvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix4x2fvEXT == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix4x2fvEXT = (__ctype_glProgramUniformMatrix4x2fvEXT) eglGetProcAddr("glProgramUniformMatrix4x2fvEXT");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix4x2fvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix4x2fvEXT;
  }
  if (strcmp(name, "glProgramUniformMatrix4x3dv") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix4x3dv == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix4x3dv = (__ctype_glProgramUniformMatrix4x3dv) eglGetProcAddr("glProgramUniformMatrix4x3dv");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix4x3dv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix4x3dv;
  }
  if (strcmp(name, "glProgramUniformMatrix4x3dvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix4x3dvEXT == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix4x3dvEXT = (__ctype_glProgramUniformMatrix4x3dvEXT) eglGetProcAddr("glProgramUniformMatrix4x3dvEXT");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix4x3dvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix4x3dvEXT;
  }
  if (strcmp(name, "glProgramUniformMatrix4x3fv") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix4x3fv == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix4x3fv = (__ctype_glProgramUniformMatrix4x3fv) eglGetProcAddr("glProgramUniformMatrix4x3fv");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix4x3fv == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix4x3fv;
  }
  if (strcmp(name, "glProgramUniformMatrix4x3fvEXT") == 0) {
    if (__glintercept_fnptr_glProgramUniformMatrix4x3fvEXT == NULL) {
      __glintercept_fnptr_glProgramUniformMatrix4x3fvEXT = (__ctype_glProgramUniformMatrix4x3fvEXT) eglGetProcAddr("glProgramUniformMatrix4x3fvEXT");
    }
    if (__glintercept_fnptr_glProgramUniformMatrix4x3fvEXT == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformMatrix4x3fvEXT;
  }
  if (strcmp(name, "glProgramUniformui64NV") == 0) {
    if (__glintercept_fnptr_glProgramUniformui64NV == NULL) {
      __glintercept_fnptr_glProgramUniformui64NV = (__ctype_glProgramUniformui64NV) eglGetProcAddr("glProgramUniformui64NV");
    }
    if (__glintercept_fnptr_glProgramUniformui64NV == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformui64NV;
  }
  if (strcmp(name, "glProgramUniformui64vNV") == 0) {
    if (__glintercept_fnptr_glProgramUniformui64vNV == NULL) {
      __glintercept_fnptr_glProgramUniformui64vNV = (__ctype_glProgramUniformui64vNV) eglGetProcAddr("glProgramUniformui64vNV");
    }
    if (__glintercept_fnptr_glProgramUniformui64vNV == NULL) return NULL;
    return (void*) __glintercept_glProgramUniformui64vNV;
  }
  if (strcmp(name, "glProgramVertexLimitNV") == 0) {
    if (__glintercept_fnptr_glProgramVertexLimitNV == NULL) {
      __glintercept_fnptr_glProgramVertexLimitNV = (__ctype_glProgramVertexLimitNV) eglGetProcAddr("glProgramVertexLimitNV");
    }
    if (__glintercept_fnptr_glProgramVertexLimitNV == NULL) return NULL;
    return (void*) __glintercept_glProgramVertexLimitNV;
  }
  if (strcmp(name, "glProvokingVertex") == 0) {
    if (__glintercept_fnptr_glProvokingVertex == NULL) {
      __glintercept_fnptr_glProvokingVertex = (__ctype_glProvokingVertex) eglGetProcAddr("glProvokingVertex");
    }
    if (__glintercept_fnptr_glProvokingVertex == NULL) return NULL;
    return (void*) __glintercept_glProvokingVertex;
  }
  if (strcmp(name, "glProvokingVertexEXT") == 0) {
    if (__glintercept_fnptr_glProvokingVertexEXT == NULL) {
      __glintercept_fnptr_glProvokingVertexEXT = (__ctype_glProvokingVertexEXT) eglGetProcAddr("glProvokingVertexEXT");
    }
    if (__glintercept_fnptr_glProvokingVertexEXT == NULL) return NULL;
    return (void*) __glintercept_glProvokingVertexEXT;
  }
  if (strcmp(name, "glPushAttrib") == 0) {
    if (__glintercept_fnptr_glPushAttrib == NULL) {
      __glintercept_fnptr_glPushAttrib = (__ctype_glPushAttrib) eglGetProcAddr("glPushAttrib");
    }
    if (__glintercept_fnptr_glPushAttrib == NULL) return NULL;
    return (void*) __glintercept_glPushAttrib;
  }
  if (strcmp(name, "glPushClientAttrib") == 0) {
    if (__glintercept_fnptr_glPushClientAttrib == NULL) {
      __glintercept_fnptr_glPushClientAttrib = (__ctype_glPushClientAttrib) eglGetProcAddr("glPushClientAttrib");
    }
    if (__glintercept_fnptr_glPushClientAttrib == NULL) return NULL;
    return (void*) __glintercept_glPushClientAttrib;
  }
  if (strcmp(name, "glPushClientAttribDefaultEXT") == 0) {
    if (__glintercept_fnptr_glPushClientAttribDefaultEXT == NULL) {
      __glintercept_fnptr_glPushClientAttribDefaultEXT = (__ctype_glPushClientAttribDefaultEXT) eglGetProcAddr("glPushClientAttribDefaultEXT");
    }
    if (__glintercept_fnptr_glPushClientAttribDefaultEXT == NULL) return NULL;
    return (void*) __glintercept_glPushClientAttribDefaultEXT;
  }
  if (strcmp(name, "glPushDebugGroup") == 0) {
    if (__glintercept_fnptr_glPushDebugGroup == NULL) {
      __glintercept_fnptr_glPushDebugGroup = (__ctype_glPushDebugGroup) eglGetProcAddr("glPushDebugGroup");
    }
    if (__glintercept_fnptr_glPushDebugGroup == NULL) return NULL;
    return (void*) __glintercept_glPushDebugGroup;
  }
  if (strcmp(name, "glPushDebugGroupKHR") == 0) {
    if (__glintercept_fnptr_glPushDebugGroupKHR == NULL) {
      __glintercept_fnptr_glPushDebugGroupKHR = (__ctype_glPushDebugGroupKHR) eglGetProcAddr("glPushDebugGroupKHR");
    }
    if (__glintercept_fnptr_glPushDebugGroupKHR == NULL) return NULL;
    return (void*) __glintercept_glPushDebugGroupKHR;
  }
  if (strcmp(name, "glPushGroupMarkerEXT") == 0) {
    if (__glintercept_fnptr_glPushGroupMarkerEXT == NULL) {
      __glintercept_fnptr_glPushGroupMarkerEXT = (__ctype_glPushGroupMarkerEXT) eglGetProcAddr("glPushGroupMarkerEXT");
    }
    if (__glintercept_fnptr_glPushGroupMarkerEXT == NULL) return NULL;
    return (void*) __glintercept_glPushGroupMarkerEXT;
  }
  if (strcmp(name, "glPushMatrix") == 0) {
    if (__glintercept_fnptr_glPushMatrix == NULL) {
      __glintercept_fnptr_glPushMatrix = (__ctype_glPushMatrix) eglGetProcAddr("glPushMatrix");
    }
    if (__glintercept_fnptr_glPushMatrix == NULL) return NULL;
    return (void*) __glintercept_glPushMatrix;
  }
  if (strcmp(name, "glPushName") == 0) {
    if (__glintercept_fnptr_glPushName == NULL) {
      __glintercept_fnptr_glPushName = (__ctype_glPushName) eglGetProcAddr("glPushName");
    }
    if (__glintercept_fnptr_glPushName == NULL) return NULL;
    return (void*) __glintercept_glPushName;
  }
  if (strcmp(name, "glQueryCounter") == 0) {
    if (__glintercept_fnptr_glQueryCounter == NULL) {
      __glintercept_fnptr_glQueryCounter = (__ctype_glQueryCounter) eglGetProcAddr("glQueryCounter");
    }
    if (__glintercept_fnptr_glQueryCounter == NULL) return NULL;
    return (void*) __glintercept_glQueryCounter;
  }
  if (strcmp(name, "glQueryCounterEXT") == 0) {
    if (__glintercept_fnptr_glQueryCounterEXT == NULL) {
      __glintercept_fnptr_glQueryCounterEXT = (__ctype_glQueryCounterEXT) eglGetProcAddr("glQueryCounterEXT");
    }
    if (__glintercept_fnptr_glQueryCounterEXT == NULL) return NULL;
    return (void*) __glintercept_glQueryCounterEXT;
  }
  if (strcmp(name, "glQueryMatrixxOES") == 0) {
    if (__glintercept_fnptr_glQueryMatrixxOES == NULL) {
      __glintercept_fnptr_glQueryMatrixxOES = (__ctype_glQueryMatrixxOES) eglGetProcAddr("glQueryMatrixxOES");
    }
    if (__glintercept_fnptr_glQueryMatrixxOES == NULL) return NULL;
    return (void*) __glintercept_glQueryMatrixxOES;
  }
  if (strcmp(name, "glQueryObjectParameteruiAMD") == 0) {
    if (__glintercept_fnptr_glQueryObjectParameteruiAMD == NULL) {
      __glintercept_fnptr_glQueryObjectParameteruiAMD = (__ctype_glQueryObjectParameteruiAMD) eglGetProcAddr("glQueryObjectParameteruiAMD");
    }
    if (__glintercept_fnptr_glQueryObjectParameteruiAMD == NULL) return NULL;
    return (void*) __glintercept_glQueryObjectParameteruiAMD;
  }
  if (strcmp(name, "glQueryResourceNV") == 0) {
    if (__glintercept_fnptr_glQueryResourceNV == NULL) {
      __glintercept_fnptr_glQueryResourceNV = (__ctype_glQueryResourceNV) eglGetProcAddr("glQueryResourceNV");
    }
    if (__glintercept_fnptr_glQueryResourceNV == NULL) return NULL;
    return (void*) __glintercept_glQueryResourceNV;
  }
  if (strcmp(name, "glQueryResourceTagNV") == 0) {
    if (__glintercept_fnptr_glQueryResourceTagNV == NULL) {
      __glintercept_fnptr_glQueryResourceTagNV = (__ctype_glQueryResourceTagNV) eglGetProcAddr("glQueryResourceTagNV");
    }
    if (__glintercept_fnptr_glQueryResourceTagNV == NULL) return NULL;
    return (void*) __glintercept_glQueryResourceTagNV;
  }
  if (strcmp(name, "glRasterPos2d") == 0) {
    if (__glintercept_fnptr_glRasterPos2d == NULL) {
      __glintercept_fnptr_glRasterPos2d = (__ctype_glRasterPos2d) eglGetProcAddr("glRasterPos2d");
    }
    if (__glintercept_fnptr_glRasterPos2d == NULL) return NULL;
    return (void*) __glintercept_glRasterPos2d;
  }
  if (strcmp(name, "glRasterPos2dv") == 0) {
    if (__glintercept_fnptr_glRasterPos2dv == NULL) {
      __glintercept_fnptr_glRasterPos2dv = (__ctype_glRasterPos2dv) eglGetProcAddr("glRasterPos2dv");
    }
    if (__glintercept_fnptr_glRasterPos2dv == NULL) return NULL;
    return (void*) __glintercept_glRasterPos2dv;
  }
  if (strcmp(name, "glRasterPos2f") == 0) {
    if (__glintercept_fnptr_glRasterPos2f == NULL) {
      __glintercept_fnptr_glRasterPos2f = (__ctype_glRasterPos2f) eglGetProcAddr("glRasterPos2f");
    }
    if (__glintercept_fnptr_glRasterPos2f == NULL) return NULL;
    return (void*) __glintercept_glRasterPos2f;
  }
  if (strcmp(name, "glRasterPos2fv") == 0) {
    if (__glintercept_fnptr_glRasterPos2fv == NULL) {
      __glintercept_fnptr_glRasterPos2fv = (__ctype_glRasterPos2fv) eglGetProcAddr("glRasterPos2fv");
    }
    if (__glintercept_fnptr_glRasterPos2fv == NULL) return NULL;
    return (void*) __glintercept_glRasterPos2fv;
  }
  if (strcmp(name, "glRasterPos2i") == 0) {
    if (__glintercept_fnptr_glRasterPos2i == NULL) {
      __glintercept_fnptr_glRasterPos2i = (__ctype_glRasterPos2i) eglGetProcAddr("glRasterPos2i");
    }
    if (__glintercept_fnptr_glRasterPos2i == NULL) return NULL;
    return (void*) __glintercept_glRasterPos2i;
  }
  if (strcmp(name, "glRasterPos2iv") == 0) {
    if (__glintercept_fnptr_glRasterPos2iv == NULL) {
      __glintercept_fnptr_glRasterPos2iv = (__ctype_glRasterPos2iv) eglGetProcAddr("glRasterPos2iv");
    }
    if (__glintercept_fnptr_glRasterPos2iv == NULL) return NULL;
    return (void*) __glintercept_glRasterPos2iv;
  }
  if (strcmp(name, "glRasterPos2s") == 0) {
    if (__glintercept_fnptr_glRasterPos2s == NULL) {
      __glintercept_fnptr_glRasterPos2s = (__ctype_glRasterPos2s) eglGetProcAddr("glRasterPos2s");
    }
    if (__glintercept_fnptr_glRasterPos2s == NULL) return NULL;
    return (void*) __glintercept_glRasterPos2s;
  }
  if (strcmp(name, "glRasterPos2sv") == 0) {
    if (__glintercept_fnptr_glRasterPos2sv == NULL) {
      __glintercept_fnptr_glRasterPos2sv = (__ctype_glRasterPos2sv) eglGetProcAddr("glRasterPos2sv");
    }
    if (__glintercept_fnptr_glRasterPos2sv == NULL) return NULL;
    return (void*) __glintercept_glRasterPos2sv;
  }
  if (strcmp(name, "glRasterPos2xOES") == 0) {
    if (__glintercept_fnptr_glRasterPos2xOES == NULL) {
      __glintercept_fnptr_glRasterPos2xOES = (__ctype_glRasterPos2xOES) eglGetProcAddr("glRasterPos2xOES");
    }
    if (__glintercept_fnptr_glRasterPos2xOES == NULL) return NULL;
    return (void*) __glintercept_glRasterPos2xOES;
  }
  if (strcmp(name, "glRasterPos2xvOES") == 0) {
    if (__glintercept_fnptr_glRasterPos2xvOES == NULL) {
      __glintercept_fnptr_glRasterPos2xvOES = (__ctype_glRasterPos2xvOES) eglGetProcAddr("glRasterPos2xvOES");
    }
    if (__glintercept_fnptr_glRasterPos2xvOES == NULL) return NULL;
    return (void*) __glintercept_glRasterPos2xvOES;
  }
  if (strcmp(name, "glRasterPos3d") == 0) {
    if (__glintercept_fnptr_glRasterPos3d == NULL) {
      __glintercept_fnptr_glRasterPos3d = (__ctype_glRasterPos3d) eglGetProcAddr("glRasterPos3d");
    }
    if (__glintercept_fnptr_glRasterPos3d == NULL) return NULL;
    return (void*) __glintercept_glRasterPos3d;
  }
  if (strcmp(name, "glRasterPos3dv") == 0) {
    if (__glintercept_fnptr_glRasterPos3dv == NULL) {
      __glintercept_fnptr_glRasterPos3dv = (__ctype_glRasterPos3dv) eglGetProcAddr("glRasterPos3dv");
    }
    if (__glintercept_fnptr_glRasterPos3dv == NULL) return NULL;
    return (void*) __glintercept_glRasterPos3dv;
  }
  if (strcmp(name, "glRasterPos3f") == 0) {
    if (__glintercept_fnptr_glRasterPos3f == NULL) {
      __glintercept_fnptr_glRasterPos3f = (__ctype_glRasterPos3f) eglGetProcAddr("glRasterPos3f");
    }
    if (__glintercept_fnptr_glRasterPos3f == NULL) return NULL;
    return (void*) __glintercept_glRasterPos3f;
  }
  if (strcmp(name, "glRasterPos3fv") == 0) {
    if (__glintercept_fnptr_glRasterPos3fv == NULL) {
      __glintercept_fnptr_glRasterPos3fv = (__ctype_glRasterPos3fv) eglGetProcAddr("glRasterPos3fv");
    }
    if (__glintercept_fnptr_glRasterPos3fv == NULL) return NULL;
    return (void*) __glintercept_glRasterPos3fv;
  }
  if (strcmp(name, "glRasterPos3i") == 0) {
    if (__glintercept_fnptr_glRasterPos3i == NULL) {
      __glintercept_fnptr_glRasterPos3i = (__ctype_glRasterPos3i) eglGetProcAddr("glRasterPos3i");
    }
    if (__glintercept_fnptr_glRasterPos3i == NULL) return NULL;
    return (void*) __glintercept_glRasterPos3i;
  }
  if (strcmp(name, "glRasterPos3iv") == 0) {
    if (__glintercept_fnptr_glRasterPos3iv == NULL) {
      __glintercept_fnptr_glRasterPos3iv = (__ctype_glRasterPos3iv) eglGetProcAddr("glRasterPos3iv");
    }
    if (__glintercept_fnptr_glRasterPos3iv == NULL) return NULL;
    return (void*) __glintercept_glRasterPos3iv;
  }
  if (strcmp(name, "glRasterPos3s") == 0) {
    if (__glintercept_fnptr_glRasterPos3s == NULL) {
      __glintercept_fnptr_glRasterPos3s = (__ctype_glRasterPos3s) eglGetProcAddr("glRasterPos3s");
    }
    if (__glintercept_fnptr_glRasterPos3s == NULL) return NULL;
    return (void*) __glintercept_glRasterPos3s;
  }
  if (strcmp(name, "glRasterPos3sv") == 0) {
    if (__glintercept_fnptr_glRasterPos3sv == NULL) {
      __glintercept_fnptr_glRasterPos3sv = (__ctype_glRasterPos3sv) eglGetProcAddr("glRasterPos3sv");
    }
    if (__glintercept_fnptr_glRasterPos3sv == NULL) return NULL;
    return (void*) __glintercept_glRasterPos3sv;
  }
  if (strcmp(name, "glRasterPos3xOES") == 0) {
    if (__glintercept_fnptr_glRasterPos3xOES == NULL) {
      __glintercept_fnptr_glRasterPos3xOES = (__ctype_glRasterPos3xOES) eglGetProcAddr("glRasterPos3xOES");
    }
    if (__glintercept_fnptr_glRasterPos3xOES == NULL) return NULL;
    return (void*) __glintercept_glRasterPos3xOES;
  }
  if (strcmp(name, "glRasterPos3xvOES") == 0) {
    if (__glintercept_fnptr_glRasterPos3xvOES == NULL) {
      __glintercept_fnptr_glRasterPos3xvOES = (__ctype_glRasterPos3xvOES) eglGetProcAddr("glRasterPos3xvOES");
    }
    if (__glintercept_fnptr_glRasterPos3xvOES == NULL) return NULL;
    return (void*) __glintercept_glRasterPos3xvOES;
  }
  if (strcmp(name, "glRasterPos4d") == 0) {
    if (__glintercept_fnptr_glRasterPos4d == NULL) {
      __glintercept_fnptr_glRasterPos4d = (__ctype_glRasterPos4d) eglGetProcAddr("glRasterPos4d");
    }
    if (__glintercept_fnptr_glRasterPos4d == NULL) return NULL;
    return (void*) __glintercept_glRasterPos4d;
  }
  if (strcmp(name, "glRasterPos4dv") == 0) {
    if (__glintercept_fnptr_glRasterPos4dv == NULL) {
      __glintercept_fnptr_glRasterPos4dv = (__ctype_glRasterPos4dv) eglGetProcAddr("glRasterPos4dv");
    }
    if (__glintercept_fnptr_glRasterPos4dv == NULL) return NULL;
    return (void*) __glintercept_glRasterPos4dv;
  }
  if (strcmp(name, "glRasterPos4f") == 0) {
    if (__glintercept_fnptr_glRasterPos4f == NULL) {
      __glintercept_fnptr_glRasterPos4f = (__ctype_glRasterPos4f) eglGetProcAddr("glRasterPos4f");
    }
    if (__glintercept_fnptr_glRasterPos4f == NULL) return NULL;
    return (void*) __glintercept_glRasterPos4f;
  }
  if (strcmp(name, "glRasterPos4fv") == 0) {
    if (__glintercept_fnptr_glRasterPos4fv == NULL) {
      __glintercept_fnptr_glRasterPos4fv = (__ctype_glRasterPos4fv) eglGetProcAddr("glRasterPos4fv");
    }
    if (__glintercept_fnptr_glRasterPos4fv == NULL) return NULL;
    return (void*) __glintercept_glRasterPos4fv;
  }
  if (strcmp(name, "glRasterPos4i") == 0) {
    if (__glintercept_fnptr_glRasterPos4i == NULL) {
      __glintercept_fnptr_glRasterPos4i = (__ctype_glRasterPos4i) eglGetProcAddr("glRasterPos4i");
    }
    if (__glintercept_fnptr_glRasterPos4i == NULL) return NULL;
    return (void*) __glintercept_glRasterPos4i;
  }
  if (strcmp(name, "glRasterPos4iv") == 0) {
    if (__glintercept_fnptr_glRasterPos4iv == NULL) {
      __glintercept_fnptr_glRasterPos4iv = (__ctype_glRasterPos4iv) eglGetProcAddr("glRasterPos4iv");
    }
    if (__glintercept_fnptr_glRasterPos4iv == NULL) return NULL;
    return (void*) __glintercept_glRasterPos4iv;
  }
  if (strcmp(name, "glRasterPos4s") == 0) {
    if (__glintercept_fnptr_glRasterPos4s == NULL) {
      __glintercept_fnptr_glRasterPos4s = (__ctype_glRasterPos4s) eglGetProcAddr("glRasterPos4s");
    }
    if (__glintercept_fnptr_glRasterPos4s == NULL) return NULL;
    return (void*) __glintercept_glRasterPos4s;
  }
  if (strcmp(name, "glRasterPos4sv") == 0) {
    if (__glintercept_fnptr_glRasterPos4sv == NULL) {
      __glintercept_fnptr_glRasterPos4sv = (__ctype_glRasterPos4sv) eglGetProcAddr("glRasterPos4sv");
    }
    if (__glintercept_fnptr_glRasterPos4sv == NULL) return NULL;
    return (void*) __glintercept_glRasterPos4sv;
  }
  if (strcmp(name, "glRasterPos4xOES") == 0) {
    if (__glintercept_fnptr_glRasterPos4xOES == NULL) {
      __glintercept_fnptr_glRasterPos4xOES = (__ctype_glRasterPos4xOES) eglGetProcAddr("glRasterPos4xOES");
    }
    if (__glintercept_fnptr_glRasterPos4xOES == NULL) return NULL;
    return (void*) __glintercept_glRasterPos4xOES;
  }
  if (strcmp(name, "glRasterPos4xvOES") == 0) {
    if (__glintercept_fnptr_glRasterPos4xvOES == NULL) {
      __glintercept_fnptr_glRasterPos4xvOES = (__ctype_glRasterPos4xvOES) eglGetProcAddr("glRasterPos4xvOES");
    }
    if (__glintercept_fnptr_glRasterPos4xvOES == NULL) return NULL;
    return (void*) __glintercept_glRasterPos4xvOES;
  }
  if (strcmp(name, "glRasterSamplesEXT") == 0) {
    if (__glintercept_fnptr_glRasterSamplesEXT == NULL) {
      __glintercept_fnptr_glRasterSamplesEXT = (__ctype_glRasterSamplesEXT) eglGetProcAddr("glRasterSamplesEXT");
    }
    if (__glintercept_fnptr_glRasterSamplesEXT == NULL) return NULL;
    return (void*) __glintercept_glRasterSamplesEXT;
  }
  if (strcmp(name, "glReadBuffer") == 0) {
    if (__glintercept_fnptr_glReadBuffer == NULL) {
      __glintercept_fnptr_glReadBuffer = (__ctype_glReadBuffer) eglGetProcAddr("glReadBuffer");
    }
    if (__glintercept_fnptr_glReadBuffer == NULL) return NULL;
    return (void*) __glintercept_glReadBuffer;
  }
  if (strcmp(name, "glReadBufferIndexedEXT") == 0) {
    if (__glintercept_fnptr_glReadBufferIndexedEXT == NULL) {
      __glintercept_fnptr_glReadBufferIndexedEXT = (__ctype_glReadBufferIndexedEXT) eglGetProcAddr("glReadBufferIndexedEXT");
    }
    if (__glintercept_fnptr_glReadBufferIndexedEXT == NULL) return NULL;
    return (void*) __glintercept_glReadBufferIndexedEXT;
  }
  if (strcmp(name, "glReadBufferNV") == 0) {
    if (__glintercept_fnptr_glReadBufferNV == NULL) {
      __glintercept_fnptr_glReadBufferNV = (__ctype_glReadBufferNV) eglGetProcAddr("glReadBufferNV");
    }
    if (__glintercept_fnptr_glReadBufferNV == NULL) return NULL;
    return (void*) __glintercept_glReadBufferNV;
  }
  if (strcmp(name, "glReadInstrumentsSGIX") == 0) {
    if (__glintercept_fnptr_glReadInstrumentsSGIX == NULL) {
      __glintercept_fnptr_glReadInstrumentsSGIX = (__ctype_glReadInstrumentsSGIX) eglGetProcAddr("glReadInstrumentsSGIX");
    }
    if (__glintercept_fnptr_glReadInstrumentsSGIX == NULL) return NULL;
    return (void*) __glintercept_glReadInstrumentsSGIX;
  }
  if (strcmp(name, "glReadPixels") == 0) {
    if (__glintercept_fnptr_glReadPixels == NULL) {
      __glintercept_fnptr_glReadPixels = (__ctype_glReadPixels) eglGetProcAddr("glReadPixels");
    }
    if (__glintercept_fnptr_glReadPixels == NULL) return NULL;
    return (void*) __glintercept_glReadPixels;
  }
  if (strcmp(name, "glReadnPixels") == 0) {
    if (__glintercept_fnptr_glReadnPixels == NULL) {
      __glintercept_fnptr_glReadnPixels = (__ctype_glReadnPixels) eglGetProcAddr("glReadnPixels");
    }
    if (__glintercept_fnptr_glReadnPixels == NULL) return NULL;
    return (void*) __glintercept_glReadnPixels;
  }
  if (strcmp(name, "glReadnPixelsARB") == 0) {
    if (__glintercept_fnptr_glReadnPixelsARB == NULL) {
      __glintercept_fnptr_glReadnPixelsARB = (__ctype_glReadnPixelsARB) eglGetProcAddr("glReadnPixelsARB");
    }
    if (__glintercept_fnptr_glReadnPixelsARB == NULL) return NULL;
    return (void*) __glintercept_glReadnPixelsARB;
  }
  if (strcmp(name, "glReadnPixelsEXT") == 0) {
    if (__glintercept_fnptr_glReadnPixelsEXT == NULL) {
      __glintercept_fnptr_glReadnPixelsEXT = (__ctype_glReadnPixelsEXT) eglGetProcAddr("glReadnPixelsEXT");
    }
    if (__glintercept_fnptr_glReadnPixelsEXT == NULL) return NULL;
    return (void*) __glintercept_glReadnPixelsEXT;
  }
  if (strcmp(name, "glReadnPixelsKHR") == 0) {
    if (__glintercept_fnptr_glReadnPixelsKHR == NULL) {
      __glintercept_fnptr_glReadnPixelsKHR = (__ctype_glReadnPixelsKHR) eglGetProcAddr("glReadnPixelsKHR");
    }
    if (__glintercept_fnptr_glReadnPixelsKHR == NULL) return NULL;
    return (void*) __glintercept_glReadnPixelsKHR;
  }
  if (strcmp(name, "glReleaseKeyedMutexWin32EXT") == 0) {
    if (__glintercept_fnptr_glReleaseKeyedMutexWin32EXT == NULL) {
      __glintercept_fnptr_glReleaseKeyedMutexWin32EXT = (__ctype_glReleaseKeyedMutexWin32EXT) eglGetProcAddr("glReleaseKeyedMutexWin32EXT");
    }
    if (__glintercept_fnptr_glReleaseKeyedMutexWin32EXT == NULL) return NULL;
    return (void*) __glintercept_glReleaseKeyedMutexWin32EXT;
  }
  if (strcmp(name, "glRectd") == 0) {
    if (__glintercept_fnptr_glRectd == NULL) {
      __glintercept_fnptr_glRectd = (__ctype_glRectd) eglGetProcAddr("glRectd");
    }
    if (__glintercept_fnptr_glRectd == NULL) return NULL;
    return (void*) __glintercept_glRectd;
  }
  if (strcmp(name, "glRectdv") == 0) {
    if (__glintercept_fnptr_glRectdv == NULL) {
      __glintercept_fnptr_glRectdv = (__ctype_glRectdv) eglGetProcAddr("glRectdv");
    }
    if (__glintercept_fnptr_glRectdv == NULL) return NULL;
    return (void*) __glintercept_glRectdv;
  }
  if (strcmp(name, "glRectf") == 0) {
    if (__glintercept_fnptr_glRectf == NULL) {
      __glintercept_fnptr_glRectf = (__ctype_glRectf) eglGetProcAddr("glRectf");
    }
    if (__glintercept_fnptr_glRectf == NULL) return NULL;
    return (void*) __glintercept_glRectf;
  }
  if (strcmp(name, "glRectfv") == 0) {
    if (__glintercept_fnptr_glRectfv == NULL) {
      __glintercept_fnptr_glRectfv = (__ctype_glRectfv) eglGetProcAddr("glRectfv");
    }
    if (__glintercept_fnptr_glRectfv == NULL) return NULL;
    return (void*) __glintercept_glRectfv;
  }
  if (strcmp(name, "glRecti") == 0) {
    if (__glintercept_fnptr_glRecti == NULL) {
      __glintercept_fnptr_glRecti = (__ctype_glRecti) eglGetProcAddr("glRecti");
    }
    if (__glintercept_fnptr_glRecti == NULL) return NULL;
    return (void*) __glintercept_glRecti;
  }
  if (strcmp(name, "glRectiv") == 0) {
    if (__glintercept_fnptr_glRectiv == NULL) {
      __glintercept_fnptr_glRectiv = (__ctype_glRectiv) eglGetProcAddr("glRectiv");
    }
    if (__glintercept_fnptr_glRectiv == NULL) return NULL;
    return (void*) __glintercept_glRectiv;
  }
  if (strcmp(name, "glRects") == 0) {
    if (__glintercept_fnptr_glRects == NULL) {
      __glintercept_fnptr_glRects = (__ctype_glRects) eglGetProcAddr("glRects");
    }
    if (__glintercept_fnptr_glRects == NULL) return NULL;
    return (void*) __glintercept_glRects;
  }
  if (strcmp(name, "glRectsv") == 0) {
    if (__glintercept_fnptr_glRectsv == NULL) {
      __glintercept_fnptr_glRectsv = (__ctype_glRectsv) eglGetProcAddr("glRectsv");
    }
    if (__glintercept_fnptr_glRectsv == NULL) return NULL;
    return (void*) __glintercept_glRectsv;
  }
  if (strcmp(name, "glRectxOES") == 0) {
    if (__glintercept_fnptr_glRectxOES == NULL) {
      __glintercept_fnptr_glRectxOES = (__ctype_glRectxOES) eglGetProcAddr("glRectxOES");
    }
    if (__glintercept_fnptr_glRectxOES == NULL) return NULL;
    return (void*) __glintercept_glRectxOES;
  }
  if (strcmp(name, "glRectxvOES") == 0) {
    if (__glintercept_fnptr_glRectxvOES == NULL) {
      __glintercept_fnptr_glRectxvOES = (__ctype_glRectxvOES) eglGetProcAddr("glRectxvOES");
    }
    if (__glintercept_fnptr_glRectxvOES == NULL) return NULL;
    return (void*) __glintercept_glRectxvOES;
  }
  if (strcmp(name, "glReferencePlaneSGIX") == 0) {
    if (__glintercept_fnptr_glReferencePlaneSGIX == NULL) {
      __glintercept_fnptr_glReferencePlaneSGIX = (__ctype_glReferencePlaneSGIX) eglGetProcAddr("glReferencePlaneSGIX");
    }
    if (__glintercept_fnptr_glReferencePlaneSGIX == NULL) return NULL;
    return (void*) __glintercept_glReferencePlaneSGIX;
  }
  if (strcmp(name, "glReleaseShaderCompiler") == 0) {
    if (__glintercept_fnptr_glReleaseShaderCompiler == NULL) {
      __glintercept_fnptr_glReleaseShaderCompiler = (__ctype_glReleaseShaderCompiler) eglGetProcAddr("glReleaseShaderCompiler");
    }
    if (__glintercept_fnptr_glReleaseShaderCompiler == NULL) return NULL;
    return (void*) __glintercept_glReleaseShaderCompiler;
  }
  if (strcmp(name, "glRenderGpuMaskNV") == 0) {
    if (__glintercept_fnptr_glRenderGpuMaskNV == NULL) {
      __glintercept_fnptr_glRenderGpuMaskNV = (__ctype_glRenderGpuMaskNV) eglGetProcAddr("glRenderGpuMaskNV");
    }
    if (__glintercept_fnptr_glRenderGpuMaskNV == NULL) return NULL;
    return (void*) __glintercept_glRenderGpuMaskNV;
  }
  if (strcmp(name, "glRenderMode") == 0) {
    if (__glintercept_fnptr_glRenderMode == NULL) {
      __glintercept_fnptr_glRenderMode = (__ctype_glRenderMode) eglGetProcAddr("glRenderMode");
    }
    if (__glintercept_fnptr_glRenderMode == NULL) return NULL;
    return (void*) __glintercept_glRenderMode;
  }
  if (strcmp(name, "glRenderbufferStorage") == 0) {
    if (__glintercept_fnptr_glRenderbufferStorage == NULL) {
      __glintercept_fnptr_glRenderbufferStorage = (__ctype_glRenderbufferStorage) eglGetProcAddr("glRenderbufferStorage");
    }
    if (__glintercept_fnptr_glRenderbufferStorage == NULL) return NULL;
    return (void*) __glintercept_glRenderbufferStorage;
  }
  if (strcmp(name, "glRenderbufferStorageEXT") == 0) {
    if (__glintercept_fnptr_glRenderbufferStorageEXT == NULL) {
      __glintercept_fnptr_glRenderbufferStorageEXT = (__ctype_glRenderbufferStorageEXT) eglGetProcAddr("glRenderbufferStorageEXT");
    }
    if (__glintercept_fnptr_glRenderbufferStorageEXT == NULL) return NULL;
    return (void*) __glintercept_glRenderbufferStorageEXT;
  }
  if (strcmp(name, "glRenderbufferStorageMultisample") == 0) {
    if (__glintercept_fnptr_glRenderbufferStorageMultisample == NULL) {
      __glintercept_fnptr_glRenderbufferStorageMultisample = (__ctype_glRenderbufferStorageMultisample) eglGetProcAddr("glRenderbufferStorageMultisample");
    }
    if (__glintercept_fnptr_glRenderbufferStorageMultisample == NULL) return NULL;
    return (void*) __glintercept_glRenderbufferStorageMultisample;
  }
  if (strcmp(name, "glRenderbufferStorageMultisampleANGLE") == 0) {
    if (__glintercept_fnptr_glRenderbufferStorageMultisampleANGLE == NULL) {
      __glintercept_fnptr_glRenderbufferStorageMultisampleANGLE = (__ctype_glRenderbufferStorageMultisampleANGLE) eglGetProcAddr("glRenderbufferStorageMultisampleANGLE");
    }
    if (__glintercept_fnptr_glRenderbufferStorageMultisampleANGLE == NULL) return NULL;
    return (void*) __glintercept_glRenderbufferStorageMultisampleANGLE;
  }
  if (strcmp(name, "glRenderbufferStorageMultisampleAPPLE") == 0) {
    if (__glintercept_fnptr_glRenderbufferStorageMultisampleAPPLE == NULL) {
      __glintercept_fnptr_glRenderbufferStorageMultisampleAPPLE = (__ctype_glRenderbufferStorageMultisampleAPPLE) eglGetProcAddr("glRenderbufferStorageMultisampleAPPLE");
    }
    if (__glintercept_fnptr_glRenderbufferStorageMultisampleAPPLE == NULL) return NULL;
    return (void*) __glintercept_glRenderbufferStorageMultisampleAPPLE;
  }
  if (strcmp(name, "glRenderbufferStorageMultisampleAdvancedAMD") == 0) {
    if (__glintercept_fnptr_glRenderbufferStorageMultisampleAdvancedAMD == NULL) {
      __glintercept_fnptr_glRenderbufferStorageMultisampleAdvancedAMD = (__ctype_glRenderbufferStorageMultisampleAdvancedAMD) eglGetProcAddr("glRenderbufferStorageMultisampleAdvancedAMD");
    }
    if (__glintercept_fnptr_glRenderbufferStorageMultisampleAdvancedAMD == NULL) return NULL;
    return (void*) __glintercept_glRenderbufferStorageMultisampleAdvancedAMD;
  }
  if (strcmp(name, "glRenderbufferStorageMultisampleCoverageNV") == 0) {
    if (__glintercept_fnptr_glRenderbufferStorageMultisampleCoverageNV == NULL) {
      __glintercept_fnptr_glRenderbufferStorageMultisampleCoverageNV = (__ctype_glRenderbufferStorageMultisampleCoverageNV) eglGetProcAddr("glRenderbufferStorageMultisampleCoverageNV");
    }
    if (__glintercept_fnptr_glRenderbufferStorageMultisampleCoverageNV == NULL) return NULL;
    return (void*) __glintercept_glRenderbufferStorageMultisampleCoverageNV;
  }
  if (strcmp(name, "glRenderbufferStorageMultisampleEXT") == 0) {
    if (__glintercept_fnptr_glRenderbufferStorageMultisampleEXT == NULL) {
      __glintercept_fnptr_glRenderbufferStorageMultisampleEXT = (__ctype_glRenderbufferStorageMultisampleEXT) eglGetProcAddr("glRenderbufferStorageMultisampleEXT");
    }
    if (__glintercept_fnptr_glRenderbufferStorageMultisampleEXT == NULL) return NULL;
    return (void*) __glintercept_glRenderbufferStorageMultisampleEXT;
  }
  if (strcmp(name, "glRenderbufferStorageMultisampleIMG") == 0) {
    if (__glintercept_fnptr_glRenderbufferStorageMultisampleIMG == NULL) {
      __glintercept_fnptr_glRenderbufferStorageMultisampleIMG = (__ctype_glRenderbufferStorageMultisampleIMG) eglGetProcAddr("glRenderbufferStorageMultisampleIMG");
    }
    if (__glintercept_fnptr_glRenderbufferStorageMultisampleIMG == NULL) return NULL;
    return (void*) __glintercept_glRenderbufferStorageMultisampleIMG;
  }
  if (strcmp(name, "glRenderbufferStorageMultisampleNV") == 0) {
    if (__glintercept_fnptr_glRenderbufferStorageMultisampleNV == NULL) {
      __glintercept_fnptr_glRenderbufferStorageMultisampleNV = (__ctype_glRenderbufferStorageMultisampleNV) eglGetProcAddr("glRenderbufferStorageMultisampleNV");
    }
    if (__glintercept_fnptr_glRenderbufferStorageMultisampleNV == NULL) return NULL;
    return (void*) __glintercept_glRenderbufferStorageMultisampleNV;
  }
  if (strcmp(name, "glRenderbufferStorageOES") == 0) {
    if (__glintercept_fnptr_glRenderbufferStorageOES == NULL) {
      __glintercept_fnptr_glRenderbufferStorageOES = (__ctype_glRenderbufferStorageOES) eglGetProcAddr("glRenderbufferStorageOES");
    }
    if (__glintercept_fnptr_glRenderbufferStorageOES == NULL) return NULL;
    return (void*) __glintercept_glRenderbufferStorageOES;
  }
  if (strcmp(name, "glReplacementCodePointerSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodePointerSUN == NULL) {
      __glintercept_fnptr_glReplacementCodePointerSUN = (__ctype_glReplacementCodePointerSUN) eglGetProcAddr("glReplacementCodePointerSUN");
    }
    if (__glintercept_fnptr_glReplacementCodePointerSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodePointerSUN;
  }
  if (strcmp(name, "glReplacementCodeubSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodeubSUN == NULL) {
      __glintercept_fnptr_glReplacementCodeubSUN = (__ctype_glReplacementCodeubSUN) eglGetProcAddr("glReplacementCodeubSUN");
    }
    if (__glintercept_fnptr_glReplacementCodeubSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodeubSUN;
  }
  if (strcmp(name, "glReplacementCodeubvSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodeubvSUN == NULL) {
      __glintercept_fnptr_glReplacementCodeubvSUN = (__ctype_glReplacementCodeubvSUN) eglGetProcAddr("glReplacementCodeubvSUN");
    }
    if (__glintercept_fnptr_glReplacementCodeubvSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodeubvSUN;
  }
  if (strcmp(name, "glReplacementCodeuiColor3fVertex3fSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodeuiColor3fVertex3fSUN == NULL) {
      __glintercept_fnptr_glReplacementCodeuiColor3fVertex3fSUN = (__ctype_glReplacementCodeuiColor3fVertex3fSUN) eglGetProcAddr("glReplacementCodeuiColor3fVertex3fSUN");
    }
    if (__glintercept_fnptr_glReplacementCodeuiColor3fVertex3fSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodeuiColor3fVertex3fSUN;
  }
  if (strcmp(name, "glReplacementCodeuiColor3fVertex3fvSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodeuiColor3fVertex3fvSUN == NULL) {
      __glintercept_fnptr_glReplacementCodeuiColor3fVertex3fvSUN = (__ctype_glReplacementCodeuiColor3fVertex3fvSUN) eglGetProcAddr("glReplacementCodeuiColor3fVertex3fvSUN");
    }
    if (__glintercept_fnptr_glReplacementCodeuiColor3fVertex3fvSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodeuiColor3fVertex3fvSUN;
  }
  if (strcmp(name, "glReplacementCodeuiColor4fNormal3fVertex3fSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodeuiColor4fNormal3fVertex3fSUN == NULL) {
      __glintercept_fnptr_glReplacementCodeuiColor4fNormal3fVertex3fSUN = (__ctype_glReplacementCodeuiColor4fNormal3fVertex3fSUN) eglGetProcAddr("glReplacementCodeuiColor4fNormal3fVertex3fSUN");
    }
    if (__glintercept_fnptr_glReplacementCodeuiColor4fNormal3fVertex3fSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
  }
  if (strcmp(name, "glReplacementCodeuiColor4fNormal3fVertex3fvSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodeuiColor4fNormal3fVertex3fvSUN == NULL) {
      __glintercept_fnptr_glReplacementCodeuiColor4fNormal3fVertex3fvSUN = (__ctype_glReplacementCodeuiColor4fNormal3fVertex3fvSUN) eglGetProcAddr("glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
    }
    if (__glintercept_fnptr_glReplacementCodeuiColor4fNormal3fVertex3fvSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
  }
  if (strcmp(name, "glReplacementCodeuiColor4ubVertex3fSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodeuiColor4ubVertex3fSUN == NULL) {
      __glintercept_fnptr_glReplacementCodeuiColor4ubVertex3fSUN = (__ctype_glReplacementCodeuiColor4ubVertex3fSUN) eglGetProcAddr("glReplacementCodeuiColor4ubVertex3fSUN");
    }
    if (__glintercept_fnptr_glReplacementCodeuiColor4ubVertex3fSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodeuiColor4ubVertex3fSUN;
  }
  if (strcmp(name, "glReplacementCodeuiColor4ubVertex3fvSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodeuiColor4ubVertex3fvSUN == NULL) {
      __glintercept_fnptr_glReplacementCodeuiColor4ubVertex3fvSUN = (__ctype_glReplacementCodeuiColor4ubVertex3fvSUN) eglGetProcAddr("glReplacementCodeuiColor4ubVertex3fvSUN");
    }
    if (__glintercept_fnptr_glReplacementCodeuiColor4ubVertex3fvSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodeuiColor4ubVertex3fvSUN;
  }
  if (strcmp(name, "glReplacementCodeuiNormal3fVertex3fSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodeuiNormal3fVertex3fSUN == NULL) {
      __glintercept_fnptr_glReplacementCodeuiNormal3fVertex3fSUN = (__ctype_glReplacementCodeuiNormal3fVertex3fSUN) eglGetProcAddr("glReplacementCodeuiNormal3fVertex3fSUN");
    }
    if (__glintercept_fnptr_glReplacementCodeuiNormal3fVertex3fSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodeuiNormal3fVertex3fSUN;
  }
  if (strcmp(name, "glReplacementCodeuiNormal3fVertex3fvSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodeuiNormal3fVertex3fvSUN == NULL) {
      __glintercept_fnptr_glReplacementCodeuiNormal3fVertex3fvSUN = (__ctype_glReplacementCodeuiNormal3fVertex3fvSUN) eglGetProcAddr("glReplacementCodeuiNormal3fVertex3fvSUN");
    }
    if (__glintercept_fnptr_glReplacementCodeuiNormal3fVertex3fvSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodeuiNormal3fVertex3fvSUN;
  }
  if (strcmp(name, "glReplacementCodeuiSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodeuiSUN == NULL) {
      __glintercept_fnptr_glReplacementCodeuiSUN = (__ctype_glReplacementCodeuiSUN) eglGetProcAddr("glReplacementCodeuiSUN");
    }
    if (__glintercept_fnptr_glReplacementCodeuiSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodeuiSUN;
  }
  if (strcmp(name, "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN == NULL) {
      __glintercept_fnptr_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = (__ctype_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) eglGetProcAddr("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
    }
    if (__glintercept_fnptr_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
  }
  if (strcmp(name, "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN == NULL) {
      __glintercept_fnptr_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = (__ctype_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) eglGetProcAddr("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
    }
    if (__glintercept_fnptr_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
  }
  if (strcmp(name, "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN == NULL) {
      __glintercept_fnptr_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = (__ctype_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) eglGetProcAddr("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
    }
    if (__glintercept_fnptr_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
  }
  if (strcmp(name, "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN == NULL) {
      __glintercept_fnptr_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = (__ctype_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) eglGetProcAddr("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
    }
    if (__glintercept_fnptr_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
  }
  if (strcmp(name, "glReplacementCodeuiTexCoord2fVertex3fSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodeuiTexCoord2fVertex3fSUN == NULL) {
      __glintercept_fnptr_glReplacementCodeuiTexCoord2fVertex3fSUN = (__ctype_glReplacementCodeuiTexCoord2fVertex3fSUN) eglGetProcAddr("glReplacementCodeuiTexCoord2fVertex3fSUN");
    }
    if (__glintercept_fnptr_glReplacementCodeuiTexCoord2fVertex3fSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodeuiTexCoord2fVertex3fSUN;
  }
  if (strcmp(name, "glReplacementCodeuiTexCoord2fVertex3fvSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodeuiTexCoord2fVertex3fvSUN == NULL) {
      __glintercept_fnptr_glReplacementCodeuiTexCoord2fVertex3fvSUN = (__ctype_glReplacementCodeuiTexCoord2fVertex3fvSUN) eglGetProcAddr("glReplacementCodeuiTexCoord2fVertex3fvSUN");
    }
    if (__glintercept_fnptr_glReplacementCodeuiTexCoord2fVertex3fvSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodeuiTexCoord2fVertex3fvSUN;
  }
  if (strcmp(name, "glReplacementCodeuiVertex3fSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodeuiVertex3fSUN == NULL) {
      __glintercept_fnptr_glReplacementCodeuiVertex3fSUN = (__ctype_glReplacementCodeuiVertex3fSUN) eglGetProcAddr("glReplacementCodeuiVertex3fSUN");
    }
    if (__glintercept_fnptr_glReplacementCodeuiVertex3fSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodeuiVertex3fSUN;
  }
  if (strcmp(name, "glReplacementCodeuiVertex3fvSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodeuiVertex3fvSUN == NULL) {
      __glintercept_fnptr_glReplacementCodeuiVertex3fvSUN = (__ctype_glReplacementCodeuiVertex3fvSUN) eglGetProcAddr("glReplacementCodeuiVertex3fvSUN");
    }
    if (__glintercept_fnptr_glReplacementCodeuiVertex3fvSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodeuiVertex3fvSUN;
  }
  if (strcmp(name, "glReplacementCodeuivSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodeuivSUN == NULL) {
      __glintercept_fnptr_glReplacementCodeuivSUN = (__ctype_glReplacementCodeuivSUN) eglGetProcAddr("glReplacementCodeuivSUN");
    }
    if (__glintercept_fnptr_glReplacementCodeuivSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodeuivSUN;
  }
  if (strcmp(name, "glReplacementCodeusSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodeusSUN == NULL) {
      __glintercept_fnptr_glReplacementCodeusSUN = (__ctype_glReplacementCodeusSUN) eglGetProcAddr("glReplacementCodeusSUN");
    }
    if (__glintercept_fnptr_glReplacementCodeusSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodeusSUN;
  }
  if (strcmp(name, "glReplacementCodeusvSUN") == 0) {
    if (__glintercept_fnptr_glReplacementCodeusvSUN == NULL) {
      __glintercept_fnptr_glReplacementCodeusvSUN = (__ctype_glReplacementCodeusvSUN) eglGetProcAddr("glReplacementCodeusvSUN");
    }
    if (__glintercept_fnptr_glReplacementCodeusvSUN == NULL) return NULL;
    return (void*) __glintercept_glReplacementCodeusvSUN;
  }
  if (strcmp(name, "glRequestResidentProgramsNV") == 0) {
    if (__glintercept_fnptr_glRequestResidentProgramsNV == NULL) {
      __glintercept_fnptr_glRequestResidentProgramsNV = (__ctype_glRequestResidentProgramsNV) eglGetProcAddr("glRequestResidentProgramsNV");
    }
    if (__glintercept_fnptr_glRequestResidentProgramsNV == NULL) return NULL;
    return (void*) __glintercept_glRequestResidentProgramsNV;
  }
  if (strcmp(name, "glResetHistogram") == 0) {
    if (__glintercept_fnptr_glResetHistogram == NULL) {
      __glintercept_fnptr_glResetHistogram = (__ctype_glResetHistogram) eglGetProcAddr("glResetHistogram");
    }
    if (__glintercept_fnptr_glResetHistogram == NULL) return NULL;
    return (void*) __glintercept_glResetHistogram;
  }
  if (strcmp(name, "glResetHistogramEXT") == 0) {
    if (__glintercept_fnptr_glResetHistogramEXT == NULL) {
      __glintercept_fnptr_glResetHistogramEXT = (__ctype_glResetHistogramEXT) eglGetProcAddr("glResetHistogramEXT");
    }
    if (__glintercept_fnptr_glResetHistogramEXT == NULL) return NULL;
    return (void*) __glintercept_glResetHistogramEXT;
  }
  if (strcmp(name, "glResetMemoryObjectParameterNV") == 0) {
    if (__glintercept_fnptr_glResetMemoryObjectParameterNV == NULL) {
      __glintercept_fnptr_glResetMemoryObjectParameterNV = (__ctype_glResetMemoryObjectParameterNV) eglGetProcAddr("glResetMemoryObjectParameterNV");
    }
    if (__glintercept_fnptr_glResetMemoryObjectParameterNV == NULL) return NULL;
    return (void*) __glintercept_glResetMemoryObjectParameterNV;
  }
  if (strcmp(name, "glResetMinmax") == 0) {
    if (__glintercept_fnptr_glResetMinmax == NULL) {
      __glintercept_fnptr_glResetMinmax = (__ctype_glResetMinmax) eglGetProcAddr("glResetMinmax");
    }
    if (__glintercept_fnptr_glResetMinmax == NULL) return NULL;
    return (void*) __glintercept_glResetMinmax;
  }
  if (strcmp(name, "glResetMinmaxEXT") == 0) {
    if (__glintercept_fnptr_glResetMinmaxEXT == NULL) {
      __glintercept_fnptr_glResetMinmaxEXT = (__ctype_glResetMinmaxEXT) eglGetProcAddr("glResetMinmaxEXT");
    }
    if (__glintercept_fnptr_glResetMinmaxEXT == NULL) return NULL;
    return (void*) __glintercept_glResetMinmaxEXT;
  }
  if (strcmp(name, "glResizeBuffersMESA") == 0) {
    if (__glintercept_fnptr_glResizeBuffersMESA == NULL) {
      __glintercept_fnptr_glResizeBuffersMESA = (__ctype_glResizeBuffersMESA) eglGetProcAddr("glResizeBuffersMESA");
    }
    if (__glintercept_fnptr_glResizeBuffersMESA == NULL) return NULL;
    return (void*) __glintercept_glResizeBuffersMESA;
  }
  if (strcmp(name, "glResolveDepthValuesNV") == 0) {
    if (__glintercept_fnptr_glResolveDepthValuesNV == NULL) {
      __glintercept_fnptr_glResolveDepthValuesNV = (__ctype_glResolveDepthValuesNV) eglGetProcAddr("glResolveDepthValuesNV");
    }
    if (__glintercept_fnptr_glResolveDepthValuesNV == NULL) return NULL;
    return (void*) __glintercept_glResolveDepthValuesNV;
  }
  if (strcmp(name, "glResolveMultisampleFramebufferAPPLE") == 0) {
    if (__glintercept_fnptr_glResolveMultisampleFramebufferAPPLE == NULL) {
      __glintercept_fnptr_glResolveMultisampleFramebufferAPPLE = (__ctype_glResolveMultisampleFramebufferAPPLE) eglGetProcAddr("glResolveMultisampleFramebufferAPPLE");
    }
    if (__glintercept_fnptr_glResolveMultisampleFramebufferAPPLE == NULL) return NULL;
    return (void*) __glintercept_glResolveMultisampleFramebufferAPPLE;
  }
  if (strcmp(name, "glResumeTransformFeedback") == 0) {
    if (__glintercept_fnptr_glResumeTransformFeedback == NULL) {
      __glintercept_fnptr_glResumeTransformFeedback = (__ctype_glResumeTransformFeedback) eglGetProcAddr("glResumeTransformFeedback");
    }
    if (__glintercept_fnptr_glResumeTransformFeedback == NULL) return NULL;
    return (void*) __glintercept_glResumeTransformFeedback;
  }
  if (strcmp(name, "glResumeTransformFeedbackNV") == 0) {
    if (__glintercept_fnptr_glResumeTransformFeedbackNV == NULL) {
      __glintercept_fnptr_glResumeTransformFeedbackNV = (__ctype_glResumeTransformFeedbackNV) eglGetProcAddr("glResumeTransformFeedbackNV");
    }
    if (__glintercept_fnptr_glResumeTransformFeedbackNV == NULL) return NULL;
    return (void*) __glintercept_glResumeTransformFeedbackNV;
  }
  if (strcmp(name, "glRotated") == 0) {
    if (__glintercept_fnptr_glRotated == NULL) {
      __glintercept_fnptr_glRotated = (__ctype_glRotated) eglGetProcAddr("glRotated");
    }
    if (__glintercept_fnptr_glRotated == NULL) return NULL;
    return (void*) __glintercept_glRotated;
  }
  if (strcmp(name, "glRotatef") == 0) {
    if (__glintercept_fnptr_glRotatef == NULL) {
      __glintercept_fnptr_glRotatef = (__ctype_glRotatef) eglGetProcAddr("glRotatef");
    }
    if (__glintercept_fnptr_glRotatef == NULL) return NULL;
    return (void*) __glintercept_glRotatef;
  }
  if (strcmp(name, "glRotatex") == 0) {
    if (__glintercept_fnptr_glRotatex == NULL) {
      __glintercept_fnptr_glRotatex = (__ctype_glRotatex) eglGetProcAddr("glRotatex");
    }
    if (__glintercept_fnptr_glRotatex == NULL) return NULL;
    return (void*) __glintercept_glRotatex;
  }
  if (strcmp(name, "glRotatexOES") == 0) {
    if (__glintercept_fnptr_glRotatexOES == NULL) {
      __glintercept_fnptr_glRotatexOES = (__ctype_glRotatexOES) eglGetProcAddr("glRotatexOES");
    }
    if (__glintercept_fnptr_glRotatexOES == NULL) return NULL;
    return (void*) __glintercept_glRotatexOES;
  }
  if (strcmp(name, "glSampleCoverage") == 0) {
    if (__glintercept_fnptr_glSampleCoverage == NULL) {
      __glintercept_fnptr_glSampleCoverage = (__ctype_glSampleCoverage) eglGetProcAddr("glSampleCoverage");
    }
    if (__glintercept_fnptr_glSampleCoverage == NULL) return NULL;
    return (void*) __glintercept_glSampleCoverage;
  }
  if (strcmp(name, "glSampleCoverageARB") == 0) {
    if (__glintercept_fnptr_glSampleCoverageARB == NULL) {
      __glintercept_fnptr_glSampleCoverageARB = (__ctype_glSampleCoverageARB) eglGetProcAddr("glSampleCoverageARB");
    }
    if (__glintercept_fnptr_glSampleCoverageARB == NULL) return NULL;
    return (void*) __glintercept_glSampleCoverageARB;
  }
  if (strcmp(name, "glSampleCoveragex") == 0) {
    if (__glintercept_fnptr_glSampleCoveragex == NULL) {
      __glintercept_fnptr_glSampleCoveragex = (__ctype_glSampleCoveragex) eglGetProcAddr("glSampleCoveragex");
    }
    if (__glintercept_fnptr_glSampleCoveragex == NULL) return NULL;
    return (void*) __glintercept_glSampleCoveragex;
  }
  if (strcmp(name, "glSampleCoveragexOES") == 0) {
    if (__glintercept_fnptr_glSampleCoveragexOES == NULL) {
      __glintercept_fnptr_glSampleCoveragexOES = (__ctype_glSampleCoveragexOES) eglGetProcAddr("glSampleCoveragexOES");
    }
    if (__glintercept_fnptr_glSampleCoveragexOES == NULL) return NULL;
    return (void*) __glintercept_glSampleCoveragexOES;
  }
  if (strcmp(name, "glSampleMapATI") == 0) {
    if (__glintercept_fnptr_glSampleMapATI == NULL) {
      __glintercept_fnptr_glSampleMapATI = (__ctype_glSampleMapATI) eglGetProcAddr("glSampleMapATI");
    }
    if (__glintercept_fnptr_glSampleMapATI == NULL) return NULL;
    return (void*) __glintercept_glSampleMapATI;
  }
  if (strcmp(name, "glSampleMaskEXT") == 0) {
    if (__glintercept_fnptr_glSampleMaskEXT == NULL) {
      __glintercept_fnptr_glSampleMaskEXT = (__ctype_glSampleMaskEXT) eglGetProcAddr("glSampleMaskEXT");
    }
    if (__glintercept_fnptr_glSampleMaskEXT == NULL) return NULL;
    return (void*) __glintercept_glSampleMaskEXT;
  }
  if (strcmp(name, "glSampleMaskIndexedNV") == 0) {
    if (__glintercept_fnptr_glSampleMaskIndexedNV == NULL) {
      __glintercept_fnptr_glSampleMaskIndexedNV = (__ctype_glSampleMaskIndexedNV) eglGetProcAddr("glSampleMaskIndexedNV");
    }
    if (__glintercept_fnptr_glSampleMaskIndexedNV == NULL) return NULL;
    return (void*) __glintercept_glSampleMaskIndexedNV;
  }
  if (strcmp(name, "glSampleMaskSGIS") == 0) {
    if (__glintercept_fnptr_glSampleMaskSGIS == NULL) {
      __glintercept_fnptr_glSampleMaskSGIS = (__ctype_glSampleMaskSGIS) eglGetProcAddr("glSampleMaskSGIS");
    }
    if (__glintercept_fnptr_glSampleMaskSGIS == NULL) return NULL;
    return (void*) __glintercept_glSampleMaskSGIS;
  }
  if (strcmp(name, "glSampleMaski") == 0) {
    if (__glintercept_fnptr_glSampleMaski == NULL) {
      __glintercept_fnptr_glSampleMaski = (__ctype_glSampleMaski) eglGetProcAddr("glSampleMaski");
    }
    if (__glintercept_fnptr_glSampleMaski == NULL) return NULL;
    return (void*) __glintercept_glSampleMaski;
  }
  if (strcmp(name, "glSamplePatternEXT") == 0) {
    if (__glintercept_fnptr_glSamplePatternEXT == NULL) {
      __glintercept_fnptr_glSamplePatternEXT = (__ctype_glSamplePatternEXT) eglGetProcAddr("glSamplePatternEXT");
    }
    if (__glintercept_fnptr_glSamplePatternEXT == NULL) return NULL;
    return (void*) __glintercept_glSamplePatternEXT;
  }
  if (strcmp(name, "glSamplePatternSGIS") == 0) {
    if (__glintercept_fnptr_glSamplePatternSGIS == NULL) {
      __glintercept_fnptr_glSamplePatternSGIS = (__ctype_glSamplePatternSGIS) eglGetProcAddr("glSamplePatternSGIS");
    }
    if (__glintercept_fnptr_glSamplePatternSGIS == NULL) return NULL;
    return (void*) __glintercept_glSamplePatternSGIS;
  }
  if (strcmp(name, "glSamplerParameterIiv") == 0) {
    if (__glintercept_fnptr_glSamplerParameterIiv == NULL) {
      __glintercept_fnptr_glSamplerParameterIiv = (__ctype_glSamplerParameterIiv) eglGetProcAddr("glSamplerParameterIiv");
    }
    if (__glintercept_fnptr_glSamplerParameterIiv == NULL) return NULL;
    return (void*) __glintercept_glSamplerParameterIiv;
  }
  if (strcmp(name, "glSamplerParameterIivEXT") == 0) {
    if (__glintercept_fnptr_glSamplerParameterIivEXT == NULL) {
      __glintercept_fnptr_glSamplerParameterIivEXT = (__ctype_glSamplerParameterIivEXT) eglGetProcAddr("glSamplerParameterIivEXT");
    }
    if (__glintercept_fnptr_glSamplerParameterIivEXT == NULL) return NULL;
    return (void*) __glintercept_glSamplerParameterIivEXT;
  }
  if (strcmp(name, "glSamplerParameterIivOES") == 0) {
    if (__glintercept_fnptr_glSamplerParameterIivOES == NULL) {
      __glintercept_fnptr_glSamplerParameterIivOES = (__ctype_glSamplerParameterIivOES) eglGetProcAddr("glSamplerParameterIivOES");
    }
    if (__glintercept_fnptr_glSamplerParameterIivOES == NULL) return NULL;
    return (void*) __glintercept_glSamplerParameterIivOES;
  }
  if (strcmp(name, "glSamplerParameterIuiv") == 0) {
    if (__glintercept_fnptr_glSamplerParameterIuiv == NULL) {
      __glintercept_fnptr_glSamplerParameterIuiv = (__ctype_glSamplerParameterIuiv) eglGetProcAddr("glSamplerParameterIuiv");
    }
    if (__glintercept_fnptr_glSamplerParameterIuiv == NULL) return NULL;
    return (void*) __glintercept_glSamplerParameterIuiv;
  }
  if (strcmp(name, "glSamplerParameterIuivEXT") == 0) {
    if (__glintercept_fnptr_glSamplerParameterIuivEXT == NULL) {
      __glintercept_fnptr_glSamplerParameterIuivEXT = (__ctype_glSamplerParameterIuivEXT) eglGetProcAddr("glSamplerParameterIuivEXT");
    }
    if (__glintercept_fnptr_glSamplerParameterIuivEXT == NULL) return NULL;
    return (void*) __glintercept_glSamplerParameterIuivEXT;
  }
  if (strcmp(name, "glSamplerParameterIuivOES") == 0) {
    if (__glintercept_fnptr_glSamplerParameterIuivOES == NULL) {
      __glintercept_fnptr_glSamplerParameterIuivOES = (__ctype_glSamplerParameterIuivOES) eglGetProcAddr("glSamplerParameterIuivOES");
    }
    if (__glintercept_fnptr_glSamplerParameterIuivOES == NULL) return NULL;
    return (void*) __glintercept_glSamplerParameterIuivOES;
  }
  if (strcmp(name, "glSamplerParameterf") == 0) {
    if (__glintercept_fnptr_glSamplerParameterf == NULL) {
      __glintercept_fnptr_glSamplerParameterf = (__ctype_glSamplerParameterf) eglGetProcAddr("glSamplerParameterf");
    }
    if (__glintercept_fnptr_glSamplerParameterf == NULL) return NULL;
    return (void*) __glintercept_glSamplerParameterf;
  }
  if (strcmp(name, "glSamplerParameterfv") == 0) {
    if (__glintercept_fnptr_glSamplerParameterfv == NULL) {
      __glintercept_fnptr_glSamplerParameterfv = (__ctype_glSamplerParameterfv) eglGetProcAddr("glSamplerParameterfv");
    }
    if (__glintercept_fnptr_glSamplerParameterfv == NULL) return NULL;
    return (void*) __glintercept_glSamplerParameterfv;
  }
  if (strcmp(name, "glSamplerParameteri") == 0) {
    if (__glintercept_fnptr_glSamplerParameteri == NULL) {
      __glintercept_fnptr_glSamplerParameteri = (__ctype_glSamplerParameteri) eglGetProcAddr("glSamplerParameteri");
    }
    if (__glintercept_fnptr_glSamplerParameteri == NULL) return NULL;
    return (void*) __glintercept_glSamplerParameteri;
  }
  if (strcmp(name, "glSamplerParameteriv") == 0) {
    if (__glintercept_fnptr_glSamplerParameteriv == NULL) {
      __glintercept_fnptr_glSamplerParameteriv = (__ctype_glSamplerParameteriv) eglGetProcAddr("glSamplerParameteriv");
    }
    if (__glintercept_fnptr_glSamplerParameteriv == NULL) return NULL;
    return (void*) __glintercept_glSamplerParameteriv;
  }
  if (strcmp(name, "glScaled") == 0) {
    if (__glintercept_fnptr_glScaled == NULL) {
      __glintercept_fnptr_glScaled = (__ctype_glScaled) eglGetProcAddr("glScaled");
    }
    if (__glintercept_fnptr_glScaled == NULL) return NULL;
    return (void*) __glintercept_glScaled;
  }
  if (strcmp(name, "glScalef") == 0) {
    if (__glintercept_fnptr_glScalef == NULL) {
      __glintercept_fnptr_glScalef = (__ctype_glScalef) eglGetProcAddr("glScalef");
    }
    if (__glintercept_fnptr_glScalef == NULL) return NULL;
    return (void*) __glintercept_glScalef;
  }
  if (strcmp(name, "glScalex") == 0) {
    if (__glintercept_fnptr_glScalex == NULL) {
      __glintercept_fnptr_glScalex = (__ctype_glScalex) eglGetProcAddr("glScalex");
    }
    if (__glintercept_fnptr_glScalex == NULL) return NULL;
    return (void*) __glintercept_glScalex;
  }
  if (strcmp(name, "glScalexOES") == 0) {
    if (__glintercept_fnptr_glScalexOES == NULL) {
      __glintercept_fnptr_glScalexOES = (__ctype_glScalexOES) eglGetProcAddr("glScalexOES");
    }
    if (__glintercept_fnptr_glScalexOES == NULL) return NULL;
    return (void*) __glintercept_glScalexOES;
  }
  if (strcmp(name, "glScissor") == 0) {
    if (__glintercept_fnptr_glScissor == NULL) {
      __glintercept_fnptr_glScissor = (__ctype_glScissor) eglGetProcAddr("glScissor");
    }
    if (__glintercept_fnptr_glScissor == NULL) return NULL;
    return (void*) __glintercept_glScissor;
  }
  if (strcmp(name, "glScissorArrayv") == 0) {
    if (__glintercept_fnptr_glScissorArrayv == NULL) {
      __glintercept_fnptr_glScissorArrayv = (__ctype_glScissorArrayv) eglGetProcAddr("glScissorArrayv");
    }
    if (__glintercept_fnptr_glScissorArrayv == NULL) return NULL;
    return (void*) __glintercept_glScissorArrayv;
  }
  if (strcmp(name, "glScissorArrayvNV") == 0) {
    if (__glintercept_fnptr_glScissorArrayvNV == NULL) {
      __glintercept_fnptr_glScissorArrayvNV = (__ctype_glScissorArrayvNV) eglGetProcAddr("glScissorArrayvNV");
    }
    if (__glintercept_fnptr_glScissorArrayvNV == NULL) return NULL;
    return (void*) __glintercept_glScissorArrayvNV;
  }
  if (strcmp(name, "glScissorArrayvOES") == 0) {
    if (__glintercept_fnptr_glScissorArrayvOES == NULL) {
      __glintercept_fnptr_glScissorArrayvOES = (__ctype_glScissorArrayvOES) eglGetProcAddr("glScissorArrayvOES");
    }
    if (__glintercept_fnptr_glScissorArrayvOES == NULL) return NULL;
    return (void*) __glintercept_glScissorArrayvOES;
  }
  if (strcmp(name, "glScissorExclusiveArrayvNV") == 0) {
    if (__glintercept_fnptr_glScissorExclusiveArrayvNV == NULL) {
      __glintercept_fnptr_glScissorExclusiveArrayvNV = (__ctype_glScissorExclusiveArrayvNV) eglGetProcAddr("glScissorExclusiveArrayvNV");
    }
    if (__glintercept_fnptr_glScissorExclusiveArrayvNV == NULL) return NULL;
    return (void*) __glintercept_glScissorExclusiveArrayvNV;
  }
  if (strcmp(name, "glScissorExclusiveNV") == 0) {
    if (__glintercept_fnptr_glScissorExclusiveNV == NULL) {
      __glintercept_fnptr_glScissorExclusiveNV = (__ctype_glScissorExclusiveNV) eglGetProcAddr("glScissorExclusiveNV");
    }
    if (__glintercept_fnptr_glScissorExclusiveNV == NULL) return NULL;
    return (void*) __glintercept_glScissorExclusiveNV;
  }
  if (strcmp(name, "glScissorIndexed") == 0) {
    if (__glintercept_fnptr_glScissorIndexed == NULL) {
      __glintercept_fnptr_glScissorIndexed = (__ctype_glScissorIndexed) eglGetProcAddr("glScissorIndexed");
    }
    if (__glintercept_fnptr_glScissorIndexed == NULL) return NULL;
    return (void*) __glintercept_glScissorIndexed;
  }
  if (strcmp(name, "glScissorIndexedNV") == 0) {
    if (__glintercept_fnptr_glScissorIndexedNV == NULL) {
      __glintercept_fnptr_glScissorIndexedNV = (__ctype_glScissorIndexedNV) eglGetProcAddr("glScissorIndexedNV");
    }
    if (__glintercept_fnptr_glScissorIndexedNV == NULL) return NULL;
    return (void*) __glintercept_glScissorIndexedNV;
  }
  if (strcmp(name, "glScissorIndexedOES") == 0) {
    if (__glintercept_fnptr_glScissorIndexedOES == NULL) {
      __glintercept_fnptr_glScissorIndexedOES = (__ctype_glScissorIndexedOES) eglGetProcAddr("glScissorIndexedOES");
    }
    if (__glintercept_fnptr_glScissorIndexedOES == NULL) return NULL;
    return (void*) __glintercept_glScissorIndexedOES;
  }
  if (strcmp(name, "glScissorIndexedv") == 0) {
    if (__glintercept_fnptr_glScissorIndexedv == NULL) {
      __glintercept_fnptr_glScissorIndexedv = (__ctype_glScissorIndexedv) eglGetProcAddr("glScissorIndexedv");
    }
    if (__glintercept_fnptr_glScissorIndexedv == NULL) return NULL;
    return (void*) __glintercept_glScissorIndexedv;
  }
  if (strcmp(name, "glScissorIndexedvNV") == 0) {
    if (__glintercept_fnptr_glScissorIndexedvNV == NULL) {
      __glintercept_fnptr_glScissorIndexedvNV = (__ctype_glScissorIndexedvNV) eglGetProcAddr("glScissorIndexedvNV");
    }
    if (__glintercept_fnptr_glScissorIndexedvNV == NULL) return NULL;
    return (void*) __glintercept_glScissorIndexedvNV;
  }
  if (strcmp(name, "glScissorIndexedvOES") == 0) {
    if (__glintercept_fnptr_glScissorIndexedvOES == NULL) {
      __glintercept_fnptr_glScissorIndexedvOES = (__ctype_glScissorIndexedvOES) eglGetProcAddr("glScissorIndexedvOES");
    }
    if (__glintercept_fnptr_glScissorIndexedvOES == NULL) return NULL;
    return (void*) __glintercept_glScissorIndexedvOES;
  }
  if (strcmp(name, "glSecondaryColor3b") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3b == NULL) {
      __glintercept_fnptr_glSecondaryColor3b = (__ctype_glSecondaryColor3b) eglGetProcAddr("glSecondaryColor3b");
    }
    if (__glintercept_fnptr_glSecondaryColor3b == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3b;
  }
  if (strcmp(name, "glSecondaryColor3bEXT") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3bEXT == NULL) {
      __glintercept_fnptr_glSecondaryColor3bEXT = (__ctype_glSecondaryColor3bEXT) eglGetProcAddr("glSecondaryColor3bEXT");
    }
    if (__glintercept_fnptr_glSecondaryColor3bEXT == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3bEXT;
  }
  if (strcmp(name, "glSecondaryColor3bv") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3bv == NULL) {
      __glintercept_fnptr_glSecondaryColor3bv = (__ctype_glSecondaryColor3bv) eglGetProcAddr("glSecondaryColor3bv");
    }
    if (__glintercept_fnptr_glSecondaryColor3bv == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3bv;
  }
  if (strcmp(name, "glSecondaryColor3bvEXT") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3bvEXT == NULL) {
      __glintercept_fnptr_glSecondaryColor3bvEXT = (__ctype_glSecondaryColor3bvEXT) eglGetProcAddr("glSecondaryColor3bvEXT");
    }
    if (__glintercept_fnptr_glSecondaryColor3bvEXT == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3bvEXT;
  }
  if (strcmp(name, "glSecondaryColor3d") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3d == NULL) {
      __glintercept_fnptr_glSecondaryColor3d = (__ctype_glSecondaryColor3d) eglGetProcAddr("glSecondaryColor3d");
    }
    if (__glintercept_fnptr_glSecondaryColor3d == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3d;
  }
  if (strcmp(name, "glSecondaryColor3dEXT") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3dEXT == NULL) {
      __glintercept_fnptr_glSecondaryColor3dEXT = (__ctype_glSecondaryColor3dEXT) eglGetProcAddr("glSecondaryColor3dEXT");
    }
    if (__glintercept_fnptr_glSecondaryColor3dEXT == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3dEXT;
  }
  if (strcmp(name, "glSecondaryColor3dv") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3dv == NULL) {
      __glintercept_fnptr_glSecondaryColor3dv = (__ctype_glSecondaryColor3dv) eglGetProcAddr("glSecondaryColor3dv");
    }
    if (__glintercept_fnptr_glSecondaryColor3dv == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3dv;
  }
  if (strcmp(name, "glSecondaryColor3dvEXT") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3dvEXT == NULL) {
      __glintercept_fnptr_glSecondaryColor3dvEXT = (__ctype_glSecondaryColor3dvEXT) eglGetProcAddr("glSecondaryColor3dvEXT");
    }
    if (__glintercept_fnptr_glSecondaryColor3dvEXT == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3dvEXT;
  }
  if (strcmp(name, "glSecondaryColor3f") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3f == NULL) {
      __glintercept_fnptr_glSecondaryColor3f = (__ctype_glSecondaryColor3f) eglGetProcAddr("glSecondaryColor3f");
    }
    if (__glintercept_fnptr_glSecondaryColor3f == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3f;
  }
  if (strcmp(name, "glSecondaryColor3fEXT") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3fEXT == NULL) {
      __glintercept_fnptr_glSecondaryColor3fEXT = (__ctype_glSecondaryColor3fEXT) eglGetProcAddr("glSecondaryColor3fEXT");
    }
    if (__glintercept_fnptr_glSecondaryColor3fEXT == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3fEXT;
  }
  if (strcmp(name, "glSecondaryColor3fv") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3fv == NULL) {
      __glintercept_fnptr_glSecondaryColor3fv = (__ctype_glSecondaryColor3fv) eglGetProcAddr("glSecondaryColor3fv");
    }
    if (__glintercept_fnptr_glSecondaryColor3fv == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3fv;
  }
  if (strcmp(name, "glSecondaryColor3fvEXT") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3fvEXT == NULL) {
      __glintercept_fnptr_glSecondaryColor3fvEXT = (__ctype_glSecondaryColor3fvEXT) eglGetProcAddr("glSecondaryColor3fvEXT");
    }
    if (__glintercept_fnptr_glSecondaryColor3fvEXT == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3fvEXT;
  }
  if (strcmp(name, "glSecondaryColor3hNV") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3hNV == NULL) {
      __glintercept_fnptr_glSecondaryColor3hNV = (__ctype_glSecondaryColor3hNV) eglGetProcAddr("glSecondaryColor3hNV");
    }
    if (__glintercept_fnptr_glSecondaryColor3hNV == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3hNV;
  }
  if (strcmp(name, "glSecondaryColor3hvNV") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3hvNV == NULL) {
      __glintercept_fnptr_glSecondaryColor3hvNV = (__ctype_glSecondaryColor3hvNV) eglGetProcAddr("glSecondaryColor3hvNV");
    }
    if (__glintercept_fnptr_glSecondaryColor3hvNV == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3hvNV;
  }
  if (strcmp(name, "glSecondaryColor3i") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3i == NULL) {
      __glintercept_fnptr_glSecondaryColor3i = (__ctype_glSecondaryColor3i) eglGetProcAddr("glSecondaryColor3i");
    }
    if (__glintercept_fnptr_glSecondaryColor3i == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3i;
  }
  if (strcmp(name, "glSecondaryColor3iEXT") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3iEXT == NULL) {
      __glintercept_fnptr_glSecondaryColor3iEXT = (__ctype_glSecondaryColor3iEXT) eglGetProcAddr("glSecondaryColor3iEXT");
    }
    if (__glintercept_fnptr_glSecondaryColor3iEXT == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3iEXT;
  }
  if (strcmp(name, "glSecondaryColor3iv") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3iv == NULL) {
      __glintercept_fnptr_glSecondaryColor3iv = (__ctype_glSecondaryColor3iv) eglGetProcAddr("glSecondaryColor3iv");
    }
    if (__glintercept_fnptr_glSecondaryColor3iv == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3iv;
  }
  if (strcmp(name, "glSecondaryColor3ivEXT") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3ivEXT == NULL) {
      __glintercept_fnptr_glSecondaryColor3ivEXT = (__ctype_glSecondaryColor3ivEXT) eglGetProcAddr("glSecondaryColor3ivEXT");
    }
    if (__glintercept_fnptr_glSecondaryColor3ivEXT == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3ivEXT;
  }
  if (strcmp(name, "glSecondaryColor3s") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3s == NULL) {
      __glintercept_fnptr_glSecondaryColor3s = (__ctype_glSecondaryColor3s) eglGetProcAddr("glSecondaryColor3s");
    }
    if (__glintercept_fnptr_glSecondaryColor3s == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3s;
  }
  if (strcmp(name, "glSecondaryColor3sEXT") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3sEXT == NULL) {
      __glintercept_fnptr_glSecondaryColor3sEXT = (__ctype_glSecondaryColor3sEXT) eglGetProcAddr("glSecondaryColor3sEXT");
    }
    if (__glintercept_fnptr_glSecondaryColor3sEXT == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3sEXT;
  }
  if (strcmp(name, "glSecondaryColor3sv") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3sv == NULL) {
      __glintercept_fnptr_glSecondaryColor3sv = (__ctype_glSecondaryColor3sv) eglGetProcAddr("glSecondaryColor3sv");
    }
    if (__glintercept_fnptr_glSecondaryColor3sv == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3sv;
  }
  if (strcmp(name, "glSecondaryColor3svEXT") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3svEXT == NULL) {
      __glintercept_fnptr_glSecondaryColor3svEXT = (__ctype_glSecondaryColor3svEXT) eglGetProcAddr("glSecondaryColor3svEXT");
    }
    if (__glintercept_fnptr_glSecondaryColor3svEXT == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3svEXT;
  }
  if (strcmp(name, "glSecondaryColor3ub") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3ub == NULL) {
      __glintercept_fnptr_glSecondaryColor3ub = (__ctype_glSecondaryColor3ub) eglGetProcAddr("glSecondaryColor3ub");
    }
    if (__glintercept_fnptr_glSecondaryColor3ub == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3ub;
  }
  if (strcmp(name, "glSecondaryColor3ubEXT") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3ubEXT == NULL) {
      __glintercept_fnptr_glSecondaryColor3ubEXT = (__ctype_glSecondaryColor3ubEXT) eglGetProcAddr("glSecondaryColor3ubEXT");
    }
    if (__glintercept_fnptr_glSecondaryColor3ubEXT == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3ubEXT;
  }
  if (strcmp(name, "glSecondaryColor3ubv") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3ubv == NULL) {
      __glintercept_fnptr_glSecondaryColor3ubv = (__ctype_glSecondaryColor3ubv) eglGetProcAddr("glSecondaryColor3ubv");
    }
    if (__glintercept_fnptr_glSecondaryColor3ubv == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3ubv;
  }
  if (strcmp(name, "glSecondaryColor3ubvEXT") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3ubvEXT == NULL) {
      __glintercept_fnptr_glSecondaryColor3ubvEXT = (__ctype_glSecondaryColor3ubvEXT) eglGetProcAddr("glSecondaryColor3ubvEXT");
    }
    if (__glintercept_fnptr_glSecondaryColor3ubvEXT == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3ubvEXT;
  }
  if (strcmp(name, "glSecondaryColor3ui") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3ui == NULL) {
      __glintercept_fnptr_glSecondaryColor3ui = (__ctype_glSecondaryColor3ui) eglGetProcAddr("glSecondaryColor3ui");
    }
    if (__glintercept_fnptr_glSecondaryColor3ui == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3ui;
  }
  if (strcmp(name, "glSecondaryColor3uiEXT") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3uiEXT == NULL) {
      __glintercept_fnptr_glSecondaryColor3uiEXT = (__ctype_glSecondaryColor3uiEXT) eglGetProcAddr("glSecondaryColor3uiEXT");
    }
    if (__glintercept_fnptr_glSecondaryColor3uiEXT == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3uiEXT;
  }
  if (strcmp(name, "glSecondaryColor3uiv") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3uiv == NULL) {
      __glintercept_fnptr_glSecondaryColor3uiv = (__ctype_glSecondaryColor3uiv) eglGetProcAddr("glSecondaryColor3uiv");
    }
    if (__glintercept_fnptr_glSecondaryColor3uiv == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3uiv;
  }
  if (strcmp(name, "glSecondaryColor3uivEXT") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3uivEXT == NULL) {
      __glintercept_fnptr_glSecondaryColor3uivEXT = (__ctype_glSecondaryColor3uivEXT) eglGetProcAddr("glSecondaryColor3uivEXT");
    }
    if (__glintercept_fnptr_glSecondaryColor3uivEXT == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3uivEXT;
  }
  if (strcmp(name, "glSecondaryColor3us") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3us == NULL) {
      __glintercept_fnptr_glSecondaryColor3us = (__ctype_glSecondaryColor3us) eglGetProcAddr("glSecondaryColor3us");
    }
    if (__glintercept_fnptr_glSecondaryColor3us == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3us;
  }
  if (strcmp(name, "glSecondaryColor3usEXT") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3usEXT == NULL) {
      __glintercept_fnptr_glSecondaryColor3usEXT = (__ctype_glSecondaryColor3usEXT) eglGetProcAddr("glSecondaryColor3usEXT");
    }
    if (__glintercept_fnptr_glSecondaryColor3usEXT == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3usEXT;
  }
  if (strcmp(name, "glSecondaryColor3usv") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3usv == NULL) {
      __glintercept_fnptr_glSecondaryColor3usv = (__ctype_glSecondaryColor3usv) eglGetProcAddr("glSecondaryColor3usv");
    }
    if (__glintercept_fnptr_glSecondaryColor3usv == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3usv;
  }
  if (strcmp(name, "glSecondaryColor3usvEXT") == 0) {
    if (__glintercept_fnptr_glSecondaryColor3usvEXT == NULL) {
      __glintercept_fnptr_glSecondaryColor3usvEXT = (__ctype_glSecondaryColor3usvEXT) eglGetProcAddr("glSecondaryColor3usvEXT");
    }
    if (__glintercept_fnptr_glSecondaryColor3usvEXT == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColor3usvEXT;
  }
  if (strcmp(name, "glSecondaryColorFormatNV") == 0) {
    if (__glintercept_fnptr_glSecondaryColorFormatNV == NULL) {
      __glintercept_fnptr_glSecondaryColorFormatNV = (__ctype_glSecondaryColorFormatNV) eglGetProcAddr("glSecondaryColorFormatNV");
    }
    if (__glintercept_fnptr_glSecondaryColorFormatNV == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColorFormatNV;
  }
  if (strcmp(name, "glSecondaryColorP3ui") == 0) {
    if (__glintercept_fnptr_glSecondaryColorP3ui == NULL) {
      __glintercept_fnptr_glSecondaryColorP3ui = (__ctype_glSecondaryColorP3ui) eglGetProcAddr("glSecondaryColorP3ui");
    }
    if (__glintercept_fnptr_glSecondaryColorP3ui == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColorP3ui;
  }
  if (strcmp(name, "glSecondaryColorP3uiv") == 0) {
    if (__glintercept_fnptr_glSecondaryColorP3uiv == NULL) {
      __glintercept_fnptr_glSecondaryColorP3uiv = (__ctype_glSecondaryColorP3uiv) eglGetProcAddr("glSecondaryColorP3uiv");
    }
    if (__glintercept_fnptr_glSecondaryColorP3uiv == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColorP3uiv;
  }
  if (strcmp(name, "glSecondaryColorPointer") == 0) {
    if (__glintercept_fnptr_glSecondaryColorPointer == NULL) {
      __glintercept_fnptr_glSecondaryColorPointer = (__ctype_glSecondaryColorPointer) eglGetProcAddr("glSecondaryColorPointer");
    }
    if (__glintercept_fnptr_glSecondaryColorPointer == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColorPointer;
  }
  if (strcmp(name, "glSecondaryColorPointerEXT") == 0) {
    if (__glintercept_fnptr_glSecondaryColorPointerEXT == NULL) {
      __glintercept_fnptr_glSecondaryColorPointerEXT = (__ctype_glSecondaryColorPointerEXT) eglGetProcAddr("glSecondaryColorPointerEXT");
    }
    if (__glintercept_fnptr_glSecondaryColorPointerEXT == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColorPointerEXT;
  }
  if (strcmp(name, "glSecondaryColorPointerListIBM") == 0) {
    if (__glintercept_fnptr_glSecondaryColorPointerListIBM == NULL) {
      __glintercept_fnptr_glSecondaryColorPointerListIBM = (__ctype_glSecondaryColorPointerListIBM) eglGetProcAddr("glSecondaryColorPointerListIBM");
    }
    if (__glintercept_fnptr_glSecondaryColorPointerListIBM == NULL) return NULL;
    return (void*) __glintercept_glSecondaryColorPointerListIBM;
  }
  if (strcmp(name, "glSelectBuffer") == 0) {
    if (__glintercept_fnptr_glSelectBuffer == NULL) {
      __glintercept_fnptr_glSelectBuffer = (__ctype_glSelectBuffer) eglGetProcAddr("glSelectBuffer");
    }
    if (__glintercept_fnptr_glSelectBuffer == NULL) return NULL;
    return (void*) __glintercept_glSelectBuffer;
  }
  if (strcmp(name, "glSelectPerfMonitorCountersAMD") == 0) {
    if (__glintercept_fnptr_glSelectPerfMonitorCountersAMD == NULL) {
      __glintercept_fnptr_glSelectPerfMonitorCountersAMD = (__ctype_glSelectPerfMonitorCountersAMD) eglGetProcAddr("glSelectPerfMonitorCountersAMD");
    }
    if (__glintercept_fnptr_glSelectPerfMonitorCountersAMD == NULL) return NULL;
    return (void*) __glintercept_glSelectPerfMonitorCountersAMD;
  }
  if (strcmp(name, "glSemaphoreParameterivNV") == 0) {
    if (__glintercept_fnptr_glSemaphoreParameterivNV == NULL) {
      __glintercept_fnptr_glSemaphoreParameterivNV = (__ctype_glSemaphoreParameterivNV) eglGetProcAddr("glSemaphoreParameterivNV");
    }
    if (__glintercept_fnptr_glSemaphoreParameterivNV == NULL) return NULL;
    return (void*) __glintercept_glSemaphoreParameterivNV;
  }
  if (strcmp(name, "glSemaphoreParameterui64vEXT") == 0) {
    if (__glintercept_fnptr_glSemaphoreParameterui64vEXT == NULL) {
      __glintercept_fnptr_glSemaphoreParameterui64vEXT = (__ctype_glSemaphoreParameterui64vEXT) eglGetProcAddr("glSemaphoreParameterui64vEXT");
    }
    if (__glintercept_fnptr_glSemaphoreParameterui64vEXT == NULL) return NULL;
    return (void*) __glintercept_glSemaphoreParameterui64vEXT;
  }
  if (strcmp(name, "glSeparableFilter2D") == 0) {
    if (__glintercept_fnptr_glSeparableFilter2D == NULL) {
      __glintercept_fnptr_glSeparableFilter2D = (__ctype_glSeparableFilter2D) eglGetProcAddr("glSeparableFilter2D");
    }
    if (__glintercept_fnptr_glSeparableFilter2D == NULL) return NULL;
    return (void*) __glintercept_glSeparableFilter2D;
  }
  if (strcmp(name, "glSeparableFilter2DEXT") == 0) {
    if (__glintercept_fnptr_glSeparableFilter2DEXT == NULL) {
      __glintercept_fnptr_glSeparableFilter2DEXT = (__ctype_glSeparableFilter2DEXT) eglGetProcAddr("glSeparableFilter2DEXT");
    }
    if (__glintercept_fnptr_glSeparableFilter2DEXT == NULL) return NULL;
    return (void*) __glintercept_glSeparableFilter2DEXT;
  }
  if (strcmp(name, "glSetFenceAPPLE") == 0) {
    if (__glintercept_fnptr_glSetFenceAPPLE == NULL) {
      __glintercept_fnptr_glSetFenceAPPLE = (__ctype_glSetFenceAPPLE) eglGetProcAddr("glSetFenceAPPLE");
    }
    if (__glintercept_fnptr_glSetFenceAPPLE == NULL) return NULL;
    return (void*) __glintercept_glSetFenceAPPLE;
  }
  if (strcmp(name, "glSetFenceNV") == 0) {
    if (__glintercept_fnptr_glSetFenceNV == NULL) {
      __glintercept_fnptr_glSetFenceNV = (__ctype_glSetFenceNV) eglGetProcAddr("glSetFenceNV");
    }
    if (__glintercept_fnptr_glSetFenceNV == NULL) return NULL;
    return (void*) __glintercept_glSetFenceNV;
  }
  if (strcmp(name, "glSetFragmentShaderConstantATI") == 0) {
    if (__glintercept_fnptr_glSetFragmentShaderConstantATI == NULL) {
      __glintercept_fnptr_glSetFragmentShaderConstantATI = (__ctype_glSetFragmentShaderConstantATI) eglGetProcAddr("glSetFragmentShaderConstantATI");
    }
    if (__glintercept_fnptr_glSetFragmentShaderConstantATI == NULL) return NULL;
    return (void*) __glintercept_glSetFragmentShaderConstantATI;
  }
  if (strcmp(name, "glSetInvariantEXT") == 0) {
    if (__glintercept_fnptr_glSetInvariantEXT == NULL) {
      __glintercept_fnptr_glSetInvariantEXT = (__ctype_glSetInvariantEXT) eglGetProcAddr("glSetInvariantEXT");
    }
    if (__glintercept_fnptr_glSetInvariantEXT == NULL) return NULL;
    return (void*) __glintercept_glSetInvariantEXT;
  }
  if (strcmp(name, "glSetLocalConstantEXT") == 0) {
    if (__glintercept_fnptr_glSetLocalConstantEXT == NULL) {
      __glintercept_fnptr_glSetLocalConstantEXT = (__ctype_glSetLocalConstantEXT) eglGetProcAddr("glSetLocalConstantEXT");
    }
    if (__glintercept_fnptr_glSetLocalConstantEXT == NULL) return NULL;
    return (void*) __glintercept_glSetLocalConstantEXT;
  }
  if (strcmp(name, "glSetMultisamplefvAMD") == 0) {
    if (__glintercept_fnptr_glSetMultisamplefvAMD == NULL) {
      __glintercept_fnptr_glSetMultisamplefvAMD = (__ctype_glSetMultisamplefvAMD) eglGetProcAddr("glSetMultisamplefvAMD");
    }
    if (__glintercept_fnptr_glSetMultisamplefvAMD == NULL) return NULL;
    return (void*) __glintercept_glSetMultisamplefvAMD;
  }
  if (strcmp(name, "glShadeModel") == 0) {
    if (__glintercept_fnptr_glShadeModel == NULL) {
      __glintercept_fnptr_glShadeModel = (__ctype_glShadeModel) eglGetProcAddr("glShadeModel");
    }
    if (__glintercept_fnptr_glShadeModel == NULL) return NULL;
    return (void*) __glintercept_glShadeModel;
  }
  if (strcmp(name, "glShaderBinary") == 0) {
    if (__glintercept_fnptr_glShaderBinary == NULL) {
      __glintercept_fnptr_glShaderBinary = (__ctype_glShaderBinary) eglGetProcAddr("glShaderBinary");
    }
    if (__glintercept_fnptr_glShaderBinary == NULL) return NULL;
    return (void*) __glintercept_glShaderBinary;
  }
  if (strcmp(name, "glShaderOp1EXT") == 0) {
    if (__glintercept_fnptr_glShaderOp1EXT == NULL) {
      __glintercept_fnptr_glShaderOp1EXT = (__ctype_glShaderOp1EXT) eglGetProcAddr("glShaderOp1EXT");
    }
    if (__glintercept_fnptr_glShaderOp1EXT == NULL) return NULL;
    return (void*) __glintercept_glShaderOp1EXT;
  }
  if (strcmp(name, "glShaderOp2EXT") == 0) {
    if (__glintercept_fnptr_glShaderOp2EXT == NULL) {
      __glintercept_fnptr_glShaderOp2EXT = (__ctype_glShaderOp2EXT) eglGetProcAddr("glShaderOp2EXT");
    }
    if (__glintercept_fnptr_glShaderOp2EXT == NULL) return NULL;
    return (void*) __glintercept_glShaderOp2EXT;
  }
  if (strcmp(name, "glShaderOp3EXT") == 0) {
    if (__glintercept_fnptr_glShaderOp3EXT == NULL) {
      __glintercept_fnptr_glShaderOp3EXT = (__ctype_glShaderOp3EXT) eglGetProcAddr("glShaderOp3EXT");
    }
    if (__glintercept_fnptr_glShaderOp3EXT == NULL) return NULL;
    return (void*) __glintercept_glShaderOp3EXT;
  }
  if (strcmp(name, "glShaderSource") == 0) {
    if (__glintercept_fnptr_glShaderSource == NULL) {
      __glintercept_fnptr_glShaderSource = (__ctype_glShaderSource) eglGetProcAddr("glShaderSource");
    }
    if (__glintercept_fnptr_glShaderSource == NULL) return NULL;
    return (void*) __glintercept_glShaderSource;
  }
  if (strcmp(name, "glShaderSourceARB") == 0) {
    if (__glintercept_fnptr_glShaderSourceARB == NULL) {
      __glintercept_fnptr_glShaderSourceARB = (__ctype_glShaderSourceARB) eglGetProcAddr("glShaderSourceARB");
    }
    if (__glintercept_fnptr_glShaderSourceARB == NULL) return NULL;
    return (void*) __glintercept_glShaderSourceARB;
  }
  if (strcmp(name, "glShaderStorageBlockBinding") == 0) {
    if (__glintercept_fnptr_glShaderStorageBlockBinding == NULL) {
      __glintercept_fnptr_glShaderStorageBlockBinding = (__ctype_glShaderStorageBlockBinding) eglGetProcAddr("glShaderStorageBlockBinding");
    }
    if (__glintercept_fnptr_glShaderStorageBlockBinding == NULL) return NULL;
    return (void*) __glintercept_glShaderStorageBlockBinding;
  }
  if (strcmp(name, "glShadingRateImageBarrierNV") == 0) {
    if (__glintercept_fnptr_glShadingRateImageBarrierNV == NULL) {
      __glintercept_fnptr_glShadingRateImageBarrierNV = (__ctype_glShadingRateImageBarrierNV) eglGetProcAddr("glShadingRateImageBarrierNV");
    }
    if (__glintercept_fnptr_glShadingRateImageBarrierNV == NULL) return NULL;
    return (void*) __glintercept_glShadingRateImageBarrierNV;
  }
  if (strcmp(name, "glShadingRateQCOM") == 0) {
    if (__glintercept_fnptr_glShadingRateQCOM == NULL) {
      __glintercept_fnptr_glShadingRateQCOM = (__ctype_glShadingRateQCOM) eglGetProcAddr("glShadingRateQCOM");
    }
    if (__glintercept_fnptr_glShadingRateQCOM == NULL) return NULL;
    return (void*) __glintercept_glShadingRateQCOM;
  }
  if (strcmp(name, "glShadingRateImagePaletteNV") == 0) {
    if (__glintercept_fnptr_glShadingRateImagePaletteNV == NULL) {
      __glintercept_fnptr_glShadingRateImagePaletteNV = (__ctype_glShadingRateImagePaletteNV) eglGetProcAddr("glShadingRateImagePaletteNV");
    }
    if (__glintercept_fnptr_glShadingRateImagePaletteNV == NULL) return NULL;
    return (void*) __glintercept_glShadingRateImagePaletteNV;
  }
  if (strcmp(name, "glShadingRateSampleOrderNV") == 0) {
    if (__glintercept_fnptr_glShadingRateSampleOrderNV == NULL) {
      __glintercept_fnptr_glShadingRateSampleOrderNV = (__ctype_glShadingRateSampleOrderNV) eglGetProcAddr("glShadingRateSampleOrderNV");
    }
    if (__glintercept_fnptr_glShadingRateSampleOrderNV == NULL) return NULL;
    return (void*) __glintercept_glShadingRateSampleOrderNV;
  }
  if (strcmp(name, "glShadingRateSampleOrderCustomNV") == 0) {
    if (__glintercept_fnptr_glShadingRateSampleOrderCustomNV == NULL) {
      __glintercept_fnptr_glShadingRateSampleOrderCustomNV = (__ctype_glShadingRateSampleOrderCustomNV) eglGetProcAddr("glShadingRateSampleOrderCustomNV");
    }
    if (__glintercept_fnptr_glShadingRateSampleOrderCustomNV == NULL) return NULL;
    return (void*) __glintercept_glShadingRateSampleOrderCustomNV;
  }
  if (strcmp(name, "glSharpenTexFuncSGIS") == 0) {
    if (__glintercept_fnptr_glSharpenTexFuncSGIS == NULL) {
      __glintercept_fnptr_glSharpenTexFuncSGIS = (__ctype_glSharpenTexFuncSGIS) eglGetProcAddr("glSharpenTexFuncSGIS");
    }
    if (__glintercept_fnptr_glSharpenTexFuncSGIS == NULL) return NULL;
    return (void*) __glintercept_glSharpenTexFuncSGIS;
  }
  if (strcmp(name, "glSignalSemaphoreEXT") == 0) {
    if (__glintercept_fnptr_glSignalSemaphoreEXT == NULL) {
      __glintercept_fnptr_glSignalSemaphoreEXT = (__ctype_glSignalSemaphoreEXT) eglGetProcAddr("glSignalSemaphoreEXT");
    }
    if (__glintercept_fnptr_glSignalSemaphoreEXT == NULL) return NULL;
    return (void*) __glintercept_glSignalSemaphoreEXT;
  }
  if (strcmp(name, "glSignalSemaphoreui64NVX") == 0) {
    if (__glintercept_fnptr_glSignalSemaphoreui64NVX == NULL) {
      __glintercept_fnptr_glSignalSemaphoreui64NVX = (__ctype_glSignalSemaphoreui64NVX) eglGetProcAddr("glSignalSemaphoreui64NVX");
    }
    if (__glintercept_fnptr_glSignalSemaphoreui64NVX == NULL) return NULL;
    return (void*) __glintercept_glSignalSemaphoreui64NVX;
  }
  if (strcmp(name, "glSpecializeShader") == 0) {
    if (__glintercept_fnptr_glSpecializeShader == NULL) {
      __glintercept_fnptr_glSpecializeShader = (__ctype_glSpecializeShader) eglGetProcAddr("glSpecializeShader");
    }
    if (__glintercept_fnptr_glSpecializeShader == NULL) return NULL;
    return (void*) __glintercept_glSpecializeShader;
  }
  if (strcmp(name, "glSpecializeShaderARB") == 0) {
    if (__glintercept_fnptr_glSpecializeShaderARB == NULL) {
      __glintercept_fnptr_glSpecializeShaderARB = (__ctype_glSpecializeShaderARB) eglGetProcAddr("glSpecializeShaderARB");
    }
    if (__glintercept_fnptr_glSpecializeShaderARB == NULL) return NULL;
    return (void*) __glintercept_glSpecializeShaderARB;
  }
  if (strcmp(name, "glSpriteParameterfSGIX") == 0) {
    if (__glintercept_fnptr_glSpriteParameterfSGIX == NULL) {
      __glintercept_fnptr_glSpriteParameterfSGIX = (__ctype_glSpriteParameterfSGIX) eglGetProcAddr("glSpriteParameterfSGIX");
    }
    if (__glintercept_fnptr_glSpriteParameterfSGIX == NULL) return NULL;
    return (void*) __glintercept_glSpriteParameterfSGIX;
  }
  if (strcmp(name, "glSpriteParameterfvSGIX") == 0) {
    if (__glintercept_fnptr_glSpriteParameterfvSGIX == NULL) {
      __glintercept_fnptr_glSpriteParameterfvSGIX = (__ctype_glSpriteParameterfvSGIX) eglGetProcAddr("glSpriteParameterfvSGIX");
    }
    if (__glintercept_fnptr_glSpriteParameterfvSGIX == NULL) return NULL;
    return (void*) __glintercept_glSpriteParameterfvSGIX;
  }
  if (strcmp(name, "glSpriteParameteriSGIX") == 0) {
    if (__glintercept_fnptr_glSpriteParameteriSGIX == NULL) {
      __glintercept_fnptr_glSpriteParameteriSGIX = (__ctype_glSpriteParameteriSGIX) eglGetProcAddr("glSpriteParameteriSGIX");
    }
    if (__glintercept_fnptr_glSpriteParameteriSGIX == NULL) return NULL;
    return (void*) __glintercept_glSpriteParameteriSGIX;
  }
  if (strcmp(name, "glSpriteParameterivSGIX") == 0) {
    if (__glintercept_fnptr_glSpriteParameterivSGIX == NULL) {
      __glintercept_fnptr_glSpriteParameterivSGIX = (__ctype_glSpriteParameterivSGIX) eglGetProcAddr("glSpriteParameterivSGIX");
    }
    if (__glintercept_fnptr_glSpriteParameterivSGIX == NULL) return NULL;
    return (void*) __glintercept_glSpriteParameterivSGIX;
  }
  if (strcmp(name, "glStartInstrumentsSGIX") == 0) {
    if (__glintercept_fnptr_glStartInstrumentsSGIX == NULL) {
      __glintercept_fnptr_glStartInstrumentsSGIX = (__ctype_glStartInstrumentsSGIX) eglGetProcAddr("glStartInstrumentsSGIX");
    }
    if (__glintercept_fnptr_glStartInstrumentsSGIX == NULL) return NULL;
    return (void*) __glintercept_glStartInstrumentsSGIX;
  }
  if (strcmp(name, "glStartTilingQCOM") == 0) {
    if (__glintercept_fnptr_glStartTilingQCOM == NULL) {
      __glintercept_fnptr_glStartTilingQCOM = (__ctype_glStartTilingQCOM) eglGetProcAddr("glStartTilingQCOM");
    }
    if (__glintercept_fnptr_glStartTilingQCOM == NULL) return NULL;
    return (void*) __glintercept_glStartTilingQCOM;
  }
  if (strcmp(name, "glStateCaptureNV") == 0) {
    if (__glintercept_fnptr_glStateCaptureNV == NULL) {
      __glintercept_fnptr_glStateCaptureNV = (__ctype_glStateCaptureNV) eglGetProcAddr("glStateCaptureNV");
    }
    if (__glintercept_fnptr_glStateCaptureNV == NULL) return NULL;
    return (void*) __glintercept_glStateCaptureNV;
  }
  if (strcmp(name, "glStencilClearTagEXT") == 0) {
    if (__glintercept_fnptr_glStencilClearTagEXT == NULL) {
      __glintercept_fnptr_glStencilClearTagEXT = (__ctype_glStencilClearTagEXT) eglGetProcAddr("glStencilClearTagEXT");
    }
    if (__glintercept_fnptr_glStencilClearTagEXT == NULL) return NULL;
    return (void*) __glintercept_glStencilClearTagEXT;
  }
  if (strcmp(name, "glStencilFillPathInstancedNV") == 0) {
    if (__glintercept_fnptr_glStencilFillPathInstancedNV == NULL) {
      __glintercept_fnptr_glStencilFillPathInstancedNV = (__ctype_glStencilFillPathInstancedNV) eglGetProcAddr("glStencilFillPathInstancedNV");
    }
    if (__glintercept_fnptr_glStencilFillPathInstancedNV == NULL) return NULL;
    return (void*) __glintercept_glStencilFillPathInstancedNV;
  }
  if (strcmp(name, "glStencilFillPathNV") == 0) {
    if (__glintercept_fnptr_glStencilFillPathNV == NULL) {
      __glintercept_fnptr_glStencilFillPathNV = (__ctype_glStencilFillPathNV) eglGetProcAddr("glStencilFillPathNV");
    }
    if (__glintercept_fnptr_glStencilFillPathNV == NULL) return NULL;
    return (void*) __glintercept_glStencilFillPathNV;
  }
  if (strcmp(name, "glStencilFunc") == 0) {
    if (__glintercept_fnptr_glStencilFunc == NULL) {
      __glintercept_fnptr_glStencilFunc = (__ctype_glStencilFunc) eglGetProcAddr("glStencilFunc");
    }
    if (__glintercept_fnptr_glStencilFunc == NULL) return NULL;
    return (void*) __glintercept_glStencilFunc;
  }
  if (strcmp(name, "glStencilFuncSeparate") == 0) {
    if (__glintercept_fnptr_glStencilFuncSeparate == NULL) {
      __glintercept_fnptr_glStencilFuncSeparate = (__ctype_glStencilFuncSeparate) eglGetProcAddr("glStencilFuncSeparate");
    }
    if (__glintercept_fnptr_glStencilFuncSeparate == NULL) return NULL;
    return (void*) __glintercept_glStencilFuncSeparate;
  }
  if (strcmp(name, "glStencilFuncSeparateATI") == 0) {
    if (__glintercept_fnptr_glStencilFuncSeparateATI == NULL) {
      __glintercept_fnptr_glStencilFuncSeparateATI = (__ctype_glStencilFuncSeparateATI) eglGetProcAddr("glStencilFuncSeparateATI");
    }
    if (__glintercept_fnptr_glStencilFuncSeparateATI == NULL) return NULL;
    return (void*) __glintercept_glStencilFuncSeparateATI;
  }
  if (strcmp(name, "glStencilMask") == 0) {
    if (__glintercept_fnptr_glStencilMask == NULL) {
      __glintercept_fnptr_glStencilMask = (__ctype_glStencilMask) eglGetProcAddr("glStencilMask");
    }
    if (__glintercept_fnptr_glStencilMask == NULL) return NULL;
    return (void*) __glintercept_glStencilMask;
  }
  if (strcmp(name, "glStencilMaskSeparate") == 0) {
    if (__glintercept_fnptr_glStencilMaskSeparate == NULL) {
      __glintercept_fnptr_glStencilMaskSeparate = (__ctype_glStencilMaskSeparate) eglGetProcAddr("glStencilMaskSeparate");
    }
    if (__glintercept_fnptr_glStencilMaskSeparate == NULL) return NULL;
    return (void*) __glintercept_glStencilMaskSeparate;
  }
  if (strcmp(name, "glStencilOp") == 0) {
    if (__glintercept_fnptr_glStencilOp == NULL) {
      __glintercept_fnptr_glStencilOp = (__ctype_glStencilOp) eglGetProcAddr("glStencilOp");
    }
    if (__glintercept_fnptr_glStencilOp == NULL) return NULL;
    return (void*) __glintercept_glStencilOp;
  }
  if (strcmp(name, "glStencilOpSeparate") == 0) {
    if (__glintercept_fnptr_glStencilOpSeparate == NULL) {
      __glintercept_fnptr_glStencilOpSeparate = (__ctype_glStencilOpSeparate) eglGetProcAddr("glStencilOpSeparate");
    }
    if (__glintercept_fnptr_glStencilOpSeparate == NULL) return NULL;
    return (void*) __glintercept_glStencilOpSeparate;
  }
  if (strcmp(name, "glStencilOpSeparateATI") == 0) {
    if (__glintercept_fnptr_glStencilOpSeparateATI == NULL) {
      __glintercept_fnptr_glStencilOpSeparateATI = (__ctype_glStencilOpSeparateATI) eglGetProcAddr("glStencilOpSeparateATI");
    }
    if (__glintercept_fnptr_glStencilOpSeparateATI == NULL) return NULL;
    return (void*) __glintercept_glStencilOpSeparateATI;
  }
  if (strcmp(name, "glStencilOpValueAMD") == 0) {
    if (__glintercept_fnptr_glStencilOpValueAMD == NULL) {
      __glintercept_fnptr_glStencilOpValueAMD = (__ctype_glStencilOpValueAMD) eglGetProcAddr("glStencilOpValueAMD");
    }
    if (__glintercept_fnptr_glStencilOpValueAMD == NULL) return NULL;
    return (void*) __glintercept_glStencilOpValueAMD;
  }
  if (strcmp(name, "glStencilStrokePathInstancedNV") == 0) {
    if (__glintercept_fnptr_glStencilStrokePathInstancedNV == NULL) {
      __glintercept_fnptr_glStencilStrokePathInstancedNV = (__ctype_glStencilStrokePathInstancedNV) eglGetProcAddr("glStencilStrokePathInstancedNV");
    }
    if (__glintercept_fnptr_glStencilStrokePathInstancedNV == NULL) return NULL;
    return (void*) __glintercept_glStencilStrokePathInstancedNV;
  }
  if (strcmp(name, "glStencilStrokePathNV") == 0) {
    if (__glintercept_fnptr_glStencilStrokePathNV == NULL) {
      __glintercept_fnptr_glStencilStrokePathNV = (__ctype_glStencilStrokePathNV) eglGetProcAddr("glStencilStrokePathNV");
    }
    if (__glintercept_fnptr_glStencilStrokePathNV == NULL) return NULL;
    return (void*) __glintercept_glStencilStrokePathNV;
  }
  if (strcmp(name, "glStencilThenCoverFillPathInstancedNV") == 0) {
    if (__glintercept_fnptr_glStencilThenCoverFillPathInstancedNV == NULL) {
      __glintercept_fnptr_glStencilThenCoverFillPathInstancedNV = (__ctype_glStencilThenCoverFillPathInstancedNV) eglGetProcAddr("glStencilThenCoverFillPathInstancedNV");
    }
    if (__glintercept_fnptr_glStencilThenCoverFillPathInstancedNV == NULL) return NULL;
    return (void*) __glintercept_glStencilThenCoverFillPathInstancedNV;
  }
  if (strcmp(name, "glStencilThenCoverFillPathNV") == 0) {
    if (__glintercept_fnptr_glStencilThenCoverFillPathNV == NULL) {
      __glintercept_fnptr_glStencilThenCoverFillPathNV = (__ctype_glStencilThenCoverFillPathNV) eglGetProcAddr("glStencilThenCoverFillPathNV");
    }
    if (__glintercept_fnptr_glStencilThenCoverFillPathNV == NULL) return NULL;
    return (void*) __glintercept_glStencilThenCoverFillPathNV;
  }
  if (strcmp(name, "glStencilThenCoverStrokePathInstancedNV") == 0) {
    if (__glintercept_fnptr_glStencilThenCoverStrokePathInstancedNV == NULL) {
      __glintercept_fnptr_glStencilThenCoverStrokePathInstancedNV = (__ctype_glStencilThenCoverStrokePathInstancedNV) eglGetProcAddr("glStencilThenCoverStrokePathInstancedNV");
    }
    if (__glintercept_fnptr_glStencilThenCoverStrokePathInstancedNV == NULL) return NULL;
    return (void*) __glintercept_glStencilThenCoverStrokePathInstancedNV;
  }
  if (strcmp(name, "glStencilThenCoverStrokePathNV") == 0) {
    if (__glintercept_fnptr_glStencilThenCoverStrokePathNV == NULL) {
      __glintercept_fnptr_glStencilThenCoverStrokePathNV = (__ctype_glStencilThenCoverStrokePathNV) eglGetProcAddr("glStencilThenCoverStrokePathNV");
    }
    if (__glintercept_fnptr_glStencilThenCoverStrokePathNV == NULL) return NULL;
    return (void*) __glintercept_glStencilThenCoverStrokePathNV;
  }
  if (strcmp(name, "glStopInstrumentsSGIX") == 0) {
    if (__glintercept_fnptr_glStopInstrumentsSGIX == NULL) {
      __glintercept_fnptr_glStopInstrumentsSGIX = (__ctype_glStopInstrumentsSGIX) eglGetProcAddr("glStopInstrumentsSGIX");
    }
    if (__glintercept_fnptr_glStopInstrumentsSGIX == NULL) return NULL;
    return (void*) __glintercept_glStopInstrumentsSGIX;
  }
  if (strcmp(name, "glStringMarkerGREMEDY") == 0) {
    if (__glintercept_fnptr_glStringMarkerGREMEDY == NULL) {
      __glintercept_fnptr_glStringMarkerGREMEDY = (__ctype_glStringMarkerGREMEDY) eglGetProcAddr("glStringMarkerGREMEDY");
    }
    if (__glintercept_fnptr_glStringMarkerGREMEDY == NULL) return NULL;
    return (void*) __glintercept_glStringMarkerGREMEDY;
  }
  if (strcmp(name, "glSubpixelPrecisionBiasNV") == 0) {
    if (__glintercept_fnptr_glSubpixelPrecisionBiasNV == NULL) {
      __glintercept_fnptr_glSubpixelPrecisionBiasNV = (__ctype_glSubpixelPrecisionBiasNV) eglGetProcAddr("glSubpixelPrecisionBiasNV");
    }
    if (__glintercept_fnptr_glSubpixelPrecisionBiasNV == NULL) return NULL;
    return (void*) __glintercept_glSubpixelPrecisionBiasNV;
  }
  if (strcmp(name, "glSwizzleEXT") == 0) {
    if (__glintercept_fnptr_glSwizzleEXT == NULL) {
      __glintercept_fnptr_glSwizzleEXT = (__ctype_glSwizzleEXT) eglGetProcAddr("glSwizzleEXT");
    }
    if (__glintercept_fnptr_glSwizzleEXT == NULL) return NULL;
    return (void*) __glintercept_glSwizzleEXT;
  }
  if (strcmp(name, "glSyncTextureINTEL") == 0) {
    if (__glintercept_fnptr_glSyncTextureINTEL == NULL) {
      __glintercept_fnptr_glSyncTextureINTEL = (__ctype_glSyncTextureINTEL) eglGetProcAddr("glSyncTextureINTEL");
    }
    if (__glintercept_fnptr_glSyncTextureINTEL == NULL) return NULL;
    return (void*) __glintercept_glSyncTextureINTEL;
  }
  if (strcmp(name, "glTagSampleBufferSGIX") == 0) {
    if (__glintercept_fnptr_glTagSampleBufferSGIX == NULL) {
      __glintercept_fnptr_glTagSampleBufferSGIX = (__ctype_glTagSampleBufferSGIX) eglGetProcAddr("glTagSampleBufferSGIX");
    }
    if (__glintercept_fnptr_glTagSampleBufferSGIX == NULL) return NULL;
    return (void*) __glintercept_glTagSampleBufferSGIX;
  }
  if (strcmp(name, "glTangent3bEXT") == 0) {
    if (__glintercept_fnptr_glTangent3bEXT == NULL) {
      __glintercept_fnptr_glTangent3bEXT = (__ctype_glTangent3bEXT) eglGetProcAddr("glTangent3bEXT");
    }
    if (__glintercept_fnptr_glTangent3bEXT == NULL) return NULL;
    return (void*) __glintercept_glTangent3bEXT;
  }
  if (strcmp(name, "glTangent3bvEXT") == 0) {
    if (__glintercept_fnptr_glTangent3bvEXT == NULL) {
      __glintercept_fnptr_glTangent3bvEXT = (__ctype_glTangent3bvEXT) eglGetProcAddr("glTangent3bvEXT");
    }
    if (__glintercept_fnptr_glTangent3bvEXT == NULL) return NULL;
    return (void*) __glintercept_glTangent3bvEXT;
  }
  if (strcmp(name, "glTangent3dEXT") == 0) {
    if (__glintercept_fnptr_glTangent3dEXT == NULL) {
      __glintercept_fnptr_glTangent3dEXT = (__ctype_glTangent3dEXT) eglGetProcAddr("glTangent3dEXT");
    }
    if (__glintercept_fnptr_glTangent3dEXT == NULL) return NULL;
    return (void*) __glintercept_glTangent3dEXT;
  }
  if (strcmp(name, "glTangent3dvEXT") == 0) {
    if (__glintercept_fnptr_glTangent3dvEXT == NULL) {
      __glintercept_fnptr_glTangent3dvEXT = (__ctype_glTangent3dvEXT) eglGetProcAddr("glTangent3dvEXT");
    }
    if (__glintercept_fnptr_glTangent3dvEXT == NULL) return NULL;
    return (void*) __glintercept_glTangent3dvEXT;
  }
  if (strcmp(name, "glTangent3fEXT") == 0) {
    if (__glintercept_fnptr_glTangent3fEXT == NULL) {
      __glintercept_fnptr_glTangent3fEXT = (__ctype_glTangent3fEXT) eglGetProcAddr("glTangent3fEXT");
    }
    if (__glintercept_fnptr_glTangent3fEXT == NULL) return NULL;
    return (void*) __glintercept_glTangent3fEXT;
  }
  if (strcmp(name, "glTangent3fvEXT") == 0) {
    if (__glintercept_fnptr_glTangent3fvEXT == NULL) {
      __glintercept_fnptr_glTangent3fvEXT = (__ctype_glTangent3fvEXT) eglGetProcAddr("glTangent3fvEXT");
    }
    if (__glintercept_fnptr_glTangent3fvEXT == NULL) return NULL;
    return (void*) __glintercept_glTangent3fvEXT;
  }
  if (strcmp(name, "glTangent3iEXT") == 0) {
    if (__glintercept_fnptr_glTangent3iEXT == NULL) {
      __glintercept_fnptr_glTangent3iEXT = (__ctype_glTangent3iEXT) eglGetProcAddr("glTangent3iEXT");
    }
    if (__glintercept_fnptr_glTangent3iEXT == NULL) return NULL;
    return (void*) __glintercept_glTangent3iEXT;
  }
  if (strcmp(name, "glTangent3ivEXT") == 0) {
    if (__glintercept_fnptr_glTangent3ivEXT == NULL) {
      __glintercept_fnptr_glTangent3ivEXT = (__ctype_glTangent3ivEXT) eglGetProcAddr("glTangent3ivEXT");
    }
    if (__glintercept_fnptr_glTangent3ivEXT == NULL) return NULL;
    return (void*) __glintercept_glTangent3ivEXT;
  }
  if (strcmp(name, "glTangent3sEXT") == 0) {
    if (__glintercept_fnptr_glTangent3sEXT == NULL) {
      __glintercept_fnptr_glTangent3sEXT = (__ctype_glTangent3sEXT) eglGetProcAddr("glTangent3sEXT");
    }
    if (__glintercept_fnptr_glTangent3sEXT == NULL) return NULL;
    return (void*) __glintercept_glTangent3sEXT;
  }
  if (strcmp(name, "glTangent3svEXT") == 0) {
    if (__glintercept_fnptr_glTangent3svEXT == NULL) {
      __glintercept_fnptr_glTangent3svEXT = (__ctype_glTangent3svEXT) eglGetProcAddr("glTangent3svEXT");
    }
    if (__glintercept_fnptr_glTangent3svEXT == NULL) return NULL;
    return (void*) __glintercept_glTangent3svEXT;
  }
  if (strcmp(name, "glTangentPointerEXT") == 0) {
    if (__glintercept_fnptr_glTangentPointerEXT == NULL) {
      __glintercept_fnptr_glTangentPointerEXT = (__ctype_glTangentPointerEXT) eglGetProcAddr("glTangentPointerEXT");
    }
    if (__glintercept_fnptr_glTangentPointerEXT == NULL) return NULL;
    return (void*) __glintercept_glTangentPointerEXT;
  }
  if (strcmp(name, "glTbufferMask3DFX") == 0) {
    if (__glintercept_fnptr_glTbufferMask3DFX == NULL) {
      __glintercept_fnptr_glTbufferMask3DFX = (__ctype_glTbufferMask3DFX) eglGetProcAddr("glTbufferMask3DFX");
    }
    if (__glintercept_fnptr_glTbufferMask3DFX == NULL) return NULL;
    return (void*) __glintercept_glTbufferMask3DFX;
  }
  if (strcmp(name, "glTessellationFactorAMD") == 0) {
    if (__glintercept_fnptr_glTessellationFactorAMD == NULL) {
      __glintercept_fnptr_glTessellationFactorAMD = (__ctype_glTessellationFactorAMD) eglGetProcAddr("glTessellationFactorAMD");
    }
    if (__glintercept_fnptr_glTessellationFactorAMD == NULL) return NULL;
    return (void*) __glintercept_glTessellationFactorAMD;
  }
  if (strcmp(name, "glTessellationModeAMD") == 0) {
    if (__glintercept_fnptr_glTessellationModeAMD == NULL) {
      __glintercept_fnptr_glTessellationModeAMD = (__ctype_glTessellationModeAMD) eglGetProcAddr("glTessellationModeAMD");
    }
    if (__glintercept_fnptr_glTessellationModeAMD == NULL) return NULL;
    return (void*) __glintercept_glTessellationModeAMD;
  }
  if (strcmp(name, "glTestFenceAPPLE") == 0) {
    if (__glintercept_fnptr_glTestFenceAPPLE == NULL) {
      __glintercept_fnptr_glTestFenceAPPLE = (__ctype_glTestFenceAPPLE) eglGetProcAddr("glTestFenceAPPLE");
    }
    if (__glintercept_fnptr_glTestFenceAPPLE == NULL) return NULL;
    return (void*) __glintercept_glTestFenceAPPLE;
  }
  if (strcmp(name, "glTestFenceNV") == 0) {
    if (__glintercept_fnptr_glTestFenceNV == NULL) {
      __glintercept_fnptr_glTestFenceNV = (__ctype_glTestFenceNV) eglGetProcAddr("glTestFenceNV");
    }
    if (__glintercept_fnptr_glTestFenceNV == NULL) return NULL;
    return (void*) __glintercept_glTestFenceNV;
  }
  if (strcmp(name, "glTestObjectAPPLE") == 0) {
    if (__glintercept_fnptr_glTestObjectAPPLE == NULL) {
      __glintercept_fnptr_glTestObjectAPPLE = (__ctype_glTestObjectAPPLE) eglGetProcAddr("glTestObjectAPPLE");
    }
    if (__glintercept_fnptr_glTestObjectAPPLE == NULL) return NULL;
    return (void*) __glintercept_glTestObjectAPPLE;
  }
  if (strcmp(name, "glTexAttachMemoryNV") == 0) {
    if (__glintercept_fnptr_glTexAttachMemoryNV == NULL) {
      __glintercept_fnptr_glTexAttachMemoryNV = (__ctype_glTexAttachMemoryNV) eglGetProcAddr("glTexAttachMemoryNV");
    }
    if (__glintercept_fnptr_glTexAttachMemoryNV == NULL) return NULL;
    return (void*) __glintercept_glTexAttachMemoryNV;
  }
  if (strcmp(name, "glTexBuffer") == 0) {
    if (__glintercept_fnptr_glTexBuffer == NULL) {
      __glintercept_fnptr_glTexBuffer = (__ctype_glTexBuffer) eglGetProcAddr("glTexBuffer");
    }
    if (__glintercept_fnptr_glTexBuffer == NULL) return NULL;
    return (void*) __glintercept_glTexBuffer;
  }
  if (strcmp(name, "glTexBufferARB") == 0) {
    if (__glintercept_fnptr_glTexBufferARB == NULL) {
      __glintercept_fnptr_glTexBufferARB = (__ctype_glTexBufferARB) eglGetProcAddr("glTexBufferARB");
    }
    if (__glintercept_fnptr_glTexBufferARB == NULL) return NULL;
    return (void*) __glintercept_glTexBufferARB;
  }
  if (strcmp(name, "glTexBufferEXT") == 0) {
    if (__glintercept_fnptr_glTexBufferEXT == NULL) {
      __glintercept_fnptr_glTexBufferEXT = (__ctype_glTexBufferEXT) eglGetProcAddr("glTexBufferEXT");
    }
    if (__glintercept_fnptr_glTexBufferEXT == NULL) return NULL;
    return (void*) __glintercept_glTexBufferEXT;
  }
  if (strcmp(name, "glTexBufferOES") == 0) {
    if (__glintercept_fnptr_glTexBufferOES == NULL) {
      __glintercept_fnptr_glTexBufferOES = (__ctype_glTexBufferOES) eglGetProcAddr("glTexBufferOES");
    }
    if (__glintercept_fnptr_glTexBufferOES == NULL) return NULL;
    return (void*) __glintercept_glTexBufferOES;
  }
  if (strcmp(name, "glTexBufferRange") == 0) {
    if (__glintercept_fnptr_glTexBufferRange == NULL) {
      __glintercept_fnptr_glTexBufferRange = (__ctype_glTexBufferRange) eglGetProcAddr("glTexBufferRange");
    }
    if (__glintercept_fnptr_glTexBufferRange == NULL) return NULL;
    return (void*) __glintercept_glTexBufferRange;
  }
  if (strcmp(name, "glTexBufferRangeEXT") == 0) {
    if (__glintercept_fnptr_glTexBufferRangeEXT == NULL) {
      __glintercept_fnptr_glTexBufferRangeEXT = (__ctype_glTexBufferRangeEXT) eglGetProcAddr("glTexBufferRangeEXT");
    }
    if (__glintercept_fnptr_glTexBufferRangeEXT == NULL) return NULL;
    return (void*) __glintercept_glTexBufferRangeEXT;
  }
  if (strcmp(name, "glTexBufferRangeOES") == 0) {
    if (__glintercept_fnptr_glTexBufferRangeOES == NULL) {
      __glintercept_fnptr_glTexBufferRangeOES = (__ctype_glTexBufferRangeOES) eglGetProcAddr("glTexBufferRangeOES");
    }
    if (__glintercept_fnptr_glTexBufferRangeOES == NULL) return NULL;
    return (void*) __glintercept_glTexBufferRangeOES;
  }
  if (strcmp(name, "glTexBumpParameterfvATI") == 0) {
    if (__glintercept_fnptr_glTexBumpParameterfvATI == NULL) {
      __glintercept_fnptr_glTexBumpParameterfvATI = (__ctype_glTexBumpParameterfvATI) eglGetProcAddr("glTexBumpParameterfvATI");
    }
    if (__glintercept_fnptr_glTexBumpParameterfvATI == NULL) return NULL;
    return (void*) __glintercept_glTexBumpParameterfvATI;
  }
  if (strcmp(name, "glTexBumpParameterivATI") == 0) {
    if (__glintercept_fnptr_glTexBumpParameterivATI == NULL) {
      __glintercept_fnptr_glTexBumpParameterivATI = (__ctype_glTexBumpParameterivATI) eglGetProcAddr("glTexBumpParameterivATI");
    }
    if (__glintercept_fnptr_glTexBumpParameterivATI == NULL) return NULL;
    return (void*) __glintercept_glTexBumpParameterivATI;
  }
  if (strcmp(name, "glTexCoord1bOES") == 0) {
    if (__glintercept_fnptr_glTexCoord1bOES == NULL) {
      __glintercept_fnptr_glTexCoord1bOES = (__ctype_glTexCoord1bOES) eglGetProcAddr("glTexCoord1bOES");
    }
    if (__glintercept_fnptr_glTexCoord1bOES == NULL) return NULL;
    return (void*) __glintercept_glTexCoord1bOES;
  }
  if (strcmp(name, "glTexCoord1bvOES") == 0) {
    if (__glintercept_fnptr_glTexCoord1bvOES == NULL) {
      __glintercept_fnptr_glTexCoord1bvOES = (__ctype_glTexCoord1bvOES) eglGetProcAddr("glTexCoord1bvOES");
    }
    if (__glintercept_fnptr_glTexCoord1bvOES == NULL) return NULL;
    return (void*) __glintercept_glTexCoord1bvOES;
  }
  if (strcmp(name, "glTexCoord1d") == 0) {
    if (__glintercept_fnptr_glTexCoord1d == NULL) {
      __glintercept_fnptr_glTexCoord1d = (__ctype_glTexCoord1d) eglGetProcAddr("glTexCoord1d");
    }
    if (__glintercept_fnptr_glTexCoord1d == NULL) return NULL;
    return (void*) __glintercept_glTexCoord1d;
  }
  if (strcmp(name, "glTexCoord1dv") == 0) {
    if (__glintercept_fnptr_glTexCoord1dv == NULL) {
      __glintercept_fnptr_glTexCoord1dv = (__ctype_glTexCoord1dv) eglGetProcAddr("glTexCoord1dv");
    }
    if (__glintercept_fnptr_glTexCoord1dv == NULL) return NULL;
    return (void*) __glintercept_glTexCoord1dv;
  }
  if (strcmp(name, "glTexCoord1f") == 0) {
    if (__glintercept_fnptr_glTexCoord1f == NULL) {
      __glintercept_fnptr_glTexCoord1f = (__ctype_glTexCoord1f) eglGetProcAddr("glTexCoord1f");
    }
    if (__glintercept_fnptr_glTexCoord1f == NULL) return NULL;
    return (void*) __glintercept_glTexCoord1f;
  }
  if (strcmp(name, "glTexCoord1fv") == 0) {
    if (__glintercept_fnptr_glTexCoord1fv == NULL) {
      __glintercept_fnptr_glTexCoord1fv = (__ctype_glTexCoord1fv) eglGetProcAddr("glTexCoord1fv");
    }
    if (__glintercept_fnptr_glTexCoord1fv == NULL) return NULL;
    return (void*) __glintercept_glTexCoord1fv;
  }
  if (strcmp(name, "glTexCoord1hNV") == 0) {
    if (__glintercept_fnptr_glTexCoord1hNV == NULL) {
      __glintercept_fnptr_glTexCoord1hNV = (__ctype_glTexCoord1hNV) eglGetProcAddr("glTexCoord1hNV");
    }
    if (__glintercept_fnptr_glTexCoord1hNV == NULL) return NULL;
    return (void*) __glintercept_glTexCoord1hNV;
  }
  if (strcmp(name, "glTexCoord1hvNV") == 0) {
    if (__glintercept_fnptr_glTexCoord1hvNV == NULL) {
      __glintercept_fnptr_glTexCoord1hvNV = (__ctype_glTexCoord1hvNV) eglGetProcAddr("glTexCoord1hvNV");
    }
    if (__glintercept_fnptr_glTexCoord1hvNV == NULL) return NULL;
    return (void*) __glintercept_glTexCoord1hvNV;
  }
  if (strcmp(name, "glTexCoord1i") == 0) {
    if (__glintercept_fnptr_glTexCoord1i == NULL) {
      __glintercept_fnptr_glTexCoord1i = (__ctype_glTexCoord1i) eglGetProcAddr("glTexCoord1i");
    }
    if (__glintercept_fnptr_glTexCoord1i == NULL) return NULL;
    return (void*) __glintercept_glTexCoord1i;
  }
  if (strcmp(name, "glTexCoord1iv") == 0) {
    if (__glintercept_fnptr_glTexCoord1iv == NULL) {
      __glintercept_fnptr_glTexCoord1iv = (__ctype_glTexCoord1iv) eglGetProcAddr("glTexCoord1iv");
    }
    if (__glintercept_fnptr_glTexCoord1iv == NULL) return NULL;
    return (void*) __glintercept_glTexCoord1iv;
  }
  if (strcmp(name, "glTexCoord1s") == 0) {
    if (__glintercept_fnptr_glTexCoord1s == NULL) {
      __glintercept_fnptr_glTexCoord1s = (__ctype_glTexCoord1s) eglGetProcAddr("glTexCoord1s");
    }
    if (__glintercept_fnptr_glTexCoord1s == NULL) return NULL;
    return (void*) __glintercept_glTexCoord1s;
  }
  if (strcmp(name, "glTexCoord1sv") == 0) {
    if (__glintercept_fnptr_glTexCoord1sv == NULL) {
      __glintercept_fnptr_glTexCoord1sv = (__ctype_glTexCoord1sv) eglGetProcAddr("glTexCoord1sv");
    }
    if (__glintercept_fnptr_glTexCoord1sv == NULL) return NULL;
    return (void*) __glintercept_glTexCoord1sv;
  }
  if (strcmp(name, "glTexCoord1xOES") == 0) {
    if (__glintercept_fnptr_glTexCoord1xOES == NULL) {
      __glintercept_fnptr_glTexCoord1xOES = (__ctype_glTexCoord1xOES) eglGetProcAddr("glTexCoord1xOES");
    }
    if (__glintercept_fnptr_glTexCoord1xOES == NULL) return NULL;
    return (void*) __glintercept_glTexCoord1xOES;
  }
  if (strcmp(name, "glTexCoord1xvOES") == 0) {
    if (__glintercept_fnptr_glTexCoord1xvOES == NULL) {
      __glintercept_fnptr_glTexCoord1xvOES = (__ctype_glTexCoord1xvOES) eglGetProcAddr("glTexCoord1xvOES");
    }
    if (__glintercept_fnptr_glTexCoord1xvOES == NULL) return NULL;
    return (void*) __glintercept_glTexCoord1xvOES;
  }
  if (strcmp(name, "glTexCoord2bOES") == 0) {
    if (__glintercept_fnptr_glTexCoord2bOES == NULL) {
      __glintercept_fnptr_glTexCoord2bOES = (__ctype_glTexCoord2bOES) eglGetProcAddr("glTexCoord2bOES");
    }
    if (__glintercept_fnptr_glTexCoord2bOES == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2bOES;
  }
  if (strcmp(name, "glTexCoord2bvOES") == 0) {
    if (__glintercept_fnptr_glTexCoord2bvOES == NULL) {
      __glintercept_fnptr_glTexCoord2bvOES = (__ctype_glTexCoord2bvOES) eglGetProcAddr("glTexCoord2bvOES");
    }
    if (__glintercept_fnptr_glTexCoord2bvOES == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2bvOES;
  }
  if (strcmp(name, "glTexCoord2d") == 0) {
    if (__glintercept_fnptr_glTexCoord2d == NULL) {
      __glintercept_fnptr_glTexCoord2d = (__ctype_glTexCoord2d) eglGetProcAddr("glTexCoord2d");
    }
    if (__glintercept_fnptr_glTexCoord2d == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2d;
  }
  if (strcmp(name, "glTexCoord2dv") == 0) {
    if (__glintercept_fnptr_glTexCoord2dv == NULL) {
      __glintercept_fnptr_glTexCoord2dv = (__ctype_glTexCoord2dv) eglGetProcAddr("glTexCoord2dv");
    }
    if (__glintercept_fnptr_glTexCoord2dv == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2dv;
  }
  if (strcmp(name, "glTexCoord2f") == 0) {
    if (__glintercept_fnptr_glTexCoord2f == NULL) {
      __glintercept_fnptr_glTexCoord2f = (__ctype_glTexCoord2f) eglGetProcAddr("glTexCoord2f");
    }
    if (__glintercept_fnptr_glTexCoord2f == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2f;
  }
  if (strcmp(name, "glTexCoord2fColor3fVertex3fSUN") == 0) {
    if (__glintercept_fnptr_glTexCoord2fColor3fVertex3fSUN == NULL) {
      __glintercept_fnptr_glTexCoord2fColor3fVertex3fSUN = (__ctype_glTexCoord2fColor3fVertex3fSUN) eglGetProcAddr("glTexCoord2fColor3fVertex3fSUN");
    }
    if (__glintercept_fnptr_glTexCoord2fColor3fVertex3fSUN == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2fColor3fVertex3fSUN;
  }
  if (strcmp(name, "glTexCoord2fColor3fVertex3fvSUN") == 0) {
    if (__glintercept_fnptr_glTexCoord2fColor3fVertex3fvSUN == NULL) {
      __glintercept_fnptr_glTexCoord2fColor3fVertex3fvSUN = (__ctype_glTexCoord2fColor3fVertex3fvSUN) eglGetProcAddr("glTexCoord2fColor3fVertex3fvSUN");
    }
    if (__glintercept_fnptr_glTexCoord2fColor3fVertex3fvSUN == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2fColor3fVertex3fvSUN;
  }
  if (strcmp(name, "glTexCoord2fColor4fNormal3fVertex3fSUN") == 0) {
    if (__glintercept_fnptr_glTexCoord2fColor4fNormal3fVertex3fSUN == NULL) {
      __glintercept_fnptr_glTexCoord2fColor4fNormal3fVertex3fSUN = (__ctype_glTexCoord2fColor4fNormal3fVertex3fSUN) eglGetProcAddr("glTexCoord2fColor4fNormal3fVertex3fSUN");
    }
    if (__glintercept_fnptr_glTexCoord2fColor4fNormal3fVertex3fSUN == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2fColor4fNormal3fVertex3fSUN;
  }
  if (strcmp(name, "glTexCoord2fColor4fNormal3fVertex3fvSUN") == 0) {
    if (__glintercept_fnptr_glTexCoord2fColor4fNormal3fVertex3fvSUN == NULL) {
      __glintercept_fnptr_glTexCoord2fColor4fNormal3fVertex3fvSUN = (__ctype_glTexCoord2fColor4fNormal3fVertex3fvSUN) eglGetProcAddr("glTexCoord2fColor4fNormal3fVertex3fvSUN");
    }
    if (__glintercept_fnptr_glTexCoord2fColor4fNormal3fVertex3fvSUN == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2fColor4fNormal3fVertex3fvSUN;
  }
  if (strcmp(name, "glTexCoord2fColor4ubVertex3fSUN") == 0) {
    if (__glintercept_fnptr_glTexCoord2fColor4ubVertex3fSUN == NULL) {
      __glintercept_fnptr_glTexCoord2fColor4ubVertex3fSUN = (__ctype_glTexCoord2fColor4ubVertex3fSUN) eglGetProcAddr("glTexCoord2fColor4ubVertex3fSUN");
    }
    if (__glintercept_fnptr_glTexCoord2fColor4ubVertex3fSUN == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2fColor4ubVertex3fSUN;
  }
  if (strcmp(name, "glTexCoord2fColor4ubVertex3fvSUN") == 0) {
    if (__glintercept_fnptr_glTexCoord2fColor4ubVertex3fvSUN == NULL) {
      __glintercept_fnptr_glTexCoord2fColor4ubVertex3fvSUN = (__ctype_glTexCoord2fColor4ubVertex3fvSUN) eglGetProcAddr("glTexCoord2fColor4ubVertex3fvSUN");
    }
    if (__glintercept_fnptr_glTexCoord2fColor4ubVertex3fvSUN == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2fColor4ubVertex3fvSUN;
  }
  if (strcmp(name, "glTexCoord2fNormal3fVertex3fSUN") == 0) {
    if (__glintercept_fnptr_glTexCoord2fNormal3fVertex3fSUN == NULL) {
      __glintercept_fnptr_glTexCoord2fNormal3fVertex3fSUN = (__ctype_glTexCoord2fNormal3fVertex3fSUN) eglGetProcAddr("glTexCoord2fNormal3fVertex3fSUN");
    }
    if (__glintercept_fnptr_glTexCoord2fNormal3fVertex3fSUN == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2fNormal3fVertex3fSUN;
  }
  if (strcmp(name, "glTexCoord2fNormal3fVertex3fvSUN") == 0) {
    if (__glintercept_fnptr_glTexCoord2fNormal3fVertex3fvSUN == NULL) {
      __glintercept_fnptr_glTexCoord2fNormal3fVertex3fvSUN = (__ctype_glTexCoord2fNormal3fVertex3fvSUN) eglGetProcAddr("glTexCoord2fNormal3fVertex3fvSUN");
    }
    if (__glintercept_fnptr_glTexCoord2fNormal3fVertex3fvSUN == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2fNormal3fVertex3fvSUN;
  }
  if (strcmp(name, "glTexCoord2fVertex3fSUN") == 0) {
    if (__glintercept_fnptr_glTexCoord2fVertex3fSUN == NULL) {
      __glintercept_fnptr_glTexCoord2fVertex3fSUN = (__ctype_glTexCoord2fVertex3fSUN) eglGetProcAddr("glTexCoord2fVertex3fSUN");
    }
    if (__glintercept_fnptr_glTexCoord2fVertex3fSUN == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2fVertex3fSUN;
  }
  if (strcmp(name, "glTexCoord2fVertex3fvSUN") == 0) {
    if (__glintercept_fnptr_glTexCoord2fVertex3fvSUN == NULL) {
      __glintercept_fnptr_glTexCoord2fVertex3fvSUN = (__ctype_glTexCoord2fVertex3fvSUN) eglGetProcAddr("glTexCoord2fVertex3fvSUN");
    }
    if (__glintercept_fnptr_glTexCoord2fVertex3fvSUN == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2fVertex3fvSUN;
  }
  if (strcmp(name, "glTexCoord2fv") == 0) {
    if (__glintercept_fnptr_glTexCoord2fv == NULL) {
      __glintercept_fnptr_glTexCoord2fv = (__ctype_glTexCoord2fv) eglGetProcAddr("glTexCoord2fv");
    }
    if (__glintercept_fnptr_glTexCoord2fv == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2fv;
  }
  if (strcmp(name, "glTexCoord2hNV") == 0) {
    if (__glintercept_fnptr_glTexCoord2hNV == NULL) {
      __glintercept_fnptr_glTexCoord2hNV = (__ctype_glTexCoord2hNV) eglGetProcAddr("glTexCoord2hNV");
    }
    if (__glintercept_fnptr_glTexCoord2hNV == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2hNV;
  }
  if (strcmp(name, "glTexCoord2hvNV") == 0) {
    if (__glintercept_fnptr_glTexCoord2hvNV == NULL) {
      __glintercept_fnptr_glTexCoord2hvNV = (__ctype_glTexCoord2hvNV) eglGetProcAddr("glTexCoord2hvNV");
    }
    if (__glintercept_fnptr_glTexCoord2hvNV == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2hvNV;
  }
  if (strcmp(name, "glTexCoord2i") == 0) {
    if (__glintercept_fnptr_glTexCoord2i == NULL) {
      __glintercept_fnptr_glTexCoord2i = (__ctype_glTexCoord2i) eglGetProcAddr("glTexCoord2i");
    }
    if (__glintercept_fnptr_glTexCoord2i == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2i;
  }
  if (strcmp(name, "glTexCoord2iv") == 0) {
    if (__glintercept_fnptr_glTexCoord2iv == NULL) {
      __glintercept_fnptr_glTexCoord2iv = (__ctype_glTexCoord2iv) eglGetProcAddr("glTexCoord2iv");
    }
    if (__glintercept_fnptr_glTexCoord2iv == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2iv;
  }
  if (strcmp(name, "glTexCoord2s") == 0) {
    if (__glintercept_fnptr_glTexCoord2s == NULL) {
      __glintercept_fnptr_glTexCoord2s = (__ctype_glTexCoord2s) eglGetProcAddr("glTexCoord2s");
    }
    if (__glintercept_fnptr_glTexCoord2s == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2s;
  }
  if (strcmp(name, "glTexCoord2sv") == 0) {
    if (__glintercept_fnptr_glTexCoord2sv == NULL) {
      __glintercept_fnptr_glTexCoord2sv = (__ctype_glTexCoord2sv) eglGetProcAddr("glTexCoord2sv");
    }
    if (__glintercept_fnptr_glTexCoord2sv == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2sv;
  }
  if (strcmp(name, "glTexCoord2xOES") == 0) {
    if (__glintercept_fnptr_glTexCoord2xOES == NULL) {
      __glintercept_fnptr_glTexCoord2xOES = (__ctype_glTexCoord2xOES) eglGetProcAddr("glTexCoord2xOES");
    }
    if (__glintercept_fnptr_glTexCoord2xOES == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2xOES;
  }
  if (strcmp(name, "glTexCoord2xvOES") == 0) {
    if (__glintercept_fnptr_glTexCoord2xvOES == NULL) {
      __glintercept_fnptr_glTexCoord2xvOES = (__ctype_glTexCoord2xvOES) eglGetProcAddr("glTexCoord2xvOES");
    }
    if (__glintercept_fnptr_glTexCoord2xvOES == NULL) return NULL;
    return (void*) __glintercept_glTexCoord2xvOES;
  }
  if (strcmp(name, "glTexCoord3bOES") == 0) {
    if (__glintercept_fnptr_glTexCoord3bOES == NULL) {
      __glintercept_fnptr_glTexCoord3bOES = (__ctype_glTexCoord3bOES) eglGetProcAddr("glTexCoord3bOES");
    }
    if (__glintercept_fnptr_glTexCoord3bOES == NULL) return NULL;
    return (void*) __glintercept_glTexCoord3bOES;
  }
  if (strcmp(name, "glTexCoord3bvOES") == 0) {
    if (__glintercept_fnptr_glTexCoord3bvOES == NULL) {
      __glintercept_fnptr_glTexCoord3bvOES = (__ctype_glTexCoord3bvOES) eglGetProcAddr("glTexCoord3bvOES");
    }
    if (__glintercept_fnptr_glTexCoord3bvOES == NULL) return NULL;
    return (void*) __glintercept_glTexCoord3bvOES;
  }
  if (strcmp(name, "glTexCoord3d") == 0) {
    if (__glintercept_fnptr_glTexCoord3d == NULL) {
      __glintercept_fnptr_glTexCoord3d = (__ctype_glTexCoord3d) eglGetProcAddr("glTexCoord3d");
    }
    if (__glintercept_fnptr_glTexCoord3d == NULL) return NULL;
    return (void*) __glintercept_glTexCoord3d;
  }
  if (strcmp(name, "glTexCoord3dv") == 0) {
    if (__glintercept_fnptr_glTexCoord3dv == NULL) {
      __glintercept_fnptr_glTexCoord3dv = (__ctype_glTexCoord3dv) eglGetProcAddr("glTexCoord3dv");
    }
    if (__glintercept_fnptr_glTexCoord3dv == NULL) return NULL;
    return (void*) __glintercept_glTexCoord3dv;
  }
  if (strcmp(name, "glTexCoord3f") == 0) {
    if (__glintercept_fnptr_glTexCoord3f == NULL) {
      __glintercept_fnptr_glTexCoord3f = (__ctype_glTexCoord3f) eglGetProcAddr("glTexCoord3f");
    }
    if (__glintercept_fnptr_glTexCoord3f == NULL) return NULL;
    return (void*) __glintercept_glTexCoord3f;
  }
  if (strcmp(name, "glTexCoord3fv") == 0) {
    if (__glintercept_fnptr_glTexCoord3fv == NULL) {
      __glintercept_fnptr_glTexCoord3fv = (__ctype_glTexCoord3fv) eglGetProcAddr("glTexCoord3fv");
    }
    if (__glintercept_fnptr_glTexCoord3fv == NULL) return NULL;
    return (void*) __glintercept_glTexCoord3fv;
  }
  if (strcmp(name, "glTexCoord3hNV") == 0) {
    if (__glintercept_fnptr_glTexCoord3hNV == NULL) {
      __glintercept_fnptr_glTexCoord3hNV = (__ctype_glTexCoord3hNV) eglGetProcAddr("glTexCoord3hNV");
    }
    if (__glintercept_fnptr_glTexCoord3hNV == NULL) return NULL;
    return (void*) __glintercept_glTexCoord3hNV;
  }
  if (strcmp(name, "glTexCoord3hvNV") == 0) {
    if (__glintercept_fnptr_glTexCoord3hvNV == NULL) {
      __glintercept_fnptr_glTexCoord3hvNV = (__ctype_glTexCoord3hvNV) eglGetProcAddr("glTexCoord3hvNV");
    }
    if (__glintercept_fnptr_glTexCoord3hvNV == NULL) return NULL;
    return (void*) __glintercept_glTexCoord3hvNV;
  }
  if (strcmp(name, "glTexCoord3i") == 0) {
    if (__glintercept_fnptr_glTexCoord3i == NULL) {
      __glintercept_fnptr_glTexCoord3i = (__ctype_glTexCoord3i) eglGetProcAddr("glTexCoord3i");
    }
    if (__glintercept_fnptr_glTexCoord3i == NULL) return NULL;
    return (void*) __glintercept_glTexCoord3i;
  }
  if (strcmp(name, "glTexCoord3iv") == 0) {
    if (__glintercept_fnptr_glTexCoord3iv == NULL) {
      __glintercept_fnptr_glTexCoord3iv = (__ctype_glTexCoord3iv) eglGetProcAddr("glTexCoord3iv");
    }
    if (__glintercept_fnptr_glTexCoord3iv == NULL) return NULL;
    return (void*) __glintercept_glTexCoord3iv;
  }
  if (strcmp(name, "glTexCoord3s") == 0) {
    if (__glintercept_fnptr_glTexCoord3s == NULL) {
      __glintercept_fnptr_glTexCoord3s = (__ctype_glTexCoord3s) eglGetProcAddr("glTexCoord3s");
    }
    if (__glintercept_fnptr_glTexCoord3s == NULL) return NULL;
    return (void*) __glintercept_glTexCoord3s;
  }
  if (strcmp(name, "glTexCoord3sv") == 0) {
    if (__glintercept_fnptr_glTexCoord3sv == NULL) {
      __glintercept_fnptr_glTexCoord3sv = (__ctype_glTexCoord3sv) eglGetProcAddr("glTexCoord3sv");
    }
    if (__glintercept_fnptr_glTexCoord3sv == NULL) return NULL;
    return (void*) __glintercept_glTexCoord3sv;
  }
  if (strcmp(name, "glTexCoord3xOES") == 0) {
    if (__glintercept_fnptr_glTexCoord3xOES == NULL) {
      __glintercept_fnptr_glTexCoord3xOES = (__ctype_glTexCoord3xOES) eglGetProcAddr("glTexCoord3xOES");
    }
    if (__glintercept_fnptr_glTexCoord3xOES == NULL) return NULL;
    return (void*) __glintercept_glTexCoord3xOES;
  }
  if (strcmp(name, "glTexCoord3xvOES") == 0) {
    if (__glintercept_fnptr_glTexCoord3xvOES == NULL) {
      __glintercept_fnptr_glTexCoord3xvOES = (__ctype_glTexCoord3xvOES) eglGetProcAddr("glTexCoord3xvOES");
    }
    if (__glintercept_fnptr_glTexCoord3xvOES == NULL) return NULL;
    return (void*) __glintercept_glTexCoord3xvOES;
  }
  if (strcmp(name, "glTexCoord4bOES") == 0) {
    if (__glintercept_fnptr_glTexCoord4bOES == NULL) {
      __glintercept_fnptr_glTexCoord4bOES = (__ctype_glTexCoord4bOES) eglGetProcAddr("glTexCoord4bOES");
    }
    if (__glintercept_fnptr_glTexCoord4bOES == NULL) return NULL;
    return (void*) __glintercept_glTexCoord4bOES;
  }
  if (strcmp(name, "glTexCoord4bvOES") == 0) {
    if (__glintercept_fnptr_glTexCoord4bvOES == NULL) {
      __glintercept_fnptr_glTexCoord4bvOES = (__ctype_glTexCoord4bvOES) eglGetProcAddr("glTexCoord4bvOES");
    }
    if (__glintercept_fnptr_glTexCoord4bvOES == NULL) return NULL;
    return (void*) __glintercept_glTexCoord4bvOES;
  }
  if (strcmp(name, "glTexCoord4d") == 0) {
    if (__glintercept_fnptr_glTexCoord4d == NULL) {
      __glintercept_fnptr_glTexCoord4d = (__ctype_glTexCoord4d) eglGetProcAddr("glTexCoord4d");
    }
    if (__glintercept_fnptr_glTexCoord4d == NULL) return NULL;
    return (void*) __glintercept_glTexCoord4d;
  }
  if (strcmp(name, "glTexCoord4dv") == 0) {
    if (__glintercept_fnptr_glTexCoord4dv == NULL) {
      __glintercept_fnptr_glTexCoord4dv = (__ctype_glTexCoord4dv) eglGetProcAddr("glTexCoord4dv");
    }
    if (__glintercept_fnptr_glTexCoord4dv == NULL) return NULL;
    return (void*) __glintercept_glTexCoord4dv;
  }
  if (strcmp(name, "glTexCoord4f") == 0) {
    if (__glintercept_fnptr_glTexCoord4f == NULL) {
      __glintercept_fnptr_glTexCoord4f = (__ctype_glTexCoord4f) eglGetProcAddr("glTexCoord4f");
    }
    if (__glintercept_fnptr_glTexCoord4f == NULL) return NULL;
    return (void*) __glintercept_glTexCoord4f;
  }
  if (strcmp(name, "glTexCoord4fColor4fNormal3fVertex4fSUN") == 0) {
    if (__glintercept_fnptr_glTexCoord4fColor4fNormal3fVertex4fSUN == NULL) {
      __glintercept_fnptr_glTexCoord4fColor4fNormal3fVertex4fSUN = (__ctype_glTexCoord4fColor4fNormal3fVertex4fSUN) eglGetProcAddr("glTexCoord4fColor4fNormal3fVertex4fSUN");
    }
    if (__glintercept_fnptr_glTexCoord4fColor4fNormal3fVertex4fSUN == NULL) return NULL;
    return (void*) __glintercept_glTexCoord4fColor4fNormal3fVertex4fSUN;
  }
  if (strcmp(name, "glTexCoord4fColor4fNormal3fVertex4fvSUN") == 0) {
    if (__glintercept_fnptr_glTexCoord4fColor4fNormal3fVertex4fvSUN == NULL) {
      __glintercept_fnptr_glTexCoord4fColor4fNormal3fVertex4fvSUN = (__ctype_glTexCoord4fColor4fNormal3fVertex4fvSUN) eglGetProcAddr("glTexCoord4fColor4fNormal3fVertex4fvSUN");
    }
    if (__glintercept_fnptr_glTexCoord4fColor4fNormal3fVertex4fvSUN == NULL) return NULL;
    return (void*) __glintercept_glTexCoord4fColor4fNormal3fVertex4fvSUN;
  }
  if (strcmp(name, "glTexCoord4fVertex4fSUN") == 0) {
    if (__glintercept_fnptr_glTexCoord4fVertex4fSUN == NULL) {
      __glintercept_fnptr_glTexCoord4fVertex4fSUN = (__ctype_glTexCoord4fVertex4fSUN) eglGetProcAddr("glTexCoord4fVertex4fSUN");
    }
    if (__glintercept_fnptr_glTexCoord4fVertex4fSUN == NULL) return NULL;
    return (void*) __glintercept_glTexCoord4fVertex4fSUN;
  }
  if (strcmp(name, "glTexCoord4fVertex4fvSUN") == 0) {
    if (__glintercept_fnptr_glTexCoord4fVertex4fvSUN == NULL) {
      __glintercept_fnptr_glTexCoord4fVertex4fvSUN = (__ctype_glTexCoord4fVertex4fvSUN) eglGetProcAddr("glTexCoord4fVertex4fvSUN");
    }
    if (__glintercept_fnptr_glTexCoord4fVertex4fvSUN == NULL) return NULL;
    return (void*) __glintercept_glTexCoord4fVertex4fvSUN;
  }
  if (strcmp(name, "glTexCoord4fv") == 0) {
    if (__glintercept_fnptr_glTexCoord4fv == NULL) {
      __glintercept_fnptr_glTexCoord4fv = (__ctype_glTexCoord4fv) eglGetProcAddr("glTexCoord4fv");
    }
    if (__glintercept_fnptr_glTexCoord4fv == NULL) return NULL;
    return (void*) __glintercept_glTexCoord4fv;
  }
  if (strcmp(name, "glTexCoord4hNV") == 0) {
    if (__glintercept_fnptr_glTexCoord4hNV == NULL) {
      __glintercept_fnptr_glTexCoord4hNV = (__ctype_glTexCoord4hNV) eglGetProcAddr("glTexCoord4hNV");
    }
    if (__glintercept_fnptr_glTexCoord4hNV == NULL) return NULL;
    return (void*) __glintercept_glTexCoord4hNV;
  }
  if (strcmp(name, "glTexCoord4hvNV") == 0) {
    if (__glintercept_fnptr_glTexCoord4hvNV == NULL) {
      __glintercept_fnptr_glTexCoord4hvNV = (__ctype_glTexCoord4hvNV) eglGetProcAddr("glTexCoord4hvNV");
    }
    if (__glintercept_fnptr_glTexCoord4hvNV == NULL) return NULL;
    return (void*) __glintercept_glTexCoord4hvNV;
  }
  if (strcmp(name, "glTexCoord4i") == 0) {
    if (__glintercept_fnptr_glTexCoord4i == NULL) {
      __glintercept_fnptr_glTexCoord4i = (__ctype_glTexCoord4i) eglGetProcAddr("glTexCoord4i");
    }
    if (__glintercept_fnptr_glTexCoord4i == NULL) return NULL;
    return (void*) __glintercept_glTexCoord4i;
  }
  if (strcmp(name, "glTexCoord4iv") == 0) {
    if (__glintercept_fnptr_glTexCoord4iv == NULL) {
      __glintercept_fnptr_glTexCoord4iv = (__ctype_glTexCoord4iv) eglGetProcAddr("glTexCoord4iv");
    }
    if (__glintercept_fnptr_glTexCoord4iv == NULL) return NULL;
    return (void*) __glintercept_glTexCoord4iv;
  }
  if (strcmp(name, "glTexCoord4s") == 0) {
    if (__glintercept_fnptr_glTexCoord4s == NULL) {
      __glintercept_fnptr_glTexCoord4s = (__ctype_glTexCoord4s) eglGetProcAddr("glTexCoord4s");
    }
    if (__glintercept_fnptr_glTexCoord4s == NULL) return NULL;
    return (void*) __glintercept_glTexCoord4s;
  }
  if (strcmp(name, "glTexCoord4sv") == 0) {
    if (__glintercept_fnptr_glTexCoord4sv == NULL) {
      __glintercept_fnptr_glTexCoord4sv = (__ctype_glTexCoord4sv) eglGetProcAddr("glTexCoord4sv");
    }
    if (__glintercept_fnptr_glTexCoord4sv == NULL) return NULL;
    return (void*) __glintercept_glTexCoord4sv;
  }
  if (strcmp(name, "glTexCoord4xOES") == 0) {
    if (__glintercept_fnptr_glTexCoord4xOES == NULL) {
      __glintercept_fnptr_glTexCoord4xOES = (__ctype_glTexCoord4xOES) eglGetProcAddr("glTexCoord4xOES");
    }
    if (__glintercept_fnptr_glTexCoord4xOES == NULL) return NULL;
    return (void*) __glintercept_glTexCoord4xOES;
  }
  if (strcmp(name, "glTexCoord4xvOES") == 0) {
    if (__glintercept_fnptr_glTexCoord4xvOES == NULL) {
      __glintercept_fnptr_glTexCoord4xvOES = (__ctype_glTexCoord4xvOES) eglGetProcAddr("glTexCoord4xvOES");
    }
    if (__glintercept_fnptr_glTexCoord4xvOES == NULL) return NULL;
    return (void*) __glintercept_glTexCoord4xvOES;
  }
  if (strcmp(name, "glTexCoordFormatNV") == 0) {
    if (__glintercept_fnptr_glTexCoordFormatNV == NULL) {
      __glintercept_fnptr_glTexCoordFormatNV = (__ctype_glTexCoordFormatNV) eglGetProcAddr("glTexCoordFormatNV");
    }
    if (__glintercept_fnptr_glTexCoordFormatNV == NULL) return NULL;
    return (void*) __glintercept_glTexCoordFormatNV;
  }
  if (strcmp(name, "glTexCoordP1ui") == 0) {
    if (__glintercept_fnptr_glTexCoordP1ui == NULL) {
      __glintercept_fnptr_glTexCoordP1ui = (__ctype_glTexCoordP1ui) eglGetProcAddr("glTexCoordP1ui");
    }
    if (__glintercept_fnptr_glTexCoordP1ui == NULL) return NULL;
    return (void*) __glintercept_glTexCoordP1ui;
  }
  if (strcmp(name, "glTexCoordP1uiv") == 0) {
    if (__glintercept_fnptr_glTexCoordP1uiv == NULL) {
      __glintercept_fnptr_glTexCoordP1uiv = (__ctype_glTexCoordP1uiv) eglGetProcAddr("glTexCoordP1uiv");
    }
    if (__glintercept_fnptr_glTexCoordP1uiv == NULL) return NULL;
    return (void*) __glintercept_glTexCoordP1uiv;
  }
  if (strcmp(name, "glTexCoordP2ui") == 0) {
    if (__glintercept_fnptr_glTexCoordP2ui == NULL) {
      __glintercept_fnptr_glTexCoordP2ui = (__ctype_glTexCoordP2ui) eglGetProcAddr("glTexCoordP2ui");
    }
    if (__glintercept_fnptr_glTexCoordP2ui == NULL) return NULL;
    return (void*) __glintercept_glTexCoordP2ui;
  }
  if (strcmp(name, "glTexCoordP2uiv") == 0) {
    if (__glintercept_fnptr_glTexCoordP2uiv == NULL) {
      __glintercept_fnptr_glTexCoordP2uiv = (__ctype_glTexCoordP2uiv) eglGetProcAddr("glTexCoordP2uiv");
    }
    if (__glintercept_fnptr_glTexCoordP2uiv == NULL) return NULL;
    return (void*) __glintercept_glTexCoordP2uiv;
  }
  if (strcmp(name, "glTexCoordP3ui") == 0) {
    if (__glintercept_fnptr_glTexCoordP3ui == NULL) {
      __glintercept_fnptr_glTexCoordP3ui = (__ctype_glTexCoordP3ui) eglGetProcAddr("glTexCoordP3ui");
    }
    if (__glintercept_fnptr_glTexCoordP3ui == NULL) return NULL;
    return (void*) __glintercept_glTexCoordP3ui;
  }
  if (strcmp(name, "glTexCoordP3uiv") == 0) {
    if (__glintercept_fnptr_glTexCoordP3uiv == NULL) {
      __glintercept_fnptr_glTexCoordP3uiv = (__ctype_glTexCoordP3uiv) eglGetProcAddr("glTexCoordP3uiv");
    }
    if (__glintercept_fnptr_glTexCoordP3uiv == NULL) return NULL;
    return (void*) __glintercept_glTexCoordP3uiv;
  }
  if (strcmp(name, "glTexCoordP4ui") == 0) {
    if (__glintercept_fnptr_glTexCoordP4ui == NULL) {
      __glintercept_fnptr_glTexCoordP4ui = (__ctype_glTexCoordP4ui) eglGetProcAddr("glTexCoordP4ui");
    }
    if (__glintercept_fnptr_glTexCoordP4ui == NULL) return NULL;
    return (void*) __glintercept_glTexCoordP4ui;
  }
  if (strcmp(name, "glTexCoordP4uiv") == 0) {
    if (__glintercept_fnptr_glTexCoordP4uiv == NULL) {
      __glintercept_fnptr_glTexCoordP4uiv = (__ctype_glTexCoordP4uiv) eglGetProcAddr("glTexCoordP4uiv");
    }
    if (__glintercept_fnptr_glTexCoordP4uiv == NULL) return NULL;
    return (void*) __glintercept_glTexCoordP4uiv;
  }
  if (strcmp(name, "glTexCoordPointer") == 0) {
    if (__glintercept_fnptr_glTexCoordPointer == NULL) {
      __glintercept_fnptr_glTexCoordPointer = (__ctype_glTexCoordPointer) eglGetProcAddr("glTexCoordPointer");
    }
    if (__glintercept_fnptr_glTexCoordPointer == NULL) return NULL;
    return (void*) __glintercept_glTexCoordPointer;
  }
  if (strcmp(name, "glTexCoordPointerEXT") == 0) {
    if (__glintercept_fnptr_glTexCoordPointerEXT == NULL) {
      __glintercept_fnptr_glTexCoordPointerEXT = (__ctype_glTexCoordPointerEXT) eglGetProcAddr("glTexCoordPointerEXT");
    }
    if (__glintercept_fnptr_glTexCoordPointerEXT == NULL) return NULL;
    return (void*) __glintercept_glTexCoordPointerEXT;
  }
  if (strcmp(name, "glTexCoordPointerListIBM") == 0) {
    if (__glintercept_fnptr_glTexCoordPointerListIBM == NULL) {
      __glintercept_fnptr_glTexCoordPointerListIBM = (__ctype_glTexCoordPointerListIBM) eglGetProcAddr("glTexCoordPointerListIBM");
    }
    if (__glintercept_fnptr_glTexCoordPointerListIBM == NULL) return NULL;
    return (void*) __glintercept_glTexCoordPointerListIBM;
  }
  if (strcmp(name, "glTexCoordPointervINTEL") == 0) {
    if (__glintercept_fnptr_glTexCoordPointervINTEL == NULL) {
      __glintercept_fnptr_glTexCoordPointervINTEL = (__ctype_glTexCoordPointervINTEL) eglGetProcAddr("glTexCoordPointervINTEL");
    }
    if (__glintercept_fnptr_glTexCoordPointervINTEL == NULL) return NULL;
    return (void*) __glintercept_glTexCoordPointervINTEL;
  }
  if (strcmp(name, "glTexEnvf") == 0) {
    if (__glintercept_fnptr_glTexEnvf == NULL) {
      __glintercept_fnptr_glTexEnvf = (__ctype_glTexEnvf) eglGetProcAddr("glTexEnvf");
    }
    if (__glintercept_fnptr_glTexEnvf == NULL) return NULL;
    return (void*) __glintercept_glTexEnvf;
  }
  if (strcmp(name, "glTexEnvfv") == 0) {
    if (__glintercept_fnptr_glTexEnvfv == NULL) {
      __glintercept_fnptr_glTexEnvfv = (__ctype_glTexEnvfv) eglGetProcAddr("glTexEnvfv");
    }
    if (__glintercept_fnptr_glTexEnvfv == NULL) return NULL;
    return (void*) __glintercept_glTexEnvfv;
  }
  if (strcmp(name, "glTexEnvi") == 0) {
    if (__glintercept_fnptr_glTexEnvi == NULL) {
      __glintercept_fnptr_glTexEnvi = (__ctype_glTexEnvi) eglGetProcAddr("glTexEnvi");
    }
    if (__glintercept_fnptr_glTexEnvi == NULL) return NULL;
    return (void*) __glintercept_glTexEnvi;
  }
  if (strcmp(name, "glTexEnviv") == 0) {
    if (__glintercept_fnptr_glTexEnviv == NULL) {
      __glintercept_fnptr_glTexEnviv = (__ctype_glTexEnviv) eglGetProcAddr("glTexEnviv");
    }
    if (__glintercept_fnptr_glTexEnviv == NULL) return NULL;
    return (void*) __glintercept_glTexEnviv;
  }
  if (strcmp(name, "glTexEnvx") == 0) {
    if (__glintercept_fnptr_glTexEnvx == NULL) {
      __glintercept_fnptr_glTexEnvx = (__ctype_glTexEnvx) eglGetProcAddr("glTexEnvx");
    }
    if (__glintercept_fnptr_glTexEnvx == NULL) return NULL;
    return (void*) __glintercept_glTexEnvx;
  }
  if (strcmp(name, "glTexEnvxOES") == 0) {
    if (__glintercept_fnptr_glTexEnvxOES == NULL) {
      __glintercept_fnptr_glTexEnvxOES = (__ctype_glTexEnvxOES) eglGetProcAddr("glTexEnvxOES");
    }
    if (__glintercept_fnptr_glTexEnvxOES == NULL) return NULL;
    return (void*) __glintercept_glTexEnvxOES;
  }
  if (strcmp(name, "glTexEnvxv") == 0) {
    if (__glintercept_fnptr_glTexEnvxv == NULL) {
      __glintercept_fnptr_glTexEnvxv = (__ctype_glTexEnvxv) eglGetProcAddr("glTexEnvxv");
    }
    if (__glintercept_fnptr_glTexEnvxv == NULL) return NULL;
    return (void*) __glintercept_glTexEnvxv;
  }
  if (strcmp(name, "glTexEnvxvOES") == 0) {
    if (__glintercept_fnptr_glTexEnvxvOES == NULL) {
      __glintercept_fnptr_glTexEnvxvOES = (__ctype_glTexEnvxvOES) eglGetProcAddr("glTexEnvxvOES");
    }
    if (__glintercept_fnptr_glTexEnvxvOES == NULL) return NULL;
    return (void*) __glintercept_glTexEnvxvOES;
  }
  if (strcmp(name, "glTexEstimateMotionQCOM") == 0) {
    if (__glintercept_fnptr_glTexEstimateMotionQCOM == NULL) {
      __glintercept_fnptr_glTexEstimateMotionQCOM = (__ctype_glTexEstimateMotionQCOM) eglGetProcAddr("glTexEstimateMotionQCOM");
    }
    if (__glintercept_fnptr_glTexEstimateMotionQCOM == NULL) return NULL;
    return (void*) __glintercept_glTexEstimateMotionQCOM;
  }
  if (strcmp(name, "glTexEstimateMotionRegionsQCOM") == 0) {
    if (__glintercept_fnptr_glTexEstimateMotionRegionsQCOM == NULL) {
      __glintercept_fnptr_glTexEstimateMotionRegionsQCOM = (__ctype_glTexEstimateMotionRegionsQCOM) eglGetProcAddr("glTexEstimateMotionRegionsQCOM");
    }
    if (__glintercept_fnptr_glTexEstimateMotionRegionsQCOM == NULL) return NULL;
    return (void*) __glintercept_glTexEstimateMotionRegionsQCOM;
  }
  if (strcmp(name, "glExtrapolateTex2DQCOM") == 0) {
    if (__glintercept_fnptr_glExtrapolateTex2DQCOM == NULL) {
      __glintercept_fnptr_glExtrapolateTex2DQCOM = (__ctype_glExtrapolateTex2DQCOM) eglGetProcAddr("glExtrapolateTex2DQCOM");
    }
    if (__glintercept_fnptr_glExtrapolateTex2DQCOM == NULL) return NULL;
    return (void*) __glintercept_glExtrapolateTex2DQCOM;
  }
  if (strcmp(name, "glTexFilterFuncSGIS") == 0) {
    if (__glintercept_fnptr_glTexFilterFuncSGIS == NULL) {
      __glintercept_fnptr_glTexFilterFuncSGIS = (__ctype_glTexFilterFuncSGIS) eglGetProcAddr("glTexFilterFuncSGIS");
    }
    if (__glintercept_fnptr_glTexFilterFuncSGIS == NULL) return NULL;
    return (void*) __glintercept_glTexFilterFuncSGIS;
  }
  if (strcmp(name, "glTexGend") == 0) {
    if (__glintercept_fnptr_glTexGend == NULL) {
      __glintercept_fnptr_glTexGend = (__ctype_glTexGend) eglGetProcAddr("glTexGend");
    }
    if (__glintercept_fnptr_glTexGend == NULL) return NULL;
    return (void*) __glintercept_glTexGend;
  }
  if (strcmp(name, "glTexGendv") == 0) {
    if (__glintercept_fnptr_glTexGendv == NULL) {
      __glintercept_fnptr_glTexGendv = (__ctype_glTexGendv) eglGetProcAddr("glTexGendv");
    }
    if (__glintercept_fnptr_glTexGendv == NULL) return NULL;
    return (void*) __glintercept_glTexGendv;
  }
  if (strcmp(name, "glTexGenf") == 0) {
    if (__glintercept_fnptr_glTexGenf == NULL) {
      __glintercept_fnptr_glTexGenf = (__ctype_glTexGenf) eglGetProcAddr("glTexGenf");
    }
    if (__glintercept_fnptr_glTexGenf == NULL) return NULL;
    return (void*) __glintercept_glTexGenf;
  }
  if (strcmp(name, "glTexGenfOES") == 0) {
    if (__glintercept_fnptr_glTexGenfOES == NULL) {
      __glintercept_fnptr_glTexGenfOES = (__ctype_glTexGenfOES) eglGetProcAddr("glTexGenfOES");
    }
    if (__glintercept_fnptr_glTexGenfOES == NULL) return NULL;
    return (void*) __glintercept_glTexGenfOES;
  }
  if (strcmp(name, "glTexGenfv") == 0) {
    if (__glintercept_fnptr_glTexGenfv == NULL) {
      __glintercept_fnptr_glTexGenfv = (__ctype_glTexGenfv) eglGetProcAddr("glTexGenfv");
    }
    if (__glintercept_fnptr_glTexGenfv == NULL) return NULL;
    return (void*) __glintercept_glTexGenfv;
  }
  if (strcmp(name, "glTexGenfvOES") == 0) {
    if (__glintercept_fnptr_glTexGenfvOES == NULL) {
      __glintercept_fnptr_glTexGenfvOES = (__ctype_glTexGenfvOES) eglGetProcAddr("glTexGenfvOES");
    }
    if (__glintercept_fnptr_glTexGenfvOES == NULL) return NULL;
    return (void*) __glintercept_glTexGenfvOES;
  }
  if (strcmp(name, "glTexGeni") == 0) {
    if (__glintercept_fnptr_glTexGeni == NULL) {
      __glintercept_fnptr_glTexGeni = (__ctype_glTexGeni) eglGetProcAddr("glTexGeni");
    }
    if (__glintercept_fnptr_glTexGeni == NULL) return NULL;
    return (void*) __glintercept_glTexGeni;
  }
  if (strcmp(name, "glTexGeniOES") == 0) {
    if (__glintercept_fnptr_glTexGeniOES == NULL) {
      __glintercept_fnptr_glTexGeniOES = (__ctype_glTexGeniOES) eglGetProcAddr("glTexGeniOES");
    }
    if (__glintercept_fnptr_glTexGeniOES == NULL) return NULL;
    return (void*) __glintercept_glTexGeniOES;
  }
  if (strcmp(name, "glTexGeniv") == 0) {
    if (__glintercept_fnptr_glTexGeniv == NULL) {
      __glintercept_fnptr_glTexGeniv = (__ctype_glTexGeniv) eglGetProcAddr("glTexGeniv");
    }
    if (__glintercept_fnptr_glTexGeniv == NULL) return NULL;
    return (void*) __glintercept_glTexGeniv;
  }
  if (strcmp(name, "glTexGenivOES") == 0) {
    if (__glintercept_fnptr_glTexGenivOES == NULL) {
      __glintercept_fnptr_glTexGenivOES = (__ctype_glTexGenivOES) eglGetProcAddr("glTexGenivOES");
    }
    if (__glintercept_fnptr_glTexGenivOES == NULL) return NULL;
    return (void*) __glintercept_glTexGenivOES;
  }
  if (strcmp(name, "glTexGenxOES") == 0) {
    if (__glintercept_fnptr_glTexGenxOES == NULL) {
      __glintercept_fnptr_glTexGenxOES = (__ctype_glTexGenxOES) eglGetProcAddr("glTexGenxOES");
    }
    if (__glintercept_fnptr_glTexGenxOES == NULL) return NULL;
    return (void*) __glintercept_glTexGenxOES;
  }
  if (strcmp(name, "glTexGenxvOES") == 0) {
    if (__glintercept_fnptr_glTexGenxvOES == NULL) {
      __glintercept_fnptr_glTexGenxvOES = (__ctype_glTexGenxvOES) eglGetProcAddr("glTexGenxvOES");
    }
    if (__glintercept_fnptr_glTexGenxvOES == NULL) return NULL;
    return (void*) __glintercept_glTexGenxvOES;
  }
  if (strcmp(name, "glTexImage1D") == 0) {
    if (__glintercept_fnptr_glTexImage1D == NULL) {
      __glintercept_fnptr_glTexImage1D = (__ctype_glTexImage1D) eglGetProcAddr("glTexImage1D");
    }
    if (__glintercept_fnptr_glTexImage1D == NULL) return NULL;
    return (void*) __glintercept_glTexImage1D;
  }
  if (strcmp(name, "glTexImage2D") == 0) {
    if (__glintercept_fnptr_glTexImage2D == NULL) {
      __glintercept_fnptr_glTexImage2D = (__ctype_glTexImage2D) eglGetProcAddr("glTexImage2D");
    }
    if (__glintercept_fnptr_glTexImage2D == NULL) return NULL;
    return (void*) __glintercept_glTexImage2D;
  }
  if (strcmp(name, "glTexImage2DMultisample") == 0) {
    if (__glintercept_fnptr_glTexImage2DMultisample == NULL) {
      __glintercept_fnptr_glTexImage2DMultisample = (__ctype_glTexImage2DMultisample) eglGetProcAddr("glTexImage2DMultisample");
    }
    if (__glintercept_fnptr_glTexImage2DMultisample == NULL) return NULL;
    return (void*) __glintercept_glTexImage2DMultisample;
  }
  if (strcmp(name, "glTexImage2DMultisampleCoverageNV") == 0) {
    if (__glintercept_fnptr_glTexImage2DMultisampleCoverageNV == NULL) {
      __glintercept_fnptr_glTexImage2DMultisampleCoverageNV = (__ctype_glTexImage2DMultisampleCoverageNV) eglGetProcAddr("glTexImage2DMultisampleCoverageNV");
    }
    if (__glintercept_fnptr_glTexImage2DMultisampleCoverageNV == NULL) return NULL;
    return (void*) __glintercept_glTexImage2DMultisampleCoverageNV;
  }
  if (strcmp(name, "glTexImage3D") == 0) {
    if (__glintercept_fnptr_glTexImage3D == NULL) {
      __glintercept_fnptr_glTexImage3D = (__ctype_glTexImage3D) eglGetProcAddr("glTexImage3D");
    }
    if (__glintercept_fnptr_glTexImage3D == NULL) return NULL;
    return (void*) __glintercept_glTexImage3D;
  }
  if (strcmp(name, "glTexImage3DEXT") == 0) {
    if (__glintercept_fnptr_glTexImage3DEXT == NULL) {
      __glintercept_fnptr_glTexImage3DEXT = (__ctype_glTexImage3DEXT) eglGetProcAddr("glTexImage3DEXT");
    }
    if (__glintercept_fnptr_glTexImage3DEXT == NULL) return NULL;
    return (void*) __glintercept_glTexImage3DEXT;
  }
  if (strcmp(name, "glTexImage3DMultisample") == 0) {
    if (__glintercept_fnptr_glTexImage3DMultisample == NULL) {
      __glintercept_fnptr_glTexImage3DMultisample = (__ctype_glTexImage3DMultisample) eglGetProcAddr("glTexImage3DMultisample");
    }
    if (__glintercept_fnptr_glTexImage3DMultisample == NULL) return NULL;
    return (void*) __glintercept_glTexImage3DMultisample;
  }
  if (strcmp(name, "glTexImage3DMultisampleCoverageNV") == 0) {
    if (__glintercept_fnptr_glTexImage3DMultisampleCoverageNV == NULL) {
      __glintercept_fnptr_glTexImage3DMultisampleCoverageNV = (__ctype_glTexImage3DMultisampleCoverageNV) eglGetProcAddr("glTexImage3DMultisampleCoverageNV");
    }
    if (__glintercept_fnptr_glTexImage3DMultisampleCoverageNV == NULL) return NULL;
    return (void*) __glintercept_glTexImage3DMultisampleCoverageNV;
  }
  if (strcmp(name, "glTexImage3DOES") == 0) {
    if (__glintercept_fnptr_glTexImage3DOES == NULL) {
      __glintercept_fnptr_glTexImage3DOES = (__ctype_glTexImage3DOES) eglGetProcAddr("glTexImage3DOES");
    }
    if (__glintercept_fnptr_glTexImage3DOES == NULL) return NULL;
    return (void*) __glintercept_glTexImage3DOES;
  }
  if (strcmp(name, "glTexImage4DSGIS") == 0) {
    if (__glintercept_fnptr_glTexImage4DSGIS == NULL) {
      __glintercept_fnptr_glTexImage4DSGIS = (__ctype_glTexImage4DSGIS) eglGetProcAddr("glTexImage4DSGIS");
    }
    if (__glintercept_fnptr_glTexImage4DSGIS == NULL) return NULL;
    return (void*) __glintercept_glTexImage4DSGIS;
  }
  if (strcmp(name, "glTexPageCommitmentARB") == 0) {
    if (__glintercept_fnptr_glTexPageCommitmentARB == NULL) {
      __glintercept_fnptr_glTexPageCommitmentARB = (__ctype_glTexPageCommitmentARB) eglGetProcAddr("glTexPageCommitmentARB");
    }
    if (__glintercept_fnptr_glTexPageCommitmentARB == NULL) return NULL;
    return (void*) __glintercept_glTexPageCommitmentARB;
  }
  if (strcmp(name, "glTexPageCommitmentEXT") == 0) {
    if (__glintercept_fnptr_glTexPageCommitmentEXT == NULL) {
      __glintercept_fnptr_glTexPageCommitmentEXT = (__ctype_glTexPageCommitmentEXT) eglGetProcAddr("glTexPageCommitmentEXT");
    }
    if (__glintercept_fnptr_glTexPageCommitmentEXT == NULL) return NULL;
    return (void*) __glintercept_glTexPageCommitmentEXT;
  }
  if (strcmp(name, "glTexPageCommitmentMemNV") == 0) {
    if (__glintercept_fnptr_glTexPageCommitmentMemNV == NULL) {
      __glintercept_fnptr_glTexPageCommitmentMemNV = (__ctype_glTexPageCommitmentMemNV) eglGetProcAddr("glTexPageCommitmentMemNV");
    }
    if (__glintercept_fnptr_glTexPageCommitmentMemNV == NULL) return NULL;
    return (void*) __glintercept_glTexPageCommitmentMemNV;
  }
  if (strcmp(name, "glTexParameterIiv") == 0) {
    if (__glintercept_fnptr_glTexParameterIiv == NULL) {
      __glintercept_fnptr_glTexParameterIiv = (__ctype_glTexParameterIiv) eglGetProcAddr("glTexParameterIiv");
    }
    if (__glintercept_fnptr_glTexParameterIiv == NULL) return NULL;
    return (void*) __glintercept_glTexParameterIiv;
  }
  if (strcmp(name, "glTexParameterIivEXT") == 0) {
    if (__glintercept_fnptr_glTexParameterIivEXT == NULL) {
      __glintercept_fnptr_glTexParameterIivEXT = (__ctype_glTexParameterIivEXT) eglGetProcAddr("glTexParameterIivEXT");
    }
    if (__glintercept_fnptr_glTexParameterIivEXT == NULL) return NULL;
    return (void*) __glintercept_glTexParameterIivEXT;
  }
  if (strcmp(name, "glTexParameterIivOES") == 0) {
    if (__glintercept_fnptr_glTexParameterIivOES == NULL) {
      __glintercept_fnptr_glTexParameterIivOES = (__ctype_glTexParameterIivOES) eglGetProcAddr("glTexParameterIivOES");
    }
    if (__glintercept_fnptr_glTexParameterIivOES == NULL) return NULL;
    return (void*) __glintercept_glTexParameterIivOES;
  }
  if (strcmp(name, "glTexParameterIuiv") == 0) {
    if (__glintercept_fnptr_glTexParameterIuiv == NULL) {
      __glintercept_fnptr_glTexParameterIuiv = (__ctype_glTexParameterIuiv) eglGetProcAddr("glTexParameterIuiv");
    }
    if (__glintercept_fnptr_glTexParameterIuiv == NULL) return NULL;
    return (void*) __glintercept_glTexParameterIuiv;
  }
  if (strcmp(name, "glTexParameterIuivEXT") == 0) {
    if (__glintercept_fnptr_glTexParameterIuivEXT == NULL) {
      __glintercept_fnptr_glTexParameterIuivEXT = (__ctype_glTexParameterIuivEXT) eglGetProcAddr("glTexParameterIuivEXT");
    }
    if (__glintercept_fnptr_glTexParameterIuivEXT == NULL) return NULL;
    return (void*) __glintercept_glTexParameterIuivEXT;
  }
  if (strcmp(name, "glTexParameterIuivOES") == 0) {
    if (__glintercept_fnptr_glTexParameterIuivOES == NULL) {
      __glintercept_fnptr_glTexParameterIuivOES = (__ctype_glTexParameterIuivOES) eglGetProcAddr("glTexParameterIuivOES");
    }
    if (__glintercept_fnptr_glTexParameterIuivOES == NULL) return NULL;
    return (void*) __glintercept_glTexParameterIuivOES;
  }
  if (strcmp(name, "glTexParameterf") == 0) {
    if (__glintercept_fnptr_glTexParameterf == NULL) {
      __glintercept_fnptr_glTexParameterf = (__ctype_glTexParameterf) eglGetProcAddr("glTexParameterf");
    }
    if (__glintercept_fnptr_glTexParameterf == NULL) return NULL;
    return (void*) __glintercept_glTexParameterf;
  }
  if (strcmp(name, "glTexParameterfv") == 0) {
    if (__glintercept_fnptr_glTexParameterfv == NULL) {
      __glintercept_fnptr_glTexParameterfv = (__ctype_glTexParameterfv) eglGetProcAddr("glTexParameterfv");
    }
    if (__glintercept_fnptr_glTexParameterfv == NULL) return NULL;
    return (void*) __glintercept_glTexParameterfv;
  }
  if (strcmp(name, "glTexParameteri") == 0) {
    if (__glintercept_fnptr_glTexParameteri == NULL) {
      __glintercept_fnptr_glTexParameteri = (__ctype_glTexParameteri) eglGetProcAddr("glTexParameteri");
    }
    if (__glintercept_fnptr_glTexParameteri == NULL) return NULL;
    return (void*) __glintercept_glTexParameteri;
  }
  if (strcmp(name, "glTexParameteriv") == 0) {
    if (__glintercept_fnptr_glTexParameteriv == NULL) {
      __glintercept_fnptr_glTexParameteriv = (__ctype_glTexParameteriv) eglGetProcAddr("glTexParameteriv");
    }
    if (__glintercept_fnptr_glTexParameteriv == NULL) return NULL;
    return (void*) __glintercept_glTexParameteriv;
  }
  if (strcmp(name, "glTexParameterx") == 0) {
    if (__glintercept_fnptr_glTexParameterx == NULL) {
      __glintercept_fnptr_glTexParameterx = (__ctype_glTexParameterx) eglGetProcAddr("glTexParameterx");
    }
    if (__glintercept_fnptr_glTexParameterx == NULL) return NULL;
    return (void*) __glintercept_glTexParameterx;
  }
  if (strcmp(name, "glTexParameterxOES") == 0) {
    if (__glintercept_fnptr_glTexParameterxOES == NULL) {
      __glintercept_fnptr_glTexParameterxOES = (__ctype_glTexParameterxOES) eglGetProcAddr("glTexParameterxOES");
    }
    if (__glintercept_fnptr_glTexParameterxOES == NULL) return NULL;
    return (void*) __glintercept_glTexParameterxOES;
  }
  if (strcmp(name, "glTexParameterxv") == 0) {
    if (__glintercept_fnptr_glTexParameterxv == NULL) {
      __glintercept_fnptr_glTexParameterxv = (__ctype_glTexParameterxv) eglGetProcAddr("glTexParameterxv");
    }
    if (__glintercept_fnptr_glTexParameterxv == NULL) return NULL;
    return (void*) __glintercept_glTexParameterxv;
  }
  if (strcmp(name, "glTexParameterxvOES") == 0) {
    if (__glintercept_fnptr_glTexParameterxvOES == NULL) {
      __glintercept_fnptr_glTexParameterxvOES = (__ctype_glTexParameterxvOES) eglGetProcAddr("glTexParameterxvOES");
    }
    if (__glintercept_fnptr_glTexParameterxvOES == NULL) return NULL;
    return (void*) __glintercept_glTexParameterxvOES;
  }
  if (strcmp(name, "glTexRenderbufferNV") == 0) {
    if (__glintercept_fnptr_glTexRenderbufferNV == NULL) {
      __glintercept_fnptr_glTexRenderbufferNV = (__ctype_glTexRenderbufferNV) eglGetProcAddr("glTexRenderbufferNV");
    }
    if (__glintercept_fnptr_glTexRenderbufferNV == NULL) return NULL;
    return (void*) __glintercept_glTexRenderbufferNV;
  }
  if (strcmp(name, "glTexStorage1D") == 0) {
    if (__glintercept_fnptr_glTexStorage1D == NULL) {
      __glintercept_fnptr_glTexStorage1D = (__ctype_glTexStorage1D) eglGetProcAddr("glTexStorage1D");
    }
    if (__glintercept_fnptr_glTexStorage1D == NULL) return NULL;
    return (void*) __glintercept_glTexStorage1D;
  }
  if (strcmp(name, "glTexStorage1DEXT") == 0) {
    if (__glintercept_fnptr_glTexStorage1DEXT == NULL) {
      __glintercept_fnptr_glTexStorage1DEXT = (__ctype_glTexStorage1DEXT) eglGetProcAddr("glTexStorage1DEXT");
    }
    if (__glintercept_fnptr_glTexStorage1DEXT == NULL) return NULL;
    return (void*) __glintercept_glTexStorage1DEXT;
  }
  if (strcmp(name, "glTexStorage2D") == 0) {
    if (__glintercept_fnptr_glTexStorage2D == NULL) {
      __glintercept_fnptr_glTexStorage2D = (__ctype_glTexStorage2D) eglGetProcAddr("glTexStorage2D");
    }
    if (__glintercept_fnptr_glTexStorage2D == NULL) return NULL;
    return (void*) __glintercept_glTexStorage2D;
  }
  if (strcmp(name, "glTexStorage2DEXT") == 0) {
    if (__glintercept_fnptr_glTexStorage2DEXT == NULL) {
      __glintercept_fnptr_glTexStorage2DEXT = (__ctype_glTexStorage2DEXT) eglGetProcAddr("glTexStorage2DEXT");
    }
    if (__glintercept_fnptr_glTexStorage2DEXT == NULL) return NULL;
    return (void*) __glintercept_glTexStorage2DEXT;
  }
  if (strcmp(name, "glTexStorage2DMultisample") == 0) {
    if (__glintercept_fnptr_glTexStorage2DMultisample == NULL) {
      __glintercept_fnptr_glTexStorage2DMultisample = (__ctype_glTexStorage2DMultisample) eglGetProcAddr("glTexStorage2DMultisample");
    }
    if (__glintercept_fnptr_glTexStorage2DMultisample == NULL) return NULL;
    return (void*) __glintercept_glTexStorage2DMultisample;
  }
  if (strcmp(name, "glTexStorage3D") == 0) {
    if (__glintercept_fnptr_glTexStorage3D == NULL) {
      __glintercept_fnptr_glTexStorage3D = (__ctype_glTexStorage3D) eglGetProcAddr("glTexStorage3D");
    }
    if (__glintercept_fnptr_glTexStorage3D == NULL) return NULL;
    return (void*) __glintercept_glTexStorage3D;
  }
  if (strcmp(name, "glTexStorage3DEXT") == 0) {
    if (__glintercept_fnptr_glTexStorage3DEXT == NULL) {
      __glintercept_fnptr_glTexStorage3DEXT = (__ctype_glTexStorage3DEXT) eglGetProcAddr("glTexStorage3DEXT");
    }
    if (__glintercept_fnptr_glTexStorage3DEXT == NULL) return NULL;
    return (void*) __glintercept_glTexStorage3DEXT;
  }
  if (strcmp(name, "glTexStorage3DMultisample") == 0) {
    if (__glintercept_fnptr_glTexStorage3DMultisample == NULL) {
      __glintercept_fnptr_glTexStorage3DMultisample = (__ctype_glTexStorage3DMultisample) eglGetProcAddr("glTexStorage3DMultisample");
    }
    if (__glintercept_fnptr_glTexStorage3DMultisample == NULL) return NULL;
    return (void*) __glintercept_glTexStorage3DMultisample;
  }
  if (strcmp(name, "glTexStorage3DMultisampleOES") == 0) {
    if (__glintercept_fnptr_glTexStorage3DMultisampleOES == NULL) {
      __glintercept_fnptr_glTexStorage3DMultisampleOES = (__ctype_glTexStorage3DMultisampleOES) eglGetProcAddr("glTexStorage3DMultisampleOES");
    }
    if (__glintercept_fnptr_glTexStorage3DMultisampleOES == NULL) return NULL;
    return (void*) __glintercept_glTexStorage3DMultisampleOES;
  }
  if (strcmp(name, "TexStorageAttribs2DEXT") == 0) {
    if (__glintercept_fnptr_TexStorageAttribs2DEXT == NULL) {
      __glintercept_fnptr_TexStorageAttribs2DEXT = (__ctype_TexStorageAttribs2DEXT) eglGetProcAddr("TexStorageAttribs2DEXT");
    }
    if (__glintercept_fnptr_TexStorageAttribs2DEXT == NULL) return NULL;
    return (void*) __glintercept_TexStorageAttribs2DEXT;
  }
  if (strcmp(name, "TexStorageAttribs3DEXT") == 0) {
    if (__glintercept_fnptr_TexStorageAttribs3DEXT == NULL) {
      __glintercept_fnptr_TexStorageAttribs3DEXT = (__ctype_TexStorageAttribs3DEXT) eglGetProcAddr("TexStorageAttribs3DEXT");
    }
    if (__glintercept_fnptr_TexStorageAttribs3DEXT == NULL) return NULL;
    return (void*) __glintercept_TexStorageAttribs3DEXT;
  }
  if (strcmp(name, "glTexStorageMem1DEXT") == 0) {
    if (__glintercept_fnptr_glTexStorageMem1DEXT == NULL) {
      __glintercept_fnptr_glTexStorageMem1DEXT = (__ctype_glTexStorageMem1DEXT) eglGetProcAddr("glTexStorageMem1DEXT");
    }
    if (__glintercept_fnptr_glTexStorageMem1DEXT == NULL) return NULL;
    return (void*) __glintercept_glTexStorageMem1DEXT;
  }
  if (strcmp(name, "glTexStorageMem2DEXT") == 0) {
    if (__glintercept_fnptr_glTexStorageMem2DEXT == NULL) {
      __glintercept_fnptr_glTexStorageMem2DEXT = (__ctype_glTexStorageMem2DEXT) eglGetProcAddr("glTexStorageMem2DEXT");
    }
    if (__glintercept_fnptr_glTexStorageMem2DEXT == NULL) return NULL;
    return (void*) __glintercept_glTexStorageMem2DEXT;
  }
  if (strcmp(name, "glTexStorageMem2DMultisampleEXT") == 0) {
    if (__glintercept_fnptr_glTexStorageMem2DMultisampleEXT == NULL) {
      __glintercept_fnptr_glTexStorageMem2DMultisampleEXT = (__ctype_glTexStorageMem2DMultisampleEXT) eglGetProcAddr("glTexStorageMem2DMultisampleEXT");
    }
    if (__glintercept_fnptr_glTexStorageMem2DMultisampleEXT == NULL) return NULL;
    return (void*) __glintercept_glTexStorageMem2DMultisampleEXT;
  }
  if (strcmp(name, "glTexStorageMem3DEXT") == 0) {
    if (__glintercept_fnptr_glTexStorageMem3DEXT == NULL) {
      __glintercept_fnptr_glTexStorageMem3DEXT = (__ctype_glTexStorageMem3DEXT) eglGetProcAddr("glTexStorageMem3DEXT");
    }
    if (__glintercept_fnptr_glTexStorageMem3DEXT == NULL) return NULL;
    return (void*) __glintercept_glTexStorageMem3DEXT;
  }
  if (strcmp(name, "glTexStorageMem3DMultisampleEXT") == 0) {
    if (__glintercept_fnptr_glTexStorageMem3DMultisampleEXT == NULL) {
      __glintercept_fnptr_glTexStorageMem3DMultisampleEXT = (__ctype_glTexStorageMem3DMultisampleEXT) eglGetProcAddr("glTexStorageMem3DMultisampleEXT");
    }
    if (__glintercept_fnptr_glTexStorageMem3DMultisampleEXT == NULL) return NULL;
    return (void*) __glintercept_glTexStorageMem3DMultisampleEXT;
  }
  if (strcmp(name, "glTexStorageSparseAMD") == 0) {
    if (__glintercept_fnptr_glTexStorageSparseAMD == NULL) {
      __glintercept_fnptr_glTexStorageSparseAMD = (__ctype_glTexStorageSparseAMD) eglGetProcAddr("glTexStorageSparseAMD");
    }
    if (__glintercept_fnptr_glTexStorageSparseAMD == NULL) return NULL;
    return (void*) __glintercept_glTexStorageSparseAMD;
  }
  if (strcmp(name, "glTexSubImage1D") == 0) {
    if (__glintercept_fnptr_glTexSubImage1D == NULL) {
      __glintercept_fnptr_glTexSubImage1D = (__ctype_glTexSubImage1D) eglGetProcAddr("glTexSubImage1D");
    }
    if (__glintercept_fnptr_glTexSubImage1D == NULL) return NULL;
    return (void*) __glintercept_glTexSubImage1D;
  }
  if (strcmp(name, "glTexSubImage1DEXT") == 0) {
    if (__glintercept_fnptr_glTexSubImage1DEXT == NULL) {
      __glintercept_fnptr_glTexSubImage1DEXT = (__ctype_glTexSubImage1DEXT) eglGetProcAddr("glTexSubImage1DEXT");
    }
    if (__glintercept_fnptr_glTexSubImage1DEXT == NULL) return NULL;
    return (void*) __glintercept_glTexSubImage1DEXT;
  }
  if (strcmp(name, "glTexSubImage2D") == 0) {
    if (__glintercept_fnptr_glTexSubImage2D == NULL) {
      __glintercept_fnptr_glTexSubImage2D = (__ctype_glTexSubImage2D) eglGetProcAddr("glTexSubImage2D");
    }
    if (__glintercept_fnptr_glTexSubImage2D == NULL) return NULL;
    return (void*) __glintercept_glTexSubImage2D;
  }
  if (strcmp(name, "glTexSubImage2DEXT") == 0) {
    if (__glintercept_fnptr_glTexSubImage2DEXT == NULL) {
      __glintercept_fnptr_glTexSubImage2DEXT = (__ctype_glTexSubImage2DEXT) eglGetProcAddr("glTexSubImage2DEXT");
    }
    if (__glintercept_fnptr_glTexSubImage2DEXT == NULL) return NULL;
    return (void*) __glintercept_glTexSubImage2DEXT;
  }
  if (strcmp(name, "glTexSubImage3D") == 0) {
    if (__glintercept_fnptr_glTexSubImage3D == NULL) {
      __glintercept_fnptr_glTexSubImage3D = (__ctype_glTexSubImage3D) eglGetProcAddr("glTexSubImage3D");
    }
    if (__glintercept_fnptr_glTexSubImage3D == NULL) return NULL;
    return (void*) __glintercept_glTexSubImage3D;
  }
  if (strcmp(name, "glTexSubImage3DEXT") == 0) {
    if (__glintercept_fnptr_glTexSubImage3DEXT == NULL) {
      __glintercept_fnptr_glTexSubImage3DEXT = (__ctype_glTexSubImage3DEXT) eglGetProcAddr("glTexSubImage3DEXT");
    }
    if (__glintercept_fnptr_glTexSubImage3DEXT == NULL) return NULL;
    return (void*) __glintercept_glTexSubImage3DEXT;
  }
  if (strcmp(name, "glTexSubImage3DOES") == 0) {
    if (__glintercept_fnptr_glTexSubImage3DOES == NULL) {
      __glintercept_fnptr_glTexSubImage3DOES = (__ctype_glTexSubImage3DOES) eglGetProcAddr("glTexSubImage3DOES");
    }
    if (__glintercept_fnptr_glTexSubImage3DOES == NULL) return NULL;
    return (void*) __glintercept_glTexSubImage3DOES;
  }
  if (strcmp(name, "glTexSubImage4DSGIS") == 0) {
    if (__glintercept_fnptr_glTexSubImage4DSGIS == NULL) {
      __glintercept_fnptr_glTexSubImage4DSGIS = (__ctype_glTexSubImage4DSGIS) eglGetProcAddr("glTexSubImage4DSGIS");
    }
    if (__glintercept_fnptr_glTexSubImage4DSGIS == NULL) return NULL;
    return (void*) __glintercept_glTexSubImage4DSGIS;
  }
  if (strcmp(name, "glTextureAttachMemoryNV") == 0) {
    if (__glintercept_fnptr_glTextureAttachMemoryNV == NULL) {
      __glintercept_fnptr_glTextureAttachMemoryNV = (__ctype_glTextureAttachMemoryNV) eglGetProcAddr("glTextureAttachMemoryNV");
    }
    if (__glintercept_fnptr_glTextureAttachMemoryNV == NULL) return NULL;
    return (void*) __glintercept_glTextureAttachMemoryNV;
  }
  if (strcmp(name, "glTextureBarrier") == 0) {
    if (__glintercept_fnptr_glTextureBarrier == NULL) {
      __glintercept_fnptr_glTextureBarrier = (__ctype_glTextureBarrier) eglGetProcAddr("glTextureBarrier");
    }
    if (__glintercept_fnptr_glTextureBarrier == NULL) return NULL;
    return (void*) __glintercept_glTextureBarrier;
  }
  if (strcmp(name, "glTextureBarrierNV") == 0) {
    if (__glintercept_fnptr_glTextureBarrierNV == NULL) {
      __glintercept_fnptr_glTextureBarrierNV = (__ctype_glTextureBarrierNV) eglGetProcAddr("glTextureBarrierNV");
    }
    if (__glintercept_fnptr_glTextureBarrierNV == NULL) return NULL;
    return (void*) __glintercept_glTextureBarrierNV;
  }
  if (strcmp(name, "glTextureBuffer") == 0) {
    if (__glintercept_fnptr_glTextureBuffer == NULL) {
      __glintercept_fnptr_glTextureBuffer = (__ctype_glTextureBuffer) eglGetProcAddr("glTextureBuffer");
    }
    if (__glintercept_fnptr_glTextureBuffer == NULL) return NULL;
    return (void*) __glintercept_glTextureBuffer;
  }
  if (strcmp(name, "glTextureBufferEXT") == 0) {
    if (__glintercept_fnptr_glTextureBufferEXT == NULL) {
      __glintercept_fnptr_glTextureBufferEXT = (__ctype_glTextureBufferEXT) eglGetProcAddr("glTextureBufferEXT");
    }
    if (__glintercept_fnptr_glTextureBufferEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureBufferEXT;
  }
  if (strcmp(name, "glTextureBufferRange") == 0) {
    if (__glintercept_fnptr_glTextureBufferRange == NULL) {
      __glintercept_fnptr_glTextureBufferRange = (__ctype_glTextureBufferRange) eglGetProcAddr("glTextureBufferRange");
    }
    if (__glintercept_fnptr_glTextureBufferRange == NULL) return NULL;
    return (void*) __glintercept_glTextureBufferRange;
  }
  if (strcmp(name, "glTextureBufferRangeEXT") == 0) {
    if (__glintercept_fnptr_glTextureBufferRangeEXT == NULL) {
      __glintercept_fnptr_glTextureBufferRangeEXT = (__ctype_glTextureBufferRangeEXT) eglGetProcAddr("glTextureBufferRangeEXT");
    }
    if (__glintercept_fnptr_glTextureBufferRangeEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureBufferRangeEXT;
  }
  if (strcmp(name, "glTextureColorMaskSGIS") == 0) {
    if (__glintercept_fnptr_glTextureColorMaskSGIS == NULL) {
      __glintercept_fnptr_glTextureColorMaskSGIS = (__ctype_glTextureColorMaskSGIS) eglGetProcAddr("glTextureColorMaskSGIS");
    }
    if (__glintercept_fnptr_glTextureColorMaskSGIS == NULL) return NULL;
    return (void*) __glintercept_glTextureColorMaskSGIS;
  }
  if (strcmp(name, "glTextureFoveationParametersQCOM") == 0) {
    if (__glintercept_fnptr_glTextureFoveationParametersQCOM == NULL) {
      __glintercept_fnptr_glTextureFoveationParametersQCOM = (__ctype_glTextureFoveationParametersQCOM) eglGetProcAddr("glTextureFoveationParametersQCOM");
    }
    if (__glintercept_fnptr_glTextureFoveationParametersQCOM == NULL) return NULL;
    return (void*) __glintercept_glTextureFoveationParametersQCOM;
  }
  if (strcmp(name, "glTextureImage1DEXT") == 0) {
    if (__glintercept_fnptr_glTextureImage1DEXT == NULL) {
      __glintercept_fnptr_glTextureImage1DEXT = (__ctype_glTextureImage1DEXT) eglGetProcAddr("glTextureImage1DEXT");
    }
    if (__glintercept_fnptr_glTextureImage1DEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureImage1DEXT;
  }
  if (strcmp(name, "glTextureImage2DEXT") == 0) {
    if (__glintercept_fnptr_glTextureImage2DEXT == NULL) {
      __glintercept_fnptr_glTextureImage2DEXT = (__ctype_glTextureImage2DEXT) eglGetProcAddr("glTextureImage2DEXT");
    }
    if (__glintercept_fnptr_glTextureImage2DEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureImage2DEXT;
  }
  if (strcmp(name, "glTextureImage2DMultisampleCoverageNV") == 0) {
    if (__glintercept_fnptr_glTextureImage2DMultisampleCoverageNV == NULL) {
      __glintercept_fnptr_glTextureImage2DMultisampleCoverageNV = (__ctype_glTextureImage2DMultisampleCoverageNV) eglGetProcAddr("glTextureImage2DMultisampleCoverageNV");
    }
    if (__glintercept_fnptr_glTextureImage2DMultisampleCoverageNV == NULL) return NULL;
    return (void*) __glintercept_glTextureImage2DMultisampleCoverageNV;
  }
  if (strcmp(name, "glTextureImage2DMultisampleNV") == 0) {
    if (__glintercept_fnptr_glTextureImage2DMultisampleNV == NULL) {
      __glintercept_fnptr_glTextureImage2DMultisampleNV = (__ctype_glTextureImage2DMultisampleNV) eglGetProcAddr("glTextureImage2DMultisampleNV");
    }
    if (__glintercept_fnptr_glTextureImage2DMultisampleNV == NULL) return NULL;
    return (void*) __glintercept_glTextureImage2DMultisampleNV;
  }
  if (strcmp(name, "glTextureImage3DEXT") == 0) {
    if (__glintercept_fnptr_glTextureImage3DEXT == NULL) {
      __glintercept_fnptr_glTextureImage3DEXT = (__ctype_glTextureImage3DEXT) eglGetProcAddr("glTextureImage3DEXT");
    }
    if (__glintercept_fnptr_glTextureImage3DEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureImage3DEXT;
  }
  if (strcmp(name, "glTextureImage3DMultisampleCoverageNV") == 0) {
    if (__glintercept_fnptr_glTextureImage3DMultisampleCoverageNV == NULL) {
      __glintercept_fnptr_glTextureImage3DMultisampleCoverageNV = (__ctype_glTextureImage3DMultisampleCoverageNV) eglGetProcAddr("glTextureImage3DMultisampleCoverageNV");
    }
    if (__glintercept_fnptr_glTextureImage3DMultisampleCoverageNV == NULL) return NULL;
    return (void*) __glintercept_glTextureImage3DMultisampleCoverageNV;
  }
  if (strcmp(name, "glTextureImage3DMultisampleNV") == 0) {
    if (__glintercept_fnptr_glTextureImage3DMultisampleNV == NULL) {
      __glintercept_fnptr_glTextureImage3DMultisampleNV = (__ctype_glTextureImage3DMultisampleNV) eglGetProcAddr("glTextureImage3DMultisampleNV");
    }
    if (__glintercept_fnptr_glTextureImage3DMultisampleNV == NULL) return NULL;
    return (void*) __glintercept_glTextureImage3DMultisampleNV;
  }
  if (strcmp(name, "glTextureLightEXT") == 0) {
    if (__glintercept_fnptr_glTextureLightEXT == NULL) {
      __glintercept_fnptr_glTextureLightEXT = (__ctype_glTextureLightEXT) eglGetProcAddr("glTextureLightEXT");
    }
    if (__glintercept_fnptr_glTextureLightEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureLightEXT;
  }
  if (strcmp(name, "glTextureMaterialEXT") == 0) {
    if (__glintercept_fnptr_glTextureMaterialEXT == NULL) {
      __glintercept_fnptr_glTextureMaterialEXT = (__ctype_glTextureMaterialEXT) eglGetProcAddr("glTextureMaterialEXT");
    }
    if (__glintercept_fnptr_glTextureMaterialEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureMaterialEXT;
  }
  if (strcmp(name, "glTextureNormalEXT") == 0) {
    if (__glintercept_fnptr_glTextureNormalEXT == NULL) {
      __glintercept_fnptr_glTextureNormalEXT = (__ctype_glTextureNormalEXT) eglGetProcAddr("glTextureNormalEXT");
    }
    if (__glintercept_fnptr_glTextureNormalEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureNormalEXT;
  }
  if (strcmp(name, "glTexturePageCommitmentEXT") == 0) {
    if (__glintercept_fnptr_glTexturePageCommitmentEXT == NULL) {
      __glintercept_fnptr_glTexturePageCommitmentEXT = (__ctype_glTexturePageCommitmentEXT) eglGetProcAddr("glTexturePageCommitmentEXT");
    }
    if (__glintercept_fnptr_glTexturePageCommitmentEXT == NULL) return NULL;
    return (void*) __glintercept_glTexturePageCommitmentEXT;
  }
  if (strcmp(name, "glTexturePageCommitmentMemNV") == 0) {
    if (__glintercept_fnptr_glTexturePageCommitmentMemNV == NULL) {
      __glintercept_fnptr_glTexturePageCommitmentMemNV = (__ctype_glTexturePageCommitmentMemNV) eglGetProcAddr("glTexturePageCommitmentMemNV");
    }
    if (__glintercept_fnptr_glTexturePageCommitmentMemNV == NULL) return NULL;
    return (void*) __glintercept_glTexturePageCommitmentMemNV;
  }
  if (strcmp(name, "glTextureParameterIiv") == 0) {
    if (__glintercept_fnptr_glTextureParameterIiv == NULL) {
      __glintercept_fnptr_glTextureParameterIiv = (__ctype_glTextureParameterIiv) eglGetProcAddr("glTextureParameterIiv");
    }
    if (__glintercept_fnptr_glTextureParameterIiv == NULL) return NULL;
    return (void*) __glintercept_glTextureParameterIiv;
  }
  if (strcmp(name, "glTextureParameterIivEXT") == 0) {
    if (__glintercept_fnptr_glTextureParameterIivEXT == NULL) {
      __glintercept_fnptr_glTextureParameterIivEXT = (__ctype_glTextureParameterIivEXT) eglGetProcAddr("glTextureParameterIivEXT");
    }
    if (__glintercept_fnptr_glTextureParameterIivEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureParameterIivEXT;
  }
  if (strcmp(name, "glTextureParameterIuiv") == 0) {
    if (__glintercept_fnptr_glTextureParameterIuiv == NULL) {
      __glintercept_fnptr_glTextureParameterIuiv = (__ctype_glTextureParameterIuiv) eglGetProcAddr("glTextureParameterIuiv");
    }
    if (__glintercept_fnptr_glTextureParameterIuiv == NULL) return NULL;
    return (void*) __glintercept_glTextureParameterIuiv;
  }
  if (strcmp(name, "glTextureParameterIuivEXT") == 0) {
    if (__glintercept_fnptr_glTextureParameterIuivEXT == NULL) {
      __glintercept_fnptr_glTextureParameterIuivEXT = (__ctype_glTextureParameterIuivEXT) eglGetProcAddr("glTextureParameterIuivEXT");
    }
    if (__glintercept_fnptr_glTextureParameterIuivEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureParameterIuivEXT;
  }
  if (strcmp(name, "glTextureParameterf") == 0) {
    if (__glintercept_fnptr_glTextureParameterf == NULL) {
      __glintercept_fnptr_glTextureParameterf = (__ctype_glTextureParameterf) eglGetProcAddr("glTextureParameterf");
    }
    if (__glintercept_fnptr_glTextureParameterf == NULL) return NULL;
    return (void*) __glintercept_glTextureParameterf;
  }
  if (strcmp(name, "glTextureParameterfEXT") == 0) {
    if (__glintercept_fnptr_glTextureParameterfEXT == NULL) {
      __glintercept_fnptr_glTextureParameterfEXT = (__ctype_glTextureParameterfEXT) eglGetProcAddr("glTextureParameterfEXT");
    }
    if (__glintercept_fnptr_glTextureParameterfEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureParameterfEXT;
  }
  if (strcmp(name, "glTextureParameterfv") == 0) {
    if (__glintercept_fnptr_glTextureParameterfv == NULL) {
      __glintercept_fnptr_glTextureParameterfv = (__ctype_glTextureParameterfv) eglGetProcAddr("glTextureParameterfv");
    }
    if (__glintercept_fnptr_glTextureParameterfv == NULL) return NULL;
    return (void*) __glintercept_glTextureParameterfv;
  }
  if (strcmp(name, "glTextureParameterfvEXT") == 0) {
    if (__glintercept_fnptr_glTextureParameterfvEXT == NULL) {
      __glintercept_fnptr_glTextureParameterfvEXT = (__ctype_glTextureParameterfvEXT) eglGetProcAddr("glTextureParameterfvEXT");
    }
    if (__glintercept_fnptr_glTextureParameterfvEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureParameterfvEXT;
  }
  if (strcmp(name, "glTextureParameteri") == 0) {
    if (__glintercept_fnptr_glTextureParameteri == NULL) {
      __glintercept_fnptr_glTextureParameteri = (__ctype_glTextureParameteri) eglGetProcAddr("glTextureParameteri");
    }
    if (__glintercept_fnptr_glTextureParameteri == NULL) return NULL;
    return (void*) __glintercept_glTextureParameteri;
  }
  if (strcmp(name, "glTextureParameteriEXT") == 0) {
    if (__glintercept_fnptr_glTextureParameteriEXT == NULL) {
      __glintercept_fnptr_glTextureParameteriEXT = (__ctype_glTextureParameteriEXT) eglGetProcAddr("glTextureParameteriEXT");
    }
    if (__glintercept_fnptr_glTextureParameteriEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureParameteriEXT;
  }
  if (strcmp(name, "glTextureParameteriv") == 0) {
    if (__glintercept_fnptr_glTextureParameteriv == NULL) {
      __glintercept_fnptr_glTextureParameteriv = (__ctype_glTextureParameteriv) eglGetProcAddr("glTextureParameteriv");
    }
    if (__glintercept_fnptr_glTextureParameteriv == NULL) return NULL;
    return (void*) __glintercept_glTextureParameteriv;
  }
  if (strcmp(name, "glTextureParameterivEXT") == 0) {
    if (__glintercept_fnptr_glTextureParameterivEXT == NULL) {
      __glintercept_fnptr_glTextureParameterivEXT = (__ctype_glTextureParameterivEXT) eglGetProcAddr("glTextureParameterivEXT");
    }
    if (__glintercept_fnptr_glTextureParameterivEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureParameterivEXT;
  }
  if (strcmp(name, "glTextureRangeAPPLE") == 0) {
    if (__glintercept_fnptr_glTextureRangeAPPLE == NULL) {
      __glintercept_fnptr_glTextureRangeAPPLE = (__ctype_glTextureRangeAPPLE) eglGetProcAddr("glTextureRangeAPPLE");
    }
    if (__glintercept_fnptr_glTextureRangeAPPLE == NULL) return NULL;
    return (void*) __glintercept_glTextureRangeAPPLE;
  }
  if (strcmp(name, "glTextureRenderbufferEXT") == 0) {
    if (__glintercept_fnptr_glTextureRenderbufferEXT == NULL) {
      __glintercept_fnptr_glTextureRenderbufferEXT = (__ctype_glTextureRenderbufferEXT) eglGetProcAddr("glTextureRenderbufferEXT");
    }
    if (__glintercept_fnptr_glTextureRenderbufferEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureRenderbufferEXT;
  }
  if (strcmp(name, "glTextureStorage1D") == 0) {
    if (__glintercept_fnptr_glTextureStorage1D == NULL) {
      __glintercept_fnptr_glTextureStorage1D = (__ctype_glTextureStorage1D) eglGetProcAddr("glTextureStorage1D");
    }
    if (__glintercept_fnptr_glTextureStorage1D == NULL) return NULL;
    return (void*) __glintercept_glTextureStorage1D;
  }
  if (strcmp(name, "glTextureStorage1DEXT") == 0) {
    if (__glintercept_fnptr_glTextureStorage1DEXT == NULL) {
      __glintercept_fnptr_glTextureStorage1DEXT = (__ctype_glTextureStorage1DEXT) eglGetProcAddr("glTextureStorage1DEXT");
    }
    if (__glintercept_fnptr_glTextureStorage1DEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureStorage1DEXT;
  }
  if (strcmp(name, "glTextureStorage2D") == 0) {
    if (__glintercept_fnptr_glTextureStorage2D == NULL) {
      __glintercept_fnptr_glTextureStorage2D = (__ctype_glTextureStorage2D) eglGetProcAddr("glTextureStorage2D");
    }
    if (__glintercept_fnptr_glTextureStorage2D == NULL) return NULL;
    return (void*) __glintercept_glTextureStorage2D;
  }
  if (strcmp(name, "glTextureStorage2DEXT") == 0) {
    if (__glintercept_fnptr_glTextureStorage2DEXT == NULL) {
      __glintercept_fnptr_glTextureStorage2DEXT = (__ctype_glTextureStorage2DEXT) eglGetProcAddr("glTextureStorage2DEXT");
    }
    if (__glintercept_fnptr_glTextureStorage2DEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureStorage2DEXT;
  }
  if (strcmp(name, "glTextureStorage2DMultisample") == 0) {
    if (__glintercept_fnptr_glTextureStorage2DMultisample == NULL) {
      __glintercept_fnptr_glTextureStorage2DMultisample = (__ctype_glTextureStorage2DMultisample) eglGetProcAddr("glTextureStorage2DMultisample");
    }
    if (__glintercept_fnptr_glTextureStorage2DMultisample == NULL) return NULL;
    return (void*) __glintercept_glTextureStorage2DMultisample;
  }
  if (strcmp(name, "glTextureStorage2DMultisampleEXT") == 0) {
    if (__glintercept_fnptr_glTextureStorage2DMultisampleEXT == NULL) {
      __glintercept_fnptr_glTextureStorage2DMultisampleEXT = (__ctype_glTextureStorage2DMultisampleEXT) eglGetProcAddr("glTextureStorage2DMultisampleEXT");
    }
    if (__glintercept_fnptr_glTextureStorage2DMultisampleEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureStorage2DMultisampleEXT;
  }
  if (strcmp(name, "glTextureStorage3D") == 0) {
    if (__glintercept_fnptr_glTextureStorage3D == NULL) {
      __glintercept_fnptr_glTextureStorage3D = (__ctype_glTextureStorage3D) eglGetProcAddr("glTextureStorage3D");
    }
    if (__glintercept_fnptr_glTextureStorage3D == NULL) return NULL;
    return (void*) __glintercept_glTextureStorage3D;
  }
  if (strcmp(name, "glTextureStorage3DEXT") == 0) {
    if (__glintercept_fnptr_glTextureStorage3DEXT == NULL) {
      __glintercept_fnptr_glTextureStorage3DEXT = (__ctype_glTextureStorage3DEXT) eglGetProcAddr("glTextureStorage3DEXT");
    }
    if (__glintercept_fnptr_glTextureStorage3DEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureStorage3DEXT;
  }
  if (strcmp(name, "glTextureStorage3DMultisample") == 0) {
    if (__glintercept_fnptr_glTextureStorage3DMultisample == NULL) {
      __glintercept_fnptr_glTextureStorage3DMultisample = (__ctype_glTextureStorage3DMultisample) eglGetProcAddr("glTextureStorage3DMultisample");
    }
    if (__glintercept_fnptr_glTextureStorage3DMultisample == NULL) return NULL;
    return (void*) __glintercept_glTextureStorage3DMultisample;
  }
  if (strcmp(name, "glTextureStorage3DMultisampleEXT") == 0) {
    if (__glintercept_fnptr_glTextureStorage3DMultisampleEXT == NULL) {
      __glintercept_fnptr_glTextureStorage3DMultisampleEXT = (__ctype_glTextureStorage3DMultisampleEXT) eglGetProcAddr("glTextureStorage3DMultisampleEXT");
    }
    if (__glintercept_fnptr_glTextureStorage3DMultisampleEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureStorage3DMultisampleEXT;
  }
  if (strcmp(name, "glTextureStorageMem1DEXT") == 0) {
    if (__glintercept_fnptr_glTextureStorageMem1DEXT == NULL) {
      __glintercept_fnptr_glTextureStorageMem1DEXT = (__ctype_glTextureStorageMem1DEXT) eglGetProcAddr("glTextureStorageMem1DEXT");
    }
    if (__glintercept_fnptr_glTextureStorageMem1DEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureStorageMem1DEXT;
  }
  if (strcmp(name, "glTextureStorageMem2DEXT") == 0) {
    if (__glintercept_fnptr_glTextureStorageMem2DEXT == NULL) {
      __glintercept_fnptr_glTextureStorageMem2DEXT = (__ctype_glTextureStorageMem2DEXT) eglGetProcAddr("glTextureStorageMem2DEXT");
    }
    if (__glintercept_fnptr_glTextureStorageMem2DEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureStorageMem2DEXT;
  }
  if (strcmp(name, "glTextureStorageMem2DMultisampleEXT") == 0) {
    if (__glintercept_fnptr_glTextureStorageMem2DMultisampleEXT == NULL) {
      __glintercept_fnptr_glTextureStorageMem2DMultisampleEXT = (__ctype_glTextureStorageMem2DMultisampleEXT) eglGetProcAddr("glTextureStorageMem2DMultisampleEXT");
    }
    if (__glintercept_fnptr_glTextureStorageMem2DMultisampleEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureStorageMem2DMultisampleEXT;
  }
  if (strcmp(name, "glTextureStorageMem3DEXT") == 0) {
    if (__glintercept_fnptr_glTextureStorageMem3DEXT == NULL) {
      __glintercept_fnptr_glTextureStorageMem3DEXT = (__ctype_glTextureStorageMem3DEXT) eglGetProcAddr("glTextureStorageMem3DEXT");
    }
    if (__glintercept_fnptr_glTextureStorageMem3DEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureStorageMem3DEXT;
  }
  if (strcmp(name, "glTextureStorageMem3DMultisampleEXT") == 0) {
    if (__glintercept_fnptr_glTextureStorageMem3DMultisampleEXT == NULL) {
      __glintercept_fnptr_glTextureStorageMem3DMultisampleEXT = (__ctype_glTextureStorageMem3DMultisampleEXT) eglGetProcAddr("glTextureStorageMem3DMultisampleEXT");
    }
    if (__glintercept_fnptr_glTextureStorageMem3DMultisampleEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureStorageMem3DMultisampleEXT;
  }
  if (strcmp(name, "glTextureStorageSparseAMD") == 0) {
    if (__glintercept_fnptr_glTextureStorageSparseAMD == NULL) {
      __glintercept_fnptr_glTextureStorageSparseAMD = (__ctype_glTextureStorageSparseAMD) eglGetProcAddr("glTextureStorageSparseAMD");
    }
    if (__glintercept_fnptr_glTextureStorageSparseAMD == NULL) return NULL;
    return (void*) __glintercept_glTextureStorageSparseAMD;
  }
  if (strcmp(name, "glTextureSubImage1D") == 0) {
    if (__glintercept_fnptr_glTextureSubImage1D == NULL) {
      __glintercept_fnptr_glTextureSubImage1D = (__ctype_glTextureSubImage1D) eglGetProcAddr("glTextureSubImage1D");
    }
    if (__glintercept_fnptr_glTextureSubImage1D == NULL) return NULL;
    return (void*) __glintercept_glTextureSubImage1D;
  }
  if (strcmp(name, "glTextureSubImage1DEXT") == 0) {
    if (__glintercept_fnptr_glTextureSubImage1DEXT == NULL) {
      __glintercept_fnptr_glTextureSubImage1DEXT = (__ctype_glTextureSubImage1DEXT) eglGetProcAddr("glTextureSubImage1DEXT");
    }
    if (__glintercept_fnptr_glTextureSubImage1DEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureSubImage1DEXT;
  }
  if (strcmp(name, "glTextureSubImage2D") == 0) {
    if (__glintercept_fnptr_glTextureSubImage2D == NULL) {
      __glintercept_fnptr_glTextureSubImage2D = (__ctype_glTextureSubImage2D) eglGetProcAddr("glTextureSubImage2D");
    }
    if (__glintercept_fnptr_glTextureSubImage2D == NULL) return NULL;
    return (void*) __glintercept_glTextureSubImage2D;
  }
  if (strcmp(name, "glTextureSubImage2DEXT") == 0) {
    if (__glintercept_fnptr_glTextureSubImage2DEXT == NULL) {
      __glintercept_fnptr_glTextureSubImage2DEXT = (__ctype_glTextureSubImage2DEXT) eglGetProcAddr("glTextureSubImage2DEXT");
    }
    if (__glintercept_fnptr_glTextureSubImage2DEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureSubImage2DEXT;
  }
  if (strcmp(name, "glTextureSubImage3D") == 0) {
    if (__glintercept_fnptr_glTextureSubImage3D == NULL) {
      __glintercept_fnptr_glTextureSubImage3D = (__ctype_glTextureSubImage3D) eglGetProcAddr("glTextureSubImage3D");
    }
    if (__glintercept_fnptr_glTextureSubImage3D == NULL) return NULL;
    return (void*) __glintercept_glTextureSubImage3D;
  }
  if (strcmp(name, "glTextureSubImage3DEXT") == 0) {
    if (__glintercept_fnptr_glTextureSubImage3DEXT == NULL) {
      __glintercept_fnptr_glTextureSubImage3DEXT = (__ctype_glTextureSubImage3DEXT) eglGetProcAddr("glTextureSubImage3DEXT");
    }
    if (__glintercept_fnptr_glTextureSubImage3DEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureSubImage3DEXT;
  }
  if (strcmp(name, "glTextureView") == 0) {
    if (__glintercept_fnptr_glTextureView == NULL) {
      __glintercept_fnptr_glTextureView = (__ctype_glTextureView) eglGetProcAddr("glTextureView");
    }
    if (__glintercept_fnptr_glTextureView == NULL) return NULL;
    return (void*) __glintercept_glTextureView;
  }
  if (strcmp(name, "glTextureViewEXT") == 0) {
    if (__glintercept_fnptr_glTextureViewEXT == NULL) {
      __glintercept_fnptr_glTextureViewEXT = (__ctype_glTextureViewEXT) eglGetProcAddr("glTextureViewEXT");
    }
    if (__glintercept_fnptr_glTextureViewEXT == NULL) return NULL;
    return (void*) __glintercept_glTextureViewEXT;
  }
  if (strcmp(name, "glTextureViewOES") == 0) {
    if (__glintercept_fnptr_glTextureViewOES == NULL) {
      __glintercept_fnptr_glTextureViewOES = (__ctype_glTextureViewOES) eglGetProcAddr("glTextureViewOES");
    }
    if (__glintercept_fnptr_glTextureViewOES == NULL) return NULL;
    return (void*) __glintercept_glTextureViewOES;
  }
  if (strcmp(name, "glTrackMatrixNV") == 0) {
    if (__glintercept_fnptr_glTrackMatrixNV == NULL) {
      __glintercept_fnptr_glTrackMatrixNV = (__ctype_glTrackMatrixNV) eglGetProcAddr("glTrackMatrixNV");
    }
    if (__glintercept_fnptr_glTrackMatrixNV == NULL) return NULL;
    return (void*) __glintercept_glTrackMatrixNV;
  }
  if (strcmp(name, "glTransformFeedbackAttribsNV") == 0) {
    if (__glintercept_fnptr_glTransformFeedbackAttribsNV == NULL) {
      __glintercept_fnptr_glTransformFeedbackAttribsNV = (__ctype_glTransformFeedbackAttribsNV) eglGetProcAddr("glTransformFeedbackAttribsNV");
    }
    if (__glintercept_fnptr_glTransformFeedbackAttribsNV == NULL) return NULL;
    return (void*) __glintercept_glTransformFeedbackAttribsNV;
  }
  if (strcmp(name, "glTransformFeedbackBufferBase") == 0) {
    if (__glintercept_fnptr_glTransformFeedbackBufferBase == NULL) {
      __glintercept_fnptr_glTransformFeedbackBufferBase = (__ctype_glTransformFeedbackBufferBase) eglGetProcAddr("glTransformFeedbackBufferBase");
    }
    if (__glintercept_fnptr_glTransformFeedbackBufferBase == NULL) return NULL;
    return (void*) __glintercept_glTransformFeedbackBufferBase;
  }
  if (strcmp(name, "glTransformFeedbackBufferRange") == 0) {
    if (__glintercept_fnptr_glTransformFeedbackBufferRange == NULL) {
      __glintercept_fnptr_glTransformFeedbackBufferRange = (__ctype_glTransformFeedbackBufferRange) eglGetProcAddr("glTransformFeedbackBufferRange");
    }
    if (__glintercept_fnptr_glTransformFeedbackBufferRange == NULL) return NULL;
    return (void*) __glintercept_glTransformFeedbackBufferRange;
  }
  if (strcmp(name, "glTransformFeedbackStreamAttribsNV") == 0) {
    if (__glintercept_fnptr_glTransformFeedbackStreamAttribsNV == NULL) {
      __glintercept_fnptr_glTransformFeedbackStreamAttribsNV = (__ctype_glTransformFeedbackStreamAttribsNV) eglGetProcAddr("glTransformFeedbackStreamAttribsNV");
    }
    if (__glintercept_fnptr_glTransformFeedbackStreamAttribsNV == NULL) return NULL;
    return (void*) __glintercept_glTransformFeedbackStreamAttribsNV;
  }
  if (strcmp(name, "glTransformFeedbackVaryings") == 0) {
    if (__glintercept_fnptr_glTransformFeedbackVaryings == NULL) {
      __glintercept_fnptr_glTransformFeedbackVaryings = (__ctype_glTransformFeedbackVaryings) eglGetProcAddr("glTransformFeedbackVaryings");
    }
    if (__glintercept_fnptr_glTransformFeedbackVaryings == NULL) return NULL;
    return (void*) __glintercept_glTransformFeedbackVaryings;
  }
  if (strcmp(name, "glTransformFeedbackVaryingsEXT") == 0) {
    if (__glintercept_fnptr_glTransformFeedbackVaryingsEXT == NULL) {
      __glintercept_fnptr_glTransformFeedbackVaryingsEXT = (__ctype_glTransformFeedbackVaryingsEXT) eglGetProcAddr("glTransformFeedbackVaryingsEXT");
    }
    if (__glintercept_fnptr_glTransformFeedbackVaryingsEXT == NULL) return NULL;
    return (void*) __glintercept_glTransformFeedbackVaryingsEXT;
  }
  if (strcmp(name, "glTransformFeedbackVaryingsNV") == 0) {
    if (__glintercept_fnptr_glTransformFeedbackVaryingsNV == NULL) {
      __glintercept_fnptr_glTransformFeedbackVaryingsNV = (__ctype_glTransformFeedbackVaryingsNV) eglGetProcAddr("glTransformFeedbackVaryingsNV");
    }
    if (__glintercept_fnptr_glTransformFeedbackVaryingsNV == NULL) return NULL;
    return (void*) __glintercept_glTransformFeedbackVaryingsNV;
  }
  if (strcmp(name, "glTransformPathNV") == 0) {
    if (__glintercept_fnptr_glTransformPathNV == NULL) {
      __glintercept_fnptr_glTransformPathNV = (__ctype_glTransformPathNV) eglGetProcAddr("glTransformPathNV");
    }
    if (__glintercept_fnptr_glTransformPathNV == NULL) return NULL;
    return (void*) __glintercept_glTransformPathNV;
  }
  if (strcmp(name, "glTranslated") == 0) {
    if (__glintercept_fnptr_glTranslated == NULL) {
      __glintercept_fnptr_glTranslated = (__ctype_glTranslated) eglGetProcAddr("glTranslated");
    }
    if (__glintercept_fnptr_glTranslated == NULL) return NULL;
    return (void*) __glintercept_glTranslated;
  }
  if (strcmp(name, "glTranslatef") == 0) {
    if (__glintercept_fnptr_glTranslatef == NULL) {
      __glintercept_fnptr_glTranslatef = (__ctype_glTranslatef) eglGetProcAddr("glTranslatef");
    }
    if (__glintercept_fnptr_glTranslatef == NULL) return NULL;
    return (void*) __glintercept_glTranslatef;
  }
  if (strcmp(name, "glTranslatex") == 0) {
    if (__glintercept_fnptr_glTranslatex == NULL) {
      __glintercept_fnptr_glTranslatex = (__ctype_glTranslatex) eglGetProcAddr("glTranslatex");
    }
    if (__glintercept_fnptr_glTranslatex == NULL) return NULL;
    return (void*) __glintercept_glTranslatex;
  }
  if (strcmp(name, "glTranslatexOES") == 0) {
    if (__glintercept_fnptr_glTranslatexOES == NULL) {
      __glintercept_fnptr_glTranslatexOES = (__ctype_glTranslatexOES) eglGetProcAddr("glTranslatexOES");
    }
    if (__glintercept_fnptr_glTranslatexOES == NULL) return NULL;
    return (void*) __glintercept_glTranslatexOES;
  }
  if (strcmp(name, "glUniform1d") == 0) {
    if (__glintercept_fnptr_glUniform1d == NULL) {
      __glintercept_fnptr_glUniform1d = (__ctype_glUniform1d) eglGetProcAddr("glUniform1d");
    }
    if (__glintercept_fnptr_glUniform1d == NULL) return NULL;
    return (void*) __glintercept_glUniform1d;
  }
  if (strcmp(name, "glUniform1dv") == 0) {
    if (__glintercept_fnptr_glUniform1dv == NULL) {
      __glintercept_fnptr_glUniform1dv = (__ctype_glUniform1dv) eglGetProcAddr("glUniform1dv");
    }
    if (__glintercept_fnptr_glUniform1dv == NULL) return NULL;
    return (void*) __glintercept_glUniform1dv;
  }
  if (strcmp(name, "glUniform1f") == 0) {
    if (__glintercept_fnptr_glUniform1f == NULL) {
      __glintercept_fnptr_glUniform1f = (__ctype_glUniform1f) eglGetProcAddr("glUniform1f");
    }
    if (__glintercept_fnptr_glUniform1f == NULL) return NULL;
    return (void*) __glintercept_glUniform1f;
  }
  if (strcmp(name, "glUniform1fARB") == 0) {
    if (__glintercept_fnptr_glUniform1fARB == NULL) {
      __glintercept_fnptr_glUniform1fARB = (__ctype_glUniform1fARB) eglGetProcAddr("glUniform1fARB");
    }
    if (__glintercept_fnptr_glUniform1fARB == NULL) return NULL;
    return (void*) __glintercept_glUniform1fARB;
  }
  if (strcmp(name, "glUniform1fv") == 0) {
    if (__glintercept_fnptr_glUniform1fv == NULL) {
      __glintercept_fnptr_glUniform1fv = (__ctype_glUniform1fv) eglGetProcAddr("glUniform1fv");
    }
    if (__glintercept_fnptr_glUniform1fv == NULL) return NULL;
    return (void*) __glintercept_glUniform1fv;
  }
  if (strcmp(name, "glUniform1fvARB") == 0) {
    if (__glintercept_fnptr_glUniform1fvARB == NULL) {
      __glintercept_fnptr_glUniform1fvARB = (__ctype_glUniform1fvARB) eglGetProcAddr("glUniform1fvARB");
    }
    if (__glintercept_fnptr_glUniform1fvARB == NULL) return NULL;
    return (void*) __glintercept_glUniform1fvARB;
  }
  if (strcmp(name, "glUniform1i") == 0) {
    if (__glintercept_fnptr_glUniform1i == NULL) {
      __glintercept_fnptr_glUniform1i = (__ctype_glUniform1i) eglGetProcAddr("glUniform1i");
    }
    if (__glintercept_fnptr_glUniform1i == NULL) return NULL;
    return (void*) __glintercept_glUniform1i;
  }
  if (strcmp(name, "glUniform1i64ARB") == 0) {
    if (__glintercept_fnptr_glUniform1i64ARB == NULL) {
      __glintercept_fnptr_glUniform1i64ARB = (__ctype_glUniform1i64ARB) eglGetProcAddr("glUniform1i64ARB");
    }
    if (__glintercept_fnptr_glUniform1i64ARB == NULL) return NULL;
    return (void*) __glintercept_glUniform1i64ARB;
  }
  if (strcmp(name, "glUniform1i64NV") == 0) {
    if (__glintercept_fnptr_glUniform1i64NV == NULL) {
      __glintercept_fnptr_glUniform1i64NV = (__ctype_glUniform1i64NV) eglGetProcAddr("glUniform1i64NV");
    }
    if (__glintercept_fnptr_glUniform1i64NV == NULL) return NULL;
    return (void*) __glintercept_glUniform1i64NV;
  }
  if (strcmp(name, "glUniform1i64vARB") == 0) {
    if (__glintercept_fnptr_glUniform1i64vARB == NULL) {
      __glintercept_fnptr_glUniform1i64vARB = (__ctype_glUniform1i64vARB) eglGetProcAddr("glUniform1i64vARB");
    }
    if (__glintercept_fnptr_glUniform1i64vARB == NULL) return NULL;
    return (void*) __glintercept_glUniform1i64vARB;
  }
  if (strcmp(name, "glUniform1i64vNV") == 0) {
    if (__glintercept_fnptr_glUniform1i64vNV == NULL) {
      __glintercept_fnptr_glUniform1i64vNV = (__ctype_glUniform1i64vNV) eglGetProcAddr("glUniform1i64vNV");
    }
    if (__glintercept_fnptr_glUniform1i64vNV == NULL) return NULL;
    return (void*) __glintercept_glUniform1i64vNV;
  }
  if (strcmp(name, "glUniform1iARB") == 0) {
    if (__glintercept_fnptr_glUniform1iARB == NULL) {
      __glintercept_fnptr_glUniform1iARB = (__ctype_glUniform1iARB) eglGetProcAddr("glUniform1iARB");
    }
    if (__glintercept_fnptr_glUniform1iARB == NULL) return NULL;
    return (void*) __glintercept_glUniform1iARB;
  }
  if (strcmp(name, "glUniform1iv") == 0) {
    if (__glintercept_fnptr_glUniform1iv == NULL) {
      __glintercept_fnptr_glUniform1iv = (__ctype_glUniform1iv) eglGetProcAddr("glUniform1iv");
    }
    if (__glintercept_fnptr_glUniform1iv == NULL) return NULL;
    return (void*) __glintercept_glUniform1iv;
  }
  if (strcmp(name, "glUniform1ivARB") == 0) {
    if (__glintercept_fnptr_glUniform1ivARB == NULL) {
      __glintercept_fnptr_glUniform1ivARB = (__ctype_glUniform1ivARB) eglGetProcAddr("glUniform1ivARB");
    }
    if (__glintercept_fnptr_glUniform1ivARB == NULL) return NULL;
    return (void*) __glintercept_glUniform1ivARB;
  }
  if (strcmp(name, "glUniform1ui") == 0) {
    if (__glintercept_fnptr_glUniform1ui == NULL) {
      __glintercept_fnptr_glUniform1ui = (__ctype_glUniform1ui) eglGetProcAddr("glUniform1ui");
    }
    if (__glintercept_fnptr_glUniform1ui == NULL) return NULL;
    return (void*) __glintercept_glUniform1ui;
  }
  if (strcmp(name, "glUniform1ui64ARB") == 0) {
    if (__glintercept_fnptr_glUniform1ui64ARB == NULL) {
      __glintercept_fnptr_glUniform1ui64ARB = (__ctype_glUniform1ui64ARB) eglGetProcAddr("glUniform1ui64ARB");
    }
    if (__glintercept_fnptr_glUniform1ui64ARB == NULL) return NULL;
    return (void*) __glintercept_glUniform1ui64ARB;
  }
  if (strcmp(name, "glUniform1ui64NV") == 0) {
    if (__glintercept_fnptr_glUniform1ui64NV == NULL) {
      __glintercept_fnptr_glUniform1ui64NV = (__ctype_glUniform1ui64NV) eglGetProcAddr("glUniform1ui64NV");
    }
    if (__glintercept_fnptr_glUniform1ui64NV == NULL) return NULL;
    return (void*) __glintercept_glUniform1ui64NV;
  }
  if (strcmp(name, "glUniform1ui64vARB") == 0) {
    if (__glintercept_fnptr_glUniform1ui64vARB == NULL) {
      __glintercept_fnptr_glUniform1ui64vARB = (__ctype_glUniform1ui64vARB) eglGetProcAddr("glUniform1ui64vARB");
    }
    if (__glintercept_fnptr_glUniform1ui64vARB == NULL) return NULL;
    return (void*) __glintercept_glUniform1ui64vARB;
  }
  if (strcmp(name, "glUniform1ui64vNV") == 0) {
    if (__glintercept_fnptr_glUniform1ui64vNV == NULL) {
      __glintercept_fnptr_glUniform1ui64vNV = (__ctype_glUniform1ui64vNV) eglGetProcAddr("glUniform1ui64vNV");
    }
    if (__glintercept_fnptr_glUniform1ui64vNV == NULL) return NULL;
    return (void*) __glintercept_glUniform1ui64vNV;
  }
  if (strcmp(name, "glUniform1uiEXT") == 0) {
    if (__glintercept_fnptr_glUniform1uiEXT == NULL) {
      __glintercept_fnptr_glUniform1uiEXT = (__ctype_glUniform1uiEXT) eglGetProcAddr("glUniform1uiEXT");
    }
    if (__glintercept_fnptr_glUniform1uiEXT == NULL) return NULL;
    return (void*) __glintercept_glUniform1uiEXT;
  }
  if (strcmp(name, "glUniform1uiv") == 0) {
    if (__glintercept_fnptr_glUniform1uiv == NULL) {
      __glintercept_fnptr_glUniform1uiv = (__ctype_glUniform1uiv) eglGetProcAddr("glUniform1uiv");
    }
    if (__glintercept_fnptr_glUniform1uiv == NULL) return NULL;
    return (void*) __glintercept_glUniform1uiv;
  }
  if (strcmp(name, "glUniform1uivEXT") == 0) {
    if (__glintercept_fnptr_glUniform1uivEXT == NULL) {
      __glintercept_fnptr_glUniform1uivEXT = (__ctype_glUniform1uivEXT) eglGetProcAddr("glUniform1uivEXT");
    }
    if (__glintercept_fnptr_glUniform1uivEXT == NULL) return NULL;
    return (void*) __glintercept_glUniform1uivEXT;
  }
  if (strcmp(name, "glUniform2d") == 0) {
    if (__glintercept_fnptr_glUniform2d == NULL) {
      __glintercept_fnptr_glUniform2d = (__ctype_glUniform2d) eglGetProcAddr("glUniform2d");
    }
    if (__glintercept_fnptr_glUniform2d == NULL) return NULL;
    return (void*) __glintercept_glUniform2d;
  }
  if (strcmp(name, "glUniform2dv") == 0) {
    if (__glintercept_fnptr_glUniform2dv == NULL) {
      __glintercept_fnptr_glUniform2dv = (__ctype_glUniform2dv) eglGetProcAddr("glUniform2dv");
    }
    if (__glintercept_fnptr_glUniform2dv == NULL) return NULL;
    return (void*) __glintercept_glUniform2dv;
  }
  if (strcmp(name, "glUniform2f") == 0) {
    if (__glintercept_fnptr_glUniform2f == NULL) {
      __glintercept_fnptr_glUniform2f = (__ctype_glUniform2f) eglGetProcAddr("glUniform2f");
    }
    if (__glintercept_fnptr_glUniform2f == NULL) return NULL;
    return (void*) __glintercept_glUniform2f;
  }
  if (strcmp(name, "glUniform2fARB") == 0) {
    if (__glintercept_fnptr_glUniform2fARB == NULL) {
      __glintercept_fnptr_glUniform2fARB = (__ctype_glUniform2fARB) eglGetProcAddr("glUniform2fARB");
    }
    if (__glintercept_fnptr_glUniform2fARB == NULL) return NULL;
    return (void*) __glintercept_glUniform2fARB;
  }
  if (strcmp(name, "glUniform2fv") == 0) {
    if (__glintercept_fnptr_glUniform2fv == NULL) {
      __glintercept_fnptr_glUniform2fv = (__ctype_glUniform2fv) eglGetProcAddr("glUniform2fv");
    }
    if (__glintercept_fnptr_glUniform2fv == NULL) return NULL;
    return (void*) __glintercept_glUniform2fv;
  }
  if (strcmp(name, "glUniform2fvARB") == 0) {
    if (__glintercept_fnptr_glUniform2fvARB == NULL) {
      __glintercept_fnptr_glUniform2fvARB = (__ctype_glUniform2fvARB) eglGetProcAddr("glUniform2fvARB");
    }
    if (__glintercept_fnptr_glUniform2fvARB == NULL) return NULL;
    return (void*) __glintercept_glUniform2fvARB;
  }
  if (strcmp(name, "glUniform2i") == 0) {
    if (__glintercept_fnptr_glUniform2i == NULL) {
      __glintercept_fnptr_glUniform2i = (__ctype_glUniform2i) eglGetProcAddr("glUniform2i");
    }
    if (__glintercept_fnptr_glUniform2i == NULL) return NULL;
    return (void*) __glintercept_glUniform2i;
  }
  if (strcmp(name, "glUniform2i64ARB") == 0) {
    if (__glintercept_fnptr_glUniform2i64ARB == NULL) {
      __glintercept_fnptr_glUniform2i64ARB = (__ctype_glUniform2i64ARB) eglGetProcAddr("glUniform2i64ARB");
    }
    if (__glintercept_fnptr_glUniform2i64ARB == NULL) return NULL;
    return (void*) __glintercept_glUniform2i64ARB;
  }
  if (strcmp(name, "glUniform2i64NV") == 0) {
    if (__glintercept_fnptr_glUniform2i64NV == NULL) {
      __glintercept_fnptr_glUniform2i64NV = (__ctype_glUniform2i64NV) eglGetProcAddr("glUniform2i64NV");
    }
    if (__glintercept_fnptr_glUniform2i64NV == NULL) return NULL;
    return (void*) __glintercept_glUniform2i64NV;
  }
  if (strcmp(name, "glUniform2i64vARB") == 0) {
    if (__glintercept_fnptr_glUniform2i64vARB == NULL) {
      __glintercept_fnptr_glUniform2i64vARB = (__ctype_glUniform2i64vARB) eglGetProcAddr("glUniform2i64vARB");
    }
    if (__glintercept_fnptr_glUniform2i64vARB == NULL) return NULL;
    return (void*) __glintercept_glUniform2i64vARB;
  }
  if (strcmp(name, "glUniform2i64vNV") == 0) {
    if (__glintercept_fnptr_glUniform2i64vNV == NULL) {
      __glintercept_fnptr_glUniform2i64vNV = (__ctype_glUniform2i64vNV) eglGetProcAddr("glUniform2i64vNV");
    }
    if (__glintercept_fnptr_glUniform2i64vNV == NULL) return NULL;
    return (void*) __glintercept_glUniform2i64vNV;
  }
  if (strcmp(name, "glUniform2iARB") == 0) {
    if (__glintercept_fnptr_glUniform2iARB == NULL) {
      __glintercept_fnptr_glUniform2iARB = (__ctype_glUniform2iARB) eglGetProcAddr("glUniform2iARB");
    }
    if (__glintercept_fnptr_glUniform2iARB == NULL) return NULL;
    return (void*) __glintercept_glUniform2iARB;
  }
  if (strcmp(name, "glUniform2iv") == 0) {
    if (__glintercept_fnptr_glUniform2iv == NULL) {
      __glintercept_fnptr_glUniform2iv = (__ctype_glUniform2iv) eglGetProcAddr("glUniform2iv");
    }
    if (__glintercept_fnptr_glUniform2iv == NULL) return NULL;
    return (void*) __glintercept_glUniform2iv;
  }
  if (strcmp(name, "glUniform2ivARB") == 0) {
    if (__glintercept_fnptr_glUniform2ivARB == NULL) {
      __glintercept_fnptr_glUniform2ivARB = (__ctype_glUniform2ivARB) eglGetProcAddr("glUniform2ivARB");
    }
    if (__glintercept_fnptr_glUniform2ivARB == NULL) return NULL;
    return (void*) __glintercept_glUniform2ivARB;
  }
  if (strcmp(name, "glUniform2ui") == 0) {
    if (__glintercept_fnptr_glUniform2ui == NULL) {
      __glintercept_fnptr_glUniform2ui = (__ctype_glUniform2ui) eglGetProcAddr("glUniform2ui");
    }
    if (__glintercept_fnptr_glUniform2ui == NULL) return NULL;
    return (void*) __glintercept_glUniform2ui;
  }
  if (strcmp(name, "glUniform2ui64ARB") == 0) {
    if (__glintercept_fnptr_glUniform2ui64ARB == NULL) {
      __glintercept_fnptr_glUniform2ui64ARB = (__ctype_glUniform2ui64ARB) eglGetProcAddr("glUniform2ui64ARB");
    }
    if (__glintercept_fnptr_glUniform2ui64ARB == NULL) return NULL;
    return (void*) __glintercept_glUniform2ui64ARB;
  }
  if (strcmp(name, "glUniform2ui64NV") == 0) {
    if (__glintercept_fnptr_glUniform2ui64NV == NULL) {
      __glintercept_fnptr_glUniform2ui64NV = (__ctype_glUniform2ui64NV) eglGetProcAddr("glUniform2ui64NV");
    }
    if (__glintercept_fnptr_glUniform2ui64NV == NULL) return NULL;
    return (void*) __glintercept_glUniform2ui64NV;
  }
  if (strcmp(name, "glUniform2ui64vARB") == 0) {
    if (__glintercept_fnptr_glUniform2ui64vARB == NULL) {
      __glintercept_fnptr_glUniform2ui64vARB = (__ctype_glUniform2ui64vARB) eglGetProcAddr("glUniform2ui64vARB");
    }
    if (__glintercept_fnptr_glUniform2ui64vARB == NULL) return NULL;
    return (void*) __glintercept_glUniform2ui64vARB;
  }
  if (strcmp(name, "glUniform2ui64vNV") == 0) {
    if (__glintercept_fnptr_glUniform2ui64vNV == NULL) {
      __glintercept_fnptr_glUniform2ui64vNV = (__ctype_glUniform2ui64vNV) eglGetProcAddr("glUniform2ui64vNV");
    }
    if (__glintercept_fnptr_glUniform2ui64vNV == NULL) return NULL;
    return (void*) __glintercept_glUniform2ui64vNV;
  }
  if (strcmp(name, "glUniform2uiEXT") == 0) {
    if (__glintercept_fnptr_glUniform2uiEXT == NULL) {
      __glintercept_fnptr_glUniform2uiEXT = (__ctype_glUniform2uiEXT) eglGetProcAddr("glUniform2uiEXT");
    }
    if (__glintercept_fnptr_glUniform2uiEXT == NULL) return NULL;
    return (void*) __glintercept_glUniform2uiEXT;
  }
  if (strcmp(name, "glUniform2uiv") == 0) {
    if (__glintercept_fnptr_glUniform2uiv == NULL) {
      __glintercept_fnptr_glUniform2uiv = (__ctype_glUniform2uiv) eglGetProcAddr("glUniform2uiv");
    }
    if (__glintercept_fnptr_glUniform2uiv == NULL) return NULL;
    return (void*) __glintercept_glUniform2uiv;
  }
  if (strcmp(name, "glUniform2uivEXT") == 0) {
    if (__glintercept_fnptr_glUniform2uivEXT == NULL) {
      __glintercept_fnptr_glUniform2uivEXT = (__ctype_glUniform2uivEXT) eglGetProcAddr("glUniform2uivEXT");
    }
    if (__glintercept_fnptr_glUniform2uivEXT == NULL) return NULL;
    return (void*) __glintercept_glUniform2uivEXT;
  }
  if (strcmp(name, "glUniform3d") == 0) {
    if (__glintercept_fnptr_glUniform3d == NULL) {
      __glintercept_fnptr_glUniform3d = (__ctype_glUniform3d) eglGetProcAddr("glUniform3d");
    }
    if (__glintercept_fnptr_glUniform3d == NULL) return NULL;
    return (void*) __glintercept_glUniform3d;
  }
  if (strcmp(name, "glUniform3dv") == 0) {
    if (__glintercept_fnptr_glUniform3dv == NULL) {
      __glintercept_fnptr_glUniform3dv = (__ctype_glUniform3dv) eglGetProcAddr("glUniform3dv");
    }
    if (__glintercept_fnptr_glUniform3dv == NULL) return NULL;
    return (void*) __glintercept_glUniform3dv;
  }
  if (strcmp(name, "glUniform3f") == 0) {
    if (__glintercept_fnptr_glUniform3f == NULL) {
      __glintercept_fnptr_glUniform3f = (__ctype_glUniform3f) eglGetProcAddr("glUniform3f");
    }
    if (__glintercept_fnptr_glUniform3f == NULL) return NULL;
    return (void*) __glintercept_glUniform3f;
  }
  if (strcmp(name, "glUniform3fARB") == 0) {
    if (__glintercept_fnptr_glUniform3fARB == NULL) {
      __glintercept_fnptr_glUniform3fARB = (__ctype_glUniform3fARB) eglGetProcAddr("glUniform3fARB");
    }
    if (__glintercept_fnptr_glUniform3fARB == NULL) return NULL;
    return (void*) __glintercept_glUniform3fARB;
  }
  if (strcmp(name, "glUniform3fv") == 0) {
    if (__glintercept_fnptr_glUniform3fv == NULL) {
      __glintercept_fnptr_glUniform3fv = (__ctype_glUniform3fv) eglGetProcAddr("glUniform3fv");
    }
    if (__glintercept_fnptr_glUniform3fv == NULL) return NULL;
    return (void*) __glintercept_glUniform3fv;
  }
  if (strcmp(name, "glUniform3fvARB") == 0) {
    if (__glintercept_fnptr_glUniform3fvARB == NULL) {
      __glintercept_fnptr_glUniform3fvARB = (__ctype_glUniform3fvARB) eglGetProcAddr("glUniform3fvARB");
    }
    if (__glintercept_fnptr_glUniform3fvARB == NULL) return NULL;
    return (void*) __glintercept_glUniform3fvARB;
  }
  if (strcmp(name, "glUniform3i") == 0) {
    if (__glintercept_fnptr_glUniform3i == NULL) {
      __glintercept_fnptr_glUniform3i = (__ctype_glUniform3i) eglGetProcAddr("glUniform3i");
    }
    if (__glintercept_fnptr_glUniform3i == NULL) return NULL;
    return (void*) __glintercept_glUniform3i;
  }
  if (strcmp(name, "glUniform3i64ARB") == 0) {
    if (__glintercept_fnptr_glUniform3i64ARB == NULL) {
      __glintercept_fnptr_glUniform3i64ARB = (__ctype_glUniform3i64ARB) eglGetProcAddr("glUniform3i64ARB");
    }
    if (__glintercept_fnptr_glUniform3i64ARB == NULL) return NULL;
    return (void*) __glintercept_glUniform3i64ARB;
  }
  if (strcmp(name, "glUniform3i64NV") == 0) {
    if (__glintercept_fnptr_glUniform3i64NV == NULL) {
      __glintercept_fnptr_glUniform3i64NV = (__ctype_glUniform3i64NV) eglGetProcAddr("glUniform3i64NV");
    }
    if (__glintercept_fnptr_glUniform3i64NV == NULL) return NULL;
    return (void*) __glintercept_glUniform3i64NV;
  }
  if (strcmp(name, "glUniform3i64vARB") == 0) {
    if (__glintercept_fnptr_glUniform3i64vARB == NULL) {
      __glintercept_fnptr_glUniform3i64vARB = (__ctype_glUniform3i64vARB) eglGetProcAddr("glUniform3i64vARB");
    }
    if (__glintercept_fnptr_glUniform3i64vARB == NULL) return NULL;
    return (void*) __glintercept_glUniform3i64vARB;
  }
  if (strcmp(name, "glUniform3i64vNV") == 0) {
    if (__glintercept_fnptr_glUniform3i64vNV == NULL) {
      __glintercept_fnptr_glUniform3i64vNV = (__ctype_glUniform3i64vNV) eglGetProcAddr("glUniform3i64vNV");
    }
    if (__glintercept_fnptr_glUniform3i64vNV == NULL) return NULL;
    return (void*) __glintercept_glUniform3i64vNV;
  }
  if (strcmp(name, "glUniform3iARB") == 0) {
    if (__glintercept_fnptr_glUniform3iARB == NULL) {
      __glintercept_fnptr_glUniform3iARB = (__ctype_glUniform3iARB) eglGetProcAddr("glUniform3iARB");
    }
    if (__glintercept_fnptr_glUniform3iARB == NULL) return NULL;
    return (void*) __glintercept_glUniform3iARB;
  }
  if (strcmp(name, "glUniform3iv") == 0) {
    if (__glintercept_fnptr_glUniform3iv == NULL) {
      __glintercept_fnptr_glUniform3iv = (__ctype_glUniform3iv) eglGetProcAddr("glUniform3iv");
    }
    if (__glintercept_fnptr_glUniform3iv == NULL) return NULL;
    return (void*) __glintercept_glUniform3iv;
  }
  if (strcmp(name, "glUniform3ivARB") == 0) {
    if (__glintercept_fnptr_glUniform3ivARB == NULL) {
      __glintercept_fnptr_glUniform3ivARB = (__ctype_glUniform3ivARB) eglGetProcAddr("glUniform3ivARB");
    }
    if (__glintercept_fnptr_glUniform3ivARB == NULL) return NULL;
    return (void*) __glintercept_glUniform3ivARB;
  }
  if (strcmp(name, "glUniform3ui") == 0) {
    if (__glintercept_fnptr_glUniform3ui == NULL) {
      __glintercept_fnptr_glUniform3ui = (__ctype_glUniform3ui) eglGetProcAddr("glUniform3ui");
    }
    if (__glintercept_fnptr_glUniform3ui == NULL) return NULL;
    return (void*) __glintercept_glUniform3ui;
  }
  if (strcmp(name, "glUniform3ui64ARB") == 0) {
    if (__glintercept_fnptr_glUniform3ui64ARB == NULL) {
      __glintercept_fnptr_glUniform3ui64ARB = (__ctype_glUniform3ui64ARB) eglGetProcAddr("glUniform3ui64ARB");
    }
    if (__glintercept_fnptr_glUniform3ui64ARB == NULL) return NULL;
    return (void*) __glintercept_glUniform3ui64ARB;
  }
  if (strcmp(name, "glUniform3ui64NV") == 0) {
    if (__glintercept_fnptr_glUniform3ui64NV == NULL) {
      __glintercept_fnptr_glUniform3ui64NV = (__ctype_glUniform3ui64NV) eglGetProcAddr("glUniform3ui64NV");
    }
    if (__glintercept_fnptr_glUniform3ui64NV == NULL) return NULL;
    return (void*) __glintercept_glUniform3ui64NV;
  }
  if (strcmp(name, "glUniform3ui64vARB") == 0) {
    if (__glintercept_fnptr_glUniform3ui64vARB == NULL) {
      __glintercept_fnptr_glUniform3ui64vARB = (__ctype_glUniform3ui64vARB) eglGetProcAddr("glUniform3ui64vARB");
    }
    if (__glintercept_fnptr_glUniform3ui64vARB == NULL) return NULL;
    return (void*) __glintercept_glUniform3ui64vARB;
  }
  if (strcmp(name, "glUniform3ui64vNV") == 0) {
    if (__glintercept_fnptr_glUniform3ui64vNV == NULL) {
      __glintercept_fnptr_glUniform3ui64vNV = (__ctype_glUniform3ui64vNV) eglGetProcAddr("glUniform3ui64vNV");
    }
    if (__glintercept_fnptr_glUniform3ui64vNV == NULL) return NULL;
    return (void*) __glintercept_glUniform3ui64vNV;
  }
  if (strcmp(name, "glUniform3uiEXT") == 0) {
    if (__glintercept_fnptr_glUniform3uiEXT == NULL) {
      __glintercept_fnptr_glUniform3uiEXT = (__ctype_glUniform3uiEXT) eglGetProcAddr("glUniform3uiEXT");
    }
    if (__glintercept_fnptr_glUniform3uiEXT == NULL) return NULL;
    return (void*) __glintercept_glUniform3uiEXT;
  }
  if (strcmp(name, "glUniform3uiv") == 0) {
    if (__glintercept_fnptr_glUniform3uiv == NULL) {
      __glintercept_fnptr_glUniform3uiv = (__ctype_glUniform3uiv) eglGetProcAddr("glUniform3uiv");
    }
    if (__glintercept_fnptr_glUniform3uiv == NULL) return NULL;
    return (void*) __glintercept_glUniform3uiv;
  }
  if (strcmp(name, "glUniform3uivEXT") == 0) {
    if (__glintercept_fnptr_glUniform3uivEXT == NULL) {
      __glintercept_fnptr_glUniform3uivEXT = (__ctype_glUniform3uivEXT) eglGetProcAddr("glUniform3uivEXT");
    }
    if (__glintercept_fnptr_glUniform3uivEXT == NULL) return NULL;
    return (void*) __glintercept_glUniform3uivEXT;
  }
  if (strcmp(name, "glUniform4d") == 0) {
    if (__glintercept_fnptr_glUniform4d == NULL) {
      __glintercept_fnptr_glUniform4d = (__ctype_glUniform4d) eglGetProcAddr("glUniform4d");
    }
    if (__glintercept_fnptr_glUniform4d == NULL) return NULL;
    return (void*) __glintercept_glUniform4d;
  }
  if (strcmp(name, "glUniform4dv") == 0) {
    if (__glintercept_fnptr_glUniform4dv == NULL) {
      __glintercept_fnptr_glUniform4dv = (__ctype_glUniform4dv) eglGetProcAddr("glUniform4dv");
    }
    if (__glintercept_fnptr_glUniform4dv == NULL) return NULL;
    return (void*) __glintercept_glUniform4dv;
  }
  if (strcmp(name, "glUniform4f") == 0) {
    if (__glintercept_fnptr_glUniform4f == NULL) {
      __glintercept_fnptr_glUniform4f = (__ctype_glUniform4f) eglGetProcAddr("glUniform4f");
    }
    if (__glintercept_fnptr_glUniform4f == NULL) return NULL;
    return (void*) __glintercept_glUniform4f;
  }
  if (strcmp(name, "glUniform4fARB") == 0) {
    if (__glintercept_fnptr_glUniform4fARB == NULL) {
      __glintercept_fnptr_glUniform4fARB = (__ctype_glUniform4fARB) eglGetProcAddr("glUniform4fARB");
    }
    if (__glintercept_fnptr_glUniform4fARB == NULL) return NULL;
    return (void*) __glintercept_glUniform4fARB;
  }
  if (strcmp(name, "glUniform4fv") == 0) {
    if (__glintercept_fnptr_glUniform4fv == NULL) {
      __glintercept_fnptr_glUniform4fv = (__ctype_glUniform4fv) eglGetProcAddr("glUniform4fv");
    }
    if (__glintercept_fnptr_glUniform4fv == NULL) return NULL;
    return (void*) __glintercept_glUniform4fv;
  }
  if (strcmp(name, "glUniform4fvARB") == 0) {
    if (__glintercept_fnptr_glUniform4fvARB == NULL) {
      __glintercept_fnptr_glUniform4fvARB = (__ctype_glUniform4fvARB) eglGetProcAddr("glUniform4fvARB");
    }
    if (__glintercept_fnptr_glUniform4fvARB == NULL) return NULL;
    return (void*) __glintercept_glUniform4fvARB;
  }
  if (strcmp(name, "glUniform4i") == 0) {
    if (__glintercept_fnptr_glUniform4i == NULL) {
      __glintercept_fnptr_glUniform4i = (__ctype_glUniform4i) eglGetProcAddr("glUniform4i");
    }
    if (__glintercept_fnptr_glUniform4i == NULL) return NULL;
    return (void*) __glintercept_glUniform4i;
  }
  if (strcmp(name, "glUniform4i64ARB") == 0) {
    if (__glintercept_fnptr_glUniform4i64ARB == NULL) {
      __glintercept_fnptr_glUniform4i64ARB = (__ctype_glUniform4i64ARB) eglGetProcAddr("glUniform4i64ARB");
    }
    if (__glintercept_fnptr_glUniform4i64ARB == NULL) return NULL;
    return (void*) __glintercept_glUniform4i64ARB;
  }
  if (strcmp(name, "glUniform4i64NV") == 0) {
    if (__glintercept_fnptr_glUniform4i64NV == NULL) {
      __glintercept_fnptr_glUniform4i64NV = (__ctype_glUniform4i64NV) eglGetProcAddr("glUniform4i64NV");
    }
    if (__glintercept_fnptr_glUniform4i64NV == NULL) return NULL;
    return (void*) __glintercept_glUniform4i64NV;
  }
  if (strcmp(name, "glUniform4i64vARB") == 0) {
    if (__glintercept_fnptr_glUniform4i64vARB == NULL) {
      __glintercept_fnptr_glUniform4i64vARB = (__ctype_glUniform4i64vARB) eglGetProcAddr("glUniform4i64vARB");
    }
    if (__glintercept_fnptr_glUniform4i64vARB == NULL) return NULL;
    return (void*) __glintercept_glUniform4i64vARB;
  }
  if (strcmp(name, "glUniform4i64vNV") == 0) {
    if (__glintercept_fnptr_glUniform4i64vNV == NULL) {
      __glintercept_fnptr_glUniform4i64vNV = (__ctype_glUniform4i64vNV) eglGetProcAddr("glUniform4i64vNV");
    }
    if (__glintercept_fnptr_glUniform4i64vNV == NULL) return NULL;
    return (void*) __glintercept_glUniform4i64vNV;
  }
  if (strcmp(name, "glUniform4iARB") == 0) {
    if (__glintercept_fnptr_glUniform4iARB == NULL) {
      __glintercept_fnptr_glUniform4iARB = (__ctype_glUniform4iARB) eglGetProcAddr("glUniform4iARB");
    }
    if (__glintercept_fnptr_glUniform4iARB == NULL) return NULL;
    return (void*) __glintercept_glUniform4iARB;
  }
  if (strcmp(name, "glUniform4iv") == 0) {
    if (__glintercept_fnptr_glUniform4iv == NULL) {
      __glintercept_fnptr_glUniform4iv = (__ctype_glUniform4iv) eglGetProcAddr("glUniform4iv");
    }
    if (__glintercept_fnptr_glUniform4iv == NULL) return NULL;
    return (void*) __glintercept_glUniform4iv;
  }
  if (strcmp(name, "glUniform4ivARB") == 0) {
    if (__glintercept_fnptr_glUniform4ivARB == NULL) {
      __glintercept_fnptr_glUniform4ivARB = (__ctype_glUniform4ivARB) eglGetProcAddr("glUniform4ivARB");
    }
    if (__glintercept_fnptr_glUniform4ivARB == NULL) return NULL;
    return (void*) __glintercept_glUniform4ivARB;
  }
  if (strcmp(name, "glUniform4ui") == 0) {
    if (__glintercept_fnptr_glUniform4ui == NULL) {
      __glintercept_fnptr_glUniform4ui = (__ctype_glUniform4ui) eglGetProcAddr("glUniform4ui");
    }
    if (__glintercept_fnptr_glUniform4ui == NULL) return NULL;
    return (void*) __glintercept_glUniform4ui;
  }
  if (strcmp(name, "glUniform4ui64ARB") == 0) {
    if (__glintercept_fnptr_glUniform4ui64ARB == NULL) {
      __glintercept_fnptr_glUniform4ui64ARB = (__ctype_glUniform4ui64ARB) eglGetProcAddr("glUniform4ui64ARB");
    }
    if (__glintercept_fnptr_glUniform4ui64ARB == NULL) return NULL;
    return (void*) __glintercept_glUniform4ui64ARB;
  }
  if (strcmp(name, "glUniform4ui64NV") == 0) {
    if (__glintercept_fnptr_glUniform4ui64NV == NULL) {
      __glintercept_fnptr_glUniform4ui64NV = (__ctype_glUniform4ui64NV) eglGetProcAddr("glUniform4ui64NV");
    }
    if (__glintercept_fnptr_glUniform4ui64NV == NULL) return NULL;
    return (void*) __glintercept_glUniform4ui64NV;
  }
  if (strcmp(name, "glUniform4ui64vARB") == 0) {
    if (__glintercept_fnptr_glUniform4ui64vARB == NULL) {
      __glintercept_fnptr_glUniform4ui64vARB = (__ctype_glUniform4ui64vARB) eglGetProcAddr("glUniform4ui64vARB");
    }
    if (__glintercept_fnptr_glUniform4ui64vARB == NULL) return NULL;
    return (void*) __glintercept_glUniform4ui64vARB;
  }
  if (strcmp(name, "glUniform4ui64vNV") == 0) {
    if (__glintercept_fnptr_glUniform4ui64vNV == NULL) {
      __glintercept_fnptr_glUniform4ui64vNV = (__ctype_glUniform4ui64vNV) eglGetProcAddr("glUniform4ui64vNV");
    }
    if (__glintercept_fnptr_glUniform4ui64vNV == NULL) return NULL;
    return (void*) __glintercept_glUniform4ui64vNV;
  }
  if (strcmp(name, "glUniform4uiEXT") == 0) {
    if (__glintercept_fnptr_glUniform4uiEXT == NULL) {
      __glintercept_fnptr_glUniform4uiEXT = (__ctype_glUniform4uiEXT) eglGetProcAddr("glUniform4uiEXT");
    }
    if (__glintercept_fnptr_glUniform4uiEXT == NULL) return NULL;
    return (void*) __glintercept_glUniform4uiEXT;
  }
  if (strcmp(name, "glUniform4uiv") == 0) {
    if (__glintercept_fnptr_glUniform4uiv == NULL) {
      __glintercept_fnptr_glUniform4uiv = (__ctype_glUniform4uiv) eglGetProcAddr("glUniform4uiv");
    }
    if (__glintercept_fnptr_glUniform4uiv == NULL) return NULL;
    return (void*) __glintercept_glUniform4uiv;
  }
  if (strcmp(name, "glUniform4uivEXT") == 0) {
    if (__glintercept_fnptr_glUniform4uivEXT == NULL) {
      __glintercept_fnptr_glUniform4uivEXT = (__ctype_glUniform4uivEXT) eglGetProcAddr("glUniform4uivEXT");
    }
    if (__glintercept_fnptr_glUniform4uivEXT == NULL) return NULL;
    return (void*) __glintercept_glUniform4uivEXT;
  }
  if (strcmp(name, "glUniformBlockBinding") == 0) {
    if (__glintercept_fnptr_glUniformBlockBinding == NULL) {
      __glintercept_fnptr_glUniformBlockBinding = (__ctype_glUniformBlockBinding) eglGetProcAddr("glUniformBlockBinding");
    }
    if (__glintercept_fnptr_glUniformBlockBinding == NULL) return NULL;
    return (void*) __glintercept_glUniformBlockBinding;
  }
  if (strcmp(name, "glUniformBufferEXT") == 0) {
    if (__glintercept_fnptr_glUniformBufferEXT == NULL) {
      __glintercept_fnptr_glUniformBufferEXT = (__ctype_glUniformBufferEXT) eglGetProcAddr("glUniformBufferEXT");
    }
    if (__glintercept_fnptr_glUniformBufferEXT == NULL) return NULL;
    return (void*) __glintercept_glUniformBufferEXT;
  }
  if (strcmp(name, "glUniformHandleui64ARB") == 0) {
    if (__glintercept_fnptr_glUniformHandleui64ARB == NULL) {
      __glintercept_fnptr_glUniformHandleui64ARB = (__ctype_glUniformHandleui64ARB) eglGetProcAddr("glUniformHandleui64ARB");
    }
    if (__glintercept_fnptr_glUniformHandleui64ARB == NULL) return NULL;
    return (void*) __glintercept_glUniformHandleui64ARB;
  }
  if (strcmp(name, "glUniformHandleui64IMG") == 0) {
    if (__glintercept_fnptr_glUniformHandleui64IMG == NULL) {
      __glintercept_fnptr_glUniformHandleui64IMG = (__ctype_glUniformHandleui64IMG) eglGetProcAddr("glUniformHandleui64IMG");
    }
    if (__glintercept_fnptr_glUniformHandleui64IMG == NULL) return NULL;
    return (void*) __glintercept_glUniformHandleui64IMG;
  }
  if (strcmp(name, "glUniformHandleui64NV") == 0) {
    if (__glintercept_fnptr_glUniformHandleui64NV == NULL) {
      __glintercept_fnptr_glUniformHandleui64NV = (__ctype_glUniformHandleui64NV) eglGetProcAddr("glUniformHandleui64NV");
    }
    if (__glintercept_fnptr_glUniformHandleui64NV == NULL) return NULL;
    return (void*) __glintercept_glUniformHandleui64NV;
  }
  if (strcmp(name, "glUniformHandleui64vARB") == 0) {
    if (__glintercept_fnptr_glUniformHandleui64vARB == NULL) {
      __glintercept_fnptr_glUniformHandleui64vARB = (__ctype_glUniformHandleui64vARB) eglGetProcAddr("glUniformHandleui64vARB");
    }
    if (__glintercept_fnptr_glUniformHandleui64vARB == NULL) return NULL;
    return (void*) __glintercept_glUniformHandleui64vARB;
  }
  if (strcmp(name, "glUniformHandleui64vIMG") == 0) {
    if (__glintercept_fnptr_glUniformHandleui64vIMG == NULL) {
      __glintercept_fnptr_glUniformHandleui64vIMG = (__ctype_glUniformHandleui64vIMG) eglGetProcAddr("glUniformHandleui64vIMG");
    }
    if (__glintercept_fnptr_glUniformHandleui64vIMG == NULL) return NULL;
    return (void*) __glintercept_glUniformHandleui64vIMG;
  }
  if (strcmp(name, "glUniformHandleui64vNV") == 0) {
    if (__glintercept_fnptr_glUniformHandleui64vNV == NULL) {
      __glintercept_fnptr_glUniformHandleui64vNV = (__ctype_glUniformHandleui64vNV) eglGetProcAddr("glUniformHandleui64vNV");
    }
    if (__glintercept_fnptr_glUniformHandleui64vNV == NULL) return NULL;
    return (void*) __glintercept_glUniformHandleui64vNV;
  }
  if (strcmp(name, "glUniformMatrix2dv") == 0) {
    if (__glintercept_fnptr_glUniformMatrix2dv == NULL) {
      __glintercept_fnptr_glUniformMatrix2dv = (__ctype_glUniformMatrix2dv) eglGetProcAddr("glUniformMatrix2dv");
    }
    if (__glintercept_fnptr_glUniformMatrix2dv == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix2dv;
  }
  if (strcmp(name, "glUniformMatrix2fv") == 0) {
    if (__glintercept_fnptr_glUniformMatrix2fv == NULL) {
      __glintercept_fnptr_glUniformMatrix2fv = (__ctype_glUniformMatrix2fv) eglGetProcAddr("glUniformMatrix2fv");
    }
    if (__glintercept_fnptr_glUniformMatrix2fv == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix2fv;
  }
  if (strcmp(name, "glUniformMatrix2fvARB") == 0) {
    if (__glintercept_fnptr_glUniformMatrix2fvARB == NULL) {
      __glintercept_fnptr_glUniformMatrix2fvARB = (__ctype_glUniformMatrix2fvARB) eglGetProcAddr("glUniformMatrix2fvARB");
    }
    if (__glintercept_fnptr_glUniformMatrix2fvARB == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix2fvARB;
  }
  if (strcmp(name, "glUniformMatrix2x3dv") == 0) {
    if (__glintercept_fnptr_glUniformMatrix2x3dv == NULL) {
      __glintercept_fnptr_glUniformMatrix2x3dv = (__ctype_glUniformMatrix2x3dv) eglGetProcAddr("glUniformMatrix2x3dv");
    }
    if (__glintercept_fnptr_glUniformMatrix2x3dv == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix2x3dv;
  }
  if (strcmp(name, "glUniformMatrix2x3fv") == 0) {
    if (__glintercept_fnptr_glUniformMatrix2x3fv == NULL) {
      __glintercept_fnptr_glUniformMatrix2x3fv = (__ctype_glUniformMatrix2x3fv) eglGetProcAddr("glUniformMatrix2x3fv");
    }
    if (__glintercept_fnptr_glUniformMatrix2x3fv == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix2x3fv;
  }
  if (strcmp(name, "glUniformMatrix2x3fvNV") == 0) {
    if (__glintercept_fnptr_glUniformMatrix2x3fvNV == NULL) {
      __glintercept_fnptr_glUniformMatrix2x3fvNV = (__ctype_glUniformMatrix2x3fvNV) eglGetProcAddr("glUniformMatrix2x3fvNV");
    }
    if (__glintercept_fnptr_glUniformMatrix2x3fvNV == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix2x3fvNV;
  }
  if (strcmp(name, "glUniformMatrix2x4dv") == 0) {
    if (__glintercept_fnptr_glUniformMatrix2x4dv == NULL) {
      __glintercept_fnptr_glUniformMatrix2x4dv = (__ctype_glUniformMatrix2x4dv) eglGetProcAddr("glUniformMatrix2x4dv");
    }
    if (__glintercept_fnptr_glUniformMatrix2x4dv == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix2x4dv;
  }
  if (strcmp(name, "glUniformMatrix2x4fv") == 0) {
    if (__glintercept_fnptr_glUniformMatrix2x4fv == NULL) {
      __glintercept_fnptr_glUniformMatrix2x4fv = (__ctype_glUniformMatrix2x4fv) eglGetProcAddr("glUniformMatrix2x4fv");
    }
    if (__glintercept_fnptr_glUniformMatrix2x4fv == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix2x4fv;
  }
  if (strcmp(name, "glUniformMatrix2x4fvNV") == 0) {
    if (__glintercept_fnptr_glUniformMatrix2x4fvNV == NULL) {
      __glintercept_fnptr_glUniformMatrix2x4fvNV = (__ctype_glUniformMatrix2x4fvNV) eglGetProcAddr("glUniformMatrix2x4fvNV");
    }
    if (__glintercept_fnptr_glUniformMatrix2x4fvNV == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix2x4fvNV;
  }
  if (strcmp(name, "glUniformMatrix3dv") == 0) {
    if (__glintercept_fnptr_glUniformMatrix3dv == NULL) {
      __glintercept_fnptr_glUniformMatrix3dv = (__ctype_glUniformMatrix3dv) eglGetProcAddr("glUniformMatrix3dv");
    }
    if (__glintercept_fnptr_glUniformMatrix3dv == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix3dv;
  }
  if (strcmp(name, "glUniformMatrix3fv") == 0) {
    if (__glintercept_fnptr_glUniformMatrix3fv == NULL) {
      __glintercept_fnptr_glUniformMatrix3fv = (__ctype_glUniformMatrix3fv) eglGetProcAddr("glUniformMatrix3fv");
    }
    if (__glintercept_fnptr_glUniformMatrix3fv == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix3fv;
  }
  if (strcmp(name, "glUniformMatrix3fvARB") == 0) {
    if (__glintercept_fnptr_glUniformMatrix3fvARB == NULL) {
      __glintercept_fnptr_glUniformMatrix3fvARB = (__ctype_glUniformMatrix3fvARB) eglGetProcAddr("glUniformMatrix3fvARB");
    }
    if (__glintercept_fnptr_glUniformMatrix3fvARB == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix3fvARB;
  }
  if (strcmp(name, "glUniformMatrix3x2dv") == 0) {
    if (__glintercept_fnptr_glUniformMatrix3x2dv == NULL) {
      __glintercept_fnptr_glUniformMatrix3x2dv = (__ctype_glUniformMatrix3x2dv) eglGetProcAddr("glUniformMatrix3x2dv");
    }
    if (__glintercept_fnptr_glUniformMatrix3x2dv == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix3x2dv;
  }
  if (strcmp(name, "glUniformMatrix3x2fv") == 0) {
    if (__glintercept_fnptr_glUniformMatrix3x2fv == NULL) {
      __glintercept_fnptr_glUniformMatrix3x2fv = (__ctype_glUniformMatrix3x2fv) eglGetProcAddr("glUniformMatrix3x2fv");
    }
    if (__glintercept_fnptr_glUniformMatrix3x2fv == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix3x2fv;
  }
  if (strcmp(name, "glUniformMatrix3x2fvNV") == 0) {
    if (__glintercept_fnptr_glUniformMatrix3x2fvNV == NULL) {
      __glintercept_fnptr_glUniformMatrix3x2fvNV = (__ctype_glUniformMatrix3x2fvNV) eglGetProcAddr("glUniformMatrix3x2fvNV");
    }
    if (__glintercept_fnptr_glUniformMatrix3x2fvNV == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix3x2fvNV;
  }
  if (strcmp(name, "glUniformMatrix3x4dv") == 0) {
    if (__glintercept_fnptr_glUniformMatrix3x4dv == NULL) {
      __glintercept_fnptr_glUniformMatrix3x4dv = (__ctype_glUniformMatrix3x4dv) eglGetProcAddr("glUniformMatrix3x4dv");
    }
    if (__glintercept_fnptr_glUniformMatrix3x4dv == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix3x4dv;
  }
  if (strcmp(name, "glUniformMatrix3x4fv") == 0) {
    if (__glintercept_fnptr_glUniformMatrix3x4fv == NULL) {
      __glintercept_fnptr_glUniformMatrix3x4fv = (__ctype_glUniformMatrix3x4fv) eglGetProcAddr("glUniformMatrix3x4fv");
    }
    if (__glintercept_fnptr_glUniformMatrix3x4fv == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix3x4fv;
  }
  if (strcmp(name, "glUniformMatrix3x4fvNV") == 0) {
    if (__glintercept_fnptr_glUniformMatrix3x4fvNV == NULL) {
      __glintercept_fnptr_glUniformMatrix3x4fvNV = (__ctype_glUniformMatrix3x4fvNV) eglGetProcAddr("glUniformMatrix3x4fvNV");
    }
    if (__glintercept_fnptr_glUniformMatrix3x4fvNV == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix3x4fvNV;
  }
  if (strcmp(name, "glUniformMatrix4dv") == 0) {
    if (__glintercept_fnptr_glUniformMatrix4dv == NULL) {
      __glintercept_fnptr_glUniformMatrix4dv = (__ctype_glUniformMatrix4dv) eglGetProcAddr("glUniformMatrix4dv");
    }
    if (__glintercept_fnptr_glUniformMatrix4dv == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix4dv;
  }
  if (strcmp(name, "glUniformMatrix4fv") == 0) {
    if (__glintercept_fnptr_glUniformMatrix4fv == NULL) {
      __glintercept_fnptr_glUniformMatrix4fv = (__ctype_glUniformMatrix4fv) eglGetProcAddr("glUniformMatrix4fv");
    }
    if (__glintercept_fnptr_glUniformMatrix4fv == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix4fv;
  }
  if (strcmp(name, "glUniformMatrix4fvARB") == 0) {
    if (__glintercept_fnptr_glUniformMatrix4fvARB == NULL) {
      __glintercept_fnptr_glUniformMatrix4fvARB = (__ctype_glUniformMatrix4fvARB) eglGetProcAddr("glUniformMatrix4fvARB");
    }
    if (__glintercept_fnptr_glUniformMatrix4fvARB == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix4fvARB;
  }
  if (strcmp(name, "glUniformMatrix4x2dv") == 0) {
    if (__glintercept_fnptr_glUniformMatrix4x2dv == NULL) {
      __glintercept_fnptr_glUniformMatrix4x2dv = (__ctype_glUniformMatrix4x2dv) eglGetProcAddr("glUniformMatrix4x2dv");
    }
    if (__glintercept_fnptr_glUniformMatrix4x2dv == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix4x2dv;
  }
  if (strcmp(name, "glUniformMatrix4x2fv") == 0) {
    if (__glintercept_fnptr_glUniformMatrix4x2fv == NULL) {
      __glintercept_fnptr_glUniformMatrix4x2fv = (__ctype_glUniformMatrix4x2fv) eglGetProcAddr("glUniformMatrix4x2fv");
    }
    if (__glintercept_fnptr_glUniformMatrix4x2fv == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix4x2fv;
  }
  if (strcmp(name, "glUniformMatrix4x2fvNV") == 0) {
    if (__glintercept_fnptr_glUniformMatrix4x2fvNV == NULL) {
      __glintercept_fnptr_glUniformMatrix4x2fvNV = (__ctype_glUniformMatrix4x2fvNV) eglGetProcAddr("glUniformMatrix4x2fvNV");
    }
    if (__glintercept_fnptr_glUniformMatrix4x2fvNV == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix4x2fvNV;
  }
  if (strcmp(name, "glUniformMatrix4x3dv") == 0) {
    if (__glintercept_fnptr_glUniformMatrix4x3dv == NULL) {
      __glintercept_fnptr_glUniformMatrix4x3dv = (__ctype_glUniformMatrix4x3dv) eglGetProcAddr("glUniformMatrix4x3dv");
    }
    if (__glintercept_fnptr_glUniformMatrix4x3dv == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix4x3dv;
  }
  if (strcmp(name, "glUniformMatrix4x3fv") == 0) {
    if (__glintercept_fnptr_glUniformMatrix4x3fv == NULL) {
      __glintercept_fnptr_glUniformMatrix4x3fv = (__ctype_glUniformMatrix4x3fv) eglGetProcAddr("glUniformMatrix4x3fv");
    }
    if (__glintercept_fnptr_glUniformMatrix4x3fv == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix4x3fv;
  }
  if (strcmp(name, "glUniformMatrix4x3fvNV") == 0) {
    if (__glintercept_fnptr_glUniformMatrix4x3fvNV == NULL) {
      __glintercept_fnptr_glUniformMatrix4x3fvNV = (__ctype_glUniformMatrix4x3fvNV) eglGetProcAddr("glUniformMatrix4x3fvNV");
    }
    if (__glintercept_fnptr_glUniformMatrix4x3fvNV == NULL) return NULL;
    return (void*) __glintercept_glUniformMatrix4x3fvNV;
  }
  if (strcmp(name, "glUniformSubroutinesuiv") == 0) {
    if (__glintercept_fnptr_glUniformSubroutinesuiv == NULL) {
      __glintercept_fnptr_glUniformSubroutinesuiv = (__ctype_glUniformSubroutinesuiv) eglGetProcAddr("glUniformSubroutinesuiv");
    }
    if (__glintercept_fnptr_glUniformSubroutinesuiv == NULL) return NULL;
    return (void*) __glintercept_glUniformSubroutinesuiv;
  }
  if (strcmp(name, "glUniformui64NV") == 0) {
    if (__glintercept_fnptr_glUniformui64NV == NULL) {
      __glintercept_fnptr_glUniformui64NV = (__ctype_glUniformui64NV) eglGetProcAddr("glUniformui64NV");
    }
    if (__glintercept_fnptr_glUniformui64NV == NULL) return NULL;
    return (void*) __glintercept_glUniformui64NV;
  }
  if (strcmp(name, "glUniformui64vNV") == 0) {
    if (__glintercept_fnptr_glUniformui64vNV == NULL) {
      __glintercept_fnptr_glUniformui64vNV = (__ctype_glUniformui64vNV) eglGetProcAddr("glUniformui64vNV");
    }
    if (__glintercept_fnptr_glUniformui64vNV == NULL) return NULL;
    return (void*) __glintercept_glUniformui64vNV;
  }
  if (strcmp(name, "glUnlockArraysEXT") == 0) {
    if (__glintercept_fnptr_glUnlockArraysEXT == NULL) {
      __glintercept_fnptr_glUnlockArraysEXT = (__ctype_glUnlockArraysEXT) eglGetProcAddr("glUnlockArraysEXT");
    }
    if (__glintercept_fnptr_glUnlockArraysEXT == NULL) return NULL;
    return (void*) __glintercept_glUnlockArraysEXT;
  }
  if (strcmp(name, "glUnmapBuffer") == 0) {
    if (__glintercept_fnptr_glUnmapBuffer == NULL) {
      __glintercept_fnptr_glUnmapBuffer = (__ctype_glUnmapBuffer) eglGetProcAddr("glUnmapBuffer");
    }
    if (__glintercept_fnptr_glUnmapBuffer == NULL) return NULL;
    return (void*) __glintercept_glUnmapBuffer;
  }
  if (strcmp(name, "glUnmapBufferARB") == 0) {
    if (__glintercept_fnptr_glUnmapBufferARB == NULL) {
      __glintercept_fnptr_glUnmapBufferARB = (__ctype_glUnmapBufferARB) eglGetProcAddr("glUnmapBufferARB");
    }
    if (__glintercept_fnptr_glUnmapBufferARB == NULL) return NULL;
    return (void*) __glintercept_glUnmapBufferARB;
  }
  if (strcmp(name, "glUnmapBufferOES") == 0) {
    if (__glintercept_fnptr_glUnmapBufferOES == NULL) {
      __glintercept_fnptr_glUnmapBufferOES = (__ctype_glUnmapBufferOES) eglGetProcAddr("glUnmapBufferOES");
    }
    if (__glintercept_fnptr_glUnmapBufferOES == NULL) return NULL;
    return (void*) __glintercept_glUnmapBufferOES;
  }
  if (strcmp(name, "glUnmapNamedBuffer") == 0) {
    if (__glintercept_fnptr_glUnmapNamedBuffer == NULL) {
      __glintercept_fnptr_glUnmapNamedBuffer = (__ctype_glUnmapNamedBuffer) eglGetProcAddr("glUnmapNamedBuffer");
    }
    if (__glintercept_fnptr_glUnmapNamedBuffer == NULL) return NULL;
    return (void*) __glintercept_glUnmapNamedBuffer;
  }
  if (strcmp(name, "glUnmapNamedBufferEXT") == 0) {
    if (__glintercept_fnptr_glUnmapNamedBufferEXT == NULL) {
      __glintercept_fnptr_glUnmapNamedBufferEXT = (__ctype_glUnmapNamedBufferEXT) eglGetProcAddr("glUnmapNamedBufferEXT");
    }
    if (__glintercept_fnptr_glUnmapNamedBufferEXT == NULL) return NULL;
    return (void*) __glintercept_glUnmapNamedBufferEXT;
  }
  if (strcmp(name, "glUnmapObjectBufferATI") == 0) {
    if (__glintercept_fnptr_glUnmapObjectBufferATI == NULL) {
      __glintercept_fnptr_glUnmapObjectBufferATI = (__ctype_glUnmapObjectBufferATI) eglGetProcAddr("glUnmapObjectBufferATI");
    }
    if (__glintercept_fnptr_glUnmapObjectBufferATI == NULL) return NULL;
    return (void*) __glintercept_glUnmapObjectBufferATI;
  }
  if (strcmp(name, "glUnmapTexture2DINTEL") == 0) {
    if (__glintercept_fnptr_glUnmapTexture2DINTEL == NULL) {
      __glintercept_fnptr_glUnmapTexture2DINTEL = (__ctype_glUnmapTexture2DINTEL) eglGetProcAddr("glUnmapTexture2DINTEL");
    }
    if (__glintercept_fnptr_glUnmapTexture2DINTEL == NULL) return NULL;
    return (void*) __glintercept_glUnmapTexture2DINTEL;
  }
  if (strcmp(name, "glUpdateObjectBufferATI") == 0) {
    if (__glintercept_fnptr_glUpdateObjectBufferATI == NULL) {
      __glintercept_fnptr_glUpdateObjectBufferATI = (__ctype_glUpdateObjectBufferATI) eglGetProcAddr("glUpdateObjectBufferATI");
    }
    if (__glintercept_fnptr_glUpdateObjectBufferATI == NULL) return NULL;
    return (void*) __glintercept_glUpdateObjectBufferATI;
  }
  if (strcmp(name, "glUploadGpuMaskNVX") == 0) {
    if (__glintercept_fnptr_glUploadGpuMaskNVX == NULL) {
      __glintercept_fnptr_glUploadGpuMaskNVX = (__ctype_glUploadGpuMaskNVX) eglGetProcAddr("glUploadGpuMaskNVX");
    }
    if (__glintercept_fnptr_glUploadGpuMaskNVX == NULL) return NULL;
    return (void*) __glintercept_glUploadGpuMaskNVX;
  }
  if (strcmp(name, "glUseProgram") == 0) {
    if (__glintercept_fnptr_glUseProgram == NULL) {
      __glintercept_fnptr_glUseProgram = (__ctype_glUseProgram) eglGetProcAddr("glUseProgram");
    }
    if (__glintercept_fnptr_glUseProgram == NULL) return NULL;
    return (void*) __glintercept_glUseProgram;
  }
  if (strcmp(name, "glUseProgramObjectARB") == 0) {
    if (__glintercept_fnptr_glUseProgramObjectARB == NULL) {
      __glintercept_fnptr_glUseProgramObjectARB = (__ctype_glUseProgramObjectARB) eglGetProcAddr("glUseProgramObjectARB");
    }
    if (__glintercept_fnptr_glUseProgramObjectARB == NULL) return NULL;
    return (void*) __glintercept_glUseProgramObjectARB;
  }
  if (strcmp(name, "glUseProgramStages") == 0) {
    if (__glintercept_fnptr_glUseProgramStages == NULL) {
      __glintercept_fnptr_glUseProgramStages = (__ctype_glUseProgramStages) eglGetProcAddr("glUseProgramStages");
    }
    if (__glintercept_fnptr_glUseProgramStages == NULL) return NULL;
    return (void*) __glintercept_glUseProgramStages;
  }
  if (strcmp(name, "glUseProgramStagesEXT") == 0) {
    if (__glintercept_fnptr_glUseProgramStagesEXT == NULL) {
      __glintercept_fnptr_glUseProgramStagesEXT = (__ctype_glUseProgramStagesEXT) eglGetProcAddr("glUseProgramStagesEXT");
    }
    if (__glintercept_fnptr_glUseProgramStagesEXT == NULL) return NULL;
    return (void*) __glintercept_glUseProgramStagesEXT;
  }
  if (strcmp(name, "glUseShaderProgramEXT") == 0) {
    if (__glintercept_fnptr_glUseShaderProgramEXT == NULL) {
      __glintercept_fnptr_glUseShaderProgramEXT = (__ctype_glUseShaderProgramEXT) eglGetProcAddr("glUseShaderProgramEXT");
    }
    if (__glintercept_fnptr_glUseShaderProgramEXT == NULL) return NULL;
    return (void*) __glintercept_glUseShaderProgramEXT;
  }
  if (strcmp(name, "glVDPAUFiniNV") == 0) {
    if (__glintercept_fnptr_glVDPAUFiniNV == NULL) {
      __glintercept_fnptr_glVDPAUFiniNV = (__ctype_glVDPAUFiniNV) eglGetProcAddr("glVDPAUFiniNV");
    }
    if (__glintercept_fnptr_glVDPAUFiniNV == NULL) return NULL;
    return (void*) __glintercept_glVDPAUFiniNV;
  }
  if (strcmp(name, "glVDPAUGetSurfaceivNV") == 0) {
    if (__glintercept_fnptr_glVDPAUGetSurfaceivNV == NULL) {
      __glintercept_fnptr_glVDPAUGetSurfaceivNV = (__ctype_glVDPAUGetSurfaceivNV) eglGetProcAddr("glVDPAUGetSurfaceivNV");
    }
    if (__glintercept_fnptr_glVDPAUGetSurfaceivNV == NULL) return NULL;
    return (void*) __glintercept_glVDPAUGetSurfaceivNV;
  }
  if (strcmp(name, "glVDPAUInitNV") == 0) {
    if (__glintercept_fnptr_glVDPAUInitNV == NULL) {
      __glintercept_fnptr_glVDPAUInitNV = (__ctype_glVDPAUInitNV) eglGetProcAddr("glVDPAUInitNV");
    }
    if (__glintercept_fnptr_glVDPAUInitNV == NULL) return NULL;
    return (void*) __glintercept_glVDPAUInitNV;
  }
  if (strcmp(name, "glVDPAUIsSurfaceNV") == 0) {
    if (__glintercept_fnptr_glVDPAUIsSurfaceNV == NULL) {
      __glintercept_fnptr_glVDPAUIsSurfaceNV = (__ctype_glVDPAUIsSurfaceNV) eglGetProcAddr("glVDPAUIsSurfaceNV");
    }
    if (__glintercept_fnptr_glVDPAUIsSurfaceNV == NULL) return NULL;
    return (void*) __glintercept_glVDPAUIsSurfaceNV;
  }
  if (strcmp(name, "glVDPAUMapSurfacesNV") == 0) {
    if (__glintercept_fnptr_glVDPAUMapSurfacesNV == NULL) {
      __glintercept_fnptr_glVDPAUMapSurfacesNV = (__ctype_glVDPAUMapSurfacesNV) eglGetProcAddr("glVDPAUMapSurfacesNV");
    }
    if (__glintercept_fnptr_glVDPAUMapSurfacesNV == NULL) return NULL;
    return (void*) __glintercept_glVDPAUMapSurfacesNV;
  }
  if (strcmp(name, "glVDPAURegisterOutputSurfaceNV") == 0) {
    if (__glintercept_fnptr_glVDPAURegisterOutputSurfaceNV == NULL) {
      __glintercept_fnptr_glVDPAURegisterOutputSurfaceNV = (__ctype_glVDPAURegisterOutputSurfaceNV) eglGetProcAddr("glVDPAURegisterOutputSurfaceNV");
    }
    if (__glintercept_fnptr_glVDPAURegisterOutputSurfaceNV == NULL) return NULL;
    return (void*) __glintercept_glVDPAURegisterOutputSurfaceNV;
  }
  if (strcmp(name, "glVDPAURegisterVideoSurfaceNV") == 0) {
    if (__glintercept_fnptr_glVDPAURegisterVideoSurfaceNV == NULL) {
      __glintercept_fnptr_glVDPAURegisterVideoSurfaceNV = (__ctype_glVDPAURegisterVideoSurfaceNV) eglGetProcAddr("glVDPAURegisterVideoSurfaceNV");
    }
    if (__glintercept_fnptr_glVDPAURegisterVideoSurfaceNV == NULL) return NULL;
    return (void*) __glintercept_glVDPAURegisterVideoSurfaceNV;
  }
  if (strcmp(name, "glVDPAURegisterVideoSurfaceWithPictureStructureNV") == 0) {
    if (__glintercept_fnptr_glVDPAURegisterVideoSurfaceWithPictureStructureNV == NULL) {
      __glintercept_fnptr_glVDPAURegisterVideoSurfaceWithPictureStructureNV = (__ctype_glVDPAURegisterVideoSurfaceWithPictureStructureNV) eglGetProcAddr("glVDPAURegisterVideoSurfaceWithPictureStructureNV");
    }
    if (__glintercept_fnptr_glVDPAURegisterVideoSurfaceWithPictureStructureNV == NULL) return NULL;
    return (void*) __glintercept_glVDPAURegisterVideoSurfaceWithPictureStructureNV;
  }
  if (strcmp(name, "glVDPAUSurfaceAccessNV") == 0) {
    if (__glintercept_fnptr_glVDPAUSurfaceAccessNV == NULL) {
      __glintercept_fnptr_glVDPAUSurfaceAccessNV = (__ctype_glVDPAUSurfaceAccessNV) eglGetProcAddr("glVDPAUSurfaceAccessNV");
    }
    if (__glintercept_fnptr_glVDPAUSurfaceAccessNV == NULL) return NULL;
    return (void*) __glintercept_glVDPAUSurfaceAccessNV;
  }
  if (strcmp(name, "glVDPAUUnmapSurfacesNV") == 0) {
    if (__glintercept_fnptr_glVDPAUUnmapSurfacesNV == NULL) {
      __glintercept_fnptr_glVDPAUUnmapSurfacesNV = (__ctype_glVDPAUUnmapSurfacesNV) eglGetProcAddr("glVDPAUUnmapSurfacesNV");
    }
    if (__glintercept_fnptr_glVDPAUUnmapSurfacesNV == NULL) return NULL;
    return (void*) __glintercept_glVDPAUUnmapSurfacesNV;
  }
  if (strcmp(name, "glVDPAUUnregisterSurfaceNV") == 0) {
    if (__glintercept_fnptr_glVDPAUUnregisterSurfaceNV == NULL) {
      __glintercept_fnptr_glVDPAUUnregisterSurfaceNV = (__ctype_glVDPAUUnregisterSurfaceNV) eglGetProcAddr("glVDPAUUnregisterSurfaceNV");
    }
    if (__glintercept_fnptr_glVDPAUUnregisterSurfaceNV == NULL) return NULL;
    return (void*) __glintercept_glVDPAUUnregisterSurfaceNV;
  }
  if (strcmp(name, "glValidateProgram") == 0) {
    if (__glintercept_fnptr_glValidateProgram == NULL) {
      __glintercept_fnptr_glValidateProgram = (__ctype_glValidateProgram) eglGetProcAddr("glValidateProgram");
    }
    if (__glintercept_fnptr_glValidateProgram == NULL) return NULL;
    return (void*) __glintercept_glValidateProgram;
  }
  if (strcmp(name, "glValidateProgramARB") == 0) {
    if (__glintercept_fnptr_glValidateProgramARB == NULL) {
      __glintercept_fnptr_glValidateProgramARB = (__ctype_glValidateProgramARB) eglGetProcAddr("glValidateProgramARB");
    }
    if (__glintercept_fnptr_glValidateProgramARB == NULL) return NULL;
    return (void*) __glintercept_glValidateProgramARB;
  }
  if (strcmp(name, "glValidateProgramPipeline") == 0) {
    if (__glintercept_fnptr_glValidateProgramPipeline == NULL) {
      __glintercept_fnptr_glValidateProgramPipeline = (__ctype_glValidateProgramPipeline) eglGetProcAddr("glValidateProgramPipeline");
    }
    if (__glintercept_fnptr_glValidateProgramPipeline == NULL) return NULL;
    return (void*) __glintercept_glValidateProgramPipeline;
  }
  if (strcmp(name, "glValidateProgramPipelineEXT") == 0) {
    if (__glintercept_fnptr_glValidateProgramPipelineEXT == NULL) {
      __glintercept_fnptr_glValidateProgramPipelineEXT = (__ctype_glValidateProgramPipelineEXT) eglGetProcAddr("glValidateProgramPipelineEXT");
    }
    if (__glintercept_fnptr_glValidateProgramPipelineEXT == NULL) return NULL;
    return (void*) __glintercept_glValidateProgramPipelineEXT;
  }
  if (strcmp(name, "glVariantArrayObjectATI") == 0) {
    if (__glintercept_fnptr_glVariantArrayObjectATI == NULL) {
      __glintercept_fnptr_glVariantArrayObjectATI = (__ctype_glVariantArrayObjectATI) eglGetProcAddr("glVariantArrayObjectATI");
    }
    if (__glintercept_fnptr_glVariantArrayObjectATI == NULL) return NULL;
    return (void*) __glintercept_glVariantArrayObjectATI;
  }
  if (strcmp(name, "glVariantPointerEXT") == 0) {
    if (__glintercept_fnptr_glVariantPointerEXT == NULL) {
      __glintercept_fnptr_glVariantPointerEXT = (__ctype_glVariantPointerEXT) eglGetProcAddr("glVariantPointerEXT");
    }
    if (__glintercept_fnptr_glVariantPointerEXT == NULL) return NULL;
    return (void*) __glintercept_glVariantPointerEXT;
  }
  if (strcmp(name, "glVariantbvEXT") == 0) {
    if (__glintercept_fnptr_glVariantbvEXT == NULL) {
      __glintercept_fnptr_glVariantbvEXT = (__ctype_glVariantbvEXT) eglGetProcAddr("glVariantbvEXT");
    }
    if (__glintercept_fnptr_glVariantbvEXT == NULL) return NULL;
    return (void*) __glintercept_glVariantbvEXT;
  }
  if (strcmp(name, "glVariantdvEXT") == 0) {
    if (__glintercept_fnptr_glVariantdvEXT == NULL) {
      __glintercept_fnptr_glVariantdvEXT = (__ctype_glVariantdvEXT) eglGetProcAddr("glVariantdvEXT");
    }
    if (__glintercept_fnptr_glVariantdvEXT == NULL) return NULL;
    return (void*) __glintercept_glVariantdvEXT;
  }
  if (strcmp(name, "glVariantfvEXT") == 0) {
    if (__glintercept_fnptr_glVariantfvEXT == NULL) {
      __glintercept_fnptr_glVariantfvEXT = (__ctype_glVariantfvEXT) eglGetProcAddr("glVariantfvEXT");
    }
    if (__glintercept_fnptr_glVariantfvEXT == NULL) return NULL;
    return (void*) __glintercept_glVariantfvEXT;
  }
  if (strcmp(name, "glVariantivEXT") == 0) {
    if (__glintercept_fnptr_glVariantivEXT == NULL) {
      __glintercept_fnptr_glVariantivEXT = (__ctype_glVariantivEXT) eglGetProcAddr("glVariantivEXT");
    }
    if (__glintercept_fnptr_glVariantivEXT == NULL) return NULL;
    return (void*) __glintercept_glVariantivEXT;
  }
  if (strcmp(name, "glVariantsvEXT") == 0) {
    if (__glintercept_fnptr_glVariantsvEXT == NULL) {
      __glintercept_fnptr_glVariantsvEXT = (__ctype_glVariantsvEXT) eglGetProcAddr("glVariantsvEXT");
    }
    if (__glintercept_fnptr_glVariantsvEXT == NULL) return NULL;
    return (void*) __glintercept_glVariantsvEXT;
  }
  if (strcmp(name, "glVariantubvEXT") == 0) {
    if (__glintercept_fnptr_glVariantubvEXT == NULL) {
      __glintercept_fnptr_glVariantubvEXT = (__ctype_glVariantubvEXT) eglGetProcAddr("glVariantubvEXT");
    }
    if (__glintercept_fnptr_glVariantubvEXT == NULL) return NULL;
    return (void*) __glintercept_glVariantubvEXT;
  }
  if (strcmp(name, "glVariantuivEXT") == 0) {
    if (__glintercept_fnptr_glVariantuivEXT == NULL) {
      __glintercept_fnptr_glVariantuivEXT = (__ctype_glVariantuivEXT) eglGetProcAddr("glVariantuivEXT");
    }
    if (__glintercept_fnptr_glVariantuivEXT == NULL) return NULL;
    return (void*) __glintercept_glVariantuivEXT;
  }
  if (strcmp(name, "glVariantusvEXT") == 0) {
    if (__glintercept_fnptr_glVariantusvEXT == NULL) {
      __glintercept_fnptr_glVariantusvEXT = (__ctype_glVariantusvEXT) eglGetProcAddr("glVariantusvEXT");
    }
    if (__glintercept_fnptr_glVariantusvEXT == NULL) return NULL;
    return (void*) __glintercept_glVariantusvEXT;
  }
  if (strcmp(name, "glVertex2bOES") == 0) {
    if (__glintercept_fnptr_glVertex2bOES == NULL) {
      __glintercept_fnptr_glVertex2bOES = (__ctype_glVertex2bOES) eglGetProcAddr("glVertex2bOES");
    }
    if (__glintercept_fnptr_glVertex2bOES == NULL) return NULL;
    return (void*) __glintercept_glVertex2bOES;
  }
  if (strcmp(name, "glVertex2bvOES") == 0) {
    if (__glintercept_fnptr_glVertex2bvOES == NULL) {
      __glintercept_fnptr_glVertex2bvOES = (__ctype_glVertex2bvOES) eglGetProcAddr("glVertex2bvOES");
    }
    if (__glintercept_fnptr_glVertex2bvOES == NULL) return NULL;
    return (void*) __glintercept_glVertex2bvOES;
  }
  if (strcmp(name, "glVertex2d") == 0) {
    if (__glintercept_fnptr_glVertex2d == NULL) {
      __glintercept_fnptr_glVertex2d = (__ctype_glVertex2d) eglGetProcAddr("glVertex2d");
    }
    if (__glintercept_fnptr_glVertex2d == NULL) return NULL;
    return (void*) __glintercept_glVertex2d;
  }
  if (strcmp(name, "glVertex2dv") == 0) {
    if (__glintercept_fnptr_glVertex2dv == NULL) {
      __glintercept_fnptr_glVertex2dv = (__ctype_glVertex2dv) eglGetProcAddr("glVertex2dv");
    }
    if (__glintercept_fnptr_glVertex2dv == NULL) return NULL;
    return (void*) __glintercept_glVertex2dv;
  }
  if (strcmp(name, "glVertex2f") == 0) {
    if (__glintercept_fnptr_glVertex2f == NULL) {
      __glintercept_fnptr_glVertex2f = (__ctype_glVertex2f) eglGetProcAddr("glVertex2f");
    }
    if (__glintercept_fnptr_glVertex2f == NULL) return NULL;
    return (void*) __glintercept_glVertex2f;
  }
  if (strcmp(name, "glVertex2fv") == 0) {
    if (__glintercept_fnptr_glVertex2fv == NULL) {
      __glintercept_fnptr_glVertex2fv = (__ctype_glVertex2fv) eglGetProcAddr("glVertex2fv");
    }
    if (__glintercept_fnptr_glVertex2fv == NULL) return NULL;
    return (void*) __glintercept_glVertex2fv;
  }
  if (strcmp(name, "glVertex2hNV") == 0) {
    if (__glintercept_fnptr_glVertex2hNV == NULL) {
      __glintercept_fnptr_glVertex2hNV = (__ctype_glVertex2hNV) eglGetProcAddr("glVertex2hNV");
    }
    if (__glintercept_fnptr_glVertex2hNV == NULL) return NULL;
    return (void*) __glintercept_glVertex2hNV;
  }
  if (strcmp(name, "glVertex2hvNV") == 0) {
    if (__glintercept_fnptr_glVertex2hvNV == NULL) {
      __glintercept_fnptr_glVertex2hvNV = (__ctype_glVertex2hvNV) eglGetProcAddr("glVertex2hvNV");
    }
    if (__glintercept_fnptr_glVertex2hvNV == NULL) return NULL;
    return (void*) __glintercept_glVertex2hvNV;
  }
  if (strcmp(name, "glVertex2i") == 0) {
    if (__glintercept_fnptr_glVertex2i == NULL) {
      __glintercept_fnptr_glVertex2i = (__ctype_glVertex2i) eglGetProcAddr("glVertex2i");
    }
    if (__glintercept_fnptr_glVertex2i == NULL) return NULL;
    return (void*) __glintercept_glVertex2i;
  }
  if (strcmp(name, "glVertex2iv") == 0) {
    if (__glintercept_fnptr_glVertex2iv == NULL) {
      __glintercept_fnptr_glVertex2iv = (__ctype_glVertex2iv) eglGetProcAddr("glVertex2iv");
    }
    if (__glintercept_fnptr_glVertex2iv == NULL) return NULL;
    return (void*) __glintercept_glVertex2iv;
  }
  if (strcmp(name, "glVertex2s") == 0) {
    if (__glintercept_fnptr_glVertex2s == NULL) {
      __glintercept_fnptr_glVertex2s = (__ctype_glVertex2s) eglGetProcAddr("glVertex2s");
    }
    if (__glintercept_fnptr_glVertex2s == NULL) return NULL;
    return (void*) __glintercept_glVertex2s;
  }
  if (strcmp(name, "glVertex2sv") == 0) {
    if (__glintercept_fnptr_glVertex2sv == NULL) {
      __glintercept_fnptr_glVertex2sv = (__ctype_glVertex2sv) eglGetProcAddr("glVertex2sv");
    }
    if (__glintercept_fnptr_glVertex2sv == NULL) return NULL;
    return (void*) __glintercept_glVertex2sv;
  }
  if (strcmp(name, "glVertex2xOES") == 0) {
    if (__glintercept_fnptr_glVertex2xOES == NULL) {
      __glintercept_fnptr_glVertex2xOES = (__ctype_glVertex2xOES) eglGetProcAddr("glVertex2xOES");
    }
    if (__glintercept_fnptr_glVertex2xOES == NULL) return NULL;
    return (void*) __glintercept_glVertex2xOES;
  }
  if (strcmp(name, "glVertex2xvOES") == 0) {
    if (__glintercept_fnptr_glVertex2xvOES == NULL) {
      __glintercept_fnptr_glVertex2xvOES = (__ctype_glVertex2xvOES) eglGetProcAddr("glVertex2xvOES");
    }
    if (__glintercept_fnptr_glVertex2xvOES == NULL) return NULL;
    return (void*) __glintercept_glVertex2xvOES;
  }
  if (strcmp(name, "glVertex3bOES") == 0) {
    if (__glintercept_fnptr_glVertex3bOES == NULL) {
      __glintercept_fnptr_glVertex3bOES = (__ctype_glVertex3bOES) eglGetProcAddr("glVertex3bOES");
    }
    if (__glintercept_fnptr_glVertex3bOES == NULL) return NULL;
    return (void*) __glintercept_glVertex3bOES;
  }
  if (strcmp(name, "glVertex3bvOES") == 0) {
    if (__glintercept_fnptr_glVertex3bvOES == NULL) {
      __glintercept_fnptr_glVertex3bvOES = (__ctype_glVertex3bvOES) eglGetProcAddr("glVertex3bvOES");
    }
    if (__glintercept_fnptr_glVertex3bvOES == NULL) return NULL;
    return (void*) __glintercept_glVertex3bvOES;
  }
  if (strcmp(name, "glVertex3d") == 0) {
    if (__glintercept_fnptr_glVertex3d == NULL) {
      __glintercept_fnptr_glVertex3d = (__ctype_glVertex3d) eglGetProcAddr("glVertex3d");
    }
    if (__glintercept_fnptr_glVertex3d == NULL) return NULL;
    return (void*) __glintercept_glVertex3d;
  }
  if (strcmp(name, "glVertex3dv") == 0) {
    if (__glintercept_fnptr_glVertex3dv == NULL) {
      __glintercept_fnptr_glVertex3dv = (__ctype_glVertex3dv) eglGetProcAddr("glVertex3dv");
    }
    if (__glintercept_fnptr_glVertex3dv == NULL) return NULL;
    return (void*) __glintercept_glVertex3dv;
  }
  if (strcmp(name, "glVertex3f") == 0) {
    if (__glintercept_fnptr_glVertex3f == NULL) {
      __glintercept_fnptr_glVertex3f = (__ctype_glVertex3f) eglGetProcAddr("glVertex3f");
    }
    if (__glintercept_fnptr_glVertex3f == NULL) return NULL;
    return (void*) __glintercept_glVertex3f;
  }
  if (strcmp(name, "glVertex3fv") == 0) {
    if (__glintercept_fnptr_glVertex3fv == NULL) {
      __glintercept_fnptr_glVertex3fv = (__ctype_glVertex3fv) eglGetProcAddr("glVertex3fv");
    }
    if (__glintercept_fnptr_glVertex3fv == NULL) return NULL;
    return (void*) __glintercept_glVertex3fv;
  }
  if (strcmp(name, "glVertex3hNV") == 0) {
    if (__glintercept_fnptr_glVertex3hNV == NULL) {
      __glintercept_fnptr_glVertex3hNV = (__ctype_glVertex3hNV) eglGetProcAddr("glVertex3hNV");
    }
    if (__glintercept_fnptr_glVertex3hNV == NULL) return NULL;
    return (void*) __glintercept_glVertex3hNV;
  }
  if (strcmp(name, "glVertex3hvNV") == 0) {
    if (__glintercept_fnptr_glVertex3hvNV == NULL) {
      __glintercept_fnptr_glVertex3hvNV = (__ctype_glVertex3hvNV) eglGetProcAddr("glVertex3hvNV");
    }
    if (__glintercept_fnptr_glVertex3hvNV == NULL) return NULL;
    return (void*) __glintercept_glVertex3hvNV;
  }
  if (strcmp(name, "glVertex3i") == 0) {
    if (__glintercept_fnptr_glVertex3i == NULL) {
      __glintercept_fnptr_glVertex3i = (__ctype_glVertex3i) eglGetProcAddr("glVertex3i");
    }
    if (__glintercept_fnptr_glVertex3i == NULL) return NULL;
    return (void*) __glintercept_glVertex3i;
  }
  if (strcmp(name, "glVertex3iv") == 0) {
    if (__glintercept_fnptr_glVertex3iv == NULL) {
      __glintercept_fnptr_glVertex3iv = (__ctype_glVertex3iv) eglGetProcAddr("glVertex3iv");
    }
    if (__glintercept_fnptr_glVertex3iv == NULL) return NULL;
    return (void*) __glintercept_glVertex3iv;
  }
  if (strcmp(name, "glVertex3s") == 0) {
    if (__glintercept_fnptr_glVertex3s == NULL) {
      __glintercept_fnptr_glVertex3s = (__ctype_glVertex3s) eglGetProcAddr("glVertex3s");
    }
    if (__glintercept_fnptr_glVertex3s == NULL) return NULL;
    return (void*) __glintercept_glVertex3s;
  }
  if (strcmp(name, "glVertex3sv") == 0) {
    if (__glintercept_fnptr_glVertex3sv == NULL) {
      __glintercept_fnptr_glVertex3sv = (__ctype_glVertex3sv) eglGetProcAddr("glVertex3sv");
    }
    if (__glintercept_fnptr_glVertex3sv == NULL) return NULL;
    return (void*) __glintercept_glVertex3sv;
  }
  if (strcmp(name, "glVertex3xOES") == 0) {
    if (__glintercept_fnptr_glVertex3xOES == NULL) {
      __glintercept_fnptr_glVertex3xOES = (__ctype_glVertex3xOES) eglGetProcAddr("glVertex3xOES");
    }
    if (__glintercept_fnptr_glVertex3xOES == NULL) return NULL;
    return (void*) __glintercept_glVertex3xOES;
  }
  if (strcmp(name, "glVertex3xvOES") == 0) {
    if (__glintercept_fnptr_glVertex3xvOES == NULL) {
      __glintercept_fnptr_glVertex3xvOES = (__ctype_glVertex3xvOES) eglGetProcAddr("glVertex3xvOES");
    }
    if (__glintercept_fnptr_glVertex3xvOES == NULL) return NULL;
    return (void*) __glintercept_glVertex3xvOES;
  }
  if (strcmp(name, "glVertex4bOES") == 0) {
    if (__glintercept_fnptr_glVertex4bOES == NULL) {
      __glintercept_fnptr_glVertex4bOES = (__ctype_glVertex4bOES) eglGetProcAddr("glVertex4bOES");
    }
    if (__glintercept_fnptr_glVertex4bOES == NULL) return NULL;
    return (void*) __glintercept_glVertex4bOES;
  }
  if (strcmp(name, "glVertex4bvOES") == 0) {
    if (__glintercept_fnptr_glVertex4bvOES == NULL) {
      __glintercept_fnptr_glVertex4bvOES = (__ctype_glVertex4bvOES) eglGetProcAddr("glVertex4bvOES");
    }
    if (__glintercept_fnptr_glVertex4bvOES == NULL) return NULL;
    return (void*) __glintercept_glVertex4bvOES;
  }
  if (strcmp(name, "glVertex4d") == 0) {
    if (__glintercept_fnptr_glVertex4d == NULL) {
      __glintercept_fnptr_glVertex4d = (__ctype_glVertex4d) eglGetProcAddr("glVertex4d");
    }
    if (__glintercept_fnptr_glVertex4d == NULL) return NULL;
    return (void*) __glintercept_glVertex4d;
  }
  if (strcmp(name, "glVertex4dv") == 0) {
    if (__glintercept_fnptr_glVertex4dv == NULL) {
      __glintercept_fnptr_glVertex4dv = (__ctype_glVertex4dv) eglGetProcAddr("glVertex4dv");
    }
    if (__glintercept_fnptr_glVertex4dv == NULL) return NULL;
    return (void*) __glintercept_glVertex4dv;
  }
  if (strcmp(name, "glVertex4f") == 0) {
    if (__glintercept_fnptr_glVertex4f == NULL) {
      __glintercept_fnptr_glVertex4f = (__ctype_glVertex4f) eglGetProcAddr("glVertex4f");
    }
    if (__glintercept_fnptr_glVertex4f == NULL) return NULL;
    return (void*) __glintercept_glVertex4f;
  }
  if (strcmp(name, "glVertex4fv") == 0) {
    if (__glintercept_fnptr_glVertex4fv == NULL) {
      __glintercept_fnptr_glVertex4fv = (__ctype_glVertex4fv) eglGetProcAddr("glVertex4fv");
    }
    if (__glintercept_fnptr_glVertex4fv == NULL) return NULL;
    return (void*) __glintercept_glVertex4fv;
  }
  if (strcmp(name, "glVertex4hNV") == 0) {
    if (__glintercept_fnptr_glVertex4hNV == NULL) {
      __glintercept_fnptr_glVertex4hNV = (__ctype_glVertex4hNV) eglGetProcAddr("glVertex4hNV");
    }
    if (__glintercept_fnptr_glVertex4hNV == NULL) return NULL;
    return (void*) __glintercept_glVertex4hNV;
  }
  if (strcmp(name, "glVertex4hvNV") == 0) {
    if (__glintercept_fnptr_glVertex4hvNV == NULL) {
      __glintercept_fnptr_glVertex4hvNV = (__ctype_glVertex4hvNV) eglGetProcAddr("glVertex4hvNV");
    }
    if (__glintercept_fnptr_glVertex4hvNV == NULL) return NULL;
    return (void*) __glintercept_glVertex4hvNV;
  }
  if (strcmp(name, "glVertex4i") == 0) {
    if (__glintercept_fnptr_glVertex4i == NULL) {
      __glintercept_fnptr_glVertex4i = (__ctype_glVertex4i) eglGetProcAddr("glVertex4i");
    }
    if (__glintercept_fnptr_glVertex4i == NULL) return NULL;
    return (void*) __glintercept_glVertex4i;
  }
  if (strcmp(name, "glVertex4iv") == 0) {
    if (__glintercept_fnptr_glVertex4iv == NULL) {
      __glintercept_fnptr_glVertex4iv = (__ctype_glVertex4iv) eglGetProcAddr("glVertex4iv");
    }
    if (__glintercept_fnptr_glVertex4iv == NULL) return NULL;
    return (void*) __glintercept_glVertex4iv;
  }
  if (strcmp(name, "glVertex4s") == 0) {
    if (__glintercept_fnptr_glVertex4s == NULL) {
      __glintercept_fnptr_glVertex4s = (__ctype_glVertex4s) eglGetProcAddr("glVertex4s");
    }
    if (__glintercept_fnptr_glVertex4s == NULL) return NULL;
    return (void*) __glintercept_glVertex4s;
  }
  if (strcmp(name, "glVertex4sv") == 0) {
    if (__glintercept_fnptr_glVertex4sv == NULL) {
      __glintercept_fnptr_glVertex4sv = (__ctype_glVertex4sv) eglGetProcAddr("glVertex4sv");
    }
    if (__glintercept_fnptr_glVertex4sv == NULL) return NULL;
    return (void*) __glintercept_glVertex4sv;
  }
  if (strcmp(name, "glVertex4xOES") == 0) {
    if (__glintercept_fnptr_glVertex4xOES == NULL) {
      __glintercept_fnptr_glVertex4xOES = (__ctype_glVertex4xOES) eglGetProcAddr("glVertex4xOES");
    }
    if (__glintercept_fnptr_glVertex4xOES == NULL) return NULL;
    return (void*) __glintercept_glVertex4xOES;
  }
  if (strcmp(name, "glVertex4xvOES") == 0) {
    if (__glintercept_fnptr_glVertex4xvOES == NULL) {
      __glintercept_fnptr_glVertex4xvOES = (__ctype_glVertex4xvOES) eglGetProcAddr("glVertex4xvOES");
    }
    if (__glintercept_fnptr_glVertex4xvOES == NULL) return NULL;
    return (void*) __glintercept_glVertex4xvOES;
  }
  if (strcmp(name, "glVertexArrayAttribBinding") == 0) {
    if (__glintercept_fnptr_glVertexArrayAttribBinding == NULL) {
      __glintercept_fnptr_glVertexArrayAttribBinding = (__ctype_glVertexArrayAttribBinding) eglGetProcAddr("glVertexArrayAttribBinding");
    }
    if (__glintercept_fnptr_glVertexArrayAttribBinding == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayAttribBinding;
  }
  if (strcmp(name, "glVertexArrayAttribFormat") == 0) {
    if (__glintercept_fnptr_glVertexArrayAttribFormat == NULL) {
      __glintercept_fnptr_glVertexArrayAttribFormat = (__ctype_glVertexArrayAttribFormat) eglGetProcAddr("glVertexArrayAttribFormat");
    }
    if (__glintercept_fnptr_glVertexArrayAttribFormat == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayAttribFormat;
  }
  if (strcmp(name, "glVertexArrayAttribIFormat") == 0) {
    if (__glintercept_fnptr_glVertexArrayAttribIFormat == NULL) {
      __glintercept_fnptr_glVertexArrayAttribIFormat = (__ctype_glVertexArrayAttribIFormat) eglGetProcAddr("glVertexArrayAttribIFormat");
    }
    if (__glintercept_fnptr_glVertexArrayAttribIFormat == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayAttribIFormat;
  }
  if (strcmp(name, "glVertexArrayAttribLFormat") == 0) {
    if (__glintercept_fnptr_glVertexArrayAttribLFormat == NULL) {
      __glintercept_fnptr_glVertexArrayAttribLFormat = (__ctype_glVertexArrayAttribLFormat) eglGetProcAddr("glVertexArrayAttribLFormat");
    }
    if (__glintercept_fnptr_glVertexArrayAttribLFormat == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayAttribLFormat;
  }
  if (strcmp(name, "glVertexArrayBindVertexBufferEXT") == 0) {
    if (__glintercept_fnptr_glVertexArrayBindVertexBufferEXT == NULL) {
      __glintercept_fnptr_glVertexArrayBindVertexBufferEXT = (__ctype_glVertexArrayBindVertexBufferEXT) eglGetProcAddr("glVertexArrayBindVertexBufferEXT");
    }
    if (__glintercept_fnptr_glVertexArrayBindVertexBufferEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayBindVertexBufferEXT;
  }
  if (strcmp(name, "glVertexArrayBindingDivisor") == 0) {
    if (__glintercept_fnptr_glVertexArrayBindingDivisor == NULL) {
      __glintercept_fnptr_glVertexArrayBindingDivisor = (__ctype_glVertexArrayBindingDivisor) eglGetProcAddr("glVertexArrayBindingDivisor");
    }
    if (__glintercept_fnptr_glVertexArrayBindingDivisor == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayBindingDivisor;
  }
  if (strcmp(name, "glVertexArrayColorOffsetEXT") == 0) {
    if (__glintercept_fnptr_glVertexArrayColorOffsetEXT == NULL) {
      __glintercept_fnptr_glVertexArrayColorOffsetEXT = (__ctype_glVertexArrayColorOffsetEXT) eglGetProcAddr("glVertexArrayColorOffsetEXT");
    }
    if (__glintercept_fnptr_glVertexArrayColorOffsetEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayColorOffsetEXT;
  }
  if (strcmp(name, "glVertexArrayEdgeFlagOffsetEXT") == 0) {
    if (__glintercept_fnptr_glVertexArrayEdgeFlagOffsetEXT == NULL) {
      __glintercept_fnptr_glVertexArrayEdgeFlagOffsetEXT = (__ctype_glVertexArrayEdgeFlagOffsetEXT) eglGetProcAddr("glVertexArrayEdgeFlagOffsetEXT");
    }
    if (__glintercept_fnptr_glVertexArrayEdgeFlagOffsetEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayEdgeFlagOffsetEXT;
  }
  if (strcmp(name, "glVertexArrayElementBuffer") == 0) {
    if (__glintercept_fnptr_glVertexArrayElementBuffer == NULL) {
      __glintercept_fnptr_glVertexArrayElementBuffer = (__ctype_glVertexArrayElementBuffer) eglGetProcAddr("glVertexArrayElementBuffer");
    }
    if (__glintercept_fnptr_glVertexArrayElementBuffer == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayElementBuffer;
  }
  if (strcmp(name, "glVertexArrayFogCoordOffsetEXT") == 0) {
    if (__glintercept_fnptr_glVertexArrayFogCoordOffsetEXT == NULL) {
      __glintercept_fnptr_glVertexArrayFogCoordOffsetEXT = (__ctype_glVertexArrayFogCoordOffsetEXT) eglGetProcAddr("glVertexArrayFogCoordOffsetEXT");
    }
    if (__glintercept_fnptr_glVertexArrayFogCoordOffsetEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayFogCoordOffsetEXT;
  }
  if (strcmp(name, "glVertexArrayIndexOffsetEXT") == 0) {
    if (__glintercept_fnptr_glVertexArrayIndexOffsetEXT == NULL) {
      __glintercept_fnptr_glVertexArrayIndexOffsetEXT = (__ctype_glVertexArrayIndexOffsetEXT) eglGetProcAddr("glVertexArrayIndexOffsetEXT");
    }
    if (__glintercept_fnptr_glVertexArrayIndexOffsetEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayIndexOffsetEXT;
  }
  if (strcmp(name, "glVertexArrayMultiTexCoordOffsetEXT") == 0) {
    if (__glintercept_fnptr_glVertexArrayMultiTexCoordOffsetEXT == NULL) {
      __glintercept_fnptr_glVertexArrayMultiTexCoordOffsetEXT = (__ctype_glVertexArrayMultiTexCoordOffsetEXT) eglGetProcAddr("glVertexArrayMultiTexCoordOffsetEXT");
    }
    if (__glintercept_fnptr_glVertexArrayMultiTexCoordOffsetEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayMultiTexCoordOffsetEXT;
  }
  if (strcmp(name, "glVertexArrayNormalOffsetEXT") == 0) {
    if (__glintercept_fnptr_glVertexArrayNormalOffsetEXT == NULL) {
      __glintercept_fnptr_glVertexArrayNormalOffsetEXT = (__ctype_glVertexArrayNormalOffsetEXT) eglGetProcAddr("glVertexArrayNormalOffsetEXT");
    }
    if (__glintercept_fnptr_glVertexArrayNormalOffsetEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayNormalOffsetEXT;
  }
  if (strcmp(name, "glVertexArrayParameteriAPPLE") == 0) {
    if (__glintercept_fnptr_glVertexArrayParameteriAPPLE == NULL) {
      __glintercept_fnptr_glVertexArrayParameteriAPPLE = (__ctype_glVertexArrayParameteriAPPLE) eglGetProcAddr("glVertexArrayParameteriAPPLE");
    }
    if (__glintercept_fnptr_glVertexArrayParameteriAPPLE == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayParameteriAPPLE;
  }
  if (strcmp(name, "glVertexArrayRangeAPPLE") == 0) {
    if (__glintercept_fnptr_glVertexArrayRangeAPPLE == NULL) {
      __glintercept_fnptr_glVertexArrayRangeAPPLE = (__ctype_glVertexArrayRangeAPPLE) eglGetProcAddr("glVertexArrayRangeAPPLE");
    }
    if (__glintercept_fnptr_glVertexArrayRangeAPPLE == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayRangeAPPLE;
  }
  if (strcmp(name, "glVertexArrayRangeNV") == 0) {
    if (__glintercept_fnptr_glVertexArrayRangeNV == NULL) {
      __glintercept_fnptr_glVertexArrayRangeNV = (__ctype_glVertexArrayRangeNV) eglGetProcAddr("glVertexArrayRangeNV");
    }
    if (__glintercept_fnptr_glVertexArrayRangeNV == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayRangeNV;
  }
  if (strcmp(name, "glVertexArraySecondaryColorOffsetEXT") == 0) {
    if (__glintercept_fnptr_glVertexArraySecondaryColorOffsetEXT == NULL) {
      __glintercept_fnptr_glVertexArraySecondaryColorOffsetEXT = (__ctype_glVertexArraySecondaryColorOffsetEXT) eglGetProcAddr("glVertexArraySecondaryColorOffsetEXT");
    }
    if (__glintercept_fnptr_glVertexArraySecondaryColorOffsetEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexArraySecondaryColorOffsetEXT;
  }
  if (strcmp(name, "glVertexArrayTexCoordOffsetEXT") == 0) {
    if (__glintercept_fnptr_glVertexArrayTexCoordOffsetEXT == NULL) {
      __glintercept_fnptr_glVertexArrayTexCoordOffsetEXT = (__ctype_glVertexArrayTexCoordOffsetEXT) eglGetProcAddr("glVertexArrayTexCoordOffsetEXT");
    }
    if (__glintercept_fnptr_glVertexArrayTexCoordOffsetEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayTexCoordOffsetEXT;
  }
  if (strcmp(name, "glVertexArrayVertexAttribBindingEXT") == 0) {
    if (__glintercept_fnptr_glVertexArrayVertexAttribBindingEXT == NULL) {
      __glintercept_fnptr_glVertexArrayVertexAttribBindingEXT = (__ctype_glVertexArrayVertexAttribBindingEXT) eglGetProcAddr("glVertexArrayVertexAttribBindingEXT");
    }
    if (__glintercept_fnptr_glVertexArrayVertexAttribBindingEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayVertexAttribBindingEXT;
  }
  if (strcmp(name, "glVertexArrayVertexAttribDivisorEXT") == 0) {
    if (__glintercept_fnptr_glVertexArrayVertexAttribDivisorEXT == NULL) {
      __glintercept_fnptr_glVertexArrayVertexAttribDivisorEXT = (__ctype_glVertexArrayVertexAttribDivisorEXT) eglGetProcAddr("glVertexArrayVertexAttribDivisorEXT");
    }
    if (__glintercept_fnptr_glVertexArrayVertexAttribDivisorEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayVertexAttribDivisorEXT;
  }
  if (strcmp(name, "glVertexArrayVertexAttribFormatEXT") == 0) {
    if (__glintercept_fnptr_glVertexArrayVertexAttribFormatEXT == NULL) {
      __glintercept_fnptr_glVertexArrayVertexAttribFormatEXT = (__ctype_glVertexArrayVertexAttribFormatEXT) eglGetProcAddr("glVertexArrayVertexAttribFormatEXT");
    }
    if (__glintercept_fnptr_glVertexArrayVertexAttribFormatEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayVertexAttribFormatEXT;
  }
  if (strcmp(name, "glVertexArrayVertexAttribIFormatEXT") == 0) {
    if (__glintercept_fnptr_glVertexArrayVertexAttribIFormatEXT == NULL) {
      __glintercept_fnptr_glVertexArrayVertexAttribIFormatEXT = (__ctype_glVertexArrayVertexAttribIFormatEXT) eglGetProcAddr("glVertexArrayVertexAttribIFormatEXT");
    }
    if (__glintercept_fnptr_glVertexArrayVertexAttribIFormatEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayVertexAttribIFormatEXT;
  }
  if (strcmp(name, "glVertexArrayVertexAttribIOffsetEXT") == 0) {
    if (__glintercept_fnptr_glVertexArrayVertexAttribIOffsetEXT == NULL) {
      __glintercept_fnptr_glVertexArrayVertexAttribIOffsetEXT = (__ctype_glVertexArrayVertexAttribIOffsetEXT) eglGetProcAddr("glVertexArrayVertexAttribIOffsetEXT");
    }
    if (__glintercept_fnptr_glVertexArrayVertexAttribIOffsetEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayVertexAttribIOffsetEXT;
  }
  if (strcmp(name, "glVertexArrayVertexAttribLFormatEXT") == 0) {
    if (__glintercept_fnptr_glVertexArrayVertexAttribLFormatEXT == NULL) {
      __glintercept_fnptr_glVertexArrayVertexAttribLFormatEXT = (__ctype_glVertexArrayVertexAttribLFormatEXT) eglGetProcAddr("glVertexArrayVertexAttribLFormatEXT");
    }
    if (__glintercept_fnptr_glVertexArrayVertexAttribLFormatEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayVertexAttribLFormatEXT;
  }
  if (strcmp(name, "glVertexArrayVertexAttribLOffsetEXT") == 0) {
    if (__glintercept_fnptr_glVertexArrayVertexAttribLOffsetEXT == NULL) {
      __glintercept_fnptr_glVertexArrayVertexAttribLOffsetEXT = (__ctype_glVertexArrayVertexAttribLOffsetEXT) eglGetProcAddr("glVertexArrayVertexAttribLOffsetEXT");
    }
    if (__glintercept_fnptr_glVertexArrayVertexAttribLOffsetEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayVertexAttribLOffsetEXT;
  }
  if (strcmp(name, "glVertexArrayVertexAttribOffsetEXT") == 0) {
    if (__glintercept_fnptr_glVertexArrayVertexAttribOffsetEXT == NULL) {
      __glintercept_fnptr_glVertexArrayVertexAttribOffsetEXT = (__ctype_glVertexArrayVertexAttribOffsetEXT) eglGetProcAddr("glVertexArrayVertexAttribOffsetEXT");
    }
    if (__glintercept_fnptr_glVertexArrayVertexAttribOffsetEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayVertexAttribOffsetEXT;
  }
  if (strcmp(name, "glVertexArrayVertexBindingDivisorEXT") == 0) {
    if (__glintercept_fnptr_glVertexArrayVertexBindingDivisorEXT == NULL) {
      __glintercept_fnptr_glVertexArrayVertexBindingDivisorEXT = (__ctype_glVertexArrayVertexBindingDivisorEXT) eglGetProcAddr("glVertexArrayVertexBindingDivisorEXT");
    }
    if (__glintercept_fnptr_glVertexArrayVertexBindingDivisorEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayVertexBindingDivisorEXT;
  }
  if (strcmp(name, "glVertexArrayVertexBuffer") == 0) {
    if (__glintercept_fnptr_glVertexArrayVertexBuffer == NULL) {
      __glintercept_fnptr_glVertexArrayVertexBuffer = (__ctype_glVertexArrayVertexBuffer) eglGetProcAddr("glVertexArrayVertexBuffer");
    }
    if (__glintercept_fnptr_glVertexArrayVertexBuffer == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayVertexBuffer;
  }
  if (strcmp(name, "glVertexArrayVertexBuffers") == 0) {
    if (__glintercept_fnptr_glVertexArrayVertexBuffers == NULL) {
      __glintercept_fnptr_glVertexArrayVertexBuffers = (__ctype_glVertexArrayVertexBuffers) eglGetProcAddr("glVertexArrayVertexBuffers");
    }
    if (__glintercept_fnptr_glVertexArrayVertexBuffers == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayVertexBuffers;
  }
  if (strcmp(name, "glVertexArrayVertexOffsetEXT") == 0) {
    if (__glintercept_fnptr_glVertexArrayVertexOffsetEXT == NULL) {
      __glintercept_fnptr_glVertexArrayVertexOffsetEXT = (__ctype_glVertexArrayVertexOffsetEXT) eglGetProcAddr("glVertexArrayVertexOffsetEXT");
    }
    if (__glintercept_fnptr_glVertexArrayVertexOffsetEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexArrayVertexOffsetEXT;
  }
  if (strcmp(name, "glVertexAttrib1d") == 0) {
    if (__glintercept_fnptr_glVertexAttrib1d == NULL) {
      __glintercept_fnptr_glVertexAttrib1d = (__ctype_glVertexAttrib1d) eglGetProcAddr("glVertexAttrib1d");
    }
    if (__glintercept_fnptr_glVertexAttrib1d == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib1d;
  }
  if (strcmp(name, "glVertexAttrib1dARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib1dARB == NULL) {
      __glintercept_fnptr_glVertexAttrib1dARB = (__ctype_glVertexAttrib1dARB) eglGetProcAddr("glVertexAttrib1dARB");
    }
    if (__glintercept_fnptr_glVertexAttrib1dARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib1dARB;
  }
  if (strcmp(name, "glVertexAttrib1dNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib1dNV == NULL) {
      __glintercept_fnptr_glVertexAttrib1dNV = (__ctype_glVertexAttrib1dNV) eglGetProcAddr("glVertexAttrib1dNV");
    }
    if (__glintercept_fnptr_glVertexAttrib1dNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib1dNV;
  }
  if (strcmp(name, "glVertexAttrib1dv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib1dv == NULL) {
      __glintercept_fnptr_glVertexAttrib1dv = (__ctype_glVertexAttrib1dv) eglGetProcAddr("glVertexAttrib1dv");
    }
    if (__glintercept_fnptr_glVertexAttrib1dv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib1dv;
  }
  if (strcmp(name, "glVertexAttrib1dvARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib1dvARB == NULL) {
      __glintercept_fnptr_glVertexAttrib1dvARB = (__ctype_glVertexAttrib1dvARB) eglGetProcAddr("glVertexAttrib1dvARB");
    }
    if (__glintercept_fnptr_glVertexAttrib1dvARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib1dvARB;
  }
  if (strcmp(name, "glVertexAttrib1dvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib1dvNV == NULL) {
      __glintercept_fnptr_glVertexAttrib1dvNV = (__ctype_glVertexAttrib1dvNV) eglGetProcAddr("glVertexAttrib1dvNV");
    }
    if (__glintercept_fnptr_glVertexAttrib1dvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib1dvNV;
  }
  if (strcmp(name, "glVertexAttrib1f") == 0) {
    if (__glintercept_fnptr_glVertexAttrib1f == NULL) {
      __glintercept_fnptr_glVertexAttrib1f = (__ctype_glVertexAttrib1f) eglGetProcAddr("glVertexAttrib1f");
    }
    if (__glintercept_fnptr_glVertexAttrib1f == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib1f;
  }
  if (strcmp(name, "glVertexAttrib1fARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib1fARB == NULL) {
      __glintercept_fnptr_glVertexAttrib1fARB = (__ctype_glVertexAttrib1fARB) eglGetProcAddr("glVertexAttrib1fARB");
    }
    if (__glintercept_fnptr_glVertexAttrib1fARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib1fARB;
  }
  if (strcmp(name, "glVertexAttrib1fNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib1fNV == NULL) {
      __glintercept_fnptr_glVertexAttrib1fNV = (__ctype_glVertexAttrib1fNV) eglGetProcAddr("glVertexAttrib1fNV");
    }
    if (__glintercept_fnptr_glVertexAttrib1fNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib1fNV;
  }
  if (strcmp(name, "glVertexAttrib1fv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib1fv == NULL) {
      __glintercept_fnptr_glVertexAttrib1fv = (__ctype_glVertexAttrib1fv) eglGetProcAddr("glVertexAttrib1fv");
    }
    if (__glintercept_fnptr_glVertexAttrib1fv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib1fv;
  }
  if (strcmp(name, "glVertexAttrib1fvARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib1fvARB == NULL) {
      __glintercept_fnptr_glVertexAttrib1fvARB = (__ctype_glVertexAttrib1fvARB) eglGetProcAddr("glVertexAttrib1fvARB");
    }
    if (__glintercept_fnptr_glVertexAttrib1fvARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib1fvARB;
  }
  if (strcmp(name, "glVertexAttrib1fvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib1fvNV == NULL) {
      __glintercept_fnptr_glVertexAttrib1fvNV = (__ctype_glVertexAttrib1fvNV) eglGetProcAddr("glVertexAttrib1fvNV");
    }
    if (__glintercept_fnptr_glVertexAttrib1fvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib1fvNV;
  }
  if (strcmp(name, "glVertexAttrib1hNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib1hNV == NULL) {
      __glintercept_fnptr_glVertexAttrib1hNV = (__ctype_glVertexAttrib1hNV) eglGetProcAddr("glVertexAttrib1hNV");
    }
    if (__glintercept_fnptr_glVertexAttrib1hNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib1hNV;
  }
  if (strcmp(name, "glVertexAttrib1hvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib1hvNV == NULL) {
      __glintercept_fnptr_glVertexAttrib1hvNV = (__ctype_glVertexAttrib1hvNV) eglGetProcAddr("glVertexAttrib1hvNV");
    }
    if (__glintercept_fnptr_glVertexAttrib1hvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib1hvNV;
  }
  if (strcmp(name, "glVertexAttrib1s") == 0) {
    if (__glintercept_fnptr_glVertexAttrib1s == NULL) {
      __glintercept_fnptr_glVertexAttrib1s = (__ctype_glVertexAttrib1s) eglGetProcAddr("glVertexAttrib1s");
    }
    if (__glintercept_fnptr_glVertexAttrib1s == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib1s;
  }
  if (strcmp(name, "glVertexAttrib1sARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib1sARB == NULL) {
      __glintercept_fnptr_glVertexAttrib1sARB = (__ctype_glVertexAttrib1sARB) eglGetProcAddr("glVertexAttrib1sARB");
    }
    if (__glintercept_fnptr_glVertexAttrib1sARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib1sARB;
  }
  if (strcmp(name, "glVertexAttrib1sNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib1sNV == NULL) {
      __glintercept_fnptr_glVertexAttrib1sNV = (__ctype_glVertexAttrib1sNV) eglGetProcAddr("glVertexAttrib1sNV");
    }
    if (__glintercept_fnptr_glVertexAttrib1sNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib1sNV;
  }
  if (strcmp(name, "glVertexAttrib1sv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib1sv == NULL) {
      __glintercept_fnptr_glVertexAttrib1sv = (__ctype_glVertexAttrib1sv) eglGetProcAddr("glVertexAttrib1sv");
    }
    if (__glintercept_fnptr_glVertexAttrib1sv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib1sv;
  }
  if (strcmp(name, "glVertexAttrib1svARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib1svARB == NULL) {
      __glintercept_fnptr_glVertexAttrib1svARB = (__ctype_glVertexAttrib1svARB) eglGetProcAddr("glVertexAttrib1svARB");
    }
    if (__glintercept_fnptr_glVertexAttrib1svARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib1svARB;
  }
  if (strcmp(name, "glVertexAttrib1svNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib1svNV == NULL) {
      __glintercept_fnptr_glVertexAttrib1svNV = (__ctype_glVertexAttrib1svNV) eglGetProcAddr("glVertexAttrib1svNV");
    }
    if (__glintercept_fnptr_glVertexAttrib1svNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib1svNV;
  }
  if (strcmp(name, "glVertexAttrib2d") == 0) {
    if (__glintercept_fnptr_glVertexAttrib2d == NULL) {
      __glintercept_fnptr_glVertexAttrib2d = (__ctype_glVertexAttrib2d) eglGetProcAddr("glVertexAttrib2d");
    }
    if (__glintercept_fnptr_glVertexAttrib2d == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib2d;
  }
  if (strcmp(name, "glVertexAttrib2dARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib2dARB == NULL) {
      __glintercept_fnptr_glVertexAttrib2dARB = (__ctype_glVertexAttrib2dARB) eglGetProcAddr("glVertexAttrib2dARB");
    }
    if (__glintercept_fnptr_glVertexAttrib2dARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib2dARB;
  }
  if (strcmp(name, "glVertexAttrib2dNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib2dNV == NULL) {
      __glintercept_fnptr_glVertexAttrib2dNV = (__ctype_glVertexAttrib2dNV) eglGetProcAddr("glVertexAttrib2dNV");
    }
    if (__glintercept_fnptr_glVertexAttrib2dNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib2dNV;
  }
  if (strcmp(name, "glVertexAttrib2dv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib2dv == NULL) {
      __glintercept_fnptr_glVertexAttrib2dv = (__ctype_glVertexAttrib2dv) eglGetProcAddr("glVertexAttrib2dv");
    }
    if (__glintercept_fnptr_glVertexAttrib2dv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib2dv;
  }
  if (strcmp(name, "glVertexAttrib2dvARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib2dvARB == NULL) {
      __glintercept_fnptr_glVertexAttrib2dvARB = (__ctype_glVertexAttrib2dvARB) eglGetProcAddr("glVertexAttrib2dvARB");
    }
    if (__glintercept_fnptr_glVertexAttrib2dvARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib2dvARB;
  }
  if (strcmp(name, "glVertexAttrib2dvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib2dvNV == NULL) {
      __glintercept_fnptr_glVertexAttrib2dvNV = (__ctype_glVertexAttrib2dvNV) eglGetProcAddr("glVertexAttrib2dvNV");
    }
    if (__glintercept_fnptr_glVertexAttrib2dvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib2dvNV;
  }
  if (strcmp(name, "glVertexAttrib2f") == 0) {
    if (__glintercept_fnptr_glVertexAttrib2f == NULL) {
      __glintercept_fnptr_glVertexAttrib2f = (__ctype_glVertexAttrib2f) eglGetProcAddr("glVertexAttrib2f");
    }
    if (__glintercept_fnptr_glVertexAttrib2f == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib2f;
  }
  if (strcmp(name, "glVertexAttrib2fARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib2fARB == NULL) {
      __glintercept_fnptr_glVertexAttrib2fARB = (__ctype_glVertexAttrib2fARB) eglGetProcAddr("glVertexAttrib2fARB");
    }
    if (__glintercept_fnptr_glVertexAttrib2fARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib2fARB;
  }
  if (strcmp(name, "glVertexAttrib2fNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib2fNV == NULL) {
      __glintercept_fnptr_glVertexAttrib2fNV = (__ctype_glVertexAttrib2fNV) eglGetProcAddr("glVertexAttrib2fNV");
    }
    if (__glintercept_fnptr_glVertexAttrib2fNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib2fNV;
  }
  if (strcmp(name, "glVertexAttrib2fv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib2fv == NULL) {
      __glintercept_fnptr_glVertexAttrib2fv = (__ctype_glVertexAttrib2fv) eglGetProcAddr("glVertexAttrib2fv");
    }
    if (__glintercept_fnptr_glVertexAttrib2fv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib2fv;
  }
  if (strcmp(name, "glVertexAttrib2fvARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib2fvARB == NULL) {
      __glintercept_fnptr_glVertexAttrib2fvARB = (__ctype_glVertexAttrib2fvARB) eglGetProcAddr("glVertexAttrib2fvARB");
    }
    if (__glintercept_fnptr_glVertexAttrib2fvARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib2fvARB;
  }
  if (strcmp(name, "glVertexAttrib2fvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib2fvNV == NULL) {
      __glintercept_fnptr_glVertexAttrib2fvNV = (__ctype_glVertexAttrib2fvNV) eglGetProcAddr("glVertexAttrib2fvNV");
    }
    if (__glintercept_fnptr_glVertexAttrib2fvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib2fvNV;
  }
  if (strcmp(name, "glVertexAttrib2hNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib2hNV == NULL) {
      __glintercept_fnptr_glVertexAttrib2hNV = (__ctype_glVertexAttrib2hNV) eglGetProcAddr("glVertexAttrib2hNV");
    }
    if (__glintercept_fnptr_glVertexAttrib2hNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib2hNV;
  }
  if (strcmp(name, "glVertexAttrib2hvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib2hvNV == NULL) {
      __glintercept_fnptr_glVertexAttrib2hvNV = (__ctype_glVertexAttrib2hvNV) eglGetProcAddr("glVertexAttrib2hvNV");
    }
    if (__glintercept_fnptr_glVertexAttrib2hvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib2hvNV;
  }
  if (strcmp(name, "glVertexAttrib2s") == 0) {
    if (__glintercept_fnptr_glVertexAttrib2s == NULL) {
      __glintercept_fnptr_glVertexAttrib2s = (__ctype_glVertexAttrib2s) eglGetProcAddr("glVertexAttrib2s");
    }
    if (__glintercept_fnptr_glVertexAttrib2s == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib2s;
  }
  if (strcmp(name, "glVertexAttrib2sARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib2sARB == NULL) {
      __glintercept_fnptr_glVertexAttrib2sARB = (__ctype_glVertexAttrib2sARB) eglGetProcAddr("glVertexAttrib2sARB");
    }
    if (__glintercept_fnptr_glVertexAttrib2sARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib2sARB;
  }
  if (strcmp(name, "glVertexAttrib2sNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib2sNV == NULL) {
      __glintercept_fnptr_glVertexAttrib2sNV = (__ctype_glVertexAttrib2sNV) eglGetProcAddr("glVertexAttrib2sNV");
    }
    if (__glintercept_fnptr_glVertexAttrib2sNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib2sNV;
  }
  if (strcmp(name, "glVertexAttrib2sv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib2sv == NULL) {
      __glintercept_fnptr_glVertexAttrib2sv = (__ctype_glVertexAttrib2sv) eglGetProcAddr("glVertexAttrib2sv");
    }
    if (__glintercept_fnptr_glVertexAttrib2sv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib2sv;
  }
  if (strcmp(name, "glVertexAttrib2svARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib2svARB == NULL) {
      __glintercept_fnptr_glVertexAttrib2svARB = (__ctype_glVertexAttrib2svARB) eglGetProcAddr("glVertexAttrib2svARB");
    }
    if (__glintercept_fnptr_glVertexAttrib2svARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib2svARB;
  }
  if (strcmp(name, "glVertexAttrib2svNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib2svNV == NULL) {
      __glintercept_fnptr_glVertexAttrib2svNV = (__ctype_glVertexAttrib2svNV) eglGetProcAddr("glVertexAttrib2svNV");
    }
    if (__glintercept_fnptr_glVertexAttrib2svNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib2svNV;
  }
  if (strcmp(name, "glVertexAttrib3d") == 0) {
    if (__glintercept_fnptr_glVertexAttrib3d == NULL) {
      __glintercept_fnptr_glVertexAttrib3d = (__ctype_glVertexAttrib3d) eglGetProcAddr("glVertexAttrib3d");
    }
    if (__glintercept_fnptr_glVertexAttrib3d == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib3d;
  }
  if (strcmp(name, "glVertexAttrib3dARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib3dARB == NULL) {
      __glintercept_fnptr_glVertexAttrib3dARB = (__ctype_glVertexAttrib3dARB) eglGetProcAddr("glVertexAttrib3dARB");
    }
    if (__glintercept_fnptr_glVertexAttrib3dARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib3dARB;
  }
  if (strcmp(name, "glVertexAttrib3dNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib3dNV == NULL) {
      __glintercept_fnptr_glVertexAttrib3dNV = (__ctype_glVertexAttrib3dNV) eglGetProcAddr("glVertexAttrib3dNV");
    }
    if (__glintercept_fnptr_glVertexAttrib3dNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib3dNV;
  }
  if (strcmp(name, "glVertexAttrib3dv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib3dv == NULL) {
      __glintercept_fnptr_glVertexAttrib3dv = (__ctype_glVertexAttrib3dv) eglGetProcAddr("glVertexAttrib3dv");
    }
    if (__glintercept_fnptr_glVertexAttrib3dv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib3dv;
  }
  if (strcmp(name, "glVertexAttrib3dvARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib3dvARB == NULL) {
      __glintercept_fnptr_glVertexAttrib3dvARB = (__ctype_glVertexAttrib3dvARB) eglGetProcAddr("glVertexAttrib3dvARB");
    }
    if (__glintercept_fnptr_glVertexAttrib3dvARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib3dvARB;
  }
  if (strcmp(name, "glVertexAttrib3dvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib3dvNV == NULL) {
      __glintercept_fnptr_glVertexAttrib3dvNV = (__ctype_glVertexAttrib3dvNV) eglGetProcAddr("glVertexAttrib3dvNV");
    }
    if (__glintercept_fnptr_glVertexAttrib3dvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib3dvNV;
  }
  if (strcmp(name, "glVertexAttrib3f") == 0) {
    if (__glintercept_fnptr_glVertexAttrib3f == NULL) {
      __glintercept_fnptr_glVertexAttrib3f = (__ctype_glVertexAttrib3f) eglGetProcAddr("glVertexAttrib3f");
    }
    if (__glintercept_fnptr_glVertexAttrib3f == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib3f;
  }
  if (strcmp(name, "glVertexAttrib3fARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib3fARB == NULL) {
      __glintercept_fnptr_glVertexAttrib3fARB = (__ctype_glVertexAttrib3fARB) eglGetProcAddr("glVertexAttrib3fARB");
    }
    if (__glintercept_fnptr_glVertexAttrib3fARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib3fARB;
  }
  if (strcmp(name, "glVertexAttrib3fNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib3fNV == NULL) {
      __glintercept_fnptr_glVertexAttrib3fNV = (__ctype_glVertexAttrib3fNV) eglGetProcAddr("glVertexAttrib3fNV");
    }
    if (__glintercept_fnptr_glVertexAttrib3fNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib3fNV;
  }
  if (strcmp(name, "glVertexAttrib3fv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib3fv == NULL) {
      __glintercept_fnptr_glVertexAttrib3fv = (__ctype_glVertexAttrib3fv) eglGetProcAddr("glVertexAttrib3fv");
    }
    if (__glintercept_fnptr_glVertexAttrib3fv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib3fv;
  }
  if (strcmp(name, "glVertexAttrib3fvARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib3fvARB == NULL) {
      __glintercept_fnptr_glVertexAttrib3fvARB = (__ctype_glVertexAttrib3fvARB) eglGetProcAddr("glVertexAttrib3fvARB");
    }
    if (__glintercept_fnptr_glVertexAttrib3fvARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib3fvARB;
  }
  if (strcmp(name, "glVertexAttrib3fvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib3fvNV == NULL) {
      __glintercept_fnptr_glVertexAttrib3fvNV = (__ctype_glVertexAttrib3fvNV) eglGetProcAddr("glVertexAttrib3fvNV");
    }
    if (__glintercept_fnptr_glVertexAttrib3fvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib3fvNV;
  }
  if (strcmp(name, "glVertexAttrib3hNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib3hNV == NULL) {
      __glintercept_fnptr_glVertexAttrib3hNV = (__ctype_glVertexAttrib3hNV) eglGetProcAddr("glVertexAttrib3hNV");
    }
    if (__glintercept_fnptr_glVertexAttrib3hNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib3hNV;
  }
  if (strcmp(name, "glVertexAttrib3hvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib3hvNV == NULL) {
      __glintercept_fnptr_glVertexAttrib3hvNV = (__ctype_glVertexAttrib3hvNV) eglGetProcAddr("glVertexAttrib3hvNV");
    }
    if (__glintercept_fnptr_glVertexAttrib3hvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib3hvNV;
  }
  if (strcmp(name, "glVertexAttrib3s") == 0) {
    if (__glintercept_fnptr_glVertexAttrib3s == NULL) {
      __glintercept_fnptr_glVertexAttrib3s = (__ctype_glVertexAttrib3s) eglGetProcAddr("glVertexAttrib3s");
    }
    if (__glintercept_fnptr_glVertexAttrib3s == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib3s;
  }
  if (strcmp(name, "glVertexAttrib3sARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib3sARB == NULL) {
      __glintercept_fnptr_glVertexAttrib3sARB = (__ctype_glVertexAttrib3sARB) eglGetProcAddr("glVertexAttrib3sARB");
    }
    if (__glintercept_fnptr_glVertexAttrib3sARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib3sARB;
  }
  if (strcmp(name, "glVertexAttrib3sNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib3sNV == NULL) {
      __glintercept_fnptr_glVertexAttrib3sNV = (__ctype_glVertexAttrib3sNV) eglGetProcAddr("glVertexAttrib3sNV");
    }
    if (__glintercept_fnptr_glVertexAttrib3sNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib3sNV;
  }
  if (strcmp(name, "glVertexAttrib3sv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib3sv == NULL) {
      __glintercept_fnptr_glVertexAttrib3sv = (__ctype_glVertexAttrib3sv) eglGetProcAddr("glVertexAttrib3sv");
    }
    if (__glintercept_fnptr_glVertexAttrib3sv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib3sv;
  }
  if (strcmp(name, "glVertexAttrib3svARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib3svARB == NULL) {
      __glintercept_fnptr_glVertexAttrib3svARB = (__ctype_glVertexAttrib3svARB) eglGetProcAddr("glVertexAttrib3svARB");
    }
    if (__glintercept_fnptr_glVertexAttrib3svARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib3svARB;
  }
  if (strcmp(name, "glVertexAttrib3svNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib3svNV == NULL) {
      __glintercept_fnptr_glVertexAttrib3svNV = (__ctype_glVertexAttrib3svNV) eglGetProcAddr("glVertexAttrib3svNV");
    }
    if (__glintercept_fnptr_glVertexAttrib3svNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib3svNV;
  }
  if (strcmp(name, "glVertexAttrib4Nbv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4Nbv == NULL) {
      __glintercept_fnptr_glVertexAttrib4Nbv = (__ctype_glVertexAttrib4Nbv) eglGetProcAddr("glVertexAttrib4Nbv");
    }
    if (__glintercept_fnptr_glVertexAttrib4Nbv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4Nbv;
  }
  if (strcmp(name, "glVertexAttrib4NbvARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4NbvARB == NULL) {
      __glintercept_fnptr_glVertexAttrib4NbvARB = (__ctype_glVertexAttrib4NbvARB) eglGetProcAddr("glVertexAttrib4NbvARB");
    }
    if (__glintercept_fnptr_glVertexAttrib4NbvARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4NbvARB;
  }
  if (strcmp(name, "glVertexAttrib4Niv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4Niv == NULL) {
      __glintercept_fnptr_glVertexAttrib4Niv = (__ctype_glVertexAttrib4Niv) eglGetProcAddr("glVertexAttrib4Niv");
    }
    if (__glintercept_fnptr_glVertexAttrib4Niv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4Niv;
  }
  if (strcmp(name, "glVertexAttrib4NivARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4NivARB == NULL) {
      __glintercept_fnptr_glVertexAttrib4NivARB = (__ctype_glVertexAttrib4NivARB) eglGetProcAddr("glVertexAttrib4NivARB");
    }
    if (__glintercept_fnptr_glVertexAttrib4NivARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4NivARB;
  }
  if (strcmp(name, "glVertexAttrib4Nsv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4Nsv == NULL) {
      __glintercept_fnptr_glVertexAttrib4Nsv = (__ctype_glVertexAttrib4Nsv) eglGetProcAddr("glVertexAttrib4Nsv");
    }
    if (__glintercept_fnptr_glVertexAttrib4Nsv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4Nsv;
  }
  if (strcmp(name, "glVertexAttrib4NsvARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4NsvARB == NULL) {
      __glintercept_fnptr_glVertexAttrib4NsvARB = (__ctype_glVertexAttrib4NsvARB) eglGetProcAddr("glVertexAttrib4NsvARB");
    }
    if (__glintercept_fnptr_glVertexAttrib4NsvARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4NsvARB;
  }
  if (strcmp(name, "glVertexAttrib4Nub") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4Nub == NULL) {
      __glintercept_fnptr_glVertexAttrib4Nub = (__ctype_glVertexAttrib4Nub) eglGetProcAddr("glVertexAttrib4Nub");
    }
    if (__glintercept_fnptr_glVertexAttrib4Nub == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4Nub;
  }
  if (strcmp(name, "glVertexAttrib4NubARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4NubARB == NULL) {
      __glintercept_fnptr_glVertexAttrib4NubARB = (__ctype_glVertexAttrib4NubARB) eglGetProcAddr("glVertexAttrib4NubARB");
    }
    if (__glintercept_fnptr_glVertexAttrib4NubARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4NubARB;
  }
  if (strcmp(name, "glVertexAttrib4Nubv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4Nubv == NULL) {
      __glintercept_fnptr_glVertexAttrib4Nubv = (__ctype_glVertexAttrib4Nubv) eglGetProcAddr("glVertexAttrib4Nubv");
    }
    if (__glintercept_fnptr_glVertexAttrib4Nubv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4Nubv;
  }
  if (strcmp(name, "glVertexAttrib4NubvARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4NubvARB == NULL) {
      __glintercept_fnptr_glVertexAttrib4NubvARB = (__ctype_glVertexAttrib4NubvARB) eglGetProcAddr("glVertexAttrib4NubvARB");
    }
    if (__glintercept_fnptr_glVertexAttrib4NubvARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4NubvARB;
  }
  if (strcmp(name, "glVertexAttrib4Nuiv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4Nuiv == NULL) {
      __glintercept_fnptr_glVertexAttrib4Nuiv = (__ctype_glVertexAttrib4Nuiv) eglGetProcAddr("glVertexAttrib4Nuiv");
    }
    if (__glintercept_fnptr_glVertexAttrib4Nuiv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4Nuiv;
  }
  if (strcmp(name, "glVertexAttrib4NuivARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4NuivARB == NULL) {
      __glintercept_fnptr_glVertexAttrib4NuivARB = (__ctype_glVertexAttrib4NuivARB) eglGetProcAddr("glVertexAttrib4NuivARB");
    }
    if (__glintercept_fnptr_glVertexAttrib4NuivARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4NuivARB;
  }
  if (strcmp(name, "glVertexAttrib4Nusv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4Nusv == NULL) {
      __glintercept_fnptr_glVertexAttrib4Nusv = (__ctype_glVertexAttrib4Nusv) eglGetProcAddr("glVertexAttrib4Nusv");
    }
    if (__glintercept_fnptr_glVertexAttrib4Nusv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4Nusv;
  }
  if (strcmp(name, "glVertexAttrib4NusvARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4NusvARB == NULL) {
      __glintercept_fnptr_glVertexAttrib4NusvARB = (__ctype_glVertexAttrib4NusvARB) eglGetProcAddr("glVertexAttrib4NusvARB");
    }
    if (__glintercept_fnptr_glVertexAttrib4NusvARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4NusvARB;
  }
  if (strcmp(name, "glVertexAttrib4bv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4bv == NULL) {
      __glintercept_fnptr_glVertexAttrib4bv = (__ctype_glVertexAttrib4bv) eglGetProcAddr("glVertexAttrib4bv");
    }
    if (__glintercept_fnptr_glVertexAttrib4bv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4bv;
  }
  if (strcmp(name, "glVertexAttrib4bvARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4bvARB == NULL) {
      __glintercept_fnptr_glVertexAttrib4bvARB = (__ctype_glVertexAttrib4bvARB) eglGetProcAddr("glVertexAttrib4bvARB");
    }
    if (__glintercept_fnptr_glVertexAttrib4bvARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4bvARB;
  }
  if (strcmp(name, "glVertexAttrib4d") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4d == NULL) {
      __glintercept_fnptr_glVertexAttrib4d = (__ctype_glVertexAttrib4d) eglGetProcAddr("glVertexAttrib4d");
    }
    if (__glintercept_fnptr_glVertexAttrib4d == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4d;
  }
  if (strcmp(name, "glVertexAttrib4dARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4dARB == NULL) {
      __glintercept_fnptr_glVertexAttrib4dARB = (__ctype_glVertexAttrib4dARB) eglGetProcAddr("glVertexAttrib4dARB");
    }
    if (__glintercept_fnptr_glVertexAttrib4dARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4dARB;
  }
  if (strcmp(name, "glVertexAttrib4dNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4dNV == NULL) {
      __glintercept_fnptr_glVertexAttrib4dNV = (__ctype_glVertexAttrib4dNV) eglGetProcAddr("glVertexAttrib4dNV");
    }
    if (__glintercept_fnptr_glVertexAttrib4dNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4dNV;
  }
  if (strcmp(name, "glVertexAttrib4dv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4dv == NULL) {
      __glintercept_fnptr_glVertexAttrib4dv = (__ctype_glVertexAttrib4dv) eglGetProcAddr("glVertexAttrib4dv");
    }
    if (__glintercept_fnptr_glVertexAttrib4dv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4dv;
  }
  if (strcmp(name, "glVertexAttrib4dvARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4dvARB == NULL) {
      __glintercept_fnptr_glVertexAttrib4dvARB = (__ctype_glVertexAttrib4dvARB) eglGetProcAddr("glVertexAttrib4dvARB");
    }
    if (__glintercept_fnptr_glVertexAttrib4dvARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4dvARB;
  }
  if (strcmp(name, "glVertexAttrib4dvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4dvNV == NULL) {
      __glintercept_fnptr_glVertexAttrib4dvNV = (__ctype_glVertexAttrib4dvNV) eglGetProcAddr("glVertexAttrib4dvNV");
    }
    if (__glintercept_fnptr_glVertexAttrib4dvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4dvNV;
  }
  if (strcmp(name, "glVertexAttrib4f") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4f == NULL) {
      __glintercept_fnptr_glVertexAttrib4f = (__ctype_glVertexAttrib4f) eglGetProcAddr("glVertexAttrib4f");
    }
    if (__glintercept_fnptr_glVertexAttrib4f == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4f;
  }
  if (strcmp(name, "glVertexAttrib4fARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4fARB == NULL) {
      __glintercept_fnptr_glVertexAttrib4fARB = (__ctype_glVertexAttrib4fARB) eglGetProcAddr("glVertexAttrib4fARB");
    }
    if (__glintercept_fnptr_glVertexAttrib4fARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4fARB;
  }
  if (strcmp(name, "glVertexAttrib4fNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4fNV == NULL) {
      __glintercept_fnptr_glVertexAttrib4fNV = (__ctype_glVertexAttrib4fNV) eglGetProcAddr("glVertexAttrib4fNV");
    }
    if (__glintercept_fnptr_glVertexAttrib4fNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4fNV;
  }
  if (strcmp(name, "glVertexAttrib4fv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4fv == NULL) {
      __glintercept_fnptr_glVertexAttrib4fv = (__ctype_glVertexAttrib4fv) eglGetProcAddr("glVertexAttrib4fv");
    }
    if (__glintercept_fnptr_glVertexAttrib4fv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4fv;
  }
  if (strcmp(name, "glVertexAttrib4fvARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4fvARB == NULL) {
      __glintercept_fnptr_glVertexAttrib4fvARB = (__ctype_glVertexAttrib4fvARB) eglGetProcAddr("glVertexAttrib4fvARB");
    }
    if (__glintercept_fnptr_glVertexAttrib4fvARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4fvARB;
  }
  if (strcmp(name, "glVertexAttrib4fvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4fvNV == NULL) {
      __glintercept_fnptr_glVertexAttrib4fvNV = (__ctype_glVertexAttrib4fvNV) eglGetProcAddr("glVertexAttrib4fvNV");
    }
    if (__glintercept_fnptr_glVertexAttrib4fvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4fvNV;
  }
  if (strcmp(name, "glVertexAttrib4hNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4hNV == NULL) {
      __glintercept_fnptr_glVertexAttrib4hNV = (__ctype_glVertexAttrib4hNV) eglGetProcAddr("glVertexAttrib4hNV");
    }
    if (__glintercept_fnptr_glVertexAttrib4hNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4hNV;
  }
  if (strcmp(name, "glVertexAttrib4hvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4hvNV == NULL) {
      __glintercept_fnptr_glVertexAttrib4hvNV = (__ctype_glVertexAttrib4hvNV) eglGetProcAddr("glVertexAttrib4hvNV");
    }
    if (__glintercept_fnptr_glVertexAttrib4hvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4hvNV;
  }
  if (strcmp(name, "glVertexAttrib4iv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4iv == NULL) {
      __glintercept_fnptr_glVertexAttrib4iv = (__ctype_glVertexAttrib4iv) eglGetProcAddr("glVertexAttrib4iv");
    }
    if (__glintercept_fnptr_glVertexAttrib4iv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4iv;
  }
  if (strcmp(name, "glVertexAttrib4ivARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4ivARB == NULL) {
      __glintercept_fnptr_glVertexAttrib4ivARB = (__ctype_glVertexAttrib4ivARB) eglGetProcAddr("glVertexAttrib4ivARB");
    }
    if (__glintercept_fnptr_glVertexAttrib4ivARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4ivARB;
  }
  if (strcmp(name, "glVertexAttrib4s") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4s == NULL) {
      __glintercept_fnptr_glVertexAttrib4s = (__ctype_glVertexAttrib4s) eglGetProcAddr("glVertexAttrib4s");
    }
    if (__glintercept_fnptr_glVertexAttrib4s == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4s;
  }
  if (strcmp(name, "glVertexAttrib4sARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4sARB == NULL) {
      __glintercept_fnptr_glVertexAttrib4sARB = (__ctype_glVertexAttrib4sARB) eglGetProcAddr("glVertexAttrib4sARB");
    }
    if (__glintercept_fnptr_glVertexAttrib4sARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4sARB;
  }
  if (strcmp(name, "glVertexAttrib4sNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4sNV == NULL) {
      __glintercept_fnptr_glVertexAttrib4sNV = (__ctype_glVertexAttrib4sNV) eglGetProcAddr("glVertexAttrib4sNV");
    }
    if (__glintercept_fnptr_glVertexAttrib4sNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4sNV;
  }
  if (strcmp(name, "glVertexAttrib4sv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4sv == NULL) {
      __glintercept_fnptr_glVertexAttrib4sv = (__ctype_glVertexAttrib4sv) eglGetProcAddr("glVertexAttrib4sv");
    }
    if (__glintercept_fnptr_glVertexAttrib4sv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4sv;
  }
  if (strcmp(name, "glVertexAttrib4svARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4svARB == NULL) {
      __glintercept_fnptr_glVertexAttrib4svARB = (__ctype_glVertexAttrib4svARB) eglGetProcAddr("glVertexAttrib4svARB");
    }
    if (__glintercept_fnptr_glVertexAttrib4svARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4svARB;
  }
  if (strcmp(name, "glVertexAttrib4svNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4svNV == NULL) {
      __glintercept_fnptr_glVertexAttrib4svNV = (__ctype_glVertexAttrib4svNV) eglGetProcAddr("glVertexAttrib4svNV");
    }
    if (__glintercept_fnptr_glVertexAttrib4svNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4svNV;
  }
  if (strcmp(name, "glVertexAttrib4ubNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4ubNV == NULL) {
      __glintercept_fnptr_glVertexAttrib4ubNV = (__ctype_glVertexAttrib4ubNV) eglGetProcAddr("glVertexAttrib4ubNV");
    }
    if (__glintercept_fnptr_glVertexAttrib4ubNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4ubNV;
  }
  if (strcmp(name, "glVertexAttrib4ubv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4ubv == NULL) {
      __glintercept_fnptr_glVertexAttrib4ubv = (__ctype_glVertexAttrib4ubv) eglGetProcAddr("glVertexAttrib4ubv");
    }
    if (__glintercept_fnptr_glVertexAttrib4ubv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4ubv;
  }
  if (strcmp(name, "glVertexAttrib4ubvARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4ubvARB == NULL) {
      __glintercept_fnptr_glVertexAttrib4ubvARB = (__ctype_glVertexAttrib4ubvARB) eglGetProcAddr("glVertexAttrib4ubvARB");
    }
    if (__glintercept_fnptr_glVertexAttrib4ubvARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4ubvARB;
  }
  if (strcmp(name, "glVertexAttrib4ubvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4ubvNV == NULL) {
      __glintercept_fnptr_glVertexAttrib4ubvNV = (__ctype_glVertexAttrib4ubvNV) eglGetProcAddr("glVertexAttrib4ubvNV");
    }
    if (__glintercept_fnptr_glVertexAttrib4ubvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4ubvNV;
  }
  if (strcmp(name, "glVertexAttrib4uiv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4uiv == NULL) {
      __glintercept_fnptr_glVertexAttrib4uiv = (__ctype_glVertexAttrib4uiv) eglGetProcAddr("glVertexAttrib4uiv");
    }
    if (__glintercept_fnptr_glVertexAttrib4uiv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4uiv;
  }
  if (strcmp(name, "glVertexAttrib4uivARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4uivARB == NULL) {
      __glintercept_fnptr_glVertexAttrib4uivARB = (__ctype_glVertexAttrib4uivARB) eglGetProcAddr("glVertexAttrib4uivARB");
    }
    if (__glintercept_fnptr_glVertexAttrib4uivARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4uivARB;
  }
  if (strcmp(name, "glVertexAttrib4usv") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4usv == NULL) {
      __glintercept_fnptr_glVertexAttrib4usv = (__ctype_glVertexAttrib4usv) eglGetProcAddr("glVertexAttrib4usv");
    }
    if (__glintercept_fnptr_glVertexAttrib4usv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4usv;
  }
  if (strcmp(name, "glVertexAttrib4usvARB") == 0) {
    if (__glintercept_fnptr_glVertexAttrib4usvARB == NULL) {
      __glintercept_fnptr_glVertexAttrib4usvARB = (__ctype_glVertexAttrib4usvARB) eglGetProcAddr("glVertexAttrib4usvARB");
    }
    if (__glintercept_fnptr_glVertexAttrib4usvARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttrib4usvARB;
  }
  if (strcmp(name, "glVertexAttribArrayObjectATI") == 0) {
    if (__glintercept_fnptr_glVertexAttribArrayObjectATI == NULL) {
      __glintercept_fnptr_glVertexAttribArrayObjectATI = (__ctype_glVertexAttribArrayObjectATI) eglGetProcAddr("glVertexAttribArrayObjectATI");
    }
    if (__glintercept_fnptr_glVertexAttribArrayObjectATI == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribArrayObjectATI;
  }
  if (strcmp(name, "glVertexAttribBinding") == 0) {
    if (__glintercept_fnptr_glVertexAttribBinding == NULL) {
      __glintercept_fnptr_glVertexAttribBinding = (__ctype_glVertexAttribBinding) eglGetProcAddr("glVertexAttribBinding");
    }
    if (__glintercept_fnptr_glVertexAttribBinding == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribBinding;
  }
  if (strcmp(name, "glVertexAttribDivisor") == 0) {
    if (__glintercept_fnptr_glVertexAttribDivisor == NULL) {
      __glintercept_fnptr_glVertexAttribDivisor = (__ctype_glVertexAttribDivisor) eglGetProcAddr("glVertexAttribDivisor");
    }
    if (__glintercept_fnptr_glVertexAttribDivisor == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribDivisor;
  }
  if (strcmp(name, "glVertexAttribDivisorANGLE") == 0) {
    if (__glintercept_fnptr_glVertexAttribDivisorANGLE == NULL) {
      __glintercept_fnptr_glVertexAttribDivisorANGLE = (__ctype_glVertexAttribDivisorANGLE) eglGetProcAddr("glVertexAttribDivisorANGLE");
    }
    if (__glintercept_fnptr_glVertexAttribDivisorANGLE == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribDivisorANGLE;
  }
  if (strcmp(name, "glVertexAttribDivisorARB") == 0) {
    if (__glintercept_fnptr_glVertexAttribDivisorARB == NULL) {
      __glintercept_fnptr_glVertexAttribDivisorARB = (__ctype_glVertexAttribDivisorARB) eglGetProcAddr("glVertexAttribDivisorARB");
    }
    if (__glintercept_fnptr_glVertexAttribDivisorARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribDivisorARB;
  }
  if (strcmp(name, "glVertexAttribDivisorEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribDivisorEXT == NULL) {
      __glintercept_fnptr_glVertexAttribDivisorEXT = (__ctype_glVertexAttribDivisorEXT) eglGetProcAddr("glVertexAttribDivisorEXT");
    }
    if (__glintercept_fnptr_glVertexAttribDivisorEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribDivisorEXT;
  }
  if (strcmp(name, "glVertexAttribDivisorNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribDivisorNV == NULL) {
      __glintercept_fnptr_glVertexAttribDivisorNV = (__ctype_glVertexAttribDivisorNV) eglGetProcAddr("glVertexAttribDivisorNV");
    }
    if (__glintercept_fnptr_glVertexAttribDivisorNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribDivisorNV;
  }
  if (strcmp(name, "glVertexAttribFormat") == 0) {
    if (__glintercept_fnptr_glVertexAttribFormat == NULL) {
      __glintercept_fnptr_glVertexAttribFormat = (__ctype_glVertexAttribFormat) eglGetProcAddr("glVertexAttribFormat");
    }
    if (__glintercept_fnptr_glVertexAttribFormat == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribFormat;
  }
  if (strcmp(name, "glVertexAttribFormatNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribFormatNV == NULL) {
      __glintercept_fnptr_glVertexAttribFormatNV = (__ctype_glVertexAttribFormatNV) eglGetProcAddr("glVertexAttribFormatNV");
    }
    if (__glintercept_fnptr_glVertexAttribFormatNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribFormatNV;
  }
  if (strcmp(name, "glVertexAttribI1i") == 0) {
    if (__glintercept_fnptr_glVertexAttribI1i == NULL) {
      __glintercept_fnptr_glVertexAttribI1i = (__ctype_glVertexAttribI1i) eglGetProcAddr("glVertexAttribI1i");
    }
    if (__glintercept_fnptr_glVertexAttribI1i == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI1i;
  }
  if (strcmp(name, "glVertexAttribI1iEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribI1iEXT == NULL) {
      __glintercept_fnptr_glVertexAttribI1iEXT = (__ctype_glVertexAttribI1iEXT) eglGetProcAddr("glVertexAttribI1iEXT");
    }
    if (__glintercept_fnptr_glVertexAttribI1iEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI1iEXT;
  }
  if (strcmp(name, "glVertexAttribI1iv") == 0) {
    if (__glintercept_fnptr_glVertexAttribI1iv == NULL) {
      __glintercept_fnptr_glVertexAttribI1iv = (__ctype_glVertexAttribI1iv) eglGetProcAddr("glVertexAttribI1iv");
    }
    if (__glintercept_fnptr_glVertexAttribI1iv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI1iv;
  }
  if (strcmp(name, "glVertexAttribI1ivEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribI1ivEXT == NULL) {
      __glintercept_fnptr_glVertexAttribI1ivEXT = (__ctype_glVertexAttribI1ivEXT) eglGetProcAddr("glVertexAttribI1ivEXT");
    }
    if (__glintercept_fnptr_glVertexAttribI1ivEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI1ivEXT;
  }
  if (strcmp(name, "glVertexAttribI1ui") == 0) {
    if (__glintercept_fnptr_glVertexAttribI1ui == NULL) {
      __glintercept_fnptr_glVertexAttribI1ui = (__ctype_glVertexAttribI1ui) eglGetProcAddr("glVertexAttribI1ui");
    }
    if (__glintercept_fnptr_glVertexAttribI1ui == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI1ui;
  }
  if (strcmp(name, "glVertexAttribI1uiEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribI1uiEXT == NULL) {
      __glintercept_fnptr_glVertexAttribI1uiEXT = (__ctype_glVertexAttribI1uiEXT) eglGetProcAddr("glVertexAttribI1uiEXT");
    }
    if (__glintercept_fnptr_glVertexAttribI1uiEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI1uiEXT;
  }
  if (strcmp(name, "glVertexAttribI1uiv") == 0) {
    if (__glintercept_fnptr_glVertexAttribI1uiv == NULL) {
      __glintercept_fnptr_glVertexAttribI1uiv = (__ctype_glVertexAttribI1uiv) eglGetProcAddr("glVertexAttribI1uiv");
    }
    if (__glintercept_fnptr_glVertexAttribI1uiv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI1uiv;
  }
  if (strcmp(name, "glVertexAttribI1uivEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribI1uivEXT == NULL) {
      __glintercept_fnptr_glVertexAttribI1uivEXT = (__ctype_glVertexAttribI1uivEXT) eglGetProcAddr("glVertexAttribI1uivEXT");
    }
    if (__glintercept_fnptr_glVertexAttribI1uivEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI1uivEXT;
  }
  if (strcmp(name, "glVertexAttribI2i") == 0) {
    if (__glintercept_fnptr_glVertexAttribI2i == NULL) {
      __glintercept_fnptr_glVertexAttribI2i = (__ctype_glVertexAttribI2i) eglGetProcAddr("glVertexAttribI2i");
    }
    if (__glintercept_fnptr_glVertexAttribI2i == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI2i;
  }
  if (strcmp(name, "glVertexAttribI2iEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribI2iEXT == NULL) {
      __glintercept_fnptr_glVertexAttribI2iEXT = (__ctype_glVertexAttribI2iEXT) eglGetProcAddr("glVertexAttribI2iEXT");
    }
    if (__glintercept_fnptr_glVertexAttribI2iEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI2iEXT;
  }
  if (strcmp(name, "glVertexAttribI2iv") == 0) {
    if (__glintercept_fnptr_glVertexAttribI2iv == NULL) {
      __glintercept_fnptr_glVertexAttribI2iv = (__ctype_glVertexAttribI2iv) eglGetProcAddr("glVertexAttribI2iv");
    }
    if (__glintercept_fnptr_glVertexAttribI2iv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI2iv;
  }
  if (strcmp(name, "glVertexAttribI2ivEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribI2ivEXT == NULL) {
      __glintercept_fnptr_glVertexAttribI2ivEXT = (__ctype_glVertexAttribI2ivEXT) eglGetProcAddr("glVertexAttribI2ivEXT");
    }
    if (__glintercept_fnptr_glVertexAttribI2ivEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI2ivEXT;
  }
  if (strcmp(name, "glVertexAttribI2ui") == 0) {
    if (__glintercept_fnptr_glVertexAttribI2ui == NULL) {
      __glintercept_fnptr_glVertexAttribI2ui = (__ctype_glVertexAttribI2ui) eglGetProcAddr("glVertexAttribI2ui");
    }
    if (__glintercept_fnptr_glVertexAttribI2ui == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI2ui;
  }
  if (strcmp(name, "glVertexAttribI2uiEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribI2uiEXT == NULL) {
      __glintercept_fnptr_glVertexAttribI2uiEXT = (__ctype_glVertexAttribI2uiEXT) eglGetProcAddr("glVertexAttribI2uiEXT");
    }
    if (__glintercept_fnptr_glVertexAttribI2uiEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI2uiEXT;
  }
  if (strcmp(name, "glVertexAttribI2uiv") == 0) {
    if (__glintercept_fnptr_glVertexAttribI2uiv == NULL) {
      __glintercept_fnptr_glVertexAttribI2uiv = (__ctype_glVertexAttribI2uiv) eglGetProcAddr("glVertexAttribI2uiv");
    }
    if (__glintercept_fnptr_glVertexAttribI2uiv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI2uiv;
  }
  if (strcmp(name, "glVertexAttribI2uivEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribI2uivEXT == NULL) {
      __glintercept_fnptr_glVertexAttribI2uivEXT = (__ctype_glVertexAttribI2uivEXT) eglGetProcAddr("glVertexAttribI2uivEXT");
    }
    if (__glintercept_fnptr_glVertexAttribI2uivEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI2uivEXT;
  }
  if (strcmp(name, "glVertexAttribI3i") == 0) {
    if (__glintercept_fnptr_glVertexAttribI3i == NULL) {
      __glintercept_fnptr_glVertexAttribI3i = (__ctype_glVertexAttribI3i) eglGetProcAddr("glVertexAttribI3i");
    }
    if (__glintercept_fnptr_glVertexAttribI3i == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI3i;
  }
  if (strcmp(name, "glVertexAttribI3iEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribI3iEXT == NULL) {
      __glintercept_fnptr_glVertexAttribI3iEXT = (__ctype_glVertexAttribI3iEXT) eglGetProcAddr("glVertexAttribI3iEXT");
    }
    if (__glintercept_fnptr_glVertexAttribI3iEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI3iEXT;
  }
  if (strcmp(name, "glVertexAttribI3iv") == 0) {
    if (__glintercept_fnptr_glVertexAttribI3iv == NULL) {
      __glintercept_fnptr_glVertexAttribI3iv = (__ctype_glVertexAttribI3iv) eglGetProcAddr("glVertexAttribI3iv");
    }
    if (__glintercept_fnptr_glVertexAttribI3iv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI3iv;
  }
  if (strcmp(name, "glVertexAttribI3ivEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribI3ivEXT == NULL) {
      __glintercept_fnptr_glVertexAttribI3ivEXT = (__ctype_glVertexAttribI3ivEXT) eglGetProcAddr("glVertexAttribI3ivEXT");
    }
    if (__glintercept_fnptr_glVertexAttribI3ivEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI3ivEXT;
  }
  if (strcmp(name, "glVertexAttribI3ui") == 0) {
    if (__glintercept_fnptr_glVertexAttribI3ui == NULL) {
      __glintercept_fnptr_glVertexAttribI3ui = (__ctype_glVertexAttribI3ui) eglGetProcAddr("glVertexAttribI3ui");
    }
    if (__glintercept_fnptr_glVertexAttribI3ui == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI3ui;
  }
  if (strcmp(name, "glVertexAttribI3uiEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribI3uiEXT == NULL) {
      __glintercept_fnptr_glVertexAttribI3uiEXT = (__ctype_glVertexAttribI3uiEXT) eglGetProcAddr("glVertexAttribI3uiEXT");
    }
    if (__glintercept_fnptr_glVertexAttribI3uiEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI3uiEXT;
  }
  if (strcmp(name, "glVertexAttribI3uiv") == 0) {
    if (__glintercept_fnptr_glVertexAttribI3uiv == NULL) {
      __glintercept_fnptr_glVertexAttribI3uiv = (__ctype_glVertexAttribI3uiv) eglGetProcAddr("glVertexAttribI3uiv");
    }
    if (__glintercept_fnptr_glVertexAttribI3uiv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI3uiv;
  }
  if (strcmp(name, "glVertexAttribI3uivEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribI3uivEXT == NULL) {
      __glintercept_fnptr_glVertexAttribI3uivEXT = (__ctype_glVertexAttribI3uivEXT) eglGetProcAddr("glVertexAttribI3uivEXT");
    }
    if (__glintercept_fnptr_glVertexAttribI3uivEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI3uivEXT;
  }
  if (strcmp(name, "glVertexAttribI4bv") == 0) {
    if (__glintercept_fnptr_glVertexAttribI4bv == NULL) {
      __glintercept_fnptr_glVertexAttribI4bv = (__ctype_glVertexAttribI4bv) eglGetProcAddr("glVertexAttribI4bv");
    }
    if (__glintercept_fnptr_glVertexAttribI4bv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI4bv;
  }
  if (strcmp(name, "glVertexAttribI4bvEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribI4bvEXT == NULL) {
      __glintercept_fnptr_glVertexAttribI4bvEXT = (__ctype_glVertexAttribI4bvEXT) eglGetProcAddr("glVertexAttribI4bvEXT");
    }
    if (__glintercept_fnptr_glVertexAttribI4bvEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI4bvEXT;
  }
  if (strcmp(name, "glVertexAttribI4i") == 0) {
    if (__glintercept_fnptr_glVertexAttribI4i == NULL) {
      __glintercept_fnptr_glVertexAttribI4i = (__ctype_glVertexAttribI4i) eglGetProcAddr("glVertexAttribI4i");
    }
    if (__glintercept_fnptr_glVertexAttribI4i == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI4i;
  }
  if (strcmp(name, "glVertexAttribI4iEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribI4iEXT == NULL) {
      __glintercept_fnptr_glVertexAttribI4iEXT = (__ctype_glVertexAttribI4iEXT) eglGetProcAddr("glVertexAttribI4iEXT");
    }
    if (__glintercept_fnptr_glVertexAttribI4iEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI4iEXT;
  }
  if (strcmp(name, "glVertexAttribI4iv") == 0) {
    if (__glintercept_fnptr_glVertexAttribI4iv == NULL) {
      __glintercept_fnptr_glVertexAttribI4iv = (__ctype_glVertexAttribI4iv) eglGetProcAddr("glVertexAttribI4iv");
    }
    if (__glintercept_fnptr_glVertexAttribI4iv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI4iv;
  }
  if (strcmp(name, "glVertexAttribI4ivEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribI4ivEXT == NULL) {
      __glintercept_fnptr_glVertexAttribI4ivEXT = (__ctype_glVertexAttribI4ivEXT) eglGetProcAddr("glVertexAttribI4ivEXT");
    }
    if (__glintercept_fnptr_glVertexAttribI4ivEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI4ivEXT;
  }
  if (strcmp(name, "glVertexAttribI4sv") == 0) {
    if (__glintercept_fnptr_glVertexAttribI4sv == NULL) {
      __glintercept_fnptr_glVertexAttribI4sv = (__ctype_glVertexAttribI4sv) eglGetProcAddr("glVertexAttribI4sv");
    }
    if (__glintercept_fnptr_glVertexAttribI4sv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI4sv;
  }
  if (strcmp(name, "glVertexAttribI4svEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribI4svEXT == NULL) {
      __glintercept_fnptr_glVertexAttribI4svEXT = (__ctype_glVertexAttribI4svEXT) eglGetProcAddr("glVertexAttribI4svEXT");
    }
    if (__glintercept_fnptr_glVertexAttribI4svEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI4svEXT;
  }
  if (strcmp(name, "glVertexAttribI4ubv") == 0) {
    if (__glintercept_fnptr_glVertexAttribI4ubv == NULL) {
      __glintercept_fnptr_glVertexAttribI4ubv = (__ctype_glVertexAttribI4ubv) eglGetProcAddr("glVertexAttribI4ubv");
    }
    if (__glintercept_fnptr_glVertexAttribI4ubv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI4ubv;
  }
  if (strcmp(name, "glVertexAttribI4ubvEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribI4ubvEXT == NULL) {
      __glintercept_fnptr_glVertexAttribI4ubvEXT = (__ctype_glVertexAttribI4ubvEXT) eglGetProcAddr("glVertexAttribI4ubvEXT");
    }
    if (__glintercept_fnptr_glVertexAttribI4ubvEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI4ubvEXT;
  }
  if (strcmp(name, "glVertexAttribI4ui") == 0) {
    if (__glintercept_fnptr_glVertexAttribI4ui == NULL) {
      __glintercept_fnptr_glVertexAttribI4ui = (__ctype_glVertexAttribI4ui) eglGetProcAddr("glVertexAttribI4ui");
    }
    if (__glintercept_fnptr_glVertexAttribI4ui == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI4ui;
  }
  if (strcmp(name, "glVertexAttribI4uiEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribI4uiEXT == NULL) {
      __glintercept_fnptr_glVertexAttribI4uiEXT = (__ctype_glVertexAttribI4uiEXT) eglGetProcAddr("glVertexAttribI4uiEXT");
    }
    if (__glintercept_fnptr_glVertexAttribI4uiEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI4uiEXT;
  }
  if (strcmp(name, "glVertexAttribI4uiv") == 0) {
    if (__glintercept_fnptr_glVertexAttribI4uiv == NULL) {
      __glintercept_fnptr_glVertexAttribI4uiv = (__ctype_glVertexAttribI4uiv) eglGetProcAddr("glVertexAttribI4uiv");
    }
    if (__glintercept_fnptr_glVertexAttribI4uiv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI4uiv;
  }
  if (strcmp(name, "glVertexAttribI4uivEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribI4uivEXT == NULL) {
      __glintercept_fnptr_glVertexAttribI4uivEXT = (__ctype_glVertexAttribI4uivEXT) eglGetProcAddr("glVertexAttribI4uivEXT");
    }
    if (__glintercept_fnptr_glVertexAttribI4uivEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI4uivEXT;
  }
  if (strcmp(name, "glVertexAttribI4usv") == 0) {
    if (__glintercept_fnptr_glVertexAttribI4usv == NULL) {
      __glintercept_fnptr_glVertexAttribI4usv = (__ctype_glVertexAttribI4usv) eglGetProcAddr("glVertexAttribI4usv");
    }
    if (__glintercept_fnptr_glVertexAttribI4usv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI4usv;
  }
  if (strcmp(name, "glVertexAttribI4usvEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribI4usvEXT == NULL) {
      __glintercept_fnptr_glVertexAttribI4usvEXT = (__ctype_glVertexAttribI4usvEXT) eglGetProcAddr("glVertexAttribI4usvEXT");
    }
    if (__glintercept_fnptr_glVertexAttribI4usvEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribI4usvEXT;
  }
  if (strcmp(name, "glVertexAttribIFormat") == 0) {
    if (__glintercept_fnptr_glVertexAttribIFormat == NULL) {
      __glintercept_fnptr_glVertexAttribIFormat = (__ctype_glVertexAttribIFormat) eglGetProcAddr("glVertexAttribIFormat");
    }
    if (__glintercept_fnptr_glVertexAttribIFormat == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribIFormat;
  }
  if (strcmp(name, "glVertexAttribIFormatNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribIFormatNV == NULL) {
      __glintercept_fnptr_glVertexAttribIFormatNV = (__ctype_glVertexAttribIFormatNV) eglGetProcAddr("glVertexAttribIFormatNV");
    }
    if (__glintercept_fnptr_glVertexAttribIFormatNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribIFormatNV;
  }
  if (strcmp(name, "glVertexAttribIPointer") == 0) {
    if (__glintercept_fnptr_glVertexAttribIPointer == NULL) {
      __glintercept_fnptr_glVertexAttribIPointer = (__ctype_glVertexAttribIPointer) eglGetProcAddr("glVertexAttribIPointer");
    }
    if (__glintercept_fnptr_glVertexAttribIPointer == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribIPointer;
  }
  if (strcmp(name, "glVertexAttribIPointerEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribIPointerEXT == NULL) {
      __glintercept_fnptr_glVertexAttribIPointerEXT = (__ctype_glVertexAttribIPointerEXT) eglGetProcAddr("glVertexAttribIPointerEXT");
    }
    if (__glintercept_fnptr_glVertexAttribIPointerEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribIPointerEXT;
  }
  if (strcmp(name, "glVertexAttribL1d") == 0) {
    if (__glintercept_fnptr_glVertexAttribL1d == NULL) {
      __glintercept_fnptr_glVertexAttribL1d = (__ctype_glVertexAttribL1d) eglGetProcAddr("glVertexAttribL1d");
    }
    if (__glintercept_fnptr_glVertexAttribL1d == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL1d;
  }
  if (strcmp(name, "glVertexAttribL1dEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribL1dEXT == NULL) {
      __glintercept_fnptr_glVertexAttribL1dEXT = (__ctype_glVertexAttribL1dEXT) eglGetProcAddr("glVertexAttribL1dEXT");
    }
    if (__glintercept_fnptr_glVertexAttribL1dEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL1dEXT;
  }
  if (strcmp(name, "glVertexAttribL1dv") == 0) {
    if (__glintercept_fnptr_glVertexAttribL1dv == NULL) {
      __glintercept_fnptr_glVertexAttribL1dv = (__ctype_glVertexAttribL1dv) eglGetProcAddr("glVertexAttribL1dv");
    }
    if (__glintercept_fnptr_glVertexAttribL1dv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL1dv;
  }
  if (strcmp(name, "glVertexAttribL1dvEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribL1dvEXT == NULL) {
      __glintercept_fnptr_glVertexAttribL1dvEXT = (__ctype_glVertexAttribL1dvEXT) eglGetProcAddr("glVertexAttribL1dvEXT");
    }
    if (__glintercept_fnptr_glVertexAttribL1dvEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL1dvEXT;
  }
  if (strcmp(name, "glVertexAttribL1i64NV") == 0) {
    if (__glintercept_fnptr_glVertexAttribL1i64NV == NULL) {
      __glintercept_fnptr_glVertexAttribL1i64NV = (__ctype_glVertexAttribL1i64NV) eglGetProcAddr("glVertexAttribL1i64NV");
    }
    if (__glintercept_fnptr_glVertexAttribL1i64NV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL1i64NV;
  }
  if (strcmp(name, "glVertexAttribL1i64vNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribL1i64vNV == NULL) {
      __glintercept_fnptr_glVertexAttribL1i64vNV = (__ctype_glVertexAttribL1i64vNV) eglGetProcAddr("glVertexAttribL1i64vNV");
    }
    if (__glintercept_fnptr_glVertexAttribL1i64vNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL1i64vNV;
  }
  if (strcmp(name, "glVertexAttribL1ui64ARB") == 0) {
    if (__glintercept_fnptr_glVertexAttribL1ui64ARB == NULL) {
      __glintercept_fnptr_glVertexAttribL1ui64ARB = (__ctype_glVertexAttribL1ui64ARB) eglGetProcAddr("glVertexAttribL1ui64ARB");
    }
    if (__glintercept_fnptr_glVertexAttribL1ui64ARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL1ui64ARB;
  }
  if (strcmp(name, "glVertexAttribL1ui64NV") == 0) {
    if (__glintercept_fnptr_glVertexAttribL1ui64NV == NULL) {
      __glintercept_fnptr_glVertexAttribL1ui64NV = (__ctype_glVertexAttribL1ui64NV) eglGetProcAddr("glVertexAttribL1ui64NV");
    }
    if (__glintercept_fnptr_glVertexAttribL1ui64NV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL1ui64NV;
  }
  if (strcmp(name, "glVertexAttribL1ui64vARB") == 0) {
    if (__glintercept_fnptr_glVertexAttribL1ui64vARB == NULL) {
      __glintercept_fnptr_glVertexAttribL1ui64vARB = (__ctype_glVertexAttribL1ui64vARB) eglGetProcAddr("glVertexAttribL1ui64vARB");
    }
    if (__glintercept_fnptr_glVertexAttribL1ui64vARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL1ui64vARB;
  }
  if (strcmp(name, "glVertexAttribL1ui64vNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribL1ui64vNV == NULL) {
      __glintercept_fnptr_glVertexAttribL1ui64vNV = (__ctype_glVertexAttribL1ui64vNV) eglGetProcAddr("glVertexAttribL1ui64vNV");
    }
    if (__glintercept_fnptr_glVertexAttribL1ui64vNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL1ui64vNV;
  }
  if (strcmp(name, "glVertexAttribL2d") == 0) {
    if (__glintercept_fnptr_glVertexAttribL2d == NULL) {
      __glintercept_fnptr_glVertexAttribL2d = (__ctype_glVertexAttribL2d) eglGetProcAddr("glVertexAttribL2d");
    }
    if (__glintercept_fnptr_glVertexAttribL2d == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL2d;
  }
  if (strcmp(name, "glVertexAttribL2dEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribL2dEXT == NULL) {
      __glintercept_fnptr_glVertexAttribL2dEXT = (__ctype_glVertexAttribL2dEXT) eglGetProcAddr("glVertexAttribL2dEXT");
    }
    if (__glintercept_fnptr_glVertexAttribL2dEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL2dEXT;
  }
  if (strcmp(name, "glVertexAttribL2dv") == 0) {
    if (__glintercept_fnptr_glVertexAttribL2dv == NULL) {
      __glintercept_fnptr_glVertexAttribL2dv = (__ctype_glVertexAttribL2dv) eglGetProcAddr("glVertexAttribL2dv");
    }
    if (__glintercept_fnptr_glVertexAttribL2dv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL2dv;
  }
  if (strcmp(name, "glVertexAttribL2dvEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribL2dvEXT == NULL) {
      __glintercept_fnptr_glVertexAttribL2dvEXT = (__ctype_glVertexAttribL2dvEXT) eglGetProcAddr("glVertexAttribL2dvEXT");
    }
    if (__glintercept_fnptr_glVertexAttribL2dvEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL2dvEXT;
  }
  if (strcmp(name, "glVertexAttribL2i64NV") == 0) {
    if (__glintercept_fnptr_glVertexAttribL2i64NV == NULL) {
      __glintercept_fnptr_glVertexAttribL2i64NV = (__ctype_glVertexAttribL2i64NV) eglGetProcAddr("glVertexAttribL2i64NV");
    }
    if (__glintercept_fnptr_glVertexAttribL2i64NV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL2i64NV;
  }
  if (strcmp(name, "glVertexAttribL2i64vNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribL2i64vNV == NULL) {
      __glintercept_fnptr_glVertexAttribL2i64vNV = (__ctype_glVertexAttribL2i64vNV) eglGetProcAddr("glVertexAttribL2i64vNV");
    }
    if (__glintercept_fnptr_glVertexAttribL2i64vNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL2i64vNV;
  }
  if (strcmp(name, "glVertexAttribL2ui64NV") == 0) {
    if (__glintercept_fnptr_glVertexAttribL2ui64NV == NULL) {
      __glintercept_fnptr_glVertexAttribL2ui64NV = (__ctype_glVertexAttribL2ui64NV) eglGetProcAddr("glVertexAttribL2ui64NV");
    }
    if (__glintercept_fnptr_glVertexAttribL2ui64NV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL2ui64NV;
  }
  if (strcmp(name, "glVertexAttribL2ui64vNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribL2ui64vNV == NULL) {
      __glintercept_fnptr_glVertexAttribL2ui64vNV = (__ctype_glVertexAttribL2ui64vNV) eglGetProcAddr("glVertexAttribL2ui64vNV");
    }
    if (__glintercept_fnptr_glVertexAttribL2ui64vNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL2ui64vNV;
  }
  if (strcmp(name, "glVertexAttribL3d") == 0) {
    if (__glintercept_fnptr_glVertexAttribL3d == NULL) {
      __glintercept_fnptr_glVertexAttribL3d = (__ctype_glVertexAttribL3d) eglGetProcAddr("glVertexAttribL3d");
    }
    if (__glintercept_fnptr_glVertexAttribL3d == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL3d;
  }
  if (strcmp(name, "glVertexAttribL3dEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribL3dEXT == NULL) {
      __glintercept_fnptr_glVertexAttribL3dEXT = (__ctype_glVertexAttribL3dEXT) eglGetProcAddr("glVertexAttribL3dEXT");
    }
    if (__glintercept_fnptr_glVertexAttribL3dEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL3dEXT;
  }
  if (strcmp(name, "glVertexAttribL3dv") == 0) {
    if (__glintercept_fnptr_glVertexAttribL3dv == NULL) {
      __glintercept_fnptr_glVertexAttribL3dv = (__ctype_glVertexAttribL3dv) eglGetProcAddr("glVertexAttribL3dv");
    }
    if (__glintercept_fnptr_glVertexAttribL3dv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL3dv;
  }
  if (strcmp(name, "glVertexAttribL3dvEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribL3dvEXT == NULL) {
      __glintercept_fnptr_glVertexAttribL3dvEXT = (__ctype_glVertexAttribL3dvEXT) eglGetProcAddr("glVertexAttribL3dvEXT");
    }
    if (__glintercept_fnptr_glVertexAttribL3dvEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL3dvEXT;
  }
  if (strcmp(name, "glVertexAttribL3i64NV") == 0) {
    if (__glintercept_fnptr_glVertexAttribL3i64NV == NULL) {
      __glintercept_fnptr_glVertexAttribL3i64NV = (__ctype_glVertexAttribL3i64NV) eglGetProcAddr("glVertexAttribL3i64NV");
    }
    if (__glintercept_fnptr_glVertexAttribL3i64NV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL3i64NV;
  }
  if (strcmp(name, "glVertexAttribL3i64vNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribL3i64vNV == NULL) {
      __glintercept_fnptr_glVertexAttribL3i64vNV = (__ctype_glVertexAttribL3i64vNV) eglGetProcAddr("glVertexAttribL3i64vNV");
    }
    if (__glintercept_fnptr_glVertexAttribL3i64vNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL3i64vNV;
  }
  if (strcmp(name, "glVertexAttribL3ui64NV") == 0) {
    if (__glintercept_fnptr_glVertexAttribL3ui64NV == NULL) {
      __glintercept_fnptr_glVertexAttribL3ui64NV = (__ctype_glVertexAttribL3ui64NV) eglGetProcAddr("glVertexAttribL3ui64NV");
    }
    if (__glintercept_fnptr_glVertexAttribL3ui64NV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL3ui64NV;
  }
  if (strcmp(name, "glVertexAttribL3ui64vNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribL3ui64vNV == NULL) {
      __glintercept_fnptr_glVertexAttribL3ui64vNV = (__ctype_glVertexAttribL3ui64vNV) eglGetProcAddr("glVertexAttribL3ui64vNV");
    }
    if (__glintercept_fnptr_glVertexAttribL3ui64vNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL3ui64vNV;
  }
  if (strcmp(name, "glVertexAttribL4d") == 0) {
    if (__glintercept_fnptr_glVertexAttribL4d == NULL) {
      __glintercept_fnptr_glVertexAttribL4d = (__ctype_glVertexAttribL4d) eglGetProcAddr("glVertexAttribL4d");
    }
    if (__glintercept_fnptr_glVertexAttribL4d == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL4d;
  }
  if (strcmp(name, "glVertexAttribL4dEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribL4dEXT == NULL) {
      __glintercept_fnptr_glVertexAttribL4dEXT = (__ctype_glVertexAttribL4dEXT) eglGetProcAddr("glVertexAttribL4dEXT");
    }
    if (__glintercept_fnptr_glVertexAttribL4dEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL4dEXT;
  }
  if (strcmp(name, "glVertexAttribL4dv") == 0) {
    if (__glintercept_fnptr_glVertexAttribL4dv == NULL) {
      __glintercept_fnptr_glVertexAttribL4dv = (__ctype_glVertexAttribL4dv) eglGetProcAddr("glVertexAttribL4dv");
    }
    if (__glintercept_fnptr_glVertexAttribL4dv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL4dv;
  }
  if (strcmp(name, "glVertexAttribL4dvEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribL4dvEXT == NULL) {
      __glintercept_fnptr_glVertexAttribL4dvEXT = (__ctype_glVertexAttribL4dvEXT) eglGetProcAddr("glVertexAttribL4dvEXT");
    }
    if (__glintercept_fnptr_glVertexAttribL4dvEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL4dvEXT;
  }
  if (strcmp(name, "glVertexAttribL4i64NV") == 0) {
    if (__glintercept_fnptr_glVertexAttribL4i64NV == NULL) {
      __glintercept_fnptr_glVertexAttribL4i64NV = (__ctype_glVertexAttribL4i64NV) eglGetProcAddr("glVertexAttribL4i64NV");
    }
    if (__glintercept_fnptr_glVertexAttribL4i64NV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL4i64NV;
  }
  if (strcmp(name, "glVertexAttribL4i64vNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribL4i64vNV == NULL) {
      __glintercept_fnptr_glVertexAttribL4i64vNV = (__ctype_glVertexAttribL4i64vNV) eglGetProcAddr("glVertexAttribL4i64vNV");
    }
    if (__glintercept_fnptr_glVertexAttribL4i64vNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL4i64vNV;
  }
  if (strcmp(name, "glVertexAttribL4ui64NV") == 0) {
    if (__glintercept_fnptr_glVertexAttribL4ui64NV == NULL) {
      __glintercept_fnptr_glVertexAttribL4ui64NV = (__ctype_glVertexAttribL4ui64NV) eglGetProcAddr("glVertexAttribL4ui64NV");
    }
    if (__glintercept_fnptr_glVertexAttribL4ui64NV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL4ui64NV;
  }
  if (strcmp(name, "glVertexAttribL4ui64vNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribL4ui64vNV == NULL) {
      __glintercept_fnptr_glVertexAttribL4ui64vNV = (__ctype_glVertexAttribL4ui64vNV) eglGetProcAddr("glVertexAttribL4ui64vNV");
    }
    if (__glintercept_fnptr_glVertexAttribL4ui64vNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribL4ui64vNV;
  }
  if (strcmp(name, "glVertexAttribLFormat") == 0) {
    if (__glintercept_fnptr_glVertexAttribLFormat == NULL) {
      __glintercept_fnptr_glVertexAttribLFormat = (__ctype_glVertexAttribLFormat) eglGetProcAddr("glVertexAttribLFormat");
    }
    if (__glintercept_fnptr_glVertexAttribLFormat == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribLFormat;
  }
  if (strcmp(name, "glVertexAttribLFormatNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribLFormatNV == NULL) {
      __glintercept_fnptr_glVertexAttribLFormatNV = (__ctype_glVertexAttribLFormatNV) eglGetProcAddr("glVertexAttribLFormatNV");
    }
    if (__glintercept_fnptr_glVertexAttribLFormatNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribLFormatNV;
  }
  if (strcmp(name, "glVertexAttribLPointer") == 0) {
    if (__glintercept_fnptr_glVertexAttribLPointer == NULL) {
      __glintercept_fnptr_glVertexAttribLPointer = (__ctype_glVertexAttribLPointer) eglGetProcAddr("glVertexAttribLPointer");
    }
    if (__glintercept_fnptr_glVertexAttribLPointer == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribLPointer;
  }
  if (strcmp(name, "glVertexAttribLPointerEXT") == 0) {
    if (__glintercept_fnptr_glVertexAttribLPointerEXT == NULL) {
      __glintercept_fnptr_glVertexAttribLPointerEXT = (__ctype_glVertexAttribLPointerEXT) eglGetProcAddr("glVertexAttribLPointerEXT");
    }
    if (__glintercept_fnptr_glVertexAttribLPointerEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribLPointerEXT;
  }
  if (strcmp(name, "glVertexAttribP1ui") == 0) {
    if (__glintercept_fnptr_glVertexAttribP1ui == NULL) {
      __glintercept_fnptr_glVertexAttribP1ui = (__ctype_glVertexAttribP1ui) eglGetProcAddr("glVertexAttribP1ui");
    }
    if (__glintercept_fnptr_glVertexAttribP1ui == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribP1ui;
  }
  if (strcmp(name, "glVertexAttribP1uiv") == 0) {
    if (__glintercept_fnptr_glVertexAttribP1uiv == NULL) {
      __glintercept_fnptr_glVertexAttribP1uiv = (__ctype_glVertexAttribP1uiv) eglGetProcAddr("glVertexAttribP1uiv");
    }
    if (__glintercept_fnptr_glVertexAttribP1uiv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribP1uiv;
  }
  if (strcmp(name, "glVertexAttribP2ui") == 0) {
    if (__glintercept_fnptr_glVertexAttribP2ui == NULL) {
      __glintercept_fnptr_glVertexAttribP2ui = (__ctype_glVertexAttribP2ui) eglGetProcAddr("glVertexAttribP2ui");
    }
    if (__glintercept_fnptr_glVertexAttribP2ui == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribP2ui;
  }
  if (strcmp(name, "glVertexAttribP2uiv") == 0) {
    if (__glintercept_fnptr_glVertexAttribP2uiv == NULL) {
      __glintercept_fnptr_glVertexAttribP2uiv = (__ctype_glVertexAttribP2uiv) eglGetProcAddr("glVertexAttribP2uiv");
    }
    if (__glintercept_fnptr_glVertexAttribP2uiv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribP2uiv;
  }
  if (strcmp(name, "glVertexAttribP3ui") == 0) {
    if (__glintercept_fnptr_glVertexAttribP3ui == NULL) {
      __glintercept_fnptr_glVertexAttribP3ui = (__ctype_glVertexAttribP3ui) eglGetProcAddr("glVertexAttribP3ui");
    }
    if (__glintercept_fnptr_glVertexAttribP3ui == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribP3ui;
  }
  if (strcmp(name, "glVertexAttribP3uiv") == 0) {
    if (__glintercept_fnptr_glVertexAttribP3uiv == NULL) {
      __glintercept_fnptr_glVertexAttribP3uiv = (__ctype_glVertexAttribP3uiv) eglGetProcAddr("glVertexAttribP3uiv");
    }
    if (__glintercept_fnptr_glVertexAttribP3uiv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribP3uiv;
  }
  if (strcmp(name, "glVertexAttribP4ui") == 0) {
    if (__glintercept_fnptr_glVertexAttribP4ui == NULL) {
      __glintercept_fnptr_glVertexAttribP4ui = (__ctype_glVertexAttribP4ui) eglGetProcAddr("glVertexAttribP4ui");
    }
    if (__glintercept_fnptr_glVertexAttribP4ui == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribP4ui;
  }
  if (strcmp(name, "glVertexAttribP4uiv") == 0) {
    if (__glintercept_fnptr_glVertexAttribP4uiv == NULL) {
      __glintercept_fnptr_glVertexAttribP4uiv = (__ctype_glVertexAttribP4uiv) eglGetProcAddr("glVertexAttribP4uiv");
    }
    if (__glintercept_fnptr_glVertexAttribP4uiv == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribP4uiv;
  }
  if (strcmp(name, "glVertexAttribParameteriAMD") == 0) {
    if (__glintercept_fnptr_glVertexAttribParameteriAMD == NULL) {
      __glintercept_fnptr_glVertexAttribParameteriAMD = (__ctype_glVertexAttribParameteriAMD) eglGetProcAddr("glVertexAttribParameteriAMD");
    }
    if (__glintercept_fnptr_glVertexAttribParameteriAMD == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribParameteriAMD;
  }
  if (strcmp(name, "glVertexAttribPointer") == 0) {
    if (__glintercept_fnptr_glVertexAttribPointer == NULL) {
      __glintercept_fnptr_glVertexAttribPointer = (__ctype_glVertexAttribPointer) eglGetProcAddr("glVertexAttribPointer");
    }
    if (__glintercept_fnptr_glVertexAttribPointer == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribPointer;
  }
  if (strcmp(name, "glVertexAttribPointerARB") == 0) {
    if (__glintercept_fnptr_glVertexAttribPointerARB == NULL) {
      __glintercept_fnptr_glVertexAttribPointerARB = (__ctype_glVertexAttribPointerARB) eglGetProcAddr("glVertexAttribPointerARB");
    }
    if (__glintercept_fnptr_glVertexAttribPointerARB == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribPointerARB;
  }
  if (strcmp(name, "glVertexAttribPointerNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribPointerNV == NULL) {
      __glintercept_fnptr_glVertexAttribPointerNV = (__ctype_glVertexAttribPointerNV) eglGetProcAddr("glVertexAttribPointerNV");
    }
    if (__glintercept_fnptr_glVertexAttribPointerNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribPointerNV;
  }
  if (strcmp(name, "glVertexAttribs1dvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribs1dvNV == NULL) {
      __glintercept_fnptr_glVertexAttribs1dvNV = (__ctype_glVertexAttribs1dvNV) eglGetProcAddr("glVertexAttribs1dvNV");
    }
    if (__glintercept_fnptr_glVertexAttribs1dvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribs1dvNV;
  }
  if (strcmp(name, "glVertexAttribs1fvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribs1fvNV == NULL) {
      __glintercept_fnptr_glVertexAttribs1fvNV = (__ctype_glVertexAttribs1fvNV) eglGetProcAddr("glVertexAttribs1fvNV");
    }
    if (__glintercept_fnptr_glVertexAttribs1fvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribs1fvNV;
  }
  if (strcmp(name, "glVertexAttribs1hvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribs1hvNV == NULL) {
      __glintercept_fnptr_glVertexAttribs1hvNV = (__ctype_glVertexAttribs1hvNV) eglGetProcAddr("glVertexAttribs1hvNV");
    }
    if (__glintercept_fnptr_glVertexAttribs1hvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribs1hvNV;
  }
  if (strcmp(name, "glVertexAttribs1svNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribs1svNV == NULL) {
      __glintercept_fnptr_glVertexAttribs1svNV = (__ctype_glVertexAttribs1svNV) eglGetProcAddr("glVertexAttribs1svNV");
    }
    if (__glintercept_fnptr_glVertexAttribs1svNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribs1svNV;
  }
  if (strcmp(name, "glVertexAttribs2dvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribs2dvNV == NULL) {
      __glintercept_fnptr_glVertexAttribs2dvNV = (__ctype_glVertexAttribs2dvNV) eglGetProcAddr("glVertexAttribs2dvNV");
    }
    if (__glintercept_fnptr_glVertexAttribs2dvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribs2dvNV;
  }
  if (strcmp(name, "glVertexAttribs2fvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribs2fvNV == NULL) {
      __glintercept_fnptr_glVertexAttribs2fvNV = (__ctype_glVertexAttribs2fvNV) eglGetProcAddr("glVertexAttribs2fvNV");
    }
    if (__glintercept_fnptr_glVertexAttribs2fvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribs2fvNV;
  }
  if (strcmp(name, "glVertexAttribs2hvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribs2hvNV == NULL) {
      __glintercept_fnptr_glVertexAttribs2hvNV = (__ctype_glVertexAttribs2hvNV) eglGetProcAddr("glVertexAttribs2hvNV");
    }
    if (__glintercept_fnptr_glVertexAttribs2hvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribs2hvNV;
  }
  if (strcmp(name, "glVertexAttribs2svNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribs2svNV == NULL) {
      __glintercept_fnptr_glVertexAttribs2svNV = (__ctype_glVertexAttribs2svNV) eglGetProcAddr("glVertexAttribs2svNV");
    }
    if (__glintercept_fnptr_glVertexAttribs2svNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribs2svNV;
  }
  if (strcmp(name, "glVertexAttribs3dvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribs3dvNV == NULL) {
      __glintercept_fnptr_glVertexAttribs3dvNV = (__ctype_glVertexAttribs3dvNV) eglGetProcAddr("glVertexAttribs3dvNV");
    }
    if (__glintercept_fnptr_glVertexAttribs3dvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribs3dvNV;
  }
  if (strcmp(name, "glVertexAttribs3fvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribs3fvNV == NULL) {
      __glintercept_fnptr_glVertexAttribs3fvNV = (__ctype_glVertexAttribs3fvNV) eglGetProcAddr("glVertexAttribs3fvNV");
    }
    if (__glintercept_fnptr_glVertexAttribs3fvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribs3fvNV;
  }
  if (strcmp(name, "glVertexAttribs3hvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribs3hvNV == NULL) {
      __glintercept_fnptr_glVertexAttribs3hvNV = (__ctype_glVertexAttribs3hvNV) eglGetProcAddr("glVertexAttribs3hvNV");
    }
    if (__glintercept_fnptr_glVertexAttribs3hvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribs3hvNV;
  }
  if (strcmp(name, "glVertexAttribs3svNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribs3svNV == NULL) {
      __glintercept_fnptr_glVertexAttribs3svNV = (__ctype_glVertexAttribs3svNV) eglGetProcAddr("glVertexAttribs3svNV");
    }
    if (__glintercept_fnptr_glVertexAttribs3svNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribs3svNV;
  }
  if (strcmp(name, "glVertexAttribs4dvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribs4dvNV == NULL) {
      __glintercept_fnptr_glVertexAttribs4dvNV = (__ctype_glVertexAttribs4dvNV) eglGetProcAddr("glVertexAttribs4dvNV");
    }
    if (__glintercept_fnptr_glVertexAttribs4dvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribs4dvNV;
  }
  if (strcmp(name, "glVertexAttribs4fvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribs4fvNV == NULL) {
      __glintercept_fnptr_glVertexAttribs4fvNV = (__ctype_glVertexAttribs4fvNV) eglGetProcAddr("glVertexAttribs4fvNV");
    }
    if (__glintercept_fnptr_glVertexAttribs4fvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribs4fvNV;
  }
  if (strcmp(name, "glVertexAttribs4hvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribs4hvNV == NULL) {
      __glintercept_fnptr_glVertexAttribs4hvNV = (__ctype_glVertexAttribs4hvNV) eglGetProcAddr("glVertexAttribs4hvNV");
    }
    if (__glintercept_fnptr_glVertexAttribs4hvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribs4hvNV;
  }
  if (strcmp(name, "glVertexAttribs4svNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribs4svNV == NULL) {
      __glintercept_fnptr_glVertexAttribs4svNV = (__ctype_glVertexAttribs4svNV) eglGetProcAddr("glVertexAttribs4svNV");
    }
    if (__glintercept_fnptr_glVertexAttribs4svNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribs4svNV;
  }
  if (strcmp(name, "glVertexAttribs4ubvNV") == 0) {
    if (__glintercept_fnptr_glVertexAttribs4ubvNV == NULL) {
      __glintercept_fnptr_glVertexAttribs4ubvNV = (__ctype_glVertexAttribs4ubvNV) eglGetProcAddr("glVertexAttribs4ubvNV");
    }
    if (__glintercept_fnptr_glVertexAttribs4ubvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexAttribs4ubvNV;
  }
  if (strcmp(name, "glVertexBindingDivisor") == 0) {
    if (__glintercept_fnptr_glVertexBindingDivisor == NULL) {
      __glintercept_fnptr_glVertexBindingDivisor = (__ctype_glVertexBindingDivisor) eglGetProcAddr("glVertexBindingDivisor");
    }
    if (__glintercept_fnptr_glVertexBindingDivisor == NULL) return NULL;
    return (void*) __glintercept_glVertexBindingDivisor;
  }
  if (strcmp(name, "glVertexBlendARB") == 0) {
    if (__glintercept_fnptr_glVertexBlendARB == NULL) {
      __glintercept_fnptr_glVertexBlendARB = (__ctype_glVertexBlendARB) eglGetProcAddr("glVertexBlendARB");
    }
    if (__glintercept_fnptr_glVertexBlendARB == NULL) return NULL;
    return (void*) __glintercept_glVertexBlendARB;
  }
  if (strcmp(name, "glVertexBlendEnvfATI") == 0) {
    if (__glintercept_fnptr_glVertexBlendEnvfATI == NULL) {
      __glintercept_fnptr_glVertexBlendEnvfATI = (__ctype_glVertexBlendEnvfATI) eglGetProcAddr("glVertexBlendEnvfATI");
    }
    if (__glintercept_fnptr_glVertexBlendEnvfATI == NULL) return NULL;
    return (void*) __glintercept_glVertexBlendEnvfATI;
  }
  if (strcmp(name, "glVertexBlendEnviATI") == 0) {
    if (__glintercept_fnptr_glVertexBlendEnviATI == NULL) {
      __glintercept_fnptr_glVertexBlendEnviATI = (__ctype_glVertexBlendEnviATI) eglGetProcAddr("glVertexBlendEnviATI");
    }
    if (__glintercept_fnptr_glVertexBlendEnviATI == NULL) return NULL;
    return (void*) __glintercept_glVertexBlendEnviATI;
  }
  if (strcmp(name, "glVertexFormatNV") == 0) {
    if (__glintercept_fnptr_glVertexFormatNV == NULL) {
      __glintercept_fnptr_glVertexFormatNV = (__ctype_glVertexFormatNV) eglGetProcAddr("glVertexFormatNV");
    }
    if (__glintercept_fnptr_glVertexFormatNV == NULL) return NULL;
    return (void*) __glintercept_glVertexFormatNV;
  }
  if (strcmp(name, "glVertexP2ui") == 0) {
    if (__glintercept_fnptr_glVertexP2ui == NULL) {
      __glintercept_fnptr_glVertexP2ui = (__ctype_glVertexP2ui) eglGetProcAddr("glVertexP2ui");
    }
    if (__glintercept_fnptr_glVertexP2ui == NULL) return NULL;
    return (void*) __glintercept_glVertexP2ui;
  }
  if (strcmp(name, "glVertexP2uiv") == 0) {
    if (__glintercept_fnptr_glVertexP2uiv == NULL) {
      __glintercept_fnptr_glVertexP2uiv = (__ctype_glVertexP2uiv) eglGetProcAddr("glVertexP2uiv");
    }
    if (__glintercept_fnptr_glVertexP2uiv == NULL) return NULL;
    return (void*) __glintercept_glVertexP2uiv;
  }
  if (strcmp(name, "glVertexP3ui") == 0) {
    if (__glintercept_fnptr_glVertexP3ui == NULL) {
      __glintercept_fnptr_glVertexP3ui = (__ctype_glVertexP3ui) eglGetProcAddr("glVertexP3ui");
    }
    if (__glintercept_fnptr_glVertexP3ui == NULL) return NULL;
    return (void*) __glintercept_glVertexP3ui;
  }
  if (strcmp(name, "glVertexP3uiv") == 0) {
    if (__glintercept_fnptr_glVertexP3uiv == NULL) {
      __glintercept_fnptr_glVertexP3uiv = (__ctype_glVertexP3uiv) eglGetProcAddr("glVertexP3uiv");
    }
    if (__glintercept_fnptr_glVertexP3uiv == NULL) return NULL;
    return (void*) __glintercept_glVertexP3uiv;
  }
  if (strcmp(name, "glVertexP4ui") == 0) {
    if (__glintercept_fnptr_glVertexP4ui == NULL) {
      __glintercept_fnptr_glVertexP4ui = (__ctype_glVertexP4ui) eglGetProcAddr("glVertexP4ui");
    }
    if (__glintercept_fnptr_glVertexP4ui == NULL) return NULL;
    return (void*) __glintercept_glVertexP4ui;
  }
  if (strcmp(name, "glVertexP4uiv") == 0) {
    if (__glintercept_fnptr_glVertexP4uiv == NULL) {
      __glintercept_fnptr_glVertexP4uiv = (__ctype_glVertexP4uiv) eglGetProcAddr("glVertexP4uiv");
    }
    if (__glintercept_fnptr_glVertexP4uiv == NULL) return NULL;
    return (void*) __glintercept_glVertexP4uiv;
  }
  if (strcmp(name, "glVertexPointer") == 0) {
    if (__glintercept_fnptr_glVertexPointer == NULL) {
      __glintercept_fnptr_glVertexPointer = (__ctype_glVertexPointer) eglGetProcAddr("glVertexPointer");
    }
    if (__glintercept_fnptr_glVertexPointer == NULL) return NULL;
    return (void*) __glintercept_glVertexPointer;
  }
  if (strcmp(name, "glVertexPointerEXT") == 0) {
    if (__glintercept_fnptr_glVertexPointerEXT == NULL) {
      __glintercept_fnptr_glVertexPointerEXT = (__ctype_glVertexPointerEXT) eglGetProcAddr("glVertexPointerEXT");
    }
    if (__glintercept_fnptr_glVertexPointerEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexPointerEXT;
  }
  if (strcmp(name, "glVertexPointerListIBM") == 0) {
    if (__glintercept_fnptr_glVertexPointerListIBM == NULL) {
      __glintercept_fnptr_glVertexPointerListIBM = (__ctype_glVertexPointerListIBM) eglGetProcAddr("glVertexPointerListIBM");
    }
    if (__glintercept_fnptr_glVertexPointerListIBM == NULL) return NULL;
    return (void*) __glintercept_glVertexPointerListIBM;
  }
  if (strcmp(name, "glVertexPointervINTEL") == 0) {
    if (__glintercept_fnptr_glVertexPointervINTEL == NULL) {
      __glintercept_fnptr_glVertexPointervINTEL = (__ctype_glVertexPointervINTEL) eglGetProcAddr("glVertexPointervINTEL");
    }
    if (__glintercept_fnptr_glVertexPointervINTEL == NULL) return NULL;
    return (void*) __glintercept_glVertexPointervINTEL;
  }
  if (strcmp(name, "glVertexStream1dATI") == 0) {
    if (__glintercept_fnptr_glVertexStream1dATI == NULL) {
      __glintercept_fnptr_glVertexStream1dATI = (__ctype_glVertexStream1dATI) eglGetProcAddr("glVertexStream1dATI");
    }
    if (__glintercept_fnptr_glVertexStream1dATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream1dATI;
  }
  if (strcmp(name, "glVertexStream1dvATI") == 0) {
    if (__glintercept_fnptr_glVertexStream1dvATI == NULL) {
      __glintercept_fnptr_glVertexStream1dvATI = (__ctype_glVertexStream1dvATI) eglGetProcAddr("glVertexStream1dvATI");
    }
    if (__glintercept_fnptr_glVertexStream1dvATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream1dvATI;
  }
  if (strcmp(name, "glVertexStream1fATI") == 0) {
    if (__glintercept_fnptr_glVertexStream1fATI == NULL) {
      __glintercept_fnptr_glVertexStream1fATI = (__ctype_glVertexStream1fATI) eglGetProcAddr("glVertexStream1fATI");
    }
    if (__glintercept_fnptr_glVertexStream1fATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream1fATI;
  }
  if (strcmp(name, "glVertexStream1fvATI") == 0) {
    if (__glintercept_fnptr_glVertexStream1fvATI == NULL) {
      __glintercept_fnptr_glVertexStream1fvATI = (__ctype_glVertexStream1fvATI) eglGetProcAddr("glVertexStream1fvATI");
    }
    if (__glintercept_fnptr_glVertexStream1fvATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream1fvATI;
  }
  if (strcmp(name, "glVertexStream1iATI") == 0) {
    if (__glintercept_fnptr_glVertexStream1iATI == NULL) {
      __glintercept_fnptr_glVertexStream1iATI = (__ctype_glVertexStream1iATI) eglGetProcAddr("glVertexStream1iATI");
    }
    if (__glintercept_fnptr_glVertexStream1iATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream1iATI;
  }
  if (strcmp(name, "glVertexStream1ivATI") == 0) {
    if (__glintercept_fnptr_glVertexStream1ivATI == NULL) {
      __glintercept_fnptr_glVertexStream1ivATI = (__ctype_glVertexStream1ivATI) eglGetProcAddr("glVertexStream1ivATI");
    }
    if (__glintercept_fnptr_glVertexStream1ivATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream1ivATI;
  }
  if (strcmp(name, "glVertexStream1sATI") == 0) {
    if (__glintercept_fnptr_glVertexStream1sATI == NULL) {
      __glintercept_fnptr_glVertexStream1sATI = (__ctype_glVertexStream1sATI) eglGetProcAddr("glVertexStream1sATI");
    }
    if (__glintercept_fnptr_glVertexStream1sATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream1sATI;
  }
  if (strcmp(name, "glVertexStream1svATI") == 0) {
    if (__glintercept_fnptr_glVertexStream1svATI == NULL) {
      __glintercept_fnptr_glVertexStream1svATI = (__ctype_glVertexStream1svATI) eglGetProcAddr("glVertexStream1svATI");
    }
    if (__glintercept_fnptr_glVertexStream1svATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream1svATI;
  }
  if (strcmp(name, "glVertexStream2dATI") == 0) {
    if (__glintercept_fnptr_glVertexStream2dATI == NULL) {
      __glintercept_fnptr_glVertexStream2dATI = (__ctype_glVertexStream2dATI) eglGetProcAddr("glVertexStream2dATI");
    }
    if (__glintercept_fnptr_glVertexStream2dATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream2dATI;
  }
  if (strcmp(name, "glVertexStream2dvATI") == 0) {
    if (__glintercept_fnptr_glVertexStream2dvATI == NULL) {
      __glintercept_fnptr_glVertexStream2dvATI = (__ctype_glVertexStream2dvATI) eglGetProcAddr("glVertexStream2dvATI");
    }
    if (__glintercept_fnptr_glVertexStream2dvATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream2dvATI;
  }
  if (strcmp(name, "glVertexStream2fATI") == 0) {
    if (__glintercept_fnptr_glVertexStream2fATI == NULL) {
      __glintercept_fnptr_glVertexStream2fATI = (__ctype_glVertexStream2fATI) eglGetProcAddr("glVertexStream2fATI");
    }
    if (__glintercept_fnptr_glVertexStream2fATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream2fATI;
  }
  if (strcmp(name, "glVertexStream2fvATI") == 0) {
    if (__glintercept_fnptr_glVertexStream2fvATI == NULL) {
      __glintercept_fnptr_glVertexStream2fvATI = (__ctype_glVertexStream2fvATI) eglGetProcAddr("glVertexStream2fvATI");
    }
    if (__glintercept_fnptr_glVertexStream2fvATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream2fvATI;
  }
  if (strcmp(name, "glVertexStream2iATI") == 0) {
    if (__glintercept_fnptr_glVertexStream2iATI == NULL) {
      __glintercept_fnptr_glVertexStream2iATI = (__ctype_glVertexStream2iATI) eglGetProcAddr("glVertexStream2iATI");
    }
    if (__glintercept_fnptr_glVertexStream2iATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream2iATI;
  }
  if (strcmp(name, "glVertexStream2ivATI") == 0) {
    if (__glintercept_fnptr_glVertexStream2ivATI == NULL) {
      __glintercept_fnptr_glVertexStream2ivATI = (__ctype_glVertexStream2ivATI) eglGetProcAddr("glVertexStream2ivATI");
    }
    if (__glintercept_fnptr_glVertexStream2ivATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream2ivATI;
  }
  if (strcmp(name, "glVertexStream2sATI") == 0) {
    if (__glintercept_fnptr_glVertexStream2sATI == NULL) {
      __glintercept_fnptr_glVertexStream2sATI = (__ctype_glVertexStream2sATI) eglGetProcAddr("glVertexStream2sATI");
    }
    if (__glintercept_fnptr_glVertexStream2sATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream2sATI;
  }
  if (strcmp(name, "glVertexStream2svATI") == 0) {
    if (__glintercept_fnptr_glVertexStream2svATI == NULL) {
      __glintercept_fnptr_glVertexStream2svATI = (__ctype_glVertexStream2svATI) eglGetProcAddr("glVertexStream2svATI");
    }
    if (__glintercept_fnptr_glVertexStream2svATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream2svATI;
  }
  if (strcmp(name, "glVertexStream3dATI") == 0) {
    if (__glintercept_fnptr_glVertexStream3dATI == NULL) {
      __glintercept_fnptr_glVertexStream3dATI = (__ctype_glVertexStream3dATI) eglGetProcAddr("glVertexStream3dATI");
    }
    if (__glintercept_fnptr_glVertexStream3dATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream3dATI;
  }
  if (strcmp(name, "glVertexStream3dvATI") == 0) {
    if (__glintercept_fnptr_glVertexStream3dvATI == NULL) {
      __glintercept_fnptr_glVertexStream3dvATI = (__ctype_glVertexStream3dvATI) eglGetProcAddr("glVertexStream3dvATI");
    }
    if (__glintercept_fnptr_glVertexStream3dvATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream3dvATI;
  }
  if (strcmp(name, "glVertexStream3fATI") == 0) {
    if (__glintercept_fnptr_glVertexStream3fATI == NULL) {
      __glintercept_fnptr_glVertexStream3fATI = (__ctype_glVertexStream3fATI) eglGetProcAddr("glVertexStream3fATI");
    }
    if (__glintercept_fnptr_glVertexStream3fATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream3fATI;
  }
  if (strcmp(name, "glVertexStream3fvATI") == 0) {
    if (__glintercept_fnptr_glVertexStream3fvATI == NULL) {
      __glintercept_fnptr_glVertexStream3fvATI = (__ctype_glVertexStream3fvATI) eglGetProcAddr("glVertexStream3fvATI");
    }
    if (__glintercept_fnptr_glVertexStream3fvATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream3fvATI;
  }
  if (strcmp(name, "glVertexStream3iATI") == 0) {
    if (__glintercept_fnptr_glVertexStream3iATI == NULL) {
      __glintercept_fnptr_glVertexStream3iATI = (__ctype_glVertexStream3iATI) eglGetProcAddr("glVertexStream3iATI");
    }
    if (__glintercept_fnptr_glVertexStream3iATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream3iATI;
  }
  if (strcmp(name, "glVertexStream3ivATI") == 0) {
    if (__glintercept_fnptr_glVertexStream3ivATI == NULL) {
      __glintercept_fnptr_glVertexStream3ivATI = (__ctype_glVertexStream3ivATI) eglGetProcAddr("glVertexStream3ivATI");
    }
    if (__glintercept_fnptr_glVertexStream3ivATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream3ivATI;
  }
  if (strcmp(name, "glVertexStream3sATI") == 0) {
    if (__glintercept_fnptr_glVertexStream3sATI == NULL) {
      __glintercept_fnptr_glVertexStream3sATI = (__ctype_glVertexStream3sATI) eglGetProcAddr("glVertexStream3sATI");
    }
    if (__glintercept_fnptr_glVertexStream3sATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream3sATI;
  }
  if (strcmp(name, "glVertexStream3svATI") == 0) {
    if (__glintercept_fnptr_glVertexStream3svATI == NULL) {
      __glintercept_fnptr_glVertexStream3svATI = (__ctype_glVertexStream3svATI) eglGetProcAddr("glVertexStream3svATI");
    }
    if (__glintercept_fnptr_glVertexStream3svATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream3svATI;
  }
  if (strcmp(name, "glVertexStream4dATI") == 0) {
    if (__glintercept_fnptr_glVertexStream4dATI == NULL) {
      __glintercept_fnptr_glVertexStream4dATI = (__ctype_glVertexStream4dATI) eglGetProcAddr("glVertexStream4dATI");
    }
    if (__glintercept_fnptr_glVertexStream4dATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream4dATI;
  }
  if (strcmp(name, "glVertexStream4dvATI") == 0) {
    if (__glintercept_fnptr_glVertexStream4dvATI == NULL) {
      __glintercept_fnptr_glVertexStream4dvATI = (__ctype_glVertexStream4dvATI) eglGetProcAddr("glVertexStream4dvATI");
    }
    if (__glintercept_fnptr_glVertexStream4dvATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream4dvATI;
  }
  if (strcmp(name, "glVertexStream4fATI") == 0) {
    if (__glintercept_fnptr_glVertexStream4fATI == NULL) {
      __glintercept_fnptr_glVertexStream4fATI = (__ctype_glVertexStream4fATI) eglGetProcAddr("glVertexStream4fATI");
    }
    if (__glintercept_fnptr_glVertexStream4fATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream4fATI;
  }
  if (strcmp(name, "glVertexStream4fvATI") == 0) {
    if (__glintercept_fnptr_glVertexStream4fvATI == NULL) {
      __glintercept_fnptr_glVertexStream4fvATI = (__ctype_glVertexStream4fvATI) eglGetProcAddr("glVertexStream4fvATI");
    }
    if (__glintercept_fnptr_glVertexStream4fvATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream4fvATI;
  }
  if (strcmp(name, "glVertexStream4iATI") == 0) {
    if (__glintercept_fnptr_glVertexStream4iATI == NULL) {
      __glintercept_fnptr_glVertexStream4iATI = (__ctype_glVertexStream4iATI) eglGetProcAddr("glVertexStream4iATI");
    }
    if (__glintercept_fnptr_glVertexStream4iATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream4iATI;
  }
  if (strcmp(name, "glVertexStream4ivATI") == 0) {
    if (__glintercept_fnptr_glVertexStream4ivATI == NULL) {
      __glintercept_fnptr_glVertexStream4ivATI = (__ctype_glVertexStream4ivATI) eglGetProcAddr("glVertexStream4ivATI");
    }
    if (__glintercept_fnptr_glVertexStream4ivATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream4ivATI;
  }
  if (strcmp(name, "glVertexStream4sATI") == 0) {
    if (__glintercept_fnptr_glVertexStream4sATI == NULL) {
      __glintercept_fnptr_glVertexStream4sATI = (__ctype_glVertexStream4sATI) eglGetProcAddr("glVertexStream4sATI");
    }
    if (__glintercept_fnptr_glVertexStream4sATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream4sATI;
  }
  if (strcmp(name, "glVertexStream4svATI") == 0) {
    if (__glintercept_fnptr_glVertexStream4svATI == NULL) {
      __glintercept_fnptr_glVertexStream4svATI = (__ctype_glVertexStream4svATI) eglGetProcAddr("glVertexStream4svATI");
    }
    if (__glintercept_fnptr_glVertexStream4svATI == NULL) return NULL;
    return (void*) __glintercept_glVertexStream4svATI;
  }
  if (strcmp(name, "glVertexWeightPointerEXT") == 0) {
    if (__glintercept_fnptr_glVertexWeightPointerEXT == NULL) {
      __glintercept_fnptr_glVertexWeightPointerEXT = (__ctype_glVertexWeightPointerEXT) eglGetProcAddr("glVertexWeightPointerEXT");
    }
    if (__glintercept_fnptr_glVertexWeightPointerEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexWeightPointerEXT;
  }
  if (strcmp(name, "glVertexWeightfEXT") == 0) {
    if (__glintercept_fnptr_glVertexWeightfEXT == NULL) {
      __glintercept_fnptr_glVertexWeightfEXT = (__ctype_glVertexWeightfEXT) eglGetProcAddr("glVertexWeightfEXT");
    }
    if (__glintercept_fnptr_glVertexWeightfEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexWeightfEXT;
  }
  if (strcmp(name, "glVertexWeightfvEXT") == 0) {
    if (__glintercept_fnptr_glVertexWeightfvEXT == NULL) {
      __glintercept_fnptr_glVertexWeightfvEXT = (__ctype_glVertexWeightfvEXT) eglGetProcAddr("glVertexWeightfvEXT");
    }
    if (__glintercept_fnptr_glVertexWeightfvEXT == NULL) return NULL;
    return (void*) __glintercept_glVertexWeightfvEXT;
  }
  if (strcmp(name, "glVertexWeighthNV") == 0) {
    if (__glintercept_fnptr_glVertexWeighthNV == NULL) {
      __glintercept_fnptr_glVertexWeighthNV = (__ctype_glVertexWeighthNV) eglGetProcAddr("glVertexWeighthNV");
    }
    if (__glintercept_fnptr_glVertexWeighthNV == NULL) return NULL;
    return (void*) __glintercept_glVertexWeighthNV;
  }
  if (strcmp(name, "glVertexWeighthvNV") == 0) {
    if (__glintercept_fnptr_glVertexWeighthvNV == NULL) {
      __glintercept_fnptr_glVertexWeighthvNV = (__ctype_glVertexWeighthvNV) eglGetProcAddr("glVertexWeighthvNV");
    }
    if (__glintercept_fnptr_glVertexWeighthvNV == NULL) return NULL;
    return (void*) __glintercept_glVertexWeighthvNV;
  }
  if (strcmp(name, "glVideoCaptureNV") == 0) {
    if (__glintercept_fnptr_glVideoCaptureNV == NULL) {
      __glintercept_fnptr_glVideoCaptureNV = (__ctype_glVideoCaptureNV) eglGetProcAddr("glVideoCaptureNV");
    }
    if (__glintercept_fnptr_glVideoCaptureNV == NULL) return NULL;
    return (void*) __glintercept_glVideoCaptureNV;
  }
  if (strcmp(name, "glVideoCaptureStreamParameterdvNV") == 0) {
    if (__glintercept_fnptr_glVideoCaptureStreamParameterdvNV == NULL) {
      __glintercept_fnptr_glVideoCaptureStreamParameterdvNV = (__ctype_glVideoCaptureStreamParameterdvNV) eglGetProcAddr("glVideoCaptureStreamParameterdvNV");
    }
    if (__glintercept_fnptr_glVideoCaptureStreamParameterdvNV == NULL) return NULL;
    return (void*) __glintercept_glVideoCaptureStreamParameterdvNV;
  }
  if (strcmp(name, "glVideoCaptureStreamParameterfvNV") == 0) {
    if (__glintercept_fnptr_glVideoCaptureStreamParameterfvNV == NULL) {
      __glintercept_fnptr_glVideoCaptureStreamParameterfvNV = (__ctype_glVideoCaptureStreamParameterfvNV) eglGetProcAddr("glVideoCaptureStreamParameterfvNV");
    }
    if (__glintercept_fnptr_glVideoCaptureStreamParameterfvNV == NULL) return NULL;
    return (void*) __glintercept_glVideoCaptureStreamParameterfvNV;
  }
  if (strcmp(name, "glVideoCaptureStreamParameterivNV") == 0) {
    if (__glintercept_fnptr_glVideoCaptureStreamParameterivNV == NULL) {
      __glintercept_fnptr_glVideoCaptureStreamParameterivNV = (__ctype_glVideoCaptureStreamParameterivNV) eglGetProcAddr("glVideoCaptureStreamParameterivNV");
    }
    if (__glintercept_fnptr_glVideoCaptureStreamParameterivNV == NULL) return NULL;
    return (void*) __glintercept_glVideoCaptureStreamParameterivNV;
  }
  if (strcmp(name, "glViewport") == 0) {
    if (__glintercept_fnptr_glViewport == NULL) {
      __glintercept_fnptr_glViewport = (__ctype_glViewport) eglGetProcAddr("glViewport");
    }
    if (__glintercept_fnptr_glViewport == NULL) return NULL;
    return (void*) __glintercept_glViewport;
  }
  if (strcmp(name, "glViewportArrayv") == 0) {
    if (__glintercept_fnptr_glViewportArrayv == NULL) {
      __glintercept_fnptr_glViewportArrayv = (__ctype_glViewportArrayv) eglGetProcAddr("glViewportArrayv");
    }
    if (__glintercept_fnptr_glViewportArrayv == NULL) return NULL;
    return (void*) __glintercept_glViewportArrayv;
  }
  if (strcmp(name, "glViewportArrayvNV") == 0) {
    if (__glintercept_fnptr_glViewportArrayvNV == NULL) {
      __glintercept_fnptr_glViewportArrayvNV = (__ctype_glViewportArrayvNV) eglGetProcAddr("glViewportArrayvNV");
    }
    if (__glintercept_fnptr_glViewportArrayvNV == NULL) return NULL;
    return (void*) __glintercept_glViewportArrayvNV;
  }
  if (strcmp(name, "glViewportArrayvOES") == 0) {
    if (__glintercept_fnptr_glViewportArrayvOES == NULL) {
      __glintercept_fnptr_glViewportArrayvOES = (__ctype_glViewportArrayvOES) eglGetProcAddr("glViewportArrayvOES");
    }
    if (__glintercept_fnptr_glViewportArrayvOES == NULL) return NULL;
    return (void*) __glintercept_glViewportArrayvOES;
  }
  if (strcmp(name, "glViewportIndexedf") == 0) {
    if (__glintercept_fnptr_glViewportIndexedf == NULL) {
      __glintercept_fnptr_glViewportIndexedf = (__ctype_glViewportIndexedf) eglGetProcAddr("glViewportIndexedf");
    }
    if (__glintercept_fnptr_glViewportIndexedf == NULL) return NULL;
    return (void*) __glintercept_glViewportIndexedf;
  }
  if (strcmp(name, "glViewportIndexedfOES") == 0) {
    if (__glintercept_fnptr_glViewportIndexedfOES == NULL) {
      __glintercept_fnptr_glViewportIndexedfOES = (__ctype_glViewportIndexedfOES) eglGetProcAddr("glViewportIndexedfOES");
    }
    if (__glintercept_fnptr_glViewportIndexedfOES == NULL) return NULL;
    return (void*) __glintercept_glViewportIndexedfOES;
  }
  if (strcmp(name, "glViewportIndexedfNV") == 0) {
    if (__glintercept_fnptr_glViewportIndexedfNV == NULL) {
      __glintercept_fnptr_glViewportIndexedfNV = (__ctype_glViewportIndexedfNV) eglGetProcAddr("glViewportIndexedfNV");
    }
    if (__glintercept_fnptr_glViewportIndexedfNV == NULL) return NULL;
    return (void*) __glintercept_glViewportIndexedfNV;
  }
  if (strcmp(name, "glViewportIndexedfv") == 0) {
    if (__glintercept_fnptr_glViewportIndexedfv == NULL) {
      __glintercept_fnptr_glViewportIndexedfv = (__ctype_glViewportIndexedfv) eglGetProcAddr("glViewportIndexedfv");
    }
    if (__glintercept_fnptr_glViewportIndexedfv == NULL) return NULL;
    return (void*) __glintercept_glViewportIndexedfv;
  }
  if (strcmp(name, "glViewportIndexedfvOES") == 0) {
    if (__glintercept_fnptr_glViewportIndexedfvOES == NULL) {
      __glintercept_fnptr_glViewportIndexedfvOES = (__ctype_glViewportIndexedfvOES) eglGetProcAddr("glViewportIndexedfvOES");
    }
    if (__glintercept_fnptr_glViewportIndexedfvOES == NULL) return NULL;
    return (void*) __glintercept_glViewportIndexedfvOES;
  }
  if (strcmp(name, "glViewportIndexedfvNV") == 0) {
    if (__glintercept_fnptr_glViewportIndexedfvNV == NULL) {
      __glintercept_fnptr_glViewportIndexedfvNV = (__ctype_glViewportIndexedfvNV) eglGetProcAddr("glViewportIndexedfvNV");
    }
    if (__glintercept_fnptr_glViewportIndexedfvNV == NULL) return NULL;
    return (void*) __glintercept_glViewportIndexedfvNV;
  }
  if (strcmp(name, "glViewportPositionWScaleNV") == 0) {
    if (__glintercept_fnptr_glViewportPositionWScaleNV == NULL) {
      __glintercept_fnptr_glViewportPositionWScaleNV = (__ctype_glViewportPositionWScaleNV) eglGetProcAddr("glViewportPositionWScaleNV");
    }
    if (__glintercept_fnptr_glViewportPositionWScaleNV == NULL) return NULL;
    return (void*) __glintercept_glViewportPositionWScaleNV;
  }
  if (strcmp(name, "glViewportSwizzleNV") == 0) {
    if (__glintercept_fnptr_glViewportSwizzleNV == NULL) {
      __glintercept_fnptr_glViewportSwizzleNV = (__ctype_glViewportSwizzleNV) eglGetProcAddr("glViewportSwizzleNV");
    }
    if (__glintercept_fnptr_glViewportSwizzleNV == NULL) return NULL;
    return (void*) __glintercept_glViewportSwizzleNV;
  }
  if (strcmp(name, "glWaitSemaphoreEXT") == 0) {
    if (__glintercept_fnptr_glWaitSemaphoreEXT == NULL) {
      __glintercept_fnptr_glWaitSemaphoreEXT = (__ctype_glWaitSemaphoreEXT) eglGetProcAddr("glWaitSemaphoreEXT");
    }
    if (__glintercept_fnptr_glWaitSemaphoreEXT == NULL) return NULL;
    return (void*) __glintercept_glWaitSemaphoreEXT;
  }
  if (strcmp(name, "glWaitSemaphoreui64NVX") == 0) {
    if (__glintercept_fnptr_glWaitSemaphoreui64NVX == NULL) {
      __glintercept_fnptr_glWaitSemaphoreui64NVX = (__ctype_glWaitSemaphoreui64NVX) eglGetProcAddr("glWaitSemaphoreui64NVX");
    }
    if (__glintercept_fnptr_glWaitSemaphoreui64NVX == NULL) return NULL;
    return (void*) __glintercept_glWaitSemaphoreui64NVX;
  }
  if (strcmp(name, "glWaitSync") == 0) {
    if (__glintercept_fnptr_glWaitSync == NULL) {
      __glintercept_fnptr_glWaitSync = (__ctype_glWaitSync) eglGetProcAddr("glWaitSync");
    }
    if (__glintercept_fnptr_glWaitSync == NULL) return NULL;
    return (void*) __glintercept_glWaitSync;
  }
  if (strcmp(name, "glWaitSyncAPPLE") == 0) {
    if (__glintercept_fnptr_glWaitSyncAPPLE == NULL) {
      __glintercept_fnptr_glWaitSyncAPPLE = (__ctype_glWaitSyncAPPLE) eglGetProcAddr("glWaitSyncAPPLE");
    }
    if (__glintercept_fnptr_glWaitSyncAPPLE == NULL) return NULL;
    return (void*) __glintercept_glWaitSyncAPPLE;
  }
  if (strcmp(name, "glWeightPathsNV") == 0) {
    if (__glintercept_fnptr_glWeightPathsNV == NULL) {
      __glintercept_fnptr_glWeightPathsNV = (__ctype_glWeightPathsNV) eglGetProcAddr("glWeightPathsNV");
    }
    if (__glintercept_fnptr_glWeightPathsNV == NULL) return NULL;
    return (void*) __glintercept_glWeightPathsNV;
  }
  if (strcmp(name, "glWeightPointerARB") == 0) {
    if (__glintercept_fnptr_glWeightPointerARB == NULL) {
      __glintercept_fnptr_glWeightPointerARB = (__ctype_glWeightPointerARB) eglGetProcAddr("glWeightPointerARB");
    }
    if (__glintercept_fnptr_glWeightPointerARB == NULL) return NULL;
    return (void*) __glintercept_glWeightPointerARB;
  }
  if (strcmp(name, "glWeightPointerOES") == 0) {
    if (__glintercept_fnptr_glWeightPointerOES == NULL) {
      __glintercept_fnptr_glWeightPointerOES = (__ctype_glWeightPointerOES) eglGetProcAddr("glWeightPointerOES");
    }
    if (__glintercept_fnptr_glWeightPointerOES == NULL) return NULL;
    return (void*) __glintercept_glWeightPointerOES;
  }
  if (strcmp(name, "glWeightbvARB") == 0) {
    if (__glintercept_fnptr_glWeightbvARB == NULL) {
      __glintercept_fnptr_glWeightbvARB = (__ctype_glWeightbvARB) eglGetProcAddr("glWeightbvARB");
    }
    if (__glintercept_fnptr_glWeightbvARB == NULL) return NULL;
    return (void*) __glintercept_glWeightbvARB;
  }
  if (strcmp(name, "glWeightdvARB") == 0) {
    if (__glintercept_fnptr_glWeightdvARB == NULL) {
      __glintercept_fnptr_glWeightdvARB = (__ctype_glWeightdvARB) eglGetProcAddr("glWeightdvARB");
    }
    if (__glintercept_fnptr_glWeightdvARB == NULL) return NULL;
    return (void*) __glintercept_glWeightdvARB;
  }
  if (strcmp(name, "glWeightfvARB") == 0) {
    if (__glintercept_fnptr_glWeightfvARB == NULL) {
      __glintercept_fnptr_glWeightfvARB = (__ctype_glWeightfvARB) eglGetProcAddr("glWeightfvARB");
    }
    if (__glintercept_fnptr_glWeightfvARB == NULL) return NULL;
    return (void*) __glintercept_glWeightfvARB;
  }
  if (strcmp(name, "glWeightivARB") == 0) {
    if (__glintercept_fnptr_glWeightivARB == NULL) {
      __glintercept_fnptr_glWeightivARB = (__ctype_glWeightivARB) eglGetProcAddr("glWeightivARB");
    }
    if (__glintercept_fnptr_glWeightivARB == NULL) return NULL;
    return (void*) __glintercept_glWeightivARB;
  }
  if (strcmp(name, "glWeightsvARB") == 0) {
    if (__glintercept_fnptr_glWeightsvARB == NULL) {
      __glintercept_fnptr_glWeightsvARB = (__ctype_glWeightsvARB) eglGetProcAddr("glWeightsvARB");
    }
    if (__glintercept_fnptr_glWeightsvARB == NULL) return NULL;
    return (void*) __glintercept_glWeightsvARB;
  }
  if (strcmp(name, "glWeightubvARB") == 0) {
    if (__glintercept_fnptr_glWeightubvARB == NULL) {
      __glintercept_fnptr_glWeightubvARB = (__ctype_glWeightubvARB) eglGetProcAddr("glWeightubvARB");
    }
    if (__glintercept_fnptr_glWeightubvARB == NULL) return NULL;
    return (void*) __glintercept_glWeightubvARB;
  }
  if (strcmp(name, "glWeightuivARB") == 0) {
    if (__glintercept_fnptr_glWeightuivARB == NULL) {
      __glintercept_fnptr_glWeightuivARB = (__ctype_glWeightuivARB) eglGetProcAddr("glWeightuivARB");
    }
    if (__glintercept_fnptr_glWeightuivARB == NULL) return NULL;
    return (void*) __glintercept_glWeightuivARB;
  }
  if (strcmp(name, "glWeightusvARB") == 0) {
    if (__glintercept_fnptr_glWeightusvARB == NULL) {
      __glintercept_fnptr_glWeightusvARB = (__ctype_glWeightusvARB) eglGetProcAddr("glWeightusvARB");
    }
    if (__glintercept_fnptr_glWeightusvARB == NULL) return NULL;
    return (void*) __glintercept_glWeightusvARB;
  }
  if (strcmp(name, "glWindowPos2d") == 0) {
    if (__glintercept_fnptr_glWindowPos2d == NULL) {
      __glintercept_fnptr_glWindowPos2d = (__ctype_glWindowPos2d) eglGetProcAddr("glWindowPos2d");
    }
    if (__glintercept_fnptr_glWindowPos2d == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2d;
  }
  if (strcmp(name, "glWindowPos2dARB") == 0) {
    if (__glintercept_fnptr_glWindowPos2dARB == NULL) {
      __glintercept_fnptr_glWindowPos2dARB = (__ctype_glWindowPos2dARB) eglGetProcAddr("glWindowPos2dARB");
    }
    if (__glintercept_fnptr_glWindowPos2dARB == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2dARB;
  }
  if (strcmp(name, "glWindowPos2dMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos2dMESA == NULL) {
      __glintercept_fnptr_glWindowPos2dMESA = (__ctype_glWindowPos2dMESA) eglGetProcAddr("glWindowPos2dMESA");
    }
    if (__glintercept_fnptr_glWindowPos2dMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2dMESA;
  }
  if (strcmp(name, "glWindowPos2dv") == 0) {
    if (__glintercept_fnptr_glWindowPos2dv == NULL) {
      __glintercept_fnptr_glWindowPos2dv = (__ctype_glWindowPos2dv) eglGetProcAddr("glWindowPos2dv");
    }
    if (__glintercept_fnptr_glWindowPos2dv == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2dv;
  }
  if (strcmp(name, "glWindowPos2dvARB") == 0) {
    if (__glintercept_fnptr_glWindowPos2dvARB == NULL) {
      __glintercept_fnptr_glWindowPos2dvARB = (__ctype_glWindowPos2dvARB) eglGetProcAddr("glWindowPos2dvARB");
    }
    if (__glintercept_fnptr_glWindowPos2dvARB == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2dvARB;
  }
  if (strcmp(name, "glWindowPos2dvMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos2dvMESA == NULL) {
      __glintercept_fnptr_glWindowPos2dvMESA = (__ctype_glWindowPos2dvMESA) eglGetProcAddr("glWindowPos2dvMESA");
    }
    if (__glintercept_fnptr_glWindowPos2dvMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2dvMESA;
  }
  if (strcmp(name, "glWindowPos2f") == 0) {
    if (__glintercept_fnptr_glWindowPos2f == NULL) {
      __glintercept_fnptr_glWindowPos2f = (__ctype_glWindowPos2f) eglGetProcAddr("glWindowPos2f");
    }
    if (__glintercept_fnptr_glWindowPos2f == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2f;
  }
  if (strcmp(name, "glWindowPos2fARB") == 0) {
    if (__glintercept_fnptr_glWindowPos2fARB == NULL) {
      __glintercept_fnptr_glWindowPos2fARB = (__ctype_glWindowPos2fARB) eglGetProcAddr("glWindowPos2fARB");
    }
    if (__glintercept_fnptr_glWindowPos2fARB == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2fARB;
  }
  if (strcmp(name, "glWindowPos2fMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos2fMESA == NULL) {
      __glintercept_fnptr_glWindowPos2fMESA = (__ctype_glWindowPos2fMESA) eglGetProcAddr("glWindowPos2fMESA");
    }
    if (__glintercept_fnptr_glWindowPos2fMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2fMESA;
  }
  if (strcmp(name, "glWindowPos2fv") == 0) {
    if (__glintercept_fnptr_glWindowPos2fv == NULL) {
      __glintercept_fnptr_glWindowPos2fv = (__ctype_glWindowPos2fv) eglGetProcAddr("glWindowPos2fv");
    }
    if (__glintercept_fnptr_glWindowPos2fv == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2fv;
  }
  if (strcmp(name, "glWindowPos2fvARB") == 0) {
    if (__glintercept_fnptr_glWindowPos2fvARB == NULL) {
      __glintercept_fnptr_glWindowPos2fvARB = (__ctype_glWindowPos2fvARB) eglGetProcAddr("glWindowPos2fvARB");
    }
    if (__glintercept_fnptr_glWindowPos2fvARB == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2fvARB;
  }
  if (strcmp(name, "glWindowPos2fvMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos2fvMESA == NULL) {
      __glintercept_fnptr_glWindowPos2fvMESA = (__ctype_glWindowPos2fvMESA) eglGetProcAddr("glWindowPos2fvMESA");
    }
    if (__glintercept_fnptr_glWindowPos2fvMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2fvMESA;
  }
  if (strcmp(name, "glWindowPos2i") == 0) {
    if (__glintercept_fnptr_glWindowPos2i == NULL) {
      __glintercept_fnptr_glWindowPos2i = (__ctype_glWindowPos2i) eglGetProcAddr("glWindowPos2i");
    }
    if (__glintercept_fnptr_glWindowPos2i == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2i;
  }
  if (strcmp(name, "glWindowPos2iARB") == 0) {
    if (__glintercept_fnptr_glWindowPos2iARB == NULL) {
      __glintercept_fnptr_glWindowPos2iARB = (__ctype_glWindowPos2iARB) eglGetProcAddr("glWindowPos2iARB");
    }
    if (__glintercept_fnptr_glWindowPos2iARB == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2iARB;
  }
  if (strcmp(name, "glWindowPos2iMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos2iMESA == NULL) {
      __glintercept_fnptr_glWindowPos2iMESA = (__ctype_glWindowPos2iMESA) eglGetProcAddr("glWindowPos2iMESA");
    }
    if (__glintercept_fnptr_glWindowPos2iMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2iMESA;
  }
  if (strcmp(name, "glWindowPos2iv") == 0) {
    if (__glintercept_fnptr_glWindowPos2iv == NULL) {
      __glintercept_fnptr_glWindowPos2iv = (__ctype_glWindowPos2iv) eglGetProcAddr("glWindowPos2iv");
    }
    if (__glintercept_fnptr_glWindowPos2iv == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2iv;
  }
  if (strcmp(name, "glWindowPos2ivARB") == 0) {
    if (__glintercept_fnptr_glWindowPos2ivARB == NULL) {
      __glintercept_fnptr_glWindowPos2ivARB = (__ctype_glWindowPos2ivARB) eglGetProcAddr("glWindowPos2ivARB");
    }
    if (__glintercept_fnptr_glWindowPos2ivARB == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2ivARB;
  }
  if (strcmp(name, "glWindowPos2ivMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos2ivMESA == NULL) {
      __glintercept_fnptr_glWindowPos2ivMESA = (__ctype_glWindowPos2ivMESA) eglGetProcAddr("glWindowPos2ivMESA");
    }
    if (__glintercept_fnptr_glWindowPos2ivMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2ivMESA;
  }
  if (strcmp(name, "glWindowPos2s") == 0) {
    if (__glintercept_fnptr_glWindowPos2s == NULL) {
      __glintercept_fnptr_glWindowPos2s = (__ctype_glWindowPos2s) eglGetProcAddr("glWindowPos2s");
    }
    if (__glintercept_fnptr_glWindowPos2s == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2s;
  }
  if (strcmp(name, "glWindowPos2sARB") == 0) {
    if (__glintercept_fnptr_glWindowPos2sARB == NULL) {
      __glintercept_fnptr_glWindowPos2sARB = (__ctype_glWindowPos2sARB) eglGetProcAddr("glWindowPos2sARB");
    }
    if (__glintercept_fnptr_glWindowPos2sARB == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2sARB;
  }
  if (strcmp(name, "glWindowPos2sMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos2sMESA == NULL) {
      __glintercept_fnptr_glWindowPos2sMESA = (__ctype_glWindowPos2sMESA) eglGetProcAddr("glWindowPos2sMESA");
    }
    if (__glintercept_fnptr_glWindowPos2sMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2sMESA;
  }
  if (strcmp(name, "glWindowPos2sv") == 0) {
    if (__glintercept_fnptr_glWindowPos2sv == NULL) {
      __glintercept_fnptr_glWindowPos2sv = (__ctype_glWindowPos2sv) eglGetProcAddr("glWindowPos2sv");
    }
    if (__glintercept_fnptr_glWindowPos2sv == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2sv;
  }
  if (strcmp(name, "glWindowPos2svARB") == 0) {
    if (__glintercept_fnptr_glWindowPos2svARB == NULL) {
      __glintercept_fnptr_glWindowPos2svARB = (__ctype_glWindowPos2svARB) eglGetProcAddr("glWindowPos2svARB");
    }
    if (__glintercept_fnptr_glWindowPos2svARB == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2svARB;
  }
  if (strcmp(name, "glWindowPos2svMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos2svMESA == NULL) {
      __glintercept_fnptr_glWindowPos2svMESA = (__ctype_glWindowPos2svMESA) eglGetProcAddr("glWindowPos2svMESA");
    }
    if (__glintercept_fnptr_glWindowPos2svMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos2svMESA;
  }
  if (strcmp(name, "glWindowPos3d") == 0) {
    if (__glintercept_fnptr_glWindowPos3d == NULL) {
      __glintercept_fnptr_glWindowPos3d = (__ctype_glWindowPos3d) eglGetProcAddr("glWindowPos3d");
    }
    if (__glintercept_fnptr_glWindowPos3d == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3d;
  }
  if (strcmp(name, "glWindowPos3dARB") == 0) {
    if (__glintercept_fnptr_glWindowPos3dARB == NULL) {
      __glintercept_fnptr_glWindowPos3dARB = (__ctype_glWindowPos3dARB) eglGetProcAddr("glWindowPos3dARB");
    }
    if (__glintercept_fnptr_glWindowPos3dARB == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3dARB;
  }
  if (strcmp(name, "glWindowPos3dMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos3dMESA == NULL) {
      __glintercept_fnptr_glWindowPos3dMESA = (__ctype_glWindowPos3dMESA) eglGetProcAddr("glWindowPos3dMESA");
    }
    if (__glintercept_fnptr_glWindowPos3dMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3dMESA;
  }
  if (strcmp(name, "glWindowPos3dv") == 0) {
    if (__glintercept_fnptr_glWindowPos3dv == NULL) {
      __glintercept_fnptr_glWindowPos3dv = (__ctype_glWindowPos3dv) eglGetProcAddr("glWindowPos3dv");
    }
    if (__glintercept_fnptr_glWindowPos3dv == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3dv;
  }
  if (strcmp(name, "glWindowPos3dvARB") == 0) {
    if (__glintercept_fnptr_glWindowPos3dvARB == NULL) {
      __glintercept_fnptr_glWindowPos3dvARB = (__ctype_glWindowPos3dvARB) eglGetProcAddr("glWindowPos3dvARB");
    }
    if (__glintercept_fnptr_glWindowPos3dvARB == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3dvARB;
  }
  if (strcmp(name, "glWindowPos3dvMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos3dvMESA == NULL) {
      __glintercept_fnptr_glWindowPos3dvMESA = (__ctype_glWindowPos3dvMESA) eglGetProcAddr("glWindowPos3dvMESA");
    }
    if (__glintercept_fnptr_glWindowPos3dvMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3dvMESA;
  }
  if (strcmp(name, "glWindowPos3f") == 0) {
    if (__glintercept_fnptr_glWindowPos3f == NULL) {
      __glintercept_fnptr_glWindowPos3f = (__ctype_glWindowPos3f) eglGetProcAddr("glWindowPos3f");
    }
    if (__glintercept_fnptr_glWindowPos3f == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3f;
  }
  if (strcmp(name, "glWindowPos3fARB") == 0) {
    if (__glintercept_fnptr_glWindowPos3fARB == NULL) {
      __glintercept_fnptr_glWindowPos3fARB = (__ctype_glWindowPos3fARB) eglGetProcAddr("glWindowPos3fARB");
    }
    if (__glintercept_fnptr_glWindowPos3fARB == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3fARB;
  }
  if (strcmp(name, "glWindowPos3fMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos3fMESA == NULL) {
      __glintercept_fnptr_glWindowPos3fMESA = (__ctype_glWindowPos3fMESA) eglGetProcAddr("glWindowPos3fMESA");
    }
    if (__glintercept_fnptr_glWindowPos3fMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3fMESA;
  }
  if (strcmp(name, "glWindowPos3fv") == 0) {
    if (__glintercept_fnptr_glWindowPos3fv == NULL) {
      __glintercept_fnptr_glWindowPos3fv = (__ctype_glWindowPos3fv) eglGetProcAddr("glWindowPos3fv");
    }
    if (__glintercept_fnptr_glWindowPos3fv == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3fv;
  }
  if (strcmp(name, "glWindowPos3fvARB") == 0) {
    if (__glintercept_fnptr_glWindowPos3fvARB == NULL) {
      __glintercept_fnptr_glWindowPos3fvARB = (__ctype_glWindowPos3fvARB) eglGetProcAddr("glWindowPos3fvARB");
    }
    if (__glintercept_fnptr_glWindowPos3fvARB == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3fvARB;
  }
  if (strcmp(name, "glWindowPos3fvMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos3fvMESA == NULL) {
      __glintercept_fnptr_glWindowPos3fvMESA = (__ctype_glWindowPos3fvMESA) eglGetProcAddr("glWindowPos3fvMESA");
    }
    if (__glintercept_fnptr_glWindowPos3fvMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3fvMESA;
  }
  if (strcmp(name, "glWindowPos3i") == 0) {
    if (__glintercept_fnptr_glWindowPos3i == NULL) {
      __glintercept_fnptr_glWindowPos3i = (__ctype_glWindowPos3i) eglGetProcAddr("glWindowPos3i");
    }
    if (__glintercept_fnptr_glWindowPos3i == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3i;
  }
  if (strcmp(name, "glWindowPos3iARB") == 0) {
    if (__glintercept_fnptr_glWindowPos3iARB == NULL) {
      __glintercept_fnptr_glWindowPos3iARB = (__ctype_glWindowPos3iARB) eglGetProcAddr("glWindowPos3iARB");
    }
    if (__glintercept_fnptr_glWindowPos3iARB == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3iARB;
  }
  if (strcmp(name, "glWindowPos3iMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos3iMESA == NULL) {
      __glintercept_fnptr_glWindowPos3iMESA = (__ctype_glWindowPos3iMESA) eglGetProcAddr("glWindowPos3iMESA");
    }
    if (__glintercept_fnptr_glWindowPos3iMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3iMESA;
  }
  if (strcmp(name, "glWindowPos3iv") == 0) {
    if (__glintercept_fnptr_glWindowPos3iv == NULL) {
      __glintercept_fnptr_glWindowPos3iv = (__ctype_glWindowPos3iv) eglGetProcAddr("glWindowPos3iv");
    }
    if (__glintercept_fnptr_glWindowPos3iv == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3iv;
  }
  if (strcmp(name, "glWindowPos3ivARB") == 0) {
    if (__glintercept_fnptr_glWindowPos3ivARB == NULL) {
      __glintercept_fnptr_glWindowPos3ivARB = (__ctype_glWindowPos3ivARB) eglGetProcAddr("glWindowPos3ivARB");
    }
    if (__glintercept_fnptr_glWindowPos3ivARB == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3ivARB;
  }
  if (strcmp(name, "glWindowPos3ivMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos3ivMESA == NULL) {
      __glintercept_fnptr_glWindowPos3ivMESA = (__ctype_glWindowPos3ivMESA) eglGetProcAddr("glWindowPos3ivMESA");
    }
    if (__glintercept_fnptr_glWindowPos3ivMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3ivMESA;
  }
  if (strcmp(name, "glWindowPos3s") == 0) {
    if (__glintercept_fnptr_glWindowPos3s == NULL) {
      __glintercept_fnptr_glWindowPos3s = (__ctype_glWindowPos3s) eglGetProcAddr("glWindowPos3s");
    }
    if (__glintercept_fnptr_glWindowPos3s == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3s;
  }
  if (strcmp(name, "glWindowPos3sARB") == 0) {
    if (__glintercept_fnptr_glWindowPos3sARB == NULL) {
      __glintercept_fnptr_glWindowPos3sARB = (__ctype_glWindowPos3sARB) eglGetProcAddr("glWindowPos3sARB");
    }
    if (__glintercept_fnptr_glWindowPos3sARB == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3sARB;
  }
  if (strcmp(name, "glWindowPos3sMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos3sMESA == NULL) {
      __glintercept_fnptr_glWindowPos3sMESA = (__ctype_glWindowPos3sMESA) eglGetProcAddr("glWindowPos3sMESA");
    }
    if (__glintercept_fnptr_glWindowPos3sMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3sMESA;
  }
  if (strcmp(name, "glWindowPos3sv") == 0) {
    if (__glintercept_fnptr_glWindowPos3sv == NULL) {
      __glintercept_fnptr_glWindowPos3sv = (__ctype_glWindowPos3sv) eglGetProcAddr("glWindowPos3sv");
    }
    if (__glintercept_fnptr_glWindowPos3sv == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3sv;
  }
  if (strcmp(name, "glWindowPos3svARB") == 0) {
    if (__glintercept_fnptr_glWindowPos3svARB == NULL) {
      __glintercept_fnptr_glWindowPos3svARB = (__ctype_glWindowPos3svARB) eglGetProcAddr("glWindowPos3svARB");
    }
    if (__glintercept_fnptr_glWindowPos3svARB == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3svARB;
  }
  if (strcmp(name, "glWindowPos3svMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos3svMESA == NULL) {
      __glintercept_fnptr_glWindowPos3svMESA = (__ctype_glWindowPos3svMESA) eglGetProcAddr("glWindowPos3svMESA");
    }
    if (__glintercept_fnptr_glWindowPos3svMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos3svMESA;
  }
  if (strcmp(name, "glWindowPos4dMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos4dMESA == NULL) {
      __glintercept_fnptr_glWindowPos4dMESA = (__ctype_glWindowPos4dMESA) eglGetProcAddr("glWindowPos4dMESA");
    }
    if (__glintercept_fnptr_glWindowPos4dMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos4dMESA;
  }
  if (strcmp(name, "glWindowPos4dvMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos4dvMESA == NULL) {
      __glintercept_fnptr_glWindowPos4dvMESA = (__ctype_glWindowPos4dvMESA) eglGetProcAddr("glWindowPos4dvMESA");
    }
    if (__glintercept_fnptr_glWindowPos4dvMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos4dvMESA;
  }
  if (strcmp(name, "glWindowPos4fMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos4fMESA == NULL) {
      __glintercept_fnptr_glWindowPos4fMESA = (__ctype_glWindowPos4fMESA) eglGetProcAddr("glWindowPos4fMESA");
    }
    if (__glintercept_fnptr_glWindowPos4fMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos4fMESA;
  }
  if (strcmp(name, "glWindowPos4fvMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos4fvMESA == NULL) {
      __glintercept_fnptr_glWindowPos4fvMESA = (__ctype_glWindowPos4fvMESA) eglGetProcAddr("glWindowPos4fvMESA");
    }
    if (__glintercept_fnptr_glWindowPos4fvMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos4fvMESA;
  }
  if (strcmp(name, "glWindowPos4iMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos4iMESA == NULL) {
      __glintercept_fnptr_glWindowPos4iMESA = (__ctype_glWindowPos4iMESA) eglGetProcAddr("glWindowPos4iMESA");
    }
    if (__glintercept_fnptr_glWindowPos4iMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos4iMESA;
  }
  if (strcmp(name, "glWindowPos4ivMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos4ivMESA == NULL) {
      __glintercept_fnptr_glWindowPos4ivMESA = (__ctype_glWindowPos4ivMESA) eglGetProcAddr("glWindowPos4ivMESA");
    }
    if (__glintercept_fnptr_glWindowPos4ivMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos4ivMESA;
  }
  if (strcmp(name, "glWindowPos4sMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos4sMESA == NULL) {
      __glintercept_fnptr_glWindowPos4sMESA = (__ctype_glWindowPos4sMESA) eglGetProcAddr("glWindowPos4sMESA");
    }
    if (__glintercept_fnptr_glWindowPos4sMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos4sMESA;
  }
  if (strcmp(name, "glWindowPos4svMESA") == 0) {
    if (__glintercept_fnptr_glWindowPos4svMESA == NULL) {
      __glintercept_fnptr_glWindowPos4svMESA = (__ctype_glWindowPos4svMESA) eglGetProcAddr("glWindowPos4svMESA");
    }
    if (__glintercept_fnptr_glWindowPos4svMESA == NULL) return NULL;
    return (void*) __glintercept_glWindowPos4svMESA;
  }
  if (strcmp(name, "glWindowRectanglesEXT") == 0) {
    if (__glintercept_fnptr_glWindowRectanglesEXT == NULL) {
      __glintercept_fnptr_glWindowRectanglesEXT = (__ctype_glWindowRectanglesEXT) eglGetProcAddr("glWindowRectanglesEXT");
    }
    if (__glintercept_fnptr_glWindowRectanglesEXT == NULL) return NULL;
    return (void*) __glintercept_glWindowRectanglesEXT;
  }
  if (strcmp(name, "glWriteMaskEXT") == 0) {
    if (__glintercept_fnptr_glWriteMaskEXT == NULL) {
      __glintercept_fnptr_glWriteMaskEXT = (__ctype_glWriteMaskEXT) eglGetProcAddr("glWriteMaskEXT");
    }
    if (__glintercept_fnptr_glWriteMaskEXT == NULL) return NULL;
    return (void*) __glintercept_glWriteMaskEXT;
  }
  if (strcmp(name, "glDrawVkImageNV") == 0) {
    if (__glintercept_fnptr_glDrawVkImageNV == NULL) {
      __glintercept_fnptr_glDrawVkImageNV = (__ctype_glDrawVkImageNV) eglGetProcAddr("glDrawVkImageNV");
    }
    if (__glintercept_fnptr_glDrawVkImageNV == NULL) return NULL;
    return (void*) __glintercept_glDrawVkImageNV;
  }
  if (strcmp(name, "glGetVkProcAddrNV") == 0) {
    if (__glintercept_fnptr_glGetVkProcAddrNV == NULL) {
      __glintercept_fnptr_glGetVkProcAddrNV = (__ctype_glGetVkProcAddrNV) eglGetProcAddr("glGetVkProcAddrNV");
    }
    if (__glintercept_fnptr_glGetVkProcAddrNV == NULL) return NULL;
    return (void*) __glintercept_glGetVkProcAddrNV;
  }
  if (strcmp(name, "glWaitVkSemaphoreNV") == 0) {
    if (__glintercept_fnptr_glWaitVkSemaphoreNV == NULL) {
      __glintercept_fnptr_glWaitVkSemaphoreNV = (__ctype_glWaitVkSemaphoreNV) eglGetProcAddr("glWaitVkSemaphoreNV");
    }
    if (__glintercept_fnptr_glWaitVkSemaphoreNV == NULL) return NULL;
    return (void*) __glintercept_glWaitVkSemaphoreNV;
  }
  if (strcmp(name, "glSignalVkSemaphoreNV") == 0) {
    if (__glintercept_fnptr_glSignalVkSemaphoreNV == NULL) {
      __glintercept_fnptr_glSignalVkSemaphoreNV = (__ctype_glSignalVkSemaphoreNV) eglGetProcAddr("glSignalVkSemaphoreNV");
    }
    if (__glintercept_fnptr_glSignalVkSemaphoreNV == NULL) return NULL;
    return (void*) __glintercept_glSignalVkSemaphoreNV;
  }
  if (strcmp(name, "glSignalVkFenceNV") == 0) {
    if (__glintercept_fnptr_glSignalVkFenceNV == NULL) {
      __glintercept_fnptr_glSignalVkFenceNV = (__ctype_glSignalVkFenceNV) eglGetProcAddr("glSignalVkFenceNV");
    }
    if (__glintercept_fnptr_glSignalVkFenceNV == NULL) return NULL;
    return (void*) __glintercept_glSignalVkFenceNV;
  }
  if (strcmp(name, "glFramebufferParameteriMESA") == 0) {
    if (__glintercept_fnptr_glFramebufferParameteriMESA == NULL) {
      __glintercept_fnptr_glFramebufferParameteriMESA = (__ctype_glFramebufferParameteriMESA) eglGetProcAddr("glFramebufferParameteriMESA");
    }
    if (__glintercept_fnptr_glFramebufferParameteriMESA == NULL) return NULL;
    return (void*) __glintercept_glFramebufferParameteriMESA;
  }
  if (strcmp(name, "glGetFramebufferParameterivMESA") == 0) {
    if (__glintercept_fnptr_glGetFramebufferParameterivMESA == NULL) {
      __glintercept_fnptr_glGetFramebufferParameterivMESA = (__ctype_glGetFramebufferParameterivMESA) eglGetProcAddr("glGetFramebufferParameterivMESA");
    }
    if (__glintercept_fnptr_glGetFramebufferParameterivMESA == NULL) return NULL;
    return (void*) __glintercept_glGetFramebufferParameterivMESA;
  }
  return (void*) 0;
}
